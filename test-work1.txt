Jan 6, 2021
In BetaD AR9531, "iw phy0 set antenna " and "iw dev "$ifname" set channel "$channel" $iw_htmode" need the wlan0 in "DOWN" status otherwise return error. In pMDDL after "wifi down" the wlan0 is in "DOWN" status but in BetaD still in UP status except the very first time after bootup.

In pMDDL lib/netifd/wireless/mac80211.sh, drv_mac80211_teardown() calls mac80211_interface_cleanup(), and the wlan0 is in DOWN status after this call. mac80211_interface_cleanup() does the if down work like this:

mac80211_interface_cleanup() {                    
        local phy="$1"            
 
        for wdev in $(list_phy_interfaces "$phy"); do
                ifconfig "$wdev" down 2>/dev/null
                iw dev "$wdev" del
        done                                        
}

In Beta-D:
mac80211_vap_cleanup() {        
        local service="$1"
        local vaps="$2"  
                      
        for wdev in $vaps; do
                [ "$service" != "none" ] && ubus call ${service} config_remove "{\"iface\":\"$wdev\"}"
                ip link set dev "$wdev" down 2>/dev/null                                       
                iw dev "$wdev" del                                                  
        done                                                                                  
}                                                                                                  
                                                                                           
mac80211_interface_cleanup() {                                                                  
        local phy="$1"                                                              
        local primary_ap=$(uci -q -P /var/state get wireless._${phy}.aplist)
        primary_ap=${primary_ap%% *}
 
        mac80211_vap_cleanup hostapd "${primary_ap}"
        mac80211_vap_cleanup wpa_supplicant "$(uci -q -P /var/state get wireless._${phy}.splist)"
        mac80211_vap_cleanup none "$(uci -q -P /var/state get wireless._${phy}.umlist)"
}   

The root cause is the drv_mac80211_teardown(), where the variable phy passed in is EMPTY. So the mac80211_interface_cleanup() function doesn't do its job correctly.
drv_mac80211_teardown() {
	wireless_process_kill_all

	json_select data
	json_get_vars phy
	json_select ..

	logger "==in drv_mac80211_teardown(), phy=[$phy]====="
	phy="${phy:-phy0}"	# add this to solve the issue.
	mac80211_interface_cleanup "$phy"
	uci -q -P /var/state revert wireless._${phy}
}

=========================

/* Noise power data definitions
 * units are: 4 x dBm - NOISE_PWR_DATA_OFFSET
 * (e.g. -50 = (-50/4 - 90) = -102.5 dBm)
 * range (for 6 signed bits) is (-32 to 31) + offset => -122dBm to -59dBm
 * resolution (2 bits) is 0.25dBm
 */
#define NOISE_PWR_DATA_OFFSET	-90
#define NOISE_PWR_DBM_2_INT(_p)	((((_p) + 3) >> 2) + NOISE_PWR_DATA_OFFSET)
#define N2DBM(_p)		NOISE_PWR_DBM_2_INT(_p)		// this one is used to interpolate.

n2dbm(_p) = (_p + 3) / 4 - 90.

ath9k_hw_getchan_noise():
s8 noise = ATH_DEFAULT_NOISE_FLOOR;	// -92 for pMDDL. -95 for WiFi.

noise = ATH_DEFAULT_NOISE_FLOOR + nf - ATH9K_NF_CAL_NOISE_THRESH (6) - ath9k_hw_get_default_nf(ah, chan, 0);

noise = -92 + nf - 6 - nf_cal = -98 + nf - nf_cal.

Considering the bandwidth compensation:

noise = -98 + nf - nf_cal + delta_bw.

Jan 5, 2021
https://wiki.freebsd.org/dev/ath_hal%284%29/NoiseFloorCalibration
The NF should be calibrated about 1S in noisy environment.

Jan 4, 2021
RSSI reading process.
1. ath_rx_tasklet() ---> a) ath_edma_get_next_rx_buf() ---> ath_edma_get_buffers() ---> ath9k_hw_process_rxdesc_edma().

2. ath9k_hw_process_rxdesc_edma(): Update rs_rssi value.
ath_rx_status *rxs->rs_rssi = MS(rxsp->status5, AR_RxRSSICombined);	// DMA Rx Descriptor Word5. 8bits. -128 means error.

3. ath_rx_tasklet() ---> b) ath9k_rx_skb_preprocess() ---> ath9k_cmn_process_rssi(,struct ath_rx_status *rx_stats,struct ieee80211_rx_status *rxs).
rx_stats->rs_rssi has the RSSI value. rxs is for mac80211 layer. Note here the mac80211 layer data is updated.

    rxs->signal = ah->noise + rx_stats->rs_rssi;	// signal = noise_floor + rssi.
#ifdef CONFIG_STEP_ONEMHZ
    rxs->noise_floor = ah->noise;
    rxs->rssi = rx_stats->rs_rssi;
#endif /* CONFIG_STEP_ONEMHZ */

4. ath_rx_tasklet() ---> c) ieee80211_rx() ---> __ieee80211_rx_handle_packet() ---> ieee80211_prepare_and_rx_handle() ---> ieee80211_invoke_rx_handlers() ---> ieee80211_rx_handlers() ---> ieee80211_rx_h_sta_process():
In this function, the data is updated to each STATION sta_info structure.
struct sta_info *sta = rx->sta;
struct ieee80211_rx_status *status = IEEE80211_SKB_RXCB(skb);

	sta->last_signal = status->signal;
#ifdef CONFIG_STEP_ONEMHZ
        sta->last_noisefloor = status->noise_floor;
        sta->last_rssi = status->rssi;
	ewma_add(&sta->avg_rssi, status->rssi);
#endif /* CONFIG_STEP_ONEMHZ */

5. sta_set_sinfo(struct sta_info *sta, struct station_info *sinfo) 
The data in sta_info is updated to station_info structure.
            sinfo->signal = (s8)sta->last_signal;
            sinfo->noise_floor = (s8)sta->last_noisefloor;
            sinfo->rssi = (s8)sta->last_rssi;
	    sinfo->rssi_avg = (s8)ewma_read(&sta->avg_rssi);
This struct station_info *sinfo is used to show to IW UI by netlink NL80211_STA_INFO_SIGNAL.

========================================================================================================================
Dec 21, 2020
AlphM noisefloor value:
1. iw wlan0 station dump : noise floor:
#ifdef CONFIG_STEP_ONEMHZ
	if (sinfo[NL80211_STA_INFO_NOISE_FLOOR])
		printf("\n\tnoise floor:  \t%d dBm",
			   (int8_t)nla_get_u8(sinfo[NL80211_STA_INFO_NOISE_FLOOR]));
This item was added my MHX. In mac80211, MHX added this:
#ifdef CONFIG_STEP_ONEMHZ
        if (sinfo->filled & STATION_INFO_SIGNAL) {
			nla_put_u8(msg, NL80211_STA_INFO_NOISE_FLOOR,
                   		   sinfo->noise_floor);	// struct station_info *sinfo
			nla_put_u8(msg, NL80211_STA_INFO_RSSI,
				   sinfo->rssi);
        }
		if ((sinfo->filled & STATION_INFO_SIGNAL_AVG) &&
		    nla_put_u8(msg, NL80211_STA_INFO_RSSI_AVG,
			       sinfo->rssi_avg))
			goto nla_put_failure;
#endif

2. In sta_set_sinfo(): sinfo->noise_floor = (s8)sta->last_noisefloor; This value is exposed in debugfs like:
root@UserDevice:~# cat sys/kernel/debug/ieee80211/phy0/netdev\:wlan0/stations/00\:0f\:92\:44\:44\:44/last_noisefloor 
-96

3. In ieee80211_rx_h_sta_process() : sta->last_noisefloor = status->noise_floor; // struct ieee80211_rx_status *status = IEEE80211_SKB_RXCB(skb);
But actually this value was added by MHX too, it's not in original Mac80211.
struct ieee80211_rx_status {
	u64 mactime;
	u32 device_timestamp;
	u32 ampdu_reference;
	u32 flag;
	u16 freq;
	u8 vht_flag;
	u8 rate_idx;
	u8 vht_nss;
	u8 rx_flags;
	u8 band;
	u8 antenna;
	s8 signal;
	u8 chains;
	s8 chain_signal[IEEE80211_MAX_CHAINS];
#ifdef CONFIG_STEP_ONEMHZ
    s8 noise_floor;
    s8 rssi;
	s8 chain_rssi[IEEE80211_MAX_CHAINS];
	s8 chain_rssi_ext[IEEE80211_MAX_CHAINS];
	s8 chain_nf[IEEE80211_MAX_CHAINS];
	s8 chain_nf_ext[IEEE80211_MAX_CHAINS];
	s8 chain_signal_ext[IEEE80211_MAX_CHAINS];
	u16 soc_temp;
#endif /* CONFIG_STEP_ONEMHZ */
	u8 ampdu_delimiter_crc;
};

4. In ath9k_cmn_process_rssi() :
This function is called when a connection is up and runnig. That means this noise_floor is only updated after a connection is established.
#ifdef CONFIG_STEP_ONEMHZ
    rxs->noise_floor = ah->noise;	// struct ieee80211_rx_status *rxs. struct ath_hw *ah = common->ah;
    rxs->rssi = rx_stats->rs_rssi;
#endif /* CONFIG_STEP_ONEMHZ */

5. In ath9k_hw_getnf() : 
5.1 First, ath9k_hw_do_getnf(ah, nfarray) ----(function pointer)-----> ar9003_hw_do_getnf(struct ath_hw *ah, int16_t nfarray[NUM_NF_READINGS]).
			nf = MS(REG_READ(ah, ah->nf_regs[i]),
					 AR_PHY_CH_MINCCA_PWR);
			nfarray[i] = sign_extend32(nf, 8);
The nfarray[] is filled with REG readings. The registers are:
	static const u32 ar9300_cca_regs[6] = {
		AR_PHY_CCA_0,	// 9E1C
		AR_PHY_CCA_1,	// AE1C
		AR_PHY_CCA_2,	// BE1C
		AR_PHY_EXT_CCA,		// 9830
		AR_PHY_EXT_CCA_1,	// A830
		AR_PHY_EXT_CCA_2,	// B830
	};

	memcpy(ah->nf_regs, ar9300_cca_regs, sizeof(ah->nf_regs));

According to the naming, noise_floor is actually the AR_PHY_CH_MINCCA_PWR from the AR_PHY_CCA_0 register. 

5.2 ath9k_hw_update_nfcal_hist_buffer(ah, caldata, nfarray); Update the ah->caldata by the new nfarray[].

5.3
chan->noisefloor = h[0].privNF;
ah->noise = ath9k_hw_getchan_noise(ah, chan, chan->noisefloor); 

This value is updated by ath9k_hw_getchan_noise() and exposed to debugfs dump_nfcal
root@UserDevice:~# cat sys/kernel/debug/ieee80211/phy0/ath9k/dump_nfcal 
Channel Noise Floor : -96	// "Channel Noise Floor : %d\n", ah->noise);
Chain | privNF | # Readings | NF Readings
 0       -113    1               -113
 1       -113    1               -113
This input parameter chan->noisefloor is updated by NF calibrateion routine too.


Dec 16, 2020
On Alpha-M STA it complains
[18947.270000] wlan0: authenticate with 00:0f:92:44:44:44
[18947.270000] wlan0: Wrong control channel: center-freq: 2486 ht-cfreq: 1718 ht->primary_chan: 94 band: 0 - Disabling HT
[18947.270000] ath: phy0: Set channel: 2486 MHz width: 1

AP and STA can only connect with 11g rates.

Dec 15, 2020
Alpha-M : IF=2486(channel=862, 0x35E). In BSS onle 1 byte is transmitted to STA, so the STA only sees 0x5e(channel=94).

Dec 14, 2020
"iw phy0 info" command does NOT use NL80211_ATTR_SPLIT_WIPHY_DUMP because static bool nl80211_has_split_wiphy = false;


--- a/compat/stepOne.c
+++ b/compat/stepOne.c
         return 0;
     }
 
#if defined CONFIG_MHX_PMDDL2450_MULTI_BAND
     chan = 862;      // MHXJL force to channel862 = 2486MHz.
 #endif
 
         return -1;
     }
 
#if defined CONFIG_MHX_PMDDL2450_MULTI_BAND
     freq = 2486;     // MHXJL force to channel862 = 2486MHz.
 #endif
This change made the Alpha-M Linux drier connect and work. But for "iw phy0 info", it constantly returns same IF chanel f=2486. Need further tuneup.


Dec 10, 2020
IF freq setting function in Alpha-M(and alpha-k I believe). In Card.c, should disable the nart.out be able to change the LO frequency:

int CardResetIfNeeded(int frequency, int txchain, int rxchain, int force, int bandwidth)
{
	int start;
	int error;
	int bandwidthUse,bandwidthTemp;
	int rxchainuse,txchainuse;
	int tfrequency;
	int nchain;
	struct ath_hal_9300 *ahp = AH9300(AH);
	int freq_save = frequency;

	error=0;
    if(!CardValid())
	{
		return -1;
	}

#if defined CONFIG_MHX_PMDDL2450_MULTI_BAND	 
	/////startSynthesizer(frequency, CHIP_IF_FREQ); // Disable to make IF change work. Disable this because nart.out doesn't know what the IF freq is changed to by mcart. only open it for calibration.
	frequency = CHIP_IF_FREQ;
#endif

But this should be in use for calibration. 

Dec 9, 2020
Convert AlphaK to AlphaM:
VendorId=MICROHARD
MHX_PRODUCT=pDDL2458
MHX_PRODUCTMODE=7
bootargs=board=MHK_Alpha console=ttyS0,115200 root=31:4 rootfstype=squashfs,jffs2 noinitrd loglevel=0 mtdparts=spi0.0:512k(u-
boot)ro,256k(u-boo-env),256k(u-boot-env-bak),2M(kernel),25344k(rootfs),4M(mhs-data),256(art),2M(kernel-bak),25344k(rootfs-bak
),4608k(NVM-zone),768k(pro-zne)

Use tftpd to upgrad for the first time. Note "board=MHK_Alpha".

Dec 7, 2020
drv_mac80211_init_device_config():
drv_mac80211_init_iface_config():
Must use config_add_string (or equivalent) function to add this option to json so that ubus call network.wireless status can show them. Then json_get_vars() is able to get it.

Dec 1, 2020
BetaD , arpnat build in kernel not in module.
WDS=0 : PC1--->AP~~~~STA--->PC2, tcp t/p is 20.6Mbps, CPU 85% idle on STA, 80% idle on AP
WDS=1 : PC1--->AP~~~~STA--->PC2, tcp t/p is 22.1 Mbps, CPU 85% idle on STA, 80% idle on AP
Looks like arpnat doesn't consume much CPU time. But WDS=1 does have about 8% higher t/p.  

Nov 23, 2020
G3.5 BetaD. WDS=1 works well. When AP and STA WDS=0, the AP can ping a G5 unit (WDS=0) but doesn't ping a BetaD unit.
1. Modify package/network/services/hostapd/files/hostapd.sh to accept WDS=0 bridge.
2. In mac80211 driver, remove the restrition of bridging STA with 3addr mode.
After these 2 modifications, still the pair of BetaD doesn't ping. The AP side hostapd debug info is like:

Mon Nov 16 01:00:00 2020 daemon.debug hostapd: nl80211: BSS Event 83 (NL80211_CMD_UNEXPECTED_FRAME) received for wlan0
Mon Nov 16 01:00:00 2020 daemon.debug hostapd: wlan0: Event RX_FROM_UNKNOWN (17) received
Mon Nov 16 01:00:00 2020 daemon.debug hostapd: Data/PS-poll frame from not associated STA 00:0f:92:0a:2e:3d
Mon Nov 16 01:00:00 2020 daemon.debug hostapd: nl80211: send_mlme - da=00:0f:92:0a:2e:3d noack=0 freq=0 no_cck=0 offchanok=0
 wait_time=0 no_encrypt=0 fc=0xc0 (WLAN_FC_STYPE_DEAUTH) nlmode=3
Mon Nov 16 01:00:00 2020 daemon.debug hostapd: nl80211: send_mlme - Use bss->freq=2462
Mon Nov 16 01:00:00 2020 daemon.debug hostapd: nl80211: send_mlme -> send_frame_cmd
Mon Nov 16 01:00:00 2020 daemon.debug hostapd: nl80211: Drop oldest pending send frame cookie 0x0
Mon Nov 16 01:00:00 2020 daemon.debug hostapd: nl80211: Drv Event 60 (NL80211_CMD_FRAME_TX_STATUS) received for wlan0
Mon Nov 16 01:00:00 2020 daemon.debug hostapd: nl80211: Frame TX status event A1=00:0f:92:0a:2e:3d stype=12 cookie=0x2c ack=
0
Mon Nov 16 01:00:00 2020 daemon.debug hostapd: wlan0: Event TX_STATUS (16) received
Mon Nov 16 01:00:00 2020 daemon.debug hostapd: mgmt::deauth cb
Mon Nov 16 01:00:00 2020 daemon.debug hostapd: handle_deauth_cb: STA 00:0f:92:0a:2e:3d not found

Checked that in STA, the br-lan macaddr is 00:0f:92:0a:2e:3d while the wlan0 macaddr is 00:0F:92:FC:0D:E8. 

3. When WDS=0, the br-lan should be the wlan0's macaddr. Port the hotplug script to do this:
package/kernel/mac80211/files/etc/hotplug.d/net/20-client_bridge. Then ping works.

4. Need the target/linux/ramips/patches-4.14/999-0101-mhx-ebtables-arpnat.patch for arpnat. The patch applied but 
root@BetaD-ART:~# ebtables -t nat -A PREROUTING  --in-interface  $INTERFACE -j a
rpnat --arpnat-target ACCEPT
Illegal target name 'arpnat'.
Looks linke that patch only worked with kernel v3.10.36 and doesn't work in v4.14.187. Maybe need an new patch for new kernel.[No the patch should be OK]

In make menuconfig │   Location:                                                                                                         │  
  │     -> Network                                                                                                      │  
  │       -> Firewall  
arptables should be selected.

The ebtables tool needs a special patch : package/network/utils/ebtables/patches/300-microhard-arpnat.patch to support arpnat as a target.

Nov 6, 2020
1. How to verify CCA setting is really working with a broadband injection? Verify it by a single tone first?

2. 
root@UserDevice:~# echo 0 >  sys/module/ath9k_hw/parameters/ofdmNoiseImmunityLevel 
root@UserDevice:~# cat sys/module/ath9k_hw/parameters/ofdmNoiseImmunityLevel 
0

In this case, when injection is applied, eventhough the NF calibration respondes fast (1s - 2s) and jumps to a high level, the TX is still blocked. This means the (NF_calibration + ANI) combination decides the TX blocking, not only by the NF.


3.
#define AR_PHY_CCA_FILTERWINDOW_LENGTH          1
#define NUM_NF_READINGS       6
#define ATH9K_NF_CAL_HIST_MAX 1

	static const u32 ar9300_cca_regs[6] = {
		AR_PHY_CCA_0,	// 9E1C
		AR_PHY_CCA_1,	// AE1C
		AR_PHY_CCA_2,	// BE1C
		AR_PHY_EXT_CCA,		// 9830
		AR_PHY_EXT_CCA_1,	// A830
		AR_PHY_EXT_CCA_2,	// B830
	};

	memcpy(ah->nf_regs, ar9300_cca_regs, sizeof(ah->nf_regs));

struct ath9k_hw_cal_data {
	u16 channel;
	u16 channelFlags;
	unsigned long cal_flags;
	int32_t CalValid;
	int8_t iCoff;
	int8_t qCoff;
	u8 caldac[2];
	u16 small_signal_gain[AR9300_MAX_CHAINS];
	u32 pa_table[AR9300_MAX_CHAINS][PAPRD_TABLE_SZ];
	u32 num_measures[AR9300_MAX_CHAINS];
	int tx_corr_coeff[MAX_IQCAL_MEASUREMENT][AR9300_MAX_CHAINS];
	u32 tx_clcal[AR9300_MAX_CHAINS][MAX_CL_TAB_ENTRY];
	u32 rtt_table[AR9300_MAX_CHAINS][MAX_RTT_TABLE_ENTRY];
	struct ath9k_nfcal_hist nfCalHist[NUM_NF_READINGS];	// 6 reading means 6 registers for 3 chains.
};

struct ath9k_nfcal_hist {
	int16_t nfCalBuffer[ATH9K_NF_CAL_HIST_MAX];
	u8 currIndex;
	int16_t privNF;
	u8 invalidNFcount;
};

ath9k_hw_loadnf() will change these registers:
a) h[i].privNF value write to all 6 ar9300_cca_regs[] registers field b[0..8]. For AR_PHY_CCA_0, the field name is AR_PHY_CCA_MAXCCA_PWR(0x1FF), For AR_PHY_EXT_CCA(0x9830), the field name is cf_maxCCApwr_ext_0. 
b) Manipulate AR_PHY_AGC_CONTROL(0xA2C4) register for control.


Nov 5, 2020
ath5k/phy.c
/**
 * DOC: PHY Calibration routines
 *
 * Noise floor calibration: When we tell the hardware to
 * perform a noise floor calibration by setting the
 * AR5K_PHY_AGCCTL_NF bit on AR5K_PHY_AGCCTL, it will periodically
 * sample-and-hold the minimum noise level seen at the antennas.
 * This value is then stored in a ring buffer of recently measured
 * noise floor values so we have a moving window of the last few
 * samples. The median of the values in the history is then loaded
 * into the hardware for its own use for RSSI and CCA measurements.
 * This type of calibration doesn't interfere with traffic.
 *
 * AGC calibration: When we tell the hardware to perform
 * an AGC (Automatic Gain Control) calibration by setting the
 * AR5K_PHY_AGCCTL_CAL, hw disconnects the antennas and does
 * a calibration on the DC offsets of ADCs. During this period
 * rx/tx gets disabled so we have to deal with it on the driver
 * part.
 *
 * I/Q calibration: When we tell the hardware to perform
 * an I/Q calibration, it tries to correct I/Q imbalance and
 * fix QAM constellation by sampling data from rxed frames.
 * It doesn't interfere with traffic.
 *
 * For more infos on AGC and I/Q calibration check out patent doc
 * #03/094463.
 */

#define NUM_NF_READINGS       6 //this must be 6 because ar9003_hw_do_getnf() needs a 3(chain) * 2 (thers62 + thres62_ext) registers. 0x9e1c and 0x9830.

Redo the mcast TX block experiment on a pair of pDDL(ar9331). mcast is still blocked by a broadband noise injection. The injection frequency must be equal the radio frequency to see the effects.

AR_TEST_CONTROLS (0xa360), b28 AR_TEST_CONTROLS_FORCE_AGC_CLEAR is set to "1", the pMDDL2450 TX doesn't block, and not deaf, still keep connection with a STA.

NOv 4, 2020
pMDDL2450 
root@UserDevice:~# iw phy phy0 set deafmode 1
command set the AP(TX) in complete deaf mode. Any injection couldn't stop TX and the NF looks not calibrating. But, after 30 seconds, the STA will lose connection with AP.

On AP(TX) root@UserDevice:~# echo 9 > sys/module/ath9k_hw/parameters/ofdmNoiseImmunityLevel. This set to the highest immunization level. This setting will not block the mcast traffic sent by the AP. The injection is broadband noise. Observe the TX Queue to see if any accumulation in the TX Queue.

The question is that ANI is only supposed to be related with RX path. Why it affects the TX blocking? Maybe the TX is Listen-Before-Transmit style so that the ANI affect the "Listen" stage? But according to Jason. The increase of this level will reduce RX sensitivity.

Nov 2, 2020
Use a pair of pDDL(ar9331), checked the CCA register (0xb8109e1c and 0xb8109e2c) are all set to 0x7f. Inject -20dBm broadband noise does NOT block transmitting.

Oct 28, 2020
pMDDL Rx attenuation to prevent saturation.

Looks like the "xatten 1DB Chx" and "xatten 1Marginx" are only used for Merlin chip. In ART2
    u_int8_t   xatten1DB[OSPREY_MAX_CHAINS];           // 3  //xatten1_db for merlin (0xa20c/b20c 5:0)
    u_int8_t   xatten1Margin[OSPREY_MAX_CHAINS];          // 3  //xatten1_margin for merlin (0xa20c/b20c 16:12
In Driver:
		/*
		 * xatten1DB[AR9300_MAX_CHAINS];  3 xatten1_db
		 * for ar9280 (0xa20c/b20c 5:0)
		 */
		.xatten1DB = {0, 0, 0},

		/*
		 * xatten1Margin[AR9300_MAX_CHAINS]; 3 xatten1_margin
		 * for ar9280 (0xa20c/b20c 16:12
		 */
		.xatten1Margin = {0, 0, 0},

So these should not work for ar9341.

Oct 8, 2020
pMDDL2450, CE certificate needs mute when there is a transmission around. A pMDDL2450 using ART-2 program, Continuous mode, Transmit Mode [Single carrier] mode, can easily mute another pMDDL2450 transmitting with ART-2. But Linux driver doesn't mute with the same interference.
root@UserDevice:~# uci set wireless.radio0.ccathresh=20
root@UserDevice:~# wifi
root@UserDevice:~# mhx -reg get 0xb8109e1c
Register 0xb8109e1c has value 0x19114f9c		// 0x14 means 20 here.

This will work.

The EEPROM saved value is transformed by #define N2DBM(_x,_y)                    ((((_x) - NOISE_PWR_DATA_OFFSET) << 2) - (_y)/25). So the mcart flash reading doesn't match the values expected.

Oct 5, 2020
Beta-D. mac80211 drive crashes when caldata is blank. Disable the OTP reading prevents this crash.

ART5.0 tx has bus error when caldata is blank. This fatal error comes from ar9300_reset()--->ar9300_process_ini(), and traced to function ar9300_power_control_override().

HAL:: ar9300_eeprom_restore_internal[7778] No vaid CAL, calling default template
===MHX7.0(ar9300_power_control_override) line=4302. tx_mask=7
===MHX7.0(ar9300_power_control_override) line=4307. 
===MHX7.0(ar9300_power_control_override) line=4312.

So the error should come from:
            if (tx_mask & 0x4) {
                OS_REG_RMW_FIELD(ah,
                        AR_SCORPION_PHY_TPC_19_B2, AR_PHY_TPC_19_ALPHA_THERM, 0);
            }

BetaD only has 2 antennas and the tx_mask default should be 0x3 instead of 0x7.
In static ar9300_eeprom_t ar9300_template_generic structure, define txrx_mask=0x3 solved this crash.

Sept 15, 2020
On a Alpha-M board, in function static void ath9k_hw_ar9300_set_txpower():
	if (ar9003_is_paprd_enabled(ah)) {
		printk("===MHX(%s) PAPRD is enabled!\n", __func__);

Not printed, which means pMDDL does NOT support PAPRD.

Sept 9, 2020
QDART v4.9
struct _Cal
{
	int freq;
	int rate;
	int tMask;
	int tryNum;
	int scheme;
	// scheme : 0, use init txgain 1 point calibration
	// scheme : 1, use init gainIndex 1 point calibration
	// scheme : 2, use init gainIndex and dacgain 2 point calibration
	int PowerGoalMode;	// 0: calculated from nart and pass to calDLL, 
						// 1: use the POWER_GOAL defined here
	int gainIndexScheme;
	// scheme : 0 the 2nd calibration point gain_index init with a value
	// scheme : 1 the 2nd calibration point gain_index init with a delta plus 
	//			the calibrationed 1st calibration point's gain_index

	int gainChann_2g[GAIN_CHANN_MAX_2G], gainChann_5g[GAIN_CHANN_MAX_5G];
	int gainIndex_2g_ch0[GAIN_CHANN_MAX_2G], gainIndex_2g_ch1[GAIN_CHANN_MAX_2G], gainIndex_2g_ch2[GAIN_CHANN_MAX_2G];
	int gainIndex2_2g_ch0[GAIN_CHANN_MAX_2G], gainIndex2_2g_ch1[GAIN_CHANN_MAX_2G], gainIndex2_2g_ch2[GAIN_CHANN_MAX_2G];
	int gainIndex_5g_ch0[GAIN_CHANN_MAX_5G], gainIndex_5g_ch1[GAIN_CHANN_MAX_5G], gainIndex_5g_ch2[GAIN_CHANN_MAX_5G];
	int gainIndex2_5g_ch0[GAIN_CHANN_MAX_5G], gainIndex2_5g_ch1[GAIN_CHANN_MAX_5G], gainIndex2_5g_ch2[GAIN_CHANN_MAX_5G];
	int dacGain_2g[GAIN_CHANN_MAX_2G], dacGain_5g[GAIN_CHANN_MAX_5G];
	int dacGain2_2g[GAIN_CHANN_MAX_2G], dacGain2_5g[GAIN_CHANN_MAX_5G];
	int gainIndex2Delta_2g[GAIN_CHANN_MAX_2G], gainIndex2Delta_5g[GAIN_CHANN_MAX_5G];
	double PowerGoal_2g[GAIN_CHANN_MAX_2G], PowerGoal_5g[GAIN_CHANN_MAX_5G];
	double PowerGoal2_2g[GAIN_CHANN_MAX_2G], PowerGoal2_5g[GAIN_CHANN_MAX_5G];

	double PowerGoal;	// 1st. point calibrated power
	double PowerGoal2;	// 2nd. point calibrated power
	int txgain, txgainMin, txgainMax;
	int dacGain, dacGain2;
	int gainIndex, gainIndex2;
	int gainIndexDelta;

	double powerDeviation;
	double powerDeviation2;
	double txgainSlope;
	double txgainSlope2;
	int attempt;
	int attempt2;

	int GainTbl_totalGain[100];
	int maxIniTxGainEntry;
	int resetUnusedCalPiers;
};

static int LinkTxIsOn()
{
    SendOn(_LinkClient);

	//temperature_before_reading=DeviceTemperatureGet(1);
	//UserPrint("temperature_before_reading %d\n",temperature_before_reading);

	//
	// if we're doing calibration, request power readings
	// answers come back in cal messages which are handled by LinkCalibrate()


// record any information required to support calibration
//
int CalibrateRecord(int client, int frequency, int txchain, int txgain, int gainIndx, int dacGain, double power, int ip)
{


struct _CalibrateMeasurement
{
    int frequency;
    int txchain;
    struct _CalibrateGain gain[2];
    double power[2];
    int correction;
    int p1;
    int p2;
    int temperature;
    int voltage;
};


Aug 25, 2020
interpolate() function in ar9300_eeprom.c : this is used to interpolate target power table. Not for calibration correction. The power correction by calibration data interpolation is in ar9300CalibrationApply() function.

Aug 24, 2020
pMDDL ART2 program
#ifdef AH_DEBUG
    ap->ah_config.ath_hal_debug                     = 0;  /* off by default */
#endif

defines debug level:
#define HAL_DBG_RESET           0x00000001
#define HAL_DBG_PHY_IO          0x00000002
#define HAL_DBG_REG_IO          0x00000004      
#define HAL_DBG_RF_PARAM        0x00000008
#define HAL_DBG_QUEUE           0x00000010
#define HAL_DBG_EEPROM_DUMP     0x00000020
#define HAL_DBG_EEPROM          0x00000040
#define HAL_DBG_NF_CAL          0x00000080
#define HAL_DBG_CALIBRATE       0x00000100
#define HAL_DBG_CHANNEL         0x00000200
#define HAL_DBG_INTERRUPT       0x00000400
#define HAL_DBG_DFS             0x00000800
#define HAL_DBG_DMA             0x00001000
#define HAL_DBG_REGULATORY      0x00002000
#define HAL_DBG_TX              0x00004000
#define HAL_DBG_TXDESC          0x00008000
#define HAL_DBG_RX              0x00010000
#define HAL_DBG_RXDESC          0x00020000
#define HAL_DBG_ANI             0x00040000
#define HAL_DBG_BEACON          0x00080000
#define HAL_DBG_KEYCACHE        0x00100000        
#define HAL_DBG_POWER_MGMT      0x00200000          
#define HAL_DBG_MALLOC			0x00400000          
#define HAL_DBG_FORCE_BIAS		0x00800000          
#define HAL_DBG_POWER_OVERRIDE	0x01000000
#define HAL_DBG_SPUR_MITIGATE	0x02000000
#define HAL_DBG_PRINT_REG       0x04000000
#define HAL_DBG_TIMER           0x08000000

This needs to turn on AH_DEBUG. Open src/art/makefile.nart and add CFLAGS:
CFLAGS += -DLinux -DLINUX -DSOC_LINUX -DARCH_BIG_ENDIAN -DMDK_AP -DSOC_AP -DART_BUILD -DREMOVE_PKT_LOG -DAH_SUPPORT_WRITE_EEPROM -DATH_SUPPORT_TxBF -DATH_SUPPORT_PAPRD -DAH_DEBUG


Aug 20, 2020
pMDDL, in ART (C)ommit contents ---> #define COMMIT_FLASH_CMD                "commit caldata=1\r\n". This is the same as calibration process.

CommandProcess()-------CommandCommit--------> ConfigurationSaveCommand() ---> 1. FlashEraseCommand(); 2. DeviceConfigurationSave() ---->  _DeviceConfigurationSave() ------> Ar9300EepromSave() ---> 

///////////////////////////////////////////////////////////////////////////
How to simulate an Alpha-m calibration procedure. 
jli@DENG-JEFFL:~$ telnet 192.168.168.1 2390
Trying 192.168.168.1...
Connected to 192.168.168.1.
Escape character is '^]'.
5109 INFO Accepted control connection from client 1.
7504 INFO |set|NartVersion|2.67|
7504 INFO |set|NartBuildDate|121003094626|
7504 INFO |set|devid|dead|
7504 INFO |set|mac|00:0f:92:fa:4f:d2|
7504 INFO |set|customer|MAGIC00320160610|
tx f=1625;rate=54;pc=-1;calibrate=1;pcdac=35;txch=1;bw=10
7508 CONTROL BEGIN tx f=1625;rate=54;pc=-1;calibrate=1;pcdac=35;txch=1;bw=10
6004 CONTROL Device reset successfully. frequency=2486, ht40=10, tx chain=1, rx chain=3.
7500 CONTROL OK

In the console, send commands to NART:

// TX to calibrate refPower, voltMeans, tempMeas
tx f=1625;rate=54;pc=-1;calibrate=1;pcdac=35;txch=1;bw=10
start
cal txchain=1;pow=24.9;

// RX to calibrate rxNoisefloorCal, rxNoisefloorPower, and rxTempMeas
rx f=1675; rate=54; pc=20000;pcdac=20;rssical=1;reset=1;rxch=1;bw=10
stop

set Customer=MAGIC0032020051401
////////// rx f=1625; rate=54; pc=20000;pcdac=20;rssical=1;reset=1;rxch=2;bw=10
commit caldata=1;

////////////////////////////////////////////////////////////////////////////////

enum Ar9300EepromTemplate
{
	Ar9300EepromTemplateGeneric=2,
	Ar9300EepromTemplateHB112=3,
	Ar9300EepromTemplateHB116=4,
	Ar9300EepromTemplateXB112=5,
	Ar9300EepromTemplateXB113=6,
	Ar9300EepromTemplateXB114=7,
	Ar9300EepromTemplateTB417=8,
	Ar9300EepromTemplateAP111=9,
	Ar9300EepromTemplateAP121=10,
	Ar9300EepromTemplateHornetGeneric=11,
};
#define Ar9300EepromTemplateDefault Ar9300EepromTemplateGeneric
#define Ar9300EepromFormatDefault 2

static ar9300_eeprom_t *default9300[]=
{
    &Ar9300TemplateGeneric,
    &Ar9300TemplateXB112,
    &Ar9300TemplateHB116,
    &Ar9300TemplateHB112,
    &Ar9300TemplateXB113,
    &Ar9300TemplateAP121,
};

/*
 * Restore the configuration structure by reading the eeprom.
 * This function destroys any existing in-memory structure content.
 */
HAL_BOOL
ar9300EepromRestore(struct ath_hal *ah)

///////////////////////////////////////////////////////////////////////////////////////
Defined Macros:
MDK_AP
Not defiled Macros:
HALUNUSED, OLDCODE

Aug 13, 2020
How the calFreqPier2G[OSPREY_NUM_2G_CAL_PIERS] in EEPROM is set? This is the cal frequency stored as Bin.
CommandProcess(), CommandSet ---> ConfigurationSetCommand(), cmd=Ar9300SetEeprom2GHzCalibrationFrequency ---> ConfigSets() ---> Ar9300calFreqPierSet()

How OSP_CAL_DATA_PER_FREQ_OP_LOOP calPierData2G[OSPREY_MAX_CHAINS][OSPREY_NUM_2G_CAL_PIERS]; is set? These are cal values. Take refPower as an example:
CommandProcess(), cmd=CommandSet ---> ConfigurationSetCommand(), cmd=Ar9300SetEeprom2GHzPowerCorrection ---> ConfigSets() ---> Ar9300calPierDataRefPowerSet()



Aug 12, 2020
How is the required power set? 
By ath9k_hw_ar9300_set_txpower(u8 powerLimit) ---> ar9003_hw_tx_power_regwrite(ah, targetPowerValT2); function. If you set TXpower=19dBm, you get:

<7>[ 7255.290000] ath: phy0: SEL-Min ctlMode 2 pCtlMode 5 2xMaxEdge 60 sP 38 minCtlPwr 38
<7>[ 7255.290000] ath: phy0: TPC[00] 0x00000026		// powerLimit (expected power) 19dBm * 2 = 38 = 0x26.
<7>[ 7255.290000] ath: phy0: TPC[01] 0x00000026
<7>[ 7255.290000] ath: phy0: TPC[02] 0x00000026
<7>[ 7255.290000] ath: phy0: TPC[03] 0x00000026
<7>[ 7255.290000] ath: phy0: TPC[04] 0x00000026
<7>[ 7255.290000] ath: phy0: TPC[05] 0x00000026
<7>[ 7255.290000] ath: phy0: TPC[06] 0x00000026
<7>[ 7255.290000] ath: phy0: TPC[07] 0x00000026
<7>[ 7255.290000] ath: phy0: TPC[08] 0x00000026

targetPowerValT2[] array contains the tx_power(dBm) * 2 values for all rates. These power per rate values are written to registers AR_PHY_POWER_TX_RATE.

Aug 11, 2020
pDDL924, cal data:
7510 INFO  |=================2G Power Calibration Information =====================|
7510 INFO  |                                                                       |
7510 INFO  |                   Chain 0                          Chain 1            |
7510 INFO  |-----------------------------------------------------------------------|
7510 INFO  |                     rxNF rxNF rx  |                   rxNF rxNF   rx  |
7510 INFO  | Freq  Pwr Volt Temp  Cal pwr Temp |     Pwr Volt Temp  Cal  pwr  Temp |
7510 INFO  |-----------------------------------------------------------------------|
7510 INFO  | 2412   17   0  122  -104  -57   0 |       0   0    0  0000    0    0  |
7510 INFO  | 2437   21   0  120  -104  -60   0 |       0   0    0  0000    0    0  |
7510 INFO  | 2462   18   0  116  -102  -57   0 |       0   0    0  0000    0    0  |
7510 INFO  |-----------------------------------------------------------------------|

Change frequency from 2461 to 2462MHz, 19dBm, turn on ath9k EEPROM debug log:

<6>[ 7252.000000] device wlan0 left promiscuous mode
<6>[ 7252.000000] br-lan: port 2(wlan0) entered disabled state
<0>[ 7252.000000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=2
<0>[ 7252.000000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=60.
<0>[ 7252.000000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=2
<0>[ 7252.000000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=60.
<0>[ 7252.000000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=2
<0>[ 7252.000000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=60.
<0>[ 7252.000000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=2
<0>[ 7252.000000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=60.
<0>[ 7252.000000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7252.000000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=60.
<0>[ 7252.000000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7252.000000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=56.
<0>[ 7252.000000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7252.000000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=48.
<0>[ 7252.000000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7252.000000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=48.
<0>[ 7252.000000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7252.000000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=60.
<0>[ 7252.000000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7252.000000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=60.
<0>[ 7252.000000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7252.000000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=56.
<0>[ 7252.000000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7252.000000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=48.
<0>[ 7252.000000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7252.000000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=48.
<0>[ 7252.000000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7252.000000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=48.
<0>[ 7252.000000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7252.000000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=26.
<0>[ 7252.000000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7252.000000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=26.
<0>[ 7252.000000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7252.000000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=22.
<0>[ 7252.000000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7252.000000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=20.
<0>[ 7252.000000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7252.000000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=26.
<0>[ 7252.000000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7252.000000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=26.
<0>[ 7252.000000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7252.000000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=22.
<0>[ 7252.000000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7252.000000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=20.
<7>[ 7252.000000] ath: phy0: TPC[00] 0x0000003c
<7>[ 7252.000000] ath: phy0: TPC[01] 0x00000038
<7>[ 7252.000000] ath: phy0: TPC[02] 0x00000030
<7>[ 7252.000000] ath: phy0: TPC[03] 0x00000030
<7>[ 7252.000000] ath: phy0: TPC[04] 0x0000003c
<7>[ 7252.000000] ath: phy0: TPC[05] 0x0000003c
<7>[ 7252.000000] ath: phy0: TPC[06] 0x0000003c
<7>[ 7252.000000] ath: phy0: TPC[07] 0x0000003c
<7>[ 7252.000000] ath: phy0: TPC[08] 0x0000003c
<7>[ 7252.000000] ath: phy0: TPC[09] 0x0000003c
<7>[ 7252.000000] ath: phy0: TPC[10] 0x00000038
<7>[ 7252.000000] ath: phy0: TPC[11] 0x00000030
<7>[ 7252.000000] ath: phy0: TPC[12] 0x00000030
<7>[ 7252.000000] ath: phy0: TPC[13] 0x00000030
<7>[ 7252.000000] ath: phy0: TPC[14] 0x0000001a
<7>[ 7252.000000] ath: phy0: TPC[15] 0x0000001a
<7>[ 7252.000000] ath: phy0: TPC[16] 0x00000016
<7>[ 7252.000000] ath: phy0: TPC[17] 0x00000014
<7>[ 7252.000000] ath: phy0: TPC[18] 0x0000001a
<7>[ 7252.000000] ath: phy0: TPC[19] 0x0000001a
<7>[ 7252.000000] ath: phy0: TPC[20] 0x00000016
<7>[ 7252.000000] ath: phy0: TPC[21] 0x00000014
<7>[ 7252.000000] ath: phy0: TPC[22] 0x00000000
<7>[ 7252.000000] ath: phy0: TPC[23] 0x00000000
<7>[ 7252.000000] ath: phy0: TPC[24] 0x00000000
<7>[ 7252.000000] ath: phy0: TPC[25] 0x00000000
<7>[ 7252.000000] ath: phy0: TPC[26] 0x00000000
<7>[ 7252.000000] ath: phy0: TPC[27] 0x00000000
<7>[ 7252.000000] ath: phy0: TPC[28] 0x00000000
<7>[ 7252.000000] ath: phy0: TPC[29] 0x00000000
<7>[ 7252.000000] ath: phy0: TPC[30] 0x00000000
<7>[ 7252.000000] ath: phy0: TPC[31] 0x00000000
<7>[ 7252.000000] ath: phy0: TPC[32] 0x00000000
<7>[ 7252.000000] ath: phy0: TPC[33] 0x00000000
<7>[ 7252.000000] ath: phy0: TPC[34] 0x00000000
<7>[ 7252.000000] ath: phy0: TPC[35] 0x00000000
<7>[ 7252.000000] ath: phy0: LOOP-Mode ctlMode 0 < 3, isHt40CtlMode 0, EXT_ADDITIVE 0
<7>[ 7252.000000] ath: phy0: LOOP-Ctlidx 0: cfgCtl 0x12 pCtlMode 0x01 ctlIndex 0x11 chan 2461
<7>[ 7252.000000] ath: phy0: SEL-Min ctlMode 0 pCtlMode 1 2xMaxEdge 60 sP 26 minCtlPwr 26
<7>[ 7252.000000] ath: phy0: LOOP-Mode ctlMode 1 < 3, isHt40CtlMode 0, EXT_ADDITIVE 0
<7>[ 7252.000000] ath: phy0: LOOP-Ctlidx 0: cfgCtl 0x12 pCtlMode 0x02 ctlIndex 0x11 chan 2461
<7>[ 7252.000000] ath: phy0: LOOP-Ctlidx 1: cfgCtl 0x12 pCtlMode 0x02 ctlIndex 0x12 chan 2461
<7>[ 7252.000000] ath: phy0: SEL-Min ctlMode 1 pCtlMode 2 2xMaxEdge 60 sP 26 minCtlPwr 26
<7>[ 7252.000000] ath: phy0: LOOP-Mode ctlMode 2 < 3, isHt40CtlMode 0, EXT_ADDITIVE 0
<7>[ 7252.000000] ath: phy0: LOOP-Ctlidx 0: cfgCtl 0x12 pCtlMode 0x05 ctlIndex 0x11 chan 2461
<7>[ 7252.000000] ath: phy0: LOOP-Ctlidx 1: cfgCtl 0x12 pCtlMode 0x05 ctlIndex 0x12 chan 2461
<7>[ 7252.000000] ath: phy0: LOOP-Ctlidx 2: cfgCtl 0x12 pCtlMode 0x05 ctlIndex 0x15 chan 2461
<7>[ 7252.000000] ath: phy0: SEL-Min ctlMode 2 pCtlMode 5 2xMaxEdge 60 sP 26 minCtlPwr 26
<7>[ 7252.000000] ath: phy0: TPC[00] 0x0000001a
<7>[ 7252.000000] ath: phy0: TPC[01] 0x0000001a
<7>[ 7252.000000] ath: phy0: TPC[02] 0x0000001a
<7>[ 7252.000000] ath: phy0: TPC[03] 0x0000001a
<7>[ 7252.000000] ath: phy0: TPC[04] 0x0000001a
<7>[ 7252.000000] ath: phy0: TPC[05] 0x0000001a
<7>[ 7252.000000] ath: phy0: TPC[06] 0x0000001a
<7>[ 7252.000000] ath: phy0: TPC[07] 0x0000001a
<7>[ 7252.000000] ath: phy0: TPC[08] 0x0000001a
<7>[ 7252.000000] ath: phy0: TPC[09] 0x0000001a
<7>[ 7252.000000] ath: phy0: TPC[10] 0x0000001a
<7>[ 7252.000000] ath: phy0: TPC[11] 0x0000001a
<7>[ 7252.000000] ath: phy0: TPC[12] 0x0000001a
<7>[ 7252.000000] ath: phy0: TPC[13] 0x0000001a
<7>[ 7252.000000] ath: phy0: TPC[14] 0x0000001a
<7>[ 7252.000000] ath: phy0: TPC[15] 0x0000001a
<7>[ 7252.000000] ath: phy0: TPC[16] 0x00000016
<7>[ 7252.000000] ath: phy0: TPC[17] 0x00000014
<7>[ 7252.000000] ath: phy0: TPC[18] 0x0000001a
<7>[ 7252.000000] ath: phy0: TPC[19] 0x0000001a
<7>[ 7252.000000] ath: phy0: TPC[20] 0x00000016
<7>[ 7252.000000] ath: phy0: TPC[21] 0x00000014
<7>[ 7252.000000] ath: phy0: TPC[22] 0x00000000
<7>[ 7252.000000] ath: phy0: TPC[23] 0x00000000
<7>[ 7252.000000] ath: phy0: TPC[24] 0x00000000
<7>[ 7252.000000] ath: phy0: TPC[25] 0x00000000
<7>[ 7252.000000] ath: phy0: TPC[26] 0x00000000
<7>[ 7252.000000] ath: phy0: TPC[27] 0x00000000
<7>[ 7252.000000] ath: phy0: TPC[28] 0x00000000
<7>[ 7252.000000] ath: phy0: TPC[29] 0x00000000
<7>[ 7252.000000] ath: phy0: TPC[30] 0x00000000
<7>[ 7252.000000] ath: phy0: TPC[31] 0x00000000
<7>[ 7252.000000] ath: phy0: TPC[32] 0x00000000
<7>[ 7252.000000] ath: phy0: TPC[33] 0x00000000
<7>[ 7252.000000] ath: phy0: TPC[34] 0x00000000
<7>[ 7252.000000] ath: phy0: TPC[35] 0x00000000
<7>[ 7252.000000] ath: phy0: ch=0 f=2461 low=2437 21 h=2462 18
<7>[ 7252.000000] ath: phy0: ch=1 f=2461 low=2437 0 h=2462 0
<7>[ 7252.000000] ath: phy0: ch=2 f=2461 low=2437 0 h=2462 0
<7>[ 7252.000000] ath: phy0: for frequency=2461, calibration correction = 18 0 0
<7>[ 7252.000000] ath: phy0: Disable LNA combining
<7>[ 7252.000000] ath: phy0: ah->misc_mode 0x1000000c
<7>[ 7252.010000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<0>[ 7252.020000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=2
<0>[ 7252.020000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=60.
<0>[ 7252.020000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=2
<0>[ 7252.020000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=60.
<0>[ 7252.020000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=2
<0>[ 7252.020000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=60.
<0>[ 7252.020000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=2
<0>[ 7252.020000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=60.
<0>[ 7252.020000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7252.020000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=60.
<0>[ 7252.020000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7252.020000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=56.
<0>[ 7252.020000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7252.020000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=48.
<0>[ 7252.020000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7252.020000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=48.
<0>[ 7252.020000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7252.020000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=60.
<0>[ 7252.020000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7252.020000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=60.
<0>[ 7252.020000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7252.020000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=56.
<0>[ 7252.020000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7252.020000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=48.
<0>[ 7252.020000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7252.020000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=48.
<0>[ 7252.020000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7252.020000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=48.
<0>[ 7252.020000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7252.020000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=26.
<0>[ 7252.020000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7252.020000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=26.
<0>[ 7252.020000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7252.020000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=22.
<0>[ 7252.020000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7252.020000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=20.
<0>[ 7252.020000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7252.020000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=26.
<0>[ 7252.020000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7252.020000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=26.
<0>[ 7252.020000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7252.020000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=22.
<0>[ 7252.020000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7252.020000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=20.
<7>[ 7252.020000] ath: phy0: TPC[00] 0x0000003c
<7>[ 7252.020000] ath: phy0: TPC[01] 0x00000038
<7>[ 7252.020000] ath: phy0: TPC[02] 0x00000030
<7>[ 7252.020000] ath: phy0: TPC[03] 0x00000030
<7>[ 7252.020000] ath: phy0: TPC[04] 0x0000003c
<7>[ 7252.020000] ath: phy0: TPC[05] 0x0000003c
<7>[ 7252.020000] ath: phy0: TPC[06] 0x0000003c
<7>[ 7252.020000] ath: phy0: TPC[07] 0x0000003c
<7>[ 7252.020000] ath: phy0: TPC[08] 0x0000003c
<7>[ 7252.020000] ath: phy0: TPC[09] 0x0000003c
<7>[ 7252.020000] ath: phy0: TPC[10] 0x00000038
<7>[ 7252.020000] ath: phy0: TPC[11] 0x00000030
<7>[ 7252.020000] ath: phy0: TPC[12] 0x00000030
<7>[ 7252.020000] ath: phy0: TPC[13] 0x00000030
<7>[ 7252.020000] ath: phy0: TPC[14] 0x0000001a
<7>[ 7252.020000] ath: phy0: TPC[15] 0x0000001a
<7>[ 7252.020000] ath: phy0: TPC[16] 0x00000016
<7>[ 7252.020000] ath: phy0: TPC[17] 0x00000014
<7>[ 7252.020000] ath: phy0: TPC[18] 0x0000001a
<7>[ 7252.020000] ath: phy0: TPC[19] 0x0000001a
<7>[ 7252.020000] ath: phy0: TPC[20] 0x00000016
<7>[ 7252.020000] ath: phy0: TPC[21] 0x00000014
<7>[ 7252.020000] ath: phy0: TPC[22] 0x00000000
<7>[ 7252.020000] ath: phy0: TPC[23] 0x00000000
<7>[ 7252.020000] ath: phy0: TPC[24] 0x00000000
<7>[ 7252.020000] ath: phy0: TPC[25] 0x00000000
<7>[ 7252.020000] ath: phy0: TPC[26] 0x00000000
<7>[ 7252.020000] ath: phy0: TPC[27] 0x00000000
<7>[ 7252.020000] ath: phy0: TPC[28] 0x00000000
<7>[ 7252.020000] ath: phy0: TPC[29] 0x00000000
<7>[ 7252.020000] ath: phy0: TPC[30] 0x00000000
<7>[ 7252.020000] ath: phy0: TPC[31] 0x00000000
<7>[ 7252.020000] ath: phy0: TPC[32] 0x00000000
<7>[ 7252.020000] ath: phy0: TPC[33] 0x00000000
<7>[ 7252.020000] ath: phy0: TPC[34] 0x00000000
<7>[ 7252.020000] ath: phy0: TPC[35] 0x00000000
<7>[ 7252.020000] ath: phy0: LOOP-Mode ctlMode 0 < 3, isHt40CtlMode 0, EXT_ADDITIVE 0
<7>[ 7252.020000] ath: phy0: LOOP-Ctlidx 0: cfgCtl 0x12 pCtlMode 0x01 ctlIndex 0x11 chan 2461
<7>[ 7252.020000] ath: phy0: SEL-Min ctlMode 0 pCtlMode 1 2xMaxEdge 60 sP 26 minCtlPwr 26
<7>[ 7252.020000] ath: phy0: LOOP-Mode ctlMode 1 < 3, isHt40CtlMode 0, EXT_ADDITIVE 0
<7>[ 7252.020000] ath: phy0: LOOP-Ctlidx 0: cfgCtl 0x12 pCtlMode 0x02 ctlIndex 0x11 chan 2461
<7>[ 7252.020000] ath: phy0: LOOP-Ctlidx 1: cfgCtl 0x12 pCtlMode 0x02 ctlIndex 0x12 chan 2461
<7>[ 7252.020000] ath: phy0: SEL-Min ctlMode 1 pCtlMode 2 2xMaxEdge 60 sP 26 minCtlPwr 26
<7>[ 7252.020000] ath: phy0: LOOP-Mode ctlMode 2 < 3, isHt40CtlMode 0, EXT_ADDITIVE 0
<7>[ 7252.020000] ath: phy0: LOOP-Ctlidx 0: cfgCtl 0x12 pCtlMode 0x05 ctlIndex 0x11 chan 2461
<7>[ 7252.020000] ath: phy0: LOOP-Ctlidx 1: cfgCtl 0x12 pCtlMode 0x05 ctlIndex 0x12 chan 2461
<7>[ 7252.020000] ath: phy0: LOOP-Ctlidx 2: cfgCtl 0x12 pCtlMode 0x05 ctlIndex 0x15 chan 2461
<7>[ 7252.020000] ath: phy0: SEL-Min ctlMode 2 pCtlMode 5 2xMaxEdge 60 sP 26 minCtlPwr 26
<7>[ 7252.020000] ath: phy0: TPC[00] 0x0000001a
<7>[ 7252.020000] ath: phy0: TPC[01] 0x0000001a
<7>[ 7252.020000] ath: phy0: TPC[02] 0x0000001a
<7>[ 7252.020000] ath: phy0: TPC[03] 0x0000001a
<7>[ 7252.020000] ath: phy0: TPC[04] 0x0000001a
<7>[ 7252.020000] ath: phy0: TPC[05] 0x0000001a
<7>[ 7252.020000] ath: phy0: TPC[06] 0x0000001a
<7>[ 7252.020000] ath: phy0: TPC[07] 0x0000001a
<7>[ 7252.020000] ath: phy0: TPC[08] 0x0000001a
<7>[ 7252.020000] ath: phy0: TPC[09] 0x0000001a
<7>[ 7252.020000] ath: phy0: TPC[10] 0x0000001a
<7>[ 7252.020000] ath: phy0: TPC[11] 0x0000001a
<7>[ 7252.020000] ath: phy0: TPC[12] 0x0000001a
<7>[ 7252.020000] ath: phy0: TPC[13] 0x0000001a
<7>[ 7252.020000] ath: phy0: TPC[14] 0x0000001a
<7>[ 7252.020000] ath: phy0: TPC[15] 0x0000001a
<7>[ 7252.020000] ath: phy0: TPC[16] 0x00000016
<7>[ 7252.020000] ath: phy0: TPC[17] 0x00000014
<7>[ 7252.020000] ath: phy0: TPC[18] 0x0000001a
<7>[ 7252.020000] ath: phy0: TPC[19] 0x0000001a
<7>[ 7252.020000] ath: phy0: TPC[20] 0x00000016
<7>[ 7252.020000] ath: phy0: TPC[21] 0x00000014
<7>[ 7252.020000] ath: phy0: TPC[22] 0x00000000
<7>[ 7252.020000] ath: phy0: TPC[23] 0x00000000
<7>[ 7252.020000] ath: phy0: TPC[24] 0x00000000
<7>[ 7252.020000] ath: phy0: TPC[25] 0x00000000
<7>[ 7252.020000] ath: phy0: TPC[26] 0x00000000
<7>[ 7252.020000] ath: phy0: TPC[27] 0x00000000
<7>[ 7252.020000] ath: phy0: TPC[28] 0x00000000
<7>[ 7252.020000] ath: phy0: TPC[29] 0x00000000
<7>[ 7252.020000] ath: phy0: TPC[30] 0x00000000
<7>[ 7252.020000] ath: phy0: TPC[31] 0x00000000
<7>[ 7252.020000] ath: phy0: TPC[32] 0x00000000
<7>[ 7252.020000] ath: phy0: TPC[33] 0x00000000
<7>[ 7252.020000] ath: phy0: TPC[34] 0x00000000
<7>[ 7252.020000] ath: phy0: TPC[35] 0x00000000
<7>[ 7252.020000] ath: phy0: ch=0 f=2461 low=2437 21 h=2462 18
<7>[ 7252.020000] ath: phy0: ch=1 f=2461 low=2437 0 h=2462 0
<7>[ 7252.020000] ath: phy0: ch=2 f=2461 low=2437 0 h=2462 0
<7>[ 7252.020000] ath: phy0: for frequency=2461, calibration correction = 18 0 0
<7>[ 7252.020000] ath: phy0: Disable LNA combining
<7>[ 7252.020000] ath: phy0: ah->misc_mode 0x10000004
<7>[ 7252.030000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[ 7252.950000] ath: phy0: ah->misc_mode 0x10000004
<7>[ 7252.960000] ath: phy0: Disable LNA combining
<0>[ 7254.410000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=2
<0>[ 7254.410000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=60.
<0>[ 7254.410000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=2
<0>[ 7254.410000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=60.
<0>[ 7254.410000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=2
<0>[ 7254.410000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=60.
<0>[ 7254.410000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=2
<0>[ 7254.410000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=60.
<0>[ 7254.410000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7254.410000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=60.
<0>[ 7254.410000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7254.410000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=56.
<0>[ 7254.410000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7254.410000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=48.
<0>[ 7254.410000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7254.410000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=48.
<0>[ 7254.410000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7254.410000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=60.
<0>[ 7254.410000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7254.410000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=60.
<0>[ 7254.410000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7254.410000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=56.
<0>[ 7254.410000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7254.410000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=48.
<0>[ 7254.410000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7254.410000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=48.
<0>[ 7254.410000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7254.410000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=48.
<0>[ 7254.410000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7254.410000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=26.
<0>[ 7254.410000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7254.410000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=26.
<0>[ 7254.410000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7254.410000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=22.
<0>[ 7254.410000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7254.410000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=20.
<0>[ 7254.410000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7254.410000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=26.
<0>[ 7254.410000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7254.410000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=26.
<0>[ 7254.410000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7254.410000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=22.
<0>[ 7254.410000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7254.410000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=20.
<7>[ 7254.410000] ath: phy0: TPC[00] 0x0000003c
<7>[ 7254.410000] ath: phy0: TPC[01] 0x00000038
<7>[ 7254.410000] ath: phy0: TPC[02] 0x00000030
<7>[ 7254.410000] ath: phy0: TPC[03] 0x00000030
<7>[ 7254.410000] ath: phy0: TPC[04] 0x0000003c
<7>[ 7254.410000] ath: phy0: TPC[05] 0x0000003c
<7>[ 7254.410000] ath: phy0: TPC[06] 0x0000003c
<7>[ 7254.410000] ath: phy0: TPC[07] 0x0000003c
<7>[ 7254.410000] ath: phy0: TPC[08] 0x0000003c
<7>[ 7254.410000] ath: phy0: TPC[09] 0x0000003c
<7>[ 7254.410000] ath: phy0: TPC[10] 0x00000038
<7>[ 7254.410000] ath: phy0: TPC[11] 0x00000030
<7>[ 7254.410000] ath: phy0: TPC[12] 0x00000030
<7>[ 7254.410000] ath: phy0: TPC[13] 0x00000030
<7>[ 7254.410000] ath: phy0: TPC[14] 0x0000001a
<7>[ 7254.410000] ath: phy0: TPC[15] 0x0000001a
<7>[ 7254.410000] ath: phy0: TPC[16] 0x00000016
<7>[ 7254.410000] ath: phy0: TPC[17] 0x00000014
<7>[ 7254.410000] ath: phy0: TPC[18] 0x0000001a
<7>[ 7254.410000] ath: phy0: TPC[19] 0x0000001a
<7>[ 7254.410000] ath: phy0: TPC[20] 0x00000016
<7>[ 7254.410000] ath: phy0: TPC[21] 0x00000014
<7>[ 7254.410000] ath: phy0: TPC[22] 0x00000000
<7>[ 7254.410000] ath: phy0: TPC[23] 0x00000000
<7>[ 7254.410000] ath: phy0: TPC[24] 0x00000000
<7>[ 7254.410000] ath: phy0: TPC[25] 0x00000000
<7>[ 7254.410000] ath: phy0: TPC[26] 0x00000000
<7>[ 7254.410000] ath: phy0: TPC[27] 0x00000000
<7>[ 7254.410000] ath: phy0: TPC[28] 0x00000000
<7>[ 7254.410000] ath: phy0: TPC[29] 0x00000000
<7>[ 7254.410000] ath: phy0: TPC[30] 0x00000000
<7>[ 7254.410000] ath: phy0: TPC[31] 0x00000000
<7>[ 7254.410000] ath: phy0: TPC[32] 0x00000000
<7>[ 7254.410000] ath: phy0: TPC[33] 0x00000000
<7>[ 7254.410000] ath: phy0: TPC[34] 0x00000000
<7>[ 7254.410000] ath: phy0: TPC[35] 0x00000000
<7>[ 7254.410000] ath: phy0: LOOP-Mode ctlMode 0 < 3, isHt40CtlMode 0, EXT_ADDITIVE 0
<7>[ 7254.410000] ath: phy0: LOOP-Ctlidx 0: cfgCtl 0x12 pCtlMode 0x01 ctlIndex 0x11 chan 2461
<7>[ 7254.410000] ath: phy0: SEL-Min ctlMode 0 pCtlMode 1 2xMaxEdge 60 sP 26 minCtlPwr 26
<7>[ 7254.410000] ath: phy0: LOOP-Mode ctlMode 1 < 3, isHt40CtlMode 0, EXT_ADDITIVE 0
<7>[ 7254.410000] ath: phy0: LOOP-Ctlidx 0: cfgCtl 0x12 pCtlMode 0x02 ctlIndex 0x11 chan 2461
<7>[ 7254.410000] ath: phy0: LOOP-Ctlidx 1: cfgCtl 0x12 pCtlMode 0x02 ctlIndex 0x12 chan 2461
<7>[ 7254.410000] ath: phy0: SEL-Min ctlMode 1 pCtlMode 2 2xMaxEdge 60 sP 26 minCtlPwr 26
<7>[ 7254.410000] ath: phy0: LOOP-Mode ctlMode 2 < 3, isHt40CtlMode 0, EXT_ADDITIVE 0
<7>[ 7254.410000] ath: phy0: LOOP-Ctlidx 0: cfgCtl 0x12 pCtlMode 0x05 ctlIndex 0x11 chan 2461
<7>[ 7254.410000] ath: phy0: LOOP-Ctlidx 1: cfgCtl 0x12 pCtlMode 0x05 ctlIndex 0x12 chan 2461
<7>[ 7254.410000] ath: phy0: LOOP-Ctlidx 2: cfgCtl 0x12 pCtlMode 0x05 ctlIndex 0x15 chan 2461
<7>[ 7254.410000] ath: phy0: SEL-Min ctlMode 2 pCtlMode 5 2xMaxEdge 60 sP 26 minCtlPwr 26
<7>[ 7254.410000] ath: phy0: TPC[00] 0x0000001a
<7>[ 7254.410000] ath: phy0: TPC[01] 0x0000001a
<7>[ 7254.410000] ath: phy0: TPC[02] 0x0000001a
<7>[ 7254.410000] ath: phy0: TPC[03] 0x0000001a
<7>[ 7254.410000] ath: phy0: TPC[04] 0x0000001a
<7>[ 7254.410000] ath: phy0: TPC[05] 0x0000001a
<7>[ 7254.410000] ath: phy0: TPC[06] 0x0000001a
<7>[ 7254.410000] ath: phy0: TPC[07] 0x0000001a
<7>[ 7254.410000] ath: phy0: TPC[08] 0x0000001a
<7>[ 7254.410000] ath: phy0: TPC[09] 0x0000001a
<7>[ 7254.410000] ath: phy0: TPC[10] 0x0000001a
<7>[ 7254.410000] ath: phy0: TPC[11] 0x0000001a
<7>[ 7254.410000] ath: phy0: TPC[12] 0x0000001a
<7>[ 7254.410000] ath: phy0: TPC[13] 0x0000001a
<7>[ 7254.410000] ath: phy0: TPC[14] 0x0000001a
<7>[ 7254.410000] ath: phy0: TPC[15] 0x0000001a
<7>[ 7254.410000] ath: phy0: TPC[16] 0x00000016
<7>[ 7254.410000] ath: phy0: TPC[17] 0x00000014
<7>[ 7254.410000] ath: phy0: TPC[18] 0x0000001a
<7>[ 7254.410000] ath: phy0: TPC[19] 0x0000001a
<7>[ 7254.410000] ath: phy0: TPC[20] 0x00000016
<7>[ 7254.410000] ath: phy0: TPC[21] 0x00000014
<7>[ 7254.410000] ath: phy0: TPC[22] 0x00000000
<7>[ 7254.410000] ath: phy0: TPC[23] 0x00000000
<7>[ 7254.410000] ath: phy0: TPC[24] 0x00000000
<7>[ 7254.410000] ath: phy0: TPC[25] 0x00000000
<7>[ 7254.410000] ath: phy0: TPC[26] 0x00000000
<7>[ 7254.410000] ath: phy0: TPC[27] 0x00000000
<7>[ 7254.410000] ath: phy0: TPC[28] 0x00000000
<7>[ 7254.410000] ath: phy0: TPC[29] 0x00000000
<7>[ 7254.410000] ath: phy0: TPC[30] 0x00000000
<7>[ 7254.410000] ath: phy0: TPC[31] 0x00000000
<7>[ 7254.410000] ath: phy0: TPC[32] 0x00000000
<7>[ 7254.410000] ath: phy0: TPC[33] 0x00000000
<7>[ 7254.410000] ath: phy0: TPC[34] 0x00000000
<7>[ 7254.410000] ath: phy0: TPC[35] 0x00000000
<7>[ 7254.410000] ath: phy0: ch=0 f=2461 low=2437 21 h=2462 18
<7>[ 7254.410000] ath: phy0: ch=1 f=2461 low=2437 0 h=2462 0
<7>[ 7254.410000] ath: phy0: ch=2 f=2461 low=2437 0 h=2462 0
<7>[ 7254.410000] ath: phy0: for frequency=2461, calibration correction = 18 0 0
<7>[ 7254.410000] ath: phy0: Disable LNA combining
<7>[ 7254.410000] ath: phy0: ah->misc_mode 0x10000004
<7>[ 7254.410000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<0>[ 7254.420000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=2
<0>[ 7254.420000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=60.
<0>[ 7254.420000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=2
<0>[ 7254.420000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=60.
<0>[ 7254.420000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=2
<0>[ 7254.420000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=60.
<0>[ 7254.420000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=2
<0>[ 7254.420000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=60.
<0>[ 7254.420000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7254.420000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=60.
<0>[ 7254.420000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7254.420000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=56.
<0>[ 7254.420000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7254.420000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=48.
<0>[ 7254.420000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7254.420000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=48.
<0>[ 7254.420000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7254.420000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=60.
<0>[ 7254.420000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7254.420000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=60.
<0>[ 7254.420000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7254.420000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=56.
<0>[ 7254.420000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7254.420000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=48.
<0>[ 7254.420000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7254.420000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=48.
<0>[ 7254.420000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7254.420000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=48.
<0>[ 7254.420000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7254.420000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=26.
<0>[ 7254.420000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7254.420000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=26.
<0>[ 7254.420000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7254.420000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=22.
<0>[ 7254.420000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7254.420000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=20.
<0>[ 7254.420000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7254.420000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=26.
<0>[ 7254.420000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7254.420000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=26.
<0>[ 7254.420000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7254.420000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=22.
<0>[ 7254.420000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2461, numPiers=3
<0>[ 7254.420000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=20.
<7>[ 7254.420000] ath: phy0: TPC[00] 0x0000003c
<7>[ 7254.420000] ath: phy0: TPC[01] 0x00000038
<7>[ 7254.420000] ath: phy0: TPC[02] 0x00000030
<7>[ 7254.420000] ath: phy0: TPC[03] 0x00000030
<7>[ 7254.420000] ath: phy0: TPC[04] 0x0000003c
<7>[ 7254.420000] ath: phy0: TPC[05] 0x0000003c
<7>[ 7254.420000] ath: phy0: TPC[06] 0x0000003c
<7>[ 7254.420000] ath: phy0: TPC[07] 0x0000003c
<7>[ 7254.420000] ath: phy0: TPC[08] 0x0000003c
<7>[ 7254.420000] ath: phy0: TPC[09] 0x0000003c
<7>[ 7254.420000] ath: phy0: TPC[10] 0x00000038
<7>[ 7254.420000] ath: phy0: TPC[11] 0x00000030
<7>[ 7254.420000] ath: phy0: TPC[12] 0x00000030
<7>[ 7254.420000] ath: phy0: TPC[13] 0x00000030
<7>[ 7254.420000] ath: phy0: TPC[14] 0x0000001a
<7>[ 7254.420000] ath: phy0: TPC[15] 0x0000001a
<7>[ 7254.420000] ath: phy0: TPC[16] 0x00000016
<7>[ 7254.420000] ath: phy0: TPC[17] 0x00000014
<7>[ 7254.420000] ath: phy0: TPC[18] 0x0000001a
<7>[ 7254.420000] ath: phy0: TPC[19] 0x0000001a
<7>[ 7254.420000] ath: phy0: TPC[20] 0x00000016
<7>[ 7254.420000] ath: phy0: TPC[21] 0x00000014
<7>[ 7254.420000] ath: phy0: TPC[22] 0x00000000
<7>[ 7254.420000] ath: phy0: TPC[23] 0x00000000
<7>[ 7254.420000] ath: phy0: TPC[24] 0x00000000
<7>[ 7254.420000] ath: phy0: TPC[25] 0x00000000
<7>[ 7254.420000] ath: phy0: TPC[26] 0x00000000
<7>[ 7254.420000] ath: phy0: TPC[27] 0x00000000
<7>[ 7254.420000] ath: phy0: TPC[28] 0x00000000
<7>[ 7254.420000] ath: phy0: TPC[29] 0x00000000
<7>[ 7254.420000] ath: phy0: TPC[30] 0x00000000
<7>[ 7254.420000] ath: phy0: TPC[31] 0x00000000
<7>[ 7254.420000] ath: phy0: TPC[32] 0x00000000
<7>[ 7254.420000] ath: phy0: TPC[33] 0x00000000
<7>[ 7254.420000] ath: phy0: TPC[34] 0x00000000
<7>[ 7254.420000] ath: phy0: TPC[35] 0x00000000
<7>[ 7254.420000] ath: phy0: LOOP-Mode ctlMode 0 < 3, isHt40CtlMode 0, EXT_ADDITIVE 0
<7>[ 7254.420000] ath: phy0: LOOP-Ctlidx 0: cfgCtl 0x12 pCtlMode 0x01 ctlIndex 0x11 chan 2461
<7>[ 7254.420000] ath: phy0: SEL-Min ctlMode 0 pCtlMode 1 2xMaxEdge 60 sP 26 minCtlPwr 26
<7>[ 7254.420000] ath: phy0: LOOP-Mode ctlMode 1 < 3, isHt40CtlMode 0, EXT_ADDITIVE 0
<7>[ 7254.420000] ath: phy0: LOOP-Ctlidx 0: cfgCtl 0x12 pCtlMode 0x02 ctlIndex 0x11 chan 2461
<7>[ 7254.420000] ath: phy0: LOOP-Ctlidx 1: cfgCtl 0x12 pCtlMode 0x02 ctlIndex 0x12 chan 2461
<7>[ 7254.420000] ath: phy0: SEL-Min ctlMode 1 pCtlMode 2 2xMaxEdge 60 sP 26 minCtlPwr 26
<7>[ 7254.420000] ath: phy0: LOOP-Mode ctlMode 2 < 3, isHt40CtlMode 0, EXT_ADDITIVE 0
<7>[ 7254.420000] ath: phy0: LOOP-Ctlidx 0: cfgCtl 0x12 pCtlMode 0x05 ctlIndex 0x11 chan 2461
<7>[ 7254.420000] ath: phy0: LOOP-Ctlidx 1: cfgCtl 0x12 pCtlMode 0x05 ctlIndex 0x12 chan 2461
<7>[ 7254.420000] ath: phy0: LOOP-Ctlidx 2: cfgCtl 0x12 pCtlMode 0x05 ctlIndex 0x15 chan 2461
<7>[ 7254.420000] ath: phy0: SEL-Min ctlMode 2 pCtlMode 5 2xMaxEdge 60 sP 26 minCtlPwr 26
<7>[ 7254.420000] ath: phy0: TPC[00] 0x0000001a
<7>[ 7254.420000] ath: phy0: TPC[01] 0x0000001a
<7>[ 7254.420000] ath: phy0: TPC[02] 0x0000001a
<7>[ 7254.420000] ath: phy0: TPC[03] 0x0000001a
<7>[ 7254.420000] ath: phy0: TPC[04] 0x0000001a
<7>[ 7254.420000] ath: phy0: TPC[05] 0x0000001a
<7>[ 7254.420000] ath: phy0: TPC[06] 0x0000001a
<7>[ 7254.420000] ath: phy0: TPC[07] 0x0000001a
<7>[ 7254.420000] ath: phy0: TPC[08] 0x0000001a
<7>[ 7254.420000] ath: phy0: TPC[09] 0x0000001a
<7>[ 7254.420000] ath: phy0: TPC[10] 0x0000001a
<7>[ 7254.420000] ath: phy0: TPC[11] 0x0000001a
<7>[ 7254.420000] ath: phy0: TPC[12] 0x0000001a
<7>[ 7254.420000] ath: phy0: TPC[13] 0x0000001a
<7>[ 7254.420000] ath: phy0: TPC[14] 0x0000001a
<7>[ 7254.420000] ath: phy0: TPC[15] 0x0000001a
<7>[ 7254.420000] ath: phy0: TPC[16] 0x00000016
<7>[ 7254.420000] ath: phy0: TPC[17] 0x00000014
<7>[ 7254.420000] ath: phy0: TPC[18] 0x0000001a
<7>[ 7254.420000] ath: phy0: TPC[19] 0x0000001a
<7>[ 7254.420000] ath: phy0: TPC[20] 0x00000016
<7>[ 7254.420000] ath: phy0: TPC[21] 0x00000014
<7>[ 7254.420000] ath: phy0: TPC[22] 0x00000000
<7>[ 7254.420000] ath: phy0: TPC[23] 0x00000000
<7>[ 7254.420000] ath: phy0: TPC[24] 0x00000000
<7>[ 7254.420000] ath: phy0: TPC[25] 0x00000000
<7>[ 7254.420000] ath: phy0: TPC[26] 0x00000000
<7>[ 7254.420000] ath: phy0: TPC[27] 0x00000000
<7>[ 7254.420000] ath: phy0: TPC[28] 0x00000000
<7>[ 7254.420000] ath: phy0: TPC[29] 0x00000000
<7>[ 7254.420000] ath: phy0: TPC[30] 0x00000000
<7>[ 7254.420000] ath: phy0: TPC[31] 0x00000000
<7>[ 7254.420000] ath: phy0: TPC[32] 0x00000000
<7>[ 7254.420000] ath: phy0: TPC[33] 0x00000000
<7>[ 7254.420000] ath: phy0: TPC[34] 0x00000000
<7>[ 7254.420000] ath: phy0: TPC[35] 0x00000000
<7>[ 7254.420000] ath: phy0: ch=0 f=2461 low=2437 21 h=2462 18
<7>[ 7254.420000] ath: phy0: ch=1 f=2461 low=2437 0 h=2462 0
<7>[ 7254.420000] ath: phy0: ch=2 f=2461 low=2437 0 h=2462 0
<7>[ 7254.420000] ath: phy0: for frequency=2461, calibration correction = 18 0 0
<7>[ 7254.420000] ath: phy0: Disable LNA combining
<7>[ 7254.420000] ath: phy0: ah->misc_mode 0x1000000c
<7>[ 7254.420000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<6>[ 7254.430000] device wlan0 entered promiscuous mode
<0>[ 7255.140000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2462, numPiers=2
<0>[ 7255.140000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=60.
<0>[ 7255.140000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2462, numPiers=2
<0>[ 7255.140000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=60.
<0>[ 7255.140000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2462, numPiers=2
<0>[ 7255.140000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=60.
<0>[ 7255.140000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2462, numPiers=2
<0>[ 7255.140000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=60.
<0>[ 7255.140000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2462, numPiers=3
<0>[ 7255.140000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=60.
<0>[ 7255.140000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2462, numPiers=3
<0>[ 7255.140000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=56.
<0>[ 7255.140000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2462, numPiers=3
<0>[ 7255.140000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=48.
<0>[ 7255.140000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2462, numPiers=3
<0>[ 7255.140000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=48.
<0>[ 7255.140000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2462, numPiers=3
<0>[ 7255.140000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=60.
<0>[ 7255.140000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2462, numPiers=3
<0>[ 7255.140000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=60.
<0>[ 7255.140000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2462, numPiers=3
<0>[ 7255.140000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=56.
<0>[ 7255.140000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2462, numPiers=3
<0>[ 7255.140000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=48.
<0>[ 7255.140000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2462, numPiers=3
<0>[ 7255.140000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=48.
<0>[ 7255.140000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2462, numPiers=3
<0>[ 7255.140000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=48.
<0>[ 7255.140000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2462, numPiers=3
<0>[ 7255.140000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=26.
<0>[ 7255.140000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2462, numPiers=3
<0>[ 7255.140000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=26.
<0>[ 7255.140000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2462, numPiers=3
<0>[ 7255.140000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=22.
<0>[ 7255.140000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2462, numPiers=3
<0>[ 7255.140000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=20.
<0>[ 7255.140000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2462, numPiers=3
<0>[ 7255.140000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=26.
<0>[ 7255.140000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2462, numPiers=3
<0>[ 7255.140000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=26.
<0>[ 7255.140000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2462, numPiers=3
<0>[ 7255.140000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=22.
<0>[ 7255.140000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2462, numPiers=3
<0>[ 7255.140000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=20.
<7>[ 7255.140000] ath: phy0: TPC[00] 0x0000003c		// target power frequency piers maybe different than cal frequency piers. the interpolation to target power piers make no much sense because they're all fixed tables. 0x3c=60 = 30dBm * 2.
<7>[ 7255.140000] ath: phy0: TPC[01] 0x00000038
<7>[ 7255.140000] ath: phy0: TPC[02] 0x00000030
<7>[ 7255.140000] ath: phy0: TPC[03] 0x00000030
<7>[ 7255.140000] ath: phy0: TPC[04] 0x0000003c
<7>[ 7255.140000] ath: phy0: TPC[05] 0x0000003c
<7>[ 7255.140000] ath: phy0: TPC[06] 0x0000003c
<7>[ 7255.140000] ath: phy0: TPC[07] 0x0000003c
<7>[ 7255.140000] ath: phy0: TPC[08] 0x0000003c
<7>[ 7255.140000] ath: phy0: TPC[09] 0x0000003c
<7>[ 7255.140000] ath: phy0: TPC[10] 0x00000038
<7>[ 7255.140000] ath: phy0: TPC[11] 0x00000030
<7>[ 7255.140000] ath: phy0: TPC[12] 0x00000030
<7>[ 7255.140000] ath: phy0: TPC[13] 0x00000030
<7>[ 7255.140000] ath: phy0: TPC[14] 0x0000001a
<7>[ 7255.140000] ath: phy0: TPC[15] 0x0000001a
<7>[ 7255.140000] ath: phy0: TPC[16] 0x00000016
<7>[ 7255.140000] ath: phy0: TPC[17] 0x00000014
<7>[ 7255.140000] ath: phy0: TPC[18] 0x0000001a
<7>[ 7255.140000] ath: phy0: TPC[19] 0x0000001a
<7>[ 7255.140000] ath: phy0: TPC[20] 0x00000016
<7>[ 7255.140000] ath: phy0: TPC[21] 0x00000014
<7>[ 7255.140000] ath: phy0: TPC[22] 0x00000000
<7>[ 7255.140000] ath: phy0: TPC[23] 0x00000000
<7>[ 7255.140000] ath: phy0: TPC[24] 0x00000000
<7>[ 7255.140000] ath: phy0: TPC[25] 0x00000000
<7>[ 7255.140000] ath: phy0: TPC[26] 0x00000000
<7>[ 7255.140000] ath: phy0: TPC[27] 0x00000000
<7>[ 7255.140000] ath: phy0: TPC[28] 0x00000000
<7>[ 7255.140000] ath: phy0: TPC[29] 0x00000000
<7>[ 7255.140000] ath: phy0: TPC[30] 0x00000000
<7>[ 7255.140000] ath: phy0: TPC[31] 0x00000000
<7>[ 7255.140000] ath: phy0: TPC[32] 0x00000000
<7>[ 7255.140000] ath: phy0: TPC[33] 0x00000000
<7>[ 7255.140000] ath: phy0: TPC[34] 0x00000000
<7>[ 7255.140000] ath: phy0: TPC[35] 0x00000000
<7>[ 7255.140000] ath: phy0: LOOP-Mode ctlMode 0 < 3, isHt40CtlMode 0, EXT_ADDITIVE 0
<7>[ 7255.140000] ath: phy0: LOOP-Ctlidx 0: cfgCtl 0x12 pCtlMode 0x01 ctlIndex 0x11 chan 2462
<7>[ 7255.140000] ath: phy0: SEL-Min ctlMode 0 pCtlMode 1 2xMaxEdge 60 sP 26 minCtlPwr 26
<7>[ 7255.140000] ath: phy0: LOOP-Mode ctlMode 1 < 3, isHt40CtlMode 0, EXT_ADDITIVE 0
<7>[ 7255.140000] ath: phy0: LOOP-Ctlidx 0: cfgCtl 0x12 pCtlMode 0x02 ctlIndex 0x11 chan 2462
<7>[ 7255.140000] ath: phy0: LOOP-Ctlidx 1: cfgCtl 0x12 pCtlMode 0x02 ctlIndex 0x12 chan 2462
<7>[ 7255.140000] ath: phy0: SEL-Min ctlMode 1 pCtlMode 2 2xMaxEdge 60 sP 26 minCtlPwr 26
<7>[ 7255.140000] ath: phy0: LOOP-Mode ctlMode 2 < 3, isHt40CtlMode 0, EXT_ADDITIVE 0
<7>[ 7255.140000] ath: phy0: LOOP-Ctlidx 0: cfgCtl 0x12 pCtlMode 0x05 ctlIndex 0x11 chan 2462
<7>[ 7255.140000] ath: phy0: LOOP-Ctlidx 1: cfgCtl 0x12 pCtlMode 0x05 ctlIndex 0x12 chan 2462
<7>[ 7255.140000] ath: phy0: LOOP-Ctlidx 2: cfgCtl 0x12 pCtlMode 0x05 ctlIndex 0x15 chan 2462
<7>[ 7255.140000] ath: phy0: SEL-Min ctlMode 2 pCtlMode 5 2xMaxEdge 60 sP 26 minCtlPwr 26
<7>[ 7255.140000] ath: phy0: TPC[00] 0x0000001a
<7>[ 7255.140000] ath: phy0: TPC[01] 0x0000001a
<7>[ 7255.140000] ath: phy0: TPC[02] 0x0000001a
<7>[ 7255.140000] ath: phy0: TPC[03] 0x0000001a
<7>[ 7255.140000] ath: phy0: TPC[04] 0x0000001a
<7>[ 7255.140000] ath: phy0: TPC[05] 0x0000001a
<7>[ 7255.140000] ath: phy0: TPC[06] 0x0000001a
<7>[ 7255.140000] ath: phy0: TPC[07] 0x0000001a
<7>[ 7255.140000] ath: phy0: TPC[08] 0x0000001a
<7>[ 7255.140000] ath: phy0: TPC[09] 0x0000001a
<7>[ 7255.140000] ath: phy0: TPC[10] 0x0000001a
<7>[ 7255.140000] ath: phy0: TPC[11] 0x0000001a
<7>[ 7255.140000] ath: phy0: TPC[12] 0x0000001a
<7>[ 7255.140000] ath: phy0: TPC[13] 0x0000001a
<7>[ 7255.140000] ath: phy0: TPC[14] 0x0000001a
<7>[ 7255.140000] ath: phy0: TPC[15] 0x0000001a
<7>[ 7255.140000] ath: phy0: TPC[16] 0x00000016
<7>[ 7255.140000] ath: phy0: TPC[17] 0x00000014
<7>[ 7255.140000] ath: phy0: TPC[18] 0x0000001a
<7>[ 7255.140000] ath: phy0: TPC[19] 0x0000001a
<7>[ 7255.140000] ath: phy0: TPC[20] 0x00000016
<7>[ 7255.140000] ath: phy0: TPC[21] 0x00000014
<7>[ 7255.140000] ath: phy0: TPC[22] 0x00000000
<7>[ 7255.140000] ath: phy0: TPC[23] 0x00000000
<7>[ 7255.140000] ath: phy0: TPC[24] 0x00000000
<7>[ 7255.140000] ath: phy0: TPC[25] 0x00000000
<7>[ 7255.140000] ath: phy0: TPC[26] 0x00000000
<7>[ 7255.140000] ath: phy0: TPC[27] 0x00000000
<7>[ 7255.140000] ath: phy0: TPC[28] 0x00000000
<7>[ 7255.140000] ath: phy0: TPC[29] 0x00000000
<7>[ 7255.140000] ath: phy0: TPC[30] 0x00000000
<7>[ 7255.140000] ath: phy0: TPC[31] 0x00000000
<7>[ 7255.140000] ath: phy0: TPC[32] 0x00000000
<7>[ 7255.140000] ath: phy0: TPC[33] 0x00000000
<7>[ 7255.140000] ath: phy0: TPC[34] 0x00000000
<7>[ 7255.140000] ath: phy0: TPC[35] 0x00000000
<7>[ 7255.140000] ath: phy0: ch=0 f=2462 low=2462 18 h=2462 18
<7>[ 7255.140000] ath: phy0: ch=1 f=2462 low=2462 0 h=2462 0
<7>[ 7255.140000] ath: phy0: ch=2 f=2462 low=2462 0 h=2462 0
<7>[ 7255.140000] ath: phy0: for frequency=2462, calibration correction = 18 0 0
<7>[ 7255.140000] ath: phy0: Disable LNA combining
<7>[ 7255.140000] ath: phy0: ah->misc_mode 0x1000000c
<7>[ 7255.140000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<6>[ 7255.150000] br-lan: port 2(wlan0) entered forwarding state
<6>[ 7255.150000] br-lan: port 2(wlan0) entered forwarding state
<0>[ 7255.290000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2462, numPiers=2
<0>[ 7255.290000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=60.
<0>[ 7255.290000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2462, numPiers=2
<0>[ 7255.290000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=60.
<0>[ 7255.290000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2462, numPiers=2
<0>[ 7255.290000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=60.
<0>[ 7255.290000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2462, numPiers=2
<0>[ 7255.290000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=60.
<0>[ 7255.290000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2462, numPiers=3
<0>[ 7255.290000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=60.
<0>[ 7255.290000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2462, numPiers=3
<0>[ 7255.290000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=56.
<0>[ 7255.290000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2462, numPiers=3
<0>[ 7255.290000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=48.
<0>[ 7255.290000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2462, numPiers=3
<0>[ 7255.290000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=48.
<0>[ 7255.290000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2462, numPiers=3
<0>[ 7255.290000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=60.
<0>[ 7255.290000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2462, numPiers=3
<0>[ 7255.290000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=60.
<0>[ 7255.290000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2462, numPiers=3
<0>[ 7255.290000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=56.
<0>[ 7255.290000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2462, numPiers=3
<0>[ 7255.290000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=48.
<0>[ 7255.290000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2462, numPiers=3
<0>[ 7255.290000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=48.
<0>[ 7255.290000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2462, numPiers=3
<0>[ 7255.290000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=48.
<0>[ 7255.290000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2462, numPiers=3
<0>[ 7255.290000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=26.
<0>[ 7255.290000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2462, numPiers=3
<0>[ 7255.290000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=26.
<0>[ 7255.290000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2462, numPiers=3
<0>[ 7255.290000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=22.
<0>[ 7255.290000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2462, numPiers=3
<0>[ 7255.290000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=20.
<0>[ 7255.290000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2462, numPiers=3
<0>[ 7255.290000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=26.
<0>[ 7255.290000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2462, numPiers=3
<0>[ 7255.290000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=26.
<0>[ 7255.290000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2462, numPiers=3
<0>[ 7255.290000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=22.
<0>[ 7255.290000] ==MHX(ar9003_hw_power_interpolate)1.0. Freq=2462, numPiers=3
<0>[ 7255.290000] ==MHX(ar9003_hw_power_interpolate)1.1. return y=20.
<7>[ 7255.290000] ath: phy0: TPC[00] 0x0000003c	// target power limit for 2462. 0x3c=60=30dBm*2. the only sense I can see to interpolate the target power is to cap the max power at specific rates. And by regulations as well.
<7>[ 7255.290000] ath: phy0: TPC[01] 0x00000038
<7>[ 7255.290000] ath: phy0: TPC[02] 0x00000030
<7>[ 7255.290000] ath: phy0: TPC[03] 0x00000030
<7>[ 7255.290000] ath: phy0: TPC[04] 0x0000003c
<7>[ 7255.290000] ath: phy0: TPC[05] 0x0000003c
<7>[ 7255.290000] ath: phy0: TPC[06] 0x0000003c
<7>[ 7255.290000] ath: phy0: TPC[07] 0x0000003c
<7>[ 7255.290000] ath: phy0: TPC[08] 0x0000003c
<7>[ 7255.290000] ath: phy0: TPC[09] 0x0000003c
<7>[ 7255.290000] ath: phy0: TPC[10] 0x00000038
<7>[ 7255.290000] ath: phy0: TPC[11] 0x00000030
<7>[ 7255.290000] ath: phy0: TPC[12] 0x00000030
<7>[ 7255.290000] ath: phy0: TPC[13] 0x00000030
<7>[ 7255.290000] ath: phy0: TPC[14] 0x0000001a
<7>[ 7255.290000] ath: phy0: TPC[15] 0x0000001a
<7>[ 7255.290000] ath: phy0: TPC[16] 0x00000016
<7>[ 7255.290000] ath: phy0: TPC[17] 0x00000014
<7>[ 7255.290000] ath: phy0: TPC[18] 0x0000001a
<7>[ 7255.290000] ath: phy0: TPC[19] 0x0000001a
<7>[ 7255.290000] ath: phy0: TPC[20] 0x00000016
<7>[ 7255.290000] ath: phy0: TPC[21] 0x00000014
<7>[ 7255.290000] ath: phy0: TPC[22] 0x00000000
<7>[ 7255.290000] ath: phy0: TPC[23] 0x00000000
<7>[ 7255.290000] ath: phy0: TPC[24] 0x00000000
<7>[ 7255.290000] ath: phy0: TPC[25] 0x00000000
<7>[ 7255.290000] ath: phy0: TPC[26] 0x00000000
<7>[ 7255.290000] ath: phy0: TPC[27] 0x00000000
<7>[ 7255.290000] ath: phy0: TPC[28] 0x00000000
<7>[ 7255.290000] ath: phy0: TPC[29] 0x00000000
<7>[ 7255.290000] ath: phy0: TPC[30] 0x00000000
<7>[ 7255.290000] ath: phy0: TPC[31] 0x00000000
<7>[ 7255.290000] ath: phy0: TPC[32] 0x00000000
<7>[ 7255.290000] ath: phy0: TPC[33] 0x00000000
<7>[ 7255.290000] ath: phy0: TPC[34] 0x00000000
<7>[ 7255.290000] ath: phy0: TPC[35] 0x00000000
<7>[ 7255.290000] ath: phy0: LOOP-Mode ctlMode 0 < 3, isHt40CtlMode 0, EXT_ADDITIVE 0
<7>[ 7255.290000] ath: phy0: LOOP-Ctlidx 0: cfgCtl 0x12 pCtlMode 0x01 ctlIndex 0x11 chan 2462
<7>[ 7255.290000] ath: phy0: SEL-Min ctlMode 0 pCtlMode 1 2xMaxEdge 60 sP 38 minCtlPwr 38
<7>[ 7255.290000] ath: phy0: LOOP-Mode ctlMode 1 < 3, isHt40CtlMode 0, EXT_ADDITIVE 0
<7>[ 7255.290000] ath: phy0: LOOP-Ctlidx 0: cfgCtl 0x12 pCtlMode 0x02 ctlIndex 0x11 chan 2462
<7>[ 7255.290000] ath: phy0: LOOP-Ctlidx 1: cfgCtl 0x12 pCtlMode 0x02 ctlIndex 0x12 chan 2462
<7>[ 7255.290000] ath: phy0: SEL-Min ctlMode 1 pCtlMode 2 2xMaxEdge 60 sP 38 minCtlPwr 38
<7>[ 7255.290000] ath: phy0: LOOP-Mode ctlMode 2 < 3, isHt40CtlMode 0, EXT_ADDITIVE 0
<7>[ 7255.290000] ath: phy0: LOOP-Ctlidx 0: cfgCtl 0x12 pCtlMode 0x05 ctlIndex 0x11 chan 2462
<7>[ 7255.290000] ath: phy0: LOOP-Ctlidx 1: cfgCtl 0x12 pCtlMode 0x05 ctlIndex 0x12 chan 2462
<7>[ 7255.290000] ath: phy0: LOOP-Ctlidx 2: cfgCtl 0x12 pCtlMode 0x05 ctlIndex 0x15 chan 2462
<7>[ 7255.290000] ath: phy0: SEL-Min ctlMode 2 pCtlMode 5 2xMaxEdge 60 sP 38 minCtlPwr 38
<7>[ 7255.290000] ath: phy0: TPC[00] 0x00000026		// expected power 19dBm * 2 = 38 = 0x26.
<7>[ 7255.290000] ath: phy0: TPC[01] 0x00000026
<7>[ 7255.290000] ath: phy0: TPC[02] 0x00000026
<7>[ 7255.290000] ath: phy0: TPC[03] 0x00000026
<7>[ 7255.290000] ath: phy0: TPC[04] 0x00000026
<7>[ 7255.290000] ath: phy0: TPC[05] 0x00000026
<7>[ 7255.290000] ath: phy0: TPC[06] 0x00000026
<7>[ 7255.290000] ath: phy0: TPC[07] 0x00000026
<7>[ 7255.290000] ath: phy0: TPC[08] 0x00000026
<7>[ 7255.290000] ath: phy0: TPC[09] 0x00000026
<7>[ 7255.290000] ath: phy0: TPC[10] 0x00000026
<7>[ 7255.290000] ath: phy0: TPC[11] 0x00000026
<7>[ 7255.290000] ath: phy0: TPC[12] 0x00000026
<7>[ 7255.290000] ath: phy0: TPC[13] 0x00000026
<7>[ 7255.290000] ath: phy0: TPC[14] 0x0000001a
<7>[ 7255.290000] ath: phy0: TPC[15] 0x0000001a
<7>[ 7255.290000] ath: phy0: TPC[16] 0x00000016
<7>[ 7255.290000] ath: phy0: TPC[17] 0x00000014
<7>[ 7255.290000] ath: phy0: TPC[18] 0x0000001a
<7>[ 7255.290000] ath: phy0: TPC[19] 0x0000001a
<7>[ 7255.290000] ath: phy0: TPC[20] 0x00000016
<7>[ 7255.290000] ath: phy0: TPC[21] 0x00000014
<7>[ 7255.290000] ath: phy0: TPC[22] 0x00000000
<7>[ 7255.290000] ath: phy0: TPC[23] 0x00000000
<7>[ 7255.290000] ath: phy0: TPC[24] 0x00000000
<7>[ 7255.290000] ath: phy0: TPC[25] 0x00000000
<7>[ 7255.290000] ath: phy0: TPC[26] 0x00000000
<7>[ 7255.290000] ath: phy0: TPC[27] 0x00000000
<7>[ 7255.290000] ath: phy0: TPC[28] 0x00000000
<7>[ 7255.290000] ath: phy0: TPC[29] 0x00000000
<7>[ 7255.290000] ath: phy0: TPC[30] 0x00000000
<7>[ 7255.290000] ath: phy0: TPC[31] 0x00000000
<7>[ 7255.290000] ath: phy0: TPC[32] 0x00000000
<7>[ 7255.290000] ath: phy0: TPC[33] 0x00000000
<7>[ 7255.290000] ath: phy0: TPC[34] 0x00000000
<7>[ 7255.290000] ath: phy0: TPC[35] 0x00000000
<7>[ 7255.290000] ath: phy0: ch=0 f=2462 low=2462 18 h=2462 18	// correction=18, that is just in the cal table.
<7>[ 7255.290000] ath: phy0: ch=1 f=2462 low=2462 0 h=2462 0
<7>[ 7255.290000] ath: phy0: ch=2 f=2462 low=2462 0 h=2462 0
<7>[ 7255.290000] ath: phy0: for frequency=2462, calibration correction = 18 0 0
<7>[ 7255.330000] ath: phy0: ah->misc_mode 0x1000000c
<6>[ 7257.150000] br-lan: port 2(wlan0) entered forwarding state




Aug 10, 2020
For those with external synthesizers, the IF keeps the same. Every frequency uses the same IF frequency data? In driver:
ar9003_hw_get_target_power_eeprom()[Target powers of different rates are filled in targetPowerValT2[].] ---> ar9003_hw_get_ht20_target_powers() ---> ar9003_hw_eeprom_get_ht20_tgt_pwr() ---> ar9003_hw_power_interpolate()

How is the calib data stored:
In struct ar9300_eeprom {
	struct ar9300_cal_data_per_freq_op_loop	 calPierData2G[AR9300_MAX_CHAINS][AR9300_NUM_2G_CAL_PIERS]; // 3chain X 3 piers.
}

This is the part of EEPROM:
7510 INFO  |=================2G Power Calibration Information =====================|
7510 INFO  |                                                                       |
7510 INFO  |                   Chain 0                          Chain 1            |
7510 INFO  |-----------------------------------------------------------------------|
7510 INFO  |                     rxNF rxNF rx  |                   rxNF rxNF   rx  |
7510 INFO  | Freq  Pwr Volt Temp  Cal pwr Temp |     Pwr Volt Temp  Cal  pwr  Temp |
7510 INFO  |-----------------------------------------------------------------------|
7510 INFO  | 2412   17   0  122  -104  -57   0 |       0   0    0  0000    0    0  |
7510 INFO  | 2437   21   0  120  -104  -60   0 |       0   0    0  0000    0    0  |
7510 INFO  | 2462   18   0  116  -102  -57   0 |       0   0    0  0000    0    0  |
7510 INFO  |-----------------------------------------------------------------------|


How to use the calibration? 
In mac802111 ath9k_hw_ar9300_set_txpower(chan) ---> ar9003_hw_calibration_apply(freq) ---> 1) ar9003_hw_cal_pier_get(), where the cal data is got:
	*pcorrection = pCalPierStruct->refPower;
	*ptemperature = pCalPierStruct->tempMeas;
	*pvoltage = pCalPierStruct->voltMeas;
----> 2) ar9003_hw_power_control_override(freq).

After getting the cal data, the ar9003_hw_calibration_apply() does interpolation to these cal data to the desired frequency. And will show (pDDL424,900M mode):
<7>[ 4564.490000] ath: phy0: ch=0 f=2391 low=2391 24 h=2391 24
<7>[ 4564.490000] ath: phy0: ch=1 f=2391 low=2391 0 h=2391 0
<7>[ 4564.490000] ath: phy0: ch=2 f=2391 low=2391 0 h=2391 0
<7>[ 4564.490000] ath: phy0: for frequency=2391, calibration correction = 24 0 0. The 24 is from calPierData2G of eeprom that is 24 for 900MHz@2391.

These corrections are used to call ar9003_hw_power_control_override(ah, frequency, correction, voltage, temperature) ---> ar9003_hw_power_interpolate(). This is a pure math calculation. ar9003_hw_eeprom_get_ht20_tgt_pwr() calls ar9003_hw_power_interpolate() too but because the Target Power Table, like below:

7510 INFO  | HT20   |        2412        |        2437        |        2472        |
7510 INFO  |========|====================|====================|====================|
7510 INFO  | MCS0   |        30.0        |        30.0        |        30.0        |
7510 INFO  | MCS1   |        30.0        |        30.0        |        30.0        |
7510 INFO  | MCS2   |        30.0        |        30.0        |        30.0        |
7510 INFO  | MCS3   |        30.0        |        30.0        |        30.0        |
7510 INFO  | MCS4   |        28.0        |        28.0        |        28.0        |
7510 INFO  | MCS5   |        24.0        |        24.0        |        24.0        |
7510 INFO  | MCS6   |        24.0        |        24.0        |        24.0        |
7510 INFO  | MCS7   |        24.0        |        24.0        |        24.0        |
7510 INFO  | MCS8   |        30.0        |        30.0        |        30.0        |
7510 INFO  | MCS9   |        30.0        |        30.0        |        30.0        |

is just a FIXED table written during calibration, so this frequency interpolation on Target Power makes no much sense. The key point is the frequency interpolation to the "struct ar9300_cal_data_per_freq_op_loop	 calPierData2G[AR9300_MAX_CHAINS]" data.

In ar9003_hw_power_control_override(), the cal correction data is written to registers like AR_PHY_TPC_11_B0, AR_PHY_TPC_11_B1, AR_PHY_TPC_11_B2 , AR_PHY_TPC_18.


Aug 6, 2020
G5, 2 virtual interfaces, 1 AP + 1 STA. Make sure they don't affect with each other.
1. hostapd conf file should specify "start_disabled=0".
2. wpa_supplicant should not use -H parameter:
        # wpa_supplicant_run "$ifname" ${hostapd_ctrl:+-H $hostapd_ctrl}
        wpa_supplicant_run "$ifname"
3. wpa_supplicant conf file must specify "scan_freq=xxxx" : 
root@UserDevice:~# cat var/run/wpa_supplicant-wlan0.conf 
country=US
network={
        scan_ssid=1
scan_freq=2437	// ath10k f/w goes crazy if scanning whole wild spectrum.
        ssid="bulletac-jeff"
        key_mgmt=WPA-PSK
        psk="Microhard@18"
        proto=RSN
}

PWii has this principle applied (except the scan_freq, looks like only scanning the 11 standard WiFi channels doesn't make much trouble). PDDL and PMDDL should introduce this principle for Repeater mode.

Aug 5, 2020
证书登录的前提是，必须有一个 CA，而 CA 本质上就是一对密钥，跟其他密钥没有不同，CA 就用这对密钥去签发证书。
虽然 CA 可以用同一对密码签发用户证书和服务器证书，但是出于安全性和灵活性，最好用不同的密钥分别签发。所以，CA 至少需要两对密钥，一对是签发用户证书的密钥，假设叫做user_ca，另一对是签发服务器证书的密钥，假设叫做host_ca。

Aug 4, 2020
How to exit a hung SSH : ~+. to exit the terminal. ~+? for help commands.

JUl 31, 2020
G5(AP,bulletac-jeff) ~~~~~~ PWii-1(STA, wlan0:bulletac-jeff; AP, wlan0-1:bulletac-jeff-2) ~~~~ PWii-2(STA, wlan0:bulletac-jeff-2)

PWii-1 has 2 VIF : 
root@ip30-0086:~# iwinfo 
wlan0     ESSID: "bulletac-jeff"
          Access Point: 04:F0:21:1A:D6:23
          Mode: Client  Channel: 6 (2.437 GHz)
          Tx-Power: 16 dBm  Link Quality: 31/70
          Signal: -79 dBm  Noise: -98 dBm
          Bit Rate: 43.3 MBit/s
          Encryption: WPA2 PSK (CCMP)
          Type: nl80211  HW Mode(s): 802.11bgn
          Hardware: unknown [Generic MAC80211]
          TX power offset: unknown
          Frequency offset: unknown
          Supports VAPs: yes  PHY name: phy0

wlan0-1   ESSID: "bulletac-jeff-2"
          Access Point: 02:0F:92:FE:00:86
          Mode: Master  Channel: 6 (2.437 GHz)
          Tx-Power: 16 dBm  Link Quality: 27/70
          Signal: -83 dBm  Noise: -98 dBm
          Bit Rate: 1.0 MBit/s
          Encryption: WPA2 PSK (CCMP)
          Type: nl80211  HW Mode(s): 802.11bgn
          Hardware: unknown [Generic MAC80211]
          TX power offset: unknown
          Frequency offset: unknown
          Supports VAPs: yes  PHY name: phy0

[NOTE:] G5 channel and PWii-1 channel MUST BE set to SAME channel!!!
PWii-1 kernel log:

<6>[ 1792.250000] wlan0: deauthenticating from 04:f0:21:1a:d6:23 by local choice (Reason: 3=DEAUTH_LEAVING)
<7>[ 1792.250000] ath: phy0: Set HW Key 1
<7>[ 1792.250000] ath: phy0: BSSID 00:00:00:00:00:00 Changed ASSOC 0
<7>[ 1792.250000] ath: phy0: ah->misc_mode 0x1000000c
<7>[ 1792.250000] ath: phy0: Configure tx [queue/halq] [0/0], aifs: 2, cw_min: 15, cw_max: 1023, txop: 0
<7>[ 1792.250000] ath: phy0: Configure tx [queue/halq] [1/1], aifs: 2, cw_min: 15, cw_max: 1023, txop: 0
<7>[ 1792.250000] ath: phy0: Configure tx [queue/halq] [2/2], aifs: 2, cw_min: 15, cw_max: 1023, txop: 0
<7>[ 1792.250000] ath: phy0: Configure tx [queue/halq] [3/3], aifs: 2, cw_min: 15, cw_max: 1023, txop: 0
<7>[ 1792.250000] ath: phy0: Set HW Key 1
<6>[ 1792.260000] br-lan: port 4(wlan0) entered disabled state
<6>[ 1792.270000] device wlan0-1 left promiscuous mode
<6>[ 1792.270000] br-lan: port 3(wlan0-1) entered disabled state
<7>[ 1792.270000] ath: phy0: Set HW RX filter: 0xc497
<7>[ 1792.270000] ath: phy0: Set HW Key 1
<7>[ 1792.270000] ath: phy0: Set channel: 2437 MHz width: 0
<7>[ 1792.270000] ath: phy0: Reset to 2437 MHz, HT40: 0 fastcc: 0
<7>[ 1792.270000] ath: phy0: ah->misc_mode 0x1000000c
<7>[ 1792.280000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[ 1792.280000] ath: phy0: Set power: 30
<7>[ 1792.280000] ath: phy0: Set HW RX filter: 0xc097
<7>[ 1792.280000] ath: phy0: Detach Interface
<7>[ 1792.280000] ath: phy0: Removing interface at beacon slot: 0
<7>[ 1792.280000] ath: phy0: Set HW RX filter: 0x287
<7>[ 1792.280000] ath: phy0: Set HW RX filter: 0x287
<7>[ 1792.310000] ath: phy0: Set HW RX filter: 0x287
<7>[ 1792.310000] ath: phy0: Detach Interface
<7>[ 1792.310000] ath: phy0: ah->misc_mode 0x10000004
<7>[ 1792.310000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[ 1792.310000] ath: phy0: Driver halt
<7>[ 1792.310000] ath: phy0: (ath9k_stop) Deactivate PHY and ANT_C. Orig antCtrlCommon=0x00000550
<7>[ 1792.310000] ath: phy0: reset MAC via external reset
<7>[ 1792.330000] ath: phy0: AWAKE -> FULL-SLEEP
<6>[ 1792.330000] br-lan: port 4(wlan0) entered disabled state
<7>[ 1792.330000] ath: phy0: FULL-SLEEP -> AWAKE
<6>[ 1792.340000] device wlan0 left promiscuous mode
<6>[ 1792.340000] br-lan: port 4(wlan0) entered disabled state
<7>[ 1792.430000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[ 1792.990000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[ 1793.000000] ath: phy0: ah->misc_mode 0x10000004
<7>[ 1793.100000] ath: phy0: AWAKE -> FULL-SLEEP
<0>[ 1793.500000] ==MHX5.0(ieee80211_check_combinations) software_iftypes=0x50, iftype=3
<7>[ 1793.500000] ath: phy0: Starting driver with initial channel: 2437 MHz
<7>[ 1793.500000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[ 1793.500000] ath: phy0: reset MAC via external reset
<7>[ 1793.520000] ath: phy0: ah->misc_mode 0x10000004
<7>[ 1793.520000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[ 1793.520000] ath: phy0: Attach a VIF of type: 3
<7>[ 1793.520000] ath: phy0: Added interface at beacon slot: 0
<7>[ 1793.520000] ath: phy0: Set HW RX filter: 0x4097
<7>[ 1793.520000] ath: phy0: Configure tx [queue/halq] [0/0], aifs: 2, cw_min: 3, cw_max: 7, txop: 47
<7>[ 1793.520000] ath: phy0: Configure tx [queue/halq] [1/1], aifs: 2, cw_min: 7, cw_max: 15, txop: 94
<7>[ 1793.520000] ath: phy0: Configure tx [queue/halq] [2/2], aifs: 3, cw_min: 15, cw_max: 1023, txop: 0
<7>[ 1793.520000] ath: phy0: Configure tx [queue/halq] [3/3], aifs: 7, cw_min: 15, cw_max: 1023, txop: 0
<7>[ 1793.520000] ath: phy0: Monitor mode is disabled
<7>[ 1793.520000] ath: phy0: Set channel: 2437 MHz width: 0
<7>[ 1793.520000] ath: phy0: Reset to 2437 MHz, HT40: 0 fastcc: 0
<7>[ 1793.520000] ath: phy0: ah->misc_mode 0x1000000c
<7>[ 1793.530000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[ 1793.530000] ath: phy0: Set power: 30
<6>[ 1793.530000] IPv6: ADDRCONF(NETDEV_UP): wlan0-1: link is not ready
<7>[ 1793.530000] ath: phy0: Set HW RX filter: 0x4097
<6>[ 1793.540000] device wlan0-1 entered promiscuous mode
<6>[ 1793.540000] br-lan: port 3(wlan0-1) entered forwarding state
<6>[ 1793.540000] br-lan: port 3(wlan0-1) entered forwarding state
<7>[ 1793.540000] ath: phy0: Set HW RX filter: 0x4097
<7>[ 1793.650000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[ 1793.650000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[ 1793.750000] ath: phy0: AWAKE -> FULL-SLEEP
<0>[ 1794.130000] ==MHX4.0(ieee80211_vif_use_channel) cfg80211_chandef_dfs_required() ret=0
<0>[ 1794.130000] ==MHX5.0(ieee80211_check_combinations) software_iftypes=0x50, iftype=3
<0>[ 1794.130000] ==MHX4.1(ieee80211_vif_use_channel) ieee80211_check_combinations() ret=0
<7>[ 1794.130000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[ 1794.140000] ath: phy0: Set channel: 2437 MHz width: 0
<7>[ 1794.140000] ath: phy0: Reset to 2437 MHz, HT40: 0 fastcc: 0
<7>[ 1794.140000] ath: phy0: reset MAC via external reset
<7>[ 1794.150000] ath: phy0: ah->misc_mode 0x1000000c
<7>[ 1794.150000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[ 1794.150000] ath: phy0: Set channel: 2437 MHz width: 1
<7>[ 1794.150000] ath: phy0: Reset to 2437 MHz, HT40: 0 fastcc: 0
<7>[ 1794.160000] ath: phy0: ah->misc_mode 0x1000000c
<7>[ 1794.160000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<0>[ 1794.160000] ==MHX4.2(ieee80211_vif_use_channel) ctx=82bc3080
<0>[ 1794.160000] ===MHX3.0(ieee80211_assign_vif_chanctx) drv_assign_vif_chanctx returned ret=0
<0>[ 1794.160000] ==MHX4.3(ieee80211_vif_use_channel) ieee80211_assign_vif_chanctx() ret=0
<6>[ 1794.160000] IPv6: ADDRCONF(NETDEV_CHANGE): wlan0-1: link becomes ready
<7>[ 1794.160000] ath: phy0: Set HW RX filter: 0x4497
<7>[ 1794.160000] ath: phy0: Set HW Key 0
<7>[ 1794.160000] ath: phy0: Configure tx [queue/halq] [0/0], aifs: 1, cw_min: 3, cw_max: 7, txop: 47
<7>[ 1794.160000] ath: phy0: Configure tx [queue/halq] [1/1], aifs: 1, cw_min: 7, cw_max: 15, txop: 94
<7>[ 1794.160000] ath: phy0: Configure tx [queue/halq] [2/2], aifs: 3, cw_min: 15, cw_max: 63, txop: 0
<7>[ 1794.160000] ath: phy0: Configure tx [queue/halq] [3/3], aifs: 7, cw_min: 15, cw_max: 1023, txop: 0
<0>[ 1794.260000] ==MHX5.0(ieee80211_check_combinations) software_iftypes=0x50, iftype=2
<7>[ 1794.260000] ath: phy0: Attach a VIF of type: 2
<7>[ 1794.260000] ath: phy0: ah->misc_mode 0x1000000c
<7>[ 1794.260000] ath: phy0: Configure tx [queue/halq] [0/0], aifs: 2, cw_min: 15, cw_max: 1023, txop: 0
<7>[ 1794.260000] ath: phy0: Configure tx [queue/halq] [1/1], aifs: 2, cw_min: 15, cw_max: 1023, txop: 0
<7>[ 1794.260000] ath: phy0: Configure tx [queue/halq] [2/2], aifs: 2, cw_min: 15, cw_max: 1023, txop: 0
<7>[ 1794.260000] ath: phy0: Configure tx [queue/halq] [3/3], aifs: 2, cw_min: 15, cw_max: 1023, txop: 0
<6>[ 1794.260000] IPv6: ADDRCONF(NETDEV_UP): wlan0: link is not ready
<7>[ 1794.260000] ath: phy0: Set HW RX filter: 0xc497
<7>[ 1794.340000] ath: phy0: ah->misc_mode 0x1000000c
<7>[ 1795.130000] ath: phy0: Set HW RX filter: 0xc497
<7>[ 1795.130000] ath: phy0: Set channel: 2412 MHz width: 0
<7>[ 1795.130000] ath: phy0: Reset to 2412 MHz, HT40: 0 fastcc: 1
<7>[ 1795.130000] ath: phy0: FastChannelChange for 2437 -> 2412
<7>[ 1795.170000] ath: phy0: Set HW RX filter: 0xc097
<7>[ 1795.180000] ath: phy0: Set channel: 2412 MHz width: 0
<7>[ 1795.180000] ath: phy0: Reset to 2412 MHz, HT40: 0 fastcc: 1
<7>[ 1795.190000] ath: phy0: ah->misc_mode 0x1000000c
<7>[ 1795.190000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[ 1795.190000] ath: phy0: Set power: 16
<7>[ 1795.190000] ath: phy0: Set channel: 2417 MHz width: 0
<7>[ 1795.190000] ath: phy0: Reset to 2417 MHz, HT40: 0 fastcc: 1
<7>[ 1795.190000] ath: phy0: FastChannelChange for 2412 -> 2417
<7>[ 1795.250000] ath: phy0: Set channel: 2422 MHz width: 0
<7>[ 1795.250000] ath: phy0: Reset to 2422 MHz, HT40: 0 fastcc: 1
<7>[ 1795.250000] ath: phy0: FastChannelChange for 2417 -> 2422
<6>[ 1795.300000] device wlan0 entered promiscuous mode
<7>[ 1795.310000] ath: phy0: Set HW RX filter: 0xc097
<7>[ 1795.310000] ath: phy0: Set channel: 2427 MHz width: 0
<7>[ 1795.310000] ath: phy0: Reset to 2427 MHz, HT40: 0 fastcc: 1
<7>[ 1795.310000] ath: phy0: FastChannelChange for 2422 -> 2427
<7>[ 1795.370000] ath: phy0: Set channel: 2432 MHz width: 0
<7>[ 1795.370000] ath: phy0: Reset to 2432 MHz, HT40: 0 fastcc: 1
<7>[ 1795.370000] ath: phy0: FastChannelChange for 2427 -> 2432
<7>[ 1795.430000] ath: phy0: Set channel: 2437 MHz width: 1
<7>[ 1795.430000] ath: phy0: Reset to 2437 MHz, HT40: 0 fastcc: 0
<7>[ 1795.430000] ath: phy0: ah->misc_mode 0x1000000c
<7>[ 1795.430000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[ 1795.490000] ath: phy0: Set channel: 2442 MHz width: 0
<7>[ 1795.490000] ath: phy0: Reset to 2442 MHz, HT40: 0 fastcc: 1
<7>[ 1795.490000] ath: phy0: FastChannelChange for 2437 -> 2442
<6>[ 1795.540000] br-lan: port 3(wlan0-1) entered forwarding state
<7>[ 1795.550000] ath: phy0: Set channel: 2447 MHz width: 0
<7>[ 1795.550000] ath: phy0: Reset to 2447 MHz, HT40: 0 fastcc: 1
<7>[ 1795.550000] ath: phy0: FastChannelChange for 2442 -> 2447
<7>[ 1795.610000] ath: phy0: Set channel: 2452 MHz width: 0
<7>[ 1795.610000] ath: phy0: Reset to 2452 MHz, HT40: 0 fastcc: 1
<7>[ 1795.610000] ath: phy0: FastChannelChange for 2447 -> 2452
<7>[ 1795.670000] ath: phy0: Set channel: 2457 MHz width: 0
<7>[ 1795.670000] ath: phy0: Reset to 2457 MHz, HT40: 0 fastcc: 1
<7>[ 1795.670000] ath: phy0: FastChannelChange for 2452 -> 2457
<7>[ 1795.730000] ath: phy0: Set channel: 2462 MHz width: 0
<7>[ 1795.730000] ath: phy0: Reset to 2462 MHz, HT40: 0 fastcc: 1
<7>[ 1795.730000] ath: phy0: FastChannelChange for 2457 -> 2462
<7>[ 1795.790000] ath: phy0: Set channel: 2437 MHz width: 1
<7>[ 1795.790000] ath: phy0: Reset to 2437 MHz, HT40: 0 fastcc: 0
<7>[ 1795.790000] ath: phy0: ah->misc_mode 0x1000000c
<7>[ 1795.790000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[ 1795.790000] ath: phy0: Set HW RX filter: 0xc497
<6>[ 1795.790000] wlan0: authenticate with 04:f0:21:1a:d6:23
<0>[ 1795.790000] ==MHX(ieee80211_prep_connection)2.0 auth_data=83b9c400,assoc_data=  (null)
<0>[ 1795.790000] ==MHX(ieee80211_prep_connection)2.1 assoc=0,have_sta=0
<0>[ 1795.790000] ==MHX4.0(ieee80211_vif_use_channel) cfg80211_chandef_dfs_required() ret=0
<0>[ 1795.790000] ==MHX5.0(ieee80211_check_combinations) software_iftypes=0x50, iftype=2
<0>[ 1795.790000] ==MHX4.1(ieee80211_vif_use_channel) ieee80211_check_combinations() ret=0
<0>[ 1795.790000] ==MHX4.2(ieee80211_vif_use_channel) ctx=82bc3080
<0>[ 1795.790000] ===MHX3.0(ieee80211_assign_vif_chanctx) drv_assign_vif_chanctx returned ret=0
<0>[ 1795.790000] ==MHX4.3(ieee80211_vif_use_channel) ieee80211_assign_vif_chanctx() ret=0
<0>[ 1795.790000] ==MHX(ieee80211_prep_connection)2.2 _prep_channel() returned err=0
<0>[ 1795.790000] ==MHX(ieee80211_prep_connection)2.3 chanctx_conf=82bc30a8
<7>[ 1795.790000] ath: phy0: An AP interface is already present !
<0>[ 1795.790000] ===MHX1.0(ieee80211_mgd_auth) ieee80211_prep_connection() returned err=0
<6>[ 1795.790000] wlan0: send auth to 04:f0:21:1a:d6:23 (try 1/3)
<0>[ 1795.790000] ===MHX1.1(ieee80211_mgd_auth) ieee80211_probe_auth() returned err=0
<6>[ 1795.800000] wlan0: authenticated
<0>[ 1795.800000] ==MHX(ieee80211_prep_connection)2.0 auth_data=  (null),assoc_data=83b9c480
<0>[ 1795.800000] ==MHX(ieee80211_prep_connection)2.1 assoc=1,have_sta=1
<6>[ 1795.810000] wlan0: associate with 04:f0:21:1a:d6:23 (try 1/3)
<6>[ 1795.810000] wlan0: RX AssocResp from 04:f0:21:1a:d6:23 (capab=0x431 status=0 aid=1)
<7>[ 1795.810000] ath: phy0: Configure tx [queue/halq] [2/2], aifs: 3, cw_min: 15, cw_max: 1023, txop: 0
<7>[ 1795.810000] ath: phy0: Configure tx [queue/halq] [3/3], aifs: 7, cw_min: 15, cw_max: 1023, txop: 0
<7>[ 1795.810000] ath: phy0: Configure tx [queue/halq] [1/1], aifs: 2, cw_min: 7, cw_max: 15, txop: 94
<7>[ 1795.810000] ath: phy0: Configure tx [queue/halq] [0/0], aifs: 2, cw_min: 3, cw_max: 7, txop: 47
<7>[ 1795.810000] ath: phy0: BSSID 04:f0:21:1a:d6:23 Changed ASSOC 1
<7>[ 1795.810000] ath: phy0: ah->misc_mode 0x1000000c
<6>[ 1795.810000] wlan0: associated
<6>[ 1795.810000] IPv6: ADDRCONF(NETDEV_CHANGE): wlan0: link becomes ready
<7>[ 1795.820000] ath: phy0: Set HW RX filter: 0xc497
<7>[ 1795.840000] ath: phy0: Set HW Key 0
<7>[ 1795.840000] ath: phy0: Set HW Key 0
<6>[ 1795.840000] br-lan: port 4(wlan0) entered forwarding state
<6>[ 1795.840000] br-lan: port 4(wlan0) entered forwarding state
<7>[ 1796.150000] ath: phy0: Set HW RX filter: 0xc497
<7>[ 1796.910000] ath: phy0: Set HW RX filter: 0xc497
<6>[ 1797.840000] br-lan: port 4(wlan0) entered forwarding state
<7>[ 1802.370000] ath: phy0: Set HW Key 1
<7>[ 1802.370000] ath: phy0: Set HW Key 0
<7>[ 1802.530000] ath: phy0: ah->misc_mode 0x1000000c
<7>[ 1804.980000] ath: phy0: Set HW Key 0

Each separate arm works independently too.

Tested the Repeater mode work. Each arm worked indepentendly too. The same notice : SAME channel!.


Jul 28, 2020
QCA9531 DPLL2 Kd can affect bw. When Kd=20, we can get 1MHz bw but not 20MHz. Set Kd=1 or 100 can get bw=20M.
Then set WLAN_PLL_CONTROL(0xb810_7014). set the CLK_SEL field to divide the BW from 4MHz to 2M(0x01, /2) and 1M(0x10, /4). 

Jul 23, 2020
In pDDL, run ART, check different registers value in different BW mode. Freq=2412MHz.

BW=Automatic(shold be normal 20MHz)
------------
Register 0xb8116180 has value 0x29600000	//DPLL
Register 0xb8116184 has value 0x50c42f00	//DPLL2
Register 0xb8116188 has value 0x40800c70	//DPLL3
Register 0xb811618c has value 0x01a90c78	//DPLL4
Register 0xb810a208 has value 0x00000004	//AR_PHY_MODE
Register 0xb8107014 has value 0x0000142c	//AR_RTC_PLL_CONTROL


BW=8MHz:
------------
Register 0xb8116180 has value 0x29600000
Register 0xb8116184 has value 0x50c42f00
Register 0xb8116188 has value 0x40801630
Register 0xb811618c has value 0xfd690e18
Register 0xb810a208 has value 0x00000004
Register 0xb8107014 has value 0x0000542c

BW=4MHz
------------
Register 0xb8116180 has value 0x29600000
Register 0xb8116184 has value 0x50c42f00
Register 0xb8116188 has value 0x408011d0
Register 0xb811618c has value 0x02290b78
Register 0xb810a208 has value 0x00000004
Register 0xb8107014 has value 0x0000942c

BW=2MHz
------------
Register 0xb8116180 has value 0x29600000
Register 0xb8116184 has value 0x50c42f00
Register 0xb8116188 has value 0x40800b98
Register 0xb811618c has value 0xfe890e38
Register 0xb810a208 has value 0x00000044
Register 0xb8107014 has value 0x0000542c

BW=1MHz
------------
Register 0xb8116180 has value 0x29600000
Register 0xb8116184 has value 0x50c42f00
Register 0xb8116188 has value 0x40800e38
Register 0xb811618c has value 0xfe690d88
Register 0xb810a208 has value 0x00000044
Register 0xb8107014 has value 0x0000942c



Jul 22, 2020
1. AR_PHY_MODE
#define AR_SM_BASE	0xa200
#define AR_PHY_MODE              (AR_SM_BASE + 0x8)	// Register address = 0xb810a208.
#define AR_PHY_MODE_OFDM            0x00000000  /* OFDM */
#define AR_PHY_MODE_CCK             0x00000001  /* CCK */
#define AR_PHY_MODE_DYNAMIC         0x00000004  /* dynamic CCK/OFDM mode */
#define AR_PHY_MODE_DYNAMIC_S		2
#define AR_PHY_MODE_HALF            0x00000020  /* enable half rate */
#define AR_PHY_MODE_QUARTER         0x00000040  /* enable quarter rate */
#define AR_PHY_MAC_CLK_MODE         0x00000080  /* MAC runs at 128/141MHz clock */
#define AR_PHY_MODE_DYN_CCK_DISABLE 0x00000100  /* Disable dynamic CCK detection */
#define AR_PHY_MODE_SVD_HALF        0x00000200  /* enable svd half rate */
#define AR_PHY_MODE_DISABLE_CCK     0x00000100

2. AR_RTC_PLL_CONTROL		// Register address = 0xb8107014
///*** This definition doesn't aggree with qca9531 datasheet ***///
#define AR_RTC_PLL_CONTROL      AR_RTC_OFFSET(PLL_CONTROL)
#define AR_RTC_PLL_DIV          0x000003ff
#define AR_RTC_PLL_DIV_S        0
#define AR_RTC_PLL_REFDIV       0x00003C00
#define AR_RTC_PLL_REFDIV_S     10
#define AR_RTC_PLL_CLKSEL       0x0000C000
#define AR_RTC_PLL_CLKSEL_S     14
#define AR_RTC_PLL_BYPASS       0x00010000
#define AR_RTC_PLL_BYPASS_S     16
#define AR_RTC_PLL_BYPASS_WASP       0x08000000
#define AR_RTC_PLL_BYPASS_WASP_S     27

3. DPLL registers:
BB_DPLL1(PLL_CNTL);                /*    0x16180 - 0x16184    Register address = 0xb8116180 */
#define AR_PHY_BB_DPLL1_REFDIV          0xF8000000
#define AR_PHY_BB_DPLL1_REFDIV_S        27
#define AR_PHY_BB_DPLL1_NINI            0x07FC0000
#define AR_PHY_BB_DPLL1_NINI_S          18
#define AR_PHY_BB_DPLL1_NFRAC           0x0003FFFF
#define AR_PHY_BB_DPLL1_NFRAC_S         0
BB_DPLL2(PLL_MODE);                /*    0x16184 - 0x16188    */
#define AR_PHY_BB_DPLL2_RANGE           0x80000000
#define AR_PHY_BB_DPLL2_RANGE_S         31
#define AR_PHY_BB_DPLL2_LOCAL_PLL       0x40000000
#define AR_PHY_BB_DPLL2_LOCAL_PLL_S     30
#define AR_PHY_BB_DPLL2_KI              0x3C000000
#define AR_PHY_BB_DPLL2_KI_S            26
#define AR_PHY_BB_DPLL2_KD              0x03F80000
#define AR_PHY_BB_DPLL2_KD_S            19
#define AR_PHY_BB_DPLL2_EN_NEGTRIG      0x00040000
#define AR_PHY_BB_DPLL2_EN_NEGTRIG_S    18
#define AR_PHY_BB_DPLL2_SEL_1SDM        0x00020000
#define AR_PHY_BB_DPLL2_SEL_1SDM_S      17
#define AR_PHY_BB_DPLL2_PLL_PWD         0x00010000
#define AR_PHY_BB_DPLL2_PLL_PWD_S       16
#define AR_PHY_BB_DPLL2_OUTDIV          0x0000E000
#define AR_PHY_BB_DPLL2_OUTDIV_S        13
#define AR_PHY_BB_DPLL2_DELTA           0x00001F80
#define AR_PHY_BB_DPLL2_DELTA_S         7
#define AR_PHY_BB_DPLL2_SPARE           0x0000007F
#define AR_PHY_BB_DPLL2_SPARE_S         0
BB_DPLL3;                /*    0x16188 - 0x1618c    */
#define AR_PHY_BB_DPLL3_MEAS_AT_TXON    0x80000000
#define AR_PHY_BB_DPLL3_MEAS_AT_TXON_S  31
#define AR_PHY_BB_DPLL3_DO_MEAS         0x40000000
#define AR_PHY_BB_DPLL3_DO_MEAS_S       30
#define AR_PHY_BB_DPLL3_PHASE_SHIFT     0x3F800000
#define AR_PHY_BB_DPLL3_PHASE_SHIFT_S   23
#define AR_PHY_BB_DPLL3_SQSUM_DVC       0x007FFFF8
#define AR_PHY_BB_DPLL3_SQSUM_DVC_S     3
#define AR_PHY_BB_DPLL3_SPARE           0x00000007
#define AR_PHY_BB_DPLL3_SPARE_S         0x0
BB_DPLL4;                /*    0x1618c - 0x16190    */
#define AR_PHY_BB_DPLL4_MEAN_DVC        0xFFE00000
#define AR_PHY_BB_DPLL4_MEAN_DVC_S      21
#define AR_PHY_BB_DPLL4_VC_MEAS0        0x001FFFF0
#define AR_PHY_BB_DPLL4_VC_MEAS0_S      4
#define AR_PHY_BB_DPLL4_MEAS_DONE       0x00000008
#define AR_PHY_BB_DPLL4_MEAS_DONE_S     3
#define AR_PHY_BB_DPLL4_SPARE           0x00000007
#define AR_PHY_BB_DPLL4_SPARE_S         0


pDDL ar9331 Linux driver:
8MHz : CHANNEL_HALF	AR_PHY_MODE=0x100
4MHz : CHANNEL_QUARTER	AR_PHY_MODE=0x100
2MHZ : CHANNEL_QUARTER | CHANNEL_PHY_HALF;	AR_PHY_MODE=0x120
1MHZ : CHANNEL_QUARTER | CHANNEL_PHY_QUARTER;	AR_PHY_MODE=0x140

Jul 21, 2020
G5 WiFi encryption:
encryption_forms="field|@TR<<Encryption Type>>|encryptiontype_$vcfgcnt
			select|encryption_$vcfgcnt|$FORM_encryption
			option|none|@TR<<Disabled>>
			option|psk-tkip|@TR<<WPA (PSK)>>
			option|psk2|@TR<<WPA2 (PSK)>>
			option|psk-mixed/tkip+aes|@TR<<WPA+WPA2 (PSK)>>
			option|wpa|@TR<<WPA Enterprise (RADIUS)>>
			option|wpa2|@TR<<WPA2 Enterprise (RADIUS)>>
			option|wpa-mixed+tkip+ccmp|@TR<<WPA+WPA2 Enterprise (RADIUS)>>"

Jul 16, 2020
pMDDL mesh mode log. PC(168.100, 00:0e:c6:89:41:be) ---MP1(168.41, wlan0:00:0F:92:FB:9D:26; br-lan:00:0F:92:08:78:06) ~~~ MP2 (168.43, wlan0:00:0F:92:FA:A6:C6, br-lan:00:0F:92:04:3E:67). Ping from PC to MP2, successful.

MP1 log : 
<4>[   11.520000] syn-idt8v97051 spi0.1: no platform data? using default
<4>[   11.520000] (idt8v97051_set_freq) : Setting frequency 3000000000
<4>[   11.520000] D=1, T=0, VCO: 3000000000 Hz, PFD 4000000 Hz
<4>[   11.520000] R_CNT 20, R0_INT 750, R0_FRACT 0
<4>[   11.520000] R1_MOD 1, RF_DIV(M0) 1, BAND_SEL_DIV 14
<4>[   11.520000] (idt8v97051_sync_config) : *[Reg6]=0x00CC0006
<4>[   11.520000] (idt8v97051_sync_config) : *[Reg5]=0x00580005
<4>[   11.520000] (idt8v97051_sync_config) : *[Reg4]=0x0080E1FC
<4>[   11.520000] (idt8v97051_sync_config) : *[Reg3]=0x00817FFB
<4>[   11.520000] (idt8v97051_sync_config) : *[Reg2]=0x7E050E42
<4>[   11.520000] (idt8v97051_sync_config) : *[Reg1]=0x00008009
<4>[   11.520000] (idt8v97051_sync_config) : *[Reg0]=0x01770000
<4>[   11.540000] (idt8v97051_sync_config) : Read back [Reg7]=0x01770000
<4>[   11.560000] (idt8v97051_sync_config) : Read back [Reg6]=0xE0CC5806
<4>[   11.580000] (idt8v97051_sync_config) : Read back [Reg5]=0x01770000
<4>[   11.600000] (idt8v97051_sync_config) : Read back [Reg4]=0x0080E1FC
<4>[   11.620000] (idt8v97051_sync_config) : Read back [Reg3]=0x00817FFB
<4>[   11.640000] (idt8v97051_sync_config) : Read back [Reg2]=0x01770000
<4>[   11.660000] (idt8v97051_sync_config) : Read back [Reg1]=0x00008009
<4>[   11.680000] (idt8v97051_sync_config) : Read back [Reg0]=0x01770000
<4>[   11.680000] Synthesizer IDT8V97051 has been registered successfully!
<6>[   11.680000] arp_tables: (C) 2002 David S. Miller
<6>[   11.690000] usbcore: registered new interface driver cdc_acm
<6>[   11.690000] cdc_acm: USB Abstract Control Model driver for USB modems and ISDN adapters
<6>[   11.690000] usbcore: registered new interface driver cdc_wdm
<7>[   11.690000] stepOne_init_channels: initializing stepOne band channels...
<6>[   11.690000] Loading modules backported from Linux version master-2014-05-22-0-gf2032ea
<6>[   11.690000] Backport generated by backports.git backports-20140320-37-g5c33da0
<6>[   11.700000] ip_tables: (C) 2000-2006 Netfilter Core Team
<6>[   11.710000] nf_conntrack version 0.5.0 (957 buckets, 3828 max)
<6>[   11.730000] Netfilter messages via NETLINK v0.30.
<6>[   11.740000] usbcore: registered new interface driver usbserial
<6>[   11.740000] usbcore: registered new interface driver usbserial_generic
<6>[   11.740000] usbserial: USB Serial support registered for generic
<6>[   11.780000] xt_time: kernel timezone is -0000
<6>[   11.780000] usbcore: registered new interface driver cdc_ncm
<6>[   11.820000] cfg80211: Calling CRDA to update world regulatory domain
<6>[   12.110000] ctnetlink v0.93: registering with nfnetlink.
<6>[   12.110000] usbcore: registered new interface driver pl2303
<6>[   12.110000] usbserial: USB Serial support registered for pl2303
<6>[   12.110000] PPP generic driver version 2.4.2
<6>[   12.120000] usbcore: registered new interface driver qmi_wwan
<6>[   12.160000] usbcore: registered new interface driver option
<6>[   12.160000] usbserial: USB Serial support registered for GSM modem (1-port)
<6>[   12.160000] usbcore: registered new interface driver qcserial
<6>[   12.160000] usbserial: USB Serial support registered for Qualcomm USB modem
<6>[   12.180000] ath: chip revision id=10123, eeprom supported bands: 2G 5G
<7>[   12.410000] ath: EEPROM regdomain: 0x0
<7>[   12.410000] ath: EEPROM indicates default country code should be used
<7>[   12.410000] ath: doing EEPROM country->regdmn map search
<7>[   12.410000] ath: country maps to regdmn code: 0x3a
<7>[   12.410000] ath: Country alpha2 being used: US
<7>[   12.410000] ath: Regpair used: 0x3a
<7>[   12.430000] ieee80211 phy0: Selected rate control algorithm 'minstrel_ht'
<6>[   12.450000] cfg80211: Calling CRDA to update world regulatory domain
<6>[   12.450000] ieee80211 phy0: Atheros AR9340 Rev:0 mem=0xb8100000, irq=47
<6>[   13.940000] ehci_hcd: USB 2.0 'Enhanced' Host Controller (EHCI) Driver
<6>[   13.950000] ehci-platform: EHCI generic platform driver
<6>[   13.950000] ehci-platform ehci-platform: EHCI Host Controller
<6>[   13.950000] ehci-platform ehci-platform: new USB bus registered, assigned bus number 1
<6>[   13.950000] ehci-platform ehci-platform: TX-TX IDP fix enabled
<6>[   13.950000] ehci-platform ehci-platform: irq 3, io mem 0x1b000000
<6>[   13.970000] ehci-platform ehci-platform: USB 2.0 started, EHCI 1.00
<6>[   13.970000] hub 1-0:1.0: USB hub found
<6>[   13.970000] hub 1-0:1.0: 1 port detected
<6>[   13.980000] ohci_hcd: USB 1.1 'Open' Host Controller (OHCI) Driver
<6>[   13.990000] uhci_hcd: USB Universal Host Controller Interface driver
<6>[   14.010000] usbcore: registered new interface driver smsc75xx
<6>[   14.020000] usbcore: registered new interface driver smsc95xx
<6>[   14.030000] usbcore: registered new interface driver asix
<6>[   14.040000] usbcore: registered new interface driver ax88179_178a
<6>[   14.050000] usbcore: registered new interface driver cdc_eem
<6>[   14.060000] usbcore: registered new interface driver cdc_ether
<6>[   14.080000] usbcore: registered new interface driver rndis_host
<6>[   14.100000] usbcore: registered new interface driver ftdi_sio
<6>[   14.100000] usbserial: USB Serial support registered for FTDI USB Serial Device
<6>[   19.880000] eth0: link up (1000Mbps/Full duplex)
<6>[   27.130000] eth0: link down
<6>[   28.240000] device eth0 entered promiscuous mode
<6>[   28.270000] device eth1 entered promiscuous mode
<6>[   28.840000] eth0: link up (1000Mbps/Full duplex)
<6>[   28.840000] br-lan: port 1(eth0) entered forwarding state
<6>[   28.840000] br-lan: port 1(eth0) entered forwarding state
<0>[   29.960000] (idt8v97051_set_freq) : Setting frequency 3410000000
<0>[   29.960000] D=1, T=0, VCO: 3410000000 Hz, PFD 4000000 Hz
<0>[   29.960000] R_CNT 20, R0_INT 852, R0_FRACT 1
<0>[   29.960000] R1_MOD 2, RF_DIV(M0) 1, BAND_SEL_DIV 14
<0>[   29.960000] (idt8v97051_sync_config) :  [Reg6]=0x00CC0006
<0>[   29.960000] (idt8v97051_sync_config) :  [Reg5]=0x00580005
<0>[   29.960000] (idt8v97051_sync_config) :  [Reg4]=0x0080E1FC
<0>[   29.960000] (idt8v97051_sync_config) :  [Reg3]=0x00817FFB
<0>[   29.960000] (idt8v97051_sync_config) :  [Reg2]=0x7E050E42
<0>[   29.960000] (idt8v97051_sync_config) : *[Reg1]=0x00008011
<0>[   29.960000] (idt8v97051_sync_config) : *[Reg0]=0x01AA0008
<0>[   30.010000] (idt8v97051_sync_config) : Read back [Reg7]=0xC2C00087
<0>[   30.030000] (idt8v97051_sync_config) : Read back [Reg6]=0xE0CC7106
<0>[   30.050000] (idt8v97051_sync_config) : Read back [Reg5]=0x00580005
<0>[   30.070000] (idt8v97051_sync_config) : Read back [Reg4]=0x0080E1FC
<0>[   30.090000] (idt8v97051_sync_config) : Read back [Reg3]=0x00817FFB
<0>[   30.110000] (idt8v97051_sync_config) : Read back [Reg2]=0x7E050E42
<0>[   30.130000] (idt8v97051_sync_config) : Read back [Reg1]=0x00008011
<0>[   30.150000] (idt8v97051_sync_config) : Read back [Reg0]=0x01AA0008
<6>[   30.840000] br-lan: port 1(eth0) entered forwarding state
<0>[   34.400000] ==MHX1.0(ieee80211_mesh_work)
<0>[   34.400000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000041, preq_q_len=0
<0>[   36.590000] ==MHX1.0(ieee80211_mesh_work)
<0>[   36.590000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   36.650000] ==MHX10.0(ieee80211_xmit)is_data=0, is_unicast=1	// looks like those 5 frames are L2 mgnt mesh path establishment. #1
<0>[   36.650000] new_rate=96 changed to 0 
<0>[   36.650000] new_rate=96 changed to 0 
<0>[   36.710000] ==MHX10.0(ieee80211_xmit)is_data=0, is_unicast=1	//#2
<0>[   36.710000] new_rate=96 changed to 0 
<0>[   36.710000] new_rate=96 changed to 0 
<0>[   36.820000] ==MHX10.0(ieee80211_xmit)is_data=0, is_unicast=1	//#3
<0>[   36.820000] ==MHX10.0(ieee80211_xmit)is_data=0, is_unicast=1	//#4
<0>[   36.820000] new_rate=96 changed to 0 
<0>[   36.820000] new_rate=96 changed to 0 
<0>[   36.830000] ==MHX10.0(ieee80211_xmit)is_data=1, is_unicast=1	//seems like the 1st test frame.
<0>[   36.830000] ==MHX3.0(mesh_nexthop_resolve). target_addr=[fa:a6:c6]
<0>[   36.830000] ==MHX1.0(ieee80211_mesh_work)
<0>[   36.830000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000020, preq_q_len=0
<0>[   36.830000] ==MHX2.1(ieee80211s_update_metric)To STA[fa:a6:c6].rate=390, retry=0, failed=0,sta->fail_avg=0,sta->bitrate_avg=3900
<6>[   37.110000] serial8250_ioctl: IO configured: iRE=23 485=26 HD=27 DE=19
<6>[   37.110000] serial8250_ioctl getmode: 0
<6>[   37.120000] serial8250_ioctl setmode: 0
<6>[   37.150000] serial8250_ioctl getmode: 0
<0>[   37.820000] ==MHX10.0(ieee80211_xmit)is_data=0, is_unicast=1	//#5
<6>[   38.020000] device wlan0 entered promiscuous mode
<6>[   38.020000] br-lan: port 2(wlan0) entered forwarding state
<6>[   38.020000] br-lan: port 2(wlan0) entered forwarding state
<0>[   38.030000] =MHX11.0(ieee80211_subif_start_xmit) dst=[01:00:5e:00:00:01]	//the first data packet to this interface is multicast.
<0>[   38.030000] ==MHX10.0(ieee80211_xmit)is_data=1, is_unicast=0
<0>[   38.050000] ==MHX1.0(ieee80211_mesh_work)
<0>[   38.050000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000001, preq_q_len=0
<0>[   38.640000] ==MHX1.0(ieee80211_mesh_work)
<0>[   38.640000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0


<0>[   38.980000] ===MHX6.1(mpath_lookup) Looking table[83885380] for dst=[04:3e:67]	//looks recved test frame from MP2
<0>[   38.980000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[   38.980000] =MHX13.1(mpp_path_add)dst=[04:3e:67]	//the only caller is ieee80211_rx_h_mesh_fwding(),recved something??


<0>[   39.660000] ==MHX1.0(ieee80211_mesh_work)
<0>[   39.660000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<6>[   40.020000] br-lan: port 2(wlan0) entered forwarding state
<0>[   40.680000] ==MHX1.0(ieee80211_mesh_work)
<0>[   40.680000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   41.050000] ==MHX1.0(ieee80211_mesh_work)
<0>[   41.050000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000001, preq_q_len=0
<0>[   41.710000] ==MHX1.0(ieee80211_mesh_work)
<0>[   41.710000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   42.730000] ==MHX1.0(ieee80211_mesh_work)
<0>[   42.730000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   43.760000] ==MHX1.0(ieee80211_mesh_work)
<0>[   43.760000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   44.050000] ==MHX1.0(ieee80211_mesh_work)
<0>[   44.050000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000001, preq_q_len=0
<0>[   44.780000] ==MHX1.0(ieee80211_mesh_work)
<0>[   44.780000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   45.800000] ==MHX1.0(ieee80211_mesh_work)
<0>[   45.800000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   46.660000] =MHX11.0(ieee80211_subif_start_xmit) dst=[01:00:5e:00:00:fb]
<0>[   46.660000] ==MHX10.0(ieee80211_xmit)is_data=1, is_unicast=0
<0>[   47.050000] ==MHX1.0(ieee80211_mesh_work)
<0>[   47.050000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000001, preq_q_len=0
<0>[   47.850000] ==MHX1.0(ieee80211_mesh_work)
<0>[   47.850000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   48.880000] ==MHX1.0(ieee80211_mesh_work)
<0>[   48.880000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   49.900000] ==MHX1.0(ieee80211_mesh_work)
<0>[   49.900000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   50.050000] ==MHX1.0(ieee80211_mesh_work)
<0>[   50.050000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000001, preq_q_len=0
<0>[   50.920000] ==MHX1.0(ieee80211_mesh_work)
<0>[   50.920000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   51.950000] ==MHX1.0(ieee80211_mesh_work)
<0>[   51.950000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   52.970000] ==MHX1.0(ieee80211_mesh_work)
<0>[   52.970000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   53.050000] ==MHX1.0(ieee80211_mesh_work)
<0>[   53.050000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000001, preq_q_len=0
<0>[   54.000000] ==MHX1.0(ieee80211_mesh_work)
<0>[   54.000000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   55.020000] ==MHX1.0(ieee80211_mesh_work)
<0>[   55.020000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   56.040000] ==MHX1.0(ieee80211_mesh_work)
<0>[   56.040000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   56.050000] ==MHX1.0(ieee80211_mesh_work)
<0>[   56.050000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000001, preq_q_len=0
<0>[   57.070000] ==MHX1.0(ieee80211_mesh_work)
<0>[   57.070000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   58.090000] ==MHX1.0(ieee80211_mesh_work)
<0>[   58.090000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   59.050000] ==MHX1.0(ieee80211_mesh_work)
<0>[   59.050000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000001, preq_q_len=0
<0>[   59.120000] ==MHX1.0(ieee80211_mesh_work)
<0>[   59.120000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   60.140000] ==MHX1.0(ieee80211_mesh_work)
<0>[   60.140000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   62.050000] ==MHX1.0(ieee80211_mesh_work)
<0>[   62.050000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000001, preq_q_len=0
<0>[   62.190000] ==MHX1.0(ieee80211_mesh_work)
<0>[   62.190000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   62.250000] ===MHX6.1(mpath_lookup) Looking table[83885380] for dst=[8e:a0:44]
<0>[   62.250000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[   62.250000] =MHX13.1(mpp_path_add)dst=[8e:a0:44]
<0>[   63.210000] ==MHX1.0(ieee80211_mesh_work)
<0>[   63.210000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   64.240000] ==MHX1.0(ieee80211_mesh_work)
<0>[   64.240000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000010, preq_q_len=0
<0>[   65.050000] ==MHX1.0(ieee80211_mesh_work)
<0>[   65.050000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000001, preq_q_len=0
<0>[   65.260000] ==MHX1.0(ieee80211_mesh_work)
<0>[   65.260000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   66.280000] ==MHX1.0(ieee80211_mesh_work)
<0>[   66.280000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   66.370000] =MHX11.0(ieee80211_subif_start_xmit) dst=[01:00:5e:00:00:fb]
<0>[   66.370000] ==MHX10.0(ieee80211_xmit)is_data=1, is_unicast=0
<0>[   67.310000] ==MHX1.0(ieee80211_mesh_work)
<0>[   67.310000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   68.050000] ==MHX1.0(ieee80211_mesh_work)
<0>[   68.050000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000001, preq_q_len=0
<0>[   68.340000] ==MHX1.0(ieee80211_mesh_work)
<0>[   68.340000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   69.360000] =MHX11.0(ieee80211_subif_start_xmit) dst=[01:00:5e:00:00:01]
<0>[   69.360000] ==MHX10.0(ieee80211_xmit)is_data=1, is_unicast=0
<0>[   69.360000] ==MHX1.0(ieee80211_mesh_work)
<0>[   69.360000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   70.290000] ===MHX6.1(mpath_lookup) Looking table[83885380] for dst=[04:3e:67]
<0>[   70.290000] =MHX6.1.0 mpath=node->mpath=82837e00, mpath->sdata=82838420, sdata=82838420
<0>[   70.290000] =MHX6.1.1 found!!!
<0>[   70.380000] ==MHX1.0(ieee80211_mesh_work)
<0>[   70.380000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   71.050000] ==MHX1.0(ieee80211_mesh_work)
<0>[   71.050000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000001, preq_q_len=0
<0>[   71.400000] ==MHX1.0(ieee80211_mesh_work)
<0>[   71.400000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   72.430000] ==MHX1.0(ieee80211_mesh_work)
<0>[   72.430000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   73.450000] ==MHX1.0(ieee80211_mesh_work)
<0>[   73.450000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   74.050000] ==MHX1.0(ieee80211_mesh_work)
<0>[   74.050000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000001, preq_q_len=0
<0>[   74.480000] ==MHX1.0(ieee80211_mesh_work)
<0>[   74.480000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   75.500000] ==MHX1.0(ieee80211_mesh_work)
<0>[   75.500000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   76.520000] ==MHX1.0(ieee80211_mesh_work)
<0>[   76.520000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   77.050000] ==MHX1.0(ieee80211_mesh_work)
<0>[   77.050000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000001, preq_q_len=0
<0>[   77.550000] ==MHX1.0(ieee80211_mesh_work)
<0>[   77.550000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   78.570000] ==MHX1.0(ieee80211_mesh_work)
<0>[   78.570000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   78.660000] =MHX11.0(ieee80211_subif_start_xmit) dst=[01:00:5e:00:00:fb]
<0>[   78.660000] ==MHX10.0(ieee80211_xmit)is_data=1, is_unicast=0
<0>[   79.600000] ==MHX1.0(ieee80211_mesh_work)
<0>[   79.600000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   79.850000] =MHX11.0(ieee80211_subif_start_xmit) dst=[ff:ff:ff:ff:ff:ff]
<0>[   79.850000] ==MHX10.0(ieee80211_xmit)is_data=1, is_unicast=0
<0>[   79.850000] ==MHX4.0(hwmp_route_info_get)
<0>[   79.850000] ==MHX1.2(airtime_link_metric_get) tx_time=537987, err=0, estimated_retx=256,sta->bitrate_avg=3900,sta->fail_avg=0. signal=30. result(metric)=7680
<0>[   79.850000] ==MHX4.1(hwmp_route_info_get) action=0, from STA=[fa:a6:c6], whose last_hop_metric=7680
<0>[   79.850000] ==MHX4.2.1(hwmp_route_info_get) orig_addr=[fa:a6:c6], IE dump : orig_sn=1, orig_lifetime=1562, orig_metric=0,orig_hop=0.And new_metric=7680.
<0>[   79.850000] ===MHX6.1(mpath_lookup) Looking table[82b31e80] for dst=[fa:a6:c6]
<0>[   79.850000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[   79.850000] =MHX12.1(mesh_path_add)dst=[fa:a6:c6]
<0>[   79.850000] ==MHX4.2.3(hwmp_route_info_get) mpath to orig_addr NOT existing, create one : flags=0x00000000, sn=0, metric=0 .
<0>[   79.850000] ==MHX4.2.4(hwmp_route_info_get) first fresh_info=1,process=1.
<0>[   79.850000] ==MHX4.2.5(hwmp_route_info_get) Updating orig_addr's mpath next_hop and other info and TX pending mpath Q.
<0>[   79.850000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[fa:a6:c6], next_hop=[fa:a6:c6],flag=0x00000015,orig_sn=1, metric=7680,exp_time=4294945441, hop=1
<0>[   79.850000] ==MHX4.5(hwmp_route_info_get) mpath to SA=[fa:a6:c6], next_hop=[fa:a6:c6],flag=0x00000015,sn=1, metric=7680,exp_time=4294945441.hop=1,process=1
<7>[   79.850000] wlan0: received PREQ from 00:0f:92:fa:a6:c6
<7>[   79.850000] wlan0: PREQ is for us
<7>[   79.850000] wlan0: replying to the PREQ
<7>[   79.850000] wlan0: sending PREP to 00:0f:92:fa:a6:c6
<0>[   79.850000] ==MHX9.1(mesh_path_sel_frame_tx)TX action=1, flags=0x00,orig_addr[fa:a6:c6].orig_sn=1,target[fb:9d:26],target_sn=1,da[fa:a6:c6],hop_count=0,ttl=31,lifetime=1562,metric=0,preq_id=0
<0>[   79.850000] ==MHX10.0(ieee80211_xmit)is_data=0, is_unicast=1
<0>[   79.850000] ==MHX1.0(ieee80211_mesh_work)
<0>[   79.850000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   79.850000] new_rate=96 changed to 0 
<0>[   79.850000] new_rate=96 changed to 0 
<0>[   79.850000] ===MHX6.1(mpath_lookup) Looking table[83885380] for dst=[04:3e:67]
<0>[   79.850000] =MHX6.1.0 mpath=node->mpath=82837e00, mpath->sdata=82838420, sdata=82838420
<0>[   79.850000] =MHX6.1.1 found!!!
<0>[   79.850000] =MHX11.0(ieee80211_subif_start_xmit) dst=[00:0f:92:04:3e:67]
<0>[   79.850000] ===MHX6.1(mpath_lookup) Looking table[82b31e80] for dst=[04:3e:67]
<0>[   79.850000] =MHX6.1.0 mpath=node->mpath=833cbb00, mpath->sdata=82838420, sdata=82838420
<0>[   79.850000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[   79.850000] ===MHX6.1(mpath_lookup) Looking table[83885380] for dst=[04:3e:67]
<0>[   79.850000] =MHX6.1.0 mpath=node->mpath=82837e00, mpath->sdata=82838420, sdata=82838420
<0>[   79.850000] =MHX6.1.1 found!!!
<0>[   79.850000] ==MHX10.0(ieee80211_xmit)is_data=1, is_unicast=1
<0>[   79.850000] ==MHX3.0(mesh_nexthop_resolve). target_addr=[fa:a6:c6]
<0>[   79.850000] ===MHX6.1(mpath_lookup) Looking table[82b31e80] for dst=[fa:a6:c6]
<0>[   79.850000] =MHX6.1.0 mpath=node->mpath=833cbb00, mpath->sdata=82838420, sdata=82838420
<0>[   79.850000] =MHX6.1.1 found!!!
<0>[   79.850000] ==MHX7.1.1(mesh_nexthop_lookup)Test frame? addr1=[00:00:00], addr3=[fa:a6:c6]
<0>[   79.850000] ==MHX7.3(mesh_nexthop_lookup) next_hop=[fa:a6:c6]
<0>[   79.850000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[   79.850000] ==MHX2.1(ieee80211s_update_metric)To STA[fa:a6:c6].rate=390, retry=0, failed=0,sta->fail_avg=0,sta->bitrate_avg=7410
<0>[   79.850000] ===MHX6.1(mpath_lookup) Looking table[83885380] for dst=[04:3e:67]
<0>[   79.850000] =MHX6.1.0 mpath=node->mpath=82837e00, mpath->sdata=82838420, sdata=82838420
<0>[   79.850000] =MHX6.1.1 found!!!
<0>[   80.050000] ==MHX1.0(ieee80211_mesh_work)
<0>[   80.050000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000001, preq_q_len=0
<0>[   80.620000] ==MHX1.0(ieee80211_mesh_work)
<0>[   80.620000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   80.850000] =MHX11.0(ieee80211_subif_start_xmit) dst=[00:0f:92:04:3e:67]
<0>[   80.850000] ===MHX6.1(mpath_lookup) Looking table[82b31e80] for dst=[04:3e:67]
<0>[   80.850000] =MHX6.1.0 mpath=node->mpath=833cbb00, mpath->sdata=82838420, sdata=82838420
<0>[   80.850000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[   80.850000] ===MHX6.1(mpath_lookup) Looking table[83885380] for dst=[04:3e:67]
<0>[   80.850000] =MHX6.1.0 mpath=node->mpath=82837e00, mpath->sdata=82838420, sdata=82838420
<0>[   80.850000] =MHX6.1.1 found!!!
<0>[   80.850000] ==MHX10.0(ieee80211_xmit)is_data=1, is_unicast=1
<0>[   80.850000] ==MHX3.0(mesh_nexthop_resolve). target_addr=[fa:a6:c6]
<0>[   80.850000] ===MHX6.1(mpath_lookup) Looking table[82b31e80] for dst=[fa:a6:c6]
<0>[   80.850000] =MHX6.1.0 mpath=node->mpath=833cbb00, mpath->sdata=82838420, sdata=82838420
<0>[   80.850000] =MHX6.1.1 found!!!
<0>[   80.850000] ==MHX7.1.1(mesh_nexthop_lookup)Test frame? addr1=[00:00:00], addr3=[fa:a6:c6]
<0>[   80.850000] ==MHX7.3(mesh_nexthop_lookup) next_hop=[fa:a6:c6]
<0>[   80.850000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[   80.850000] ==MHX2.1(ieee80211s_update_metric)To STA[fa:a6:c6].rate=390, retry=0, failed=0,sta->fail_avg=0,sta->bitrate_avg=10569
<0>[   80.850000] ===MHX6.1(mpath_lookup) Looking table[83885380] for dst=[04:3e:67]
<0>[   80.850000] =MHX6.1.0 mpath=node->mpath=82837e00, mpath->sdata=82838420, sdata=82838420
<0>[   80.850000] =MHX6.1.1 found!!!
<0>[   81.640000] ==MHX1.0(ieee80211_mesh_work)
<0>[   81.640000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000010, preq_q_len=0
<0>[   81.850000] =MHX11.0(ieee80211_subif_start_xmit) dst=[00:0f:92:04:3e:67]
<0>[   81.850000] ===MHX6.1(mpath_lookup) Looking table[82b31e80] for dst=[04:3e:67]
<0>[   81.850000] =MHX6.1.0 mpath=node->mpath=833cbb00, mpath->sdata=82838420, sdata=82838420
<0>[   81.850000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[   81.850000] ===MHX6.1(mpath_lookup) Looking table[83885380] for dst=[04:3e:67]
<0>[   81.850000] =MHX6.1.0 mpath=node->mpath=82837e00, mpath->sdata=82838420, sdata=82838420
<0>[   81.850000] =MHX6.1.1 found!!!
<0>[   81.850000] ==MHX10.0(ieee80211_xmit)is_data=1, is_unicast=1
<0>[   81.850000] ==MHX3.0(mesh_nexthop_resolve). target_addr=[fa:a6:c6]
<0>[   81.850000] ===MHX6.1(mpath_lookup) Looking table[82b31e80] for dst=[fa:a6:c6]
<0>[   81.850000] =MHX6.1.0 mpath=node->mpath=833cbb00, mpath->sdata=82838420, sdata=82838420
<0>[   81.850000] =MHX6.1.1 found!!!
<0>[   81.850000] ==MHX7.1.1(mesh_nexthop_lookup)Test frame? addr1=[00:00:00], addr3=[fa:a6:c6]
<0>[   81.850000] ==MHX7.2(mesh_nexthop_lookup) Qed a PREQ.
<0>[   81.850000] ==MHX7.3(mesh_nexthop_lookup) next_hop=[fa:a6:c6]
<0>[   81.850000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[   81.850000] ==MHX1.0(ieee80211_mesh_work)
<0>[   81.850000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=1
<0>[   81.850000] ==MHX1.2(ieee80211_mesh_work)
<0>[   81.850000] ===MHX6.1(mpath_lookup) Looking table[82b31e80] for dst=[fa:a6:c6]
<0>[   81.850000] =MHX6.1.0 mpath=node->mpath=833cbb00, mpath->sdata=82838420, sdata=82838420
<0>[   81.850000] =MHX6.1.1 found!!!
<7>[   81.850000] wlan0: sending PREQ to 00:0f:92:fa:a6:c6
<0>[   81.850000] ==MHX9.1(mesh_path_sel_frame_tx)TX action=0, flags=0x00,orig_addr[fb:9d:26].orig_sn=2,target[fa:a6:c6],target_sn=1,da[ff:ff:ff],hop_count=0,ttl=31,lifetime=1562,metric=0,preq_id=0
<0>[   81.850000] ==MHX10.0(ieee80211_xmit)is_data=0, is_unicast=0
<0>[   81.850000] ==MHX2.1(ieee80211s_update_metric)To STA[fa:a6:c6].rate=390, retry=0, failed=0,sta->fail_avg=0,sta->bitrate_avg=13412
<0>[   81.850000] ==MHX4.0(hwmp_route_info_get)
<0>[   81.850000] ==MHX1.2(airtime_link_metric_get) tx_time=156619, err=0, estimated_retx=256,sta->bitrate_avg=13412,sta->fail_avg=0. signal=35. result(metric)=2590
<0>[   81.850000] ==MHX4.1(hwmp_route_info_get) action=1, from STA=[fa:a6:c6], whose last_hop_metric=2590
<0>[   81.850000] ==MHX4.2.1(hwmp_route_info_get) orig_addr=[fa:a6:c6], IE dump : orig_sn=2, orig_lifetime=1562, orig_metric=0,orig_hop=0.And new_metric=2590.
<0>[   81.850000] ===MHX6.1(mpath_lookup) Looking table[82b31e80] for dst=[fa:a6:c6]
<0>[   81.850000] =MHX6.1.0 mpath=node->mpath=833cbb00, mpath->sdata=82838420, sdata=82838420
<0>[   81.850000] =MHX6.1.1 found!!!
<0>[   81.850000] ==MHX4.2.2(hwmp_route_info_get) mpath to orig_addr exists : flags=0x00000007, sn=1, metric=7680,hop=1,mpath->exp_time=4294945441.
<0>[   81.850000] ==MHX4.2.4(hwmp_route_info_get) first fresh_info=1,process=1.
<0>[   81.850000] ==MHX4.2.5(hwmp_route_info_get) Updating orig_addr's mpath next_hop and other info and TX pending mpath Q.
<0>[   81.850000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[fa:a6:c6], next_hop=[fa:a6:c6],flag=0x00000017,orig_sn=2, metric=2590,exp_time=4294945641, hop=1
<0>[   81.850000] ==MHX4.5(hwmp_route_info_get) mpath to SA=[fa:a6:c6], next_hop=[fa:a6:c6],flag=0x00000017,sn=2, metric=2590,exp_time=4294945641.hop=1,process=1
<7>[   81.850000] wlan0: received PREP from 00:0f:92:fa:a6:c6
<0>[   81.850000] ==MHX1.0(ieee80211_mesh_work)
<0>[   81.850000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   81.850000] ==MHX4.0(hwmp_route_info_get)
<0>[   81.850000] ==MHX1.2(airtime_link_metric_get) tx_time=156619, err=0, estimated_retx=256,sta->bitrate_avg=13412,sta->fail_avg=0. signal=36. result(metric)=2664
<0>[   81.850000] ==MHX4.1(hwmp_route_info_get) action=0, from STA=[fa:a6:c6], whose last_hop_metric=2664
<0>[   81.850000] ==MHX4.2.1(hwmp_route_info_get) orig_addr=[fa:a6:c6], IE dump : orig_sn=2, orig_lifetime=1562, orig_metric=0,orig_hop=0.And new_metric=2664.
<0>[   81.850000] ===MHX6.1(mpath_lookup) Looking table[82b31e80] for dst=[fa:a6:c6]
<0>[   81.850000] =MHX6.1.0 mpath=node->mpath=833cbb00, mpath->sdata=82838420, sdata=82838420
<0>[   81.850000] =MHX6.1.1 found!!!
<0>[   81.850000] ==MHX4.2.2(hwmp_route_info_get) mpath to orig_addr exists : flags=0x00000017, sn=2, metric=2590,hop=1,mpath->exp_time=4294945641.
<0>[   81.850000] ==MHX4.2.4(hwmp_route_info_get) first fresh_info=1,process=1.
<0>[   81.850000] ==MHX4.2.5(hwmp_route_info_get) Updating orig_addr's mpath next_hop and other info and TX pending mpath Q.
<0>[   81.850000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[fa:a6:c6], next_hop=[fa:a6:c6],flag=0x00000017,orig_sn=2, metric=2664,exp_time=4294945641, hop=1
<0>[   81.850000] ==MHX4.5(hwmp_route_info_get) mpath to SA=[fa:a6:c6], next_hop=[fa:a6:c6],flag=0x00000017,sn=2, metric=2664,exp_time=4294945641.hop=1,process=1
<7>[   81.850000] wlan0: received PREQ from 00:0f:92:fa:a6:c6
<7>[   81.850000] wlan0: PREQ is for us
<7>[   81.850000] wlan0: replying to the PREQ
<7>[   81.850000] wlan0: sending PREP to 00:0f:92:fa:a6:c6
<0>[   81.850000] ==MHX9.1(mesh_path_sel_frame_tx)TX action=1, flags=0x00,orig_addr[fa:a6:c6].orig_sn=2,target[fb:9d:26],target_sn=2,da[fa:a6:c6],hop_count=0,ttl=31,lifetime=1562,metric=0,preq_id=0
<0>[   81.850000] ==MHX10.0(ieee80211_xmit)is_data=0, is_unicast=1
<0>[   81.850000] ==MHX1.0(ieee80211_mesh_work)
<0>[   81.850000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   81.850000] ===MHX6.1(mpath_lookup) Looking table[83885380] for dst=[04:3e:67]
<0>[   81.850000] =MHX6.1.0 mpath=node->mpath=82837e00, mpath->sdata=82838420, sdata=82838420
<0>[   81.850000] =MHX6.1.1 found!!!
<0>[   82.670000] ==MHX1.0(ieee80211_mesh_work)
<0>[   82.670000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   82.850000] =MHX11.0(ieee80211_subif_start_xmit) dst=[00:0f:92:04:3e:67]
<0>[   82.850000] ===MHX6.1(mpath_lookup) Looking table[82b31e80] for dst=[04:3e:67]
<0>[   82.850000] =MHX6.1.0 mpath=node->mpath=833cbb00, mpath->sdata=82838420, sdata=82838420
<0>[   82.850000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[   82.850000] ===MHX6.1(mpath_lookup) Looking table[83885380] for dst=[04:3e:67]
<0>[   82.850000] =MHX6.1.0 mpath=node->mpath=82837e00, mpath->sdata=82838420, sdata=82838420
<0>[   82.850000] =MHX6.1.1 found!!!
<0>[   82.850000] ==MHX10.0(ieee80211_xmit)is_data=1, is_unicast=1
<0>[   82.850000] ==MHX3.0(mesh_nexthop_resolve). target_addr=[fa:a6:c6]
<0>[   82.850000] ===MHX6.1(mpath_lookup) Looking table[82b31e80] for dst=[fa:a6:c6]
<0>[   82.850000] =MHX6.1.0 mpath=node->mpath=833cbb00, mpath->sdata=82838420, sdata=82838420
<0>[   82.850000] =MHX6.1.1 found!!!
<0>[   82.850000] ==MHX7.1.1(mesh_nexthop_lookup)Test frame? addr1=[00:00:00], addr3=[fa:a6:c6]
<0>[   82.850000] ==MHX7.3(mesh_nexthop_lookup) next_hop=[fa:a6:c6]
<0>[   82.850000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[   82.850000] ==MHX2.1(ieee80211s_update_metric)To STA[fa:a6:c6].rate=390, retry=0, failed=0,sta->fail_avg=0,sta->bitrate_avg=15970
<0>[   82.860000] ===MHX6.1(mpath_lookup) Looking table[83885380] for dst=[04:3e:67]
<0>[   82.860000] =MHX6.1.0 mpath=node->mpath=82837e00, mpath->sdata=82838420, sdata=82838420
<0>[   82.860000] =MHX6.1.1 found!!!
<0>[   83.050000] ==MHX1.0(ieee80211_mesh_work)
<0>[   83.050000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000001, preq_q_len=0
<0>[   83.690000] ==MHX1.0(ieee80211_mesh_work)
<0>[   83.690000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   83.850000] =MHX11.0(ieee80211_subif_start_xmit) dst=[00:0f:92:04:3e:67]
<0>[   83.850000] ===MHX6.1(mpath_lookup) Looking table[82b31e80] for dst=[04:3e:67]
<0>[   83.850000] =MHX6.1.0 mpath=node->mpath=833cbb00, mpath->sdata=82838420, sdata=82838420
<0>[   83.850000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[   83.850000] ===MHX6.1(mpath_lookup) Looking table[83885380] for dst=[04:3e:67]
<0>[   83.850000] =MHX6.1.0 mpath=node->mpath=82837e00, mpath->sdata=82838420, sdata=82838420
<0>[   83.850000] =MHX6.1.1 found!!!
<0>[   83.850000] ==MHX10.0(ieee80211_xmit)is_data=1, is_unicast=1
<0>[   83.850000] ==MHX3.0(mesh_nexthop_resolve). target_addr=[fa:a6:c6]
<0>[   83.850000] ===MHX6.1(mpath_lookup) Looking table[82b31e80] for dst=[fa:a6:c6]
<0>[   83.850000] =MHX6.1.0 mpath=node->mpath=833cbb00, mpath->sdata=82838420, sdata=82838420
<0>[   83.850000] =MHX6.1.1 found!!!
<0>[   83.850000] ==MHX7.1.1(mesh_nexthop_lookup)Test frame? addr1=[00:00:00], addr3=[fa:a6:c6]
<0>[   83.850000] ==MHX7.2(mesh_nexthop_lookup) Qed a PREQ.
<0>[   83.850000] ==MHX7.3(mesh_nexthop_lookup) next_hop=[fa:a6:c6]
<0>[   83.850000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[   83.850000] ==MHX1.0(ieee80211_mesh_work)
<0>[   83.850000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=1
<0>[   83.850000] ==MHX1.2(ieee80211_mesh_work)
<0>[   83.850000] ===MHX6.1(mpath_lookup) Looking table[82b31e80] for dst=[fa:a6:c6]
<0>[   83.850000] =MHX6.1.0 mpath=node->mpath=833cbb00, mpath->sdata=82838420, sdata=82838420
<0>[   83.850000] =MHX6.1.1 found!!!
<7>[   83.850000] wlan0: sending PREQ to 00:0f:92:fa:a6:c6
<0>[   83.850000] ==MHX9.1(mesh_path_sel_frame_tx)TX action=0, flags=0x00,orig_addr[fb:9d:26].orig_sn=3,target[fa:a6:c6],target_sn=2,da[ff:ff:ff],hop_count=0,ttl=31,lifetime=1562,metric=0,preq_id=1
<0>[   83.850000] ==MHX10.0(ieee80211_xmit)is_data=0, is_unicast=0
<0>[   83.850000] ==MHX2.1(ieee80211s_update_metric)To STA[fa:a6:c6].rate=390, retry=0, failed=0,sta->fail_avg=0,sta->bitrate_avg=18273
<0>[   83.860000] ==MHX4.0(hwmp_route_info_get)
<0>[   83.860000] ==MHX1.2(airtime_link_metric_get) tx_time=115023, err=0, estimated_retx=256,sta->bitrate_avg=18273,sta->fail_avg=0. signal=38. result(metric)=2052
<0>[   83.860000] ==MHX4.1(hwmp_route_info_get) action=1, from STA=[fa:a6:c6], whose last_hop_metric=2052
<0>[   83.860000] ==MHX4.2.1(hwmp_route_info_get) orig_addr=[fa:a6:c6], IE dump : orig_sn=3, orig_lifetime=1562, orig_metric=0,orig_hop=0.And new_metric=2052.
<0>[   83.860000] ===MHX6.1(mpath_lookup) Looking table[82b31e80] for dst=[fa:a6:c6]
<0>[   83.860000] =MHX6.1.0 mpath=node->mpath=833cbb00, mpath->sdata=82838420, sdata=82838420
<0>[   83.860000] =MHX6.1.1 found!!!
<0>[   83.860000] ==MHX4.2.2(hwmp_route_info_get) mpath to orig_addr exists : flags=0x00000007, sn=2, metric=2664,hop=1,mpath->exp_time=4294945641.
<0>[   83.860000] ==MHX4.2.4(hwmp_route_info_get) first fresh_info=1,process=1.
<0>[   83.860000] ==MHX4.2.5(hwmp_route_info_get) Updating orig_addr's mpath next_hop and other info and TX pending mpath Q.
<0>[   83.860000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[fa:a6:c6], next_hop=[fa:a6:c6],flag=0x00000017,orig_sn=3, metric=2052,exp_time=4294945842, hop=1
<0>[   83.860000] ==MHX4.5(hwmp_route_info_get) mpath to SA=[fa:a6:c6], next_hop=[fa:a6:c6],flag=0x00000017,sn=3, metric=2052,exp_time=4294945842.hop=1,process=1
<7>[   83.860000] wlan0: received PREP from 00:0f:92:fa:a6:c6
<0>[   83.860000] ==MHX4.0(hwmp_route_info_get)
<0>[   83.860000] ==MHX1.2(airtime_link_metric_get) tx_time=115023, err=0, estimated_retx=256,sta->bitrate_avg=18273,sta->fail_avg=0. signal=38. result(metric)=2052
<0>[   83.860000] ==MHX4.1(hwmp_route_info_get) action=0, from STA=[fa:a6:c6], whose last_hop_metric=2052
<0>[   83.860000] ==MHX4.2.1(hwmp_route_info_get) orig_addr=[fa:a6:c6], IE dump : orig_sn=3, orig_lifetime=1562, orig_metric=0,orig_hop=0.And new_metric=2052.
<0>[   83.860000] ===MHX6.1(mpath_lookup) Looking table[82b31e80] for dst=[fa:a6:c6]
<0>[   83.860000] =MHX6.1.0 mpath=node->mpath=833cbb00, mpath->sdata=82838420, sdata=82838420
<0>[   83.860000] =MHX6.1.1 found!!!
<0>[   83.860000] ==MHX4.2.2(hwmp_route_info_get) mpath to orig_addr exists : flags=0x00000017, sn=3, metric=2052,hop=1,mpath->exp_time=4294945842.
<0>[   83.860000] ==MHX4.2.4(hwmp_route_info_get) first fresh_info=1,process=1.
<0>[   83.860000] ==MHX4.2.5(hwmp_route_info_get) Updating orig_addr's mpath next_hop and other info and TX pending mpath Q.
<0>[   83.860000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[fa:a6:c6], next_hop=[fa:a6:c6],flag=0x00000017,orig_sn=3, metric=2052,exp_time=4294945842, hop=1
<0>[   83.860000] ==MHX4.5(hwmp_route_info_get) mpath to SA=[fa:a6:c6], next_hop=[fa:a6:c6],flag=0x00000017,sn=3, metric=2052,exp_time=4294945842.hop=1,process=1
<7>[   83.860000] wlan0: received PREQ from 00:0f:92:fa:a6:c6
<7>[   83.860000] wlan0: PREQ is for us
<7>[   83.860000] wlan0: replying to the PREQ
<7>[   83.860000] wlan0: sending PREP to 00:0f:92:fa:a6:c6
<0>[   83.860000] ==MHX9.1(mesh_path_sel_frame_tx)TX action=1, flags=0x00,orig_addr[fa:a6:c6].orig_sn=3,target[fb:9d:26],target_sn=3,da[fa:a6:c6],hop_count=0,ttl=31,lifetime=1562,metric=0,preq_id=0
<0>[   83.860000] ==MHX10.0(ieee80211_xmit)is_data=0, is_unicast=1
<0>[   83.860000] ==MHX1.0(ieee80211_mesh_work)
<0>[   83.860000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   83.860000] ==MHX1.0(ieee80211_mesh_work)
<0>[   83.860000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   83.860000] ===MHX6.1(mpath_lookup) Looking table[83885380] for dst=[04:3e:67]
<0>[   83.860000] =MHX6.1.0 mpath=node->mpath=82837e00, mpath->sdata=82838420, sdata=82838420
<0>[   83.860000] =MHX6.1.1 found!!!
<0>[   84.720000] ==MHX1.0(ieee80211_mesh_work)
<0>[   84.720000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   84.860000] =MHX11.0(ieee80211_subif_start_xmit) dst=[00:0f:92:04:3e:67]
<0>[   84.860000] ===MHX6.1(mpath_lookup) Looking table[82b31e80] for dst=[04:3e:67]
<0>[   84.860000] =MHX6.1.0 mpath=node->mpath=833cbb00, mpath->sdata=82838420, sdata=82838420
<0>[   84.860000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[   84.860000] ===MHX6.1(mpath_lookup) Looking table[83885380] for dst=[04:3e:67]
<0>[   84.860000] =MHX6.1.0 mpath=node->mpath=82837e00, mpath->sdata=82838420, sdata=82838420
<0>[   84.860000] =MHX6.1.1 found!!!
<0>[   84.860000] ==MHX10.0(ieee80211_xmit)is_data=1, is_unicast=1
<0>[   84.860000] ==MHX3.0(mesh_nexthop_resolve). target_addr=[fa:a6:c6]
<0>[   84.860000] ===MHX6.1(mpath_lookup) Looking table[82b31e80] for dst=[fa:a6:c6]
<0>[   84.860000] =MHX6.1.0 mpath=node->mpath=833cbb00, mpath->sdata=82838420, sdata=82838420
<0>[   84.860000] =MHX6.1.1 found!!!
<0>[   84.860000] ==MHX7.1.1(mesh_nexthop_lookup)Test frame? addr1=[00:00:00], addr3=[fa:a6:c6]
<0>[   84.860000] ==MHX7.3(mesh_nexthop_lookup) next_hop=[fa:a6:c6]
<0>[   84.860000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[   84.860000] ==MHX2.1(ieee80211s_update_metric)To STA[fa:a6:c6].rate=390, retry=0, failed=0,sta->fail_avg=0,sta->bitrate_avg=20345
<0>[   84.860000] ===MHX6.1(mpath_lookup) Looking table[83885380] for dst=[04:3e:67]
<0>[   84.860000] =MHX6.1.0 mpath=node->mpath=82837e00, mpath->sdata=82838420, sdata=82838420
<0>[   84.860000] =MHX6.1.1 found!!!
<0>[   84.860000] ===MHX6.1(mpath_lookup) Looking table[83885380] for dst=[04:3e:67]
<0>[   84.860000] =MHX6.1.0 mpath=node->mpath=82837e00, mpath->sdata=82838420, sdata=82838420
<0>[   84.860000] =MHX6.1.1 found!!!
<0>[   84.870000] =MHX11.0(ieee80211_subif_start_xmit) dst=[00:0f:92:04:3e:67]
<0>[   84.870000] ===MHX6.1(mpath_lookup) Looking table[82b31e80] for dst=[04:3e:67]
<0>[   84.870000] =MHX6.1.0 mpath=node->mpath=833cbb00, mpath->sdata=82838420, sdata=82838420
<0>[   84.870000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[   84.870000] ===MHX6.1(mpath_lookup) Looking table[83885380] for dst=[04:3e:67]
<0>[   84.870000] =MHX6.1.0 mpath=node->mpath=82837e00, mpath->sdata=82838420, sdata=82838420
<0>[   84.870000] =MHX6.1.1 found!!!
<0>[   84.870000] ==MHX10.0(ieee80211_xmit)is_data=1, is_unicast=1
<0>[   84.870000] ==MHX3.0(mesh_nexthop_resolve). target_addr=[fa:a6:c6]
<0>[   84.870000] ===MHX6.1(mpath_lookup) Looking table[82b31e80] for dst=[fa:a6:c6]
<0>[   84.870000] =MHX6.1.0 mpath=node->mpath=833cbb00, mpath->sdata=82838420, sdata=82838420
<0>[   84.870000] =MHX6.1.1 found!!!
<0>[   84.870000] ==MHX7.1.1(mesh_nexthop_lookup)Test frame? addr1=[00:00:00], addr3=[fa:a6:c6]
<0>[   84.870000] ==MHX7.2(mesh_nexthop_lookup) Qed a PREQ.
<0>[   84.870000] ==MHX7.3(mesh_nexthop_lookup) next_hop=[fa:a6:c6]
<0>[   84.870000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[   84.870000] ==MHX1.0(ieee80211_mesh_work)
<0>[   84.870000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=1
<0>[   84.870000] ==MHX1.2(ieee80211_mesh_work)
<0>[   84.870000] ==MHX2.1(ieee80211s_update_metric)To STA[fa:a6:c6].rate=60, retry=0, failed=0,sta->fail_avg=0,sta->bitrate_avg=18910
<0>[   84.870000] ===MHX6.1(mpath_lookup) Looking table[82b31e80] for dst=[fa:a6:c6]
<0>[   84.870000] =MHX6.1.0 mpath=node->mpath=833cbb00, mpath->sdata=82838420, sdata=82838420
<0>[   84.870000] =MHX6.1.1 found!!!
<7>[   84.870000] wlan0: sending PREQ to 00:0f:92:fa:a6:c6
<0>[   84.870000] ==MHX9.1(mesh_path_sel_frame_tx)TX action=0, flags=0x00,orig_addr[fb:9d:26].orig_sn=4,target[fa:a6:c6],target_sn=3,da[ff:ff:ff],hop_count=0,ttl=31,lifetime=1562,metric=0,preq_id=2
<0>[   84.870000] ==MHX10.0(ieee80211_xmit)is_data=0, is_unicast=0
<0>[   84.870000] ==MHX4.0(hwmp_route_info_get)
<0>[   84.870000] ==MHX1.2(airtime_link_metric_get) tx_time=111157, err=0, estimated_retx=256,sta->bitrate_avg=18910,sta->fail_avg=0. signal=40. result(metric)=2080
<0>[   84.870000] ==MHX4.1(hwmp_route_info_get) action=0, from STA=[fa:a6:c6], whose last_hop_metric=2080
<0>[   84.870000] ==MHX4.2.1(hwmp_route_info_get) orig_addr=[fa:a6:c6], IE dump : orig_sn=4, orig_lifetime=1562, orig_metric=0,orig_hop=0.And new_metric=2080.
<0>[   84.870000] ===MHX6.1(mpath_lookup) Looking table[82b31e80] for dst=[fa:a6:c6]
<0>[   84.870000] =MHX6.1.0 mpath=node->mpath=833cbb00, mpath->sdata=82838420, sdata=82838420
<0>[   84.870000] =MHX6.1.1 found!!!
<0>[   84.870000] ==MHX4.2.2(hwmp_route_info_get) mpath to orig_addr exists : flags=0x00000007, sn=3, metric=2052,hop=1,mpath->exp_time=4294945842.
<0>[   84.870000] ==MHX4.2.4(hwmp_route_info_get) first fresh_info=1,process=1.
<0>[   84.870000] ==MHX4.2.5(hwmp_route_info_get) Updating orig_addr's mpath next_hop and other info and TX pending mpath Q.
<0>[   84.870000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[fa:a6:c6], next_hop=[fa:a6:c6],flag=0x00000017,orig_sn=4, metric=2080,exp_time=4294945943, hop=1
<0>[   84.870000] ==MHX4.5(hwmp_route_info_get) mpath to SA=[fa:a6:c6], next_hop=[fa:a6:c6],flag=0x00000017,sn=4, metric=2080,exp_time=4294945943.hop=1,process=1
<7>[   84.870000] wlan0: received PREQ from 00:0f:92:fa:a6:c6
<7>[   84.870000] wlan0: PREQ is for us
<7>[   84.870000] wlan0: replying to the PREQ
<7>[   84.870000] wlan0: sending PREP to 00:0f:92:fa:a6:c6
<0>[   84.870000] ==MHX9.1(mesh_path_sel_frame_tx)TX action=1, flags=0x00,orig_addr[fa:a6:c6].orig_sn=4,target[fb:9d:26],target_sn=4,da[fa:a6:c6],hop_count=0,ttl=31,lifetime=1562,metric=0,preq_id=0
<0>[   84.870000] ==MHX10.0(ieee80211_xmit)is_data=0, is_unicast=1
<0>[   84.870000] ==MHX1.0(ieee80211_mesh_work)
<0>[   84.870000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   84.870000] ==MHX4.0(hwmp_route_info_get)
<0>[   84.870000] ==MHX1.2(airtime_link_metric_get) tx_time=111157, err=0, estimated_retx=256,sta->bitrate_avg=18910,sta->fail_avg=0. signal=40. result(metric)=2080
<0>[   84.870000] ==MHX4.1(hwmp_route_info_get) action=1, from STA=[fa:a6:c6], whose last_hop_metric=2080
<0>[   84.870000] ==MHX4.2.1(hwmp_route_info_get) orig_addr=[fa:a6:c6], IE dump : orig_sn=4, orig_lifetime=1562, orig_metric=0,orig_hop=0.And new_metric=2080.
<0>[   84.870000] ===MHX6.1(mpath_lookup) Looking table[82b31e80] for dst=[fa:a6:c6]
<0>[   84.870000] =MHX6.1.0 mpath=node->mpath=833cbb00, mpath->sdata=82838420, sdata=82838420
<0>[   84.870000] =MHX6.1.1 found!!!
<0>[   84.870000] ==MHX4.2.2(hwmp_route_info_get) mpath to orig_addr exists : flags=0x00000017, sn=4, metric=2080,hop=1,mpath->exp_time=4294945943.
<0>[   84.870000] ==MHX4.2.4(hwmp_route_info_get) first fresh_info=1,process=1.
<0>[   84.870000] ==MHX4.2.5(hwmp_route_info_get) Updating orig_addr's mpath next_hop and other info and TX pending mpath Q.
<0>[   84.870000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[fa:a6:c6], next_hop=[fa:a6:c6],flag=0x00000017,orig_sn=4, metric=2080,exp_time=4294945943, hop=1
<0>[   84.870000] ==MHX4.5(hwmp_route_info_get) mpath to SA=[fa:a6:c6], next_hop=[fa:a6:c6],flag=0x00000017,sn=4, metric=2080,exp_time=4294945943.hop=1,process=1
<7>[   84.870000] wlan0: received PREP from 00:0f:92:fa:a6:c6
<0>[   84.870000] ==MHX1.0(ieee80211_mesh_work)
<0>[   84.870000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   85.740000] ==MHX1.0(ieee80211_mesh_work)
<0>[   85.740000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   86.050000] ==MHX1.0(ieee80211_mesh_work)
<0>[   86.050000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000001, preq_q_len=0



MP2 log:
<4>[   11.540000] syn-idt8v97051 spi0.1: no platform data? using default
<4>[   11.540000] (idt8v97051_set_freq) : Setting frequency 3000000000
<4>[   11.540000] D=1, T=0, VCO: 3000000000 Hz, PFD 4000000 Hz
<4>[   11.540000] R_CNT 20, R0_INT 750, R0_FRACT 0
<4>[   11.540000] R1_MOD 1, RF_DIV(M0) 1, BAND_SEL_DIV 14
<4>[   11.540000] (idt8v97051_sync_config) : *[Reg6]=0x00CC0006
<4>[   11.540000] (idt8v97051_sync_config) : *[Reg5]=0x00580005
<4>[   11.540000] (idt8v97051_sync_config) : *[Reg4]=0x0080E1FC
<4>[   11.540000] (idt8v97051_sync_config) : *[Reg3]=0x00817FFB
<4>[   11.540000] (idt8v97051_sync_config) : *[Reg2]=0x7E050E42
<4>[   11.540000] (idt8v97051_sync_config) : *[Reg1]=0x00008009
<4>[   11.540000] (idt8v97051_sync_config) : *[Reg0]=0x01770000
<4>[   11.560000] (idt8v97051_sync_config) : Read back [Reg7]=0x01770000
<4>[   11.580000] (idt8v97051_sync_config) : Read back [Reg6]=0xE0CC5906
<4>[   11.600000] (idt8v97051_sync_config) : Read back [Reg5]=0x00580005
<4>[   11.620000] (idt8v97051_sync_config) : Read back [Reg4]=0x01770000
<4>[   11.640000] (idt8v97051_sync_config) : Read back [Reg3]=0x00817FFB
<4>[   11.660000] (idt8v97051_sync_config) : Read back [Reg2]=0x01770000
<4>[   11.680000] (idt8v97051_sync_config) : Read back [Reg1]=0x00008009
<4>[   11.700000] (idt8v97051_sync_config) : Read back [Reg0]=0x01770000
<4>[   11.700000] Synthesizer IDT8V97051 has been registered successfully!
<6>[   11.700000] arp_tables: (C) 2002 David S. Miller
<6>[   11.710000] usbcore: registered new interface driver cdc_acm
<6>[   11.710000] cdc_acm: USB Abstract Control Model driver for USB modems and ISDN adapters
<6>[   11.710000] usbcore: registered new interface driver cdc_wdm
<6>[   11.720000] platform leds-gpio: Driver leds-gpio requests probe deferral
<7>[   11.720000] stepOne_init_channels: initializing stepOne band channels...
<6>[   11.720000] Loading modules backported from Linux version master-2014-05-22-0-gf2032ea
<6>[   11.720000] Backport generated by backports.git backports-20140320-37-g5c33da0
<6>[   11.730000] ip_tables: (C) 2000-2006 Netfilter Core Team
<6>[   11.740000] nf_conntrack version 0.5.0 (957 buckets, 3828 max)
<6>[   11.760000] Netfilter messages via NETLINK v0.30.
<6>[   11.770000] usbcore: registered new interface driver usbserial
<6>[   11.770000] usbcore: registered new interface driver usbserial_generic
<6>[   11.770000] usbserial: USB Serial support registered for generic
<6>[   11.810000] xt_time: kernel timezone is -0000
<6>[   11.810000] usbcore: registered new interface driver cdc_ncm
<6>[   11.840000] cfg80211: Calling CRDA to update world regulatory domain
<6>[   12.130000] ctnetlink v0.93: registering with nfnetlink.
<6>[   12.140000] usbcore: registered new interface driver pl2303
<6>[   12.140000] usbserial: USB Serial support registered for pl2303
<6>[   12.140000] PPP generic driver version 2.4.2
<6>[   12.150000] usbcore: registered new interface driver qmi_wwan
<6>[   12.190000] usbcore: registered new interface driver option
<6>[   12.190000] usbserial: USB Serial support registered for GSM modem (1-port)
<6>[   12.190000] usbcore: registered new interface driver qcserial
<6>[   12.190000] usbserial: USB Serial support registered for Qualcomm USB modem
<6>[   12.210000] ath: chip revision id=10123, eeprom supported bands: 2G 5G
<4>[   12.440000] ath: phy0: disabling 5GHz band
<7>[   12.440000] ath: EEPROM regdomain: 0x0
<7>[   12.440000] ath: EEPROM indicates default country code should be used
<7>[   12.440000] ath: doing EEPROM country->regdmn map search
<7>[   12.440000] ath: country maps to regdmn code: 0x3a
<7>[   12.440000] ath: Country alpha2 being used: US
<7>[   12.440000] ath: Regpair used: 0x3a
<7>[   12.460000] ieee80211 phy0: Selected rate control algorithm 'minstrel_ht'
<6>[   12.470000] cfg80211: Calling CRDA to update world regulatory domain
<6>[   12.470000] ieee80211 phy0: Atheros AR9340 Rev:0 mem=0xb8100000, irq=47
<6>[   12.480000] platform leds-gpio: Driver leds-gpio requests probe deferral
<6>[   13.970000] ehci_hcd: USB 2.0 'Enhanced' Host Controller (EHCI) Driver
<6>[   13.980000] ehci-platform: EHCI generic platform driver
<6>[   13.980000] ehci-platform ehci-platform: EHCI Host Controller
<6>[   13.980000] ehci-platform ehci-platform: new USB bus registered, assigned bus number 1
<6>[   13.980000] ehci-platform ehci-platform: TX-TX IDP fix enabled
<6>[   13.980000] ehci-platform ehci-platform: irq 3, io mem 0x1b000000
<6>[   14.000000] ehci-platform ehci-platform: USB 2.0 started, EHCI 1.00
<6>[   14.000000] hub 1-0:1.0: USB hub found
<6>[   14.000000] hub 1-0:1.0: 1 port detected
<6>[   14.010000] platform leds-gpio: Driver leds-gpio requests probe deferral
<6>[   14.010000] ohci_hcd: USB 1.1 'Open' Host Controller (OHCI) Driver
<6>[   14.020000] uhci_hcd: USB Universal Host Controller Interface driver
<6>[   14.040000] usbcore: registered new interface driver smsc75xx
<6>[   14.060000] usbcore: registered new interface driver smsc95xx
<6>[   14.070000] usbcore: registered new interface driver asix
<6>[   14.080000] usbcore: registered new interface driver ax88179_178a
<6>[   14.090000] usbcore: registered new interface driver cdc_eem
<6>[   14.100000] usbcore: registered new interface driver cdc_ether
<6>[   14.110000] usbcore: registered new interface driver rndis_host
<6>[   14.130000] usbcore: registered new interface driver ftdi_sio
<6>[   14.130000] usbserial: USB Serial support registered for FTDI USB Serial Device
<6>[   19.810000] eth0: link up (1000Mbps/Full duplex)
<6>[   26.830000] eth0: link down
<6>[   27.880000] device eth0 entered promiscuous mode
<6>[   27.880000] br-lan: port 1(eth0) entered forwarding state
<6>[   27.880000] br-lan: port 1(eth0) entered forwarding state
<6>[   27.890000] br-lan: port 1(eth0) entered disabled state
<6>[   27.940000] device eth1 entered promiscuous mode
<6>[   28.480000] eth0: link up (1000Mbps/Full duplex)
<6>[   28.480000] br-lan: port 1(eth0) entered forwarding state
<6>[   28.480000] br-lan: port 1(eth0) entered forwarding state
<0>[   29.290000] (idt8v97051_set_freq) : Setting frequency 3410000000
<0>[   29.290000] D=1, T=0, VCO: 3410000000 Hz, PFD 4000000 Hz
<0>[   29.290000] R_CNT 20, R0_INT 852, R0_FRACT 1
<0>[   29.290000] R1_MOD 2, RF_DIV(M0) 1, BAND_SEL_DIV 14
<0>[   29.290000] (idt8v97051_sync_config) :  [Reg6]=0x00CC0006
<0>[   29.290000] (idt8v97051_sync_config) :  [Reg5]=0x00580005
<0>[   29.290000] (idt8v97051_sync_config) :  [Reg4]=0x0080E1FC
<0>[   29.290000] (idt8v97051_sync_config) :  [Reg3]=0x00817FFB
<0>[   29.290000] (idt8v97051_sync_config) :  [Reg2]=0x7E050E42
<0>[   29.290000] (idt8v97051_sync_config) : *[Reg1]=0x00008011
<0>[   29.290000] (idt8v97051_sync_config) : *[Reg0]=0x01AA0008
<0>[   29.310000] (idt8v97051_sync_config) : Read back [Reg7]=0xC2C00087
<0>[   29.330000] (idt8v97051_sync_config) : Read back [Reg6]=0xE0CC7206
<0>[   29.350000] (idt8v97051_sync_config) : Read back [Reg5]=0x01AA0008
<0>[   29.390000] (idt8v97051_sync_config) : Read back [Reg4]=0x01AA0008
<0>[   29.440000] (idt8v97051_sync_config) : Read back [Reg3]=0x01AA0008
<0>[   29.480000] (idt8v97051_sync_config) : Read back [Reg2]=0x01AA0008
<0>[   29.500000] (idt8v97051_sync_config) : Read back [Reg1]=0x01AA0008
<0>[   29.520000] (idt8v97051_sync_config) : Read back [Reg0]=0x01AA0008
<6>[   30.480000] br-lan: port 1(eth0) entered forwarding state
<0>[   33.920000] ==MHX1.0(ieee80211_mesh_work)
<0>[   33.920000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000041, preq_q_len=0
<0>[   34.800000] ==MHX1.0(ieee80211_mesh_work)
<0>[   34.800000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   34.850000] ==MHX10.0(ieee80211_xmit)is_data=0, is_unicast=1
<0>[   35.160000] ==MHX10.0(ieee80211_xmit)is_data=0, is_unicast=1
<0>[   35.160000] ==MHX10.0(ieee80211_xmit)is_data=0, is_unicast=1
<0>[   35.170000] ==MHX10.0(ieee80211_xmit)is_data=0, is_unicast=1
<0>[   35.800000] ==MHX1.0(ieee80211_mesh_work)
<0>[   35.800000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   36.160000] ==MHX10.0(ieee80211_xmit)is_data=0, is_unicast=1
<0>[   36.160000] new_rate=96 changed to 0 
<0>[   36.160000] new_rate=96 changed to 0 
<0>[   36.170000] ==MHX10.0(ieee80211_xmit)is_data=1, is_unicast=1
<0>[   36.170000] ==MHX3.0(mesh_nexthop_resolve). target_addr=[fb:9d:26]
<0>[   36.170000] ==MHX1.0(ieee80211_mesh_work)
<0>[   36.170000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000020, preq_q_len=0
<3>[   36.230000] ath: phy0: Failed to stop TX DMA, queues=0x008!
<0>[   36.230000] new_rate=96 changed to 0 
<0>[   36.230000] new_rate=96 changed to 0 
<0>[   36.230000] ==MHX2.1(ieee80211s_update_metric)To STA[fb:9d:26].rate=65, retry=0, failed=1,sta->fa
il_avg=20,sta->bitrate_avg=650
<0>[   36.370000] ===MHX6.1(mpath_lookup) Looking table[83acfc00] for dst=[08:78:06]
<0>[   36.370000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[   36.370000] =MHX13.1(mpp_path_add)dst=[08:78:06]
<0>[   36.820000] ==MHX1.0(ieee80211_mesh_work)
<0>[   36.820000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   37.050000] ==MHX1.0(ieee80211_mesh_work)
<0>[   37.050000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000001, preq_q_len=0
<6>[   37.320000] device wlan0 entered promiscuous mode
<6>[   37.320000] br-lan: port 2(wlan0) entered forwarding state
<6>[   37.320000] br-lan: port 2(wlan0) entered forwarding state
<0>[   37.330000] =MHX11.0(ieee80211_subif_start_xmit) dst=[01:00:5e:00:00:01]
<0>[   37.330000] ==MHX10.0(ieee80211_xmit)is_data=1, is_unicast=0
<0>[   37.850000] ==MHX1.0(ieee80211_mesh_work)
<0>[   37.850000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   38.870000] ==MHX1.0(ieee80211_mesh_work)
<0>[   38.870000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<6>[   39.320000] br-lan: port 2(wlan0) entered forwarding state
<0>[   39.900000] ==MHX1.0(ieee80211_mesh_work)
<0>[   39.900000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   40.050000] ==MHX1.0(ieee80211_mesh_work)
<0>[   40.050000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000001, preq_q_len=0
<0>[   40.920000] ==MHX1.0(ieee80211_mesh_work)
<0>[   40.920000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   41.940000] ==MHX1.0(ieee80211_mesh_work)
<0>[   41.940000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   42.970000] ==MHX1.0(ieee80211_mesh_work)
<0>[   42.970000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   43.050000] ==MHX1.0(ieee80211_mesh_work)
<0>[   43.050000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000001, preq_q_len=0
<0>[   44.000000] ==MHX1.0(ieee80211_mesh_work)
<0>[   44.000000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   45.000000] ===MHX6.1(mpath_lookup) Looking table[83acfc00] for dst=[89:41:be]
<0>[   45.000000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[   45.000000] =MHX13.1(mpp_path_add)dst=[89:41:be]
<0>[   45.020000] ==MHX1.0(ieee80211_mesh_work)
<0>[   45.020000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   46.040000] ==MHX1.0(ieee80211_mesh_work)
<0>[   46.040000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   46.050000] ==MHX1.0(ieee80211_mesh_work)
<0>[   46.050000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000001, preq_q_len=0
<0>[   47.060000] ==MHX1.0(ieee80211_mesh_work)
<0>[   47.060000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   48.090000] ==MHX1.0(ieee80211_mesh_work)
<0>[   48.090000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   49.050000] ==MHX1.0(ieee80211_mesh_work)
<0>[   49.050000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000001, preq_q_len=0
<0>[   49.110000] ==MHX1.0(ieee80211_mesh_work)
<0>[   49.110000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   50.140000] ==MHX1.0(ieee80211_mesh_work)
<0>[   50.140000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   51.160000] ==MHX1.0(ieee80211_mesh_work)
<0>[   51.160000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   52.050000] ==MHX1.0(ieee80211_mesh_work)
<0>[   52.050000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000001, preq_q_len=0
<0>[   52.180000] ==MHX1.0(ieee80211_mesh_work)
<0>[   52.180000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   53.210000] ==MHX1.0(ieee80211_mesh_work)
<0>[   53.210000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   54.230000] ==MHX1.0(ieee80211_mesh_work)
<0>[   54.230000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   55.050000] ==MHX1.0(ieee80211_mesh_work)
<0>[   55.050000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000001, preq_q_len=0
<0>[   55.260000] ==MHX1.0(ieee80211_mesh_work)
<0>[   55.260000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   56.280000] ==MHX1.0(ieee80211_mesh_work)
<0>[   56.280000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   57.300000] ==MHX1.0(ieee80211_mesh_work)
<0>[   57.300000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   58.050000] ==MHX1.0(ieee80211_mesh_work)
<0>[   58.050000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000001, preq_q_len=0
<0>[   58.330000] ==MHX1.0(ieee80211_mesh_work)
<0>[   58.330000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   59.350000] ==MHX1.0(ieee80211_mesh_work)
<0>[   59.350000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   60.380000] ==MHX1.0(ieee80211_mesh_work)
<0>[   60.380000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   60.590000] =MHX11.0(ieee80211_subif_start_xmit) dst=[ff:ff:ff:ff:ff:ff]
<0>[   60.590000] ==MHX10.0(ieee80211_xmit)is_data=1, is_unicast=0
<0>[   61.050000] ==MHX1.0(ieee80211_mesh_work)
<0>[   61.050000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000001, preq_q_len=0
<0>[   61.400000] ==MHX1.0(ieee80211_mesh_work)
<0>[   61.400000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   62.420000] ==MHX1.0(ieee80211_mesh_work)
<0>[   62.420000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   63.450000] ==MHX1.0(ieee80211_mesh_work)
<0>[   63.450000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   64.050000] ==MHX1.0(ieee80211_mesh_work)
<0>[   64.050000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000001, preq_q_len=0
<0>[   64.470000] ==MHX1.0(ieee80211_mesh_work)
<0>[   64.470000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   64.710000] ===MHX6.1(mpath_lookup) Looking table[83acfc00] for dst=[89:41:be]
<0>[   64.710000] =MHX6.1.0 mpath=node->mpath=82a57600, mpath->sdata=82838420, sdata=82838420
<0>[   64.710000] =MHX6.1.1 found!!!
<0>[   65.500000] ==MHX1.0(ieee80211_mesh_work)
<0>[   65.500000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   66.520000] ==MHX1.0(ieee80211_mesh_work)
<0>[   66.520000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   67.050000] ==MHX1.0(ieee80211_mesh_work)
<0>[   67.050000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000001, preq_q_len=0
<0>[   67.540000] ==MHX1.0(ieee80211_mesh_work)
<0>[   67.540000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   67.700000] ===MHX6.1(mpath_lookup) Looking table[83acfc00] for dst=[08:78:06]
<0>[   67.700000] =MHX6.1.0 mpath=node->mpath=82a57500, mpath->sdata=82838420, sdata=82838420
<0>[   67.700000] =MHX6.1.1 found!!!
<0>[   68.570000] ==MHX1.0(ieee80211_mesh_work)
<0>[   68.570000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   68.640000] =MHX11.0(ieee80211_subif_start_xmit) dst=[01:00:5e:00:00:01]
<0>[   68.640000] ==MHX10.0(ieee80211_xmit)is_data=1, is_unicast=0
<0>[   69.590000] ==MHX1.0(ieee80211_mesh_work)
<0>[   69.590000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   70.050000] ==MHX1.0(ieee80211_mesh_work)
<0>[   70.050000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000001, preq_q_len=0
<0>[   70.620000] ==MHX1.0(ieee80211_mesh_work)
<0>[   70.620000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   71.640000] ==MHX1.0(ieee80211_mesh_work)
<0>[   71.640000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   72.660000] ==MHX1.0(ieee80211_mesh_work)
<0>[   72.660000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   73.050000] ==MHX1.0(ieee80211_mesh_work)
<0>[   73.050000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000001, preq_q_len=0
<0>[   73.690000] ==MHX1.0(ieee80211_mesh_work)
<0>[   73.690000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   74.710000] ==MHX1.0(ieee80211_mesh_work)
<0>[   74.710000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   75.740000] ==MHX1.0(ieee80211_mesh_work)
<0>[   75.740000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   76.050000] ==MHX1.0(ieee80211_mesh_work)
<0>[   76.050000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000001, preq_q_len=0
<0>[   76.760000] ==MHX1.0(ieee80211_mesh_work)
<0>[   76.760000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   77.000000] ===MHX6.1(mpath_lookup) Looking table[83acfc00] for dst=[89:41:be]
<0>[   77.000000] =MHX6.1.0 mpath=node->mpath=82a57600, mpath->sdata=82838420, sdata=82838420
<0>[   77.000000] =MHX6.1.1 found!!!
<0>[   77.780000] ==MHX1.0(ieee80211_mesh_work)
<0>[   77.780000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   78.190000] ===MHX6.1(mpath_lookup) Looking table[83acfc00] for dst=[89:41:be]
<0>[   78.190000] =MHX6.1.0 mpath=node->mpath=82a57600, mpath->sdata=82838420, sdata=82838420
<0>[   78.190000] =MHX6.1.1 found!!!
<0>[   78.190000] =MHX11.0(ieee80211_subif_start_xmit) dst=[00:0e:c6:89:41:be]
<0>[   78.190000] ===MHX6.1(mpath_lookup) Looking table[829cec00] for dst=[89:41:be]
<0>[   78.190000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[   78.190000] ===MHX6.1(mpath_lookup) Looking table[83acfc00] for dst=[89:41:be]
<0>[   78.190000] =MHX6.1.0 mpath=node->mpath=82a57600, mpath->sdata=82838420, sdata=82838420
<0>[   78.190000] =MHX6.1.1 found!!!
<0>[   78.190000] ==MHX10.0(ieee80211_xmit)is_data=1, is_unicast=1
<0>[   78.190000] ==MHX3.0(mesh_nexthop_resolve). target_addr=[fb:9d:26]
<0>[   78.190000] ===MHX6.1(mpath_lookup) Looking table[829cec00] for dst=[fb:9d:26]
<0>[   78.190000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[   78.190000] ==MHX7.1.1(mesh_nexthop_lookup)Test frame? addr1=[00:00:00], addr3=[fb:9d:26]
<0>[   78.190000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[   78.190000] ===MHX6.1(mpath_lookup) Looking table[829cec00] for dst=[fb:9d:26]
<0>[   78.190000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[   78.190000] ==MHX3.2(mesh_nexthop_resolve) look up mpath=  (null)
<0>[   78.190000] =MHX12.1(mesh_path_add)dst=[fb:9d:26]
<0>[   78.190000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=0x0
<0>[   78.190000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=1
<0>[   78.190000] ==MHX1.0(ieee80211_mesh_work)
<0>[   78.190000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=1
<0>[   78.190000] ==MHX1.2(ieee80211_mesh_work)
<0>[   78.190000] ===MHX6.1(mpath_lookup) Looking table[829cec00] for dst=[fb:9d:26]
<0>[   78.190000] =MHX6.1.0 mpath=node->mpath=82a57200, mpath->sdata=82838420, sdata=82838420
<0>[   78.190000] =MHX6.1.1 found!!!
<7>[   78.190000] wlan0: sending PREQ to 00:0f:92:fb:9d:26
<0>[   78.190000] ==MHX9.1(mesh_path_sel_frame_tx)TX action=0, flags=0x00,orig_addr[fa:a6:c6].orig_sn=1
,target[fb:9d:26],target_sn=0,da[ff:ff:ff],hop_count=0,ttl=31,lifetime=1562,metric=0,preq_id=0
<0>[   78.190000] ==MHX10.0(ieee80211_xmit)is_data=0, is_unicast=0
<0>[   78.190000] ==MHX4.0(hwmp_route_info_get)
<0>[   78.190000] ==MHX1.2(airtime_link_metric_get) tx_time=3226643, err=51, estimated_retx=319,sta->bi
trate_avg=650,sta->fail_avg=20. signal=27. result(metric)=51907
<0>[   78.190000] ==MHX4.1(hwmp_route_info_get) action=1, from STA=[fb:9d:26], whose last_hop_metric=51
907
<0>[   78.190000] ==MHX4.2.1(hwmp_route_info_get) orig_addr=[fb:9d:26], IE dump : orig_sn=1, orig_lifet
ime=1562, orig_metric=0,orig_hop=0.And new_metric=51907.
<0>[   78.190000] ===MHX6.1(mpath_lookup) Looking table[829cec00] for dst=[fb:9d:26]
<0>[   78.190000] =MHX6.1.0 mpath=node->mpath=82a57200, mpath->sdata=82838420, sdata=82838420
<0>[   78.190000] =MHX6.1.1 found!!!
<0>[   78.190000] ==MHX4.2.2(hwmp_route_info_get) mpath to orig_addr exists : flags=0x00000002, sn=0, m
etric=0,hop=0,mpath->exp_time=4294945115.
<0>[   78.190000] ==MHX4.2.4(hwmp_route_info_get) first fresh_info=1,process=1.
<0>[   78.190000] ==MHX4.2.5(hwmp_route_info_get) Updating orig_addr's mpath next_hop and other info an
d TX pending mpath Q.
<0>[   78.190000] ==MHX5.1(mesh_path_assign_nexthop) Change next_hop of the Q-ed mpath frames : addr1(D
A)=[fb:9d:26], addr2(SA)=[fa:a6:c6]
<0>[   78.190000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[fb:9d:26], next_hop=[fb:9d:26],flag
=0x00000017,orig_sn=1, metric=51907,exp_time=4294945275, hop=1
<0>[   78.190000] ==MHX4.5(hwmp_route_info_get) mpath to SA=[fb:9d:26], next_hop=[fb:9d:26],flag=0x0000
0017,sn=1, metric=51907,exp_time=4294945275.hop=1,process=1
<7>[   78.190000] wlan0: received PREP from 00:0f:92:fb:9d:26
<0>[   78.190000] ==MHX1.0(ieee80211_mesh_work)
<0>[   78.190000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   78.190000] new_rate=96 changed to 0 
<0>[   78.190000] new_rate=96 changed to 0 
<0>[   78.190000] ==MHX2.1(ieee80211s_update_metric)To STA[fb:9d:26].rate=60, retry=0, failed=0,sta->fa
il_avg=16,sta->bitrate_avg=1185
<0>[   78.200000] ===MHX6.1(mpath_lookup) Looking table[83acfc00] for dst=[89:41:be]
<0>[   78.200000] =MHX6.1.0 mpath=node->mpath=82a57600, mpath->sdata=82838420, sdata=82838420
<0>[   78.200000] =MHX6.1.1 found!!!
<0>[   78.200000] =MHX11.0(ieee80211_subif_start_xmit) dst=[00:0e:c6:89:41:be]
<0>[   78.200000] ===MHX6.1(mpath_lookup) Looking table[829cec00] for dst=[89:41:be]
<0>[   78.200000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[   78.200000] ===MHX6.1(mpath_lookup) Looking table[83acfc00] for dst=[89:41:be]
<0>[   78.200000] =MHX6.1.0 mpath=node->mpath=82a57600, mpath->sdata=82838420, sdata=82838420
<0>[   78.200000] =MHX6.1.1 found!!!
<0>[   78.200000] ==MHX10.0(ieee80211_xmit)is_data=1, is_unicast=1
<0>[   78.200000] ==MHX3.0(mesh_nexthop_resolve). target_addr=[fb:9d:26]
<0>[   78.200000] ===MHX6.1(mpath_lookup) Looking table[829cec00] for dst=[fb:9d:26]
<0>[   78.200000] =MHX6.1.0 mpath=node->mpath=82a57200, mpath->sdata=82838420, sdata=82838420
<0>[   78.200000] =MHX6.1.1 found!!!
<0>[   78.200000] ==MHX7.1.1(mesh_nexthop_lookup)Test frame? addr1=[00:00:00], addr3=[fb:9d:26]
<0>[   78.200000] ==MHX7.3(mesh_nexthop_lookup) next_hop=[fb:9d:26]
<0>[   78.200000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[   78.200000] ==MHX2.1(ieee80211s_update_metric)To STA[fb:9d:26].rate=65, retry=0, failed=0,sta->fa
il_avg=12,sta->bitrate_avg=1716
<0>[   78.810000] ==MHX1.0(ieee80211_mesh_work)
<0>[   78.810000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   79.050000] ==MHX1.0(ieee80211_mesh_work)
<0>[   79.050000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000001, preq_q_len=0
<0>[   79.190000] ===MHX6.1(mpath_lookup) Looking table[83acfc00] for dst=[89:41:be]
<0>[   79.190000] =MHX6.1.0 mpath=node->mpath=82a57600, mpath->sdata=82838420, sdata=82838420
<0>[   79.190000] =MHX6.1.1 found!!!
<0>[   79.190000] =MHX11.0(ieee80211_subif_start_xmit) dst=[00:0e:c6:89:41:be]
<0>[   79.190000] ===MHX6.1(mpath_lookup) Looking table[829cec00] for dst=[89:41:be]
<0>[   79.190000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[   79.190000] ===MHX6.1(mpath_lookup) Looking table[83acfc00] for dst=[89:41:be]
<0>[   79.190000] =MHX6.1.0 mpath=node->mpath=82a57600, mpath->sdata=82838420, sdata=82838420
<0>[   79.190000] =MHX6.1.1 found!!!
<0>[   79.190000] ==MHX10.0(ieee80211_xmit)is_data=1, is_unicast=1
<0>[   79.190000] ==MHX3.0(mesh_nexthop_resolve). target_addr=[fb:9d:26]
<0>[   79.190000] ===MHX6.1(mpath_lookup) Looking table[829cec00] for dst=[fb:9d:26]
<0>[   79.190000] =MHX6.1.0 mpath=node->mpath=82a57200, mpath->sdata=82838420, sdata=82838420
<0>[   79.190000] =MHX6.1.1 found!!!
<0>[   79.190000] ==MHX7.1.1(mesh_nexthop_lookup)Test frame? addr1=[00:00:00], addr3=[fb:9d:26]
<0>[   79.190000] ==MHX7.3(mesh_nexthop_lookup) next_hop=[fb:9d:26]
<0>[   79.190000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[   79.190000] ==MHX2.1(ieee80211s_update_metric)To STA[fb:9d:26].rate=65, retry=1, failed=0,sta->fa
il_avg=19,sta->bitrate_avg=2194
<0>[   79.830000] ==MHX1.0(ieee80211_mesh_work)
<0>[   79.830000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   80.190000] ===MHX6.1(mpath_lookup) Looking table[83acfc00] for dst=[89:41:be]
<0>[   80.190000] =MHX6.1.0 mpath=node->mpath=82a57600, mpath->sdata=82838420, sdata=82838420
<0>[   80.190000] =MHX6.1.1 found!!!
<0>[   80.190000] =MHX11.0(ieee80211_subif_start_xmit) dst=[00:0e:c6:89:41:be]
<0>[   80.190000] ===MHX6.1(mpath_lookup) Looking table[829cec00] for dst=[89:41:be]
<0>[   80.190000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[   80.190000] ===MHX6.1(mpath_lookup) Looking table[83acfc00] for dst=[89:41:be]
<0>[   80.190000] =MHX6.1.0 mpath=node->mpath=82a57600, mpath->sdata=82838420, sdata=82838420
<0>[   80.190000] =MHX6.1.1 found!!!
<0>[   80.190000] ==MHX10.0(ieee80211_xmit)is_data=1, is_unicast=1
<0>[   80.190000] ==MHX3.0(mesh_nexthop_resolve). target_addr=[fb:9d:26]
<0>[   80.190000] ===MHX6.1(mpath_lookup) Looking table[829cec00] for dst=[fb:9d:26]
<0>[   80.190000] =MHX6.1.0 mpath=node->mpath=82a57200, mpath->sdata=82838420, sdata=82838420
<0>[   80.190000] =MHX6.1.1 found!!!
<0>[   80.190000] ==MHX7.1.1(mesh_nexthop_lookup)Test frame? addr1=[00:00:00], addr3=[fb:9d:26]
<0>[   80.190000] ==MHX7.2(mesh_nexthop_lookup) Qed a PREQ.
<0>[   80.190000] ==MHX7.3(mesh_nexthop_lookup) next_hop=[fb:9d:26]
<0>[   80.190000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[   80.190000] ==MHX4.0(hwmp_route_info_get)
<0>[   80.190000] ==MHX1.2(airtime_link_metric_get) tx_time=956113, err=48, estimated_retx=315,sta->bit
rate_avg=2194,sta->fail_avg=19. signal=27. result(metric)=15166
<0>[   80.190000] ==MHX4.1(hwmp_route_info_get) action=0, from STA=[fb:9d:26], whose last_hop_metric=15
166
<0>[   80.190000] ==MHX4.2.1(hwmp_route_info_get) orig_addr=[fb:9d:26], IE dump : orig_sn=2, orig_lifet
ime=1562, orig_metric=0,orig_hop=0.And new_metric=15166.
<0>[   80.190000] ===MHX6.1(mpath_lookup) Looking table[829cec00] for dst=[fb:9d:26]
<0>[   80.190000] =MHX6.1.0 mpath=node->mpath=82a57200, mpath->sdata=82838420, sdata=82838420
<0>[   80.190000] =MHX6.1.1 found!!!
<0>[   80.190000] ==MHX4.2.2(hwmp_route_info_get) mpath to orig_addr exists : flags=0x00000025, sn=1, m
etric=51907,hop=1,mpath->exp_time=4294945275.
<0>[   80.190000] ==MHX4.2.4(hwmp_route_info_get) first fresh_info=1,process=1.
<0>[   80.190000] ==MHX4.2.5(hwmp_route_info_get) Updating orig_addr's mpath next_hop and other info an
d TX pending mpath Q.
<0>[   80.190000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[fb:9d:26], next_hop=[fb:9d:26],flag
=0x00000035,orig_sn=2, metric=15166,exp_time=4294945475, hop=1
<0>[   80.190000] ==MHX4.5(hwmp_route_info_get) mpath to SA=[fb:9d:26], next_hop=[fb:9d:26],flag=0x0000
0035,sn=2, metric=15166,exp_time=4294945475.hop=1,process=1
<7>[   80.190000] wlan0: received PREQ from 00:0f:92:fb:9d:26
<7>[   80.190000] wlan0: PREQ is for us
<7>[   80.190000] wlan0: replying to the PREQ
<7>[   80.190000] wlan0: sending PREP to 00:0f:92:fb:9d:26
<0>[   80.190000] ==MHX9.1(mesh_path_sel_frame_tx)TX action=1, flags=0x00,orig_addr[fb:9d:26].orig_sn=2
,target[fa:a6:c6],target_sn=2,da[fb:9d:26],hop_count=0,ttl=31,lifetime=1562,metric=0,preq_id=0
<0>[   80.190000] ==MHX10.0(ieee80211_xmit)is_data=0, is_unicast=1
<0>[   80.190000] ==MHX1.0(ieee80211_mesh_work)
<0>[   80.190000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=1
<0>[   80.190000] ==MHX1.2(ieee80211_mesh_work)
<0>[   80.190000] ===MHX6.1(mpath_lookup) Looking table[829cec00] for dst=[fb:9d:26]
<0>[   80.190000] =MHX6.1.0 mpath=node->mpath=82a57200, mpath->sdata=82838420, sdata=82838420
<0>[   80.190000] =MHX6.1.1 found!!!
<7>[   80.190000] wlan0: sending PREQ to 00:0f:92:fb:9d:26
<0>[   80.190000] ==MHX9.1(mesh_path_sel_frame_tx)TX action=0, flags=0x00,orig_addr[fa:a6:c6].orig_sn=2
,target[fb:9d:26],target_sn=2,da[ff:ff:ff],hop_count=0,ttl=31,lifetime=1562,metric=0,preq_id=1
<0>[   80.190000] ==MHX10.0(ieee80211_xmit)is_data=0, is_unicast=0
<0>[   80.190000] new_rate=96 changed to 0 
<0>[   80.190000] new_rate=96 changed to 0 
<0>[   80.200000] ==MHX2.1(ieee80211s_update_metric)To STA[fb:9d:26].rate=65, retry=1, failed=0,sta->fa
il_avg=25,sta->bitrate_avg=2624
<0>[   80.200000] ==MHX4.0(hwmp_route_info_get)
<0>[   80.200000] ==MHX1.2(airtime_link_metric_get) tx_time=799475, err=64, estimated_retx=341,sta->bit
rate_avg=2624,sta->fail_avg=25. signal=27. result(metric)=13716
<0>[   80.200000] ==MHX4.1(hwmp_route_info_get) action=1, from STA=[fb:9d:26], whose last_hop_metric=13
716
<0>[   80.200000] ==MHX4.2.1(hwmp_route_info_get) orig_addr=[fb:9d:26], IE dump : orig_sn=2, orig_lifet
ime=1562, orig_metric=0,orig_hop=0.And new_metric=13716.
<0>[   80.200000] ===MHX6.1(mpath_lookup) Looking table[829cec00] for dst=[fb:9d:26]
<0>[   80.200000] =MHX6.1.0 mpath=node->mpath=82a57200, mpath->sdata=82838420, sdata=82838420
<0>[   80.200000] =MHX6.1.1 found!!!
<0>[   80.200000] ==MHX4.2.2(hwmp_route_info_get) mpath to orig_addr exists : flags=0x00000007, sn=2, m
etric=15166,hop=1,mpath->exp_time=4294945475.
<0>[   80.200000] ==MHX4.2.4(hwmp_route_info_get) first fresh_info=1,process=1.
<0>[   80.200000] ==MHX4.2.5(hwmp_route_info_get) Updating orig_addr's mpath next_hop and other info an
d TX pending mpath Q.
<0>[   80.200000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[fb:9d:26], next_hop=[fb:9d:26],flag
=0x00000017,orig_sn=2, metric=13716,exp_time=4294945476, hop=1
<0>[   80.200000] ==MHX4.5(hwmp_route_info_get) mpath to SA=[fb:9d:26], next_hop=[fb:9d:26],flag=0x0000
0017,sn=2, metric=13716,exp_time=4294945476.hop=1,process=1
<7>[   80.200000] wlan0: received PREP from 00:0f:92:fb:9d:26
<0>[   80.200000] ==MHX1.0(ieee80211_mesh_work)
<0>[   80.200000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   80.860000] ==MHX1.0(ieee80211_mesh_work)
<0>[   80.860000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   81.190000] ===MHX6.1(mpath_lookup) Looking table[83acfc00] for dst=[89:41:be]
<0>[   81.190000] =MHX6.1.0 mpath=node->mpath=82a57600, mpath->sdata=82838420, sdata=82838420
<0>[   81.190000] =MHX6.1.1 found!!!
<0>[   81.190000] =MHX11.0(ieee80211_subif_start_xmit) dst=[00:0e:c6:89:41:be]
<0>[   81.190000] ===MHX6.1(mpath_lookup) Looking table[829cec00] for dst=[89:41:be]
<0>[   81.190000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[   81.190000] ===MHX6.1(mpath_lookup) Looking table[83acfc00] for dst=[89:41:be]
<0>[   81.190000] =MHX6.1.0 mpath=node->mpath=82a57600, mpath->sdata=82838420, sdata=82838420
<0>[   81.190000] =MHX6.1.1 found!!!
<0>[   81.190000] ==MHX10.0(ieee80211_xmit)is_data=1, is_unicast=1
<0>[   81.200000] ==MHX3.0(mesh_nexthop_resolve). target_addr=[fb:9d:26]
<0>[   81.200000] ===MHX6.1(mpath_lookup) Looking table[829cec00] for dst=[fb:9d:26]
<0>[   81.200000] =MHX6.1.0 mpath=node->mpath=82a57200, mpath->sdata=82838420, sdata=82838420
<0>[   81.200000] =MHX6.1.1 found!!!
<0>[   81.200000] ==MHX7.1.1(mesh_nexthop_lookup)Test frame? addr1=[00:00:00], addr3=[fb:9d:26]
<0>[   81.200000] ==MHX7.3(mesh_nexthop_lookup) next_hop=[fb:9d:26]
<0>[   81.200000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[   81.200000] ==MHX2.1(ieee80211s_update_metric)To STA[fb:9d:26].rate=65, retry=1, failed=0,sta->fa
il_avg=30,sta->bitrate_avg=3011
<0>[   81.880000] ==MHX1.0(ieee80211_mesh_work)
<0>[   81.880000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   82.050000] ==MHX1.0(ieee80211_mesh_work)
<0>[   82.050000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000001, preq_q_len=0
<0>[   82.200000] ===MHX6.1(mpath_lookup) Looking table[83acfc00] for dst=[89:41:be]
<0>[   82.200000] =MHX6.1.0 mpath=node->mpath=82a57600, mpath->sdata=82838420, sdata=82838420
<0>[   82.200000] =MHX6.1.1 found!!!
<0>[   82.200000] =MHX11.0(ieee80211_subif_start_xmit) dst=[00:0e:c6:89:41:be]
<0>[   82.200000] ===MHX6.1(mpath_lookup) Looking table[829cec00] for dst=[89:41:be]
<0>[   82.200000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[   82.200000] ===MHX6.1(mpath_lookup) Looking table[83acfc00] for dst=[89:41:be]
<0>[   82.200000] =MHX6.1.0 mpath=node->mpath=82a57600, mpath->sdata=82838420, sdata=82838420
<0>[   82.200000] =MHX6.1.1 found!!!
<0>[   82.200000] ==MHX10.0(ieee80211_xmit)is_data=1, is_unicast=1
<0>[   82.200000] ==MHX3.0(mesh_nexthop_resolve). target_addr=[fb:9d:26]
<0>[   82.200000] ===MHX6.1(mpath_lookup) Looking table[829cec00] for dst=[fb:9d:26]
<0>[   82.200000] =MHX6.1.0 mpath=node->mpath=82a57200, mpath->sdata=82838420, sdata=82838420
<0>[   82.200000] =MHX6.1.1 found!!!
<0>[   82.200000] ==MHX7.1.1(mesh_nexthop_lookup)Test frame? addr1=[00:00:00], addr3=[fb:9d:26]
<0>[   82.200000] ==MHX7.2(mesh_nexthop_lookup) Qed a PREQ.
<0>[   82.200000] ==MHX7.3(mesh_nexthop_lookup) next_hop=[fb:9d:26]
<0>[   82.200000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[   82.200000] ==MHX4.0(hwmp_route_info_get)
<0>[   82.200000] ==MHX1.2(airtime_link_metric_get) tx_time=696752, err=76, estimated_retx=364,sta->bit
rate_avg=3011,sta->fail_avg=30. signal=27. result(metric)=12805
<0>[   82.200000] ==MHX4.1(hwmp_route_info_get) action=0, from STA=[fb:9d:26], whose last_hop_metric=12
805
<0>[   82.200000] ==MHX4.2.1(hwmp_route_info_get) orig_addr=[fb:9d:26], IE dump : orig_sn=3, orig_lifet
ime=1562, orig_metric=0,orig_hop=0.And new_metric=12805.
<0>[   82.200000] ===MHX6.1(mpath_lookup) Looking table[829cec00] for dst=[fb:9d:26]
<0>[   82.200000] =MHX6.1.0 mpath=node->mpath=82a57200, mpath->sdata=82838420, sdata=82838420
<0>[   82.200000] =MHX6.1.1 found!!!
<0>[   82.200000] ==MHX4.2.2(hwmp_route_info_get) mpath to orig_addr exists : flags=0x00000025, sn=2, m
etric=13716,hop=1,mpath->exp_time=4294945476.
<0>[   82.200000] ==MHX4.2.4(hwmp_route_info_get) first fresh_info=1,process=1.
<0>[   82.200000] ==MHX4.2.5(hwmp_route_info_get) Updating orig_addr's mpath next_hop and other info an
d TX pending mpath Q.
<0>[   82.200000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[fb:9d:26], next_hop=[fb:9d:26],flag
=0x00000035,orig_sn=3, metric=12805,exp_time=4294945676, hop=1
<0>[   82.200000] ==MHX4.5(hwmp_route_info_get) mpath to SA=[fb:9d:26], next_hop=[fb:9d:26],flag=0x0000
0035,sn=3, metric=12805,exp_time=4294945676.hop=1,process=1
<7>[   82.200000] wlan0: received PREQ from 00:0f:92:fb:9d:26
<7>[   82.200000] wlan0: PREQ is for us
<7>[   82.200000] wlan0: replying to the PREQ
<7>[   82.200000] wlan0: sending PREP to 00:0f:92:fb:9d:26
<0>[   82.200000] ==MHX9.1(mesh_path_sel_frame_tx)TX action=1, flags=0x00,orig_addr[fb:9d:26].orig_sn=3
,target[fa:a6:c6],target_sn=3,da[fb:9d:26],hop_count=0,ttl=31,lifetime=1562,metric=0,preq_id=0
<0>[   82.200000] ==MHX10.0(ieee80211_xmit)is_data=0, is_unicast=1
<0>[   82.200000] ==MHX1.0(ieee80211_mesh_work)
<0>[   82.200000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=1
<0>[   82.200000] ==MHX1.2(ieee80211_mesh_work)
<0>[   82.200000] ===MHX6.1(mpath_lookup) Looking table[829cec00] for dst=[fb:9d:26]
<0>[   82.200000] =MHX6.1.0 mpath=node->mpath=82a57200, mpath->sdata=82838420, sdata=82838420
<0>[   82.200000] =MHX6.1.1 found!!!
<7>[   82.200000] wlan0: sending PREQ to 00:0f:92:fb:9d:26
<0>[   82.200000] ==MHX9.1(mesh_path_sel_frame_tx)TX action=0, flags=0x00,orig_addr[fa:a6:c6].orig_sn=3
,target[fb:9d:26],target_sn=3,da[ff:ff:ff],hop_count=0,ttl=31,lifetime=1562,metric=0,preq_id=2
<0>[   82.200000] ==MHX10.0(ieee80211_xmit)is_data=0, is_unicast=0
<0>[   82.200000] new_rate=96 changed to 0 
<0>[   82.200000] new_rate=96 changed to 0 
<0>[   82.200000] ==MHX2.1(ieee80211s_update_metric)To STA[fb:9d:26].rate=65, retry=1, failed=0,sta->fa
il_avg=34,sta->bitrate_avg=3359
<0>[   82.200000] ==MHX4.0(hwmp_route_info_get)
<0>[   82.200000] ==MHX1.2(airtime_link_metric_get) tx_time=624594, err=87, estimated_retx=387,sta->bit
rate_avg=3359,sta->fail_avg=34. signal=27. result(metric)=12150
<0>[   82.200000] ==MHX4.1(hwmp_route_info_get) action=1, from STA=[fb:9d:26], whose last_hop_metric=12
150
<0>[   82.200000] ==MHX4.2.1(hwmp_route_info_get) orig_addr=[fb:9d:26], IE dump : orig_sn=3, orig_lifet
ime=1562, orig_metric=0,orig_hop=0.And new_metric=12150.
<0>[   82.200000] ===MHX6.1(mpath_lookup) Looking table[829cec00] for dst=[fb:9d:26]
<0>[   82.200000] =MHX6.1.0 mpath=node->mpath=82a57200, mpath->sdata=82838420, sdata=82838420
<0>[   82.200000] =MHX6.1.1 found!!!
<0>[   82.200000] ==MHX4.2.2(hwmp_route_info_get) mpath to orig_addr exists : flags=0x00000007, sn=3, m
etric=12805,hop=1,mpath->exp_time=4294945676.
<0>[   82.200000] ==MHX4.2.4(hwmp_route_info_get) first fresh_info=1,process=1.
<0>[   82.200000] ==MHX4.2.5(hwmp_route_info_get) Updating orig_addr's mpath next_hop and other info an
d TX pending mpath Q.
<0>[   82.200000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[fb:9d:26], next_hop=[fb:9d:26],flag
=0x00000017,orig_sn=3, metric=12150,exp_time=4294945676, hop=1
<0>[   82.200000] ==MHX4.5(hwmp_route_info_get) mpath to SA=[fb:9d:26], next_hop=[fb:9d:26],flag=0x0000
0017,sn=3, metric=12150,exp_time=4294945676.hop=1,process=1
<7>[   82.200000] wlan0: received PREP from 00:0f:92:fb:9d:26
<0>[   82.200000] ==MHX1.0(ieee80211_mesh_work)
<0>[   82.200000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   82.900000] ==MHX1.0(ieee80211_mesh_work)
<0>[   82.900000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   83.200000] ===MHX6.1(mpath_lookup) Looking table[83acfc00] for dst=[89:41:be]
<0>[   83.200000] =MHX6.1.0 mpath=node->mpath=82a57600, mpath->sdata=82838420, sdata=82838420
<0>[   83.200000] =MHX6.1.1 found!!!
<0>[   83.200000] =MHX11.0(ieee80211_subif_start_xmit) dst=[00:0e:c6:89:41:be]
<0>[   83.200000] ===MHX6.1(mpath_lookup) Looking table[829cec00] for dst=[89:41:be]
<0>[   83.200000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[   83.200000] ===MHX6.1(mpath_lookup) Looking table[83acfc00] for dst=[89:41:be]
<0>[   83.200000] =MHX6.1.0 mpath=node->mpath=82a57600, mpath->sdata=82838420, sdata=82838420
<0>[   83.200000] =MHX6.1.1 found!!!
<0>[   83.200000] ==MHX10.0(ieee80211_xmit)is_data=1, is_unicast=1
<0>[   83.200000] ==MHX3.0(mesh_nexthop_resolve). target_addr=[fb:9d:26]
<0>[   83.200000] ===MHX6.1(mpath_lookup) Looking table[829cec00] for dst=[fb:9d:26]
<0>[   83.200000] =MHX6.1.0 mpath=node->mpath=82a57200, mpath->sdata=82838420, sdata=82838420
<0>[   83.200000] =MHX6.1.1 found!!!
<0>[   83.200000] ==MHX7.1.1(mesh_nexthop_lookup)Test frame? addr1=[00:00:00], addr3=[fb:9d:26]
<0>[   83.200000] ==MHX7.3(mesh_nexthop_lookup) next_hop=[fb:9d:26]
<0>[   83.200000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[   83.200000] ==MHX2.1(ieee80211s_update_metric)To STA[fb:9d:26].rate=65, retry=1, failed=0,sta->fa
il_avg=37,sta->bitrate_avg=3673
<0>[   83.210000] =MHX11.0(ieee80211_subif_start_xmit) dst=[00:0e:c6:89:41:be]
<0>[   83.210000] ===MHX6.1(mpath_lookup) Looking table[829cec00] for dst=[89:41:be]
<0>[   83.210000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[   83.210000] ===MHX6.1(mpath_lookup) Looking table[83acfc00] for dst=[89:41:be]
<0>[   83.210000] =MHX6.1.0 mpath=node->mpath=82a57600, mpath->sdata=82838420, sdata=82838420
<0>[   83.210000] =MHX6.1.1 found!!!
<0>[   83.210000] ==MHX10.0(ieee80211_xmit)is_data=1, is_unicast=1
<0>[   83.210000] ==MHX3.0(mesh_nexthop_resolve). target_addr=[fb:9d:26]
<0>[   83.210000] ===MHX6.1(mpath_lookup) Looking table[829cec00] for dst=[fb:9d:26]
<0>[   83.210000] =MHX6.1.0 mpath=node->mpath=82a57200, mpath->sdata=82838420, sdata=82838420
<0>[   83.210000] =MHX6.1.1 found!!!
<0>[   83.210000] ==MHX7.1.1(mesh_nexthop_lookup)Test frame? addr1=[00:00:00], addr3=[fb:9d:26]
<0>[   83.210000] ==MHX7.2(mesh_nexthop_lookup) Qed a PREQ.
<0>[   83.210000] ==MHX7.3(mesh_nexthop_lookup) next_hop=[fb:9d:26]
<0>[   83.210000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[   83.210000] ==MHX1.0(ieee80211_mesh_work)
<0>[   83.210000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=1
<0>[   83.210000] ==MHX1.2(ieee80211_mesh_work)
<0>[   83.210000] ===MHX6.1(mpath_lookup) Looking table[829cec00] for dst=[fb:9d:26]
<0>[   83.210000] =MHX6.1.0 mpath=node->mpath=82a57200, mpath->sdata=82838420, sdata=82838420
<0>[   83.210000] =MHX6.1.1 found!!!
<7>[   83.210000] wlan0: sending PREQ to 00:0f:92:fb:9d:26
<0>[   83.210000] ==MHX9.1(mesh_path_sel_frame_tx)TX action=0, flags=0x00,orig_addr[fa:a6:c6].orig_sn=4
,target[fb:9d:26],target_sn=3,da[ff:ff:ff],hop_count=0,ttl=31,lifetime=1562,metric=0,preq_id=3
<0>[   83.210000] ==MHX2.1(ieee80211s_update_metric)To STA[fb:9d:26].rate=60, retry=0, failed=0,sta->fa
il_avg=29,sta->bitrate_avg=3905
<0>[   83.210000] ==MHX10.0(ieee80211_xmit)is_data=0, is_unicast=0
<0>[   83.210000] ===MHX6.1(mpath_lookup) Looking table[83acfc00] for dst=[89:41:be]
<0>[   83.210000] =MHX6.1.0 mpath=node->mpath=82a57600, mpath->sdata=82838420, sdata=82838420
<0>[   83.210000] =MHX6.1.1 found!!!
<0>[   83.210000] ==MHX4.0(hwmp_route_info_get)
<0>[   83.210000] ==MHX1.2(airtime_link_metric_get) tx_time=537298, err=74, estimated_retx=360,sta->bit
rate_avg=3905,sta->fail_avg=29. signal=27. result(metric)=9735
<0>[   83.210000] ==MHX4.1(hwmp_route_info_get) action=0, from STA=[fb:9d:26], whose last_hop_metric=97
35
<0>[   83.210000] ==MHX4.2.1(hwmp_route_info_get) orig_addr=[fb:9d:26], IE dump : orig_sn=4, orig_lifet
ime=1562, orig_metric=0,orig_hop=0.And new_metric=9735.
<0>[   83.210000] ===MHX6.1(mpath_lookup) Looking table[829cec00] for dst=[fb:9d:26]
<0>[   83.210000] =MHX6.1.0 mpath=node->mpath=82a57200, mpath->sdata=82838420, sdata=82838420
<0>[   83.210000] =MHX6.1.1 found!!!
<0>[   83.210000] ==MHX4.2.2(hwmp_route_info_get) mpath to orig_addr exists : flags=0x00000007, sn=3, m
etric=12150,hop=1,mpath->exp_time=4294945676.
<0>[   83.210000] ==MHX4.2.4(hwmp_route_info_get) first fresh_info=1,process=1.
<0>[   83.210000] ==MHX4.2.5(hwmp_route_info_get) Updating orig_addr's mpath next_hop and other info an
d TX pending mpath Q.
<0>[   83.210000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[fb:9d:26], next_hop=[fb:9d:26],flag
=0x00000017,orig_sn=4, metric=9735,exp_time=4294945777, hop=1
<0>[   83.210000] ==MHX4.5(hwmp_route_info_get) mpath to SA=[fb:9d:26], next_hop=[fb:9d:26],flag=0x0000
0017,sn=4, metric=9735,exp_time=4294945777.hop=1,process=1
<7>[   83.210000] wlan0: received PREQ from 00:0f:92:fb:9d:26
<7>[   83.210000] wlan0: PREQ is for us
<7>[   83.210000] wlan0: replying to the PREQ
<7>[   83.210000] wlan0: sending PREP to 00:0f:92:fb:9d:26
<0>[   83.210000] ==MHX9.1(mesh_path_sel_frame_tx)TX action=1, flags=0x00,orig_addr[fb:9d:26].orig_sn=4
,target[fa:a6:c6],target_sn=4,da[fb:9d:26],hop_count=0,ttl=31,lifetime=1562,metric=0,preq_id=0
<0>[   83.210000] ==MHX10.0(ieee80211_xmit)is_data=0, is_unicast=1
<0>[   83.210000] ==MHX4.0(hwmp_route_info_get)
<0>[   83.210000] ==MHX1.2(airtime_link_metric_get) tx_time=537298, err=74, estimated_retx=360,sta->bit
rate_avg=3905,sta->fail_avg=29. signal=27. result(metric)=9735
<0>[   83.210000] ==MHX4.1(hwmp_route_info_get) action=1, from STA=[fb:9d:26], whose last_hop_metric=97
35
<0>[   83.210000] ==MHX4.2.1(hwmp_route_info_get) orig_addr=[fb:9d:26], IE dump : orig_sn=4, orig_lifet
ime=1562, orig_metric=0,orig_hop=0.And new_metric=9735.
<0>[   83.210000] ===MHX6.1(mpath_lookup) Looking table[829cec00] for dst=[fb:9d:26]
<0>[   83.210000] =MHX6.1.0 mpath=node->mpath=82a57200, mpath->sdata=82838420, sdata=82838420
<0>[   83.210000] =MHX6.1.1 found!!!
<0>[   83.210000] ==MHX4.2.2(hwmp_route_info_get) mpath to orig_addr exists : flags=0x00000017, sn=4, m
etric=9735,hop=1,mpath->exp_time=4294945777.
<0>[   83.210000] ==MHX4.2.4(hwmp_route_info_get) first fresh_info=1,process=1.
<0>[   83.210000] ==MHX4.2.5(hwmp_route_info_get) Updating orig_addr's mpath next_hop and other info an
d TX pending mpath Q.
<0>[   83.210000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[fb:9d:26], next_hop=[fb:9d:26],flag
=0x00000017,orig_sn=4, metric=9735,exp_time=4294945777, hop=1
<0>[   83.210000] ==MHX4.5(hwmp_route_info_get) mpath to SA=[fb:9d:26], next_hop=[fb:9d:26],flag=0x0000
0017,sn=4, metric=9735,exp_time=4294945777.hop=1,process=1
<7>[   83.210000] wlan0: received PREP from 00:0f:92:fb:9d:26
<0>[   83.210000] ==MHX1.0(ieee80211_mesh_work)
<0>[   83.210000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   83.210000] ==MHX1.0(ieee80211_mesh_work)
<0>[   83.210000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   84.950000] ==MHX1.0(ieee80211_mesh_work)
<0>[   84.950000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000000, preq_q_len=0
<0>[   85.050000] ==MHX1.0(ieee80211_mesh_work)
<0>[   85.050000] ==MHX1.1(ieee80211_mesh_work) wrkq_flags=0x00000001, preq_q_len=0



Jul 15, 2020
Roming : wpa_supplicant_need_to_roam() function.

Jul 8, 2020
In function mesh_nexthop_resolve(), after switching AP-STA mode to MESH mode, the old entry is still valid.
	err = mesh_nexthop_lookup(sdata, skb);
	if(MESH_DBG) {
		printk("==MHX3.1(%s) err=%d\n", __func__, err);	// ==MHX3.1(mesh_nexthop_resolve) err=0
	}
Should be cleared after exiting Mesh mode???

Jun 30, 2020
Prove IEEE80211_HW_AMPDU_AGGREGATION to disable aggr idea.
pDDL test, UDP AP--->STA,Non-encryption, iperf default UDP packet size 1470Bytes, PC-PC. Measure AP TX led signal.

BW	TX Rate(fixed)	EMI	Frag	ampdu_factor	Average A-MPDU length(AP)	T/P	TX Led Width
1M	QPSK 1/2	Normal	n/a		3		3.9			744K		56mS
1M	QPSK 1/2	High	500		0		1			486K		5.12mS

1M	16QAM 3/4	Normal	n/a		3		11.9			1.31M		56mS
1M	16QAM 3/4	High	500		0		1			860K		2.08mS

8M	16QAM 3/4	Normal	n/a		3		11.9			15.3M		7.04mS
8M	16QAM 3/4	High	500		0		1			5.16M		256uS

8M	QPSK 1/2	Normal	n/a		3		3.9			5.24M		7.04mS
8M	QPSK 1/2	High	500		0		1			3.53M		640uS

4M	16QAM 1/2	Normal	n/a		3		7.9			5.4M		14mS
4M	16QAM 1/2	High	500		0		1			2.11M		704uS


2M	64-QAM 5/6	Normal	n/a		3		20.3			5.72M		29.4mS
2M	64-QAM 5/6	High	500		0		1			1.98M		744uS
2M	64-QAM 5/6	High	1000		0		1			3.14M		1.18mS


Jun 29, 2020
IEEE80211_HW_AMPDU_AGGREGATION : if this flag is unset, the whole mechanism still goes through the HT and works like a 11n radio. But, the aggregation is always 1, and the uci.frag looks effective.

This hw capability bit can be seen at:
root@UserDevice:~# cat sys/kernel/debug/ieee80211/phy0/hwflags 
0x9042b46
RX_INCLUDES_FCS
HOST_BCAST_PS_BUFFERING
SIGNAL_DBM
SPECTRUM_MGMT
AMPDU_AGGREGATION	// IEEE80211_HW_AMPDU_AGGREGATION flag is set.
PS_NULLFUNC_STACK
MFP_CAPABLE
REPORTS_TX_ACK_STATUS


Jun 22, 2020
	/*
	 * limit aggregate size by the minimum rate if rate selected is
	 * not a probe rate, if rate selected is a probe rate then
	 * avoid aggregation of this packet.
	 */
	if (tx_info->flags & IEEE80211_TX_CTL_RATE_CTRL_PROBE || legacy)
		return 0;

===========================
CSR是英文Certificate Signing Request的缩写，即证书签名请求。CSR文件是申请SSL证书时所需要的一个数据文件。非对称加密之所以安全，前提条件是用户必须要保障私钥的安全。因此在用户向CA申请数字证书时，用户首先需要在自己的电脑中先产生一个公私钥对。用户需要保管好自己的私钥，然后再把公钥和你的个人信息发送给CA机构，CA机构通过你的公钥和个人信息最终签发出数字证书。而CSR文件，其实就是包含了用户公钥和个人信息的一个数据文件。用户产生出这个CSR文件，再把这个CSR文件发送给CA，CA就会根据CSR中的内容来签发出数字证书。


Jun 18, 2020
Use openwrt RAMFS on a G5 board. Use OpenWRT-19.07 stable branch.
1. Make menuconfig : 
Target System (MediaTek Ralink MIPS) 
Subtarget (MT7621 based boards)  
///////////// Target Profile (Default Profile) 
Target Profile (Mediatek AP-MT7621A-V60 EVB)
Target Images, select ramdisk

2. make kernel_menuconfig ---> Kernel hacking. Check "Built-in command line overrides firmware arguments". And set "Built-in kernel command line" to:
/dev/ram0 rootfstype=ramfs rdinit/linuxrc console=ttyS0,115200,n,8,1

3. Make the images. This will generate a lot of initramfs files. For the G5 board use:
cp bin/targets/ramips/mt7621/openwrt-ramips-mt7621-mediatek_ap-mt7621a-v60-initramfs-kernel.bin /var/lib/tftpboot/g5-initramfs.bin. This file size is 3805945.

4. Enter u-boot of G5 board.
MT7621 # tftpb  80f00000 g5-initramfs.bin
MT7621 # bootm  80f00000
## Checking image at 80f00000 ...
   Image Name:   MIPS OpenWrt Linux-5.4.46
   Created:      2020-06-17  21:57:07 UTC
   Image Type:   MIPS Linux Kernel Image (lzma compressed)
   Data Size:    3805881 Bytes =  3.6 MB
   Load Address: 80001000
   Entry Point:  80001000
   Verifying Checksum at 0x80f00040 ...OK
   Uncompressing Kernel Image ... OK
   Kernel boots under SoC watchdog. Timeout 30 seconds.
No initrd
## Transferring control to Linux (at address 80001000) ...
## Giving linux memsize in MB, 512

Starting kernel ...

[    0.000000] Linux version 5.4.46 (jli@DENG-JEFFL) (gcc version 8.4.0 (OpenWrt GCC 8.4.0 r13592-b933f9cf0c)) #0 SMP Wed Jun 10
[    0.000000] SoC Type: MediaTek MT7621 ver:1 eco:3
[    0.000000] printk: bootconsole [early0] enabled
[    0.000000] CPU0 revision is: 0001992f (MIPS 1004Kc)
[    0.000000] MIPS: machine is Mediatek AP-MT7621A-V60 EVB
[    0.000000] Initrd not found or empty - disabling initrd
[    0.000000] VPE topology {2,2} total 4
[    0.000000] Primary instruction cache 32kB, VIPT, 4-way, linesize 32 bytes.
[    0.000000] Primary data cache 32kB, 4-way, PIPT, no aliases, linesize 32 bytes
[    0.000000] MIPS secondary cache 256kB, 8-way, linesize 32 bytes.
[    0.000000] Zone ranges:
[    0.000000]   Normal   [mem 0x0000000000000000-0x000000000fffffff]
[    0.000000]   HighMem  [mem 0x0000000010000000-0x0000000023ffffff]
[    0.000000] Movable zone start for each node
[    0.000000] Early memory node ranges
[    0.000000]   node   0: [mem 0x0000000000000000-0x000000001bffffff]
[    0.000000]   node   0: [mem 0x0000000020000000-0x0000000023ffffff]
[    0.000000] Initmem setup node 0 [mem 0x0000000000000000-0x0000000023ffffff]
[    0.000000] percpu: Embedded 14 pages/cpu s26672 r8192 d22480 u57344
[    0.000000] Built 1 zonelists, mobility grouping on.  Total pages: 130496
[    0.000000] Kernel command line: root=/dev/ram0 rootfstype=ramfs rdinit/linuxrc console=ttyS0,115200,n,8,1
[    0.000000] Dentry cache hash table entries: 32768 (order: 5, 131072 bytes, linear)
[    0.000000] Inode-cache hash table entries: 16384 (order: 4, 65536 bytes, linear)
[    0.000000] Writing ErrCtl register=00014086
[    0.000000] Readback ErrCtl register=00014086
[    0.000000] mem auto-init: stack:off, heap alloc:off, heap free:off
[    0.000000] Memory: 508720K/524288K available (5563K kernel code, 197K rwdata, 1216K rodata, 2676K init, 230K bss, 15568K re)
[    0.000000] SLUB: HWalign=32, Order=0-3, MinObjects=0, CPUs=4, Nodes=1
[    0.000000] rcu: Hierarchical RCU implementation.
[    0.000000] rcu: RCU calculated value of scheduler-enlistment delay is 25 jiffies.
[    0.000000] NR_IRQS: 256
[    0.000000] random: get_random_bytes called from start_kernel+0x340/0x550 with crng_init=0
[    0.000000] CPU Clock: 880MHz
[    0.000000] clocksource: GIC: mask: 0xffffffffffffffff max_cycles: 0xcaf478abb4, max_idle_ns: 440795247997 ns
[    0.000000] clocksource: MIPS: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 4343773742 ns
[    0.000011] sched_clock: 32 bits at 440MHz, resolution 2ns, wraps every 4880645118ns
[    0.007833] Calibrating delay loop... 583.68 BogoMIPS (lpj=1167360)
[    0.042032] pid_max: default: 32768 minimum: 301
[    0.046830] Mount-cache hash table entries: 1024 (order: 0, 4096 bytes, linear)
[    0.054060] Mountpoint-cache hash table entries: 1024 (order: 0, 4096 bytes, linear)
[    0.065146] rcu: Hierarchical SRCU implementation.
[    0.070766] smp: Bringing up secondary CPUs ...
[    0.077448] Primary instruction cache 32kB, VIPT, 4-way, linesize 32 bytes.
[    0.077460] Primary data cache 32kB, 4-way, PIPT, no aliases, linesize 32 bytes
[    0.077475] MIPS secondary cache 256kB, 8-way, linesize 32 bytes.
[    0.077605] CPU1 revision is: 0001992f (MIPS 1004Kc)
[    0.103601] Synchronize counters for CPU 1: done.
[    0.145597] Primary instruction cache 32kB, VIPT, 4-way, linesize 32 bytes.
[    0.145606] Primary data cache 32kB, 4-way, PIPT, no aliases, linesize 32 bytes
[    0.145618] MIPS secondary cache 256kB, 8-way, linesize 32 bytes.
[    0.145678] CPU2 revision is: 0001992f (MIPS 1004Kc)
[    0.172606] Synchronize counters for CPU 2: done.
[    0.204478] Primary instruction cache 32kB, VIPT, 4-way, linesize 32 bytes.
[    0.204488] Primary data cache 32kB, 4-way, PIPT, no aliases, linesize 32 bytes
[    0.204498] MIPS secondary cache 256kB, 8-way, linesize 32 bytes.
[    0.204562] CPU3 revision is: 0001992f (MIPS 1004Kc)
[    0.230479] Synchronize counters for CPU 3: done.
[    0.260370] smp: Brought up 1 node, 4 CPUs
[    0.269381] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 7645041785100000 ns
[    0.279145] futex hash table entries: 1024 (order: 3, 32768 bytes, linear)
[    0.286383] pinctrl core: initialized pinctrl subsystem
[    0.293622] NET: Registered protocol family 16
[    0.332747] random: fast init done
[    0.342123] clocksource: Switched to clocksource GIC
[    0.349796] NET: Registered protocol family 2
[    0.354927] tcp_listen_portaddr_hash hash table entries: 512 (order: 0, 6144 bytes, linear)
[    0.363235] TCP established hash table entries: 2048 (order: 1, 8192 bytes, linear)
[    0.370834] TCP bind hash table entries: 2048 (order: 2, 16384 bytes, linear)
[    0.377934] TCP: Hash tables configured (established 2048 bind 2048)
[    0.384388] UDP hash table entries: 256 (order: 1, 8192 bytes, linear)
[    0.390895] UDP-Lite hash table entries: 256 (order: 1, 8192 bytes, linear)
[    0.398197] NET: Registered protocol family 1
[    0.402520] PCI: CLS 0 bytes, default 32
[    2.278084] 4 CPUs re-calibrate udelay(lpj = 1167360)
[    2.285355] workingset: timestamp_bits=14 max_order=17 bucket_order=3
[    2.305981] squashfs: version 4.0 (2009/01/31) Phillip Lougher
[    2.311771] jffs2: version 2.2 (NAND) (SUMMARY) (LZMA) (RTIME) (CMODE_PRIORITY) (c) 2001-2006 Red Hat, Inc.
[    2.323662] bounce: pool size: 64 pages
[    2.328800] mt7621_gpio 1e000600.gpio: registering 32 gpios
[    2.334757] mt7621_gpio 1e000600.gpio: registering 32 gpios
[    2.340659] mt7621_gpio 1e000600.gpio: registering 32 gpios
[    2.347389] Serial: 8250/16550 driver, 3 ports, IRQ sharing disabled
[    2.355583] printk: console [ttyS0] disabled
[    2.359904] 1e000c00.uartlite: ttyS0 at MMIO 0x1e000c00 (irq = 20, base_baud = 3125000) is a 16550A
[    2.368898] printk: console [ttyS0] enabled
[    2.368898] printk: console [ttyS0] enabled
[    2.377153] printk: bootconsole [early0] disabled
[    2.377153] printk: bootconsole [early0] disabled
[    2.389877] spi-mt7621 1e000b00.spi: sys_freq: 220000000
[    2.396403] spi-nor spi0.0: found s25fl512s, expected mx25l6405d
[    2.402961] spi-nor spi0.0: s25fl512s (65536 Kbytes)
[    2.408019] 4 fixed-partitions partitions found on MTD device spi0.0
[    2.414369] Creating 4 MTD partitions on "spi0.0":
[    2.419169] 0x000000000000-0x000000030000 : "u-boot"
[    2.425713] 0x000000030000-0x000000040000 : "u-boot-env"
[    2.432530] 0x000000040000-0x000000050000 : "factory"
[    2.439177] 0x000000050000-0x000000800000 : "firmware"
[    2.451137] libphy: Fixed MDIO Bus: probed
[    2.480563] libphy: mdio: probed
[    2.484082] mt7530 mdio-bus:1f: MT7530 adapts as multi-chip module
[    2.490598] mtk_soc_eth 1e100000.ethernet: generated random MAC address 96:54:f0:8d:e2:be
[    2.499749] mtk_soc_eth 1e100000.ethernet eth0: mediatek frame engine at 0xbe100000, irq 24
[    2.509675] i2c-mt7621 1e000900.i2c: clock 100 kHz
[    2.516323] mt7621-pci 1e140000.pcie: Parsing DT failed
[    2.524899] NET: Registered protocol family 10
[    2.531450] Segment Routing with IPv6
[    2.535260] NET: Registered protocol family 17
[    2.540065] 8021q: 802.1Q VLAN Support v1.8
[    2.546813] mt7530 mdio-bus:1f: MT7530 adapts as multi-chip module
[    2.637965] libphy: dsa slave smi: probed
[    2.642548] mt7530 mdio-bus:1f lan1 (uninitialized): PHY [dsa-0.0:00] driver [Generic PHY]
[    2.652525] mt7530 mdio-bus:1f lan2 (uninitialized): PHY [dsa-0.0:01] driver [Generic PHY]
[    2.662646] mt7530 mdio-bus:1f lan3 (uninitialized): PHY [dsa-0.0:02] driver [Generic PHY]
[    2.672597] mt7530 mdio-bus:1f lan4 (uninitialized): PHY [dsa-0.0:03] driver [Generic PHY]
[    2.682802] mt7530 mdio-bus:1f wan (uninitialized): PHY [dsa-0.0:04] driver [Generic PHY]
[    2.692712] mt7530 mdio-bus:1f: configuring for fixed/rgmii link mode
[    2.703876] DSA: tree 0 setup
[    2.707246] rt2880-pinmux pinctrl: pcie is already enabled
[    2.712733] mt7621-pci 1e140000.pcie: Error applying setting, reverse things back
[    2.720388] mt7621-pci-phy 1e149000.pcie-phy: PHY for 0xbe149000 (dual port = 1)
[    2.727979] mt7621-pci-phy 1e14a000.pcie-phy: PHY for 0xbe14a000 (dual port = 0)
[    2.835394] mt7621-pci-phy 1e149000.pcie-phy: Xtal is 40MHz
[    2.840973] mt7621-pci-phy 1e14a000.pcie-phy: Xtal is 40MHz
[    2.946488] mt7621-pci 1e140000.pcie: pcie0 no card, disable it (RST & CLK)
[    2.953436] mt7621-pci 1e140000.pcie: PCIE1 enabled
[    2.958306] mt7621-pci 1e140000.pcie: PCIE2 enabled
[    2.963181] mt7621-pci 1e140000.pcie: PCI coherence region base: 0x60000000, mask/settings: 0xf0000002
[    2.972664] mt7621-pci 1e140000.pcie: PCI host bridge to bus 0000:00
[    2.979024] pci_bus 0000:00: root bus resource [io  0x1e160000-0x1e16ffff]
[    2.985883] pci_bus 0000:00: root bus resource [mem 0x60000000-0x6fffffff]
[    2.992747] pci_bus 0000:00: root bus resource [bus 00-ff]
[    2.998274] pci 0000:00:00.0: [0e8d:0801] type 01 class 0x060400
[    3.004307] pci 0000:00:00.0: reg 0x10: [mem 0x00000000-0x7fffffff]
[    3.010568] pci 0000:00:00.0: reg 0x14: [mem 0x00000000-0x0000ffff]
[    3.016902] pci 0000:00:00.0: supports D1
[    3.020914] pci 0000:00:00.0: PME# supported from D0 D1 D3hot
[    3.027072] pci 0000:00:01.0: [0e8d:0801] type 01 class 0x060400
[    3.033112] pci 0000:00:01.0: reg 0x10: [mem 0x00000000-0x7fffffff]
[    3.039374] pci 0000:00:01.0: reg 0x14: [mem 0x00000000-0x0000ffff]
[    3.045689] pci 0000:00:01.0: supports D1
[    3.049693] pci 0000:00:01.0: PME# supported from D0 D1 D3hot
[    3.056646] pci 0000:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    3.064653] pci 0000:00:01.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    3.072864] pci 0000:01:00.0: [168c:003c] type 00 class 0x028000
[    3.078920] pci 0000:01:00.0: reg 0x10: [mem 0x00000000-0x001fffff 64bit]
[    3.085726] pci 0000:01:00.0: reg 0x30: [mem 0x00000000-0x0000ffff pref]
[    3.092518] pci 0000:01:00.0: supports D1 D2
[    3.098012] pci 0000:00:00.0: PCI bridge to [bus 01-ff]
[    3.103252] pci 0000:00:00.0:   bridge window [io  0x0000-0x0fff]
[    3.109334] pci 0000:00:00.0:   bridge window [mem 0x00000000-0x000fffff]
[    3.116111] pci 0000:00:00.0:   bridge window [mem 0x00000000-0x000fffff pref]
[    3.123325] pci_bus 0000:01: busn_res: [bus 01-ff] end is updated to 01
[    3.130197] pci 0000:02:00.0: [168c:003c] type 00 class 0x028000
[    3.136246] pci 0000:02:00.0: reg 0x10: [mem 0x00000000-0x001fffff 64bit]
[    3.143057] pci 0000:02:00.0: reg 0x30: [mem 0x00000000-0x0000ffff pref]
[    3.149850] pci 0000:02:00.0: supports D1 D2
[    3.155328] pci 0000:00:01.0: PCI bridge to [bus 02-ff]
[    3.160562] pci 0000:00:01.0:   bridge window [io  0x0000-0x0fff]
[    3.166649] pci 0000:00:01.0:   bridge window [mem 0x00000000-0x000fffff]
[    3.173422] pci 0000:00:01.0:   bridge window [mem 0x00000000-0x000fffff pref]
[    3.180634] pci_bus 0000:02: busn_res: [bus 02-ff] end is updated to 02
[    3.187294] pci 0000:00:00.0: BAR 0: no space for [mem size 0x80000000]
[    3.193892] pci 0000:00:00.0: BAR 0: failed to assign [mem size 0x80000000]
[    3.200843] pci 0000:00:01.0: BAR 0: no space for [mem size 0x80000000]
[    3.207444] pci 0000:00:01.0: BAR 0: failed to assign [mem size 0x80000000]
[    3.214396] pci 0000:00:00.0: BAR 8: assigned [mem 0x60000000-0x601fffff]
[    3.221169] pci 0000:00:01.0: BAR 8: assigned [mem 0x60200000-0x603fffff]
[    3.227948] pci 0000:00:00.0: BAR 9: assigned [mem 0x60400000-0x604fffff pref]
[    3.235159] pci 0000:00:01.0: BAR 9: assigned [mem 0x60500000-0x605fffff pref]
[    3.242370] pci 0000:00:00.0: BAR 1: assigned [mem 0x60600000-0x6060ffff]
[    3.249151] pci 0000:00:01.0: BAR 1: assigned [mem 0x60610000-0x6061ffff]
[    3.255931] pci 0000:00:00.0: BAR 7: assigned [io  0x1e160000-0x1e160fff]
[    3.262709] pci 0000:00:01.0: BAR 7: assigned [io  0x1e161000-0x1e161fff]
[    3.269491] pci 0000:01:00.0: BAR 0: assigned [mem 0x60000000-0x601fffff 64bit]
[    3.276807] pci 0000:01:00.0: BAR 6: assigned [mem 0x60400000-0x6040ffff pref]
[    3.284016] pci 0000:00:00.0: PCI bridge to [bus 01]
[    3.288974] pci 0000:00:00.0:   bridge window [io  0x1e160000-0x1e160fff]
[    3.295750] pci 0000:00:00.0:   bridge window [mem 0x60000000-0x601fffff]
[    3.302526] pci 0000:00:00.0:   bridge window [mem 0x60400000-0x604fffff pref]
[    3.309738] pci 0000:02:00.0: BAR 0: assigned [mem 0x60200000-0x603fffff 64bit]
[    3.317043] pci 0000:02:00.0: BAR 6: assigned [mem 0x60500000-0x6050ffff pref]
[    3.324250] pci 0000:00:01.0: PCI bridge to [bus 02]
[    3.329206] pci 0000:00:01.0:   bridge window [io  0x1e161000-0x1e161fff]
[    3.335983] pci 0000:00:01.0:   bridge window [mem 0x60200000-0x603fffff]
[    3.342758] pci 0000:00:01.0:   bridge window [mem 0x60500000-0x605fffff pref]
[    3.350604] mt7530 mdio-bus:1f: Link is Up - 1Gbps/Full - flow control off
[    3.351092] hctosys: unable to open rtc device (rtc0)
[    3.377613] Freeing unused kernel memory: 2676K
[    3.382186] This architecture does not have kernel memory protection.
[    3.388606] Run /init as init process
[    3.433967] init: Console is alive
[    3.437755] init: - watchdog -
[    3.453019] kmodloader: loading kernel modules from /etc/modules-boot.d////*
[    3.471978] usbcore: registered new interface driver usbfs
[    3.477676] usbcore: registered new interface driver hub
[    3.483220] usbcore: registered new device driver usb
[    3.499730] xhci-mtk 1e1c0000.xhci: 1e1c0000.xhci supply vbus not found, using dummy regulator
[    3.508503] xhci-mtk 1e1c0000.xhci: 1e1c0000.xhci supply vusb33 not found, using dummy regulator
[    3.517541] xhci-mtk 1e1c0000.xhci: xHCI Host Controller
[    3.522896] xhci-mtk 1e1c0000.xhci: new USB bus registered, assigned bus number 1
[    3.538374] xhci-mtk 1e1c0000.xhci: hcc params 0x01401198 hci version 0x96 quirks 0x0000000000210010
[    3.547611] xhci-mtk 1e1c0000.xhci: irq 23, io mem 0x1e1c0000
[    3.554918] hub 1-0:1.0: USB hub found
[    3.558829] hub 1-0:1.0: 2 ports detected
[    3.563647] xhci-mtk 1e1c0000.xhci: xHCI Host Controller
[    3.569052] xhci-mtk 1e1c0000.xhci: new USB bus registered, assigned bus number 2
[    3.576555] xhci-mtk 1e1c0000.xhci: Host supports USB 3.0 SuperSpeed
[    3.583142] usb usb2: We don't know the algorithms for LPM for this host, disabling LPM.
[    3.592320] hub 2-0:1.0: USB hub found
[    3.596228] hub 2-0:1.0: 1 port detected
[    3.606034] kmodloader: done loading kernel modules from /etc/modules-boot.d////*
[    3.622514] init: - preinit -
[    3.752332] mtk_soc_eth 1e100000.ethernet eth0: configuring for fixed/rgmii link mode
[    3.760882] mtk_soc_eth 1e100000.ethernet eth0: Link is Up - 1Gbps/Full - flow control rx/tx
[    3.769377] IPv6: ADDRCONF(NETDEV_CHANGE): eth0: link becomes ready
[    3.847670] random: jshn: uninitialized urandom read (4 bytes read)
[    3.911694] random: jshn: uninitialized urandom read (4 bytes read)
[    3.950228] random: jshn: uninitialized urandom read (4 bytes read)
[    4.100450] mt7530 mdio-bus:1f lan1: configuring for phy/gmii link mode
[    4.107592] 8021q: adding VLAN 0 to HW filter on device lan1
Press the [f] key and hit [enter] to enter failsafe mode
Press the [1], [2], [3] or [4] key and hit [enter] to select the debug level
[    8.202613] mt7530 mdio-bus:1f lan1: Link is Up - 1Gbps/Full - flow control rx/tx
[    8.210173] IPv6: ADDRCONF(NETDEV_CHANGE): lan1: link becomes ready
[    8.267819] mt7530 mdio-bus:1f lan1: Link is Down
[    8.283228] procd: - early -
[    8.286314] procd: - watchdog -
[    8.830293] procd: - watchdog -
[    8.833787] procd: - ubus -
[    8.842897] urandom_read: 4 callbacks suppressed
[    8.842911] random: ubusd: uninitialized urandom read (4 bytes read)
[    8.890763] random: ubusd: uninitialized urandom read (4 bytes read)
[    8.897601] random: ubusd: uninitialized urandom read (4 bytes read)
[    8.905030] procd: - init -
Please press Enter to activate this console.
[    9.203666] kmodloader: loading kernel modules from /etc/modules.d/////*
[    9.242934] xt_time: kernel timezone is -0000
[    9.264798] PPP generic driver version 2.4.2
[    9.271000] NET: Registered protocol family 24
[    9.287178] kmodloader: done loading kernel modules from /etc/modules.d//////*
[    9.356592] urngd: v1.0.2 started.
[    9.492521] random: crng init done
[   31.373613] mtk_soc_eth 1e100000.ethernet eth0: Link is Down
[   31.391516] mtk_soc_eth 1e100000.ethernet eth0: configuring for fixed/rgmii link mode
[   31.400355] mtk_soc_eth 1e100000.ethernet eth0: Link is Up - 1Gbps/Full - flow control rx/tx
[   31.409785] IPv6: ADDRCONF(NETDEV_CHANGE): eth0: link becomes ready
[   31.418214] mt7530 mdio-bus:1f lan1: configuring for phy/gmii link mode
[   31.425895] 8021q: adding VLAN 0 to HW filter on device lan1
[   31.436833] br-lan: port 1(lan1) entered blocking state
[   31.442310] br-lan: port 1(lan1) entered disabled state
[   31.448910] device lan1 entered promiscuous mode
[   31.453688] device eth0 entered promiscuous mode
[   31.488063] mt7530 mdio-bus:1f lan2: configuring for phy/gmii link mode
[   31.495500] 8021q: adding VLAN 0 to HW filter on device lan2
[   31.507286] br-lan: port 2(lan2) entered blocking state
[   31.512624] br-lan: port 2(lan2) entered disabled state
[   31.520322] device lan2 entered promiscuous mode
[   31.537923] mt7530 mdio-bus:1f lan3: configuring for phy/gmii link mode
[   31.545884] 8021q: adding VLAN 0 to HW filter on device lan3
[   31.555621] br-lan: port 3(lan3) entered blocking state
[   31.561029] br-lan: port 3(lan3) entered disabled state
[   31.568440] device lan3 entered promiscuous mode
[   31.584656] mt7530 mdio-bus:1f lan4: configuring for phy/gmii link mode
[   31.592280] 8021q: adding VLAN 0 to HW filter on device lan4
[   31.602560] br-lan: port 4(lan4) entered blocking state
[   31.608000] br-lan: port 4(lan4) entered disabled state
[   31.615040] device lan4 entered promiscuous mode
[   31.639241] mt7530 mdio-bus:1f wan: configuring for phy/gmii link mode
[   31.647282] 8021q: adding VLAN 0 to HW filter on device wan
[   34.506640] mt7530 mdio-bus:1f lan1: Link is Up - 1Gbps/Full - flow control rx/tx
[   34.514213] br-lan: port 1(lan1) entered blocking state
[   34.519480] br-lan: port 1(lan1) entered forwarding state
[   34.525838] IPv6: ADDRCONF(NETDEV_CHANGE): br-lan: link becomes ready



BusyBox v1.31.1 () built-in shell (ash)

  _______                     ________        __
 |       |.-----.-----.-----.|  |  |  |.----.|  |_
 |   -   ||  _  |  -__|     ||  |  |  ||   _||   _|
 |_______||   __|_____|__|__||________||__|  |____|
          |__| W I R E L E S S   F R E E D O M
 -----------------------------------------------------
 OpenWrt SNAPSHOT, r13592-b933f9cf0c
 -----------------------------------------------------
=== WARNING! =====================================
There is no root password defined on this device!
Use the "passwd" command to set up a new password
in order to prevent unauthorized SSH logins.
--------------------------------------------------

root@OpenWrt:/# cat proc/cmdline 
root=/dev/ram0 rootfstype=ramfs rdinit/linuxrc console=ttyS0,115200,n,8,1
root@OpenWrt:/# uname -a
Linux OpenWrt 5.4.46 #0 SMP Wed Jun 17 21:57:07 2020 mips GNU/Linux


5. The default package doesn't include LuCI webGUI. So install it:
jli@DENG-JEFFL:~/project/openwrt/openwrt-19.07$ cat feeds.conf.default 
src-git packages https://git.openwrt.org/feed/packages.git
src-git luci https://git.openwrt.org/project/luci.git
src-git routing https://git.openwrt.org/feed/routing.git
src-git telephony https://git.openwrt.org/feed/telephony.git
#src-git video https://github.com/openwrt/video.git
#src-git targets https://github.com/openwrt/targets.git
#src-git management https://github.com/openwrt-management/packages.git
#src-git oldpackages http://git.openwrt.org/packages.git
#src-link custom /usr/src/openwrt/custom-feed
jli@DENG-JEFFL:~/project/openwrt/openwrt-19.07$./scripts/feeds update luci

This will download LuCI package to ./feeds dir.

6. Install package LuCI
jli@DENG-JEFFL:~/project/openwrt/openwrt-19.07$ ./scripts/feeds install -a -p luci
This will install Luci to package/feeds/luci/ dir. This step will show lots of dependency warnings. Should use ./scripts/feeds update -a and then ./scripts/feeds/install -a to install ALL necessary packages.

7. make menuconfig : will see  LuCI package.

Jun 15, 2020
Where are the SQL databases stored physically?
jli@jli-OptiPlex-7060:~$ sudo ls /var/lib/mysql/wordpress -al
total 11192
drwxr-x---  2 mysql mysql    4096 Jun 15 10:10 .
drwx------ 13 mysql mysql    4096 Jun 15 09:25 ..
-rw-r-----  1 mysql mysql      65 Jan  6 17:25 db.opt
-rw-r-----  1 mysql mysql    8688 Jan  7 10:33 wp_commentmeta.frm
-rw-r-----  1 mysql mysql  131072 Jan  7 10:33 wp_commentmeta.ibd
-rw-r-----  1 mysql mysql   13380 Jan  7 10:33 wp_comments.frm
-rw-r-----  1 mysql mysql  180224 Jan  7 11:04 wp_comments.ibd
-rw-r-----  1 mysql mysql   13176 Jan  7 10:33 wp_links.frm
-rw-r-----  1 mysql mysql  114688 Jan  7 10:33 wp_links.ibd
-rw-r-----  1 mysql mysql    8698 Jan  7 10:33 wp_options.frm
-rw-r-----  1 mysql mysql 9437184 Jun 15 09:53 wp_options.ibd
-rw-r-----  1 mysql mysql   17272 Jan 14 18:41 wp_page_visit_history.frm
-rw-r-----  1 mysql mysql   98304 Jun 15 09:53 wp_page_visit_history.ibd
-rw-r-----  1 mysql mysql    8734 Jan 14 18:41 wp_page_visit_referer.frm
-rw-r-----  1 mysql mysql   98304 Jan 14 18:41 wp_page_visit_referer.ibd
-rw-r-----  1 mysql mysql    8802 Jan 14 18:41 wp_page_visit_wizard.frm
-rw-r-----  1 mysql mysql   98304 Jan 14 18:41 wp_page_visit_wizard.ibd
-rw-r-----  1 mysql mysql    8682 Jan  7 10:33 wp_postmeta.frm
-rw-r-----  1 mysql mysql  131072 Jun 15 09:53 wp_postmeta.ibd
-rw-r-----  1 mysql mysql   13684 Jan  7 10:33 wp_posts.frm
-rw-r-----  1 mysql mysql  163840 Jun 15 09:48 wp_posts.ibd
-rw-r-----  1 mysql mysql    8682 Jan  7 10:33 wp_termmeta.frm
-rw-r-----  1 mysql mysql  131072 Jan  7 10:33 wp_termmeta.ibd
-rw-r-----  1 mysql mysql    8666 Jan  7 10:33 wp_term_relationships.frm
-rw-r-----  1 mysql mysql  114688 Jan  7 11:03 wp_term_relationships.ibd
-rw-r-----  1 mysql mysql    8668 Jan  7 10:33 wp_terms.frm
-rw-r-----  1 mysql mysql  131072 Jan  7 11:16 wp_terms.ibd
-rw-r-----  1 mysql mysql    8768 Jan  7 10:33 wp_term_taxonomy.frm
-rw-r-----  1 mysql mysql  131072 Jan  7 11:16 wp_term_taxonomy.ibd
-rw-r-----  1 mysql mysql    8684 Jan  7 10:33 wp_usermeta.frm
-rw-r-----  1 mysql mysql  131072 Jun 15 09:48 wp_usermeta.ibd
-rw-r-----  1 mysql mysql   13064 Jan  7 10:33 wp_users.frm
-rw-r-----  1 mysql mysql  131072 Jun 15 09:40 wp_users.ibd


Jun 11, 2020
When using monitor interface to capture 802.11 frames, it usually miss some packets, especially some control/management packets. For example, AP ping STA : ping 192.168.168.33 -s 1400

On the AP side: You can see ACK(STA->AP),ICMP_Req(AP->STA), RTS(STA->AP), ICMP_Rep(STA->AP). This is actually VERY confusing.

"
18:35:10.215225 2061041772us tsft 3.0 Mb/s 2391 MHz 11g/10Mhz -82dB signal [bit 29] 0us RA:00:0f:92:fa:4f:d5 Acknowledgment

18:35:10.215355 12.0 Mb/s [bit 15] 116us CF +QoS DA:00:0f:92:13:23:75 BSSID:00:0f:92:fa:4f:d5 SA:00:0f:92:00:00:64 LLC, dsap SNAP (0xaa) Individual, ssap SNAP (0xaa) Command, ctrl 0x03: oui Ethernet (0x000000), ethertype IPv4 (0x0800): (tos 0x0, ttl 64, id 21976, offset 0, flags [DF], proto ICMP (1), length 1428)
    192.168.168.31 > 192.168.168.33: ICMP echo request, id 5109, seq 7, length 1408

18:35:10.216401 2061042696us tsft 3.0 Mb/s 2391 MHz 11g/10Mhz -83dB signal [bit 29] 2292us RA:00:0f:92:fa:4f:d5 TA:00:0f:92:13:23:75 Request-To-Send

18:35:10.220210 2061042616us tsft 3.0 Mb/s 2391 MHz 11g/10Mhz -81dB signal [bit 29] 60us CF +QoS BSSID:00:0f:92:fa:4f:d5 SA:00:0f:92:13:23:75 DA:00:0f:92:00:00:64 LLC, dsap SNAP (0xaa) Individual, ssap SNAP (0xaa) Command, ctrl 0x03: oui Ethernet (0x000000), ethertype IPv4 (0x0800): (tos 0x0, ttl 64, id 16078, offset 0, flags [none], proto ICMP (1), length 1428)
    192.168.168.33 > 192.168.168.31: ICMP echo reply, id 5109, seq 7, length 1408
"


The tcpdump on the STA side sees ICMP_Req(AP->STA), CTS(AP->STA)(2 times?), ACK(AP->STA), ICMP_Rep(STA->AP).
"
18:53:46.216611 3176834549us tsft 6.0 Mb/s 2391 MHz 11g/10Mhz -65dB signal [bit 29] 60us CF +QoS DA:00:0f:92:13:2
3:75 BSSID:00:0f:92:fa:4f:d5 SA:00:0f:92:00:00:64 LLC, dsap SNAP (0xaa) Individual, ssap SNAP (0xaa) Command, ctr
l 0x03: oui Ethernet (0x000000), ethertype IPv4 (0x0800): (tos 0x0, ttl 64, id 22263, offset 0, flags [DF], proto
 ICMP (1), length 1428)
    192.168.168.31 > 192.168.168.33: ICMP echo request, id 27421, seq 12, length 1408

18:53:46.217615 3176837507us tsft 3.0 Mb/s 2391 MHz 11g/10Mhz -66dB signal [bit 29] 2232us RA:00:0f:92:13:23:75 C
lear-To-Send

18:53:46.221545 3176841475us tsft 3.0 Mb/s 2391 MHz 11g/10Mhz -65dB signal [bit 29] 2232us RA:00:0f:92:13:23:75 C
lear-To-Send

18:53:46.225059 3176845251us tsft 3.0 Mb/s 2391 MHz 11g/10Mhz -66dB signal [bit 29] 0us RA:00:0f:92:13:23:75 Ackn
owledgment

18:53:46.225159 6.0 Mb/s [bit 15] 125us CF +QoS BSSID:00:0f:92:fa:4f:d5 SA:00:0f:92:13:23:75 DA:00:0f:92:00:00:64
 LLC, dsap SNAP (0xaa) Individual, ssap SNAP (0xaa) Command, ctrl 0x03: oui Ethernet (0x000000), ethertype IPv4 (
0x0800): (tos 0x0, ttl 64, id 16365, offset 0, flags [none], proto ICMP (1), length 1428)
    192.168.168.33 > 192.168.168.31: ICMP echo reply, id 27421, seq 12, length 1408
"

Both sides tcpdump missed some frames. And the order of frames looks wrong, too.

On the scope,(measured in BW=8MHz), we can see:

AP -----------> STA	: ICMP_Req, 164uS, rate=MCS2 QPSK3/4, length=64B.
STA ----------> AP	: ACK, 88uS.
STA ----------> AP	: RTS, 100uS
AP -----------> STA	: CTS, 84uS
STA ----------> AP 	: ICMP_Rep, 164uS
AP -----------> STA	: ACK, 84uS

Compare the OSC waveform with tcpdump, looks like the ACK to Data frame(ICMP_req, ICMP_Rep) is ALWAYS WRONGLY placed in front of the Data frame it acks.

==================================================
OSC measure pDDL900 ampdu_factor,11ng mode, AP--->STA UDP iperf,default packet-size1470B. AP:wireless.@wifi-iface[0].rate=2[QPSK 3/4].
BW	radio0.ampdu_factor	Average A-MPDU length	AP TX LED Width		T/P
8M	2			4.8			5.84mS			9.6M
8M	0			1			1.22mS			8.14M
4M	2			4.7			11.6mS			4.7M
4M	0			1			2.44mS			3.9M
2M	2			5			23.2mS			2.3M
2M	0			1			4.88mS			2M

Jason test shows in BW=8MHz, the ampdu_factor takes great effects. But in BW=4 and lower, the ampdu_factor doesn't affect efficiently. Maybe because in lower BW, the packet size becomes too long in time. Even a single packet is vulnerable to inteference because it is still too long in time. 

Based on this BW results, think about the RATE : how a lower bitrate is more robust than an higher rate? Higher rate has a shorter length in time so I imagine a higher rate frame survives more.

Jun 5, 2020
LMX2572. LD pin, negative pulse of 500uS when switching Fout frequencies. That means it takes 500uS to lock.

LMX2572 needs a software reset after power-n, don't know why:
		// need a s/w chip reset, why???
		st->regs[LMX2572_REG0] = 0x221C;
		st->val = st->regs[LMX2572_REG0] |= LMX2572_REG0_RESET;
		ret = lmx2572_spi_write(st, LMX2572_REG0);

Jun 3, 2020
IIO device direct reg read and write:
Reading

This specifies any shell prompt running on the target

root@analog:/sys/kernel/debug/iio/iio:device1# echo 0x7 > direct_reg_access                                                                                                                                 
root@analog:/sys/kernel/debug/iio/iio:device1# cat direct_reg_access 
0x40

Writing

Write ADDRESS VALUE

This specifies any shell prompt running on the target

root@analog:/sys/kernel/debug/iio/iio:device1# echo 0x7 0x50  > direct_reg_access                                                                                                                            
root@analog:/sys/kernel/debug/iio/iio:device1# cat direct_reg_access 
0x50

root@UserDevice:~# while true; do echo 5 > sys/kernel/debug/iio/iio\:device0/dir
ect_reg_access;cat sys/kernel/debug/iio/iio\:device0/direct_reg_access  ;done

This will generate a stable waveform. The first "echo ADDR" actually doesn't do any SPI operation. The "cat" command triggers the actual SPI waveform with the buffered address by the first "echo 5" command.

Jun 2, 2020
G2 with 2 PCIe AC card, /etc/hotplug.d/ieee80211/00-wifi-detect will be called twice:
root@UserDevice:~# cat tmp/1.log 
==MHX:/sbin/hotplug-call. Fri May 15 19:24:24 GMT 2020. subsystem=[ieee80211],devname=[],interface=[],type=[],device=[],devpath=[/devices/pci0000:00/0000:00:00.0/0000:01:00.0/ieee80211/phy0],drivers=[]
===MHX :/sbin/wifi. Fri May 15 19:24:24 GMT 2020. driver=mac80211===
==MHX: /sbin/wifi. Fri May 15 19:24:24 GMT 2020. type=mac80211===
==MHX: /sbin/wifi. Fri May 15 19:24:24 GMT 2020. type=mac80211===
==MHX: /sbin/wifi. Fri May 15 19:24:24 GMT 2020. type====
==MHX:/sbin/hotplug-call. Fri May 15 19:24:28 GMT 2020. subsystem=[ieee80211],devname=[],interface=[],type=[],device=[],devpath=[/devices/pci0000:00/0000:00:01.0/0000:02:00.0/ieee80211/phy1],drivers=[]
===MHX :/sbin/wifi. Fri May 15 19:24:28 GMT 2020. driver=mac80211===
==MHX: /sbin/wifi. Fri May 15 19:24:28 GMT 2020. type=mac80211===
==MHX: /sbin/wifi. Fri May 15 19:24:28 GMT 2020. type=mac80211===
==MHX: /sbin/wifi. Fri May 15 19:24:28 GMT 2020. type====
root@UserDevice:~# 



Jun 1, 2020
Connect pVivian with a Ubnt16.04 PC and run ping over the last 2 days. No USB RNDIS disconnection is found this Monday morning. The pVivian UART port output during the weekend is :


<3>jffs2: Too few erase blocks (4)
<4><err>[ipcm_vdd_open:94] handle[1:202]c6ad3940 already opened!
<4><err>[ipcm_dev_ioctl:249] open ipcm vdd error
<4><err>[ipcm_vdd_open:94] handle[1:2]c6082040 already opened!
<4><err>[ipcm_dev_ioctl:249] open ipcm vdd error

~ # uptime
 16:07:03 up 2 days, 16:07,  1 users,  load average: 0.08, 0.11, 0.13


Multiple radios on G5:
Radio1, on slot 1, shows up as phy0.

root@UserDevice:~# cat sys/bus/pci/devices/0000\:0
0000:00:00.0/  0000:01:00.0/
root@UserDevice:~# cat sys/bus/pci/devices/0000\:00\:00.0/vendor 
0x0e8d
root@UserDevice:~# cat sys/bus/pci/devices/0000\:01\:00.0/vendor 
0x168c

root@UserDevice:~# ubus call network.wireless status, still shows 2 radios.

==========================================

Radio1, on slot 3, still shows up as phy0

root@UserDevice:~# cat sys/bus/pci/devices/0000\:0
0000:00:00.0/  0000:01:00.0/
root@UserDevice:~# cat sys/bus/pci/devices/0000\:0
0000:00:00.0/  0000:01:00.0/
root@UserDevice:~# cat sys/bus/pci/devices/0000\:00\:00.0/vendor 
0x0e8d
root@UserDevice:~# cat sys/bus/pci/devices/0000\:01\:00.0/vendor 
0x168c

On slot3, the PCI device# is still 0000:01 not changed.

==========================================

Radio1, on slot 1, Radio2 on slot 3. show up as phy0, phy1.

root@UserDevice:~# cat sys/bus/pci/devices/0000\:0
0000:00:00.0/  0000:00:01.0/  0000:01:00.0/  0000:02:00.0/
root@UserDevice:~# cat sys/bus/pci/devices/0000\:0
0000:00:00.0/  0000:00:01.0/  0000:01:00.0/  0000:02:00.0/
root@UserDevice:~# cat sys/bus/pci/devices/0000\:00\:00.0/vendor 
0x0e8d
root@UserDevice:~# cat sys/bus/pci/devices/0000\:00\:01.0/vendor 
0x0e8d
root@UserDevice:~# cat sys/bus/pci/devices/0000\:01\:00.0/vendor 
0x168c
root@UserDevice:~# cat sys/bus/pci/devices/0000\:02\:00.0/vendor 
0x168c


May 21, 2020
Alpha-K : IDT8v97051 is in SPU bus0 CS1:
root@UserDevice:~# cat sys/bus/spi/devices/spi0.0/modalias // NOR flash chip
spi:m25p80
root@UserDevice:~# cat sys/bus/spi/devices/spi0.1/modalias // Synthesizer. CS=GPIO22
spi:syn-idt8v97051
The SPI device configuration is defined in:
arch/mips/ath79/dev-m25p80.c

May 19, 2020
ART QDART. The requested channel flags must match the internally initialized channel list. In function ath_hal_init_channels(), remove some internal flags to match the requested channel flags:
                        case CHANNEL_HALF_BW:
                            icv.channel_flags |= CHANNEL_HALF|CHANNEL_OFDM;
                            icv.channel_flags &= ~(CHANNEL_HT20 | CHANNEL_HT40PLUS | CHANNEL_HT40MINUS);
                            break;
                        case CHANNEL_QUARTER_BW:
                            icv.channel_flags |= CHANNEL_QUARTER|CHANNEL_OFDM;
                            icv.channel_flags &= ~(CHANNEL_HT20 | CHANNEL_HT40PLUS | CHANNEL_HT40MINUS);
                            break;

Then 8MHz and 4MHz work.


==MHX1.-1(ath_hal_init_channels)half_cap=1, quarter_cap=1
===MHX2.0 (ath_hal_init_channels) chan[0]: 2312 flags: 0x40c0
===MHX2.0 (ath_hal_init_channels) chan[1]: 2312 flags: 0x40c0
===MHX2.0 (ath_hal_init_channels) chan[2]: 2312 flags: 0x80c0
===MHX2.0 (ath_hal_init_channels) chan[3]: 2312 flags: 0x80c0
===MHX2.0 (ath_hal_init_channels) chan[4]: 2312 flags: 0x10080
===MHX2.0 (ath_hal_init_channels) chan[5]: 2312 flags: 0x20080
===MHX2.0 (ath_hal_init_channels) chan[6]: 2313 flags: 0x40c0
===MHX2.0 (ath_hal_init_channels) chan[7]: 2313 flags: 0x40c0
===MHX2.0 (ath_hal_init_channels) chan[8]: 2313 flags: 0x80c0
===MHX2.0 (ath_hal_init_channels) chan[9]: 2313 flags: 0x80c0
===MHX2.0 (ath_hal_init_channels) chan[10]: 2313 flags: 0x10080
===MHX2.0 (ath_hal_init_channels) chan[11]: 2313 flags: 0x20080
===MHX2.0 (ath_hal_init_channels) chan[12]: 2314 flags: 0x40c0
===MHX2.0 (ath_hal_init_channels) chan[13]: 2314 flags: 0x40c0
===MHX2.0 (ath_hal_init_channels) chan[14]: 2314 flags: 0x80c0
===MHX2.0 (ath_hal_init_channels) chan[15]: 2314 flags: 0x80c0
===MHX2.0 (ath_hal_init_channels) chan[16]: 2314 flags: 0x10080
===MHX2.0 (ath_hal_init_channels) chan[17]: 2314 flags: 0x20080
===MHX2.0 (ath_hal_init_channels) chan[18]: 2315 flags: 0x40c0
===MHX2.0 (ath_hal_init_channels) chan[19]: 2315 flags: 0x40c0
===MHX2.0 (ath_hal_init_channels) chan[831]: 2411 flags: 0x40c0
===MHX2.0 (ath_hal_init_channels) chan[832]: 2411 flags: 0x40c0
===MHX2.0 (ath_hal_init_channels) chan[833]: 2411 flags: 0x40c0
===MHX2.0 (ath_hal_init_channels) chan[834]: 2411 flags: 0x80c0
===MHX2.0 (ath_hal_init_channels) chan[835]: 2411 flags: 0x80c0
===MHX2.0 (ath_hal_init_channels) chan[836]: 2411 flags: 0x80c0
===MHX2.0 (ath_hal_init_channels) chan[837]: 2411 flags: 0x10080
===MHX2.0 (ath_hal_init_channels) chan[838]: 2411 flags: 0x20080
===MHX2.0 (ath_hal_init_channels) chan[839]: 2411 flags: 0x40080
===MHX2.0 (ath_hal_init_channels) chan[840]: 2412 flags: 0x40c0
===MHX2.0 (ath_hal_init_channels) chan[841]: 2412 flags: 0x40c0
===MHX2.0 (ath_hal_init_channels) chan[842]: 2412 flags: 0x40c0
===MHX2.0 (ath_hal_init_channels) chan[843]: 2412 flags: 0x80c0
===MHX2.0 (ath_hal_init_channels) chan[844]: 2412 flags: 0x80c0
===MHX2.0 (ath_hal_init_channels) chan[845]: 2412 flags: 0x80c0
===MHX2.0 (ath_hal_init_channels) chan[846]: 2412 flags: 0x10080
===MHX2.0 (ath_hal_init_channels) chan[847]: 2412 flags: 0x20080
===MHX2.0 (ath_hal_init_channels) chan[848]: 2412 flags: 0x40080
===MHX2.0 (ath_hal_init_channels) chan[849]: 2413 flags: 0x40c0
===MHX2.0 (ath_hal_init_channels) chan[850]: 2413 flags: 0x40c0
===MHX2.0 (ath_hal_init_channels) chan[851]: 2413 flags: 0x40c0
===MHX2.0 (ath_hal_init_channels) chan[852]: 2413 flags: 0x80c0
===MHX2.0 (ath_hal_init_channels) chan[853]: 2413 flags: 0x80c0
===MHX2.0 (ath_hal_init_channels) chan[854]: 2413 flags: 0x80c0
===MHX2.0 (ath_hal_init_channels) chan[855]: 2413 flags: 0x10080
===MHX2.0 (ath_hal_init_channels) chan[856]: 2413 flags: 0x20080
===MHX2.0 (ath_hal_init_channels) chan[857]: 2413 flags: 0x40080
===MHX2.0 (ath_hal_init_channels) chan[1858]: 2531 flags: 0x40c0
===MHX2.0 (ath_hal_init_channels) chan[1859]: 2531 flags: 0x40c0
===MHX2.0 (ath_hal_init_channels) chan[1860]: 2531 flags: 0x80c0
===MHX2.0 (ath_hal_init_channels) chan[1861]: 2531 flags: 0x80c0
===MHX2.0 (ath_hal_init_channels) chan[1862]: 2531 flags: 0x10080
===MHX2.0 (ath_hal_init_channels) chan[1863]: 2531 flags: 0x40080
===MHX2.0 (ath_hal_init_channels) chan[1864]: 2532 flags: 0x40c0
===MHX2.0 (ath_hal_init_channels) chan[1865]: 2532 flags: 0x40c0
===MHX2.0 (ath_hal_init_channels) chan[1866]: 2532 flags: 0x80c0
===MHX2.0 (ath_hal_init_channels) chan[1867]: 2532 flags: 0x80c0
===MHX2.0 (ath_hal_init_channels) chan[1868]: 2532 flags: 0x10080
===MHX2.0 (ath_hal_init_channels) chan[1869]: 2532 flags: 0x40080
< 7502 CONTROL OFF
Error::PCI Config read32 failed::co.value=0
< 7504 INFO |set|devid|dead|
< 7504 INFO |set|mac|00:0f:92:22:22:22|
< 7504 INFO |set|customer|AP143-031-Q0205|
< 7504 INFO |set|txChains|2|
< 7504 INFO |set|rxChains|2|
< 7504 INFO |set|2GHz|1|
< 7504 INFO |set|5GHz|0|
< 7504 INFO |set|4p9GHz|0|
< 7504 INFO |set|HalfRate|0|
< 7504 INFO |set|QuarterRate|0|
< 6024 INFO Free memory for initialization and calibration is 511 (1023 - 512) bytes.
< 6000 INFO Loaded card.
< 7506 CONTROL DONE load devid=-1;caldata=auto;

// T/P test b/w =automatic

> tx f=2412;txch=7;rxch=7;bc=0;retry=0;att=30;iss=0;stat=3;dump=0;pro=0;bssid=50:55:55:55:55:05;mactx=20:22:22:22:22:02;macrx=10:11:11:11:11:01;deaf=0;reset=1;cal=0;ir=0;gi=0;pc=100;pl=1000;ifs=-1;dur=600000;agg=0;ht40=2;bw=0;r=6,9,12,18,24,36,48,54;pcdac=0;pdgain=3;
< 7508 CONTROL BEGIN tx f=2412;txch=7;rxch=7;bc=0;retry=0;att=30;iss=0;stat=3;dump=0;pro=0;bssid=50:55:55:55:55:05;mactx=20:22:22:22:22:02;macrx=10:11:11:11:11:01;deaf=0;reset=1;cal=0;ir=0;gi=0;pc=100;pl=1000;ifs=-1;dur=600000;agg=0;ht40=2;bw=0;r=6,9,12,18,24,36,48,54;pcdac=0;pdgain=3;
(CommandProcess) CommandWord=tx, code=3
==MHX3.0(ar9300_reset) requesting channel:2412/0x00010080
==MHX1.0(ath_hal_checkchannel): channel 2412/0x10080 (0x10080) requested
==MHX1.1(ath_hal_checkchannel),  channel 2422/0x80c0 d -10
==MHX1.1(ath_hal_checkchannel),  channel 2370/0x80c0 d 42
==MHX1.1(ath_hal_checkchannel),  channel 2396/0x80c0 d 16
==MHX1.1(ath_hal_checkchannel),  channel 2409/0x80c0 d 3
==MHX1.1(ath_hal_checkchannel),  channel 2416/0x40c0 d -4
==MHX1.1(ath_hal_checkchannel),  channel 2412/0x40080 d -196608
==MHX1.1(ath_hal_checkchannel),  channel 2411/0x40c0 d 1
==MHX1.1(ath_hal_checkchannel),  channel 2412/0x40c0 d 49088
==MHX1.1(ath_hal_checkchannel),  channel 2412/0x80c0 d 32704
==MHX1.1(ath_hal_checkchannel),  channel 2412/0x20080 d -65536
==MHX1.2(ath_hal_checkchannel) returning cc=0x759f5d50
==MHX1.0(ath_hal_checkchannel): channel 2412/0x10080 (0x10080) requested
==MHX1.1(ath_hal_checkchannel),  channel 2422/0x80c0 d -10
==MHX1.1(ath_hal_checkchannel),  channel 2370/0x80c0 d 42
==MHX1.1(ath_hal_checkchannel),  channel 2396/0x80c0 d 16
==MHX1.1(ath_hal_checkchannel),  channel 2409/0x80c0 d 3
==MHX1.1(ath_hal_checkchannel),  channel 2416/0x40c0 d -4
==MHX1.1(ath_hal_checkchannel),  channel 2412/0x40080 d -196608
==MHX1.1(ath_hal_checkchannel),  channel 2411/0x40c0 d 1
==MHX1.1(ath_hal_checkchannel),  channel 2412/0x40c0 d 49088
==MHX1.1(ath_hal_checkchannel),  channel 2412/0x80c0 d 32704
==MHX1.1(ath_hal_checkchannel),  channel 2412/0x20080 d -65536
==MHX1.2(ath_hal_checkchannel) returning cc=0x759f5d50
==MHX1.0(ath_hal_checkchannel): channel 2412/0x10080 (0x10080) requested
==MHX1.1(ath_hal_checkchannel),  channel 2422/0x80c0 d -10
==MHX1.1(ath_hal_checkchannel),  channel 2370/0x80c0 d 42
==MHX1.1(ath_hal_checkchannel),  channel 2396/0x80c0 d 16
==MHX1.1(ath_hal_checkchannel),  channel 2409/0x80c0 d 3
==MHX1.1(ath_hal_checkchannel),  channel 2416/0x40c0 d -4
==MHX1.1(ath_hal_checkchannel),  channel 2412/0x40080 d -196608
==MHX1.1(ath_hal_checkchannel),  channel 2411/0x40c0 d 1
==MHX1.1(ath_hal_checkchannel),  channel 2412/0x40c0 d 49088
==MHX1.1(ath_hal_checkchannel),  channel 2412/0x80c0 d 32704
==MHX1.1(ath_hal_checkchannel),  channel 2412/0x20080 d -65536
==MHX1.2(ath_hal_checkchannel) returning cc=0x759f5d50
==MHX1.0(ath_hal_checkchannel): channel 2412/0x10080 (0x10080) requested
==MHX1.2(ath_hal_checkchannel) returning cc=0x759f5d50
FieldRead - cant find field BB_cca_b2.minCCApwr_2
FieldRead - cant find field BB_ext_chan_pwr_thr_2_b2.minCCApwr_ext_2
< 6004 CONTROL Device reset successfully. frequency=2412, ht40=20, tx chain=3, rx chain=3.
< 7500 CONTROL OK
_LinkTpcm 0
using gain entry 1
Error::PCI Config read32 failed::co.value=0
TxGainIndex=1 TxDacGain=0
 OFF OFFTxMany=800 TxStatusMany=800 TxBatchMany=200 TxDescriptorMany=400
npattern=0 pattern=77fee768
npattern=64 pattern=77bb6084
pattern: ff 87 b8 59 b7 a1 cc 24 57 5e 4b 9c  e e9 ea 50 2a be b4 1b b6 b0 5d f1 e6 9a e3 45 fd 2c 53 18  c ca c9 fb 49 37 e5 a8 51 3b 2f 61 aa 72 18 84  2 23 23 ab 63 89 51 b3 e7 8b 72 90 4c e8 fb c0 
(0)(1)(2)(3)++++++++++++++++++++++++++++++++++++++++> start
 OFF ON ONtx start done
 ONError::PCI Config read32 failed::co.value=0
< 7501 CONTROL ON
 0[0] 0 retry 1 retry 2 retry 3 retry 4 retry.... 5 retry.... 6 retry.... 7 retry..... 8 retry...... 9 retry.... 10 retry.... 11 retry.... 12 retry.... 13 retry.... 14 retry..... 15 retry.... 16 retry.... 753 retry 754 retry 755 retry 756 retry 757 retry. 758 retry 759 retry 760 retry 761 retry 762 retry 763 retry 764 retry 765 retry 766 retry 767 retry 768 retry. 769 retry 770 retry 771 retry 772 retry 773 retry. 774 retry 775 retry 776 retry. 777 retry 778 retry. 779 retry. 780 retry. 781 retry 782 retry 783 retry. 784 retry 785 retry. 786 retry 787 retry. 788 retry 789 retry. 790 retry 791 retry. 792 retry 793 retry 794 retry 795 retry. 796 retry 797 retry 798 retry. 799 retry OFF OFF 800 Done
< 7502 CONTROL OFF
FieldRead - cant find field BB_cca_b2.minCCApwr_2
FieldRead - cant find field BB_ext_chan_pwr_thr_2_b2.minCCApwr_ext_2
chain:    0 nfc:  -122 nfcal:     1 nfpower:     1 nfTemp: -6500
chain:    1 nfc:  -112 nfcal:     1 nfpower:     1 nfTemp: -6500
LinkTransmitStatPrint(): temp 136 _LinkChipTemperature 0
Error::PCI Config read32 failed::co.value=0
< 7503 INFO |tx|frequency|tp|txchain|iss|att|pdgain|txgain|rate|pl|pc|agg||correct|throughput|error|fifo|excess|retry|dretry|rssi|rssi00|rssi01|rssi02|rssi10|rssi11|rssi12|txgi|dacg|byte|duration|temp|volt|dpd|
< 7504 INFO |tx|2412|0.0|3|0|30|3|0|36|1000|100|0||0|0|0|0|100|0.0:100|1.0:100|0.0|0.0|0.0|0.0|0.0|0.0|0.0|1|0|0|0|136|0|0|
Error::PCI Config read32 failed::co.value=0
Error::PCI Config read32 failed::co.value=0
< 7504 INFO |tx|2412|0.0|3|0|30|3|0|48|1000|100|0||0|0|0|0|100|0.0:100|1.0:100|0.0|0.0|0.0|0.0|0.0|0.0|0.0|1|0|0|0|136|0|0|
Error::PCI Config read32 failed::co.value=0
Error::PCI Config read32 failed::co.value=0
< 7504 INFO |tx|2412|0.0|3|0|30|3|0|54|1000|100|0||0|0|0|0|100|0.0:100|1.0:100|0.0|0.0|0.0|0.0|0.0|0.0|0.0|1|0|0|0|136|0|0|
< 7506 CONTROL DONE tx f=2412;txch=7;rxch=7;bc=0;retry=0;att=30;iss=0;stat=3;dump=0;pro=0;bssid=50:55:55:55:55:05;mactx=20:22:22:22:22:02;macrx=10:11:11:11:11:01;deaf=0;reset=1;cal=0;ir=0;gi=0;pc=100;pl=1000;ifs=-1;dur=600000;agg=0;ht40=2;bw=0;r=6,9,12,18,24,36,48,54;pcdac=0;pdgain=3;
> stop
< 7508 CONTROL BEGIN stop
(CommandProcess) CommandWord=stop, code=49
< 7506 CONTROL DONE stop

// T/P test bw=8MHz

> tx f=2412;txch=7;rxch=7;bc=0;retry=0;att=30;iss=0;stat=3;dump=0;pro=0;bssid=50:55:55:55:55:05;mactx=20:22:22:22:22:02;macrx=10:11:11:11:11:01;deaf=0;reset=1;cal=0;ir=0;gi=0;pc=100;pl=1000;ifs=-1;dur=600000;agg=0;ht40=2;bw=10;r=6,9,12,18,24,36,48,54;pcdac=0;pdgain=3;
< 7508 CONTROL BEGIN tx f=2412;txch=7;rxch=7;bc=0;retry=0;att=30;iss=0;stat=3;dump=0;pro=0;bssid=50:55:55:55:55:05;mactx=20:22:22:22:22:02;macrx=10:11:11:11:11:01;deaf=0;reset=1;cal=0;ir=0;gi=0;pc=100;pl=1000;ifs=-1;dur=600000;agg=0;ht40=2;bw=10;r=6,9,12,18,24,36,48,54;pcdac=0;pdgain=3;
(CommandProcess) CommandWord=tx, code=3
==MHX3.0(ar9300_reset) requesting channel:2412/0x000040c0
==MHX1.0(ath_hal_checkchannel): channel 2412/0x40c0 (0x40c0) requested
==MHX1.1(ath_hal_checkchannel),  channel 2422/0x80c0 d -10
==MHX1.1(ath_hal_checkchannel),  channel 2370/0x80c0 d 42
==MHX1.1(ath_hal_checkchannel),  channel 2396/0x80c0 d 16
==MHX1.1(ath_hal_checkchannel),  channel 2409/0x80c0 d 3
==MHX1.1(ath_hal_checkchannel),  channel 2416/0x40c0 d -4
==MHX1.1(ath_hal_checkchannel),  channel 2412/0x40080 d -245696
==MHX1.1(ath_hal_checkchannel),  channel 2411/0x40c0 d 1
==MHX1.2(ath_hal_checkchannel) returning cc=0x759f5ad0
==MHX1.0(ath_hal_checkchannel): channel 2412/0x40c0 (0x40c0) requested
==MHX1.1(ath_hal_checkchannel),  channel 2422/0x80c0 d -10
==MHX1.1(ath_hal_checkchannel),  channel 2370/0x80c0 d 42
==MHX1.1(ath_hal_checkchannel),  channel 2396/0x80c0 d 16
==MHX1.1(ath_hal_checkchannel),  channel 2409/0x80c0 d 3
==MHX1.1(ath_hal_checkchannel),  channel 2416/0x40c0 d -4
==MHX1.1(ath_hal_checkchannel),  channel 2412/0x40080 d -245696
==MHX1.1(ath_hal_checkchannel),  channel 2411/0x40c0 d 1
==MHX1.2(ath_hal_checkchannel) returning cc=0x759f5ad0
==MHX1.0(ath_hal_checkchannel): channel 2412/0x40c0 (0x40c0) requested
==MHX1.1(ath_hal_checkchannel),  channel 2422/0x80c0 d -10
==MHX1.1(ath_hal_checkchannel),  channel 2370/0x80c0 d 42
==MHX1.1(ath_hal_checkchannel),  channel 2396/0x80c0 d 16
==MHX1.1(ath_hal_checkchannel),  channel 2409/0x80c0 d 3
==MHX1.1(ath_hal_checkchannel),  channel 2416/0x40c0 d -4
==MHX1.1(ath_hal_checkchannel),  channel 2412/0x40080 d -245696
==MHX1.1(ath_hal_checkchannel),  channel 2411/0x40c0 d 1
==MHX1.2(ath_hal_checkchannel) returning cc=0x759f5ad0
==MHX1.0(ath_hal_checkchannel): channel 2412/0x40c0 (0x40c0) requested
==MHX1.2(ath_hal_checkchannel) returning cc=0x759f5ad0
FieldRead - cant find field BB_cca_b2.minCCApwr_2
FieldRead - cant find field BB_ext_chan_pwr_thr_2_b2.minCCApwr_ext_2
< 6004 CONTROL Device reset successfully. frequency=2412, ht40=10, tx chain=3, rx chain=3.
< 7500 CONTROL OK
_LinkTpcm 0
using gain entry 1
Error::PCI Config read32 failed::co.value=0
TxGainIndex=1 TxDacGain=0
 OFF OFFTxMany=800 TxStatusMany=800 TxBatchMany=200 TxDescriptorMany=400
npattern=0 pattern=77fee768
npattern=64 pattern=77bb6084
pattern: ff 87 b8 59 b7 a1 cc 24 57 5e 4b 9c  e e9 ea 50 2a be b4 1b b6 b0 5d f1 e6 9a e3 45 fd 2c 53 18  c ca c9 fb 49 37 e5 a8 51 3b 2f 61 aa 72 18 84  2 23 23 ab 63 89 51 b3 e7 8b 72 90 4c e8 fb c0 
(0)(1)(2)(3)+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++> start
 OFF ON ONtx start done
 ONError::PCI Config read32 failed::co.value=0
< 7501 CONTROL ON
 0[0] 0 retry 1 retry....... 2 retry......... 3 retry......... 4 retry......... 5 retry......... 6 retry......... 7 retry.......... 8 retry......... 9 retry......... 10 retry......... 11 retry.......... 12 retry.......... 13 retry......... 14 retry......... 15 retry...... 16 retry... 17 retry 18 retry 19 retry 20 retry 21 retry 22 retry. 23 retry.......... 24 retry......... 25 retry......... 26 retry........ 756 retry. 757 retry.. 758 retry. 759 retry. 760 retry.. 761 retry. 762 retry.. 763 retry.. 764 retry. 765 retry.. 766 retry.. 767 retry.. 768 retry.. 769 retry. 770 retry.. 771 retry.. 772 retry.. 773 retry.. 774 retry.. 775 retry.. 776 retry.. 777 retry.. 778 retry.. 779 retry. 780 retry.. 781 retry.. 782 retry. 783 retry.. 784 retry. 785 retry. 786 retry.. 787 retry. 788 retry. 789 retry.. 790 retry.. 791 retry. 792 retry.. 793 retry. 794 retry. 795 retry. 796 retry. 797 retry. 798 retry. 799 retry OFF OFF 800 Done
< 7502 CONTROL OFF
FieldRead - cant find field BB_cca_b2.minCCApwr_2
FieldRead - cant find field BB_ext_chan_pwr_thr_2_b2.minCCApwr_ext_2
chain:    0 nfc:  -124 nfcal:     1 nfpower:     1 nfTemp: -6500
chain:    1 nfc:  -115 nfcal:     1 nfpower:     1 nfTemp: -6500
LinkTransmitStatPrint(): temp 133 _LinkChipTemperature 0
Error::PCI Config read32 failed::co.value=0
< 7503 INFO |tx|frequency|tp|txchain|iss|att|pdgain|txgain|rate|pl|pc|agg||correct|throughput|error|fifo|excess|retry|dretry|rssi|rssi00|rssi01|rssi02|rssi10|rssi11|rssi12|txgi|dacg|byte|duration|temp|volt|dpd|
Error::PCI Config read32 failed::co.value=0
Error::PCI Config read32 failed::co.value=0
< 7504 INFO |tx|2412|-1.0|3|0|30|3|0|6|1000|100|0||0|0|0|0|100|0.0:100|1.0:100|0.0|0.0|0.0|0.0|0.0|0.0|0.0|1|0|0|0|133|0|0|
Error::PCI Config read32 failed::co.value=0
Error::PCI Config read32 failed::co.value=0
< 7504 INFO |tx|2412|0.0|3|0|30|3|0|54|1000|100|0||0|0|0|0|100|0.0:100|1.0:100|0.0|0.0|0.0|0.0|0.0|0.0|0.0|1|0|0|0|133|0|0|
< 7506 CONTROL DONE tx f=2412;txch=7;rxch=7;bc=0;retry=0;att=30;iss=0;stat=3;dump=0;pro=0;bssid=50:55:55:55:55:05;mactx=20:22:22:22:22:02;macrx=10:11:11:11:11:01;deaf=0;reset=1;cal=0;ir=0;gi=0;pc=100;pl=1000;ifs=-1;dur=600000;agg=0;ht40=2;bw=10;r=6,9,12,18,24,36,48,54;pcdac=0;pdgain=3;
> stop
< 7508 CONTROL BEGIN stop
(CommandProcess) CommandWord=stop, code=49
< 7506 CONTROL DONE stop

//T/P test, bw=4MHz

> tx f=2412;txch=7;rxch=7;bc=0;retry=0;att=30;iss=0;stat=3;dump=0;pro=0;bssid=50:55:55:55:55:05;mactx=20:22:22:22:22:02;macrx=10:11:11:11:11:01;deaf=0;reset=1;cal=0;ir=0;gi=0;pc=100;pl=1000;ifs=-1;dur=600000;agg=0;ht40=2;bw=5;r=6,9,12,18,24,36,48,54;pcdac=0;pdgain=3;
< 7508 CONTROL BEGIN tx f=2412;txch=7;rxch=7;bc=0;retry=0;att=30;iss=0;stat=3;dump=0;pro=0;bssid=50:55:55:55:55:05;mactx=20:22:22:22:22:02;macrx=10:11:11:11:11:01;deaf=0;reset=1;cal=0;ir=0;gi=0;pc=100;pl=1000;ifs=-1;dur=600000;agg=0;ht40=2;bw=5;r=6,9,12,18,24,36,48,54;pcdac=0;pdgain=3;
(CommandProcess) CommandWord=tx, code=3
==MHX3.0(ar9300_reset) requesting channel:2412/0x000080c0
==MHX1.0(ath_hal_checkchannel): channel 2412/0x80c0 (0x80c0) requested
==MHX1.1(ath_hal_checkchannel),  channel 2422/0x80c0 d -10
==MHX1.1(ath_hal_checkchannel),  channel 2370/0x80c0 d 42
==MHX1.1(ath_hal_checkchannel),  channel 2396/0x80c0 d 16
==MHX1.1(ath_hal_checkchannel),  channel 2409/0x80c0 d 3
==MHX1.1(ath_hal_checkchannel),  channel 2416/0x40c0 d -4
==MHX1.1(ath_hal_checkchannel),  channel 2412/0x40080 d -229312
==MHX1.1(ath_hal_checkchannel),  channel 2411/0x40c0 d 1
==MHX1.1(ath_hal_checkchannel),  channel 2412/0x40c0 d 16384
==MHX1.2(ath_hal_checkchannel) returning cc=0x759f5cd0
==MHX1.0(ath_hal_checkchannel): channel 2412/0x80c0 (0x80c0) requested
==MHX1.1(ath_hal_checkchannel),  channel 2422/0x80c0 d -10
==MHX1.1(ath_hal_checkchannel),  channel 2370/0x80c0 d 42
==MHX1.1(ath_hal_checkchannel),  channel 2396/0x80c0 d 16
==MHX1.1(ath_hal_checkchannel),  channel 2409/0x80c0 d 3
==MHX1.1(ath_hal_checkchannel),  channel 2416/0x40c0 d -4
==MHX1.1(ath_hal_checkchannel),  channel 2412/0x40080 d -229312
==MHX1.1(ath_hal_checkchannel),  channel 2411/0x40c0 d 1
==MHX1.1(ath_hal_checkchannel),  channel 2412/0x40c0 d 16384
==MHX1.2(ath_hal_checkchannel) returning cc=0x759f5cd0
==MHX1.0(ath_hal_checkchannel): channel 2412/0x80c0 (0x80c0) requested
==MHX1.1(ath_hal_checkchannel),  channel 2422/0x80c0 d -10
==MHX1.1(ath_hal_checkchannel),  channel 2370/0x80c0 d 42
==MHX1.1(ath_hal_checkchannel),  channel 2396/0x80c0 d 16
==MHX1.1(ath_hal_checkchannel),  channel 2409/0x80c0 d 3
==MHX1.1(ath_hal_checkchannel),  channel 2416/0x40c0 d -4
==MHX1.1(ath_hal_checkchannel),  channel 2412/0x40080 d -229312
==MHX1.1(ath_hal_checkchannel),  channel 2411/0x40c0 d 1
==MHX1.1(ath_hal_checkchannel),  channel 2412/0x40c0 d 16384
==MHX1.2(ath_hal_checkchannel) returning cc=0x759f5cd0
==MHX1.0(ath_hal_checkchannel): channel 2412/0x80c0 (0x80c0) requested
==MHX1.2(ath_hal_checkchannel) returning cc=0x759f5cd0
FieldRead - cant find field BB_cca_b2.minCCApwr_2
FieldRead - cant find field BB_ext_chan_pwr_thr_2_b2.minCCApwr_ext_2
< 6004 CONTROL Device reset successfully. frequency=2412, ht40=5, tx chain=3, rx chain=3.
< 7500 CONTROL OK
_LinkTpcm 0
using gain entry 1
Error::PCI Config read32 failed::co.value=0
TxGainIndex=1 TxDacGain=0
 OFF OFFTxMany=800 TxStatusMany=800 TxBatchMany=200 TxDescriptorMany=400
npattern=0 pattern=77fee768
npattern=64 pattern=77bb6084
pattern: ff 87 b8 59 b7 a1 cc 24 57 5e 4b 9c  e e9 ea 50 2a be b4 1b b6 b0 5d f1 e6 9a e3 45 fd 2c 53 18  c ca c9 fb 49 37 e5 a8 51 3b 2f 61 aa 72 18 84  2 23 23 ab 63 89 51 b3 e7 8b 72 90 4c e8 fb c0 
(0)(1)(2)(3)++++++++++++++++++++++++++++++++++++++++++++++++++++++++> start
 OFF ON ONtx start done
 ONError::PCI Config read32 failed::co.value=0
< 7501 CONTROL ON
 0[0] 0 retry.............. 1 retry.................. 2 retry.................... 3 retry................. 4 retry................... 5 retry.................... 6 retry.................. 7 retry................... 8 retry........... 9 retry................... 10 retry................... 11 retry.................. 12 retry................... 13 retry................. 14 retry................. retry.... 781 retry.... 782 retry... 783 retry... 784 retry... 785 retry.... 786 retry.... 787 retry.... 788 retry..... 789 retry... 790 retry.... 791 retry... 792 retry... 793 retry.... 794 retry... 795 retry.... 796 retry.... 797 retry... 798 retry... 799 retry OFF OFF 800 Done
< 7502 CONTROL OFF
FieldRead - cant find field BB_cca_b2.minCCApwr_2
FieldRead - cant find field BB_ext_chan_pwr_thr_2_b2.minCCApwr_ext_2
chain:    0 nfc:  -121 nfcal:     1 nfpower:     1 nfTemp: -6500
chain:    1 nfc:  -112 nfcal:     1 nfpower:     1 nfTemp: -6500
LinkTransmitStatPrint(): temp 128 _LinkChipTemperature 0
Error::PCI Config read32 failed::co.value=0
< 7503 INFO |tx|frequency|tp|txchain|iss|att|pdgain|txgain|rate|pl|pc|agg||correct|throughput|error|fifo|excess|retry|dretry|rssi|rssi00|rssi01|rssi02|rssi10|rssi11|rssi12|txgi|dacg|byte|duration|temp|volt|dpd|
Error::PCI Config read32 failed::co.value=0
Error::PCI Config read32 failed::co.value=0
< 7504 INFO |tx|2412|-1.0|3|0|30|3|0|6|1000|100|0||0|0|0|0|100|0.0:100|1.0:100|0.0|0.0|0.0|0.0|0.0|0.0|0.0|1|0|0|0|128|0|0|
Error::PCI Config read32 failed::co.value=0
Error::PCI Config read32 failed::co.value=0
< 7504 INFO |tx|2412|0.0|3|0|30|3|0|54|1000|100|0||0|0|0|0|100|0.0:100|1.0:100|0.0|0.0|0.0|0.0|0.0|0.0|0.0|1|0|0|0|128|0|0|
< 7506 CONTROL DONE tx f=2412;txch=7;rxch=7;bc=0;retry=0;att=30;iss=0;stat=3;dump=0;pro=0;bssid=50:55:55:55:55:05;mactx=20:22:22:22:22:02;macrx=10:11:11:11:11:01;deaf=0;reset=1;cal=0;ir=0;gi=0;pc=100;pl=1000;ifs=-1;dur=600000;agg=0;ht40=2;bw=5;r=6,9,12,18,24,36,48,54;pcdac=0;pdgain=3;
> stop
< 7508 CONTROL BEGIN stop
(CommandProcess) CommandWord=stop, code=49
< 7506 CONTROL DONE stop



May 15, 2020
wa-aa create databases after register. sqlite3 insert user complains error with Firefox browser but works well with Chrome.

In the test Apach2 server, the /var/www/html/wa-aa/application/config/config.php should change:
// $config['base_url'] = 'https://www.wiseraccounting.com/onlineaccounting/';
$config['base_url'] = 'http://127.0.0.1/wa-aa/';	//DO NOT forget the wa-aa root directory.


May 8, 2020
QDART receives the data with "seqControl" always be zero:

`168c 0 0 0 0 c`9 80 1 8`0 0 0 0 0 3e8`f2d703`1 0 0 1 0 0 0 0`9 80 80 80`0 0 0 0`0 0 0 0`0 0 0 0`80 80 80 80`80 80 0`0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1`
08 00 00 00 10 11 11 11 11 01 20 22 22 22 22 02 50 55 55 55 55 05 00 00 ffffffff ffffff87 ffffffb8 59 ffffffb7 ffffffa1 
ffffffcc 24 
buffer[0]=8 buffer[1]=0 buffer[2]=0 buffer[3]=0 buffer[4]=10 buffer[5]=11 buffer[6]=11 buffer[7]=11 buffer[8]=11 buffer[
9]=1 buffer[10]=20 buffer[11]=22 buffer[12]=22 buffer[13]=22 buffer[14]=22 buffer[15]=2 buffer[16]=50 buffer[17]=55 buff
er[18]=55 buffer[19]=55 buffer[20]=55 buffer[21]=5 buffer[22]=0 buffer[23]=0 buffer[24]=ff buffer[25]=87 buffer[26]=b8 b
uffer[27]=59 buffer[28]=b7 buffer[29]=a1 buffer[30]=cc buffer[31]=24 buffer[32]=57 buffer[33]=5e buffer[34]=4b buffer[35
]=9c buffer[36]=e buffer[37]=e9 buffer[38]=ea buffer[39]=50 buffer[40]=6a buffer[41]=9d buffer[42]=b4 buffer[43]=1b buff
er[44]=b6 buffer[45]=b0 buffer[46]=77 buffer[47]=ea buffer[48]=ef buffer[49]=9a buffer[50]=e3 buffer[51]=45 buffer[52]=f
d buffer[53]=2c buffer[54]=53 buffer[55]=18 buffer[56]=c buffer[57]=ca buffer[58]=c9 buffer[59]=fb buffer[60]=49 buffer[
61]=37 buffer[62]=e5 buffer[63]=a8 ===MHX5.-1(DescriptorLinkRxComplete) 
==MHX5.0(DescriptorLinkRxComplete) prevframeNotOk=0, fragno=0, LinkRxFragnum=0. isLast=0
[4]
`168c 0 0 0 0 c`9 80 1 7`0 0 0 0 0 3e8`f2db22`1 0 0 1 0 0 0 0`8 80 80 80`0 0 0 0`0 0 0 0`0 0 0 0`80 80 80 80`80 80 0`0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1`
08 00 00 00 10 11 11 11 11 01 20 22 22 22 22 02 50 55 55 55 55 05 00 00 ffffffff ffffff87 ffffffb8 59 ffffffb7 ffffffa1 
ffffffcc 24 
buffer[0]=8 buffer[1]=0 buffer[2]=0 buffer[3]=0 buffer[4]=10 buffer[5]=11 buffer[6]=11 buffer[7]=11 buffer[8]=11 buffer[
9]=1 buffer[10]=20 buffer[11]=22 buffer[12]=22 buffer[13]=22 buffer[14]=22 buffer[15]=2 buffer[16]=50 buffer[17]=55 buff
er[18]=55 buffer[19]=55 buffer[20]=55 buffer[21]=5 buffer[22]=0 buffer[23]=0 buffer[24]=ff buffer[25]=87 buffer[26]=b8 b
uffer[27]=59 buffer[28]=b7 buffer[29]=a1 buffer[30]=cc buffer[31]=24 buffer[32]=57 buffer[33]=5e buffer[34]=4b buffer[35
]=9c buffer[36]=e buffer[37]=e9 buffer[38]=ea buffer[39]=50 buffer[40]=2a buffer[41]=be buffer[42]=b4 buffer[43]=1b buff
er[44]=b6 buffer[45]=b0 buffer[46]=5d buffer[47]=f1 buffer[48]=98 buffer[49]=fe buffer[50]=1e buffer[51]=75 buffer[52]=1
2 buffer[53]=28 buffer[54]=53 buffer[55]=18 buffer[56]=c buffer[57]=ca buffer[58]=9d buffer[59]=79 buffer[60]=37 buffer[
61]=e0 buffer[62]=a3 buffer[63]=8a ===MHX5.-1(DescriptorLinkRxComplete) 
==MHX5.0(DescriptorLinkRxComplete) prevframeNotOk=0, fragno=0, LinkRxFragnum=0. isLast=0

Turns out to be the TX side LinkTxPacketHeader() doesn't fill this field.
WLAN_SET_FRAGNUM(pPktHeader->seqControl, 0);
So that the DescriptorLinkRxComplete() function never has chance to return. 

May 7, 2020
ATH10k generic driver[ without CT patch ] + CT firmware v22. In BulletPlusAC, when a iPhone is kicked out because of "inactivity time", default is 300 seconds, the AP driver crashes. And ping with all STAs are broken.

With CT ath10k driver + CT firmware v22, this issue is gone. 

May 5, 2020
In PWii ART-2, (U)tility Menu ---> (R)ead from a register ---> Enter the register address(hex): 0xb8108108, you get 00000052. This matches the datasheet. You can verify more by these registers : 0xb8108118=0xAA, 0xb810824c=0x0001e848, and after a Continuous transmission, you can read register 0xb8108000=22222220 and 0xb8108004=38800222. All those shows the Utility Register read works. 

vi makefile.nart, add CFLAGS += -DAH_SUPPORT_OSPREY -DAH_BYTE_ORDER=AH_BIG_ENDIAN -DLinux -DLINUX -DSOC_LINUX -DARCH_BIG_ENDIAN -DMDK_AP -DSOC_AP -DART_BUILD -DREMOVE_PKT_LOG -DAH_SUPPORT_WRITE_EEPROM -DATH_SUPPORT_TxBF -DATH_SUPPORT_PAPRD -DDYNAMIC_DEVICE_DLL -DAH_DEBUG  to turn on AH_DEBUG. But this results a link error:

../devlib/Linux_ar9300/libar9300.so: undefined reference to `asf_print_ctrl_unregister_private'
../devlib/Linux_ar9300/libar9300.so: undefined reference to `asf_print_mask_set'
../devlib/Linux_ar9300/libar9300.so: undefined reference to `asf_vprint_category_private'
../devlib/Linux_ar9300/libar9300.so: undefined reference to `adf_os_vprint'
../devlib/Linux_ar9300/libar9300.so: undefined reference to `asf_print_ctrl_register_private'
collect2: error: ld returned 1 exit status

So basically AH_DEBUG is not usable.

QDART : don't use -DENDIAN_SWAP flag. No need to do endian swap. Tried and didn't work at all.

May 4, 2020
Try boot ramfs on the qca9531 development board. Build a Microhard RAMFS by make menuconfig ---> Target Images ---> ramdisk. Use MHX-uImage-initramfs-lzma.bin(size=13287576). On the dev board, tftpb 81000000 MHX-uImage-initramfs-lzma.bin. If an "lzma uncompress error" happenes, maybe because the RAM address 0x81000000 is too low. Use a even higher address like 0x82000000 to make lzma uncompress work. 

In devel u-boot, iminfo shows the image information. Use "bootm 81000000" too boot up this ramfs. With original dev board bootargs, my own kernel boots up to FS but finally failed.

It didn't boot up when using generic bootargs "board=MHK_BetaD console=ttyS0,115200 root=31:4 rootfstype=squashfs,jffs2 noinitrd loglevel=10 mtdparts=spi0.0:512k(u-boot)ro,256k(u-boot-env),256k(u-boot-env-bak),2M(kernel),25344k(rootfs),4M(mhs-data),256k(art),2M(kernel-bak),25344k(rootfs-bak),4608k(NVM-zone),768k(pro-zone) mem=128M".

Tried command line "board=MHK_BetaD console=ttyS0,115200 root=/dev/ram0 initrd=/dev/ram0" and it didn't boot up.

May 1, 2020
ART : channel separation is defined by:
typedef struct RegDmnFreqBand {
    u_int16_t    lowChannel;    /* Low channel center in MHz */
    u_int16_t    highChannel;    /* High Channel center in MHz */
    u_int8_t    powerDfs;    /* Max power (dBm) for channel range when using DFS */
    u_int8_t    antennaMax;    /* Max allowed antenna gain */
    u_int8_t    channelBW;    /* Bandwidth of the channel */
    u_int8_t    channelSep;    /* Channel separation within the band */ // channel step
    u_int64_t    useDfs;        /* Use DFS in the RegDomain if corresponding bit is set */
    u_int64_t    usePassScan;    /* Use Passive Scan in the RegDomain if corresponding bit is set */
    u_int8_t    regClassId;    /* Regulatory class id */
} REG_DMN_FREQ_BAND;

static const REG_DMN_FREQ_BAND regDmn2Ghz11gFreq[] = {} defines all the bands.

Apr 30, 2020
In G5, use ath10k CT driver: go to OpenWRT source code git and get package/kernel/ath10k-ct/ package. make menuconfig --->Kernel modules ---> Wireless Drivers, un-select akmod-ath10k, select kmod-ath10k-ct.

This need package/kernel/mac80211/Makefile package has backport 5.4.27-1, from latest OpenWRT source code. But maybe the existing G5 bacport 5.4-rc2-1 will work too, not tested.
[Appendix : laete tested and bacport 5.4-rc2-1 doesn't compile. It complains :
/home/jli/project/work/g5/mt7621-k4-14/build_dir/target-mipsel_24kc_musl/linux-ramips_mt7621/ath10k-ct-2020-04-29-3637be6f/ath10k-5.4/mac.c:10183:39: error: 'NL80211_EXT_FEATURE_AQL' undeclared (first use in this function)
  wiphy_ext_feature_set(ar->hw->wiphy, NL80211_EXT_FEATURE_AQL);
                                       ^
] 

The backport will overwrite the Linux kernel tree ath10k driver. ath10k-ct will add patches to the backport. 

Apr 29, 2020
AP4531-AP-001 Rev3, a QCA9531 evaluation board. Boot up information:

root@OpenWrt:/# reboot -f
[  109.720000] reboot: Restarting system


U-Boot 1.1.4-gb6c80066-dirty (Sep 26 2017 - 17:09:47)

cus531mp3 - Honey Bee 2.0DRAM:  
sri
Honey Bee 2.0
ath_ddr_initial_config(195): (16bit) ddr2 init
ath_sys_frequency: cpu 650 ddr 597 ahb 216
tap = 0x00000003
Tap (low, high) = (0xa, 0x23)
Tap values = (0x16, 0x16, 0x16, 0x16)
128 MB
Top of RAM usable for U-Boot at: 88000000
Reserving 215k for U-Boot at: 87fc8000
Reserving 192k for malloc() at: 87f98000
Reserving 44 Bytes for Board Info at: 87f97fd4
Reserving 36 Bytes for Global Data at: 87f97fb0
Reserving 128k for boot params() at: 87f77fb0
Stack Pointer at: 87f77f98
Now running in RAM - U-Boot at: 87fc8000
Flash Manuf Id 0xef, DeviceId0 0x30, DeviceId1 0x13
flash size 0MB, sector count = 8
Flash: 512 kB
Power up PLL with outdiv = 0 then switch to 3
*** Warning *** : PCIe WLAN Module not found !!!
In:    serial
Out:   serial
Err:   serial
Net:   ath_gmac_enet_initialize...
Fetching MAC Address from 0x87febdf0
Fetching MAC Address from 0x87febdf0
ath_gmac_enet_initialize: reset mask:c02200 
Honey Bee ---->S27 PHY*
S27 reg init
: cfg1 0x800c0000 cfg2 0x7114
eth0: 00:03:7f:11:20:00
athrs27_phy_setup ATHR_PHY_CONTROL 4 :1000
athrs27_phy_setup ATHR_PHY_SPEC_STAUS 4 :10
eth0 up
Honey Bee ---->  MAC 1 S27 PHY *
S27 reg init
ATHRS27: resetting s27
ATHRS27: s27 reset done






: cfg1 0x800c0000 cfg2 0x7214
eth1: 00:03:7f:11:20:01
athrs27_phy_setup ATHR_PHY_CONTROL 0 :1000
athrs27_phy_setup ATHR_PHY_SPEC_STAUS 0 :10
athrs27_phy_setup ATHR_PHY_CONTROL 1 :1000
athrs27_phy_setup ATHR_PHY_SPEC_STAUS 1 :10
athrs27_phy_setup ATHR_PHY_CONTROL 2 :1000
athrs27_phy_setup ATHR_PHY_SPEC_STAUS 2 :10
athrs27_phy_setup ATHR_PHY_CONTROL 3 :1000
athrs27_phy_setup ATHR_PHY_SPEC_STAUS 3 :10
eth1 up
eth0, eth1
Qualcomm Atheros SPI NAND Driver, Version 0.1 (c) 2014  Qualcomm Atheros Inc.
====== NAND Parameters ======
sc = 0x87ff6f80 page = 0x800 block = 0x20000
Setting 0x181162c0 to 0x4891a100
Hit any key to stop autoboot:  0 

Loading from device 0: ath-spi-nand (offset 0x0)
   Image Name:   MIPS OpenWrt Linux-3.18.29
   Created:      2017-09-30  10:17:02 UTC
   Image Type:   MIPS Linux Kernel Image (lzma compressed)
   Data Size:    1734473 Bytes =  1.7 MB
   Load Address: 80060000
   Entry Point:  80060000
## Booting image at 81000000 ...
   Image Name:   MIPS OpenWrt Linux-3.18.29
   Created:      2017-09-30  10:17:02 UTC
   Image Type:   MIPS Linux Kernel Image (lzma compressed)
   Data Size:    1734473 Bytes =  1.7 MB
   Load Address: 80060000
   Entry Point:  80060000
   Verifying Checksum at 0x81000040 ...OK
   Uncompressing Kernel Image ... OK
No initrd
## Transferring control to Linux (at address 80060000) ...
## Giving linux memsize in bytes, 134217728

Starting kernel ...

[    0.000000] Linux version 3.18.29 (root@asiarf-VirtualBox) (gcc version 4.8.3 (OpenWrt/Linaro GCC 4.8-2014.04 r46875) ) #4 Sat Sep 30 18:16:38 CST 2
017
[    0.000000] bootconsole [early0] enabled
[    0.000000] CPU0 revision is: 00019374 (MIPS 24Kc)
[    0.000000] SoC: Qualcomm Atheros QCA9533 ver 2 rev 0
[    0.000000] Determined physical RAM map:
[    0.000000]  memory: 08000000 @ 00000000 (usable)
[    0.000000] User-defined physical RAM map:
[    0.000000]  memory: 08000000 @ 00000000 (usable)
[    0.000000] Initrd not found or empty - disabling initrd
[    0.000000] Zone ranges:
[    0.000000]   Normal   [mem 0x00000000-0x07ffffff]
[    0.000000] Movable zone start for each node
[    0.000000] Early memory node ranges
[    0.000000]   node   0: [mem 0x00000000-0x07ffffff]
[    0.000000] Initmem setup node 0 [mem 0x00000000-0x07ffffff]
[    0.000000] Primary instruction cache 64kB, VIPT, 4-way, linesize 32 bytes.
[    0.000000] Primary data cache 32kB, 4-way, VIPT, cache aliases, linesize 32 bytes
[    0.000000] Built 1 zonelists in Zone order, mobility grouping on.  Total pages: 32512
[    0.000000] Kernel command line:  board=CUS531MP3-NAND console=ttyS0,115200  ubi.mtd=5,2048 root=/dev/mtdblock8 mtdparts=spi0.0:256k(u-boot)ro,64k(u
-boot-env),128k(reserved),64k(art);spi0.1:2m(kernel),36m(rootfs),90m(data),38m@0x0(firmware) rootfstype=squashfs,jffs2 noinitrd mem=128M rootfstype=squ
ashfs,jffs2 noinitrd
[    0.000000] PID hash table entries: 512 (order: -1, 2048 bytes)
[    0.000000] Dentry cache hash table entries: 16384 (order: 4, 65536 bytes)
[    0.000000] Inode-cache hash table entries: 8192 (order: 3, 32768 bytes)
[    0.000000] Writing ErrCtl register=00000000
[    0.000000] Readback ErrCtl register=00000000
[    0.000000] Memory: 124120K/131072K available (3994K kernel code, 160K rwdata, 820K rodata, 200K init, 196K bss, 6952K reserved)
[    0.000000] SLUB: HWalign=32, Order=0-3, MinObjects=0, CPUs=1, Nodes=1
[    0.000000] NR_IRQS:51
[    0.000000] Clocks: CPU:650.000MHz, DDR:597.583MHz, AHB:216.666MHz, Ref:25.000MHz
[    0.000000] Calibrating delay loop... 432.53 BogoMIPS (lpj=2162688)
[    0.060000] pid_max: default: 32768 minimum: 301
[    0.060000] Mount-cache hash table entries: 1024 (order: 0, 4096 bytes)
[    0.070000] Mountpoint-cache hash table entries: 1024 (order: 0, 4096 bytes)
[    0.070000] Performance counters: mips/24K PMU enabled, 2 32-bit counters available to each CPU, irq 13
[    0.080000] NET: Registered protocol family 16
[    0.090000] MIPS: machine is Qualcomm Atheros CUS531 MP3 nand reference board
[    0.090000] ar724x-pci ar724x-pci.0: PCIe link is down
[    0.100000] registering PCI controller with io_map_base unset
[    0.110000] ar71xx: invalid MDIO id 1
[    0.560000] usbcore: registered new interface driver usbfs
[    0.560000] usbcore: registered new interface driver hub
[    0.570000] usbcore: registered new device driver usb
[    0.570000] i2c-gpio i2c-gpio.0: using pins 17 (SDA) and 16 (SCL)
[    0.580000] PCI host bridge to bus 0000:00
[    0.580000] pci_bus 0000:00: root bus resource [mem 0x10000000-0x11ffffff]
[    0.590000] pci_bus 0000:00: root bus resource [io  0x0000]
[    0.590000] pci_bus 0000:00: No busn resource found for root bus, will use [bus 00-ff]
[    0.600000] Bluetooth: Core ver 2.19
[    0.600000] NET: Registered protocol family 31
[    0.600000] Bluetooth: HCI device and connection manager initialized
[    0.610000] Bluetooth: HCI socket layer initialized
[    0.610000] Bluetooth: L2CAP socket layer initialized
[    0.620000] Bluetooth: SCO socket layer initialized
[    0.620000] Switched to clocksource MIPS
[    0.630000] NET: Registered protocol family 2
[    0.630000] TCP established hash table entries: 1024 (order: 0, 4096 bytes)
[    0.630000] TCP bind hash table entries: 1024 (order: 0, 4096 bytes)
[    0.640000] TCP: Hash tables configured (established 1024 bind 1024)
[    0.650000] TCP: reno registered
[    0.650000] UDP hash table entries: 256 (order: 0, 4096 bytes)
[    0.660000] UDP-Lite hash table entries: 256 (order: 0, 4096 bytes)
[    0.660000] NET: Registered protocol family 1
[    0.670000] futex hash table entries: 256 (order: -1, 3072 bytes)
[    0.680000] squashfs: version 4.0 (2009/01/31) Phillip Lougher
[    0.690000] jffs2: version 2.2 (NAND) (SUMMARY) (LZMA) (RTIME) (CMODE_PRIORITY) (c) 2001-2006 Red Hat, Inc.
[    0.700000] msgmni has been set to 242
[    0.710000] io scheduler noop registered
[    0.710000] io scheduler deadline registered (default)
[    0.720000] Serial: 8250/16550 driver, 1 ports, IRQ sharing disabled
[    0.720000] console [ttyS0] disabled
[    0.750000] serial8250.0: ttyS0 at MMIO 0x18020000 (irq = 11, base_baud = 1562500) is a 16550A
[    0.760000] console [ttyS0] enabled
[    0.760000] console [ttyS0] enabled
[    0.760000] bootconsole [early0] disabled
[    0.760000] bootconsole [early0] disabled
[    0.770000] m25p80 spi0.0: found w25x40, expected m25p80
[    0.780000] m25p80 spi0.0: w25x40 (512 Kbytes)
[    0.780000] 4 cmdlinepart partitions found on MTD device spi0.0
[    0.790000] Creating 4 MTD partitions on "spi0.0":
[    0.800000] 0x000000000000-0x000000040000 : "u-boot"
[    0.800000] 0x000000040000-0x000000050000 : "u-boot-env"
[    0.810000] 0x000000050000-0x000000070000 : "reserved"
[    0.810000] 0x000000070000-0x000000080000 : "art"
[    0.820000] nand: device found, Manufacturer ID: 0xef, Chip ID: 0xaa
[    0.830000] nand: Winbond W25N01GV 1G 3.3V 8-bit
[    0.830000] nand: 128MiB, SLC, page size: 2048, OOB size: 64
[    0.840000] Scanning device for bad blocks
[    0.910000] 4 cmdlinepart partitions found on MTD device spi0.1
[    0.920000] Creating 4 MTD partitions on "spi0.1":
[    0.920000] 0x000000000000-0x000000200000 : "kernel"
[    0.930000] 0x000000200000-0x000002600000 : "rootfs"
[    0.930000] mtd: device 5 (rootfs) set to be root filesystem
[    0.940000] mtdsplit: no squashfs found in "rootfs"
[    0.940000] mtdsplit: no squashfs found in "spi0.1"
[    0.950000] 0x000002600000-0x000008000000 : "data"
[    0.950000] 0x000000000000-0x000002600000 : "firmware"
[    0.990000] libphy: ag71xx_mdio: probed
[    1.590000] ag71xx ag71xx.0: connected to PHY at ag71xx-mdio.1:04 [uid=004dd042, driver=Generic PHY]
[    1.600000] eth0: Atheros AG71xx at 0xb9000000, irq 4, mode:MII
[    2.190000] ag71xx-mdio.1: Found an AR934X built-in switch
[    2.230000] eth1: Atheros AG71xx at 0xba000000, irq 5, mode:GMII
[    2.240000] PPP generic driver version 2.4.2
[    2.240000] PPP BSD Compression module registered
[    2.250000] PPP Deflate Compression module registered
[    2.250000] PPP MPPE Compression module registered
[    2.260000] NET: Registered protocol family 24
[    2.260000] SLIP: version 0.8.4-NET3.019-NEWTTY (dynamic channels, max=256).
[    2.270000] usbcore: registered new interface driver sierra_net
[    2.280000] usbcore: registered new interface driver qmi_wwan
[    2.280000] ehci_hcd: USB 2.0 'Enhanced' Host Controller (EHCI) Driver
[    2.290000] ehci-pci: EHCI PCI platform driver
[    2.290000] ehci-platform: EHCI generic platform driver
[    2.300000] ehci-platform ehci-platform: EHCI Host Controller
[    2.300000] ehci-platform ehci-platform: new USB bus registered, assigned bus number 1
[    2.310000] ehci-platform ehci-platform: irq 3, io mem 0x1b000000
[    2.340000] ehci-platform ehci-platform: USB 2.0 started, EHCI 1.00
[    2.340000] hub 1-0:1.0: USB hub found
[    2.350000] hub 1-0:1.0: 1 port detected
[    2.350000] ohci_hcd: USB 1.1 'Open' Host Controller (OHCI) Driver
[    2.360000] ohci-pci: OHCI PCI platform driver
[    2.360000] ohci-platform: OHCI generic platform driver
[    2.370000] usbcore: registered new interface driver cdc_acm
[    2.370000] cdc_acm: USB Abstract Control Model driver for USB modems and ISDN adapters
[    2.380000] usbcore: registered new interface driver cdc_wdm
[    2.390000] usbcore: registered new interface driver usbserial
[    2.390000] usbcore: registered new interface driver usbserial_generic
[    2.400000] usbserial: USB Serial support registered for generic
[    2.410000] usbcore: registered new interface driver option
[    2.410000] usbserial: USB Serial support registered for GSM modem (1-port)
[    2.420000] usbcore: registered new interface driver qcserial
[    2.430000] usbserial: USB Serial support registered for Qualcomm USB modem
[    2.430000] Bluetooth: HCI UART driver ver 2.2
[    2.440000] Bluetooth: HCI H4 protocol initialized
[    2.440000] Bluetooth: HCI BCSP protocol initialized
[    2.450000] Bluetooth: HCIATH3K protocol initialized
[    2.450000] TCP: cubic registered
[    2.460000] NET: Registered protocol family 10
[    2.470000] NET: Registered protocol family 17
[    2.470000] bridge: automatic filtering via arp/ip/ip6tables has been deprecated. Update your scripts to load br_netfilter if you need this.
[    2.480000] 8021q: 802.1Q VLAN Support v1.8
[    2.490000] UBI: attaching mtd5 to ubi0
[    2.910000] usb 1-1: new high-speed USB device number 2 using ehci-platform
[    3.060000] UBI: scanning is finished
[    3.070000] hub 1-1:1.0: USB hub found
[    3.090000] hub 1-1:1.0: 4 ports detected
[    3.100000] UBI: attached mtd5 (name "rootfs", size 36 MiB) to ubi0
[    3.110000] UBI: PEB size: 131072 bytes (128 KiB), LEB size: 126976 bytes
[    3.110000] UBI: min./max. I/O unit sizes: 2048/2048, sub-page size 2048
[    3.120000] UBI: VID header offset: 2048 (aligned 2048), data offset: 4096
[    3.130000] UBI: good PEBs: 288, bad PEBs: 0, corrupted PEBs: 0
[    3.130000] UBI: user volume: 2, internal volumes: 1, max. volumes count: 128
[    3.140000] UBI: max/mean erase counter: 174/61, WL threshold: 4096, image sequence number: 1310830454
[    3.150000] UBI: available PEBs: 0, total reserved PEBs: 288, PEBs reserved for bad PEB handling: 20
[    3.160000] UBI: background thread "ubi_bgt0d" started, PID 360
[    3.180000] VFS: Mounted root (squashfs filesystem) readonly on device 31:8.
[    3.190000] Freeing unused kernel memory: 200K (8053e000 - 80570000)
[    3.660000] usb 1-1.2: new high-speed USB device number 3 using ehci-platform
[    3.860000] hub 1-1.2:1.0: USB hub found
[    3.870000] hub 1-1.2:1.0: 4 ports detected
[    4.520000] init: Console is alive
[    4.520000] init: - watchdog -
[    4.600000] usb 1-1.2.1: new full-speed USB device number 4 using ehci-platform
[    6.200000] Button Hotplug driver version 0.4.1
[    6.210000] exFAT: Version 1.2.9
[    6.220000] SCSI subsystem initialized
[    6.230000] sdhci: Secure Digital Host Controller Interface driver
[    6.240000] sdhci: Copyright(c) Pierre Ossman
[    6.240000] sdhci-pltfm: SDHCI platform and OF driver helper
[    6.250000] usbcore: registered new interface driver usb-storage
[    6.530000] init: - preinit -
[    7.110000] IPv6: ADDRCONF(NETDEV_UP): eth0: link is not ready
[    7.150000] random: mktemp urandom read with 14 bits of entropy available
Press the [f] key and hit [enter] to enter failsafe mode
Press the [1], [2], [3] or [4] key and hit [enter] to select the debug level
Before mount_root
[   10.330000] jffs2: write-buffering enabled buffer (2048) erasesize (126976)
[   10.470000] jffs2: notice: (440) jffs2_build_xattr_subsystem: complete building xattr subsystem, 0 of xdatum (0 unchecked, 0 orphan) and 0 of xref (
0 dead, 0 orphan) found.
[   10.500000] mount_root: switching to jffs2 overlay
After mount_root
[   10.550000] procd: - early -
[   10.550000] procd: - watchdog -
[   11.410000] procd: - ubus -
[   12.420000] procd: - init -
Please press Enter to activate this console.
[   15.590000] ntfs: driver 2.1.31 [Flags: R/O MODULE].
[   15.620000] ip6_tables: (C) 2000-2006 Netfilter Core Team
[   15.630000] i2c /dev entries driver
[   15.640000] hidraw: raw HID events driver (C) Jiri Kosina
[   15.660000] u32 classifier
[   15.670000]     input device check on
[   15.670000]     Actions configured
[   15.680000] Mirror/redirect action on
[   15.690000] nf_conntrack version 0.5.0 (1942 buckets, 7768 max)
[   15.700000] Bluetooth: BNEP (Ethernet Emulation) ver 1.3
[   15.710000] Bluetooth: BNEP filters: protocol multicast
[   15.710000] Bluetooth: BNEP socket layer initialized
[   15.720000] usbcore: registered new interface driver btusb
[   15.740000] Loading modules backported from Linux version v3.18-116968-g4eda960
[   15.750000] Backport generated by backports.git backports-20160216-0-ge3c56e4
[   15.760000] Bluetooth: HIDP (Human Interface Emulation) ver 1.2
[   15.760000] Bluetooth: HIDP socket layer initialized
[   15.780000] ip_tables: (C) 2000-2006 Netfilter Core Team
[   15.800000] nf_conntrack_rtsp v0.6.21 loading
[   15.860000] nf_nat_rtsp v0.6.21 loading
[   15.870000] usbcore: registered new interface driver pl2303
[   15.880000] usbserial: USB Serial support registered for pl2303
[   15.910000] Bluetooth: RFCOMM TTY layer initialized
[   15.910000] Bluetooth: RFCOMM socket layer initialized
[   15.920000] Bluetooth: RFCOMM ver 1.11
[   16.110000] xt_time: kernel timezone is -0000
[   16.440000] ###################################################
[   16.450000] BTCOEX:Disabled
[   16.450000]  priority_time:2
[   16.450000]  first_slot_time:18
[   16.450000]  wl_active_time:0
[   16.450000]  wl_qc_time:0
[   16.450000]  time_extend:10
[   16.450000]  ack_cts:0
[   16.450000]  btcoex_period:45
[   16.450000]  btcoex_duty_cycle:40
[   16.470000] ###################################################
[   16.490000] ieee80211 phy0: Atheros AR9531 Rev:2 mem=0xb8100000, irq=47



BusyBox v1.23.2 (2017-09-26 18:13:54 CST) built-in shell (ash)

     MM           NM                    MMMMMMM          M       M
   $MMMMM        MMMMM                MMMMMMMMMMM      MMM     MMM
  MMMMMMMM     MM MMMMM.              MMMMM:MMMMMM:   MMMM   MMMMM
MMMM= MMMMMM  MMM   MMMM       MMMMM   MMMM  MMMMMM   MMMM  MMMMM'
MMMM=  MMMMM MMMM    MM       MMMMM    MMMM    MMMM   MMMMNMMMMM
MMMM=   MMMM  MMMMM          MMMMM     MMMM    MMMM   MMMMMMMM
MMMM=   MMMM   MMMMMM       MMMMM      MMMM    MMMM   MMMMMMMMM
MMMM=   MMMM     MMMMM,    NMMMMMMMM   MMMM    MMMM   MMMMMMMMMMM
MMMM=   MMMM      MMMMMM   MMMMMMMM    MMMM    MMMM   MMMM  MMMMMM
MMMM=   MMMM   MM    MMMM    MMMM      MMMM    MMMM   MMMM    MMMM
MMMM$ ,MMMMM  MMMMM  MMMM    MMM       MMMM   MMMMM   MMMM    MMMM
  MMMMMMM:      MMMMMMM     M         MMMMMMMMMMMM  MMMMMMM MMMMMMM
    MMMMMM       MMMMN     M           MMMMMMMMM      MMMM    MMMM
     MMMM          M                    MMMMMMM        M       M
       M
 ---------------------------------------------------------------
   For those about to rock... (NHSS.ILQ, r46875)
 ---------------------------------------------------------------
root@OpenWrt:/# 
root@OpenWrt:/# uname [   27.610000] device eth0 entered promiscuous mode
[   27.640000] IPv6: ADDRCONF(NETDEV_UP): br-lan: link is not ready
[   27.720000] IPv6: ADDRCONF(NETDEV_UP): eth1: link is not ready
[   29.330000] IPv6: ADDRCONF(NETDEV_UP): wlan0: link is not ready
 -a[   34.580000] usb 1-1.2.1: USB disconnect, device number 4

[   34.860000] usb 1-1.2.1: new full-speed USB device number 5 using ehci-platform
Linux OpenWrt 3.18.29 #4 Sat Sep 30 18:16:38 CST 2017 mips GNU/Linux
root@OpenWrt:/# 
root@OpenWrt:/# 
root@OpenWrt:/# 
root@OpenWrt:/# uname  -a
Linux OpenWrt 3.18.29 #4 Sat Sep 30 18:16:38 CST 2017 mips GNU/Linux
root@OpenWrt:/# 
root@OpenWrt:/# [   43.700000] random: nonblocking pool is initialized

root@OpenWrt:/# ifconfig 
br-lan    Link encap:Ethernet  HWaddr 00:03:7F:11:20:00  
          inet addr:192.168.168.10  Bcast:192.168.168.255  Mask:255.255.255.0
          UP BROADCAST MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)

eth0      Link encap:Ethernet  HWaddr 00:03:7F:11:20:00  
          UP BROADCAST MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
          Interrupt:4 

eth1      Link encap:Ethernet  HWaddr 00:03:7F:11:20:01  
          UP BROADCAST MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
          Interrupt:5 

lo        Link encap:Local Loopback  
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:1586 errors:0 dropped:0 overruns:0 frame:0
          TX packets:1586 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:109386 (106.8 KiB)  TX bytes:109386 (106.8 KiB)

wlan0     Link encap:Ethernet  HWaddr 00:03:7F:4E:A0:C1  
          UP BROADCAST MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)

root@OpenWrt:/# cat /proc/cpuinfo 
system type             : Qualcomm Atheros QCA9533 ver 2 rev 0
machine                 : Qualcomm Atheros CUS531 MP3 nand reference board
processor               : 0
cpu model               : MIPS 24Kc V7.4
BogoMIPS                : 432.53
wait instruction        : yes
microsecond timers      : yes
tlb_entries             : 16
extra interrupt vector  : yes
hardware watchpoint     : yes, count: 4, address/irw mask: [0x0ffc, 0x0ffc, 0x0ffb, 0x0ffb]
isa                     : mips1 mips2 mips32r1 mips32r2
ASEs implemented        : mips16
shadow register sets    : 1
kscratch registers      : 0
package                 : 0
core                    : 0
VCED exceptions         : not available
VCEI exceptions         : not available


Apr 27, 2020
Use CT ath10k firmware:
[   20.692529] ath10k_pci 0000:01:00.0: firmware ver 10.1-ct-8x-__fW-022-538f0906 api 2 features wmi-10.x,has-wmi-mgmt-tx,mfp crc32 e1c91a74
[   20.734024] ath10k_pci 0000:01:00.0: found invalid board magic

CT says : The community version supports all features EXCEPT connecting multipe vifs to the same AP when using encryption. But I created 3 SSIDs (vifs) with WPA2 and they all worked. Try 2 STAs connected to 2 SSIDs PING works to both STAs.

ath10k official f/w : https://github.com/kvalo/ath10k-firmware
ath10k-ct driver : https://github.com/greearb/ath10k-ct

Apr 24, 2020
ART program can't force the TX/RX chain by code. The chain mask is determined by the ART calibration data. Even though you specify the chain masks by MCART, the EEPROM data has higher priority.
In static int ParseInput(int client):
	//
	//  restrict chain mask to maximum supported by chip
	//
	_LinkRxChain&=CardRxChainMask();	// input chain masks is constrained by the EEPROM data.
	_LinkTxChain&=CardTxChainMask();

Apr 23, 2020
DescriptorLinkTxComplete() is for the continuous TX loop.

        if (!DeviceIsEmbeddedArt())
        {
		temp=DeviceTemperatureGet(1);
		// this line prints out that means this qca9531 is NOT embedded art.
		UserPrint("LinkTransmitStatPrint(): temp %d _LinkChipTemperature %d\n", temp, _LinkChipTemperature);
        }

Apr 21, 2020
QDART can not set freq=2413. CardResetIfNeeded()--->CardResetDo()--->DeviceReset()--->_Device.Reset()--->static struct _DeviceFunction _Ar9300Device.Ar9300Reset ---> AH->ah_reset ---> ar9300_reset() ---> ar9300_check_chan().

PWii ART2 initializes so many channels, step 1MHz:
MyRegisterWrite , address=b8040030, value=71300
ath_hal_attach duration: 16=-261503533--261503549 ms
===MHX3.0(ath_hal_init_channels) chan: 2312 flags: 0xc0 
===MHX3.0(ath_hal_init_channels) chan: 2312 flags: 0x40c0 
===MHX3.0(ath_hal_init_channels) chan: 2312 flags: 0x80c0 
===MHX3.0(ath_hal_init_channels) chan: 2312 flags: 0x10080 
===MHX3.0(ath_hal_init_channels) chan: 2312 flags: 0x14080 
===MHX3.0(ath_hal_init_channels) chan: 2312 flags: 0x18080 
===MHX3.0(ath_hal_init_channels) chan: 2312 flags: 0x20080 
===MHX3.0(ath_hal_init_channels) chan: 2312 flags: 0x24080 
===MHX3.0(ath_hal_init_channels) chan: 2312 flags: 0x28080 
===MHX3.0(ath_hal_init_channels) chan: 2313 flags: 0xc0 
===MHX3.0(ath_hal_init_channels) chan: 2313 flags: 0x40c0 
===MHX3.0(ath_hal_init_channels) chan: 2313 flags: 0x80c0 
===MHX3.0(ath_hal_init_channels) chan: 2313 flags: 0x10080 
===MHX3.0(ath_hal_init_channels) chan: 2313 flags: 0x14080 
===MHX3.0(ath_hal_init_channels) chan: 2313 flags: 0x18080 
===MHX3.0(ath_hal_init_channels) chan: 2313 flags: 0x20080 
===MHX3.0(ath_hal_init_channels) chan: 2313 flags: 0x24080 
===MHX3.0(ath_hal_init_channels) chan: 2313 flags: 0x28080 
===MHX3.0(ath_hal_init_channels) chan: 2314 flags: 0xc0 
===MHX3.0(ath_hal_init_channels) chan: 2314 flags: 0x40c0 
===MHX3.0(ath_hal_init_channels) chan: 2314 flags: 0x80c0 
===MHX3.0(ath_hal_init_channels) chan: 2314 flags: 0x10080 
===MHX3.0(ath_hal_init_channels) chan: 2314 flags: 0x14080 
===MHX3.0(ath_hal_init_channels) chan: 2314 flags: 0x18080 
===MHX3.0(ath_hal_init_channels) chan: 2314 flags: 0x20080 
===MHX3.0(ath_hal_init_channels) chan: 2314 flags: 0x24080 
===MHX3.0(ath_hal_init_channels) chan: 2314 flags: 0x28080 
===MHX3.0(ath_hal_init_channels) chan: 2315 flags: 0xc0 
===MHX3.0(ath_hal_init_channels) chan: 2315 flags: 0x40c0 
===MHX3.0(ath_hal_init_channels) chan: 2315 flags: 0x80c0 
===MHX3.0(ath_hal_init_channels) chan: 2315 flags: 0x10080 
===MHX3.0(ath_hal_init_channels) chan: 2315 flags: 0x14080 
===MHX3.0(ath_hal_init_channels) chan: 2315 flags: 0x18080 
===MHX3.0(ath_hal_init_channels) chan: 2315 flags: 0x20080 
===MHX3.0(ath_hal_init_channels) chan: 2315 flags: 0x24080 
===MHX3.0(ath_hal_init_channels) chan: 2315 flags: 0x28080 
===MHX3.0(ath_hal_init_channels) chan: 2316 flags: 0xc0 
===MHX3.0(ath_hal_init_channels) chan: 2316 flags: 0x40c0 
===MHX3.0(ath_hal_init_channels) chan: 2316 flags: 0x80c0 
===MHX3.0(ath_hal_init_channels) chan: 2316 flags: 0x10080 
===MHX3.0(ath_hal_init_channels) chan: 2316 flags: 0x14080 
===MHX3.0(ath_hal_init_channels) chan: 2316 flags: 0x18080 
===MHX3.0(ath_hal_init_channels) chan: 2316 flags: 0x20080 
===MHX3.0(ath_hal_init_channels) chan: 2316 flags: 0x24080 
===MHX3.0(ath_hal_init_channels) chan: 2316 flags: 0x28080 


But in the QDART,G3.5, no matter you use PWii ART partition or use original art-dev4531.bin, channel space is 5MHz.
ath_hal_attach duration: 11=-119516060--119516071 ms
< 6011 INFO Calibration information read from flash.
< 7504 INFO |set|IniVersion|Undefined|
===MHX3.0(ath_hal_init_channels) chan: 2312 flags: 0x10080 
===MHX3.0(ath_hal_init_channels) chan: 2312 flags: 0x20080 
===MHX3.0(ath_hal_init_channels) chan: 2317 flags: 0x10080 
===MHX3.0(ath_hal_init_channels) chan: 2317 flags: 0x20080 
===MHX3.0(ath_hal_init_channels) chan: 2322 flags: 0x10080 
===MHX3.0(ath_hal_init_channels) chan: 2322 flags: 0x20080 
===MHX3.0(ath_hal_init_channels) chan: 2327 flags: 0x10080 
===MHX3.0(ath_hal_init_channels) chan: 2327 flags: 0x20080 
===MHX3.0(ath_hal_init_channels) chan: 2332 flags: 0x10080 
===MHX3.0(ath_hal_init_channels) chan: 2332 flags: 0x20080 
===MHX3.0(ath_hal_init_channels) chan: 2332 flags: 0x40080 
===MHX3.0(ath_hal_init_channels) chan: 2337 flags: 0x10080 
===MHX3.0(ath_hal_init_channels) chan: 2337 flags: 0x20080 
===MHX3.0(ath_hal_init_channels) chan: 2337 flags: 0x40080 
===MHX3.0(ath_hal_init_channels) chan: 2342 flags: 0x10080 
===MHX3.0(ath_hal_init_channels) chan: 2342 flags: 0x20080 
===MHX3.0(ath_hal_init_channels) chan: 2342 flags: 0x40080 
===MHX3.0(ath_hal_init_channels) chan: 2347 flags: 0x10080 
===MHX3.0(ath_hal_init_channels) chan: 2347 flags: 0x20080 
===MHX3.0(ath_hal_init_channels) chan: 2347 flags: 0x40080 
===MHX3.0(ath_hal_init_channels) chan: 2352 flags: 0x10080 
===MHX3.0(ath_hal_init_channels) chan: 2352 flags: 0x20080 
===MHX3.0(ath_hal_init_channels) chan: 2352 flags: 0x40080 
===MHX3.0(ath_hal_init_channels) chan: 2357 flags: 0x10080 
===MHX3.0(ath_hal_init_channels) chan: 2357 flags: 0x20080 
===MHX3.0(ath_hal_init_channels) chan: 2357 flags: 0x40080 
===MHX3.0(ath_hal_init_channels) chan: 2362 flags: 0x10080 
===MHX3.0(ath_hal_init_channels) chan: 2362 flags: 0x20080 
===MHX3.0(ath_hal_init_channels) chan: 2362 flags: 0x40080 
===MHX3.0(ath_hal_init_channels) chan: 2367 flags: 0x10080 
===MHX3.0(ath_hal_init_channels) chan: 2367 flags: 0x20080 
===MHX3.0(ath_hal_init_channels) chan: 2367 flags: 0x40080 


Apr 17, 2020
qca9531(BetaD) board is not processed with default u-boot parameters. Use this:
root@UserDevice:~# fw_printenv 
baudrate=115200
MHX_PRODUCTNAME=pX2
serverip=192.168.168.100
ipaddr=192.168.168.1
MHX_PRODUCT=MHK_BetaD
MHX_PRODUCTMODE=2
MHX_ENCRYPTIONLEVEL=63
MHX_POWERLEVEL=0
VendorId=MICROHARD
ethact=eth0
ethaddr=00:0f:92:02:8a:1b
bootargs=board=MHK_BetaD console=ttyS0,115200 root=31:4 rootfstype=squashfs,jffs2 noinitrd loglevel=0 mtdparts=spi0.0:512k(u-boot
)ro,256k(u-boot-env),256k(u-boot-env-bak),2M(kernel),25344k(rootfs),4M(mhs-data),256k(art),2M(kernel-bak),25344k(rootfs-bak),4608
k(NVM-zone),768k(pro-zone)
CONSOLE_QUIET=0
bootdelay=1
stdin=serial
stdout=serial
stderr=serial
bootcmd=bootm 0x9f100000
root@UserDevice:~# 

Apr 15, 2020
Symptom : wa-aa login page shows well. After input username/password, 404 error happens.
Solution : $ sudo vi /etc/apache2/apache2.conf , 
<Directory /var/www/>
        Options Indexes FollowSymLinks
        AllowOverride All	// Change from None to All solved this problem.
        Require all granted
</Directory>

Or add another part will work too:
# JLI : for wa-aa
<Directory /var/www/html/wa-aa>
        Options Indexes FollowSymLinks
        AllowOverride All
        Require all granted
</Directory>

======================================================================================
QDART : In tx command string, "cal=0" is translated to "calibrate=0". This is the nart.out log of Continuous TX test from START to STOP on qca9531:

> tx f=2412;txch=7;rxch=7;bc=1;retry=0;att=0;iss=0;stat=3;dump=0;pro=0;bssid=50:55:55:55:55:05;mactx=20:22:22:22:22:02;
macrx=10:11:11:11:11:01;deaf=0;reset=1;cal=0;ir=0;gi=0;pc=-1;pl=1500;ifs=-1;dur=-1;agg=0;ht40=2;bw=0;r=54;pcdac=0;pdgai
n=3;
< 7508 CONTROL BEGIN tx f=2412;txch=7;rxch=7;bc=1;retry=0;att=0;iss=0;stat=3;dump=0;pro=0;bssid=50:55:55:55:55:05;mactx
=20:22:22:22:22:02;macrx=10:11:11:11:11:01;deaf=0;reset=1;cal=0;ir=0;gi=0;pc=-1;pl=1500;ifs=-1;dur=-1;agg=0;ht40=2;bw=0
;r=54;pcdac=0;pdgain=3;
(CommandProcess) CommandWord=tx, code=3
===MHX3.0(ParseInput)ngot=1, _LinkCalibrate=0	// in function ParseInput(), case LinkParameterCalibrate.
FieldRead - cant find field BB_cca_b2.minCCApwr_2
FieldRead - cant find field BB_ext_chan_pwr_thr_2_b2.minCCApwr_ext_2
< 6004 CONTROL Device reset successfully. frequency=2412, ht40=20, tx chain=3, rx chain=3.
< 7500 CONTROL OK
_LinkTpcm 0
using gain entry 1
Error::PCI Config read32 failed::co.value=0
TxGainIndex=1 TxDacGain=0
 OFF OFFTxMany=-1 TxStatusMany=-1 TxBatchMany=200 TxDescriptorMany=400
npattern=0 pattern=7753c7e8
npattern=64 pattern=77106074
pattern: ff 87 b8 59 b7 a1 cc 24 57 5e 4b 9c  e e9 ea 50 2a be b4 1b b6 b0 5d f1 e6 9a e3 45 fd 2c 53 18  c ca c9 fb 49
 37 e5 a8 51 3b 2f 61 aa 72 18 84  2 23 23 ab 63 89 51 b3 e7 8b 72 90 4c e8 fb c0 
Packet:  8  0  0  0 ff ff ff ff ff ff 20 22 22 22 22  2 50 55 55 55 55  5  0  0 ff 87 b8 59 b7 a1 cc 24 57 5e 4b 9c  e 
e9 ea 50 2a be b4 1b b6 b0 5d f1 e6 9a e3 45 fd 2c 53 18  c ca c9 fb 
++++++++++++++++++++++++++++> start
 OFF ON ONtx start done
 ONError::PCI Config read32 failed::co.value=0
< 7501 CONTROL ON
 0[7]............................................................. 100.......................... 200...................
................................................ 300...................................................................
......... 400.......................................................................... 500............................
.........
................. 23400........................................................................... 23500...............
......................................................................... 23600........................................
..................................... 23700......> stop
 23713 Stop ON OFF 23713 Done
< 7502 CONTROL OFF
FieldRead - cant find field BB_cca_b2.minCCApwr_2
FieldRead - cant find field BB_ext_chan_pwr_thr_2_b2.minCCApwr_ext_2
chain:    0 nfc:  -113 nfcal:     1 nfpower:     1 nfTemp: -6500
chain:    1 nfc:  -113 nfcal:     1 nfpower:     1 nfTemp: -6500
LinkTransmitStatPrint(): temp 105 _LinkChipTemperature 0
Error::PCI Config read32 failed::co.value=0
< 7503 INFO |tx|frequency|tp|txchain|iss|att|pdgain|txgain|rate|pl|pc|agg||correct|throughput|error|fifo|excess|retry|d
retry|rssi|rssi00|rssi01|rssi02|rssi10|rssi11|rssi12|txgi|dacg|byte|duration|temp|volt|dpd|
Error::PCI Config read32 failed::co.value=0
Error::PCI Config read32 failed::co.value=0
< 7504 INFO |tx|2412|-1.0|3|0|0|3|0|54|1500|-1|0||23714|31078|0|0|0|0.0:23714|0.0:23714|0.0|0.0|0.0|0.0:23714|0.0|0.0|0
.0:23714|1|0|35001864|9009423|105|0|0|
< 7506 CONTROL DONE tx f=2412;txch=7;rxch=7;bc=1;retry=0;att=0;iss=0;stat=3;dump=0;pro=0;bssid=50:55:55:55:55:05;mactx=
20:22:22:22:22:02;macrx=10:11:11:11:11:01;deaf=0;reset=1;cal=0;ir=0;gi=0;pc=-1;pl=1500;ifs=-1;dur=-1;agg=0;ht40=2;bw=0;
r=54;pcdac=0;pdgain=3;



April 14, 2020
nart/cart: 
<tag=connect>
Makes a network connection between cart and nart on the specified host and port. You may 
connect to up to 3 different nart processes controlling 3 different cards. Conventionally 
instance=0 refers to the device under test (dut); instance=1 refers to the golden unit; and 
instance=2 refers to the blocker unit. 


April 3, 2020
William Umbrella/OpenDNS account : 
testtestserial@gmail.com
Test123@

Client units:
User : admin / Password : PyAqKUs#T%,6A
Ember001 96.1.12.148
Ember009 96.1.12.156
Ember0010  96.1.12.157
Ember0011 96.1.12.158

Client Umbrella/OpenDNS account :
Login URL : https://login.umbrella.com/umbrella 
ember.supprtcmo@gmail.com
FzB4ZKx*OxZ,0JCN

Try to send update to OpenDNS directly instead of to dnsomatic. 

root@MHX-odns-client-test:~# /usr/bin/wget --no-check-certificate -T 100 -O /var/run/dynamic_dns/opendns.output https://ember.supprtcmo%40gmail.com:FzB4ZKx%2AOxZ,0JCN@updates.opendns.com/nic/update?hostname=all.mhx-domain-20200403.com
--2020-04-03 11:23:32--  https://ember.supprtcmo%40gmail.com:*password*@updates.opendns.com/nic/update?hostname=all.mhx-domain-20200403.com
Resolving updates.opendns.com... 146.112.255.155
Connecting to updates.opendns.com|146.112.255.155|:443... connected.
WARNING: cannot verify updates.opendns.com's certificate, issued by 'CN=DigiCert SHA2 Secure Server CA,O=DigiCert Inc,C=US':
  Self-signed certificate encountered.
HTTP request sent, awaiting response... 401 Unauthorized
Authentication selected: Basic realm="RESTRICTED"
Reusing existing connection to updates.opendns.com:443.
HTTP request sent, awaiting response... 200 OK
Length: 6 [text/html]
Saving to: '/var/run/dynamic_dns/opendns.output'

/var/run/dynamic_dns/opend 100%[========================================>]       6  --.-KB/s    in 0s      

2020-04-03 11:23:33 (74.3 KB/s) - '/var/run/dynamic_dns/opendns.output' saved [6/6]

root@MHX-odns-client-test:~# cat var/run/dynamic_dns/opendns.output 
!yours
root@MHX-odns-client-test:~# 

[Note] : There is no "&myip=74.198.242.102" at the end to use OpenDNS update url. Otherwise the wget doesn't return.


Lihong uses a BulletAC unit as public service. After running 9 days, crashes dump:

[783588.682476] wlan0: HW problem - can not stop rx aggregation for 90:a2:5b:91:8b:d1 tid 0

[783588.682484] ------------[ cut here ]------------

[783588.682519] WARNING: CPU: 1 PID: 21118 at backports-5.4-rc2-1/net/mac80211/driver-ops.h:19 drv_ampdu_action+0x58/0x88 [mac80211]

[783588.682524] wlan0:  Failed check-sdata-in-driver check, flags: 0x9

[783588.682527] Modules linked in: pppoe ppp_async option l2tp_ppp iptable_nat cdc_mbim ath10k_pci ath10k_core ath usb_wwan rndis_host qmi_wwan pptp pppox ppp_mppe ppp_generic nf_nat_ipv4 nf_conntrack_ipv6 nf_conntrack_ipv4 mac80211 ipt_REJECT ipt_MASQUERADE huawei_cdc_ncm cfg80211 cdc_ncm cdc_ether cdc_eem xt_time xt_tcpmss xt_statistic xt_state xt_recent xt_quota xt_policy xt_pkttype xt_physdev xt_owner xt_nat xt_multiport xt_mark xt_mac xt_limit xt_length xt_iprange xt_iface xt_hl xt_helper xt_esp xt_ecn xt_dscp xt_conntrack xt_connmark xt_connlimit xt_connbytes xt_condition xt_comment xt_addrtype xt_TCPMSS xt_REDIRECT xt_NETMAP xt_LOG xt_IPMARK xt_HL xt_FLOWOFFLOAD xt_DSCP xt_CT xt_CLASSIFY usbserial usbnet slhc nf_reject_ipv4 nf_nat_redirect nf_nat_masquerade_ipv4 nf_nat nf_log_ipv4 nf_flow_table_hw

[783588.682784]  nf_flow_table nf_defrag_ipv6 nf_defrag_ipv4 nf_conntrack_rtcache nf_conntrack_netlink nf_conntrack iptable_mangle iptable_filter ipt_ah ipt_ECN ip_tables ebtable_nat ebtable_filter ebtable_broute ebt_vlan ebt_stp ebt_redirect ebt_pkttype ebt_mark_m ebt_mark ebt_limit ebt_arpnat ebt_among ebt_802_3 crc_ccitt compat_xtables compat cdc_wdm cdc_acm arptable_filter arpt_mangle arp_tables act_police act_skbedit act_mirred em_u32 cls_u32 cls_tcindex cls_flow cls_route cls_fw sch_tbf sch_sfq sch_htb sch_hfsc sch_ingress gpio_pca953x i2c_dev xt_set ip_set_list_set ip_set_hash_netiface ip_set_hash_netport ip_set_hash_netnet ip_set_hash_net ip_set_hash_netportnet ip_set_hash_mac ip_set_hash_ipportnet ip_set_hash_ipportip ip_set_hash_ipport ip_set_hash_ipmark ip_set_hash_ip ip_set_bitmap_port ip_set_bitmap_ipmac

[783588.682975]  ip_set_bitmap_ip ip_set nfnetlink ip6t_REJECT nf_reject_ipv6 nf_log_ipv6 nf_log_common ip6table_mangle ip6table_filter ip6_tables msdos ip_gre gre l2tp_ip6 l2tp_ip l2tp_eth sit l2tp_netlink l2tp_core udp_tunnel ip6_udp_tunnel ipcomp6 xfrm6_tunnel xfrm6_mode_tunnel xfrm6_mode_transport xfrm6_mode_beet esp6 ah6 ipcomp xfrm4_tunnel xfrm4_mode_tunnel xfrm4_mode_transport xfrm4_mode_beet esp4 ah4 ipip ip6_tunnel tunnel6 tunnel4 ip_tunnel tun xfrm_user xfrm_ipcomp vfat fat autofs4 nls_utf8 nls_koi8_r nls_cp1255 nls_iso8859_6 nls_iso8859_2 nls_iso8859_15 nls_iso8859_13 nls_iso8859_1 nls_cp932 nls_cp866 nls_cp864 nls_cp862 nls_cp852 nls_cp850 nls_cp775 nls_cp437 nls_cp1251 nls_cp1250 ecb mmc_block sdhci_pltfm sdhci mtk_sd mmc_core soip leds_gpio xhci_mtk xhci_plat_hcd xhci_hcd ohci_platform

[783588.683200]  ohci_hcd sd_mod scsi_mod gpio_button_hotplug ext4 jbd2 mbcache usbcore nls_base usb_common mhx_bsp mii

[783588.683246] CPU: 1 PID: 21118 Comm: kworker/1:2 Tainted: G        W       4.14.137 #0

[783588.683294] Workqueue: events_freezable ieee80211_restart_hw [mac80211]

[783588.683300] Stack : 804ed304 8e0a9944 80550000 8dd3ef00 804ed398 8ea84500 00000009 00000013

[783588.683329]         8ea710d8 80074da8 8e43483c 00000001 80550000 00000001 8e0a9908 2833801a

[783588.683358]         00000000 00000000 00000000 0000c5f8 00000001 00000000 00000212 00000000

[783588.683386]         00000000 00000000 00000212 617a6565 00000000 00000000 8eaecf38 8ea84500

[783588.683415]         00000009 00000013 8ea710d8 00000001 00000018 00013a58 00000004 805c0004

[783588.683443]         ...

[783588.683451] Call Trace:

[783588.683463] [<800105e4>] show_stack+0x58/0x100

[783588.683472] [<80431364>] dump_stack+0x94/0xd0

[783588.683482] [<80032ee4>] __warn+0xe0/0x114

[783588.683491] [<80032f48>] warn_slowpath_fmt+0x30/0x3c

[783588.683532] [<8ea84500>] drv_ampdu_action+0x58/0x88 [mac80211]

[783588.683590] [<8ea92408>] ___ieee80211_stop_rx_ba_session+0xb4/0x168 [mac80211]

[783588.683650] [<8ea90108>] ieee80211_sta_tear_down_BA_sessions+0x64/0x150 [mac80211]

[783588.683708] [<8ea84cac>] ieee80211_sta_eosp+0x66c/0xad8 [mac80211]

[783588.683767] [<8ea88e88>] __sta_info_flush+0xb4/0x1bc [mac80211]

[783588.683826] [<8eaa0de8>] ieee80211_nan_func_match+0x1cf4/0x29c0 [mac80211]

[783588.683862] ---[ end trace 734dcf67b9b367b2 ]---

[783588.683868] wlan0: HW problem - can not stop rx aggregation for 90:a2:5b:91:8b:d1 tid 1

[783588.683898] ------------[ cut here ]------------

[783588.683934] WARNING: CPU: 1 PID: 21118 at backports-5.4-rc2-1/net/mac80211/driver-ops.h:19 ieee80211_sta_eosp+0x784/0xad8 [mac80211]

[783588.683939] wlan0:  Failed check-sdata-in-driver check, flags: 0x9

[783588.683942] Modules linked in: pppoe ppp_async option l2tp_ppp iptable_nat cdc_mbim ath10k_pci ath10k_core ath usb_wwan rndis_host qmi_wwan pptp pppox ppp_mppe ppp_generic nf_nat_ipv4 nf_conntrack_ipv6 nf_conntrack_ipv4 mac80211 ipt_REJECT ipt_MASQUERADE huawei_cdc_ncm cfg80211 cdc_ncm cdc_ether cdc_eem xt_time xt_tcpmss xt_statistic xt_state xt_recent xt_quota xt_policy xt_pkttype xt_physdev xt_owner xt_nat xt_multiport xt_mark xt_mac xt_limit xt_length xt_iprange xt_iface xt_hl xt_helper xt_esp xt_ecn xt_dscp xt_conntrack xt_connmark xt_connlimit xt_connbytes xt_condition xt_comment xt_addrtype xt_TCPMSS xt_REDIRECT xt_NETMAP xt_LOG xt_IPMARK xt_HL xt_FLOWOFFLOAD xt_DSCP xt_CT xt_CLASSIFY usbserial usbnet slhc nf_reject_ipv4 nf_nat_redirect nf_nat_masquerade_ipv4 nf_nat nf_log_ipv4 nf_flow_table_hw

[783588.684169]  nf_flow_table nf_defrag_ipv6 nf_defrag_ipv4 nf_conntrack_rtcache nf_conntrack_netlink nf_conntrack iptable_mangle iptable_filter ipt_ah ipt_ECN ip_tables ebtable_nat ebtable_filter ebtable_broute ebt_vlan ebt_stp ebt_redirect ebt_pkttype ebt_mark_m ebt_mark ebt_limit ebt_arpnat ebt_among ebt_802_3 crc_ccitt compat_xtables compat cdc_wdm cdc_acm arptable_filter arpt_mangle arp_tables act_police act_skbedit act_mirred em_u32 cls_u32 cls_tcindex cls_flow cls_route cls_fw sch_tbf sch_sfq sch_htb sch_hfsc sch_ingress gpio_pca953x i2c_dev xt_set ip_set_list_set ip_set_hash_netiface ip_set_hash_netport ip_set_hash_netnet ip_set_hash_net ip_set_hash_netportnet ip_set_hash_mac ip_set_hash_ipportnet ip_set_hash_ipportip ip_set_hash_ipport ip_set_hash_ipmark ip_set_hash_ip ip_set_bitmap_port ip_set_bitmap_ipmac

[783588.684371]  ip_set_bitmap_ip ip_set nfnetlink ip6t_REJECT nf_reject_ipv6 nf_log_ipv6 nf_log_common ip6table_mangle ip6table_filter ip6_tables msdos ip_gre gre l2tp_ip6 l2tp_ip l2tp_eth sit l2tp_netlink l2tp_core udp_tunnel ip6_udp_tunnel ipcomp6 xfrm6_tunnel xfrm6_mode_tunnel xfrm6_mode_transport xfrm6_mode_beet esp6 ah6 ipcomp xfrm4_tunnel xfrm4_mode_tunnel xfrm4_mode_transport xfrm4_mode_beet esp4 ah4 ipip ip6_tunnel tunnel6 tunnel4 ip_tunnel tun xfrm_user xfrm_ipcomp vfat fat autofs4 nls_utf8 nls_koi8_r nls_cp1255 nls_iso8859_6 nls_iso8859_2 nls_iso8859_15 nls_iso8859_13 nls_iso8859_1 nls_cp932 nls_cp866 nls_cp864 nls_cp862 nls_cp852 nls_cp850 nls_cp775 nls_cp437 nls_cp1251 nls_cp1250 ecb mmc_block sdhci_pltfm sdhci mtk_sd mmc_core soip leds_gpio xhci_mtk xhci_plat_hcd xhci_hcd ohci_platform

[783588.684604]  ohci_hcd sd_mod scsi_mod gpio_button_hotplug ext4 jbd2 mbcache usbcore nls_base usb_common mhx_bsp mii

[783588.684649] CPU: 1 PID: 21118 Comm: kworker/1:2 Tainted: G        W       4.14.137 #0

[783588.684696] Workqueue: events_freezable ieee80211_restart_hw [mac80211]

[783588.684702] Stack : 804ed304 8e0a99ec 80550000 8dd3ef00 804ed398 8ea84dc4 00000009 00000013

[783588.684731]         8ea710d8 80074da8 8e43483c 00000001 80550000 00000001 8e0a99b0 2833801a

[783588.684787]         00000000 00000000 00000000 0000d730 00000001 00000000 0000022e 00000000

[783588.684838]         00000000 00000000 0000022e 617a6565 00000000 00000000 8eaecff0 8ea84dc4

[783588.684866]         00000009 00000013 8ea710d8 00000001 00000018 00012920 00000004 805c0004

[783588.684894]         ...

[783588.684903] Call Trace:

[783588.684919] [<800105e4>] show_stack+0x58/0x100

[783588.684928] [<80431364>] dump_stack+0x94/0xd0

[783588.684939] [<80032ee4>] __warn+0xe0/0x114

[783588.684948] [<80032f48>] warn_slowpath_fmt+0x30/0x3c

[783588.684996] [<8ea84dc4>] ieee80211_sta_eosp+0x784/0xad8 [mac80211]

[783588.685054] [<8ea88e88>] __sta_info_flush+0xb4/0x1bc [mac80211]

[783588.685113] [<8eaa0de8>] ieee80211_nan_func_match+0x1cf4/0x29c0 [mac80211]

[783588.685177] ---[ end trace 734dcf67b9b367b3 ]---

[783588.685187] ------------[ cut here ]------------

[783588.685226] WARNING: CPU: 1 PID: 21118 at backports-5.4-rc2-1/net/mac80211/driver-ops.h:19 drv_ampdu_action+0x58/0x88 [mac80211]

[783588.685231] wlan0:  Failed check-sdata-in-driver check, flags: 0x9

[783588.685234] Modules linked in: pppoe ppp_async option l2tp_ppp iptable_nat cdc_mbim ath10k_pci ath10k_core ath usb_wwan rndis_host qmi_wwan pptp pppox ppp_mppe ppp_generic nf_nat_ipv4 nf_conntrack_ipv6 nf_conntrack_ipv4 mac80211 ipt_REJECT ipt_MASQUERADE huawei_cdc_ncm cfg80211 cdc_ncm cdc_ether cdc_eem xt_time xt_tcpmss xt_statistic xt_state xt_recent xt_quota xt_policy xt_pkttype xt_physdev xt_owner xt_nat xt_multiport xt_mark xt_mac xt_limit xt_length xt_iprange xt_iface xt_hl xt_helper xt_esp xt_ecn xt_dscp xt_conntrack xt_connmark xt_connlimit xt_connbytes xt_condition xt_comment xt_addrtype xt_TCPMSS xt_REDIRECT xt_NETMAP xt_LOG xt_IPMARK xt_HL xt_FLOWOFFLOAD xt_DSCP xt_CT xt_CLASSIFY usbserial usbnet slhc nf_reject_ipv4 nf_nat_redirect nf_nat_masquerade_ipv4 nf_nat nf_log_ipv4 nf_flow_table_hw

[783588.685465]  nf_flow_table nf_defrag_ipv6 nf_defrag_ipv4 nf_conntrack_rtcache nf_conntrack_netlink nf_conntrack iptable_mangle iptable_filter ipt_ah ipt_ECN ip_tables ebtable_nat ebtable_filter ebtable_broute ebt_vlan ebt_stp ebt_redirect ebt_pkttype ebt_mark_m ebt_mark ebt_limit ebt_arpnat ebt_among ebt_802_3 crc_ccitt compat_xtables compat cdc_wdm cdc_acm arptable_filter arpt_mangle arp_tables act_police act_skbedit act_mirred em_u32 cls_u32 cls_tcindex cls_flow cls_route cls_fw sch_tbf sch_sfq sch_htb sch_hfsc sch_ingress gpio_pca953x i2c_dev xt_set ip_set_list_set ip_set_hash_netiface ip_set_hash_netport ip_set_hash_netnet ip_set_hash_net ip_set_hash_netportnet ip_set_hash_mac ip_set_hash_ipportnet ip_set_hash_ipportip ip_set_hash_ipport ip_set_hash_ipmark ip_set_hash_ip ip_set_bitmap_port ip_set_bitmap_ipmac

[783588.685656]  ip_set_bitmap_ip ip_set nfnetlink ip6t_REJECT nf_reject_ipv6 nf_log_ipv6 nf_log_common ip6table_mangle ip6table_filter ip6_tables msdos ip_gre gre l2tp_ip6 l2tp_ip l2tp_eth sit l2tp_netlink l2tp_core udp_tunnel ip6_udp_tunnel ipcomp6 xfrm6_tunnel xfrm6_mode_tunnel xfrm6_mode_transport xfrm6_mode_beet esp6 ah6 ipcomp xfrm4_tunnel xfrm4_mode_tunnel xfrm4_mode_transport xfrm4_mode_beet esp4 ah4 ipip ip6_tunnel tunnel6 tunnel4 ip_tunnel tun xfrm_user xfrm_ipcomp vfat fat autofs4 nls_utf8 nls_koi8_r nls_cp1255 nls_iso8859_6 nls_iso8859_2 nls_iso8859_15 nls_iso8859_13 nls_iso8859_1 nls_cp932 nls_cp866 nls_cp864 nls_cp862 nls_cp852 nls_cp850 nls_cp775 nls_cp437 nls_cp1251 nls_cp1250 ecb mmc_block sdhci_pltfm sdhci mtk_sd mmc_core soip leds_gpio xhci_mtk xhci_plat_hcd xhci_hcd ohci_platform

[783588.685882]  ohci_hcd sd_mod scsi_mod gpio_button_hotplug ext4 jbd2 mbcache usbcore nls_base usb_common mhx_bsp mii

[783588.685926] CPU: 1 PID: 21118 Comm: kworker/1:2 Tainted: G        W       4.14.137 #0

[783588.685974] Workqueue: events_freezable ieee80211_restart_hw [mac80211]

[783588.685984] Stack : 804ed304 8e0a9944 80550000 8dd3ef00 804ed398 8ea84500 00000009 00000013

[783588.686027]         8ea710d8 80074da8 8e43483c 00000001 80550000 00000001 8e0a9908 2833801a

[783588.686055]         00000000 00000000 00000000 0000e710 00000001 00000000 00000246 00000000

[783588.686084]         00000000 00000000 00000246 617a6565 00000000 00000000 8eaecf38 8ea84500

[783588.686122]         00000009 00000013 8ea710d8 00000001 00000018 00011940 00000004 805c0004

[783588.686153]         ...

[783588.686161] Call Trace:

[783588.686175] [<800105e4>] show_stack+0x58/0x100

[783588.686184] [<80431364>] dump_stack+0x94/0xd0

[783588.686195] [<80032ee4>] __warn+0xe0/0x114

[783588.686204] [<80032f48>] warn_slowpath_fmt+0x30/0x3c

[783588.686252] [<8ea84500>] drv_ampdu_action+0x58/0x88 [mac80211]

[783588.686310] [<8ea92408>] ___ieee80211_stop_rx_ba_session+0xb4/0x168 [mac80211]

[783588.686370] [<8ea90108>] ieee80211_sta_tear_down_BA_sessions+0x64/0x150 [mac80211]

[783588.686429] [<8ea84cac>] ieee80211_sta_eosp+0x66c/0xad8 [mac80211]

[783588.686488] [<8ea88e88>] __sta_info_flush+0xb4/0x1bc [mac80211]

[783588.686547] [<8eaa0de8>] ieee80211_nan_func_match+0x1cf4/0x29c0 [mac80211]

[783588.686583] ---[ end trace 734dcf67b9b367b4 ]---

[783588.686591] wlan0: HW problem - can not stop rx aggregation for f4:8c:50:d4:27:22 tid 0

The 90:a2:5b:91:8b:d1 is a iPhone 11 client. Looks like a compatibility issue.

April 2, 2020
G3 LTE-Cube. DDNS service package is in package/network/services/updatedd/. It builds a Linux executable application updatedd, a Shell daemon customized.sh, wWebGUI, hotplug. It uses the config file /etc/config/updatedd.

April 1, 2020
NoMachine NX is a proprietary remote desktop program which offers more features compared to VNC. In the Ubnt18.04 this remote desktop server program is called nxserver.

jli@DENG-JEFFL:~$ sudo service nxserver status
● nxserver.service - NoMachine Server daemon
   Loaded: loaded (/lib/systemd/system/nxserver.service; enabled; vendor preset: enabled)
   Active: active (running) since Wed 2020-04-01 09:31:07 MDT; 7s ago
 Main PID: 20081 (nxserver.bin)
    Tasks: 9 (limit: 4915)
   CGroup: /system.slice/nxserver.service
           ├─20081 /usr/NX/bin/nxserver.bin --daemon
           └─20157 /usr/NX/bin/nxd

Apr 01 09:31:07 DENG-JEFFL systemd[1]: Started NoMachine Server daemon.
Apr 01 09:31:07 DENG-JEFFL nxexec[20156]: pam_unix(nx:session): session opened for user jli by (u
jli@DENG-JEFFL:~$ ps -aux | grep nx
nx       20081  2.5  0.4 407396 79124 ?        Ssl  09:31   0:00 /usr/NX/bin/nxserver.bin --daemon
root     20156  0.0  0.0  73928  5084 ?        S<   09:31   0:00 /usr/NX/bin/nxexec --node --user jli --priority realtime --mode 0 --pid 11
nx       20157  0.0  0.0 413116  6524 ?        Sl   09:31   0:00 /usr/NX/bin/nxd
jli      20160  1.6  0.3 1711060 61464 ?       S<l  09:31   0:00 /usr/NX/bin/nxnode.bin
jli      20197  1.4  0.2 1495444 36816 ?       Sl   09:31   0:00 /usr/NX/bin/nxclient.bin --monitor --pid 2103
jli      20392  0.0  0.0  21544  1048 pts/14   S+   09:31   0:00 grep --color=auto nx
jli@DENG-JEFFL:~$ 

OpenDNS request:
Apr 1 20:56:10 Ember000011 kern.emerg ddns-scripts[18148]: updating commandline : ["/usr/bin/wget -T 100 -O /var/run/dynamic_dns/opendns.output" "http://ember.supprtcmo%40gmail.com:FzB4ZKx%2AOxZ,0JCN@updates.dnsomatic.com/nic/update?hostname=all.dnsomatic.com&myip=96.1.12.158"]

If using DDNS page, set the customized_ddns to URL=https://${user}:${pwd}@updates.opendns.com/nic/update?hostname=${host}&myip=${ip}. And host=updates.opendns.com. Username/Password is set to OpenDNS username/password. This will be same result. 

Mar 31, 2020
Bullet-AC as AP. Check AP status with different auth scenarios.
	AP Encryption Type	iwinfo on AP
	None			none
	WPA(PSK)		Encryption: WPA PSK (TKIP, CCMP)
	WPA2(PSK)		Encryption: WPA2 PSK (CCMP)
	WPA+WPA2(PSK)		Encryption: mixed WPA/WPA2 PSK (TKIP, CCMP)

BUlletAC AP setup : 
NAS_ID=myNAS [optional]; RADIUS Server Key=mysecret[MUST have]. These are set in mySQL database(wifi_enterprise_db), table "nas", like below:
mysql> select * from nas;
+----+-----------+-----------+-------+-------+----------+--------+-----------+---------------+
| id | nasname   | shortname | type  | ports | secret   | server | community | description   |
+----+-----------+-----------+-------+-------+----------+--------+-----------+---------------+
|  1 | 0.0.0.0/0 | myNAS     | other |  NULL | mysecret | NULL   | NULL      | RADIUS Client |
+----+-----------+-----------+-------+-------+----------+--------+-----------+---------------+

Wifi client setup:
Use my cellphone: username/password=user1/user1-pwd. This is setup in /etc/freeradius/users.

	WPA RADIUS		Encryption: WPA 802.1X (CCMP)
	WPA2 RADIUS		Encryption: WPA2 802.1X (CCMP)
	WPA+WPA2 RADIUS		Encryption: mixed WPA/WPA2 802.1X (TKIP, CCMP)
	
Use a PWii to check the client iwinfo status, on the STA:
	None			Encryption: none
	WPA(PSK)		Encryption: WPA PSK (TKIP, CCMP)
	WPA2(PSK)		Encryption: WPA2 PSK (CCMP)
	WPA+WPA2(PSK)		Encryption: WPA2 PSK (TKIP, CCMP)
	WPA RADIUS		Encryption: WPA 802.1X (CCMP)
	WPA2 RADIUS		Encryption: WPA2 802.1X (CCMP)
	WPA+WPA2 RADIUS		Encryption: WPA2 802.1X (TKIP, CCMP)

[note:] Looks like 2 STAs can not use the same username/password in RADIUS mode.

=======================================

Company OpenVPN serup:
1. Set up in ubnt18.04. My original /etc/openvpn/ca.crt is lost. It was overwriten by company's ca.cert. Need to generate a new one for future.

2. Company OpenVPN certs are in /etc/openvpn/certs/ dir.

This info comes from nl80211_get_encryption() in iwinfo package. It uses nl80211_wpactl_query() function to do socket connection with wpa_suppplicant or hostapd. Just like wpa_cli and hostapd_cli applications do.

Mar 24, 2020
Set up OpenVPN server on Ubnt1802.
jli@DENG-JEFFL:/etc/openvpn$ sudo systemctl start openvpn@server-ubnt1804	// start server ok. But service command can't start this service???
jli@DENG-JEFFL:/etc/openvpn$ ll
total 68
drwxr-xr-x   5 root root  4096 Mar 24 11:55 ./
drwxr-xr-x 156 root root 12288 Mar 24 10:19 ../
-rw-r--r--   1 root root  1948 Mar 24 11:55 ca.crt
drwxr-xr-x   2 root root  4096 Nov 28 14:05 client/
-rw-r--r--   1 root root   424 Mar 24 11:55 dh2048.pem
drwxr-xr-x   3 jli  jli   4096 Mar 24 11:08 easy-rsa/
drwxr-xr-x   2 root root  4096 Mar 24 11:46 server/
-rw-r--r--   1 root root 10889 Mar 24 11:55 server-ubnt1804.conf
-rw-r--r--   1 root root  5985 Mar 24 11:55 server-ubnt1804.crt
-rw-------   1 root root  1704 Mar 24 11:55 server-ubnt1804.key
-rw-------   1 root root   636 Mar 24 11:55 ta.key
-rwxr-xr-x   1 root root  1301 May 14  2019 update-resolv-conf*
jli@DENG-JEFFL:/etc/openvpn$ ll server
total 44
drwxr-xr-x 2 root root  4096 Mar 24 11:46 ./
drwxr-xr-x 5 root root  4096 Mar 24 11:55 ../
-rw-r--r-- 1 root root  1948 Mar 24 11:35 ca.crt
-rw-r--r-- 1 root root   424 Mar 24 11:35 dh2048.pem
-rw-r--r-- 1 root root 10889 Mar 24 11:46 server-ubnt1804.conf
-rw-r--r-- 1 root root  5985 Mar 24 11:35 server-ubnt1804.crt
-rw------- 1 root root  1704 Mar 24 11:35 server-ubnt1804.key
-rw------- 1 root root   636 Mar 24 11:35 ta.key

On the Ubnt16.04 machine, run:
jli@jli-OptiPlex-7060:~$ sudo openvpn --config ~/backup/openvpn/client-ubnt1604.ovpn

Mar 18, 2020
In function ieee802_11_parse_elems_crc(), the fix for pDDL900 / pMDDL900 compatibility affects all channel 1 :
                        /*
                         * make compatible with pDDL924 that uses channel1(2391MHz)
                         */
                        if(id == WLAN_EID_DS_PARAMS && pos[0] == 1){
                                pos[0] = 97;
                        }
                        if(id == WLAN_EID_HT_OPERATION && pos[0] == 1){
                                pos[0] = 97;
                        }

This should be restricted to pMDDL900 only. Otherwise this will make all pMDDL products channel 1 fail to connect.

Mar 11, 2020
When changed /sys/module/ath9k_common/parameters/ampdu_factor_drv, just wifi command doesn't apply. You need power cycle the unit to take effect. Check the cat sys/kernel/debug/ieee80211/phy0/netdev\:wlan0/stations/00\:0f\:92\:fb\:9d\:22/ht_capa to see if the factor is REALLY negotiated to the expected value.

Mar 10, 2020
ieee80211_tx_prepare_skb (not used)---> ieee80211_tx_h_fragment.

ieee80211_tx () -----> ieee80211_tx_prepare() ---> ieee80211_tx_prep_agg()
		|----> invoke_tx_handlers() ----> ieee80211_tx_h_fragment():check IEEE80211_TX_CTL_DONTFRAG --->ieee80211_fragment()
		`---> __ieee80211_tx()	---> ieee80211_tx_frags() ---> drv_tx() ---> ath9k_tx().

//////////RX path
ath_isr()---> tasklet_schedule(&sc->intr_tq); ---> ath9k_tasklet() ---> ath_rx_tasklet() ----> ieee80211_rx -----> (BBB)

(BBB) ieee80211_rx()---> __ieee80211_rx_handle_packet---> ieee80211_prepare_and_rx_handle -----> prepare_for_handlers()
				  						    	  `-----> ieee80211_invoke_rx_handlers()------> (AAA)

(AAA) ieee80211_invoke_rx_handlers() ---------> ieee80211_rx_h_check()
				     |--------> ieee80211_rx_reorder_ampdu()
				     `--------> ieee80211_rx_handlers()


Mar 9, 2020
Alpha-K, use monitor interface or a stand alone sniffer. Can NOT capture the BlockAckRequest packet (BAR). But with debug code, ieee80211_send_bar() is called and on the receiver side, ieee80211_rx_h_ctrl() can see this BAR packet (ieee80211_is_back_req()=True).

The fact is that, not every BAK is caused by BAR. BAR doesn't send frequently, only randomly. But the BAK is always there. Looks like BAR is only sent when no BAK is received:
 * @IEEE80211_TX_STAT_AMPDU_NO_BACK: no block ack was returned,
 * 	so consider using block ack request (BAR).

=============
Test alpha-k t/p over the roof. 11G mode
wireless.radio0.frag 	Up UDP T/P(to Roof)	Down UDP T/P
2346				500k		500k
512				400k		300k
256				300k		300k

Can not see any improvements over shorter fragments. The downgrade may comes from the overhead. 

Mar 5, 2020
IN A-MPDU, the MPDU has a policy of IEEE80211_QOS_CTL_ACK_POLICY_BLOCKACK.
/* ACK policy */
#define IEEE80211_QOS_CTL_ACK_POLICY_NORMAL	0x0000
#define IEEE80211_QOS_CTL_ACK_POLICY_NOACK	0x0020
#define IEEE80211_QOS_CTL_ACK_POLICY_NO_EXPL	0x0040
#define IEEE80211_QOS_CTL_ACK_POLICY_BLOCKACK	0x0060
#define IEEE80211_QOS_CTL_ACK_POLICY_MASK	0x0060

Mar 4, 2020
About mac80211 MTU size:
/* Maximum size for the MA-UNITDATA primitive, 802.11 standard section
   6.2.1.1.2.

   802.11e clarifies the figure in section 7.1.2. The frame body is
   up to 2304 octets long (maximum MSDU size) plus any crypt overhead. */
#define IEEE80211_MAX_DATA_LEN		2304
/* 30 byte 4 addr hdr, 2 byte QoS, 2304 byte MSDU, 12 byte crypt, 4 byte FCS */
#define IEEE80211_MAX_FRAME_LEN		2352
ieee80211_change_mtu()

Use art2 to test different packet sizes:
Reduce the Throughput test packet size : OperParams.pl	        = DEF_PCKT_LEN_1000 / 10;
        Test Results
==========================================================================================
        Freq    2487    2487    2487    2487    2487    2487    2487    2487
        Rate    6       9       12      18      24      36      48      54
        CRC     0       0       0       0       0       0       0       0
        PSR     0       0       25      75      77      86      87      75
        RSSI    0       0       54      54      54      54      54      54
------------------------------------------------------------------------------------------

==========================================================================================
        Test Results
==========================================================================================
        Freq    2487    2487    2487    2487    2487    2487    2487    2487
        Rate    6       9       12      18      24      36      48      54
        CRC     0       0       0       0       0       0       0       1
        PSR     0       0       27      67      65      66      75      62
        RSSI    0       0       54      55      55      55      55      55
------------------------------------------------------------------------------------------

original value OperParams.pl	        = DEF_PCKT_LEN_1000; //1000 bytes
==========================================================================================
        Test Results
==========================================================================================
        Freq    2487    2487    2487    2487    2487    2487    2487    2487
        Rate    6       9       12      18      24      36      48      54
        CRC     0       0       0       0       2       10      6       2
        PSR     42      96      99      99      98      89      94      98
        RSSI    54      54      54      54      54      54      54      54
------------------------------------------------------------------------------------------

==========================================================================================
        Test Results
==========================================================================================
        Freq    2487    2487    2487    2487    2487    2487    2487    2487
        Rate    6       9       12      18      24      36      48      54
        CRC     0       0       0       0       5       11      9       4
        PSR     42      99      99      96      92      84      88      95
        RSSI    54      54      55      55      55      57      57      57





Another test:
Packet size = 100B
        Test Results
==========================================================================================
        Freq    2487    2487    2487    2487    2487    2487    2487    2487
        Rate    6       9       12      18      24      36      48      54
        CRC     0       0       0       0       0       0       39      65
        PSR     0       49      54      58      55      57      38      24
        RSSI    0       62      62      62      62      62      62      61
------------------------------------------------------------------------------------------

==========================================================================================
        Test Results
==========================================================================================
        Freq    2487    2487    2487    2487    2487    2487    2487    2487
        Rate    6       9       12      18      24      36      48      54
        CRC     0       0       0       1       0       0       28      52
        PSR     19      53      53      53      55      57      44      30
        RSSI    62      62      62      62      62      62      62      61
------------------------------------------------------------------------------------------

==========================================================================================
        Test Results
==========================================================================================
        Freq    2487    2487    2487    2487    2487    2487    2487    2487
        Rate    6       9       12      18      24      36      48      54
        CRC     0       0       0       0       0       1       41      64
        PSR     0       46      52      54      52      55      39      23
        RSSI    0       62      62      62      62      62      62      61
------------------------------------------------------------------------------------------



Packet size = 1000B

        Test Results
==========================================================================================
        Freq    2487    2487    2487    2487    2487    2487    2487    2487
        Rate    6       9       12      18      24      36      48      54
        CRC     0       0       1       1       0       1       82      105
        PSR     38      46      54      56      53      54      15      2
        RSSI    63      63      63      63      63      63      62      61
------------------------------------------------------------------------------------------

==========================================================================================
        Test Results
==========================================================================================
        Freq    2487    2487    2487    2487    2487    2487    2487    2487
        Rate    6       9       12      18      24      36      48      54
        CRC     0       0       0       0       0       1       80      107
        PSR     36      46      55      54      55      56      14      3
        RSSI    63      63      63      63      63      63      62      61
------------------------------------------------------------------------------------------

==========================================================================================
        Test Results
==========================================================================================
        Freq    2487    2487    2487    2487    2487    2487    2487    2487
        Rate    6       9       12      18      24      36      48      54
        CRC     0       0       0       1       0       1       86      91
        PSR     35      47      54      54      56      56      15      1
        RSSI    63      63      63      63      63      63      62      61
------------------------------------------------------------------------------------------

Test on Mar 5 morning:

Packet size = 100B
        Test Results
==========================================================================================
        Freq    2487    2487    2487    2487    2487    2487    2487    2487
        Rate    6       9       12      18      24      36      48      54
        CRC     0       0       0       0       0       0       22      37
        PSR     14      53      48      50      50      54      41      35
        RSSI    64      63      64      64      64      64      63      63
------------------------------------------------------------------------------------------

==========================================================================================
        Test Results
==========================================================================================
        Freq    2487    2487    2487    2487    2487    2487    2487    2487
        Rate    6       9       12      18      24      36      48      54
        CRC     0       0       0       0       0       0       14      44
        PSR     12      52      50      52      50      50      50      37
        RSSI    64      64      64      64      64      64      64      64
------------------------------------------------------------------------------------------

==========================================================================================
        Test Results
==========================================================================================
        Freq    2487    2487    2487    2487    2487    2487    2487    2487
        Rate    6       9       12      18      24      36      48      54
        CRC     0       0       0       0       0       0       9       31
        PSR     17      54      52      49      50      49      51      39
        RSSI    63      63      63      63      63      63      63      63
------------------------------------------------------------------------------------------

Packet size = 1000B
        Test Results
==========================================================================================
        Freq    2487    2487    2487    2487    2487    2487    2487    2487
        Rate    6       9       12      18      24      36      48      54
        CRC     0       0       0       2       0       6       84      91
        PSR     41      50      53      51      54      52      9       0
        RSSI    65      65      65      65      65      65      64      0
------------------------------------------------------------------------------------------

==========================================================================================
        Test Results
==========================================================================================
        Freq    2487    2487    2487    2487    2487    2487    2487    2487
        Rate    6       9       12      18      24      36      48      54
        CRC     0       1       0       1       0       5       88      97
        PSR     40      49      54      53      56      54      11      0
        RSSI    65      65      65      65      65      64      64      0
------------------------------------------------------------------------------------------

==========================================================================================
        Test Results
==========================================================================================
        Freq    2487    2487    2487    2487    2487    2487    2487    2487
        Rate    6       9       12      18      24      36      48      54
        CRC     0       1       1       3       0       5       98      85
        PSR     41      47      53      53      56      53      9       0
        RSSI    65      65      65      65      65      64      64      0
------------------------------------------------------------------------------------------


Feb 27, 2020
RADIUSdesk and daloRadius are all for FreeRADUIS and Hotspot accounting. Download 2 .ova files of them and tried. RADIUSdesk looks better in UI.
On Ubnt16.04, LAMP install RADIUSdesk.
1. The login page doesn't show up : need to install ExtJS :
jli@jli-OptiPlex-7060:/var/www/html/radiusdesk$ ll rd/ext
total 80
drwxrwxr-x 11 www-data www-data  4096 Nov  2  2016 ./
drwxr-xr-x 10 www-data www-data  4096 Feb 27 10:41 ../
drwxrwxr-x  2 www-data www-data  4096 Feb 27 10:41 build/
-rw-rw-r--  1 www-data www-data 24400 Nov  2  2016 build.xml
drwxrwxr-x 17 www-data www-data  4096 Feb 27 10:41 classic/
drwxrwxr-x  2 www-data www-data  4096 Feb 27 10:41 cmd/
-rw-rw-r--  1 www-data www-data  2370 Nov  2  2016 ext-bootstrap.js
drwxrwxr-x  2 www-data www-data  4096 Feb 27 10:41 licenses/
drwxrwxr-x 13 www-data www-data  4096 Nov  2  2016 modern/
-rw-rw-r--  1 www-data www-data  1481 Nov  2  2016 package.json
drwxrwxr-x 13 www-data www-data  4096 Nov  2  2016 packages/
drwxrwxr-x  3 www-data www-data  4096 Nov  2  2016 resources/
drwxrwxr-x  4 www-data www-data  4096 Nov  2  2016 sass/
drwxrwxr-x  4 www-data www-data  4096 Feb 27 10:41 .sencha/
-rw-rw-r--  1 www-data www-data   273 Nov  2  2016 version.properties

2. Login page shows up, but when use root/admin to login, browser complains "Ajax communication failure" : In some files like rd/app/controller/cLogin.js, The login url is :
urlLogin    : '/cake3/rd_cake/dashboard/authenticate.json'. But because we install the root document in /var/www/html/radiusdesk, so need to change it to : urlLogin    : '/radiusdesk/cake3/rd_cake/dashboard/authenticate.json'. Actually so many .js and .php files have this issue. Need to change "/cake3" to "/radiusradius/cake3". Use this to replace ALL the files:

sudo bash -c "grep -R --files-with-matches '/cake3/' . | sort | uniq | xargs perl -p -i.bak -e 's/\/cake3\//\/radiusdesk\/cake3\//g'"
sudo bash -c "grep -R --files-with-matches '/cake2/' . | sort | uniq | xargs perl -p -i.bak -e 's/\/cake2\//\/radiusdesk\/cake2\//g'"

WebUI login : username/password = root/admin.

Feb 25, 2020
Tried easy-hotspot from githup on Ubnt16.04. Looks like the code is based on PHP5@CodeIgniter and is too old. Access to http://127.0.0.1/easy-hotspot/htdocs/ and got errors:

A PHP Error was encountered
Severity: Notice
Message: Only variables should be passed by reference
Filename: codeigniter/Common.php
Line Number: 148

Code is 10 years old and maybe need to try other options.
HS_UAMHOMEPAGE -> The Splash Page. HS_UAMFORMAT -> The Login Page. 

YFi Hotspot Manager now has a modern replacement called RADIUSdesk

Feb 21, 2020
Test Bulletplus with StartHotspot. Hotspot WebGUI : SessionTimeout=60Sec; IdleTimeout=120Sec. 
 Redirected to a page and click "Login" button on this page, then the RADIUS exchange happens. And the RADIUS server(13.92.228.228.1812) sends back to the Bulletplus(100.111.0.3):

19:59:56.354160 00:0f:92:fe:00:02 > 00:0f:92:fe:00:01, ethertype IPv4 (0x0800), length 259: (tos 0x0, ttl 107, id 24961, offset 0, flags [none], proto UDP (17), length 245)
    13.92.228.228.1812 > 100.111.0.3.57339: RADIUS, length: 217
        Access-Accept (2), id: 0x32, Authenticator: 8b74b7cddb45bc95f3f3f832e4d0946e
          Session-Timeout Attribute (27), length: 6, Value: 8784:00:00 hours
          Vendor-Specific Attribute (26), length: 12, Value: Vendor: Wi-Fi Alliance (14122)
            Vendor Attribute: 8, Length: 4, Value: ..30
          Vendor-Specific Attribute (26), length: 12, Value: Vendor: Wi-Fi Alliance (14122)
            Vendor Attribute: 7, Length: 4, Value: ..30
          Vendor-Specific Attribute (26), length: 17, Value: Vendor: Unknown (14988)
            Vendor Attribute: 8, Length: 9, Value: 200k/200k
          Vendor-Specific Attribute (26), length: 12, Value: Vendor: Unknown (14988)
            Vendor Attribute: 1, Length: 4, Value: . ..
          Vendor-Specific Attribute (26), length: 12, Value: Vendor: Unknown (14988)
            Vendor Attribute: 2, Length: 4, Value: . ..
          Vendor-Specific Attribute (26), length: 12, Value: Vendor: Cisco (9)
            Vendor Attribute: 7, Length: 4, Value: ....
          Vendor-Specific Attribute (26), length: 12, Value: Vendor: Cisco (9)
            Vendor Attribute: 8, Length: 4, Value: ....
          Vendor-Specific Attribute (26), length: 12, Value: Vendor: Cisco (9)
            Vendor Attribute: 9, Length: 4, Value: ....
          Vendor-Specific Attribute (26), length: 12, Value: Vendor: Cisco (9)
            Vendor Attribute: 10, Length: 4, Value: ....
          Vendor-Specific Attribute (26), length: 12, Value: Vendor: Unknown (14559)
            Vendor Attribute: 3, Length: 4, Value: . ..
          Vendor-Specific Attribute (26), length: 12, Value: Vendor: Unknown (14559)
            Vendor Attribute: 23, Length: 4, Value: ....
          Vendor-Specific Attribute (26), length: 12, Value: Vendor: Unknown (14988)
            Vendor Attribute: 17, Length: 4, Value: . ..
          Vendor-Specific Attribute (26), length: 12, Value: Vendor: Unknown (14988)
            Vendor Attribute: 18, Length: 4, Value: ....
          Unknown Attribute (227), length: 6, Value: 
          Unknown Attribute (228), length: 6, Value: 
          Vendor-Specific Attribute (26), length: 12, Value: Vendor: Ascend (529)
            Vendor Attribute: 197, Length: 4, Value: . ..
          Acct-Interim-Interval Attribute (85), length: 6, Value: 01:00:00 hours

Can see the RADIUS_ATTR_SESSION_TIMEOUT(27)=8784Hr overwrites the the WebGUI setting. RADIUS_ATTR_IDLE_TIMEOUT(28) is not set so that the WebGUI 120Sec takes effect.

Idle the PC wifi client for 10min so that should have no traffic. Nothing happened on the RADIUS port on the WAN port.

Turn off the Wifi on PC. Wait for about 2mins, the coovachilli says:
Feb 21 20:13:57 kern.emerg coova-chilli[13097]: radius.c: 321: Allocating RADIUS packet
Feb 21 20:13:57 kern.emerg coova-chilli[13097]: radius.c: 1907: Received RADIUS packet id=4
Feb 21 20:13:57 kern.emerg coova-chilli[13097]: radius.c: 422: Freeing RADIUS packet
Feb 21 20:13:57 kern.emerg coova-chilli[13097]: radius.c: 427: RADIUS queue-out id=4 idx=4

And the RADIUS exchange happens:

20:13:57.394181 00:0f:92:fe:00:01 > 00:0f:92:fe:00:02, ethertype IPv4 (0x0800), length 420: (tos 0x0, ttl 64, id 8283, offset 0, flags [DF], proto UDP (17), length 406)
    100.111.0.3.3799 > 13.92.228.228.1813: RADIUS, length: 378
        Accounting-Request (4), id: 0x04, Authenticator: 8b0b526a831fa916f35ada327767e241
          Vendor-Specific Attribute (26), length: 17, Value: Vendor: Unknown (14559)
            Vendor Attribute: 8, Length: 9, Value: 1.3.1-svn
          Vendor-Specific Attribute (26), length: 12, Value: Vendor: Unknown (14559)
            Vendor Attribute: 10, Length: 4, Value: ....
          Event-Timestamp Attribute (55), length: 6, Value: Fri Feb 21 20:13:57 2020
          User-Name Attribute (1), length: 30, Value: METROBUSVILLAGE-94DBC999359A
          Acct-Input-Octets Attribute (42), length: 6, Value: 18768343
          Acct-Output-Octets Attribute (43), length: 6, Value: 1192413
          Acct-Input-Gigawords Attribute (52), length: 6, Value: 0
          Acct-Output-Gigawords Attribute (53), length: 6, Value: 0
          Acct-Input-Packets Attribute (47), length: 6, Value: 22535
          Acct-Output-Packets Attribute (48), length: 6, Value: 16924
          Acct-Session-Time Attribute (46), length: 6, Value: 14:01 min
          Acct-Terminate-Cause Attribute (49), length: 6, Value: Idle Timeout		// Send Idle Timeout to RADIUS srv
          Acct-Status-Type Attribute (40), length: 6, Value: Stop
          Acct-Session-Id Attribute (44), length: 18, Value: 5e505f6000000002
          Vendor-Specific Attribute (26), length: 54, Value: Vendor: Unknown (14559)
            Vendor Attribute: 16, Length: 46, Value: SES-94DBC999359A-000F92FE0124-5e505e2c00000002
          Framed-IP-Address Attribute (8), length: 6, Value: 192.168.182.3
          NAS-Port-Type Attribute (61), length: 6, Value: Wireless - IEEE 802.11
          NAS-Port Attribute (5), length: 6, Value: 2
          NAS-Port-Id Attribute (87), length: 10, Value: 00000002
          Calling-Station-Id Attribute (31), length: 19, Value: 94-DB-C9-99-35-9A
          Called-Station-Id Attribute (30), length: 19, Value: 00-0F-92-FE-01-24
          NAS-IP-Address Attribute (4), length: 6, Value: 192.168.182.1
          NAS-Identifier Attribute (32), length: 19, Value: 00-0F-92-04-C3-B8
          Vendor-Specific Attribute (26), length: 45, Value: Vendor: Wi-Fi Alliance (14122)
            Vendor Attribute: 1, Length: 37, Value: isocc=,cc=,ac=,network=HotSpotSystem_
          Vendor-Specific Attribute (26), length: 31, Value: Vendor: Wi-Fi Alliance (14122)
            Vendor Attribute: 2, Length: 23, Value: HotSpotSystem,microhard
        0x0000:  4500 0196 205b 4000 4011 c249 646f 0003
        0x0010:  0d5c e4e4 0ed7 0715 0182 96ab 0404 017a
        0x0020:  8b0b 526a 831f a916 f35a da32 7767 e241
        0x0030:  1a11 0000 38df 080b 312e 332e 312d 7376
        0x0040:  6e1a 0c00 0038 df0a 0600 0000 0237 065e
        0x0050:  5064 3501 1e4d 4554 524f 4255 5356 494c
        0x0060:  4c41 4745 2d39 3444 4243 3939 3933 3539
        0x0070:  412a 0601 1e61 d72b 0600 1231 dd34 0600
        0x0080:  0000 0035 0600 0000 002f 0600 0058 0730
        0x0090:  0600 0042 1c2e 0600 0003 4931 0600 0000
        0x00a0:  0428 0600 0000 022c 1235 6535 3035 6636
        0x00b0:  3030 3030 3030 3030 321a 3600 0038 df10
        0x00c0:  3053 4553 2d39 3444 4243 3939 3933 3539
        0x00d0:  412d 3030 3046 3932 4645 3031 3234 2d35
        0x00e0:  6535 3035 6532 6330 3030 3030 3030 3208
        0x00f0:  06c0 a8b6 033d 0600 0000 1305 0600 0000
        0x0100:  0257 0a30 3030 3030 3030 321f 1339 342d
        0x0110:  4442 2d43 392d 3939 2d33 352d 3941 1e13
        0x0120:  3030 2d30 462d 3932 2d46 452d 3031 2d32
        0x0130:  3404 06c0 a8b6 0120 1330 302d 3046 2d39
        0x0140:  322d 3034 2d43 332d 4238 1a2d 0000 372a
        0x0150:  0127 6973 6f63 633d 2c63 633d 2c61 633d
        0x0160:  2c6e 6574 776f 726b 3d48 6f74 5370 6f74
        0x0170:  5379 7374 656d 5f1a 1f00 0037 2a02 1948
        0x0180:  6f74 5370 6f74 5379 7374 656d 2c6d 6963
        0x0190:  726f 6861 7264
20:13:57.559168 00:0f:92:fe:00:02 > 00:0f:92:fe:00:01, ethertype IPv4 (0x0800), length 62: (tos 0x0, ttl 108, id 24963, offset 0, flags [none], proto UDP (17), length 48)
    13.92.228.228.1813 > 100.111.0.3.3799: RADIUS, length: 20
        Accounting-Response (5), id: 0x04, Authenticator: 4941cf4cdb6d511941f55f13747dbdf7
        0x0000:  4500 0030 6183 0000 6c11 9687 0d5c e4e4
        0x0010:  646f 0003 0715 0ed7 001c 756c 0504 0014
        0x0020:  4941 cf4c db6d 5119 41f5 5f13 747d bdf7

STRANGE THING: When Idle Time out is sent to RADIUS server, the iw still dumps the stations. The inactive time is already >200 seconds!!!???.


Feb 18, 2020
pMDDL-multi-band, physical channel(iw phy0 info). IF=2487MHz needs to be listed in the physical channel. So expand the channel to [1624..2488] phy channel[0..864]. Total channels 865. IF channel is ch863.

Feb 13, 2020
ART2 has a background ANI routing too:
/*
 * Do periodic processing.  This routine is called from a timer
 */
void
ar9300AniArPoll(struct ath_hal *ah, const HAL_NODE_STATS *stats,
                HAL_CHANNEL *chan, HAL_ANISTATS *ani_stats)
{



Feb 12, 2020
Some register banks about Wifi:

0x1810_0800 .. 0x1810_0A44 : WQCU Registers
0x1810_1000 .. 0x1810_1F04 : WDCU Registers
0x1810_4000 .. 0x1810_409C : WMAC Glue Registers. BB etc. registers are mapped to system by this glue logic.For AHB, the base memory is got by mem = devm_ioremap_nocache(&pdev->dev, res->start, resource_size(res));
0x1810_8000 .. 0x1810_E000 : WPCU Registers


AR9300 baseband registers map:
struct bb_reg_map {
  volatile char pad__0[0x9800];                   /*        0x0 - 0x9800     */
  struct chn_reg_map bb_chn_reg_map;              /*     0x9800 - 0x9bf0     */
  volatile char pad__1[0x10];                     /*     0x9bf0 - 0x9c00     */
  struct mrc_reg_map bb_mrc_reg_map;              /*     0x9c00 - 0x9c24     */
  volatile char pad__2[0xdc];                     /*     0x9c24 - 0x9d00     */
  struct bbb_reg_map bb_bbb_reg_map;              /*     0x9d00 - 0x9d20     */
  volatile char pad__3[0xe0];                     /*     0x9d20 - 0x9e00     */
  struct agc_reg_map bb_agc_reg_map;              /*     0x9e00 - 0xa200     */
  struct sm_reg_map bb_sm_reg_map;                /*     0xa200 - 0xa7e0     */
  volatile char pad__4[0x20];                     /*     0xa7e0 - 0xa800     */
  union {
      struct {
          struct chn1_reg_map bb_chn1_reg_map;            /*     0xa800 - 0xabf0     */
          volatile char pad__5[0x210];                    /*     0xabf0 - 0xae00     */
          struct agc1_reg_map bb_agc1_reg_map;            /*     0xae00 - 0xb200     */
          struct sm1_reg_map bb_sm1_reg_map;              /*     0xb200 - 0xb800     */
          struct chn2_reg_map bb_chn2_reg_map;            /*     0xb800 - 0xbbf0     */
          volatile char pad__6[0x210];                    /*     0xbbf0 - 0xbe00     */
          struct agc2_reg_map bb_agc2_reg_map;            /*     0xbe00 - 0xbf90     */
          volatile char pad__7[0x270];                    /*     0xbf90 - 0xc200     */
          struct sm2_reg_map bb_sm2_reg_map;              /*     0xc200 - 0xc800     */
      } Osprey;
      struct {
          struct chn_ext_reg_map bb_chn_ext_reg_map;      /*     0xa800 - 0xac00     */
          volatile char pad__5[0x600];                    /*     0xac00 - 0xb200     */
          struct sm_ext_reg_map bb_sm_ext_reg_map;        /*     0xb200 - 0xb800     */
          volatile char pad__6[0x600];                    /*     0xb800 - 0xbe00     */
          struct agc1_reg_map bb_agc1_reg_map;            /*     0xbe00 - 0xc1fc     */
          volatile char pad__7[0x4];                      /*     0xc1fc - 0xc200     */
          struct sm1_reg_map bb_sm1_reg_map;              /*     0xc200 - 0xc800     */
      } Poseidon;
  } overlay_0xa800;
  struct chn3_reg_map bb_chn3_reg_map;            /*     0xc800 - 0xcc00     */
  volatile char pad__8[0x200];                    /*     0xcc00 - 0xce00     */
  struct agc3_reg_map bb_agc3_reg_map;            /*     0xce00 - 0xcf84     */
  volatile char pad__9[0x27c];                    /*     0xcf84 - 0xd200     */
  struct sm3_reg_map bb_sm3_reg_map;              /*     0xd200 - 0xd800     */
};

pMDDL900 low sensitivity debug in driver.
enum ath9k_ani_cmd {
	ATH9K_ANI_OFDM_WEAK_SIGNAL_DETECTION = 0x1,
	ATH9K_ANI_FIRSTEP_LEVEL = 0x2,
	ATH9K_ANI_SPUR_IMMUNITY_LEVEL = 0x4,
	ATH9K_ANI_MRC_CCK = 0x8,	// not used
	ATH9K_ANI_ALL = 0xfff		// not important
};

struct ani_ofdm_level_entry {
	int spur_immunity_level;	// for ATH9K_ANI_SPUR_IMMUNITY_LEVEL command.Reg:AR_PHY_TIMING5,AR_PHY_EXT_CCA
	int fir_step_level;		// for ATH9K_ANI_FIRSTEP_LEVEL command. Reg:AR_PHY_FIND_SIG,AR_PHY_FIND_SIG_LOW
	int ofdm_weak_signal_on;	// for ATH9K_ANI_OFDM_WEAK_SIGNAL_DETECTION command. Reg:AR_PHY_SFCORR_LOW
};

static const struct ani_ofdm_level_entry ofdm_level_table[] = {
	/* SI  FS  WS */
	{  3,  2,  1  }, /* lvl 0 (default) */
	{  4,  3,  1  }, /* lvl 1 */
	{  5,  4,  1  }, /* lvl 2 */
	{  5,  4,  1  }, /* lvl 3 */
	{  6,  5,  1  }, /* lvl 4 */
	{  7,  6,  1  }, /* lvl 5 */
	{  7,  7,  1  }, /* lvl 6 */
	{  7,  8,  1  }, /* lvl 7 */
	{  7,  8,  1  }, /* lvl 8 */
	{  7,  8,  0  }  /* lvl 9 */
};

command + parameter(table value) sent to ar9003_hw_ani_control().

A pMDDL900 calibration data in ART:
7510 INFO                          ----------------------                           
7510 INFO  =======================| AR9300 CAL STRUCTURE |==========================
7510 INFO  |                       -----------------------                         |
7510 INFO  |                                   |                                   |
7510 INFO  | CAL Version              3        |  Template Version        2        |
7510 INFO  |-----------------------------------------------------------------------|
7510 INFO  | MacAddress: 0x00:0F:92:FB:9D:46                                       |
7510 INFO  | 4D 41 47 49 43 30 30 33 32 30 31 39 31 32 32 37 30 38 00 00           |
7510 INFO  |-----------------------------------------------------------------------|
7510 INFO  | RegDomain 1              0x0000   |  RegDomain 2             0x001F   |
7510 INFO  | TX Mask                  0x3      |  RX Mask                 0x3      |
7510 INFO  | OpFlags: 5GHz            0        |  2GHz                    1        |
7510 INFO  | Disable 5G HT20          0        |  Disable 2G HT20         0        |
7510 INFO  | Disable 5G HT40          0        |  Disable 2G HT40         0        |
7510 INFO  | Big Endian               0        |  Wake On Wireless        0        |
7510 INFO  | RF Silent                0x0      |  Bluetooth               0x0      |
7510 INFO  | Device Cap               0        |  DeviceType              PCIE     |
7510 INFO  | Tuning Caps(0,1):        (66,00)  |  Enbl Compensation       0x7d     |
7510 INFO  | GPIO eepWrite Enable     3        |  GPIO rxBand Selection   0xff     |
7510 INFO  | GPIO wlan Disable        0        |  GPIO wlan LED           0x08     |
7510 INFO  | txrxGain                 0x20     |  pwrTableOffset          0        |
7510 INFO  | internal regulator     0x00000000                                     |
7510 INFO  |                                                                       |
7510 INFO  |===========================5GHz Modal Header===========================|
7510 INFO  |                                                                       |
7510 INFO  | Antenna Common        0x00000440  |  Antenna Common2       0x000AAAAA |
7510 INFO  | Ant Chain 0              0x0150   |  Ant Chain 1             0x0150   |
7510 INFO  | Ant Chain 2              0x0150   |                                   |
7510 INFO  | xatten 1DB Ch0 Low       0        |  xatten 1DB Ch1 Low      0        |
7510 INFO  | xatten 1DB Ch2 Low       0        |  xatten 1DB Ch0          0        |
7510 INFO  | xatten 1DB Ch1           0        |  xatten 1DB Ch2          0        |
7510 INFO  | xatten 1DB Ch0 High      0        |  xatten 1DB Ch1 High     0        |
7510 INFO  | xatten 1DB Ch2 high      0        |                                   |
7510 INFO  | xatten 1Margin0 Low      0        |  xatten 1Margin1 Low     0        |
7510 INFO  | xatten 1Margin2 Low      0        |  xatten 1Margin0         0        |
7510 INFO  | xatten 1Margin1          0        |  xatten 1Margin2         0        |
7510 INFO  | xatten 1Margin0 High     0        |  xatten 1Margin1 High    0        |
7510 INFO  | xatten 1Margin2 High     0        |                                   |
7510 INFO  | TempL Slope              0        |  Temp Slope             68        |
7510 INFO  | TempH Slope              0        |  Volt Slope              0        |
7510 INFO  | Spur Channels:           4800, 4800, 4800, 4800, 4800                 |
7510 INFO  | NoiseFloor Thres0       -1        |  NoiseFloorThres1        0        |
7510 INFO  | NoiseFloor Thres2        0        |                                   |
7510 INFO  | xpaBiasLvl              1f        |  txFrame2DataStart       e        |
7510 INFO  | txFrameToPaOn            e        |  txClip                  3        |
7510 INFO  | antennaGain              0        |  switchSettling          2d       |
7510 INFO  | adcDesiredSize          -30       |  txEndToXpaOff           0        |
7510 INFO  | txEndToRxOn              2        |  txFrameToXpaOn          e        |
7510 INFO  | thresh62                 127       |                                   |
7510 INFO  |                                   |                                   |
7510 INFO  |=================5G Power Calibration Information =====================|
7510 INFO  |                                                                       |
7510 INFO  |                   Chain 0                          Chain 1            |
7510 INFO  |-----------------------------------------------------------------------|
7510 INFO  |                     rxNF rxNF rx  |                   rxNF rxNF   rx  |
7510 INFO  | Freq  Pwr Volt Temp  Cal pwr Temp |     Pwr Volt Temp  Cal  pwr  Temp |
7510 INFO  |-----------------------------------------------------------------------|
7510 INFO  | 5000    0   0    0  0000    0   0 |       0   0    0  0000    0    0  |
7510 INFO  | 5140    0   0    0  0000    0   0 |       0   0    0  0000    0    0  |
7510 INFO  | 5280    0   0    0  0000    0   0 |       0   0    0  0000    0    0  |
7510 INFO  | 5420    0   0    0  0000    0   0 |       0   0    0  0000    0    0  |
7510 INFO  | 5560    0   0    0  0000    0   0 |       0   0    0  0000    0    0  |
7510 INFO  | 5700    0   0    0  0000    0   0 |       0   0    0  0000    0    0  |
7510 INFO  | 5840    0   0    0  0000    0   0 |       0   0    0  0000    0    0  |
7510 INFO  | 5990    0   0    0  0000    0   0 |       0   0    0  0000    0    0  |
7510 INFO  |-----------------------------------------------------------------------|
7510 INFO  |                   Chain 2                                             |
7510 INFO  |-----------------------------------------------------------------------|
7510 INFO  | 5000    0   0    0  0000    0   0 |                                   |
7510 INFO  | 5140    0   0    0  0000    0   0 |                                   |
7510 INFO  | 5280    0   0    0  0000    0   0 |                                   |
7510 INFO  | 5420    0   0    0  0000    0   0 |                                   |
7510 INFO  | 5560    0   0    0  0000    0   0 |                                   |
7510 INFO  | 5700    0   0    0  0000    0   0 |                                   |
7510 INFO  | 5840    0   0    0  0000    0   0 |                                   |
7510 INFO  | 5990    0   0    0  0000    0   0 |                                   |
7510 INFO  |-----------------------------------------------------------------------|
7510 INFO  |                                                                       |
7510 INFO  |===========================5G Target Powers============================|
7510 INFO  |                                                                       |
7510 INFO  | OFDM  | 5000  | 5140  | 5280  | 5420  | 5560  | 5700  | 5840  | 5990  |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | 6-24  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  |
7510 INFO  |  36   | 28.0  | 28.0  | 28.0  | 28.0  | 28.0  | 28.0  | 28.0  | 28.0  |
7510 INFO  |  48   | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  |
7510 INFO  |  54   | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  |
7510 INFO  |========================================================================
7510 INFO  |                                                                       |
7510 INFO  | HT20  | 5000  | 5140  | 5280  | 5420  | 5560  | 5700  | 5840  | 5990  |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | MCS0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  |
7510 INFO  | MCS1  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  |
7510 INFO  | MCS2  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  |
7510 INFO  | MCS3  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  |
7510 INFO  | MCS4  | 28.0  | 28.0  | 28.0  | 28.0  | 28.0  | 28.0  | 28.0  | 28.0  |
7510 INFO  | MCS5  | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  |
7510 INFO  | MCS6  | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  |
7510 INFO  | MCS7  | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  |
7510 INFO  | MCS8  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  |
7510 INFO  | MCS9  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  |
7510 INFO  | MCS10 | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  |
7510 INFO  | MCS11 | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  |
7510 INFO  | MCS12 | 28.0  | 28.0  | 28.0  | 28.0  | 28.0  | 28.0  | 28.0  | 28.0  |
7510 INFO  | MCS13 | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  |
7510 INFO  | MCS14 | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  |
7510 INFO  | MCS15 | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  |
7510 INFO  | MCS16 | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  |
7510 INFO  | MCS17 | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  |
7510 INFO  | MCS18 | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  |
7510 INFO  | MCS19 | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  |
7510 INFO  | MCS20 | 13.0  | 13.0  | 13.0  | 13.0  | 13.0  | 13.0  | 13.0  | 13.0  |
7510 INFO  | MCS21 | 13.0  | 13.0  | 13.0  | 13.0  | 13.0  | 13.0  | 13.0  | 13.0  |
7510 INFO  | MCS22 | 11.0  | 11.0  | 11.0  | 11.0  | 11.0  | 11.0  | 11.0  | 11.0  |
7510 INFO  | MCS23 | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  |
7510 INFO  |========================================================================
7510 INFO  |                                                                       |
7510 INFO  | HT40  | 5000  | 5140  | 5280  | 5420  | 5560  | 5700  | 5840  | 5990  |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | MCS0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  |
7510 INFO  | MCS1  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  |
7510 INFO  | MCS2  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  |
7510 INFO  | MCS3  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  |
7510 INFO  | MCS4  | 28.0  | 28.0  | 28.0  | 28.0  | 28.0  | 28.0  | 28.0  | 28.0  |
7510 INFO  | MCS5  | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  |
7510 INFO  | MCS6  | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  |
7510 INFO  | MCS7  | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  |
7510 INFO  | MCS8  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  |
7510 INFO  | MCS9  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  |
7510 INFO  | MCS10 | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  |
7510 INFO  | MCS11 | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  |
7510 INFO  | MCS12 | 28.0  | 28.0  | 28.0  | 28.0  | 28.0  | 28.0  | 28.0  | 28.0  |
7510 INFO  | MCS13 | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  |
7510 INFO  | MCS14 | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  |
7510 INFO  | MCS15 | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  | 24.0  |
7510 INFO  | MCS16 | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  |
7510 INFO  | MCS17 | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  |
7510 INFO  | MCS18 | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  |
7510 INFO  | MCS19 | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  |
7510 INFO  | MCS20 | 13.0  | 13.0  | 13.0  | 13.0  | 13.0  | 13.0  | 13.0  | 13.0  |
7510 INFO  | MCS21 | 13.0  | 13.0  | 13.0  | 13.0  | 13.0  | 13.0  | 13.0  | 13.0  |
7510 INFO  | MCS22 | 11.0  | 11.0  | 11.0  | 11.0  | 11.0  | 11.0  | 11.0  | 11.0  |
7510 INFO  | MCS23 | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  |
7510 INFO  |========================================================================
7510 INFO  |                                                                       |
7510 INFO  |=======================Test Group Band Edge Power======================|
7510 INFO  |                                                                       |
7510 INFO  |                                                                       |
7510 INFO  | CTL: 0x10 [ 11A base mode ]                                           |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | edge  | 5000  | 5140  | 5280  | 5420  | 5560  | 5700  | 5840  | 5990  |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | power | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | flag  |   1   |   1   |   1   |   1   |   1   |   1   |   1   |   0   |
7510 INFO  =========================================================================
7510 INFO  |                                                                       |
7510 INFO  | CTL: 0x16 [ 5G HT20 mode  ]                                           |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | edge  | 5000  | 5140  | 5280  | 5420  | 5560  | 5700  | 5840  | 5990  |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | power | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | flag  |   1   |   1   |   1   |   1   |   1   |   1   |   1   |   0   |
7510 INFO  =========================================================================
7510 INFO  |                                                                       |
7510 INFO  | CTL: 0x18 [ 5G HT40 mode  ]                                           |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | edge  | 5000  | 5140  | 5280  | 5420  | 5560  | 5700  | 5840  | 5990  |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | power | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | flag  |   0   |   1   |   0   |   1   |   1   |   1   |   1   |   1   |
7510 INFO  =========================================================================
7510 INFO  |                                                                       |
7510 INFO  | CTL: 0x40 [ 11A base mode ]                                           |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | edge  | 5000  | 5140  | 5280  | 5420  | 5560  | 5700  |  --   |  --   |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | power | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  |  --   |  --   |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | flag  |   0   |   1   |   1   |   0   |   1   |   0   |  --   |  --   |
7510 INFO  =========================================================================
7510 INFO  |                                                                       |
7510 INFO  | CTL: 0x46 [ 5G HT20 mode  ]                                           |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | edge  | 5000  | 5140  | 5280  | 5420  |  --   |  --   |  --   |  --   |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | power | 30.0  | 30.0  | 30.0  | 30.0  |  --   |  --   |  --   |  --   |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | flag  |   1   |   1   |   1   |   0   |  --   |  --   |  --   |  --   |
7510 INFO  =========================================================================
7510 INFO  |                                                                       |
7510 INFO  | CTL: 0x48 [ 5G HT40 mode  ]                                           |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | edge  | 5000  | 5140  | 5280  | 5420  | 5560  | 5700  |  --   |  --   |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | power | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  |  --   |  --   |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | flag  |   1   |   1   |   1   |   1   |   1   |   0   |  --   |  --   |
7510 INFO  =========================================================================
7510 INFO  |                                                                       |
7510 INFO  | CTL: 0x30 [ 11A base mode ]                                           |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | edge  | 5000  | 5140  | 5280  | 5420  | 5560  | 5700  | 5840  | 5990  |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | power | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | flag  |   1   |   1   |   1   |   1   |   1   |   1   |   1   |   1   |
7510 INFO  =========================================================================
7510 INFO  |                                                                       |
7510 INFO  | CTL: 0x36 [ 5G HT20 mode  ]                                           |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | edge  | 5000  | 5140  | 5280  | 5420  | 5560  | 5700  | 5840  | 5990  |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | power | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | flag  |   1   |   1   |   0   |   1   |   1   |   1   |   1   |   0   |
7510 INFO  =========================================================================
7510 INFO  |                                                                       |
7510 INFO  | CTL: 0x38 [ 5G HT40 mode  ]                                           |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | edge  | 5000  | 5140  | 5280  | 5420  | 5560  | 5700  | 5840  | 5990  |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | power | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | flag  |   1   |   0   |   1   |   1   |   1   |   1   |   0   |   1   |
7510 INFO  =========================================================================
7510 INFO  |                                                                       |
7510 INFO  |===========================2GHz Modal Header===========================|
7510 INFO  |                                                                       |
7510 INFO  | Antenna Common        0x00008118  |  Antenna Common2       0x000EEEEE |
7510 INFO  | Ant Chain 0              0x0150   |  Ant Chain 1             0x0150   |
7510 INFO  | Ant Chain 2              0x0150   |                                   |
7510 INFO  | xatten 1DB Ch0           0        |  xatten 1DB Ch1          0        |
7510 INFO  | xatten 1DB Ch2           0        |                                   |
7510 INFO  | xatten 1Margin0          0        |  xatten 1Margin1         0        |
7510 INFO  | xatten 1Margin2          0        |                                   |
7510 INFO  | Temp Slope              40        |  Volt Slope              0        |
7510 INFO  | Spur Channels:           2300, 2300, 2300, 2300, 2300                 |
7510 INFO  | NoiseFloor Thres0       -1        |  NoiseFloorThres1        0        |
7510 INFO  | NoiseFloor Thres2        0        |                                   |
7510 INFO  | xpaBiasLvl              1f        |  txFrame2DataStart       e        |
7510 INFO  | txFrameToPaOn            e        |  txClip                  3        |
7510 INFO  | antennaGain              0        |  switchSettling          2c       |
7510 INFO  | adcDesiredSize          -30       |  txEndToXpaOff           0        |
7510 INFO  | txEndToRxOn              2        |  txFrameToXpaOn          e        |
7510 INFO  | thresh62                 127       |                                   |
7510 INFO  |                                   |                                   |
7510 INFO  |=================2G Power Calibration Information =====================|
7510 INFO  |                                                                       |
7510 INFO  |                   Chain 0                          Chain 1            |
7510 INFO  |-----------------------------------------------------------------------|
7510 INFO  |                     rxNF rxNF rx  |                   rxNF rxNF   rx  |
7510 INFO  | Freq  Pwr Volt Temp  Cal pwr Temp |     Pwr Volt Temp  Cal  pwr  Temp |
7510 INFO  |-----------------------------------------------------------------------|
7510 INFO  | 2487   27   0  146  -110  -76 128 |      30   0  143  -110  -74  128  |
7510 INFO  | 2300    0   0    0  0000    0   0 |       0   0    0  0000    0    0  |
7510 INFO  | 2300    0   0    0  0000    0   0 |       0   0    0  0000    0    0  |
7510 INFO  |-----------------------------------------------------------------------|
7510 INFO  |                   Chain 2                                             |
7510 INFO  |-----------------------------------------------------------------------|
7510 INFO  | 2487    0   0    0  0000    0   0 |                                   |
7510 INFO  | 2300    0   0    0  0000    0   0 |                                   |
7510 INFO  | 2300    0   0    0  0000    0   0 |                                   |
7510 INFO  |-----------------------------------------------------------------------|
7510 INFO  |                                                                       |
7510 INFO  |===========================2G Target Powers============================|
7510 INFO  |                                                                       |
7510 INFO  | OFDM   |        2412        |        2437        |        2472        |
7510 INFO  |========|====================|====================|====================|
7510 INFO  | 6-24   |        30.0        |        30.0        |        30.0        |
7510 INFO  |  36    |        28.0        |        28.0        |        28.0        |
7510 INFO  |  48    |        24.0        |        24.0        |        24.0        |
7510 INFO  |  54    |        24.0        |        24.0        |        24.0        |
7510 INFO  |========================================================================
7510 INFO  |                                                                       |
7510 INFO  | CCK    |        2412        |        2472        |====================|
7510 INFO  |========|====================|====================|====================|
7510 INFO  | 1L-5L  |        30.0        |        30.0        |====================|
7510 INFO  |  5S    |        30.0        |        30.0        |====================|
7510 INFO  |  11L   |        30.0        |        30.0        |====================|
7510 INFO  |  11S   |        30.0        |        30.0        |====================|
7510 INFO  |========================================================================
7510 INFO  |                                                                       |
7510 INFO  | HT20   |        2412        |        2437        |        2472        |
7510 INFO  |========|====================|====================|====================|
7510 INFO  | MCS0   |        30.0        |        30.0        |        30.0        |
7510 INFO  | MCS1   |        30.0        |        30.0        |        30.0        |
7510 INFO  | MCS2   |        30.0        |        30.0        |        30.0        |
7510 INFO  | MCS3   |        30.0        |        30.0        |        30.0        |
7510 INFO  | MCS4   |        30.0        |        30.0        |        30.0        |
7510 INFO  | MCS5   |        28.0        |        28.0        |        28.0        |
7510 INFO  | MCS6   |        28.0        |        28.0        |        28.0        |
7510 INFO  | MCS7   |        27.0        |        27.0        |        27.0        |
7510 INFO  | MCS8   |        30.0        |        30.0        |        30.0        |
7510 INFO  | MCS9   |        30.0        |        30.0        |        30.0        |
7510 INFO  | MCS10  |        30.0        |        30.0        |        30.0        |
7510 INFO  | MCS11  |        30.0        |        30.0        |        30.0        |
7510 INFO  | MCS12  |        30.0        |        30.0        |        30.0        |
7510 INFO  | MCS13  |        28.0        |        28.0        |        28.0        |
7510 INFO  | MCS14  |        28.0        |        28.0        |        28.0        |
7510 INFO  | MCS15  |        27.0        |        27.0        |        27.0        |
7510 INFO  | MCS16  |        30.0        |        30.0        |        30.0        |
7510 INFO  | MCS17  |        30.0        |        30.0        |        30.0        |
7510 INFO  | MCS18  |        30.0        |        30.0        |        30.0        |
7510 INFO  | MCS19  |        30.0        |        30.0        |        30.0        |
7510 INFO  | MCS20  |        13.0        |        13.0        |        13.0        |
7510 INFO  | MCS21  |        13.0        |        13.0        |        13.0        |
7510 INFO  | MCS22  |        11.0        |        11.0        |        11.0        |
7510 INFO  | MCS23  |        10.0        |        10.0        |        10.0        |
7510 INFO  |========================================================================
7510 INFO  |                                                                       |
7510 INFO  | HT40   |        2412        |        2437        |        2472        |
7510 INFO  |========|====================|====================|====================|
7510 INFO  | MCS0   |        30.0        |        30.0        |        30.0        |
7510 INFO  | MCS1   |        30.0        |        30.0        |        30.0        |
7510 INFO  | MCS2   |        30.0        |        30.0        |        30.0        |
7510 INFO  | MCS3   |        30.0        |        30.0        |        30.0        |
7510 INFO  | MCS4   |        30.0        |        30.0        |        30.0        |
7510 INFO  | MCS5   |        27.0        |        27.0        |        27.0        |
7510 INFO  | MCS6   |        27.0        |        27.0        |        27.0        |
7510 INFO  | MCS7   |        27.0        |        27.0        |        27.0        |
7510 INFO  | MCS8   |        30.0        |        30.0        |        30.0        |
7510 INFO  | MCS9   |        30.0        |        30.0        |        30.0        |
7510 INFO  | MCS10  |        30.0        |        30.0        |        30.0        |
7510 INFO  | MCS11  |        30.0        |        30.0        |        30.0        |
7510 INFO  | MCS12  |        30.0        |        30.0        |        30.0        |
7510 INFO  | MCS13  |        27.0        |        27.0        |        27.0        |
7510 INFO  | MCS14  |        27.0        |        27.0        |        27.0        |
7510 INFO  | MCS15  |        27.0        |        27.0        |        27.0        |
7510 INFO  | MCS16  |        30.0        |        30.0        |        30.0        |
7510 INFO  | MCS17  |        30.0        |        30.0        |        30.0        |
7510 INFO  | MCS18  |        30.0        |        30.0        |        30.0        |
7510 INFO  | MCS19  |        30.0        |        30.0        |        30.0        |
7510 INFO  | MCS20  |        13.0        |        13.0        |        13.0        |
7510 INFO  | MCS21  |        13.0        |        13.0        |        13.0        |
7510 INFO  | MCS22  |        11.0        |        11.0        |        11.0        |
7510 INFO  | MCS23  |        10.0        |        10.0        |        10.0        |
7510 INFO  |========================================================================
7510 INFO  |                                                                       |
7510 INFO  |=======================Test Group Band Edge Power======================|
7510 INFO  |                                                                       |
7510 INFO  |                                                                       |
7510 INFO  | CTL: 0x11 [ 11B base mode ]                                           |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | edge  | 2412  | 2417  | 2472  | 2484  |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | power | 30.0  | 30.0  | 30.0  | 30.0  |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | flag  |   0   |   1   |   0   |   1   |
7510 INFO  =========================================================================
7510 INFO  |                                                                       |
7510 INFO  | CTL: 0x12 [ 11G base mode ]                                           |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | edge  | 2412  | 2417  | 2472  | 2484  |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | power | 30.0  | 30.0  | 30.0  | 30.0  |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | flag  |   0   |   1   |   0   |   1   |
7510 INFO  =========================================================================
7510 INFO  |                                                                       |
7510 INFO  | CTL: 0x15 [ 2G HT20 mode  ]                                           |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | edge  | 2412  | 2417  | 2472  | 2484  |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | power | 30.0  | 30.0  | 30.0  | 30.0  |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | flag  |   0   |   1   |   0   |   1   |
7510 INFO  =========================================================================
7510 INFO  |                                                                       |
7510 INFO  | CTL: 0x17 [ 2G HT40 mode  ]                                           |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | edge  | 2412  | 2417  | 2472  | 2484  |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | power | 30.0  | 30.0  | 30.0  | 30.0  |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | flag  |   0   |   1   |   0   |   1   |
7510 INFO  =========================================================================
7510 INFO  |                                                                       |
7510 INFO  | CTL: 0x41 [ 11B base mode ]                                           |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | edge  | 2412  | 2417  | 2472  | 2484  |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | power | 30.0  | 30.0  | 30.0  | 30.0  |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | flag  |   0   |   1   |   0   |   1   |
7510 INFO  =========================================================================
7510 INFO  |                                                                       |
7510 INFO  | CTL: 0x42 [ 11G base mode ]                                           |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | edge  | 2412  | 2417  | 2472  | 2484  |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | power | 30.0  | 30.0  | 30.0  | 30.0  |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | flag  |   0   |   1   |   0   |   1   |
7510 INFO  =========================================================================
7510 INFO  |                                                                       |
7510 INFO  | CTL: 0x45 [ 2G HT20 mode  ]                                           |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | edge  | 2412  | 2417  | 2472  | 2484  |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | power | 30.0  | 30.0  | 30.0  | 30.0  |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | flag  |   0   |   1   |   0   |   1   |
7510 INFO  =========================================================================
7510 INFO  |                                                                       |
7510 INFO  | CTL: 0x47 [ 2G HT40 mode  ]                                           |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | edge  | 2412  | 2417  | 2472  | 2484  |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | power | 30.0  | 30.0  | 30.0  | 30.0  |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | flag  |   0   |   1   |   0   |   1   |
7510 INFO  =========================================================================
7510 INFO  |                                                                       |
7510 INFO  | CTL: 0x31 [ 11B base mode ]                                           |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | edge  | 2412  | 2417  | 2472  | 2484  |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | power | 30.0  | 30.0  | 30.0  | 30.0  |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | flag  |   0   |   1   |   0   |   1   |
7510 INFO  =========================================================================
7510 INFO  |                                                                       |
7510 INFO  | CTL: 0x32 [ 11G base mode ]                                           |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | edge  | 2412  | 2417  | 2472  | 2484  |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | power | 30.0  | 30.0  | 30.0  | 30.0  |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | flag  |   0   |   1   |   0   |   1   |
7510 INFO  =========================================================================
7510 INFO  |                                                                       |
7510 INFO  | CTL: 0x35 [ 2G HT20 mode  ]                                           |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | edge  | 2412  | 2417  | 2472  | 2484  |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | power | 30.0  | 30.0  | 30.0  | 30.0  |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | flag  |   0   |   1   |   0   |   1   |
7510 INFO  =========================================================================
7510 INFO  |                                                                       |
7510 INFO  | CTL: 0x37 [ 2G HT40 mode  ]                                           |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | edge  | 2412  | 2417  | 2472  | 2484  |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | power | 30.0  | 30.0  | 30.0  | 30.0  |
7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
7510 INFO  | flag  |   0   |   1   |   0   |   1   |
7510 INFO  =========================================================================
7506 CONTROL DONE get all instance=0;


Feb 11, 2020
pMDDL900 IF=2487MHz.

#define AR_PHY_XPA_TIMING_CTL 	(0xa200+ 0x64)	// use regidx and regval in ath9k debugfs to access this 0xa264 register
#define AR_PHY_XPA_TIMING_CTL_TX_END_XPAB_OFF 0xFF000000
#define AR_PHY_XPA_TIMING_CTL_TX_END_XPAB_OFF_S 24
#define AR_PHY_XPA_TIMING_CTL_TX_END_XPAA_OFF 0x00FF0000
#define AR_PHY_XPA_TIMING_CTL_TX_END_XPAA_OFF_S 16
#define AR_PHY_XPA_TIMING_CTL_FRAME_XPAB_ON 0x0000FF00
#define AR_PHY_XPA_TIMING_CTL_FRAME_XPAB_ON_S 8
#define AR_PHY_XPA_TIMING_CTL_FRAME_XPAA_ON 0x000000FF
#define AR_PHY_XPA_TIMING_CTL_FRAME_XPAA_ON_S 0

This register works to control the delay. Confirmed by scope.

Original pMDDL900 calibration data:



Feb 10, 2010
Bringup pMDDL AlphaM multi-band product. Follow the pMDDL2450-JP method. Use the pMDDL2450 PRODUCT/PRODUCTNAME pair. Radio is calibrated to DeviceType=7. 
Recap the pMDDL images:
			-i <vid>:<did>[:<svid>[:<sdid>]
pMDDL2458----3Pi	-i 0x0F92:0x6721:0x0001:0x000A		AES256. SVID=1 means PRODUCTMODE=1
			-i 0x0F92:0x6721:0x0001:0x0000		AES128
			-i 0x0F92:0x6721:0x0001:0x0000 -s $(4) -R 255.255	Dual Bank

extractmylofw shows:	   Vendor:Device Mode:Product Mode:Sub Device
------------------------------------------------------------------------------------------------

pMDDL2450		-i 0x0F92:0x6721:0x0002:0x000A
			-i 0x0F92:0x6721:0x0002:0x0000
			-i 0x0F92:0x6721:0x0002:0x0000 -s $(4) -R 255.255

pMDDL2450-PV		-i 0x0F92:0x6721:0x0002:0x0000		// ONLY AES128
			-i 0x0F92:0x6721:0x0002:0x0000 -s $(4) -R 255.255

pMDDL2450-JP		-i 0x0F92:0x6721:0x0002:0x0000		// Only aes128
			-i 0x0F92:0x6721:0x0002:0x0000 -s $(4) -R 255.255
			
pMDDL2350		-i 0x0F92:0x6721:0x0003:0x000A
			-i 0x0F92:0x6721:0x0003:0x0000
			-i 0x0F92:0x6721:0x0003:0x0000 -s $(4) -R 255.255

pMDDL2550		-i 0x0F92:0x6721:0x0004:0x000A
			-i 0x0F92:0x6721:0x0004:0x0000
			-i 0x0F92:0x6721:0x0004:0x0000 -s $(4) -R 255.255

pMDDL900		-i 0x0F92:0x6721:0x0005:0x000A
			-i 0x0F92:0x6721:0x0005:0x0000
			-i 0x0F92:0x6721:0x0005:0x0000 -s $(4) -R 255.255

pMDDL2450-Multi-Band	-i 0x0F92:0x6721:0x0007:0x000A
			-i 0x0F92:0x6721:0x0007:0x0000
			-i 0x0F92:0x6721:0x0007:0x0000 -s $(4) -R 255.255

package/boot/uboot-ar9344-mhs/src/net/myloader.h : u-Boot only checks VID:DID = VENID_MICROHARD 0x0F92 : DEVID_MICROHARD_pDDL2458 0x6721. It doesn't check SVID:SDID.

system-upgrade.sh uses extractmylofw to check the VID:DID:SVID:SDID all match.

Feb 7, 2020
QCA4531 calibration.
Switch Table Operation : The switching table is broken into three groups for AR93xx/AR94xx/AR95xx/QCA4531. The first allows control of external signals for changing between transmit, idle, and BlueTooth coexistence, but is not chain specific. The second allows control of external signals for receive and is also not chain specific. The third provides chain-specific AGC control to attenuate large input signals. All tables drive external pins and the analog internal LNA enable.

In ART2 "help get" command gets all the set/get command parameters. This is a list in qca4531 ART2 nart.out:

> help set
< 7508 CONTROL BEGIN help set
===MHX2.0(CommandProcess) word=help, code=2
< 1013 CONTROL Help start.
< 1012 INFO set: set a configuration parameter on the card
< 1021 CONTROL Parameters:
< 1012 INFO     Version, eepversion, version: the calibration structure version number
< 1012 INFO         type=unsigned; minimum=2; maximum=255; default=2; 
< 1012 INFO     Template: the template number
< 1012 INFO         type=unsigned; minimum=2; maximum=255; default=2; 
< 1012 INFO     Mac, mac: the mac address of the device
< 1012 INFO         type=mac address; 
< 1012 INFO     Customer, customer: any text, usually used for device serial number
< 1012 INFO         type=text; 
< 1012 INFO     RegulatoryDomain, regDmn: the regulatory domain
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ffff; default=0; dimension=[2]; 
< 1012 INFO     Mask, txrxMask: the transmit and receive chain masks
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ff; default=0; 
< 1012 INFO     Mask.Tx, TxMask: the maximum chain mask used for transmit
< 1012 INFO         type=hexadecimal; minimum=1; maximum=f; default=7; 
< 1012 INFO     Mask.Rx, RxMask: the maximum chain mask used for receive
< 1012 INFO         type=hexadecimal; minimum=1; maximum=f; default=7; 
< 1012 INFO     OpFlags, opFlags: flags that control operating modes
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ff; default=0; 
< 1012 INFO     OpFlags2, opFlags2: flags2 that control operating modes
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ff; default=0; 
< 1012 INFO     EepMisc, eepMisc: some miscellaneous control flags
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ff; default=0; 
< 1012 INFO     RfSilent: rf silent mode control word
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ff; default=0; 
< 1012 INFO     RfSilent.HardwareEnable, rfSilentB0: implement rf silent mode in hardware
< 1012 INFO         no[0]
< 1012 INFO         yes[1]
< 1012 INFO     RfSilent.Polarity, rfSilentB1: polarity of the rf silent control line
< 1012 INFO         no[0]
< 1012 INFO         yes[1]
< 1012 INFO     RfSilent.Gpio, rfSilentGpio: the chip gpio line used for rf silent
< 1012 INFO         type=hexadecimal; minimum=0; maximum=3f; default=0; 
< 1012 INFO     BlueToothOptions: bluetooth options
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ff; default=0; 
< 1012 INFO     DeviceCapability, DeviceCap: device capabilities
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ff; default=0; 
< 1012 INFO     DeviceType, DeviceType: devicetype
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ff; default=0; 
< 1012 INFO     PowerTableOffset, PwrTableOffset: power level of the first entry in the power table
< 1012 INFO         type=decimal; minimum=-10; maximum=40; default=0; units=dBm; 
< 1012 INFO     PaprdTrainningPower, PaprdTrainPower: power level for paprd trainning
< 1012 INFO         type=decimal; minimum=-10; maximum=40; default=0; units=halfdB; 
< 1012 INFO     IqMask, IqMask: IQ mask
< 1012 INFO         type=decimal; minimum=-10; maximum=40; default=0; units=iqmask; 
< 1012 INFO     XtalTargetPpm, PpmTarget: xtal target ppm. This value is 0 in normal case.
< 1012 INFO         type=decimal; minimum=-127; maximum=127; default=0; 
< 1012 INFO     XtalTolerancePpm, PpmTolerance: xtal tolerance ppm. This value is 0 in normal case.
< 1012 INFO         type=decimal; minimum=-127; maximum=127; default=0; 
< 1012 INFO     TuningCaps: capacitors for tuning frequency accuracy
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ff; default=0; dimension=[2]; 
< 1012 INFO     FeatureEnable, featureEnable: feature enable control word
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ff; default=0; 
< 1012 INFO     FeatureEnable.TemperatureCompensation, TemperatureCompensationEnable, TempCompEnable: enables temperaturl
< 1012 INFO         no[0]
< 1012 INFO         yes[1]
< 1012 INFO     FeatureEnable.VoltageCompensation, VoltageCompensationEnable, VoltCompEnable: enables voltage compensatil
< 1012 INFO         no[0]
< 1012 INFO         yes[1]
< 1012 INFO     FeatureEnable.FastClock, FastClockEnable: enables fast clock mode
< 1012 INFO         no[0]
< 1012 INFO         yes[1]
< 1012 INFO     FeatureEnable.Doubling, DoublingEnable: enables doubling mode
< 1012 INFO         no[0]
< 1012 INFO         yes[1]
< 1012 INFO     FeatureEnable.SwitchingRegulator, swregenable: enables the internal switching regulator
< 1012 INFO         no[0]
< 1012 INFO         yes[1]
< 1012 INFO     FeatureEnable.PaPredistortion, papdenable: enables pa predistortion
< 1012 INFO         no[0]
< 1012 INFO         yes[1]
< 1012 INFO     FeatureEnable.TuningCaps, TuningCapsEnable: enables use of tuning capacitors
< 1012 INFO         no[0]
< 1012 INFO         yes[1]
< 1012 INFO     FeatureEnable.TxFrameToXpaOn, TxFrameToXpaOnEnable: enables use of TxFrameToXpaOn
< 1012 INFO         no[0]
< 1012 INFO         yes[1]
< 1012 INFO     Miscellaneous: miscellaneous parameters
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ff; default=0; 
< 1012 INFO     Miscellaneous.DriveStrength, DriveStrengthReconfigure, DriveStrength: enables drive strength reconfiguran
< 1012 INFO         no[0]
< 1012 INFO         yes[1]
< 1012 INFO     Miscellaneous.Thermometer, Thermometer: forces use of the specified chip thermometer
< 1012 INFO         type=decimal; minimum=-1; maximum=2; default=1; 
< 1012 INFO     Miscellaneous.Dynamic2x3, ChainMaskReduce: enables dynamic 2x3 mode to reduce power draw
< 1012 INFO         no[0]
< 1012 INFO         yes[1]
< 1012 INFO     Miscellaneous.QuickDropEnable, quickDrop: enables quick drop mode for improved strong signal response
< 1012 INFO         no[0]
< 1012 INFO         yes[1]
< 1012 INFO     Miscellaneous.TempSlopExtensionEnable, tempslopextension: enables temp slop extension
< 1012 INFO         no[0]
< 1012 INFO         yes[1]
< 1012 INFO     Miscellaneous.xlnaBiasStrengthEnable, xLNABiasStrengthEnable: enables XLNA bias strength set
< 1012 INFO         no[0]
< 1012 INFO         yes[1]
< 1012 INFO     Miscellaneous.RFGainCAPEnable, rfGainCAPEnable: enables rf gain cap set
< 1012 INFO         no[0]
< 1012 INFO         yes[1]
< 1012 INFO     MiscEnable: misc enable parameters
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ff; default=0; 
< 1012 INFO     MiscEnable.TXGainCAPEnable, txGainCAPEnable: enables tx gain cap set
< 1012 INFO         no[0]
< 1012 INFO         yes[1]
< 1012 INFO     MiscEnable.MinCCAPwrThresholdEnable, MinCCAPwrthresholdEnable: enables MinCCA PWR threshold values to bet
< 1012 INFO         type=decimal; minimum=0; maximum=3; default=0; 
< 1012 INFO     EepromWriteEnableGpio: gpio line used to enable the eeprom
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ff; default=0; 
< 1012 INFO     WlanDisableGpio: 
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ff; default=0; 
< 1012 INFO     WlanLedGpio: 
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ff; default=0; 
< 1012 INFO     RxBandSelectGpio: 
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ff; default=0; 
< 1012 INFO     GainTable: transmit and receive gain table control word
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ff; default=0; 
< 1012 INFO     GainTable.Tx, TxGain, TxGainTable: transmit gain table used
< 1012 INFO         type=hexadecimal; minimum=0; maximum=f; default=0; 
< 1012 INFO     GainTable.Rx, RxGain, RxGainTable: receive gain table used
< 1012 INFO         type=hexadecimal; minimum=0; maximum=f; default=0; 
< 1012 INFO     SwitchingRegulator, SWREG, internalregulator: the internal switching regulator control word
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ffffffff; default=0; 
< 1012 INFO     AntennaDiversityControl, antDivCtrl: antenna diversity control
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ff; default=0; 
< 1012 INFO     Future: reserved words, should be set to 0
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ff; default=0; dimension=[2]; 
< 1012 INFO     2GHz.AntennaControlCommon, AntCtrlCommon2g: antenna switch control word 1
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ffffffff; default=0; 
< 1012 INFO     2GHz.AntennaControlCommon2, AntCtrlCommon22g: antenna switch control word 2
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ffffffff; default=0; 
< 1012 INFO     2GHz.AntennaControlChain, antCtrlChain2g: per chain antenna switch control word
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ffff; default=0; dimension=[4]; 
< 1012 INFO     2GHz.Attenuation.Db, xatten1DB2g: attenuation value
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ff; default=0; dimension=[4]; 
< 1012 INFO     2GHz.Attenuation.Margin, xatten1margin2g: attenuation margin
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ff; default=0; dimension=[4]; 
< 1012 INFO     2GHz.TemperatureSlope, tempSlope2g, TemperatureSlope2g: slope used in temperature compensation algorithm
< 1012 INFO         type=decimal; minimum=-127; maximum=127; default=0; dimension=[4]; 
< 1012 INFO     2GHz.VoltageSlope, voltSlope2g, VoltageSlope2g: slope used in voltage compensation algorithm
< 1012 INFO         type=decimal; minimum=-127; maximum=127; default=0; 
< 1012 INFO     2GHz.Spur, SpurChans2g: spur frequencies
< 1012 INFO         type=unsigned; minimum=0; maximum=2600; default=2412; units=MHz; dimension=[5]; 
< 1012 INFO     2GHz.MinCCAPwrThreshold, MinCCAPwrThreshCh2g: MinCCA Power threshold
< 1012 INFO         type=decimal; minimum=-127; maximum=127; default=0; dimension=[4]; 
< 1012 INFO     2GHz.ObdboffstAux1, ObdboffstAux1Ch2g: Obdboffst_Aux1
< 1012 INFO         type=decimal; minimum=0; maximum=255; default=0; dimension=[4]; 
< 1012 INFO     2GHz.ObdboffstAux2, ObdboffstAux2Ch2g: Obdboffst_Aux2
< 1012 INFO         type=decimal; minimum=0; maximum=255; default=0; dimension=[4]; 
< 1012 INFO     2GHz.Reserved, Reserved2g: reserved words, should be set to 0
< 1012 INFO         type=decimal; minimum=-127; maximum=127; default=0; dimension=[5]; 
< 1012 INFO     2GHz.QuickDrop, quickDrop2g: quick drop value
< 1012 INFO         type=decimal; minimum=-127; maximum=127; default=0; 
< 1012 INFO     2GHz.XpaBiasLevel, XpaBiasLvl2g: external pa bias level
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ff; default=0; 
< 1012 INFO     2GHz.TxFrameToDataStart, TxFrameToDataStart2g: 
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ff; default=0; 
< 1012 INFO     2GHz.TxFrameToPaOn, TxFrameToPaOn2g: 
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ff; default=0; 
< 1012 INFO     2GHz.TxFrameToXpaOn, TxFrameToXpaOn2g: 
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ff; default=0; 
< 1012 INFO     2GHz.TxEndToXpaOff, TxEndToXpaOff2g: 
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ff; default=0; 
< 1012 INFO     2GHz.TxEndToRxOn, TxEndToRxOn2g: 
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ff; default=0; 
< 1012 INFO     2GHz.TxClip, TxClip2g: 
< 1012 INFO         type=hexadecimal; minimum=0; maximum=f; default=0; 
< 1012 INFO     2GHz.DacScaleCCK, DacScaleCCK: 
< 1012 INFO         type=hexadecimal; minimum=0; maximum=f; default=0; 
< 1012 INFO     2GHz.AntennaGain, AntennaGain2g, AntGain2g: 
< 1012 INFO         type=decimal; minimum=-127; maximum=127; default=0; 
< 1012 INFO     2GHz.SwitchSettling, SwitchSettling2g: 
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ff; default=0; 
< 1012 INFO     2GHz.AdcSize, AdcDesiredSize2g: 
< 1012 INFO         type=decimal; minimum=-127; maximum=127; default=0; 
< 1012 INFO     2GHz.Thresh62, Thresh622g: 
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ff; default=0; 
< 1012 INFO     2GHz.PaPredistortion.Ht20, papd2gRateMaskHt20: pa predistortion mask for HT20 rates
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ffffffff; default=0; 
< 1012 INFO     2GHz.PaPred4ss.Ht20, papd2gRateMask4ssHt20: pa predistortion mask for 4ss HT20 rates
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ffffffff; default=0; 
< 1012 INFO     2GHz.PaPredistortion.Ht40, papd2gRateMaskHt40: pa predistortion mask for HT40 rates
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ffffffff; default=0; 
< 1012 INFO     2GHz.PaPred4ss.Ht40, papd2gRateMask4ssHt40: pa predistortion mask for 4ss HT40 rates
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ffffffff; default=0; 
< 1012 INFO     2GHz.WlanSpdtSwitchGlobalControl, switchcomspdt2g: spdt switch setting for wlan 2G in WLAN/BT global regr
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ffffffff; default=0; 
< 1012 INFO     2GHz.XLNABiasStrength, XLNABiasStrength2g: set XLNA bias strength
< 1012 INFO         type=hexadecimal; minimum=0; maximum=3; default=0; dimension=[4]; 
< 1012 INFO     2GHz.RFGainCap, rfGainCAP2g: set rf Gain CAP
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ffffffff; default=0; 
< 1012 INFO     2GHz.TXGainCap, txGainCAP2g: set tx Gain CAP
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ffff; default=0; 
< 1012 INFO     2GHz.Future, future2g: reserved words, should be set to 0
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ff; default=0; dimension=[5]; 
< 1012 INFO     2GHz.PowerCalibration.Frequency, calPierFreq2g: frequencies at which calibration is performed
< 1012 INFO         type=unsigned; minimum=2300; maximum=2600; default=2412; units=MHz; dimension=[3]; 
< 1012 INFO     2GHz.TransmitCalibration.PowerCorrection, CalPierRefPower2g: transmit power calibration correction values
< 1012 INFO         type=decimal; minimum=-127; maximum=127; default=0; dimension=[4][3]; 
< 1012 INFO     2GHz.TransmitCalibration.Voltage, CalPierVoltMeas2g: voltage measured during transmit power calibration
< 1012 INFO         type=unsigned; minimum=0; maximum=255; default=0; dimension=[4][3]; 
< 1012 INFO     2GHz.TransmitCalibration.Temperature, CalPierTempMeas2g: temperature measured during transmit power calin
< 1012 INFO         type=unsigned; minimum=0; maximum=255; default=0; dimension=[4][3]; 
< 1012 INFO     2GHz.ReceiveCalibration.NoiseFloor, CalPierRxNoisefloorCal2g: noise floor measured during receive calibrn
< 1012 INFO         type=decimal; minimum=-127; maximum=127; default=0; dimension=[4][3]; 
< 1012 INFO     2GHz.ReceiveCalibration.Power, CalPierRxNoisefloorPower2g: power measured during receive calibration
< 1012 INFO         type=decimal; minimum=-127; maximum=127; default=0; dimension=[4][3]; 
< 1012 INFO     2GHz.ReceiveCalibration.Temperature, CalPierRxTempMeas2g: temperature measured during receive calibration
< 1012 INFO         type=unsigned; minimum=0; maximum=255; default=0; dimension=[4][3]; 
< 1012 INFO     2GHz.Target.Frequency.Cck, calTGTFreqcck: frequencies at which target powers for cck rates are specified
< 1012 INFO         type=unsigned; minimum=2300; maximum=2600; default=2412; units=MHz; dimension=[2]; 
< 1012 INFO     2GHz.Target.Power.Cck, calTGTpwrCCK: target powers for cck rates
< 1012 INFO         type=float; minimum=0; maximum=35; default=10; units=dBm; dimension=[2][4]; 
< 1012 INFO     2GHz.Target.Frequency.Legacy, calTGTFreq2g: frequencies at which target powers for legacy rates are specd
< 1012 INFO         type=unsigned; minimum=2300; maximum=2600; default=2412; units=MHz; dimension=[3]; 
< 1012 INFO     2GHz.Target.Power.Legacy, calTGTpwr2g: target powers for legacy rates
< 1012 INFO         type=float; minimum=0; maximum=35; default=10; units=dBm; dimension=[3][4]; 
< 1012 INFO     2GHz.Target.Frequency.Ht20, calTGTFreqht202g: frequencies at which target powers for ht20 rates are specd
< 1012 INFO         type=unsigned; minimum=2300; maximum=2600; default=2412; units=MHz; dimension=[3]; 
< 1012 INFO     2GHz.Target.Power.Ht20, calTGTpwrht202g: target powers for ht20 rates
< 1012 INFO         type=float; minimum=0; maximum=35; default=10; units=dBm; dimension=[3][18]; 
< 1012 INFO     2GHz.Target.Frequency.Ht40, calTGTFreqht402g: frequencies at which target powers for ht40 rates are specd
< 1012 INFO         type=unsigned; minimum=2300; maximum=2600; default=2412; units=MHz; dimension=[3]; 
< 1012 INFO     2GHz.Target.Power.Ht40, calTGTpwrht402g: target powers for ht40 rates
< 1012 INFO         type=float; minimum=0; maximum=35; default=10; units=dBm; dimension=[3][18]; 
< 1012 INFO     2GHz.Ctl.Index, CtlIndex2g: ctl indexes, see eeprom guide for explanation
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ff; default=0; dimension=[12]; 
< 1012 INFO     2GHz.Ctl.Frequency, CtlFreq2g: frequencies at which maximum transmit powers are specified
< 1012 INFO         type=unsigned; minimum=0; maximum=2600; default=2412; units=MHz; dimension=[12][4]; 
< 1012 INFO     2GHz.Ctl.Power, CtlPower2g, CtlPwr2g: maximum allowed transmit powers
< 1012 INFO         type=float; minimum=0; maximum=35; default=10; units=dBm; dimension=[12][4]; 
< 1012 INFO     2GHz.Ctl.BandEdge, CtlBandEdge2g, ctlflag2g: band edge flag
< 1012 INFO         type=hexadecimal; minimum=0; maximum=3; default=0; dimension=[12][4]; 
< 1012 INFO     5GHz.Antenna.Common, AntCtrlCommon5g: antenna switch control word 1
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ffffffff; default=0; 
< 1012 INFO     5GHz.Antenna.Common2, AntCtrlCommon25g: antenna switch control word 2
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ffffffff; default=0; 
< 1012 INFO     5GHz.Antenna.Chain, antCtrlChain5g: per chain antenna switch control word
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ffff; default=0; dimension=[4]; 
< 1012 INFO     5GHz.Attenuation.Db.Low, xatten1DBLow5g, xatten1DBLow: attenuation value at 5180 MHz
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ff; default=0; dimension=[4]; 
< 1012 INFO     5GHz.Attenuation.Db.Middle, xatten1DB5g: attenuation value at 5500 MHz
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ff; default=0; dimension=[4]; 
< 1012 INFO     5GHz.Attenuation.Db.High, xatten1DBHigh5g, xatten1DBHigh: attenuation value at 5785 MHz
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ff; default=0; dimension=[4]; 
< 1012 INFO     5GHz.Attenuation.Margin.Low, xatten1MarginLow, xatten1MarginLow5g: attenuation margin at 5180 MHz
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ff; default=0; dimension=[4]; 
< 1012 INFO     5GHz.Attenuation.Margin.Middle, xatten1Margin5g: attenuation margin at 5500 MHz
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ff; default=0; dimension=[4]; 
< 1012 INFO     5GHz.Attenuation.Margin.High, xatten1MarginHigh, xatten1MarginHigh5g: attenuation margin at 5785 MHz
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ff; default=0; dimension=[4]; 
< 1012 INFO     5GHz.TemperatureSlope.Low, tempSlopeLow5g, TemperatureSlopeLow5g: slope used at 5180 MHz in temperature m
< 1012 INFO         type=decimal; minimum=-127; maximum=127; default=0; dimension=[3]; 
< 1012 INFO     5GHz.TemperatureSlope.Middle, tempSlope5g, TemperatureSlope5g: slope used at 5500 MHz in temperature comm
< 1012 INFO         type=decimal; minimum=-127; maximum=127; default=0; dimension=[3]; 
< 1012 INFO     5GHz.TemperatureSlope.High, tempSlopeHigh5g, TemperatureSlopeHigh5g: slope used at 5785 MHz in temperatum
< 1012 INFO         type=decimal; minimum=-127; maximum=127; default=0; dimension=[3]; 
< 1012 INFO     5GHz.TemperatureSlope.Extension, tempSlopeExtension, TemperatureSlopeExtension5g: slope used at cal freqm
< 1012 INFO         type=decimal; minimum=-127; maximum=127; default=0; dimension=[8]; 
< 1012 INFO     5GHz.VoltageSlope.Middle, voltSlope5g, VoltageSlope5g: slope used in voltage compensation algorithm
< 1012 INFO         type=decimal; minimum=-127; maximum=127; default=0; 
< 1012 INFO     5GHz.Spur, SpurChans5g: spur frequencies
< 1012 INFO         type=unsigned; minimum=0; maximum=7000; default=5180; units=MHz; dimension=[5]; 
< 1012 INFO     5GHz.MinCCAPwrThreshold, MinCCAPwrThreshCh5g: MinCCA Power threshold
< 1012 INFO         type=decimal; minimum=-127; maximum=127; default=0; dimension=[4]; 
< 1012 INFO     5GHz.ObdboffstAux1, ObdboffstAux1Ch5g: Obdboffst_Aux1
< 1012 INFO         type=decimal; minimum=0; maximum=255; default=0; dimension=[4]; 
< 1012 INFO     5GHz.ObdboffstAux2, ObdboffstAux2Ch5g: Obdboffst_Aux2
< 1012 INFO         type=decimal; minimum=0; maximum=255; default=0; dimension=[4]; 
< 1012 INFO     5GHz.Reserved, Reserved5g: reserved words, should be set to 0
< 1012 INFO         type=decimal; minimum=-127; maximum=127; default=0; dimension=[5]; 
< 1012 INFO     5GHz.QuickDrop.Low, quickDropLow5g: quick drop value used at 5180 MHz
< 1012 INFO         type=decimal; minimum=-127; maximum=127; default=0; 
< 1012 INFO     5GHz.QuickDrop.Middle, quickDrop5g: quick drop value used at 5500 MHz
< 1012 INFO         type=decimal; minimum=-127; maximum=127; default=0; 
< 1012 INFO     5GHz.QuickDrop.High, quickDropHigh5g: quick drop value used at 5785 MHz
< 1012 INFO         type=decimal; minimum=-127; maximum=127; default=0; 
< 1012 INFO     5GHz.XpaBiasLevel, XpaBiasLvl5g: external pa bias level
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ff; default=0; 
< 1012 INFO     5GHz.TxFrameToDataStart, TxFrameToDataStart5g: 
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ff; default=0; 
< 1012 INFO     5GHz.TxFrameToPaOn, TxFrameToPaOn5g: 
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ff; default=0; 
< 1012 INFO     5GHz.TxFrameToXpaOn, TxFrameToXpaOn5g: 
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ff; default=0; 
< 1012 INFO     5GHz.TxEndToXpaOff, TxEndToXpaOff5g: 
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ff; default=0; 
< 1012 INFO     5GHz.TxEndToRxOn, TxEndToRxOn5g: 
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ff; default=0; 
< 1012 INFO     5GHz.TxClip, TxClip5g: 
< 1012 INFO         type=hexadecimal; minimum=0; maximum=f; default=0; 
< 1012 INFO     5GHz.AntennaGain, AntennaGain5g, AntGain5g: 
< 1012 INFO         type=decimal; minimum=-127; maximum=127; default=0; 
< 1012 INFO     5GHz.SwitchSettling, SwitchSettling5g: 
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ff; default=0; 
< 1012 INFO     5GHz.AdcSize, AdcDesiredSize5g: 
< 1012 INFO         type=decimal; minimum=-127; maximum=127; default=0; 
< 1012 INFO     5GHz.Thresh62, Thresh625g: 
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ff; default=0; 
< 1012 INFO     5GHz.PaPredistortion.Ht20, papd5gRateMaskHt20: pa predistortion mask for HT20 rates
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ffffffff; default=0; 
< 1012 INFO     5GHz.PaPredistortion4ss.Ht20, papd5gRateMask4ssHt20: pa predistortion mask for 4ss HT20 rates
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ffffffff; default=0; 
< 1012 INFO     5GHz.PaPredistortion.Ht40, papd5gRateMaskHt40: pa predistortion mask for HT40 rates
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ffffffff; default=0; 
< 1012 INFO     5GHz.PaPredistortion4ss.Ht40, papd5gRateMask4ssHt40: pa predistortion mask for 4ss HT40 rates
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ffffffff; default=0; 
< 1012 INFO     5GHz.WlanSpdtSwitchGlobalControl, switchcomspdt5g: spdt switch setting for wlan 5G in WLAN/BT global regr
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ffffffff; default=0; 
< 1012 INFO     5GHz.XLNABiasStrength, XLNABiasStrength5g: set XLNA bias strength
< 1012 INFO         type=hexadecimal; minimum=0; maximum=3; default=0; 
< 1012 INFO     5GHz.RFGainCap, rfGainCAP5g: set XLNA bias strength
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ffffffff; default=0; 
< 1012 INFO     5GHz.TXGainCap, txGainCAP5g: set tx Gain CAP
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ffff; default=0; 
< 1012 INFO     5GHz.Future, future5g: reserved words, should be set to 0
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ff; default=0; dimension=[5]; 
< 1012 INFO     5GHz.TransmitCalibration.Frequency, calPierFreq5g: frequencies at which calibration is performed
< 1012 INFO         type=unsigned; minimum=4000; maximum=7000; default=5180; units=MHz; dimension=[8]; 
< 1012 INFO     5GHz.TransmitCalibration.PowerCorrection, CalPierRefPower5g: transmit power calibration correction values
< 1012 INFO         type=decimal; minimum=-127; maximum=127; default=0; dimension=[4][8]; 
< 1012 INFO     5GHz.TransmitCalibration.Voltage, CalPierVoltMeas5g: voltage measured during transmit power calibration
< 1012 INFO         type=unsigned; minimum=0; maximum=255; default=0; dimension=[4][8]; 
< 1012 INFO     5GHz.TransmitCalibration.Temperature, CalPierTempMeas5g: temperature measured during transmit power calin
< 1012 INFO         type=unsigned; minimum=0; maximum=255; default=0; dimension=[4][8]; 
< 1012 INFO     5GHz.ReceiveCalibration.NoiseFloor, CalPierRxNoisefloorCal5g: noise floor measured during receive calibrn
< 1012 INFO         type=decimal; minimum=-127; maximum=127; default=0; dimension=[4][8]; 
< 1012 INFO     5GHz.ReceiveCalibration.Power, CalPierRxNoisefloorPower5g: power measured during receive calibration
< 1012 INFO         type=decimal; minimum=-127; maximum=127; default=0; dimension=[4][8]; 
< 1012 INFO     5GHz.ReceiveCalibration.Temperature, CalPierRxTempMeas5g: temperature measured during receive calibration
< 1012 INFO         type=unsigned; minimum=0; maximum=255; default=0; dimension=[4][8]; 
< 1012 INFO     5GHz.Target.Frequency.Legacy, calTGTFreq5g: frequencies at which target powers for legacy rates are specd
< 1012 INFO         type=unsigned; minimum=4000; maximum=7000; default=5180; units=MHz; dimension=[8]; 
< 1012 INFO     5GHz.Target.Power.Legacy, calTGTpwr5g: target powers for legacy rates
< 1012 INFO         type=float; minimum=0; maximum=35; default=10; units=dBm; dimension=[8][4]; 
< 1012 INFO     5GHz.Target.Frequency.Ht20, calTGTFreqht205g: frequencies at which target powers for ht20 rates are specd
< 1012 INFO         type=unsigned; minimum=4000; maximum=7000; default=5180; units=MHz; dimension=[8]; 
< 1012 INFO     5GHz.Target.Power.Ht20, calTGTpwrht205g: target powers for ht20 rates
< 1012 INFO         type=float; minimum=0; maximum=35; default=10; units=dBm; dimension=[8][14]; 
< 1012 INFO     5GHz.Target.Frequency.Ht40, calTGTFreqht405g: frequencies at which target powers for ht40 rates are specd
< 1012 INFO         type=unsigned; minimum=4000; maximum=7000; default=5180; units=MHz; dimension=[8]; 
< 1012 INFO     5GHz.Target.Power.Ht40, calTGTpwrht405g: target powers for ht40 rates
< 1012 INFO         type=float; minimum=0; maximum=35; default=10; units=dBm; dimension=[8][14]; 
< 1012 INFO     5GHz.Ctl.Index, CtlIndex5g: ctl indexes, see eeprom guide for explanation
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ff; default=0; dimension=[9]; 
< 1012 INFO     5GHz.Ctl.Frequency, CtlFreq5g: frequencies at which maximum transmit powers are specified
< 1012 INFO         type=unsigned; minimum=0; maximum=7000; default=5180; units=MHz; dimension=[9][8]; 
< 1012 INFO     5GHz.Ctl.Power, CtlPower5g, CtlPwr5g: maximum allowed transmit powers
< 1012 INFO         type=float; minimum=0; maximum=35; default=10; units=dBm; dimension=[9][8]; 
< 1012 INFO     5GHz.Ctl.BandEdge, CtlBandEdge5g, ctlflag5g: band edge flag
< 1012 INFO         type=hexadecimal; minimum=0; maximum=3; default=0; dimension=[9][8]; 
< 1012 INFO     Config: 
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ffffffff; default=0; 
< 1012 INFO     ConfigPCIe: 
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ffffffff; default=0; 
< 1012 INFO     DeviceID, devid: the device id
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ffff; default=0; 
< 1012 INFO     SSID, subSystemId: the subsystem id
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ffff; default=0; 
< 1012 INFO     VID, vendorId: the vendor id
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ffff; default=0; 
< 1012 INFO     SVID, subVendorId: the subvendor id
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ffff; default=0; 
< 1012 INFO     caldata.memory, memory, caldata: memory type for calibration data, eeprom or flash or otp
< 1012 INFO         type=text; 
< 1012 INFO     Aux12LBOffset: reserved words, should be set to 0
< 1012 INFO         type=decimal; minimum=-127; maximum=127; default=0; 
< 1012 INFO     Aux12HBOffset: reserved words, should be set to 0
< 1012 INFO         type=decimal; minimum=-127; maximum=127; default=0; 
< 1012 INFO     NartVersion: the NART version used for Calibration
< 1012 INFO         type=unsigned; minimum=2; maximum=255; default=2; 
< 1012 INFO     RefFileVersion: the version of ref_file.art
< 1012 INFO         type=unsigned; minimum=2; maximum=255; default=2; 
< 1012 INFO     BoardId: the Board ID
< 1012 INFO         type=unsigned; minimum=2; maximum=255; default=2; 
< 1012 INFO     configAddr, configAddr, configAddr: 
< 1012 INFO         type=unsigned; dimension=[5]; 
< 1012 INFO     powerOffset_HT20, powerOffset_HT20: power offset for HT20
< 1012 INFO         type=float; minimum=-35; maximum=35; default=10; units=dBm; dimension=[6][4]; 
< 1012 INFO     powerOffset_HT40, powerOffset_HT40: power offset for HT40
< 1012 INFO         type=float; minimum=-35; maximum=35; default=10; units=dBm; dimension=[6][4]; 
< 1012 INFO     spurControls: More control for spur mitigation
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ffff; default=0; 
< 1012 INFO     xtalBias: More control for Xtal bias
< 1012 INFO         type=hexadecimal; minimum=0; maximum=ffff; default=0; 
< 1022 CONTROL 
< 1014 CONTROL Help end.
< 7506 CONTROL DONE help set





Feb 6, 2020
In Beta-D ar4531 run nart.out -console to wait for incoming connection.

In PC : C:\software\ART2\bin> ./cart.exe -local 192.168.168.1:2390. This will show command window. In this window type commands to CART.

load
and then

help
1012 INFO exit: exits the program	// this is CART commands
1012 INFO help, ?: supplies information about the commands and parameters
1012 INFO connect: establishes a network connection to the nart process
1012 INFO disconnect: closes the network connection to the nart process
1012 INFO hello: checks that the network link to nart is working, synchronizes commands and responses
1012 INFO prompt: asks the user to supply a value for the specified variable
1012 INFO assign: sets the specified variable to the specified value
1012 INFO deassign: deletes the variable
1012 INFO show: displays the value of the variable
1012 INFO load, card, attach: loads the card
1012 INFO unload, remove, detach: unloads the card
1012 INFO path, loss: sets the path loss between the various pieces of test equipment
1012 INFO transmit, tx, t: causes the specified device to transmit
1012 INFO receive, rx, r: causes the specified device to receive
1012 INFO link, rxl, l: causes one device to receive while another is transmitting
1012 INFO txl: causes one device to transmit while another is receiving
1012 INFO sleep: pauses program execution for the specified number of milliseconds
1012 INFO report, status: produces a formatted report
1012 INFO reportanalysis: analysis report
1012 INFO test, if, calculate: evaluates an equation and prints the result
1012 INFO data: restores the data from a log file
1012 INFO dump: dumps the data to a log file
1012 INFO ConnectBT, btconn: connect BT dut
1012 INFO DisconnectBT, btdisconn: disconnect BT dut
1012 INFO transmitBT, bttx: causes the specified BT device to transmit
1012 INFO receiveBT, btrx: causes the specified BT device to receive
1012 INFO setBT: set a BT configuration parameter on the card
1012 INFO getBT: get a BT configuration parameter from the card
1012 INFO reset: resets the device
1012 INFO pllscreen: do pll screen on the device
1012 INFO resetMCI: resets the device MCI
1012 INFO rr: reads a device register
1012 INFO rw: writes a device register with the specified value
1012 INFO sr, sl: prints the current list of sticky writes
1012 INFO sw: sticky write of a device field/register, sticky writes are performed after every device reset
1012 INFO sc: clear sticky field/register from list, last-on, first-off order
1012 INFO fr: field read
1012 INFO fw: field write
1012 INFO fl: list all the matching fields
1012 INFO mr: memory read
1012 INFO mw: memory write
1012 INFO er: EEPROM read
1012 INFO ew: EEPROM write
1012 INFO or: OTP read
1012 INFO or2: OTP read2
1012 INFO ow: OTP write
1012 INFO ow2: OTP write2
1012 INFO ol: OTP load
1012 INFO xr: flash read
1012 INFO xw: flash write
1012 INFO cr: PCI config read
1012 INFO cw: PCI config write
1012 INFO tgr: transmit gain table read
1012 INFO tgw: transmit gain table write
1012 INFO pl: turn on packet logging
1012 INFO set: set a configuration parameter on the card
1012 INFO get: get a configuration parameter from the card
1012 INFO clear: clear data records
1012 INFO commit, save: write configuration and calibration data to the device
1012 INFO pcie, boot: write pcie initilization data to the device
1012 INFO check: check calibration data on device
1012 INFO backup: backup the configuration and calibration data from the device to a file
1012 INFO equipment, powerMeter: select and install test equipment
1012 INFO equipmentCtl, control: set equipment control status
1012 INFO HAL, Chip: Add a new HAL dll in the chipIdentify list
1012 INFO comment: add a comment to a report
1012 INFO stop, cancel: cancel the current operation
1012 INFO branch, goto, loop: evaluate an equation and branch to the specified label if it is true
1012 INFO label: create a target for a branch instruction
1012 INFO log: turn on/off the log file
1012 INFO channel: retrieve and display a list of the valid channels
1012 INFO noisefloor, nf: compute the noise floor
1012 INFO nfg: retrieve and display the calibrated noise floor measurements
1012 INFO targetPower, tp: retrieve and display the target power values
1012 INFO reference, refDesign: display the list of reference designs
1012 INFO error: allows you to control how error messages are displayed
1012 INFO version: retrieve cart version information
1012 INFO measure: measure power, evm without nart
1012 INFO template: controls the use of calibration templates
1012 INFO setconfig: set a configuration parameter before loading card
1012 INFO setcal: set a calibration parameter
1012 INFO getcal: get a calibration parameter
1012 INFO rfbbtp: causes the specified device in RF_BB test points mode
1012 INFO CoeffDisplay, cd: Dsiplay IQCal Coeff
1012 INFO sleepmode, sm: set device sleep mode
1012 INFO macid: read mac address from macid.txt

[0] 1012 INFO exit: exits the program	// this should be the nart commands from nart.out.
[0] 1012 INFO help, ?: supplies information about the commands and parameters
[0] 1012 INFO hello: checks that the network link to nart is working, synchronizes commands and responses
[0] 1012 INFO transmit, tx, t: causes the specified device to transmit
[0] 1012 INFO receive, rx, r: causes the specified device to receive
[0] 1012 INFO sleep: pauses program execution for the specified number of milliseconds
[0] 1012 INFO load, card, attach: loads the card
[0] 1012 INFO unload, remove, detach: unloads the card
[0] 1012 INFO reset: resets the device
[0] 1012 INFO pllscreen, pllscreen: do pll creen on the device
[0] 1012 INFO resetMCI, MCIreset: resets the device MCI
[0] 1012 INFO rr: reads a device register
[0] 1012 INFO rw: writes a device register with the specified value
[0] 1012 INFO sr, sl: prints the current list of sticky writes
[0] 1012 INFO sw: sticky write of a device field/register, sticky writes are performed after every device reset
[0] 1012 INFO sc: clear sticky field/register from list, last-on, first-off order
[0] 1012 INFO fr: field read
[0] 1012 INFO fw: field write
[0] 1012 INFO fl: list all the matching fields
[0] 1012 INFO mr: memory read
[0] 1012 INFO mw: memory write
[0] 1012 INFO er: eeprom read
[0] 1012 INFO ew: eeprom write
[0] 1012 INFO xr: flash read
[0] 1012 INFO xw: flash write
[0] 1012 INFO or: otp read
[0] 1012 INFO or2: otp read
[0] 1012 INFO ow: otp write
[0] 1012 INFO ow2: otp write
[0] 1012 INFO ol: otp load
[0] 1012 INFO cr: pci config read
[0] 1012 INFO cw: pci config write
[0] 1012 INFO rd: enable register read/write debug mode
[0] 1012 INFO tgr: transmit gain table read
[0] 1012 INFO tgw: transmit gain table write
[0] 1012 INFO restore: restores calibration information from card
[0] 1012 INFO commit, save: finalize calibration and write data to device
[0] 1012 INFO pcie, boot: write pcie configuration data to chip
[0] 1012 INFO check: check calibration data on device
[0] 1012 INFO set: set a configuration parameter on the card
[0] 1012 INFO get: get a configuration parameter from the card
[0] 1012 INFO setTP: set target power configuration parameter on the card
[0] 1012 INFO getTP: get target power configuration parameter from the card
[0] 1012 INFO erase
[0] 1012 INFO pl: turn on packet logging
[0] 1012 INFO channel: retrieve and display a list of the valid channels
[0] 1012 INFO noisefloor, nf: compute the noise floor
[0] 1012 INFO nfg: retrieve and display the calibrated noise floor measurements
[0] 1012 INFO targetPower, tp: retrieve and display the target power values
[0] 1012 INFO start: start the current command
[0] 1012 INFO stop: stop the current command
[0] 1012 INFO template: Manipulates the configuration and calibration template
[0] 1012 INFO error: allows you to control how error messages are displayed
[0] 1012 INFO version: retrieve version information
[0] 1012 INFO setconfig: set a configuration parameter before loading card
[0] 1012 INFO setcal: set a calibration parameter
[0] 1012 INFO getcal: get a calibration parameter
[0] 1012 INFO rfbbtp: causes the specified device in RF_BB test points mode
[0] 1012 INFO HAL, Chip: Add a new HAL dll in the chipIdentify list
[0] 1012 INFO CoeffDisplay, cd: Display IQCal Coeff
[0] 1012 INFO sleepmode, sm: set device sleep mode



Feb 5, 2020
AR93xx ART Reference Guide December 2010 : 
CART : Contains the control software that runs all the test loops and controls the test
instrumentation. It sends radio-specific information over a socket to NART. Commands
can be sent to it directly via a terminal window, ART2 GUI, or a custom process. See
“Using CART/NART Command Line Interfaces” on page 4-1. CART sends NART
commands to NART.

NART: Contains the hardware specific code needed to control the Atheros radio. See “Using
CART/NART Command Line Interfaces” on page 4-1. NART runs in a slave mode and
takes its commands from a socket (which may be TCP/IP, USB, or other technology).
Commands can be sent to it directly via a terminal window, CART, or a custom process.

Driver : Driver used by ART2 to interface to one WiFi device. When using Windows, it is called
the ANWI driver.
If the radio under test is an AP, then NART and the Linux version of the driver (called
art.ko) runs on the AP. In this scenario CART and the GUI run on a host PC.

If NART is started with the command line argument -port 0, control is
transferred directly to the command window. Commands may be typed on
the keyboard and results are displayed in the command window.

Start.art is parsed automatically at CART startup time. It must be in the same
directory as cart.exe, so the start.art that is released with ART2 is found in the
bin directory of the package.

Feb 4, 2020
QDART. before TX test, should use calibration_setup.txt OR CommandSetCal command to setup the calibration data structure (cal.gainChann_2g).
case CommandSetCal[54]: returnCode = CalibrationSetCommand(client);---> _CalSetCommand() ---> case CalSet2gFreq[506]: CalSets(&done, &error, ip, index, Set2gFreq); ---> Set2gFreq()

Jan 31, 2020
Qualcomm qdart LinuxART2CS10.2v4.9.446. Read chip SREV correctly. In ar4531, ar9300_EEPROM_print.c:
	if(AR_SREV_HONEYBEE(AH)) {
			SformatOutput(buffer, MBUFFER-1," | ==MHX===Temp Slope           %3d,%3d      |  Volt Slope             %3d       |",
				base_ext2->temp_slope_low,
				pModalHeader->temp_slope,
				pModalHeader->voltSlope
				);
			ErrorPrint(NartOther, buffer);
		}
This code is compiled into libar9300.so. Confirmed it printed out.

Jan 30, 2020
Porting LinuxART2CS10.2v4.9.466 to pMDDL ART2_67. Some functions are too complicated to be ported and ignored for the time being:
1. Ar9300EepromPrintIt(), the special treatment to Honeybee is ignored.
2. Ar9300EepromPrintEntry(), Ar9300EepromDifferenceAnalyze_List()

Jan 29, 2020
root@UserDevice:~# echo "8 8 8 8" > proc/sys/kernel/printk	// print kernel message too.
root@UserDevice:~# nart.out -console
assign prt number to 2390
Setting instance to 0
5108 INFO Waiting for connection from control process.

==========Waiting for mcart connection..........
< 5109 INFO Accepted control connection from client 0.
< 7504 INFO |set|NartVersion|2.67|
< 7504 INFO |set|NartBuildDate|121003094626|
< 7504 INFO |set|devid||
< 7504 INFO |set|mac||
< 7504 INFO |set|customer||
> load devid=-1;caldata=auto;
[  175.590000] DK:: dk_open 
[  175.590000] DK:: dk_open:minor=0
< 7508 CONTROL BEGIN load devid=-1;caldata=auto;
[  175.600000] DK::get_client_id:major=63:minor=0
[  175.600000] DK::Regsitering client 0 
[  175.610000] DK::Disable the interrupts and reset the device 

< 7501 CONTROL ON
[  175.610000] ==MHX(cli_reg_read) read addr=b8104020. offset=4020
==MHX(CardLoadDo)2.0 client=0, devid=ffffffff, calmem=00000000
[  175.620000] DK::Reg read @ 0xb8104020 : 0x0000 
[  175.630000] Device Mac Rev : 0x0
[  175.630000] DK::Reg write @ 0xb8100024 : 0x0000 
[  175.640000] DEBUG : DK::Reg write @ 0xb8100024 : 0x0000 

deviceInit devIndex=0 device_fn=0 pdkInfo=0
[  175.650000] Device Status is : 0x0
[  175.650000] DK::dk_ioctl 
[  175.660000] DK:: DK_IOCTL_GET_VERISION 

Opening device /dev/dk0
[  175.660000] DK::dk_ioctl 

pDrv Maj Ver=1:Min Ver=2
[  175.660000] DK:: DK_IOCTL_GET_CLIENT_INFO 

driverVer Maj Ver=1:Min Ver=2
rpa=18100000:rr=ffffff:nB=1:mpa=6600000:ms=200000:irq=2:dma_addr=0
[  175.680000] DK::dk_ioctl 
[  175.680000] DK::Full add read @ address b8060090 
[  175.690000] DK::dk_ioctl 
[  175.690000] DK::Full add read @ address b80600b0 

reg vir addr[0]=76fde000
[  175.700000] DK::dk_ioctl 
[  175.700000] DK::Full add read @ address b80600b0 

reg range[0]=ffffff
memsize=200000:mem phy addr = 6600000: mem vir addr=76dde000
Num bars = 1
+ f2MapAddress = 18100000
+   aregPhyAddr[0]= 18100000
+   aregVirAddr[0]= 76fde000
+   aregRange[0]= 00ffffff
+ Allocated memory in the driver.
+ VirtAddress = 76dde000
+ PhysAddress = 06600000
+ Size = 00200000
==MHX2.0(MyRegisterRead)addr=00004020, val=0
==MHX2.1(MyRegisterRead) rptr=76fe2020, val=0
==MHX(CardLoadDo)2.1 devid=31
==MHX(CardLoadDo)2.1.0 devid=31. sh=76fde000
==MHX(CardLoadDo)2.1.1 devid=31. 
==MHX(ar9300Attach)3.0, devid=31
==MHX2.0(MyRegisterRead)addr=b8060090, val=0
==MHX2.2(MyRegisterRead) rptr=00000000, val=160
==MHX(ar9300Attach)3.1, devid=31
==MHX(ar9300Attach)3.2, devid=31. ah->ah_macVersion=300, ah->ah_macRev=0
==MHX(ar9300Attach)3.2.0, devid=31. FullAddrRead(AR9340_SOC_SEL_25M_40M)=00000c20
==MHX(ar9300Attach)3.2.1, devid=31
==MHX(ar9300Attach)3.3, devid=31
==MHX(ar9300Attach)3.4, devid=31
==MHX(ar9300Attach)3.5, devid=31
==MHX(ar9300Attach)3.6, devid=31
HAL:: Using Cal data from Flash 0x0
==MHX(ar9300Attach)3.7, devid=31
==MHX(ar9300Attach)3.8, devid=31
==MHX(CardLoadDo)2.2 devid=31. error=0, AH=0x76d88008
ath_hal_attach duration: 41=-912566562--912566603 ms
==MHX(CardLoadDo)2.3 After CardChannelCalculate()
[  178.340000] DK::dk_ioctl 
[  178.340000] DK::Cfg read @ offset 0 
[  178.350000] ========MHX(dk_ioctl) ret=-1

==MHX6.0(ar9300CalibrationDataGet) ahp=0x76d88008, ahp->CalibrationDataSource=1
[  178.350000] DK::dk_ioctl 
[  178.360000] DK::Cfg read @ offset 0 
[  178.360000] ========MHX(dk_ioctl) ret=-1

==MHX(CardLoadDo)2.4 After ar9300CalibrationDataGet(). caluse=1
< 6011 INFO Calibration information read from flash.
Wasp 1.0

< 7502 CONTROL OFF
Error::PCI Config read32 failed::co.value=0
< 7503 INFO |load|devid|memaddr|memsize|mac|
< 7504 INFO |load|dead|6600000|200000|00:0f:92:fa:4f:d2|
Error::PCI Config read32 failed::co.value=0
< 7504 INFO |set|devid|dead|
< 7504 INFO |set|mac|00:0f:92:fa:4f:d2|
< 7504 INFO |set|customer|MAGIC00320160610|
< 6000 INFO Loaded card.
< 7506 CONTROL DONE load devid=-1;caldata=auto;
=======mcart showed menu OK!
=======mcart press f for Flash device function
=======mcart press g
> get all instance=0;
< 7508 CONTROL BEGIN get all instance=0;
< 7510 INFO start get all
< 7510 INFO                          ----------------------                           
< 7510 INFO  =======================| AR9300 CAL STRUCTURE |==========================
< 7510 INFO  |                       -----------------------                         |
< 7510 INFO  |                                   |                                   |
< 7510 INFO  | CAL Version              2        |  Template Version        2        |
< 7510 INFO  |-----------------------------------------------------------------------|
< 7510 INFO  | MacAddress: 0x00:0F:92:FA:4F:D2                                       |
< 7510 INFO  | 4D 41 47 49 43 30 30 33 32 30 31 36 30 36 31 30 00 00 00 00           |
< 7510 INFO  |-----------------------------------------------------------------------|
< 7510 INFO  | RegDomain 1              0x0000   |  RegDomain 2             0x001F   |
< 7510 INFO  | TX Mask                  0x1      |  RX Mask                 0x1      |
< 7510 INFO  | OpFlags: 5GHz            0        |  2GHz                    1        |
< 7510 INFO  | Disable 5G HT20          0        |  Disable 2G HT20         0        |
< 7510 INFO  | Disable 5G HT40          0        |  Disable 2G HT40         0        |
< 7510 INFO  | Big Endian               0        |  Wake On Wireless        0        |
< 7510 INFO  | RF Silent                0x0      |  Bluetooth               0x0      |
< 7510 INFO  | Device Cap               0        |  DeviceType              AP       |
< 7510 INFO  | Tuning Caps(0,1):        (66,00)  |  Enbl Compensation       0x7d     |
< 7510 INFO  | GPIO eepWrite Enable     3        |  GPIO rxBand Selection   0xff     |
< 7510 INFO  | GPIO wlan Disable        0        |  GPIO wlan LED           0x08     |
< 7510 INFO  | txrxGain                 0x20     |  pwrTableOffset          0        |
< 7510 INFO  | internal regulator     0x00000000                                     |
< 7510 INFO  |                                                                       |
< 7510 INFO  |===========================5GHz Modal Header===========================|
< 7510 INFO  |                                                                       |
< 7510 INFO  | Antenna Common        0x00000110  |  Antenna Common2       0x00022222 |
< 7510 INFO  | Ant Chain 0              0x0000   |  Ant Chain 1             0x0000   |
< 7510 INFO  | Ant Chain 2              0x0000   |                                   |
< 7510 INFO  | xatten 1DB Ch0 Low       0        |  xatten 1DB Ch1 Low      0        |
< 7510 INFO  | xatten 1DB Ch2 Low       0        |  xatten 1DB Ch0          0        |
< 7510 INFO  | xatten 1DB Ch1           0        |  xatten 1DB Ch2          0        |
< 7510 INFO  | xatten 1DB Ch0 High      0        |  xatten 1DB Ch1 High     0        |
< 7510 INFO  | xatten 1DB Ch2 high      0        |                                   |
< 7510 INFO  | xatten 1Margin0 Low      0        |  xatten 1Margin1 Low     0        |
< 7510 INFO  | xatten 1Margin2 Low      0        |  xatten 1Margin0         0        |
< 7510 INFO  | xatten 1Margin1          0        |  xatten 1Margin2         0        |
< 7510 INFO  | xatten 1Margin0 High     0        |  xatten 1Margin1 High    0        |
< 7510 INFO  | xatten 1Margin2 High     0        |                                   |
< 7510 INFO  | TempL Slope              0        |  Temp Slope             68        |
< 7510 INFO  | TempH Slope              0        |  Volt Slope              0        |
< 7510 INFO  | Spur Channels:           4800, 4800, 4800, 4800, 4800                 |
< 7510 INFO  | NoiseFloor Thres0       -1        |  NoiseFloorThres1        0        |
< 7510 INFO  | NoiseFloor Thres2        0        |                                   |
< 7510 INFO  | xpaBiasLvl               0        |  txFrame2DataStart       e        |
< 7510 INFO  | txFrameToPaOn            e        |  txClip                  3        |
< 7510 INFO  | antennaGain              0        |  switchSettling          2d       |
< 7510 INFO  | adcDesiredSize          -30       |  txEndToXpaOff           0        |
< 7510 INFO  | txEndToRxOn              2        |  txFrameToXpaOn          e        |
< 7510 INFO  | thresh62                 28       |                                   |
< 7510 INFO  |                                   |                                   |
< 7510 INFO  |=================5G Power Calibration Information =====================|
< 7510 INFO  |                                                                       |
< 7510 INFO  |                   Chain 0                          Chain 1            |
< 7510 INFO  |-----------------------------------------------------------------------|
< 7510 INFO  |                     rxNF rxNF rx  |                   rxNF rxNF   rx  |
< 7510 INFO  | Freq  Pwr Volt Temp  Cal pwr Temp |     Pwr Volt Temp  Cal  pwr  Temp |
< 7510 INFO  |-----------------------------------------------------------------------|
< 7510 INFO  | 5255   20   0  124  0000    0   0 |       0   0    0  0000    0    0  |
< 7510 INFO  | 4800    0   0    0  0000    0   0 |       0   0    0  0000    0    0  |
< 7510 INFO  | 4800    0   0    0  0000    0   0 |       0   0    0  0000    0    0  |
< 7510 INFO  | 4800    0   0    0  0000    0   0 |       0   0    0  0000    0    0  |
< 7510 INFO  | 4800    0   0    0  0000    0   0 |       0   0    0  0000    0    0  |
< 7510 INFO  | 4800    0   0    0  0000    0   0 |       0   0    0  0000    0    0  |
< 7510 INFO  | 4800    0   0    0  0000    0   0 |       0   0    0  0000    0    0  |
< 7510 INFO  | 4800    0   0    0  0000    0   0 |       0   0    0  0000    0    0  |
< 7510 INFO  |-----------------------------------------------------------------------|
< 7510 INFO  |                   Chain 2                                             |
< 7510 INFO  |-----------------------------------------------------------------------|
< 7510 INFO  | 5255    0   0    0  0000    0   0 |                                   |
< 7510 INFO  | 4800    0   0    0  0000    0   0 |                                   |
< 7510 INFO  | 4800    0   0    0  0000    0   0 |                                   |
< 7510 INFO  | 4800    0   0    0  0000    0   0 |                                   |
< 7510 INFO  | 4800    0   0    0  0000    0   0 |                                   |
< 7510 INFO  | 4800    0   0    0  0000    0   0 |                                   |
< 7510 INFO  | 4800    0   0    0  0000    0   0 |                                   |
< 7510 INFO  | 4800    0   0    0  0000    0   0 |                                   |
< 7510 INFO  |-----------------------------------------------------------------------|
< 7510 INFO  |                                                                       |
< 7510 INFO  |===========================5G Target Powers============================|
< 7510 INFO  |                                                                       |
< 7510 INFO  | OFDM  | 5180  | 5220  | 5320  | 5400  | 5500  | 5600  | 5725  | 5825  |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | 6-24  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  |
< 7510 INFO  |  36   | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  |
< 7510 INFO  |  48   | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  |
< 7510 INFO  |  54   |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |
< 7510 INFO  |========================================================================
< 7510 INFO  |                                                                       |
< 7510 INFO  | HT20  | 5180  | 5240  | 5320  | 5500  | 5700  | 5745  | 5725  | 5825  |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | MCS0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  |
< 7510 INFO  | MCS1  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  |
< 7510 INFO  | MCS2  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  |
< 7510 INFO  | MCS3  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  |
< 7510 INFO  | MCS4  |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |
< 7510 INFO  | MCS5  |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |
< 7510 INFO  | MCS6  |  0.0  |  0.0  |  0.0  |  0.0  |  0.0  |  0.0  |  0.0  |  0.0  |
< 7510 INFO  | MCS7  |  0.0  |  0.0  |  0.0  |  0.0  |  0.0  |  0.0  |  0.0  |  0.0  |
< 7510 INFO  | MCS8  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  |
< 7510 INFO  | MCS9  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  |
< 7510 INFO  | MCS10 | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  |
< 7510 INFO  | MCS11 | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  |
< 7510 INFO  | MCS12 |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |
< 7510 INFO  | MCS13 |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |
< 7510 INFO  | MCS14 |  0.0  |  0.0  |  0.0  |  0.0  |  0.0  |  0.0  |  0.0  |  0.0  |
< 7510 INFO  | MCS15 |  0.0  |  0.0  |  0.0  |  0.0  |  0.0  |  0.0  |  0.0  |  0.0  |
< 7510 INFO  | MCS16 | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  |
< 7510 INFO  | MCS17 | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  |
< 7510 INFO  | MCS18 | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  |
< 7510 INFO  | MCS19 | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  |
< 7510 INFO  | MCS20 |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |
< 7510 INFO  | MCS21 |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |
< 7510 INFO  | MCS22 |  0.0  |  0.0  |  0.0  |  0.0  |  0.0  |  0.0  |  0.0  |  0.0  |
< 7510 INFO  | MCS23 |  0.0  |  0.0  |  0.0  |  0.0  |  0.0  |  0.0  |  0.0  |  0.0  |
< 7510 INFO  |========================================================================
< 7510 INFO  |                                                                       |
< 7510 INFO  | HT40  | 5180  | 5240  | 5320  | 5500  | 5700  | 5745  | 5725  | 5825  |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | MCS0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  |
< 7510 INFO  | MCS1  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  |
< 7510 INFO  | MCS2  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  |
< 7510 INFO  | MCS3  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  |
< 7510 INFO  | MCS4  |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |
< 7510 INFO  | MCS5  |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |
< 7510 INFO  | MCS6  |  0.0  |  0.0  |  0.0  |  0.0  |  0.0  |  0.0  |  0.0  |  0.0  |
< 7510 INFO  | MCS7  |  0.0  |  0.0  |  0.0  |  0.0  |  0.0  |  0.0  |  0.0  |  0.0  |
< 7510 INFO  | MCS8  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  |
< 7510 INFO  | MCS9  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  |
< 7510 INFO  | MCS10 | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  |
< 7510 INFO  | MCS11 | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  |
< 7510 INFO  | MCS12 |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |
< 7510 INFO  | MCS13 |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |
< 7510 INFO  | MCS14 |  0.0  |  0.0  |  0.0  |  0.0  |  0.0  |  0.0  |  0.0  |  0.0  |
< 7510 INFO  | MCS15 |  0.0  |  0.0  |  0.0  |  0.0  |  0.0  |  0.0  |  0.0  |  0.0  |
< 7510 INFO  | MCS16 | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  |
< 7510 INFO  | MCS17 | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  |
< 7510 INFO  | MCS18 | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  |
< 7510 INFO  | MCS19 | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  | 10.0  |
< 7510 INFO  | MCS20 |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |
< 7510 INFO  | MCS21 |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |  5.0  |
< 7510 INFO  | MCS22 |  0.0  |  0.0  |  0.0  |  0.0  |  0.0  |  0.0  |  0.0  |  0.0  |
< 7510 INFO  | MCS23 |  0.0  |  0.0  |  0.0  |  0.0  |  0.0  |  0.0  |  0.0  |  0.0  |
< 7510 INFO  |========================================================================
< 7510 INFO  |                                                                       |
< 7510 INFO  |=======================Test Group Band Edge Power======================|
< 7510 INFO  |                                                                       |
< 7510 INFO  |                                                                       |
< 7510 INFO  | CTL: 0x10 [ 11A base mode ]                                           |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | edge  | 5180  | 5260  | 5280  | 5500  | 5600  | 5700  | 5745  | 5825  |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | power | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | flag  |   1   |   1   |   1   |   1   |   1   |   1   |   1   |   0   |
< 7510 INFO  =========================================================================
< 7510 INFO  |                                                                       |
< 7510 INFO  | CTL: 0x16 [ 5G HT20 mode  ]                                           |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | edge  | 5180  | 5260  | 5280  | 5500  | 5520  | 5700  | 5745  | 5825  |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | power | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | flag  |   1   |   1   |   1   |   1   |   1   |   1   |   1   |   0   |
< 7510 INFO  =========================================================================
< 7510 INFO  |                                                                       |
< 7510 INFO  | CTL: 0x18 [ 5G HT40 mode  ]                                           |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | edge  | 5190  | 5230  | 5270  | 5310  | 5510  | 5550  | 5670  | 5755  |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | power | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | flag  |   0   |   1   |   0   |   1   |   1   |   1   |   1   |   1   |
< 7510 INFO  =========================================================================
< 7510 INFO  |                                                                       |
< 7510 INFO  | CTL: 0x40 [ 11A base mode ]                                           |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | edge  | 5180  | 5200  | 5260  | 5320  | 5500  | 5700  |  --   |  --   |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | power | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  |  --   |  --   |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | flag  |   0   |   1   |   1   |   0   |   1   |   0   |  --   |  --   |
< 7510 INFO  =========================================================================
< 7510 INFO  |                                                                       |
< 7510 INFO  | CTL: 0x46 [ 5G HT20 mode  ]                                           |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | edge  | 5180  | 5260  | 5500  | 5700  |  --   |  --   |  --   |  --   |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | power | 30.0  | 30.0  | 30.0  | 30.0  |  --   |  --   |  --   |  --   |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | flag  |   1   |   1   |   1   |   0   |  --   |  --   |  --   |  --   |
< 7510 INFO  =========================================================================
< 7510 INFO  |                                                                       |
< 7510 INFO  | CTL: 0x48 [ 5G HT40 mode  ]                                           |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | edge  | 5190  | 5270  | 5310  | 5510  | 5590  | 5670  |  --   |  --   |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | power | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  |  --   |  --   |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | flag  |   1   |   1   |   1   |   1   |   1   |   0   |  --   |  --   |
< 7510 INFO  =========================================================================
< 7510 INFO  |                                                                       |
< 7510 INFO  | CTL: 0x30 [ 11A base mode ]                                           |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | edge  | 5180  | 5200  | 5220  | 5260  | 5500  | 5600  | 5700  | 5745  |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | power | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | flag  |   1   |   1   |   1   |   1   |   1   |   1   |   1   |   1   |
< 7510 INFO  =========================================================================
< 7510 INFO  |                                                                       |
< 7510 INFO  | CTL: 0x36 [ 5G HT20 mode  ]                                           |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | edge  | 5180  | 5260  | 5320  | 5500  | 5560  | 5700  | 5745  | 5825  |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | power | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | flag  |   1   |   1   |   0   |   1   |   1   |   1   |   1   |   0   |
< 7510 INFO  =========================================================================
< 7510 INFO  |                                                                       |
< 7510 INFO  | CTL: 0x38 [ 5G HT40 mode  ]                                           |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | edge  | 5190  | 5230  | 5270  | 5510  | 5550  | 5670  | 5755  | 5795  |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | power | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  | 30.0  |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | flag  |   1   |   0   |   1   |   1   |   1   |   1   |   0   |   1   |
< 7510 INFO  =========================================================================
< 7510 INFO  |                                                                       |
< 7510 INFO  |===========================2GHz Modal Header===========================|
< 7510 INFO  |                                                                       |
< 7510 INFO  | Antenna Common        0x0000E99E  |  Antenna Common2       0x00066666 |
< 7510 INFO  | Ant Chain 0              0x0150   |  Ant Chain 1             0x0150   |
< 7510 INFO  | Ant Chain 2              0x0150   |                                   |
< 7510 INFO  | xatten 1DB Ch0           0        |  xatten 1DB Ch1          0        |
< 7510 INFO  | xatten 1DB Ch2           0        |                                   |
< 7510 INFO  | xatten 1Margin0          0        |  xatten 1Margin1         0        |
< 7510 INFO  | xatten 1Margin2          0        |                                   |
< 7510 INFO  | Temp Slope              40        |  Volt Slope              0        |
< 7510 INFO  | Spur Channels:           2464, 2300, 2300, 2300, 2553                 |
< 7510 INFO  | NoiseFloor Thres0       -1        |  NoiseFloorThres1        0        |
< 7510 INFO  | NoiseFloor Thres2        0        |                                   |
< 7510 INFO  | xpaBiasLvl              1f        |  txFrame2DataStart       e        |
< 7510 INFO  | txFrameToPaOn            e        |  txClip                  3        |
< 7510 INFO  | antennaGain              0        |  switchSettling          2c       |
< 7510 INFO  | adcDesiredSize          -30       |  txEndToXpaOff           0        |
< 7510 INFO  | txEndToRxOn              2        |  txFrameToXpaOn          e        |
< 7510 INFO  | thresh62                 28       |                                   |
< 7510 INFO  |                                   |                                   |
< 7510 INFO  |=================2G Power Calibration Information =====================|
< 7510 INFO  |                                                                       |
< 7510 INFO  |                   Chain 0                          Chain 1            |
< 7510 INFO  |-----------------------------------------------------------------------|
< 7510 INFO  |                     rxNF rxNF rx  |                   rxNF rxNF   rx  |
< 7510 INFO  | Freq  Pwr Volt Temp  Cal pwr Temp |     Pwr Volt Temp  Cal  pwr  Temp |
< 7510 INFO  |-----------------------------------------------------------------------|
< 7510 INFO  | 2412   32   0  123  -111   -1   0 |       0   0    0  0000    0    0  |
< 7510 INFO  | 2437   30   0  120  -110   -1   0 |       0   0    0  0000    0    0  |
< 7510 INFO  | 2462   27   0  120  -111   -1   0 |       0   0    0  0000    0    0  |
< 7510 INFO  |-----------------------------------------------------------------------|
< 7510 INFO  |                   Chain 2                                             |
< 7510 INFO  |-----------------------------------------------------------------------|
< 7510 INFO  | 2412    0   0    0  0000    0   0 |                                   |
< 7510 INFO  | 2437    0   0    0  0000    0   0 |                                   |
< 7510 INFO  | 2462    0   0    0  0000    0   0 |                                   |
< 7510 INFO  |-----------------------------------------------------------------------|
< 7510 INFO  |                                                                       |
< 7510 INFO  |===========================2G Target Powers============================|
< 7510 INFO  |                                                                       |
< 7510 INFO  | OFDM   |        2412        |        2437        |        2472        |
< 7510 INFO  |========|====================|====================|====================|
< 7510 INFO  | 6-24   |        30.0        |        30.0        |        30.0        |
< 7510 INFO  |  36    |        28.0        |        28.0        |        28.0        |
< 7510 INFO  |  48    |        24.0        |        24.0        |        24.0        |
< 7510 INFO  |  54    |        24.0        |        24.0        |        24.0        |
< 7510 INFO  |========================================================================
< 7510 INFO  |                                                                       |
< 7510 INFO  | CCK    |        2412        |        2472        |====================|
< 7510 INFO  |========|====================|====================|====================|
< 7510 INFO  | 1L-5L  |        30.0        |        30.0        |====================|
< 7510 INFO  |  5S    |        30.0        |        30.0        |====================|
< 7510 INFO  |  11L   |        30.0        |        30.0        |====================|
< 7510 INFO  |  11S   |        30.0        |        30.0        |====================|
< 7510 INFO  |========================================================================
< 7510 INFO  |                                                                       |
< 7510 INFO  | HT20   |        2412        |        2437        |        2472        |
< 7510 INFO  |========|====================|====================|====================|
< 7510 INFO  | MCS0   |        30.0        |        30.0        |        30.0        |
< 7510 INFO  | MCS1   |        30.0        |        30.0        |        30.0        |
< 7510 INFO  | MCS2   |        30.0        |        30.0        |        30.0        |
< 7510 INFO  | MCS3   |        30.0        |        30.0        |        30.0        |
< 7510 INFO  | MCS4   |        28.0        |        28.0        |        28.0        |
< 7510 INFO  | MCS5   |        24.0        |        24.0        |        24.0        |
< 7510 INFO  | MCS6   |        24.0        |        24.0        |        24.0        |
< 7510 INFO  | MCS7   |        24.0        |        24.0        |        24.0        |
< 7510 INFO  | MCS8   |        30.0        |        30.0        |        30.0        |
< 7510 INFO  | MCS9   |        30.0        |        30.0        |        30.0        |
< 7510 INFO  | MCS10  |        30.0        |        30.0        |        30.0        |
< 7510 INFO  | MCS11  |        30.0        |        30.0        |        30.0        |
< 7510 INFO  | MCS12  |        13.0        |        13.0        |        13.0        |
< 7510 INFO  | MCS13  |        13.0        |        13.0        |        13.0        |
< 7510 INFO  | MCS14  |        11.0        |        11.0        |        11.0        |
< 7510 INFO  | MCS15  |        10.0        |        10.0        |        10.0        |
< 7510 INFO  | MCS16  |        30.0        |        30.0        |        30.0        |
< 7510 INFO  | MCS17  |        30.0        |        30.0        |        30.0        |
< 7510 INFO  | MCS18  |        30.0        |        30.0        |        30.0        |
< 7510 INFO  | MCS19  |        30.0        |        30.0        |        30.0        |
< 7510 INFO  | MCS20  |        13.0        |        13.0        |        13.0        |
< 7510 INFO  | MCS21  |        13.0        |        13.0        |        13.0        |
< 7510 INFO  | MCS22  |        11.0        |        11.0        |        11.0        |
< 7510 INFO  | MCS23  |        10.0        |        10.0        |        10.0        |
< 7510 INFO  |========================================================================
< 7510 INFO  |                                                                       |
< 7510 INFO  | HT40   |        2412        |        2437        |        2472        |
< 7510 INFO  |========|====================|====================|====================|
< 7510 INFO  | MCS0   |        30.0        |        30.0        |        30.0        |
< 7510 INFO  | MCS1   |        30.0        |        30.0        |        30.0        |
< 7510 INFO  | MCS2   |        30.0        |        30.0        |        30.0        |
< 7510 INFO  | MCS3   |        30.0        |        30.0        |        30.0        |
< 7510 INFO  | MCS4   |        28.0        |        28.0        |        28.0        |
< 7510 INFO  | MCS5   |        24.0        |        24.0        |        24.0        |
< 7510 INFO  | MCS6   |        24.0        |        24.0        |        24.0        |
< 7510 INFO  | MCS7   |        24.0        |        24.0        |        24.0        |
< 7510 INFO  | MCS8   |        30.0        |        30.0        |        30.0        |
< 7510 INFO  | MCS9   |        30.0        |        30.0        |        30.0        |
< 7510 INFO  | MCS10  |        30.0        |        30.0        |        30.0        |
< 7510 INFO  | MCS11  |        30.0        |        30.0        |        30.0        |
< 7510 INFO  | MCS12  |        13.0        |        13.0        |        13.0        |
< 7510 INFO  | MCS13  |        13.0        |        13.0        |        13.0        |
< 7510 INFO  | MCS14  |        10.0        |        10.0        |        10.0        |
< 7510 INFO  | MCS15  |         9.0        |         9.0        |         9.0        |
< 7510 INFO  | MCS16  |        30.0        |        30.0        |        30.0        |
< 7510 INFO  | MCS17  |        30.0        |        30.0        |        30.0        |
< 7510 INFO  | MCS18  |        30.0        |        30.0        |        30.0        |
< 7510 INFO  | MCS19  |        30.0        |        30.0        |        30.0        |
< 7510 INFO  | MCS20  |        13.0        |        13.0        |        13.0        |
< 7510 INFO  | MCS21  |        13.0        |        13.0        |        13.0        |
< 7510 INFO  | MCS22  |        10.0        |        10.0        |        10.0        |
< 7510 INFO  | MCS23  |         9.0        |         9.0        |         9.0        |
< 7510 INFO  |========================================================================
< 7510 INFO  |                                                                       |
< 7510 INFO  |=======================Test Group Band Edge Power======================|
< 7510 INFO  |                                                                       |
< 7510 INFO  |                                                                       |
< 7510 INFO  | CTL: 0x11 [ 11B base mode ]                                           |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | edge  | 2412  | 2417  | 2472  | 2484  |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | power | 30.0  | 30.0  | 30.0  | 30.0  |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | flag  |   0   |   1   |   0   |   1   |
< 7510 INFO  =========================================================================
< 7510 INFO  |                                                                       |
< 7510 INFO  | CTL: 0x12 [ 11G base mode ]                                           |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | edge  | 2412  | 2417  | 2472  | 2484  |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | power | 30.0  | 30.0  | 30.0  | 30.0  |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | flag  |   0   |   1   |   0   |   1   |
< 7510 INFO  =========================================================================
< 7510 INFO  |                                                                       |
< 7510 INFO  | CTL: 0x15 [ 2G HT20 mode  ]                                           |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | edge  | 2412  | 2417  | 2472  | 2484  |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | power | 30.0  | 30.0  | 30.0  | 30.0  |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | flag  |   0   |   1   |   0   |   1   |
< 7510 INFO  =========================================================================
< 7510 INFO  |                                                                       |
< 7510 INFO  | CTL: 0x17 [ 2G HT40 mode  ]                                           |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | edge  | 2412  | 2417  | 2472  | 2484  |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | power | 30.0  | 30.0  | 30.0  | 30.0  |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | flag  |   0   |   1   |   0   |   1   |
< 7510 INFO  =========================================================================
< 7510 INFO  |                                                                       |
< 7510 INFO  | CTL: 0x41 [ 11B base mode ]                                           |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | edge  | 2412  | 2417  | 2472  | 2484  |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | power | 30.0  | 30.0  | 30.0  | 30.0  |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | flag  |   0   |   1   |   0   |   1   |
< 7510 INFO  =========================================================================
< 7510 INFO  |                                                                       |
< 7510 INFO  | CTL: 0x42 [ 11G base mode ]                                           |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | edge  | 2412  | 2417  | 2472  | 2484  |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | power | 30.0  | 30.0  | 30.0  | 30.0  |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | flag  |   0   |   1   |   0   |   1   |
< 7510 INFO  =========================================================================
< 7510 INFO  |                                                                       |
< 7510 INFO  | CTL: 0x45 [ 2G HT20 mode  ]                                           |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | edge  | 2412  | 2417  | 2472  | 2484  |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | power | 30.0  | 30.0  | 30.0  | 30.0  |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | flag  |   0   |   1   |   0   |   1   |
< 7510 INFO  =========================================================================
< 7510 INFO  |                                                                       |
< 7510 INFO  | CTL: 0x47 [ 2G HT40 mode  ]                                           |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | edge  | 2412  | 2417  | 2472  | 2484  |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | power | 30.0  | 30.0  | 30.0  | 30.0  |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | flag  |   0   |   1   |   0   |   1   |
< 7510 INFO  =========================================================================
< 7510 INFO  |                                                                       |
< 7510 INFO  | CTL: 0x31 [ 11B base mode ]                                           |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | edge  | 2412  | 2417  | 2472  | 2484  |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | power | 30.0  | 30.0  | 30.0  | 30.0  |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | flag  |   0   |   1   |   0   |   1   |
< 7510 INFO  =========================================================================
< 7510 INFO  |                                                                       |
< 7510 INFO  | CTL: 0x32 [ 11G base mode ]                                           |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | edge  | 2412  | 2417  | 2472  | 2484  |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | power | 30.0  | 30.0  | 30.0  | 30.0  |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | flag  |   0   |   1   |   0   |   1   |
< 7510 INFO  =========================================================================
< 7510 INFO  |                                                                       |
< 7510 INFO  | CTL: 0x35 [ 2G HT20 mode  ]                                           |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | edge  | 2412  | 2417  | 2472  | 2484  |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | power | 30.0  | 30.0  | 30.0  | 30.0  |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | flag  |   0   |   1   |   0   |   1   |
< 7510 INFO  =========================================================================
< 7510 INFO  |                                                                       |
< 7510 INFO  | CTL: 0x37 [ 2G HT40 mode  ]                                           |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | edge  | 2412  | 2417  | 2472  | 2484  |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | power | 30.0  | 30.0  | 30.0  | 30.0  |
< 7510 INFO  |=======|=======|=======|=======|=======|=======|=======|=======|=======|
< 7510 INFO  | flag  |   0   |   1   |   0   |   1   |
< 7510 INFO  =========================================================================
< 7506 CONTROL DONE get all instance=0;
============mcart ESC to exit
> unload
< 7508 CONTROL[  325.350000] DK:: dk_release 
 BEGIN unload
[  325.350000] DK::Unregsitering client 0 
[  325.360000] DK::Disable the interrupts and reset the device 
[  325.360000] ==MHX(cli_reg_read) read addr=b8104020. offset=4020
[  325.370000] DK::Reg read @ 0xb8104020 : 0x0000 
[  325.370000] Device Mac Rev : 0x0
[  325.380000] DK::Reg write @ 0xb8100024 : 0x0000 
[  325.380000] DEBUG : DK::Reg write @ 0xb8100024 : 0x0000 
[  325.390000] Device Status is : 0x0
< 7504 INFO |set|devid||
< 7504 INFO |set|mac||
< 7504 INFO |set|customer||
< 6002 INFO Unloaded card.
< 7506 CONTROL DONE unload
ERROR::socket disconnected: Resource temporarily unavailable



Jan 28, 2020
In CardLoad(), FreeMemoryPrint() function causes "Bus error".
In ar9300_attach(), need to use ar9531 harneybee INI file:
   } else if (AR_SREV_HONEYBEE(ah)) {
        /* mac */
        INIT_INI_ARRAY(&ahp->ah_ini_mac[ATH_INI_PRE], NULL, 0, 0);
        INIT_INI_ARRAY(&ahp->ah_ini_mac[ATH_INI_CORE],
                        qca953x_honeybee_1p0_mac_core,
                        ARRAY_LENGTH(qca953x_honeybee_1p0_mac_core), 2);
        INIT_INI_ARRAY(&ahp->ah_ini_mac[ATH_INI_POST],
                        qca953x_honeybee_1p0_mac_postamble,
                        ARRAY_LENGTH(qca953x_honeybee_1p0_mac_postamble), 5);


Jan 27, 2020
Got QCA latest ART : LinuxART2CS10.2v4.9.446
// the first hal dll to be choose for the devid
static struct _DevidToName DevidToName[]=
{
	// {int devid, char*name}
	{ChipTest,"NoChip"},					// text based test device, no chip, no link. 1
	{ChipLinkTest,"LinkNoChip"},				// text based test device, no chip, regular link. 2 
	{AR9300_DEVID_AR9380_PCIE,"ar9300"},			// osprey 0x30
	{AR9300_DEVID_AR946X_PCIE,"ar946x"},			// jupiter 0x34
	{AR9300_DEVID_AR956X_PCIE,"ar956x"},			// aphrodite 0x36
	{AR9300_DEVID_AR9580_PCIE,"ar9300"},			// peacock 0x33
	{AR9300_DEVID_AR9485_PCIE,"AR9485"},	         	// poseidon 0x32
//	{AR9300_DEVID_AR9330,"ar9300_9-3-0"},			// hornet
	{AR9300_DEVID_AR9340,"ar9300"},				// wasp	0x31
	{AR9300_DEVID_AR955X,"ar9300"},				// Scorpion	0x39
	{AR6004_DEVID,"OlcaAr6004"},				// mckinley	0x3b
	{QC98XX_DEVID,"qc98xx"},                            	// Peregrine	0x3c
	{QC9887_DEVID,"qc98xx"},                            	// Swift	0x50
	{AR5416_DEVID_AR9287_PCIE,"ar9287"},			// Kiwi		0x2e
	{AR9300_DEVID_AR953X,"ar9300"},				// Honeybee	0x3d
	{AR9300_DEVID_AR956X,"ar9300"},				// Dragonfly	0x3f
	{AR9300_DEVID_AR5500,"ar9300"},				// Jet		0x40
};

Looks like the flash read is not supported in the art.ko:
            case DK_IOCTL_FLASH_READ:
                printk("DK:: Flash read is not supported any more from art driver\n");
                break;
            case DK_IOCTL_FLASH_WRITE:
                printk("DK:: Flash read is not supported any more from art driver\n");
                break; 

Jan 23, 2020
How to debug ART2's art.ko.
vi package/kernel/art2_ver_2_67ap/Makefile 
define ART2_MAKEOPTS
        LINUX_KARCH=mips \
        LINUX_SUBARCH= \
        CROSS_COMPILE=$(TARGET_CROSS) \
        LINUX_DIR=$(LINUX_DIR) \
        DK_DEBUG=1 \			// add this line
        LDFLAGS="$(TARGET_LDFLAGS) -lm -lpthread"
endef


$(MAKE) -C  "$(PKG_BUILD_DIR)"/src/driver/linux -f makefile.artmod hornet $(ART2_MAKEOPTS)	//In pWII&pDDL using hornet chip. HORNET=1
$(MAKE) -C  "$(PKG_BUILD_DIR)"/src/driver/linux -f makefile.artmod wasp $(ART2_MAKEOPTS)	//In pMDDL, using wasp chip. AP83=WASP=1

On qca9531, nart.out log and Chip Revision ID: Note: #define AR_SOC_RST_REVISION_ID  0xB8060090	// this is the SoC ID, not the WMAC Revision ID.
==MHX(ar9300Attach)3.2, devid=31. ah->ah_macVersion=300, ah->ah_macRev=0 //AR_SREV_WASP=1,AR_SREV_WASP_10=1
root@UserDevice:~# mhx -reg get b8060090
Register 0xb8060090 has value 0x00000160


On AR9341 pMDDL2450, nart.out log:
==MHX(ar9300Attach)3.2, devid=31. ah->ah_macVersion=300, ah->ah_macRev=3 ////AR_SREV_WASP=1
root@ip41-fb-7d-78:~# mhx -reg get b8060090
Register 0xb8060090 has value 0x00010123

On ar9331 pwii, nart.out log:
==MHX(ar9300Attach)3.2, devid=30. ah->ah_macVersion=200, ah->ah_macRev=1  //AR_SREV_HORNET=1, AR_SREV_HORNET_11=1
root@UserDevice:~# mhx -reg get b8060090
Register 0xb8060090 has value 0x00000111

The qca9532 nart.out stuck in ar9300InitPLL(). Trapped in
            do {
                regdata = OS_REG_READ(ah, AR_PHY_PLL_BB_DPLL4);
                UserPrint("==MHX(%s)4.2. regdata=%08x\n", __func__, regdata);
            } while ((regdata & (1 << 3)) == 0);

Jan 22,2020
qca4531 is 9531:
[   15.630000] ==MHX1.0(ar9300_otp_read_word) AR9300_OTP_BASE=00014000, addr=000000ff
[   15.640000] ==MHX1.0.0(ar9300_otp_read_word) AR_SREV_9531=1,AR_SREV_9531_10=0,AR_SREV_9531_11=0
static unsigned int ath9k_ioread32(void *hw_priv, u32 reg_offset)
{...
                val = ioread32(sc->mem + reg_offset);
                printk("==MHX2.2(%s) sc->mem=%08x, al=%08x\n", __func__, sc->mem, val);		//mem=0xb8100000.
}

Jan 21, 2020
g3.5 board with qca4531/9531, WiFi complains

[   15.090000] Data bus error, epc == 8689e924, ra == 8689e920
[   15.090000] Oops[#1]:
[   15.090000] CPU: 0 PID: 461 Comm: kmodloader Not tainted 3.10.36 #11
[   15.090000] task: 879665b0 ti: 87bda000 task.ti: 87bda000
[   15.090000] $ 0   : 00000000 00000000 00000500 00000100
[   15.090000] $ 4   : b81143fc 000143fc 86fe1244 00000004
[   15.090000] $ 8   : 00000001 7c7c3c7c 7c7c7c7c 7c7c7c7c
[   15.090000] $12   : 7c7c3c7c 00000001 00000000 7c7c7c3c
[   15.090000] $16   : 8788a010 00000000 00000004 00030000
[   15.090000] $20   : 000003ff 00000300 00000400 00010000
[   15.090000] $24   : 00000000 86fec960                  
[   15.090000] $28   : 87bda000 87bdbb20 87bdbb70 8689e920
[   15.090000] Hi    : 00000003
[   15.090000] Lo    : 000000ff
[   15.090000] epc   : 8689e924 ath9k_hw_setup_statusring+0xe5c/0x1eac [ath9k_hw]
[   15.090000]     Not tainted
[   15.090000] ra    : 8689e920 ath9k_hw_setup_statusring+0xe58/0x1eac [ath9k_hw]
[   15.090000] Status: 1000fc03 KERNEL EXL IE 
[   15.090000] Cause : 5080801c
[   15.090000] PrId  : 00019374 (MIPS 24Kc)
[   15.090000] Modules linked in: ath9k(+) ath9k_common qcserial pppoe ppp_async option l2tp_ppp iptable_nat ath9
k_hw ath usb_wwan smsc75xx rndis_host qmi_wwan pptp pppox ppp_mppe ppp_generic pl2303 nf_nat_ipv4 nf_conntrack_ip
v4 mac80211 ipt_MASQUERADE ftdi_sio cp210x cfg80211 cdc_ncm cdc_ether cdc_eem ax88179_178a asix xt_time xt_state 
xt_recent xt_quota xt_policy xt_pkttype xt_physdev xt_owner xt_nat xt_multiport xt_mark xt_mac xt_limit xt_iprang
e xt_iface xt_helper xt_esp xt_conntrack xt_connmark xt_connlimit xt_connbytes xt_condition xt_comment xt_addrtyp
e xt_TCPMSS xt_REDIRECT xt_RAWNAT xt_NETMAP xt_LOG xt_IPMARK xt_CT usbserial usbnet slhc nf_nat_irc nf_nat_ftp nf
_nat nf_defrag_ipv4 nf_conntrack_netlink nf_conntrack_irc nf_conntrack_ftp iptable_raw iptable_mangle iptable_fil
ter ipt_ah ipt_REJECT ip_tables ebt_among ebt_802_3 crc16 crc_ccitt compat_xtables compat cdc_wdm cdc_acm arptabl
e_filter arpt_mangle arp_tables act_skbedit act_mirred em_u32 cls_u32 cls_tcindex cls_flow cls_route cls_fw sch_h
fsc sch_ingress xt_set ip_set_list_set ip_set_hash_netport ip_set_hash_netiface ip_set_hash_net ip_set_hash_ippor
tnet ip_set_hash_ipportip ip_set_hash_ipport ip_set_hash_ip ip_set_bitmap_port ip_set_bitmap_ipmac ip_set_bitmap_
ip ip_set nfnetlink ip6t_REJECT ip6table_raw ip6table_mangle ip6table_filter ip6_tables nf_conntrack_ipv6 nf_conn
track nf_defrag_ipv6 ip6_gre ip_gre gre l2tp_ip l2tp_eth sit l2tp_netlink l2tp_core ipcomp6 xfrm6_tunnel xfrm6_mo
de_tunnel xfrm6_mode_transport xfrm6_mode_beet esp6 ah6 ipcomp xfrm4_tunnel xfrm4_mode_tunnel xfrm4_mode_transpor
t xfrm4_mode_beet esp4 ah4 ipip ip6_tunnel tunnel6 tunnel4 ip_tunnel tun af_key xfrm_user xfrm_ipcomp xfrm_algo i
pv6 chainiv eseqiv crypto_wq sha1_generic krng rng md5 hmac ecb des_generic deflate zlib_inflate zlib_deflate cbc
 authenc aead arc4 crypto_blkcipher soip ehci_platform ehci_hcd gpio_button_hotplug usbcore nls_base usb_common m
hx_bsp crypto_hash
[   15.090000] Process kmodloader (pid: 461, threadinfo=87bda000, task=879665b0, tls=77594440)
[   15.090000] Stack : 0012c0d0 8031f410 01ffffff 00000017 00000004 800b8e8c 000001ff 86d5d800
[   15.090000]    8788a010 868c722c 868a0000 00000001 8788a41c 00000001 99999999 8689db14
[   15.090000]    87bdbc4c 000003ff 00007000 00000004 00000000 00000220 8788a010 8689ec4c
[   15.090000]    802f0000 80176144 86f2a434 8788a010 00000000 000000c8 8788a010 8788a030
[   15.090000]    ffffffed 868c722c 00000001 00000001 868c721c 00000001 99999999 868924a4
[   15.090000]    ...
[   15.090000] Call Trace:
[   15.090000] [<8689e924>] ath9k_hw_setup_statusring+0xe5c/0x1eac [ath9k_hw]
[   15.090000] [<8689e920>] ath9k_hw_setup_statusring+0xe58/0x1eac [ath9k_hw]
[   15.090000] 
[   15.090000] 
[   15.090000] Code: 00c0f809  02002021  8e0201d8 <10550004> 26650018  26e35f18  00561026  0062280b  240203e8 
[   15.440000] ---[ end trace fcd40fa625772cdb ]---

root@UserDevice:~# cat /proc/modules | grep ath9k_hw
ath9k_hw 315343 2 ath9k,ath9k_common, Live 0x86880000
ath 19717 3 ath9k,ath9k_common,ath9k_hw, Live 0x86810000
root@UserDevice:~# 
root@UserDevice:~# 
root@UserDevice:~# cat sys/module/ath9k_hw/sections/.text 
0x86880000

The problem PC=8689e920, -0x86880000 = 1e920.

./staging_dir/toolchain-mips_24kc_gcc-4.8-linaro_uClibc-0.9.33.2/bin/mips-openwrt-linux-objdump -dlSr build_dir/target-mips_24kc_uClibc-0.9.33.2/linux-ar71xx_generic/compat-wireless-2014-05-22/drivers/net/wireless/ath/ath9k/ath9k_hw.o | less. And search 1e920. And found it in function ar9300_read_otp(). This means, it is NOT in function ath9k_hw_setup_statusring() as shown. 

Search function ath9k_hw_setup_statusring(), it is at address 0x1dac8. 0x1dac8 + 0xe5c [ath9k_hw_setup_statusring+0xe5c/0x1eac] = 0x1e924, which still points function ar9300_read_otp(). And 0x1e924+0x86880000=0x8689E924, which is the PC value.

Jan 20, 2020
pMDDLLTE the USB port doesn't work as HOST. Use an external 5V power to pVivian and connect pVivian to pMDDLLTE still pops up enumeration error in the pMDDLLTE. pVivian doesn't show up in the pMDDLLTE.

Change pVivion video level by shell script. 
root@ip44-fb-6d-2f:~# stty -F /dev/ttyACM0 -a			// check current. use default 115200 settings.
speed 115200 baud;stty: /dev/ttyACM0
 line = 0;
intr = <undef>; quit = <undef>; erase = <undef>; kill = <undef>; eof = <undef>;
eol = <undef>; eol2 = <undef>; swtch = <undef>; start = <undef>;
stop = <undef>; susp = <undef>; rprnt = <undef>; werase = <undef>;
lnext = <undef>; flush = <undef>; min = 0; time = 0;
-parenb -parodd cs8 -hupcl -cstopb cread clocal -crtscts
-ignbrk -brkint -ignpar -parmrk -inpck -istrip -inlcr -igncr -icrnl -ixon
-ixoff -iuclc -ixany -imaxbel -iutf8
-opost -olcuc -ocrnl -onlcr -onocr -onlret -ofill -ofdel nl0 cr0 tab0 bs0 vt0
ff0
-isig -icanon -iexten -echo -echoe -echok -echonl -noflsh -xcase -tostop
-echoprt -echoctl -echoke
root@ip44-fb-6d-2f:~# 
root@ip44-fb-6d-2f:~# echo -n -e '\x41\x54\x2B\x4D\x53\x3D\x33\x32\x30\x2A\x32\x34\x30\x2C\x32\x34\x2C\x31\x0D' > /dev/ttyACM0
root@ip44-fb-6d-2f:~# 
root@ip44-fb-6d-2f:~# echo -n -e '\x41\x54\x2B\x4D\x53\x3D\x31\x39\x32\x30\x2A\x31\x30\x38\x30\x2C\x32\x30\x34\x38\x2C\x33\x30\x0D' > /dev/ttyACM0
Verified with pVivian r1016 f/w.

root@ip44-fb-6d-2f:~# 
root@ip44-fb-6d-2f:~# abc='\x41\x54\x2B\x4D\x53\x3D\x31\x39\x32\x30\x2A\x31\x30\x38\x30\x2C\x32\x30\x34\x38\x2C\x33\x30\x0D'
root@ip44-fb-6d-2f:~# 
root@ip44-fb-6d-2f:~# echo $abc
\x41\x54\x2B\x4D\x53\x3D\x31\x39\x32\x30\x2A\x31\x30\x38\x30\x2C\x32\x30\x34\x38\x2C\x33\x30\x0D
root@ip44-fb-6d-2f:~# 
root@ip44-fb-6d-2f:~# echo -ne "$abc" > /dev/ttyACM0		// verified worked!



Jan 17, 2020
pMDDL and 3Pi repeater mode. A basic idea is that a Repeater is also a STA first. It MUST connect to a AP before a STA can connect to this Repeater. Because the wpa_supplicant will occupy the RF to listen to Beacons so that the hostapd can not broadcast beacons. This means a STA-Repeater-(no AP) mode doesn't work. The wpa_supplicant scanning will disturb the hostapd beaconing even though it is scanning in the same frequency.

3Pi. AP set to f=5021 and STA set to f=5010. Still connects. Use ART Throughout test mode. Transmitter various frequencies : 5010, 5011, 5021,5026,5031. Receiver set to 5010. TX both 5021, 5010 works and the receiver can receive data. But with tx_freq=5021, the receiver RSSI is low and only has low reate throughput.

Note: Because the ART uses network connection between NART and CART, so Telnet to a unit doesn't start ART program successfully.

Jan 16, 2020
Hostapd running as a daemon, prints debug message to syslog:
1. Change syslog and stdout outpit log mask/level. In /lib/netifd/hostapd.sh:


log_mask=-1                           
log_level=0                           
        append "$var" "logger_syslog=$log_mask" "$N"
        append "$var" "logger_syslog_level=$log_level" "$N"
        append "$var" "logger_stdout=$log_mask" "$N"
        append "$var" "logger_stdout_level=$log_level" "$N"


# hostapd event logger configuration
#
# Two output method: syslog and stdout (only usable if not forking to
# background).
#
# Module bitfield (ORed bitfield of modules that will be logged; -1 = all
# modules):
# bit 0 (1) = IEEE 802.11
# bit 1 (2) = IEEE 802.1X
# bit 2 (4) = RADIUS
# bit 3 (8) = WPA
# bit 4 (16) = driver interface
# bit 6 (64) = MLME
#
# Levels (minimum value for logged events):
#  0 = verbose debugging
#  1 = debugging
#  2 = informational messages
#  3 = notification
#  4 = warning
#
logger_syslog=-1
logger_syslog_level=2
logger_stdout=-1
logger_stdout_level=2

2. Hostapd still runs in daemon mode to output to syslog ( -B )

3. Adding that to hostapd config file doesn't automatically print message to syslog. Need to add -d parameter like:
                /usr/sbin/hostapd ${band_option} -P /var/run/wifi-$phy.pid -dd -B "$hostapd_conf_file"
                ret="$?"          
                wireless_add_process "$(cat /var/run/wifi-$phy.pid)" "/usr/sbin/hostapd" 1
4. Use logread -f to read debug messages.

Jan 15, 2020
（1）get：请求参数是作为一个key/value对的序列（查询字符串）附加到URL上的
查询字符串的长度受到web浏览器和web服务器的限制（如IE最多支持2048个字符），不适合传输大型数据集同时，它很不安全

（2）post：请求参数是在http标题的一个不同部分（名为entity body）传输的，这一部分用来传输表单信息，因此必须将Content-type设置为:application/x-www-form- urlencoded。post设计用来支持web窗体上的用户字段，其参数也是作为key/value对传输。
但是：它不支持复杂数据类型，因为post没有定义传输数据结构的语义和规则。

（3）soap：是http post的一个专用版本，遵循一种特殊的xml消息格式
Content-type设置为: text/xml 任何数据都可以xml化。

Jan 14, 2020
pVivian not supports 2 concurrent streams. When using UDP, when RF link is down, the pVivian doesn't know the stream is broken and still keeps it. When RF link resumes, and EasyPlayer tries to play, the pVivian thinks that's the 3rd request and just ignores it. That's why the EasyPlayer can not play any more. But at the same time the previous 2 UDP streams why don't resume?

Jan 7, 2020
pMDDL2450(ar9341) configure the tx/rx chains: printk in ath9k_set_antenna() function:
static int ath9k_set_antenna(struct ieee80211_hw *hw, u32 tx_ant, u32 rx_ant)
{
	struct ath_softc *sc = hw->priv;
	struct ath_hw *ah = sc->sc_ah;

	printk("==MHX1.0 tx_chainmask=%x, rx_chainmask=%x\n", ah->caps.tx_chainmask, ah->caps.rx_chainmask);
	if (ah->caps.rx_chainmask != 1)
		rx_ant |= tx_ant;

	printk("==MHX1.1 tx_ant=%x, rx_ant=%x\n", tx_ant, rx_ant);
	if (!validate_antenna_mask(ah, rx_ant) || !tx_ant)
		return -EINVAL;

	sc->ant_rx = rx_ant;
	sc->ant_tx = tx_ant;

	printk("==MHX1.2 tx_ant=%x, rx_ant=%x\n", tx_ant, rx_ant);

	if (ah->caps.rx_chainmask == 1)
		return 0;

	printk("==MHX1.3 tx_ant=%x, rx_ant=%x. is_ar9100=%d\n", tx_ant, rx_ant, AR_SREV_9100(ah));
	/* AR9100 runs into calibration issues if not all rx chains are enabled */
	if (AR_SREV_9100(ah))
		ah->rxchainmask = 0x7;
	else
		ah->rxchainmask = fill_chainmask(ah->caps.rx_chainmask, rx_ant);

	ah->txchainmask = fill_chainmask(ah->caps.tx_chainmask, tx_ant);
	ath9k_cmn_reload_chainmask(ah);

	return 0;
}

The log of iw command:
=============iw phy phy0 set antenna 1 1:
<0>[  144.950000] ==MHX1.0 tx_chainmask=3, rx_chainmask=3
<0>[  144.950000] ==MHX1.1 tx_ant=1, rx_ant=1
<0>[  144.950000] ==MHX1.2 tx_ant=1, rx_ant=1
<0>[  144.950000] ==MHX1.3 tx_ant=1, rx_ant=1. is_ar9100=0
==============iw phy phy0 set antenna 3 3
<0>[  168.380000] ==MHX1.0 tx_chainmask=3, rx_chainmask=3
<0>[  168.380000] ==MHX1.1 tx_ant=3, rx_ant=3
<0>[  168.380000] ==MHX1.2 tx_ant=3, rx_ant=3
<0>[  168.380000] ==MHX1.3 tx_ant=3, rx_ant=3. is_ar9100=0
=============iw phy phy0 set antenna 1 3
<0>[  187.440000] ==MHX1.0 tx_chainmask=3, rx_chainmask=3
<0>[  187.440000] ==MHX1.1 tx_ant=1, rx_ant=3
<0>[  187.440000] ==MHX1.2 tx_ant=1, rx_ant=3
<0>[  187.440000] ==MHX1.3 tx_ant=1, rx_ant=3. is_ar9100=0
=============iw phy phy0 set antenna 3 1
<0>[  208.040000] ==MHX1.0 tx_chainmask=3, rx_chainmask=3
<0>[  208.040000] ==MHX1.1 tx_ant=3, rx_ant=3
<0>[  208.040000] ==MHX1.2 tx_ant=3, rx_ant=3
<0>[  208.040000] ==MHX1.3 tx_ant=3, rx_ant=3. is_ar9100=0

This means can't be RX1+TX2 (mosi) mode.


Jan 6, 2020
65hrs over weekend test. pVivian-----USB Hub dev board--------PC (with EasyPlayer). pVivian is not seen any reboot. This means the USB Hub evaluation board is not the problem.

Ubnt16.04, install phymyadmin, MySQL application password for phpmyadmin is : Microhard18. Install Wordpress, SiteTitle=Ubuntu1604-wp;username=Ubuntu1604-wp-user;Password=Microhard18.

Jan 2, 2020
40hrs streaming pVivian test over pMDDL2450. No "/proc/kmsg" complaint from pVivian, uptime=18hrs. pMDDL2450 saw 5 disconnections of pVivian. 

This means pVivian has rebooted. But it's pMDDL2450 caused its reboot because PC didn't have this issue after a 71hrs stress test.

Dec 31, 2019
pMDDL2450, switch between MESH mode and STA mode.
1. After Mesh mode switches to STA mode, arp table in unit is wrong. "ip neigh show" shows a wrong MAC address always REACHABLE but actually it is STALE. Manually "ip neigh flush 192.168.10.5" resolves this problem.

2. Afte STA mode switches to Mesh mode, PCs behind Mesh Nodes can not reach each other. Disable/Enable the PC Ethernet port doesn't help. Looks like none-encryption Mesh has no issue.

Dec 19, 2019
When EasyPlayerPro is using TCP for RTSP, a sudden antenna removal will easily cause too many TCP Retremissions between EasyPlayer and pVivian. So use UDP for RTSP.
When using UDP RTSP, the latency is reduced to about 270mS over wifi. And AP transmitter aggregation length is around 3, while in TCP it is about 1.2.

Dec 17, 2019
CI copied to /var/www/html/ but use apache2 127.0.0.1/codeigniter/index.php complains 403:Forbidden. The reason is hat the "codeigniter" directory it self must have -x permission:

jli@jli-OptiPlex-7060:~$ sudo ls -al /var/www/html/
total 28
drwxr-xr-x 3 www-data www-data  4096 Dec  3 15:43 .
drwxr-xr-x 3 root     root      4096 Dec  3 15:34 ..
drw-rw-rw- 5 www-data www-data  4096 Dec 16 16:15 codeigniter	// no -x
-rw-r--r-- 1 root     root     11321 Nov 29 11:22 index.html
-rw-rw-rw- 1 jli      jli        565 Dec 16 12:05 test.php
jli@jli-OptiPlex-7060:~$ sudo chmod 777 /var/www/html/codeigniter/
jli@jli-OptiPlex-7060:~$ sudo ls -al /var/www/html/
total 28
drwxr-xr-x 3 www-data www-data  4096 Dec  3 15:43 .
drwxr-xr-x 3 root     root      4096 Dec  3 15:34 ..
drwxrwxrwx 5 www-data www-data  4096 Dec 16 16:15 codeigniter	// add +x
-rw-r--r-- 1 root     root     11321 Nov 29 11:22 index.html
-rw-rw-rw- 1 jli      jli        565 Dec 16 12:05 test.php

Web access works.


Dec 13, 2019
pVivian over pMDDL2450 wireless. The latency was measured about 300-650mS. When good video playback (TCP playback), the reverse ping from Player to pVivian(8.10) is about 2ms~5mS. And on the AP the aggregation is about <2: Average A-MPDU length: 1.6 (wireless.radio0.txaggr=0).
A direct connection: PC2 as video source ---- HDMI cable----pVivian---USB Cable---PC1, the latency is 190mS.

Dec, 2, 2019
Ubnt16.04+Apache2+PHP7.0.33. /var/www/html/test.php doesn't show up in browser. Install libapache2-mod-php7.0.

Nov 29, 2019
If chilli is started properly, you should see a new interface called tun0 displayed while using ifconfig. This interface should get the gateway IP address for your configured hotspot system. To better understand, it’s basically a tunnel interface between your hotspot serving wireless interface (wlp2s0) and externally connected ethernet interface (enp1s0). That means, all your wireless traffic will pass through this tunnel before reaching external networks and Coova can control all these traffic. That’s why clients cannot get to Internet until Coova allows them. And once a client is allowed external access, Coova masquerades or NAT’s this traffic through the ethernet interface using Iptables.

Nov 28, 2019
https://www.digitalocean.com/community/tutorials/how-to-set-up-an-openvpn-server-on-ubuntu-16-04. 
1. On server side, Ubnt16.04:
root@jli-OptiPlex-7060:~# ps -aux | grep openvpn
nobody   23985  0.1  0.0  44132  5868 ?        Ss   09:50   0:08 /usr/sbin/openvpn --daemon ovpn-my_server --status /run/openvpn/my_server.status 10 --cd /etc/openvpn --script-security 2 --config /etc/openvpn/my_server.conf --writepid /run/openvpn/my_server.pid
root@jli-OptiPlex-7060:~# ifconfig
docker0   Link encap:Ethernet  HWaddr 02:42:db:10:ad:a5  
          inet addr:172.17.0.1  Bcast:172.17.255.255  Mask:255.255.0.0
          UP BROADCAST MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)

eno1      Link encap:Ethernet  HWaddr 8c:ec:4b:cd:4e:f4  
          inet addr:192.168.22.183  Bcast:192.168.22.255  Mask:255.255.255.0
          inet6 addr: fe80::ab1e:94cf:9d98:1d1c/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:397817826 errors:0 dropped:0 overruns:0 frame:0
          TX packets:1166271326 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:28373259118 (28.3 GB)  TX bytes:1299583487983 (1.2 TB)
          Interrupt:16 Memory:92c00000-92c20000 

enx0050b60f6336 Link encap:Ethernet  HWaddr 00:50:b6:0f:63:36  
          UP BROADCAST MULTICAST  MTU:1500  Metric:1
          RX packets:37504 errors:0 dropped:0 overruns:0 frame:0
          TX packets:11546 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:4243528 (4.2 MB)  TX bytes:1752577 (1.7 MB)

lo        Link encap:Local Loopback  
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:24562 errors:0 dropped:0 overruns:0 frame:0
          TX packets:24562 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:2256081 (2.2 MB)  TX bytes:2256081 (2.2 MB)

tun0      Link encap:UNSPEC  HWaddr 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  
          inet addr:10.8.0.1  P-t-P:10.8.0.2  Mask:255.255.255.255
          inet6 addr: fe80::cc06:922e:e390:f290/64 Scope:Link
          UP POINTOPOINT RUNNING NOARP MULTICAST  MTU:1500  Metric:1
          RX packets:423493 errors:0 dropped:0 overruns:0 frame:0
          TX packets:792477 errors:0 dropped:8007 overruns:0 carrier:0
          collisions:0 txqueuelen:100 
          RX bytes:22768788 (22.7 MB)  TX bytes:1093586136 (1.0 GB)
root@jli-OptiPlex-7060:~# ip addr  show tun0
5: tun0: <POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UNKNOWN group default qlen 100
    link/none 
    inet 10.8.0.1 peer 10.8.0.2/32 scope global tun0
       valid_lft forever preferred_lft forever
    inet6 fe80::cc06:922e:e390:f290/64 scope link flags 800 
       valid_lft forever preferred_lft forever

2. On the client side,Ubnt18.04, use openvpn work in client mode:
jli@DENG-JEFFL:~$ sudo openvpn --config ~/tmp/client1.ovpn 
Thu Nov 28 11:55:16 2019 OpenVPN 2.4.4 x86_64-pc-linux-gnu [SSL (OpenSSL)] [LZO] [LZ4] [EPOLL] [PKCS11] [MH/PKTINFO] [AEAD] built on May 14 2019
Thu Nov 28 11:55:16 2019 library versions: OpenSSL 1.1.1  11 Sep 2018, LZO 2.08
Thu Nov 28 11:55:16 2019 NOTE: the current --script-security setting may allow this configuration to call user-defined scripts
Thu Nov 28 11:55:16 2019 Outgoing Control Channel Authentication: Using 256 bit message hash 'SHA256' for HMAC authentication
Thu Nov 28 11:55:16 2019 Incoming Control Channel Authentication: Using 256 bit message hash 'SHA256' for HMAC authentication
Thu Nov 28 11:55:16 2019 TCP/UDP: Preserving recently used remote address: [AF_INET]192.168.22.183:1194
Thu Nov 28 11:55:16 2019 Socket Buffers: R=[212992->212992] S=[212992->212992]
Thu Nov 28 11:55:16 2019 UDP link local: (not bound)
Thu Nov 28 11:55:16 2019 UDP link remote: [AF_INET]192.168.22.183:1194
Thu Nov 28 11:55:16 2019 NOTE: UID/GID downgrade will be delayed because of --client, --pull, or --up-delay
Thu Nov 28 11:55:16 2019 TLS: Initial packet from [AF_INET]192.168.22.183:1194, sid=56411fd0 663fd3e0
Thu Nov 28 11:55:16 2019 VERIFY OK: depth=1, C=CA, ST=AB, L=Calgary, O=MHX, OU=MyOrganizationalUnit, CN=MHX-CommonName, name=EasyRSA-Server-Key, emailAddress=me@myhost.mydomain
Thu Nov 28 11:55:16 2019 VERIFY KU OK
Thu Nov 28 11:55:16 2019 Validating certificate extended key usage
Thu Nov 28 11:55:16 2019 ++ Certificate has EKU (str) TLS Web Server Authentication, expects TLS Web Server Authentication
Thu Nov 28 11:55:16 2019 VERIFY EKU OK
Thu Nov 28 11:55:16 2019 VERIFY OK: depth=0, C=CA, ST=AB, L=Calgary, O=MHX, OU=MyOrganizationalUnit, CN=my_server, name=EasyRSA-Server-Key, emailAddress=me@myhost.mydomain
Thu Nov 28 11:55:16 2019 Control Channel: TLSv1.2, cipher TLSv1.2 DHE-RSA-AES256-GCM-SHA384, 2048 bit RSA
Thu Nov 28 11:55:16 2019 [my_server] Peer Connection Initiated with [AF_INET]192.168.22.183:1194
Thu Nov 28 11:55:17 2019 SENT CONTROL [my_server]: 'PUSH_REQUEST' (status=1)
Thu Nov 28 11:55:17 2019 PUSH: Received control message: 'PUSH_REPLY,route 10.8.0.1,topology net30,ping 10,ping-restart 120,ifconfig 10.8.0.6 10.8.0.5'
Thu Nov 28 11:55:17 2019 OPTIONS IMPORT: timers and/or timeouts modified
Thu Nov 28 11:55:17 2019 OPTIONS IMPORT: --ifconfig/up options modified
Thu Nov 28 11:55:17 2019 OPTIONS IMPORT: route options modified
Thu Nov 28 11:55:17 2019 Outgoing Data Channel: Cipher 'AES-128-CBC' initialized with 128 bit key
Thu Nov 28 11:55:17 2019 Outgoing Data Channel: Using 256 bit message hash 'SHA256' for HMAC authentication
Thu Nov 28 11:55:17 2019 Incoming Data Channel: Cipher 'AES-128-CBC' initialized with 128 bit key
Thu Nov 28 11:55:17 2019 Incoming Data Channel: Using 256 bit message hash 'SHA256' for HMAC authentication
Thu Nov 28 11:55:17 2019 ROUTE_GATEWAY 192.168.22.1/255.255.255.0 IFACE=enp0s31f6 HWADDR=8c:ec:4b:6c:97:db
Thu Nov 28 11:55:17 2019 TUN/TAP device tun0 opened
Thu Nov 28 11:55:17 2019 TUN/TAP TX queue length set to 100
Thu Nov 28 11:55:17 2019 do_ifconfig, tt->did_ifconfig_ipv6_setup=0
Thu Nov 28 11:55:17 2019 /sbin/ip link set dev tun0 up mtu 1500
Thu Nov 28 11:55:17 2019 /sbin/ip addr add dev tun0 local 10.8.0.6 peer 10.8.0.5
Thu Nov 28 11:55:17 2019 /etc/openvpn/update-resolv-conf tun0 1500 1570 10.8.0.6 10.8.0.5 init
Thu Nov 28 11:55:17 2019 /sbin/ip route add 10.8.0.1/32 via 10.8.0.5
Thu Nov 28 11:55:17 2019 GID set to nogroup
Thu Nov 28 11:55:17 2019 UID set to nobody
Thu Nov 28 11:55:17 2019 WARNING: this configuration may cache passwords in memory -- use the auth-nocache option to prevent this
Thu Nov 28 11:55:17 2019 Initialization Sequence Completed

jli@DENG-JEFFL:~/project/work/pmddl/pmddl2450$ ifconfig
enp0s31f6: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 192.168.22.188  netmask 255.255.255.0  broadcast 192.168.22.255
        inet6 fe80::c7af:191f:5f25:3448  prefixlen 64  scopeid 0x20<link>
        ether 8c:ec:4b:6c:97:db  txqueuelen 1000  (Ethernet)
        RX packets 1171207717  bytes 1305037398796 (1.3 TB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 400351554  bytes 28464601114 (28.4 GB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
        device interrupt 20  memory 0xef300000-ef320000  

enx000ec68941be: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 192.168.168.100  netmask 255.255.255.0  broadcast 192.168.168.255
        inet6 fe80::aaa4:fc41:4dea:e66d  prefixlen 64  scopeid 0x20<link>
        ether 00:0e:c6:89:41:be  txqueuelen 1000  (Ethernet)
        RX packets 260484  bytes 38617879 (38.6 MB)
        RX errors 53  dropped 57  overruns 0  frame 26
        TX packets 273941  bytes 56218967 (56.2 MB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        inet6 ::1  prefixlen 128  scopeid 0x10<host>
        loop  txqueuelen 1000  (Local Loopback)
        RX packets 105919  bytes 17562372 (17.5 MB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 105919  bytes 17562372 (17.5 MB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

tun0: flags=4305<UP,POINTOPOINT,RUNNING,NOARP,MULTICAST>  mtu 1500
        inet 10.8.0.6  netmask 255.255.255.255  destination 10.8.0.5
        inet6 fe80::ec9d:20d1:9862:a6c1  prefixlen 64  scopeid 0x20<link>
        unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  txqueuelen 100  (UNSPEC)
        RX packets 792467  bytes 1093585656 (1.0 GB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 423500  bytes 22769124 (22.7 MB)
        TX errors 0  dropped 581 overruns 0  carrier 0  collisions 0
jli@DENG-JEFFL:~/project/work/pmddl/pmddl2450$ ip addr show tun0
4: tun0: <POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UNKNOWN group default qlen 100
    link/none 
    inet 10.8.0.6 peer 10.8.0.5/32 scope global tun0
       valid_lft forever preferred_lft forever
    inet6 fe80::ec9d:20d1:9862:a6c1/64 scope link stable-privacy 
       valid_lft forever preferred_lft forever
jli@DENG-JEFFL:~/project/work/pmddl/pmddl2450$ ping 10.8.0.1
PING 10.8.0.1 (10.8.0.1) 56(84) bytes of data.
64 bytes from 10.8.0.1: icmp_seq=1 ttl=64 time=0.912 ms
64 bytes from 10.8.0.1: icmp_seq=2 ttl=64 time=0.799 ms
^C
--- 10.8.0.1 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 1006ms
rtt min/avg/max/mdev = 0.799/0.855/0.912/0.063 ms

Test the OpenVPN t/p:

	OpenVPN Client 10.8.0.6			OpenVPN Server 108.0.1				T/P	Comment
	iperf -s -i 2				iperf -c 10.8.0.6 -i 2			823 Mbits/sec	VPN TCP
	iperf -s -i 2 -u			iperf -c 10.8.0.6 -i 2 -u -b 850m	812 Mbits/sec	VPN UDP
	iperf -s -i 2				iperf -c 192.168.22.188 -i 2		934 Mbits/sec	regular TCP
	iperf -s -i 2 -u			iperf -c 192.168.22.188 -i 2 -u -b 950m	807 Mbits/sec	regular UDP

Nov 27, 2019
TLS handshake process:
Random1(by browser), Random2(by server),第三个随机数(by browser)，又称"pre-master key". 
"不管是客户端还是服务器，都需要随机数，这样生成的密钥才不会每次都一样。由于SSL协议中证书是静态的，因此十分有必要引入一种随机因素来保证协商出来的密钥的随机性。对于RSA密钥交换算法来说，pre-master-key本身就是一个随机数，再加上hello消息中的随机，三个随机数通过一个密钥导出器最终导出一个对称密钥。pre master的存在在于SSL协议不信任每个主机都能产生完全随机的随机数，如果随机数不随机，那么pre master secret就有可能被猜出来，那么仅适用pre master secret作为密钥就不合适了，因此必须引入新的随机因素，那么客户端和服务器加上pre master secret三个随机数一同生成的密钥就不容易被猜出了，一个伪随机可能完全不随机，可是是三个伪随机就十分接近随机了，每增加一个自由度，随机性增加的可不是一。"

pMDDL Que mapping
Use ping ToS to test the queue:
ping -Q 			0	32		64	96	128	160	192	224	
TXDP[q](H/W)			1	0		0	1	2	2	3	3

Nov 26, 2019
WPA2-Enterprise has the same key-exchange after the Radius server "Sending Access-Accept". This is a tcpdump log on the AP:

18:52:45.269105 00:0f:92:fe:00:86 > 04:f0:21:42:23:f3, ethertype EAPOL (0x888e), length 61: EAP pac
ket (0) v1, len 43, Response (2), id 221, len 43
                 Type unknown (25)
        0x0000:  0100 002b 02dd 002b 1900 1703 0100 201b
        0x0010:  412c b392 ced0 5afc 3f24 c44f 45b6 cd6c
        0x0020:  5b6a 23f7 3051 d462 341f e5b7 02e0 f8


18:52:45.276029 04:f0:21:42:23:f3 > 00:0f:92:fe:00:86, ethertype EAPOL (0x888e), length 22: EAP pac
ket (0) v2, len 4, Success (3), id 221, len 4		// AP:04:f0:21:42:23:f3 send success to STA(00:0f:92:fe:00:86) after receiving Access-Accept from RADIUS server.
        0x0000:  0200 0004 03dd 0004

18:52:45.276354 04:f0:21:42:23:f3 > 00:0f:92:fe:00:86, ethertype EAPOL (0x888e), length 135: EAPOL 	//Normal WPA 4-way handshake. 1/4
key (3) v2, len 117
        0x0000:  0203 0075 0200 8a00 1000 0000 0000 0000
        0x0010:  01ca e054 1c77 22ef 991a e969 c554 c1af
        0x0020:  9389 be36 4fa3 930f b73e acc8 dbef 07f6
        0x0030:  8c00 0000 0000 0000 0000 0000 0000 0000
        0x0040:  0000 0000 0000 0000 0000 0000 0000 0000
        0x0050:  0000 0000 0000 0000 0000 0000 0000 0000
        0x0060:  0000 16dd 1400 0fac 0417 f2e2 90e5 9060
        0x0070:  beb1 3fec 9377 06ed fe
18:52:45.281663 00:0f:92:fe:00:86 > 04:f0:21:42:23:f3, ethertype EAPOL (0x888e), length 135: EAPOL 	// 2/4
key (3) v1, len 117
        0x0000:  0103 0075 0201 0a00 0000 0000 0000 0000
        0x0010:  01f4 186f c2fe 3c6a 9b2a 2f7d 5c32 dc63
        0x0020:  9ce5 ba0e 92bc a504 3b3d a4ef a597 1685
        0x0030:  f400 0000 0000 0000 0000 0000 0000 0000
        0x0040:  0000 0000 0000 0000 0000 0000 0000 0000
        0x0050:  0037 41bd f2ab 1517 6269 e9e3 c236 95b9
        0x0060:  a600 1630 1401 0000 0fac 0401 0000 0fac
        0x0070:  0401 0000 0fac 0100 00
18:52:45.282594 04:f0:21:42:23:f3 > 00:0f:92:fe:00:86, ethertype EAPOL (0x888e), length 169: EAPOL 	// 3/4
key (3) v2, len 151
        0x0000:  0203 0097 0213 ca00 1000 0000 0000 0000
        0x0010:  02ca e054 1c77 22ef 991a e969 c554 c1af
        0x0020:  9389 be36 4fa3 930f b73e acc8 dbef 07f6
        0x0030:  8c00 0000 0000 0000 0000 0000 0000 0000
        0x0040:  0000 0000 0000 0000 0000 0000 0000 0000
        0x0050:  00b8 e8b6 76f0 c7b6 6ee6 e140 ebf5 7afb
        0x0060:  fc00 38f7 e956 fa0c 5e52 7f1a 8711 c58b
        0x0070:  c13e 7d3a 9d80 eda4 f4e9 a3cb 3af9 da0a
        0x0080:  c5cd 9191 9f8a e0b5 5036 cb4d 67ca 1694
        0x0090:  f93a 641d 03cd 06b2 0bac f4
18:52:45.288007 00:0f:92:fe:00:86 > 04:f0:21:42:23:f3, ethertype EAPOL (0x888e), length 113: EAPOL 	// 4/4
key (3) v1, len 95
        0x0000:  0103 005f 0203 0a00 0000 0000 0000 0000
        0x0010:  0200 0000 0000 0000 0000 0000 0000 0000
        0x0020:  0000 0000 0000 0000 0000 0000 0000 0000
        0x0030:  0000 0000 0000 0000 0000 0000 0000 0000
        0x0040:  0000 0000 0000 0000 0000 0000 0000 0000
        0x0050:  0040 deda 537e 24ab 3cd3 b99f 911d b8b9
        0x0060:  bd00 00
18:52:45.852459 00:0f:92:fe:00:86 > 33:33:00:00:00:16, ethertype IPv6 (0x86dd), length 130: (hlim 1
, next-header Options (0) payload length: 76) fe80::20f:92ff:fefe:86 > ff02::16: HBH (rtalert: 0x00
00) (padn) [icmp6 sum ok] ICMP6, multicast listener report v2, 3 group record(s) [gaddr ff02::1:ff0
0:0 to_ex, 0 source(s)] [gaddr ff02::1:fffe:86 to_ex, 0 source(s)] [gaddr ff02::2 to_ex, 0 source(s
)]
        0x0000:  6000 0000 004c 0001 fe80 0000 0000 0000
        0x0010:  020f 92ff fefe 0086 ff02 0000 0000 0000
        0x0020:  0000 0000 0000 0016 3a00 0502 0000 0100
        0x0030:  8f00 d5bd 0000 0003 0400 0000 ff02 0000
        0x0040:  0000 0000 0000 0001 ff00 0000 0400 0000
        0x0050:  ff02 0000 0000 0000 0000 0001 fffe 0086
        0x0060:  0400 0000 ff02 0000 0000 0000 0000 0000
        0x0070:  0000 0002
18:52:45.852677 00:0f:92:fe:00:86 > 33:33:00:00:00:16, ethertype IPv6 (0x86dd), length 130: (hlim 1
, next-header Options (0) payload length: 76) fe80::20f:92ff:fefe:86 > ff02::16: HBH (rtalert: 0x00
00) (padn) [icmp6 sum ok] ICMP6, multicast listener report v2, 3 group record(s) [gaddr ff02::1:ff0
0:0 to_ex, 0 source(s)] [gaddr ff02::1:fffe:86 to_ex, 0 source(s)] [gaddr ff02::2 to_ex, 0 source(s
)]
        0x0000:  6000 0000 004c 0001 fe80 0000 0000 0000
        0x0010:  020f 92ff fefe 0086 ff02 0000 0000 0000
        0x0020:  0000 0000 0000 0016 3a00 0502 0000 0100
        0x0030:  8f00 d5bd 0000 0003 0400 0000 ff02 0000
        0x0040:  0000 0000 0000 0001 ff00 0000 0400 0000
        0x0050:  ff02 0000 0000 0000 0000 0001 fffe 0086
        0x0060:  0400 0000 ff02 0000 0000 0000 0000 0000
        0x0070:  0000 0002

A PWii set as WPA2-Enterprise, it default use is PEAP. No other settings are allowed.

root@UserDevice:~# cat etc/banner
===========================================================
         ____    __      __             
        /\  _`\ /\ \  __/\ \  __  __    
        \ \ \L\ \ \ \/\ \ \ \/\_\/\_\   
         \ \ ,__/\ \ \ \ \ \ \/\ \/\ \  
          \ \ \/  \ \ \_/ \_\ \ \ \ \ \ 
           \ \_\   \ `\___x___/\ \_\ \_\
            \/_/    '\/__//__/  \/_/\/_/
                                
     Leaders in Wireless Communication
 Robust Design|Excellent Sensitivity|Maximum Power                
 ----------------------------------------------------------
  * It is time to CHANGE...
  *
  * Microhard Systems Inc           www.microhardcorp.com 
 ----------------------------------------------------------
 Welcome to "v1.3.0" build "1058"
 Built time: 2019-10-21 16:18:40
==============================================================
root@UserDevice:~# cat var/run/wpa_supplicant-wlan0.conf 
network={
        scan_ssid=1
        ssid="bulletac-jeff"

        key_mgmt=WPA-EAP
        identity="user1"
        password="user1-pwd"
        phase2="auth=MSCHAPV2"
        eap=PEAP
        proto=RSN
}
root@UserDevice:~# cat etc/config/wireless 

config wifi-device 'radio0'
        option type 'mac80211'
        option bwmode '20mHz'
        option distance '100'
        option frag '2346'
        option rts '2346'
        option fragoff '1'
        option rtsoff '1'
        option path 'platform/ar933x_wmac'
        option txaggr '1'
        option sgi '1'
        option noscan '0'
        option encryptlvl '63'
        option hwmode '11ng'
        option channel '1'
        option htmode 'HT20'
        option txpower '10'
        option disabled '0'

config wifi-iface
        option device 'radio0'
        option ifname 'wlan0'
        option network 'lan'
        option bonding '0'
        option wmm '1'
        option rate 'auto'
        option hidden '0'
        option isolate '0'
        option macfilter 'none'
        option mesh_mpath_agility '50'
        option mesh_id 'px2-mesh-jeff'
        option ssid 'bulletac-jeff'
        option mode 'sta'
        option wds '0'
        option identity 'user1'
        option key 'mysecret'
        option encryption 'wpa2'
        option password 'user1-pwd'


config UCIMHT 'CHECKTAG'
        option TM '1571701364'
        option LRC '02'
root@UserDevice:~# 

EAP-PEAP(tyoe 25, Protected EAP) is similar with EAP-TTLS(type 21, Tunneled TLS). These 2 methods can work with old authrization mechanisms. First, they set up a TLS tunnel like what EAP-TLS does. Before moving to next stey, it uses the authentication server's certificate to trust this network. Second, use TLS tunnel to encrypt the old authentication method, then authenticate the user. The first step is called "outer" authentication and the second "inner".

A certificate is still needed but only the outer authentication needs that.Only the authentication server (radius server?) needs a certificate, not all the end users! The minor difference between TTLS and PEAP is that the inner authentication. TTLS uses the encrypted channel to exchange "attribute-value pair"(AVP). PEAP uses the encrypted channel to do a second EAP exchange. PWii G3 default uses MSCHAPV2 as inner method.

On EAP-TLS, both sides require a certificate. With a client-side certificate, a compromised password is not enough to break into EAP-TLS enabled systems because the intruder still needs to have the client-side certificate. (JLI : client is supplicant)

On EAP-TTLS, After the server is securely authenticated to the client via its(server?) CA certificate and optionally the client to the server, the server can then use the established secure connection ("tunnel") to authenticate the client. 如果服务器需要确认客户端的身份，就会再包含一项请求在ServerHello中，要求客户端提供"客户端证书"。比如，金融机构往往只允许认证客户连入自己的网络，就会向正式客户提供USB密钥，里面就包含了一张客户端证书。

PEAP is an encapsulation, is not a method. PEAP is similar in design to EAP-TTLS, requiring only a server-side PKI certificate to create a secure TLS tunnel to protect user authentication, and uses server-side public key certificates to authenticate the server. It then creates an encrypted TLS tunnel between the client and the authentication server.

The difference is: PEAP is a SSL wrapper around EAP carrying EAP. TTLS is a SSL wrapper around diameter TLVs (Type Length Values) carrying RADIUS authentication attributes.

The Radius log:
rad_recv: Access-Request packet from host 192.168.168.3 port 54002, id=78, length=200	//168.3 is the AP IP addr, authenticator.
	User-Name = "user1"
	NAS-Identifier = "myNAS"
	Called-Station-Id = "04-F0-21-42-23-F3:bulletac-jeff"	// G5 AP MAC addr and SSID.
	NAS-Port-Type = Wireless-802.11
	Service-Type = Framed-User
	NAS-Port = 1
	Calling-Station-Id = "00-0F-92-FE-00-86"		// PWii STA's MAC addr.
	Connect-Info = "CONNECT 54Mbps 802.11g"
	Acct-Session-Id = "FBC1081CA4C85162"
	WLAN-Pairwise-Cipher = 1027076
	WLAN-Group-Cipher = 1027076
	WLAN-AKM-Suite = 1027073
	Framed-MTU = 1400
	EAP-Message = 0x0294000a017573657231
	Message-Authenticator = 0x4ce853f71bcdc1d677b505c8ac8e058b
Tue Nov 26 15:44:41 2019 : Info: # Executing section authorize from file /etc/freeradius/sites-enabled/default
Tue Nov 26 15:44:41 2019 : Info: +group authorize {
Tue Nov 26 15:44:41 2019 : Info: ++[preprocess] = ok
Tue Nov 26 15:44:41 2019 : Info: ++[chap] = noop
Tue Nov 26 15:44:41 2019 : Info: ++[mschap] = noop
Tue Nov 26 15:44:41 2019 : Info: ++[digest] = noop
Tue Nov 26 15:44:41 2019 : Info: [suffix] No '@' in User-Name = "user1", looking up realm NULL
Tue Nov 26 15:44:41 2019 : Info: [suffix] No such realm "NULL"
Tue Nov 26 15:44:41 2019 : Info: ++[suffix] = noop
Tue Nov 26 15:44:41 2019 : Info: [eap] EAP packet type response id 148 length 10
Tue Nov 26 15:44:41 2019 : Info: [eap] No EAP Start, assuming it's an on-going EAP conversation
Tue Nov 26 15:44:41 2019 : Info: ++[eap] = updated
Tue Nov 26 15:44:41 2019 : Info: [sql] 	expand: %{User-Name} -> user1
Tue Nov 26 15:44:41 2019 : Info: [sql] sql_set_user escaped user --> 'user1'
Tue Nov 26 15:44:41 2019 : Debug: rlm_sql (sql): Reserving sql socket id: 27
Tue Nov 26 15:44:41 2019 : Info: [sql] 	expand: SELECT id, username, attribute, value, op           FROM radcheck           WHERE username = '%{SQL-User-Name}'           ORDER BY id -> SELECT id, username, attribute, value, op           FROM radcheck           WHERE username = 'user1'           ORDER BY id
Tue Nov 26 15:44:41 2019 : Info: [sql] User found in radcheck table
Tue Nov 26 15:44:41 2019 : Info: [sql] 	expand: SELECT id, username, attribute, value, op           FROM radreply           WHERE username = '%{SQL-User-Name}'           ORDER BY id -> SELECT id, username, attribute, value, op           FROM radreply           WHERE username = 'user1'           ORDER BY id
Tue Nov 26 15:44:41 2019 : Info: [sql] 	expand: SELECT groupname           FROM radusergroup           WHERE username = '%{SQL-User-Name}'           ORDER BY priority -> SELECT groupname           FROM radusergroup           WHERE username = 'user1'           ORDER BY priority
Tue Nov 26 15:44:41 2019 : Debug: rlm_sql (sql): Released sql socket id: 27
Tue Nov 26 15:44:41 2019 : Info: ++[sql] = ok
Tue Nov 26 15:44:41 2019 : Info: ++[expiration] = noop
Tue Nov 26 15:44:41 2019 : Info: ++[logintime] = noop
Tue Nov 26 15:44:41 2019 : Info: [pap] WARNING: Auth-Type already set.  Not setting to PAP
Tue Nov 26 15:44:41 2019 : Info: ++[pap] = noop
Tue Nov 26 15:44:41 2019 : Info: +} # group authorize = updated
Tue Nov 26 15:44:41 2019 : Info: Found Auth-Type = EAP
Tue Nov 26 15:44:41 2019 : Info: # Executing group from file /etc/freeradius/sites-enabled/default
Tue Nov 26 15:44:41 2019 : Info: +group authenticate {
Tue Nov 26 15:44:41 2019 : Info: [eap] EAP Identity
Tue Nov 26 15:44:41 2019 : Info: [eap] processing type md5
Tue Nov 26 15:44:41 2019 : Debug: rlm_eap_md5: Issuing Challenge
Tue Nov 26 15:44:41 2019 : Info: ++[eap] = handled
Tue Nov 26 15:44:41 2019 : Info: +} # group authenticate = handled

// Send MD5 challenge. All EAP must support MD5 challenge.[This maybe the MD5 hash value of user1's password.]
Sending Access-Challenge of id 78 to 192.168.168.3 port 54002
	EAP-Message = 0x01950016041025781740eb27f67eda00906ea6fd0f51
	Message-Authenticator = 0x00000000000000000000000000000000
	State = 0xb5f0560db565529744a436dbbde670ca
Tue Nov 26 15:44:41 2019 : Info: Finished request 10.
Tue Nov 26 15:44:41 2019 : Debug: Going to the next request
Tue Nov 26 15:44:41 2019 : Debug: Waking up in 4.9 seconds.

// Received EAP-Response/Method from AP. [This maybe MD5 hash calculated by STA from user1's password.]
rad_recv: Access-Request packet from host 192.168.168.3 port 54002, id=79, length=214
	User-Name = "user1"
	NAS-Identifier = "myNAS"
	Called-Station-Id = "04-F0-21-42-23-F3:bulletac-jeff"
	NAS-Port-Type = Wireless-802.11
	Service-Type = Framed-User
	NAS-Port = 1
	Calling-Station-Id = "00-0F-92-FE-00-86"
	Connect-Info = "CONNECT 54Mbps 802.11g"
	Acct-Session-Id = "FBC1081CA4C85162"
	WLAN-Pairwise-Cipher = 1027076
	WLAN-Group-Cipher = 1027076
	WLAN-AKM-Suite = 1027073
	Framed-MTU = 1400
	EAP-Message = 0x029500060319
	State = 0xb5f0560db565529744a436dbbde670ca
	Message-Authenticator = 0xb86a2f450713ebb561416286be193866
Tue Nov 26 15:44:41 2019 : Info: # Executing section authorize from file /etc/freeradius/sites-enabled/default
Tue Nov 26 15:44:41 2019 : Info: +group authorize {
Tue Nov 26 15:44:41 2019 : Info: ++[preprocess] = ok
Tue Nov 26 15:44:41 2019 : Info: ++[chap] = noop
Tue Nov 26 15:44:41 2019 : Info: ++[mschap] = noop
Tue Nov 26 15:44:41 2019 : Info: ++[digest] = noop
Tue Nov 26 15:44:41 2019 : Info: [suffix] No '@' in User-Name = "user1", looking up realm NULL
Tue Nov 26 15:44:41 2019 : Info: [suffix] No such realm "NULL"
Tue Nov 26 15:44:41 2019 : Info: ++[suffix] = noop
Tue Nov 26 15:44:41 2019 : Info: [eap] EAP packet type response id 149 length 6
Tue Nov 26 15:44:41 2019 : Info: [eap] No EAP Start, assuming it's an on-going EAP conversation
Tue Nov 26 15:44:41 2019 : Info: ++[eap] = updated
Tue Nov 26 15:44:41 2019 : Info: [sql] 	expand: %{User-Name} -> user1
Tue Nov 26 15:44:41 2019 : Info: [sql] sql_set_user escaped user --> 'user1'
Tue Nov 26 15:44:41 2019 : Debug: rlm_sql (sql): Reserving sql socket id: 26
Tue Nov 26 15:44:41 2019 : Info: [sql] 	expand: SELECT id, username, attribute, value, op           FROM radcheck           WHERE username = '%{SQL-User-Name}'           ORDER BY id -> SELECT id, username, attribute, value, op           FROM radcheck           WHERE username = 'user1'           ORDER BY id
Tue Nov 26 15:44:41 2019 : Info: [sql] User found in radcheck table
Tue Nov 26 15:44:41 2019 : Info: [sql] 	expand: SELECT id, username, attribute, value, op           FROM radreply           WHERE username = '%{SQL-User-Name}'           ORDER BY id -> SELECT id, username, attribute, value, op           FROM radreply           WHERE username = 'user1'           ORDER BY id
Tue Nov 26 15:44:41 2019 : Info: [sql] 	expand: SELECT groupname           FROM radusergroup           WHERE username = '%{SQL-User-Name}'           ORDER BY priority -> SELECT groupname           FROM radusergroup           WHERE username = 'user1'           ORDER BY priority
Tue Nov 26 15:44:41 2019 : Debug: rlm_sql (sql): Released sql socket id: 26
Tue Nov 26 15:44:41 2019 : Info: ++[sql] = ok
Tue Nov 26 15:44:41 2019 : Info: ++[expiration] = noop
Tue Nov 26 15:44:41 2019 : Info: ++[logintime] = noop
Tue Nov 26 15:44:41 2019 : Info: [pap] WARNING: Auth-Type already set.  Not setting to PAP
Tue Nov 26 15:44:41 2019 : Info: ++[pap] = noop
Tue Nov 26 15:44:41 2019 : Info: +} # group authorize = updated
Tue Nov 26 15:44:41 2019 : Info: Found Auth-Type = EAP
Tue Nov 26 15:44:41 2019 : Info: # Executing group from file /etc/freeradius/sites-enabled/default
Tue Nov 26 15:44:41 2019 : Info: +group authenticate {
Tue Nov 26 15:44:41 2019 : Info: [eap] Request found, released from the list
Tue Nov 26 15:44:41 2019 : Info: [eap] EAP NAK
Tue Nov 26 15:44:41 2019 : Info: [eap] EAP-NAK asked for EAP-Type/peap
Tue Nov 26 15:44:41 2019 : Info: [eap] processing type tls
Tue Nov 26 15:44:41 2019 : Info: [tls] Initiate
Tue Nov 26 15:44:41 2019 : Info: [tls] Start returned 1
Tue Nov 26 15:44:41 2019 : Info: ++[eap] = handled
Tue Nov 26 15:44:41 2019 : Info: +} # group authenticate = handled


// Set up outer PEAP method.
Sending Access-Challenge of id 79 to 192.168.168.3 port 54002
	EAP-Message = 0x019600061920
	Message-Authenticator = 0x00000000000000000000000000000000
	State = 0xb5f0560db4664f9744a436dbbde670ca
Tue Nov 26 15:44:41 2019 : Info: Finished request 11.
Tue Nov 26 15:44:41 2019 : Debug: Going to the next request
Tue Nov 26 15:44:41 2019 : Debug: Waking up in 4.9 seconds.


rad_recv: Access-Request packet from host 192.168.168.3 port 54002, id=80, length=290
	User-Name = "user1"
	NAS-Identifier = "myNAS"
	Called-Station-Id = "04-F0-21-42-23-F3:bulletac-jeff"
	NAS-Port-Type = Wireless-802.11
	Service-Type = Framed-User
	NAS-Port = 1
	Calling-Station-Id = "00-0F-92-FE-00-86"
	Connect-Info = "CONNECT 54Mbps 802.11g"
	Acct-Session-Id = "FBC1081CA4C85162"
	WLAN-Pairwise-Cipher = 1027076
	WLAN-Group-Cipher = 1027076
	WLAN-AKM-Suite = 1027073
	Framed-MTU = 1400
	EAP-Message = 0x0296005219800000004816030100430100003f03015dae8deba208ad7ba5a64b5e25283330959a2bc0832812ed34e9f3b872221baf000018006b003d003900350067003c0033002f0016000a000500040100
	State = 0xb5f0560db4664f9744a436dbbde670ca
	Message-Authenticator = 0xcb977d5ce3bc0188adef32025f0212f2
Tue Nov 26 15:44:41 2019 : Info: # Executing section authorize from file /etc/freeradius/sites-enabled/default
Tue Nov 26 15:44:41 2019 : Info: +group authorize {
Tue Nov 26 15:44:41 2019 : Info: ++[preprocess] = ok
Tue Nov 26 15:44:41 2019 : Info: ++[chap] = noop
Tue Nov 26 15:44:41 2019 : Info: ++[mschap] = noop
Tue Nov 26 15:44:41 2019 : Info: ++[digest] = noop
Tue Nov 26 15:44:41 2019 : Info: [suffix] No '@' in User-Name = "user1", looking up realm NULL
Tue Nov 26 15:44:41 2019 : Info: [suffix] No such realm "NULL"
Tue Nov 26 15:44:41 2019 : Info: ++[suffix] = noop
Tue Nov 26 15:44:41 2019 : Info: [eap] EAP packet type response id 150 length 82
Tue Nov 26 15:44:41 2019 : Info: [eap] Continuing tunnel setup.
Tue Nov 26 15:44:41 2019 : Info: ++[eap] = ok
Tue Nov 26 15:44:41 2019 : Info: +} # group authorize = ok
Tue Nov 26 15:44:41 2019 : Info: Found Auth-Type = EAP
Tue Nov 26 15:44:41 2019 : Info: # Executing group from file /etc/freeradius/sites-enabled/default
Tue Nov 26 15:44:41 2019 : Info: +group authenticate {
Tue Nov 26 15:44:41 2019 : Info: [eap] Request found, released from the list
Tue Nov 26 15:44:41 2019 : Info: [eap] EAP/peap
Tue Nov 26 15:44:41 2019 : Info: [eap] processing type peap
Tue Nov 26 15:44:41 2019 : Info: [peap] processing EAP-TLS
Tue Nov 26 15:44:41 2019 : Debug:   TLS Length 72
Tue Nov 26 15:44:41 2019 : Info: [peap] Length Included
Tue Nov 26 15:44:41 2019 : Info: [peap] eaptls_verify returned 11 
Tue Nov 26 15:44:41 2019 : Info: [peap]     (other): before/accept initialization
Tue Nov 26 15:44:41 2019 : Info: [peap]     TLS_accept: before/accept initialization
Tue Nov 26 15:44:41 2019 : Info: [peap] <<< Unknown TLS version [length 0005]  
Tue Nov 26 15:44:41 2019 : Info: [peap] <<< TLS 1.0 Handshake [length 0043], ClientHello  
Tue Nov 26 15:44:41 2019 : Info: [peap]     TLS_accept: unknown state
Tue Nov 26 15:44:41 2019 : Info: [peap] >>> Unknown TLS version [length 0005]  
Tue Nov 26 15:44:41 2019 : Info: [peap] >>> TLS 1.0 Handshake [length 002a], ServerHello  
Tue Nov 26 15:44:41 2019 : Info: [peap]     TLS_accept: unknown state
Tue Nov 26 15:44:41 2019 : Info: [peap] >>> Unknown TLS version [length 0005]  
Tue Nov 26 15:44:41 2019 : Info: [peap] >>> TLS 1.0 Handshake [length 02d6], Certificate  
Tue Nov 26 15:44:41 2019 : Info: [peap]     TLS_accept: unknown state
Tue Nov 26 15:44:41 2019 : Info: [peap] >>> Unknown TLS version [length 0005]  
Tue Nov 26 15:44:41 2019 : Info: [peap] >>> TLS 1.0 Handshake [length 020d], ServerKeyExchange  
Tue Nov 26 15:44:41 2019 : Info: [peap]     TLS_accept: unknown state
Tue Nov 26 15:44:41 2019 : Info: [peap] >>> Unknown TLS version [length 0005]  
Tue Nov 26 15:44:41 2019 : Info: [peap] >>> TLS 1.0 Handshake [length 0004], ServerHelloDone  
Tue Nov 26 15:44:41 2019 : Info: [peap]     TLS_accept: unknown state
Tue Nov 26 15:44:41 2019 : Info: [peap]     TLS_accept: unknown state
Tue Nov 26 15:44:41 2019 : Info: [peap]     TLS_accept: unknown state
Tue Nov 26 15:44:41 2019 : Info: [peap]     TLS_accept: Need to read more data: unknown state
Tue Nov 26 15:44:41 2019 : Info: [peap]     TLS_accept: Need to read more data: unknown state
Tue Nov 26 15:44:41 2019 : Debug: In SSL Handshake Phase 
Tue Nov 26 15:44:41 2019 : Debug: In SSL Accept mode  
Tue Nov 26 15:44:41 2019 : Info: [peap] eaptls_process returned 13 
Tue Nov 26 15:44:41 2019 : Info: [peap] EAPTLS_HANDLED
Tue Nov 26 15:44:41 2019 : Info: ++[eap] = handled
Tue Nov 26 15:44:41 2019 : Info: +} # group authenticate = handled



Sending Access-Challenge of id 80 to 192.168.168.3 port 54002
	EAP-Message = 0x0197040019c000000525160301002a0200002603011e1c521a63472cc9f8131e73a51043866de635fd0ea684da6d3816e3c2b3741e0000390016030102d60b0002d20002cf0002cc308202c8308201b0a003020102020900a8bb974084515054300d06092a864886f70d01010b0500301c311a301806035504030c116a6c692d4f707469506c65782d37303630301e170d3139313132313137353733335a170d3239313131383137353733335a301c311a301806035504030c116a6c692d4f707469506c65782d3730363030820122300d06092a864886f70d01010105000382010f003082010a0282010100ecde3b2f32d6878185a84d302f0efc2be1
	EAP-Message = 0xf5451004def0918745d76176a7aebc20d7d40f22b501ecf8f81d1ac9e10dce58ce43e2af157718adc68b7588b38fbf6d7449e66ff4dc48072a28c4692fd423b7b1222e623634393af50cea411cc82666c87dd99ced8b0ce163bb437cd468aca756143e461d3236dbfc9f9ada290060f59fac54e60e80bc4bbda7bf52eb1d77dcd88cdb2b1425df6862e51fd18095d7ee25b7ec89763940e7fe6cc09078bb3745cc385a7fb8e5c669909318225d74486132e2ccaf80c7f42deaef09f01568c416e01b124016707c54535583849afcd690108e8bda0f74a40d30735d7e26a3539fce4f5645e9c11f3f986af9b40e54550203010001a30d300b3009060355
	EAP-Message = 0x1d1304023000300d06092a864886f70d01010b05000382010100819784311b09eaad7d9c2619b7622bd5bda3ef9527787b118d6cc7f5062753bcf60f87cbb70c4410475cc8daf2cbad2f93d66d88faa333ff9fee1c5abe100c665c8ef7ba57b449465b3e1994b0e1b6876ed1d897e7b355e1df3222a0e4484a9bd2e93ad768a6d8c03273db50903adb55ca1e4daee9e759fb83d31ca1b41039870f9792d3a29a27ec0852d57810aa891977b38eb5b8c1f01d163b70eee588c615218b294646a5600c3809b9fb5b0d7f4d35e32aa5d0794250ed357ad3632731a8181cd4040aab1af917addf221d73a53cce3bd5a20496918aab7584ab835bc65c215c7b
	EAP-Message = 0x08cbb512f3b5a7f5371ecd94149f01a3700f2c45ed91dcd7e5fab23ddf160301020d0c0002090080a183f972d635e75afa2d79a753f01845cfd70e128da4217f032f3471d52b957995ee05cb8c0910e18b87a262da86e5588b9e7cc675c679813bace3a4b1e026b2996aca7872237f2c925031974ce1cb789f63472833bc0965986e70d51a1290f85cdf350b04362b993949a00f57bf6490b2d954ca784d5b277ee5e6e6a0cc0953000102008096c5d05ba7c7cbbd0ce2f987dd72f16e11a4cec518a647bd5f26d2351593c993cb00e3a25364c8f1c851df0d8075386760e1df0dca2f75d947046c3b8d30be3e9cc291a07a5721113d67b4e75df65022
	EAP-Message = 0xafeee4ba42c8a01d5457aa1e
	Message-Authenticator = 0x00000000000000000000000000000000
	State = 0xb5f0560db7674f9744a436dbbde670ca
Tue Nov 26 15:44:41 2019 : Info: Finished request 12.
Tue Nov 26 15:44:41 2019 : Debug: Going to the next request
Tue Nov 26 15:44:41 2019 : Debug: Waking up in 4.9 seconds.



rad_recv: Access-Request packet from host 192.168.168.3 port 54002, id=81, length=214
	User-Name = "user1"
	NAS-Identifier = "myNAS"
	Called-Station-Id = "04-F0-21-42-23-F3:bulletac-jeff"
	NAS-Port-Type = Wireless-802.11
	Service-Type = Framed-User
	NAS-Port = 1
	Calling-Station-Id = "00-0F-92-FE-00-86"
	Connect-Info = "CONNECT 54Mbps 802.11g"
	Acct-Session-Id = "FBC1081CA4C85162"
	WLAN-Pairwise-Cipher = 1027076
	WLAN-Group-Cipher = 1027076
	WLAN-AKM-Suite = 1027073
	Framed-MTU = 1400
	EAP-Message = 0x029700061900
	State = 0xb5f0560db7674f9744a436dbbde670ca
	Message-Authenticator = 0x281c6f68d089a44deed591df9f46cb9a
Tue Nov 26 15:44:41 2019 : Info: # Executing section authorize from file /etc/freeradius/sites-enabled/default
Tue Nov 26 15:44:41 2019 : Info: +group authorize {
Tue Nov 26 15:44:41 2019 : Info: ++[preprocess] = ok
Tue Nov 26 15:44:41 2019 : Info: ++[chap] = noop
Tue Nov 26 15:44:41 2019 : Info: ++[mschap] = noop
Tue Nov 26 15:44:41 2019 : Info: ++[digest] = noop
Tue Nov 26 15:44:41 2019 : Info: [suffix] No '@' in User-Name = "user1", looking up realm NULL
Tue Nov 26 15:44:41 2019 : Info: [suffix] No such realm "NULL"
Tue Nov 26 15:44:41 2019 : Info: ++[suffix] = noop
Tue Nov 26 15:44:41 2019 : Info: [eap] EAP packet type response id 151 length 6
Tue Nov 26 15:44:41 2019 : Info: [eap] Continuing tunnel setup.
Tue Nov 26 15:44:41 2019 : Info: ++[eap] = ok
Tue Nov 26 15:44:41 2019 : Info: +} # group authorize = ok
Tue Nov 26 15:44:41 2019 : Info: Found Auth-Type = EAP
Tue Nov 26 15:44:41 2019 : Info: # Executing group from file /etc/freeradius/sites-enabled/default
Tue Nov 26 15:44:41 2019 : Info: +group authenticate {
Tue Nov 26 15:44:41 2019 : Info: [eap] Request found, released from the list
Tue Nov 26 15:44:41 2019 : Info: [eap] EAP/peap
Tue Nov 26 15:44:41 2019 : Info: [eap] processing type peap
Tue Nov 26 15:44:41 2019 : Info: [peap] processing EAP-TLS
Tue Nov 26 15:44:41 2019 : Info: [peap] Received TLS ACK
Tue Nov 26 15:44:41 2019 : Info: [peap] ACK handshake fragment handler
Tue Nov 26 15:44:41 2019 : Info: [peap] eaptls_verify returned 1 
Tue Nov 26 15:44:41 2019 : Info: [peap] eaptls_process returned 13 
Tue Nov 26 15:44:41 2019 : Info: [peap] EAPTLS_HANDLED
Tue Nov 26 15:44:41 2019 : Info: ++[eap] = handled
Tue Nov 26 15:44:41 2019 : Info: +} # group authenticate = handled



Sending Access-Challenge of id 81 to 192.168.168.3 port 54002
	EAP-Message = 0x01980135190001b741722df521fd8df49ca76a4b367310d96ea47f4ffa7a1e3d69ba25f0d47724f0253701002183aa4e06c8444fe9c99b7905d951699c3578baac285bc9b6663bbb16c038792994f604b716c3aa8ee79c56f53cc666b1a66255eb0e212aa5b941e82b1a088a3f557d9bdcd9171a89d821bc7da1a4cb380c745e52671066d8d653d61fa01fe34cf4bc716f2e6764dcca67e92f33896dfca1a7c25c3d39d48c26fbebfa04a7a90b8ef807a775670ae62b11e1351fab0412e743025795adfde8d88dc6a03ee9caffd6620c8c40f453da63a27677a69d2c2e527cb0c8cd613b8c7236111d345f9bf828207859351c3b1ba980b506f686a9eb
	EAP-Message = 0xf9408b702e5ac0d4a205ef9aaafae9a3ded8ef7034b4eda2d95289ed5779fffa7290b8b651f3a37d29c4842499f4f316030100040e000000
	Message-Authenticator = 0x00000000000000000000000000000000
	State = 0xb5f0560db6684f9744a436dbbde670ca
Tue Nov 26 15:44:41 2019 : Info: Finished request 13.
Tue Nov 26 15:44:41 2019 : Debug: Going to the next request
Tue Nov 26 15:44:41 2019 : Debug: Waking up in 4.9 seconds.



rad_recv: Access-Request packet from host 192.168.168.3 port 54002, id=82, length=416
	User-Name = "user1"
	NAS-Identifier = "myNAS"
	Called-Station-Id = "04-F0-21-42-23-F3:bulletac-jeff"
	NAS-Port-Type = Wireless-802.11
	Service-Type = Framed-User
	NAS-Port = 1
	Calling-Station-Id = "00-0F-92-FE-00-86"
	Connect-Info = "CONNECT 54Mbps 802.11g"
	Acct-Session-Id = "FBC1081CA4C85162"
	WLAN-Pairwise-Cipher = 1027076
	WLAN-Group-Cipher = 1027076
	WLAN-AKM-Suite = 1027073
	Framed-MTU = 1400
	EAP-Message = 0x029800d01980000000c616030100861000008200803b9dcfc4f2b7dacfe5e1610c03f23951f96eaae1483e8377281bc3eec50436328f5eb1e852a4a7387ed160276ca2cd64903876484422eeb29478c731e01a81c94253e3767b468c32675c08921534743e1a17d5c8ba2c857b7c28e78e094df2ccd7889495734bdd97cf9c214221f826cfc877f4250944d410582654c9a9e4f7ad1403010001011603010030815f823340341952149fc9aa2fc5eeb226c308029226fc6dfa752fdc99dcb6fd9010425f14fa73c7830d19d81504c4a9
	State = 0xb5f0560db6684f9744a436dbbde670ca
	Message-Authenticator = 0x46235aae1e5788b8667df1713fe6b5b9
Tue Nov 26 15:44:42 2019 : Info: # Executing section authorize from file /etc/freeradius/sites-enabled/default
Tue Nov 26 15:44:42 2019 : Info: +group authorize {
Tue Nov 26 15:44:42 2019 : Info: ++[preprocess] = ok
Tue Nov 26 15:44:42 2019 : Info: ++[chap] = noop
Tue Nov 26 15:44:42 2019 : Info: ++[mschap] = noop
Tue Nov 26 15:44:42 2019 : Info: ++[digest] = noop
Tue Nov 26 15:44:42 2019 : Info: [suffix] No '@' in User-Name = "user1", looking up realm NULL
Tue Nov 26 15:44:42 2019 : Info: [suffix] No such realm "NULL"
Tue Nov 26 15:44:42 2019 : Info: ++[suffix] = noop
Tue Nov 26 15:44:42 2019 : Info: [eap] EAP packet type response id 152 length 208
Tue Nov 26 15:44:42 2019 : Info: [eap] Continuing tunnel setup.
Tue Nov 26 15:44:42 2019 : Info: ++[eap] = ok
Tue Nov 26 15:44:42 2019 : Info: +} # group authorize = ok
Tue Nov 26 15:44:42 2019 : Info: Found Auth-Type = EAP
Tue Nov 26 15:44:42 2019 : Info: # Executing group from file /etc/freeradius/sites-enabled/default
Tue Nov 26 15:44:42 2019 : Info: +group authenticate {
Tue Nov 26 15:44:42 2019 : Info: [eap] Request found, released from the list
Tue Nov 26 15:44:42 2019 : Info: [eap] EAP/peap
Tue Nov 26 15:44:42 2019 : Info: [eap] processing type peap
Tue Nov 26 15:44:42 2019 : Info: [peap] processing EAP-TLS
Tue Nov 26 15:44:42 2019 : Debug:   TLS Length 198
Tue Nov 26 15:44:42 2019 : Info: [peap] Length Included
Tue Nov 26 15:44:42 2019 : Info: [peap] eaptls_verify returned 11 
Tue Nov 26 15:44:42 2019 : Info: [peap] <<< Unknown TLS version [length 0005]  
Tue Nov 26 15:44:42 2019 : Info: [peap] <<< TLS 1.0 Handshake [length 0086], ClientKeyExchange  
Tue Nov 26 15:44:42 2019 : Info: [peap]     TLS_accept: unknown state
Tue Nov 26 15:44:42 2019 : Info: [peap]     TLS_accept: unknown state
Tue Nov 26 15:44:42 2019 : Info: [peap] <<< Unknown TLS version [length 0005]  
Tue Nov 26 15:44:42 2019 : Info: [peap] <<< TLS 1.0 ChangeCipherSpec [length 0001]  
Tue Nov 26 15:44:42 2019 : Info: [peap] <<< Unknown TLS version [length 0005]  
Tue Nov 26 15:44:42 2019 : Info: [peap] <<< TLS 1.0 Handshake [length 0010], Finished  
Tue Nov 26 15:44:42 2019 : Info: [peap]     TLS_accept: unknown state
Tue Nov 26 15:44:42 2019 : Info: [peap] >>> Unknown TLS version [length 0005]  
Tue Nov 26 15:44:42 2019 : Info: [peap] >>> TLS 1.0 ChangeCipherSpec [length 0001]  
Tue Nov 26 15:44:42 2019 : Info: [peap]     TLS_accept: unknown state
Tue Nov 26 15:44:42 2019 : Info: [peap] >>> Unknown TLS version [length 0005]  
Tue Nov 26 15:44:42 2019 : Info: [peap] >>> TLS 1.0 Handshake [length 0010], Finished  
Tue Nov 26 15:44:42 2019 : Info: [peap]     TLS_accept: unknown state
Tue Nov 26 15:44:42 2019 : Info: [peap]     TLS_accept: unknown state
Tue Nov 26 15:44:42 2019 : Info: [peap]     (other): SSL negotiation finished successfully
Tue Nov 26 15:44:42 2019 : Debug: SSL Connection Established 
Tue Nov 26 15:44:42 2019 : Info: [peap] eaptls_process returned 13 
Tue Nov 26 15:44:42 2019 : Info: [peap] EAPTLS_HANDLED
Tue Nov 26 15:44:42 2019 : Info: ++[eap] = handled
Tue Nov 26 15:44:42 2019 : Info: +} # group authenticate = handled



Sending Access-Challenge of id 82 to 192.168.168.3 port 54002
	EAP-Message = 0x01990041190014030100010116030100301611fd77a490320fd7d83decaa4f362df8ae4b4ab4ee7cf573d2a88533f9ac8c03ef0e05e1842e03de4b897950e15f5d
	Message-Authenticator = 0x00000000000000000000000000000000
	State = 0xb5f0560db1694f9744a436dbbde670ca
Tue Nov 26 15:44:42 2019 : Info: Finished request 14.
Tue Nov 26 15:44:42 2019 : Debug: Going to the next request
Tue Nov 26 15:44:42 2019 : Debug: Waking up in 4.2 seconds.



rad_recv: Access-Request packet from host 192.168.168.3 port 54002, id=83, length=214
	User-Name = "user1"
	NAS-Identifier = "myNAS"
	Called-Station-Id = "04-F0-21-42-23-F3:bulletac-jeff"
	NAS-Port-Type = Wireless-802.11
	Service-Type = Framed-User
	NAS-Port = 1
	Calling-Station-Id = "00-0F-92-FE-00-86"
	Connect-Info = "CONNECT 54Mbps 802.11g"
	Acct-Session-Id = "FBC1081CA4C85162"
	WLAN-Pairwise-Cipher = 1027076
	WLAN-Group-Cipher = 1027076
	WLAN-AKM-Suite = 1027073
	Framed-MTU = 1400
	EAP-Message = 0x029900061900
	State = 0xb5f0560db1694f9744a436dbbde670ca
	Message-Authenticator = 0x5a4bd90c9e92d41dd142e065275042c3
Tue Nov 26 15:44:42 2019 : Info: # Executing section authorize from file /etc/freeradius/sites-enabled/default
Tue Nov 26 15:44:42 2019 : Info: +group authorize {
Tue Nov 26 15:44:42 2019 : Info: ++[preprocess] = ok
Tue Nov 26 15:44:42 2019 : Info: ++[chap] = noop
Tue Nov 26 15:44:42 2019 : Info: ++[mschap] = noop
Tue Nov 26 15:44:42 2019 : Info: ++[digest] = noop
Tue Nov 26 15:44:42 2019 : Info: [suffix] No '@' in User-Name = "user1", looking up realm NULL
Tue Nov 26 15:44:42 2019 : Info: [suffix] No such realm "NULL"
Tue Nov 26 15:44:42 2019 : Info: ++[suffix] = noop
Tue Nov 26 15:44:42 2019 : Info: [eap] EAP packet type response id 153 length 6
Tue Nov 26 15:44:42 2019 : Info: [eap] Continuing tunnel setup.
Tue Nov 26 15:44:42 2019 : Info: ++[eap] = ok
Tue Nov 26 15:44:42 2019 : Info: +} # group authorize = ok
Tue Nov 26 15:44:42 2019 : Info: Found Auth-Type = EAP
Tue Nov 26 15:44:42 2019 : Info: # Executing group from file /etc/freeradius/sites-enabled/default
Tue Nov 26 15:44:42 2019 : Info: +group authenticate {
Tue Nov 26 15:44:42 2019 : Info: [eap] Request found, released from the list
Tue Nov 26 15:44:42 2019 : Info: [eap] EAP/peap
Tue Nov 26 15:44:42 2019 : Info: [eap] processing type peap
Tue Nov 26 15:44:42 2019 : Info: [peap] processing EAP-TLS
Tue Nov 26 15:44:42 2019 : Info: [peap] Received TLS ACK
Tue Nov 26 15:44:42 2019 : Info: [peap] ACK handshake is finished
Tue Nov 26 15:44:42 2019 : Info: [peap] eaptls_verify returned 3 
Tue Nov 26 15:44:42 2019 : Info: [peap] eaptls_process returned 3 
Tue Nov 26 15:44:42 2019 : Info: [peap] EAPTLS_SUCCESS
Tue Nov 26 15:44:42 2019 : Info: [peap] Session established.  Decoding tunneled attributes.
Tue Nov 26 15:44:42 2019 : Info: [peap] Peap state TUNNEL ESTABLISHED
Tue Nov 26 15:44:42 2019 : Info: [peap] >>> Unknown TLS version [length 0005]  
Tue Nov 26 15:44:42 2019 : Info: ++[eap] = handled
Tue Nov 26 15:44:42 2019 : Info: +} # group authenticate = handled



Sending Access-Challenge of id 83 to 192.168.168.3 port 54002
	EAP-Message = 0x019a002b1900170301002046f7572ce19dde246e46c3de3aa9aaae3b0634f159e69b91d9b65c3011523366
	Message-Authenticator = 0x00000000000000000000000000000000
	State = 0xb5f0560db06a4f9744a436dbbde670ca
Tue Nov 26 15:44:42 2019 : Info: Finished request 15.
Tue Nov 26 15:44:42 2019 : Debug: Going to the next request
Tue Nov 26 15:44:42 2019 : Debug: Waking up in 4.2 seconds.



rad_recv: Access-Request packet from host 192.168.168.3 port 54002, id=84, length=251
	User-Name = "user1"
	NAS-Identifier = "myNAS"
	Called-Station-Id = "04-F0-21-42-23-F3:bulletac-jeff"
	NAS-Port-Type = Wireless-802.11
	Service-Type = Framed-User
	NAS-Port = 1
	Calling-Station-Id = "00-0F-92-FE-00-86"
	Connect-Info = "CONNECT 54Mbps 802.11g"
	Acct-Session-Id = "FBC1081CA4C85162"
	WLAN-Pairwise-Cipher = 1027076
	WLAN-Group-Cipher = 1027076
	WLAN-AKM-Suite = 1027073
	Framed-MTU = 1400
	EAP-Message = 0x029a002b19001703010020d4513ff2bbf243c2eb8cebca093dd6619b1ced09c34ef7875edff7ff1e448b58
	State = 0xb5f0560db06a4f9744a436dbbde670ca
	Message-Authenticator = 0x367b3394819f62f82b89dd9d58d845b3
Tue Nov 26 15:44:42 2019 : Info: # Executing section authorize from file /etc/freeradius/sites-enabled/default
Tue Nov 26 15:44:42 2019 : Info: +group authorize {
Tue Nov 26 15:44:42 2019 : Info: ++[preprocess] = ok
Tue Nov 26 15:44:42 2019 : Info: ++[chap] = noop
Tue Nov 26 15:44:42 2019 : Info: ++[mschap] = noop
Tue Nov 26 15:44:42 2019 : Info: ++[digest] = noop
Tue Nov 26 15:44:42 2019 : Info: [suffix] No '@' in User-Name = "user1", looking up realm NULL
Tue Nov 26 15:44:42 2019 : Info: [suffix] No such realm "NULL"
Tue Nov 26 15:44:42 2019 : Info: ++[suffix] = noop
Tue Nov 26 15:44:42 2019 : Info: [eap] EAP packet type response id 154 length 43
Tue Nov 26 15:44:42 2019 : Info: [eap] Continuing tunnel setup.
Tue Nov 26 15:44:42 2019 : Info: ++[eap] = ok
Tue Nov 26 15:44:42 2019 : Info: +} # group authorize = ok
Tue Nov 26 15:44:42 2019 : Info: Found Auth-Type = EAP
Tue Nov 26 15:44:42 2019 : Info: # Executing group from file /etc/freeradius/sites-enabled/default
Tue Nov 26 15:44:42 2019 : Info: +group authenticate {
Tue Nov 26 15:44:42 2019 : Info: [eap] Request found, released from the list
Tue Nov 26 15:44:42 2019 : Info: [eap] EAP/peap
Tue Nov 26 15:44:42 2019 : Info: [eap] processing type peap
Tue Nov 26 15:44:42 2019 : Info: [peap] processing EAP-TLS
Tue Nov 26 15:44:42 2019 : Info: [peap] eaptls_verify returned 7 
Tue Nov 26 15:44:42 2019 : Info: [peap] Done initial handshake
Tue Nov 26 15:44:42 2019 : Info: [peap] <<< Unknown TLS version [length 0005]  
Tue Nov 26 15:44:42 2019 : Info: [peap] eaptls_process returned 7 
Tue Nov 26 15:44:42 2019 : Info: [peap] EAPTLS_OK
Tue Nov 26 15:44:42 2019 : Info: [peap] Session established.  Decoding tunneled attributes.
Tue Nov 26 15:44:42 2019 : Info: [peap] Peap state WAITING FOR INNER IDENTITY
Tue Nov 26 15:44:42 2019 : Info: [peap] Identity - user1
Tue Nov 26 15:44:42 2019 : Info: [peap] Got inner identity 'user1'
Tue Nov 26 15:44:42 2019 : Info: [peap] Setting default EAP type for tunneled EAP session.
Tue Nov 26 15:44:42 2019 : Info: [peap] Got tunneled request
	EAP-Message = 0x029a000a017573657231
server  {
Tue Nov 26 15:44:42 2019 : Info: [peap] Setting User-Name to user1
Sending tunneled request
	EAP-Message = 0x029a000a017573657231
	FreeRADIUS-Proxied-To = 127.0.0.1
	User-Name = "user1"
server inner-tunnel {
Tue Nov 26 15:44:42 2019 : Info: # Executing section authorize from file /etc/freeradius/sites-enabled/inner-tunnel
Tue Nov 26 15:44:42 2019 : Info: +group authorize {
Tue Nov 26 15:44:42 2019 : Info: ++[chap] = noop
Tue Nov 26 15:44:42 2019 : Info: ++[mschap] = noop
Tue Nov 26 15:44:42 2019 : Info: [suffix] No '@' in User-Name = "user1", looking up realm NULL
Tue Nov 26 15:44:42 2019 : Info: [suffix] No such realm "NULL"
Tue Nov 26 15:44:42 2019 : Info: ++[suffix] = noop
Tue Nov 26 15:44:42 2019 : Info: ++update control {
Tue Nov 26 15:44:42 2019 : Info: ++} # update control = noop
Tue Nov 26 15:44:42 2019 : Info: [eap] EAP packet type response id 154 length 10
Tue Nov 26 15:44:42 2019 : Info: [eap] No EAP Start, assuming it's an on-going EAP conversation
Tue Nov 26 15:44:42 2019 : Info: ++[eap] = updated
Tue Nov 26 15:44:42 2019 : Info: [files] users: Matched entry user1 at line 206
Tue Nov 26 15:44:42 2019 : Info: ++[files] = ok
Tue Nov 26 15:44:42 2019 : Info: ++[expiration] = noop
Tue Nov 26 15:44:42 2019 : Info: ++[logintime] = noop
Tue Nov 26 15:44:42 2019 : Info: [pap] WARNING: Auth-Type already set.  Not setting to PAP
Tue Nov 26 15:44:42 2019 : Info: ++[pap] = noop
Tue Nov 26 15:44:42 2019 : Info: +} # group authorize = updated
Tue Nov 26 15:44:42 2019 : Info: Found Auth-Type = EAP
Tue Nov 26 15:44:42 2019 : Info: # Executing group from file /etc/freeradius/sites-enabled/inner-tunnel
Tue Nov 26 15:44:42 2019 : Info: +group authenticate {
Tue Nov 26 15:44:42 2019 : Info: [eap] EAP Identity
Tue Nov 26 15:44:42 2019 : Info: [eap] processing type mschapv2
Tue Nov 26 15:44:42 2019 : Debug: rlm_eap_mschapv2: Issuing Challenge
Tue Nov 26 15:44:42 2019 : Info: ++[eap] = handled
Tue Nov 26 15:44:42 2019 : Info: +} # group authenticate = handled
} # server inner-tunnel
Tue Nov 26 15:44:42 2019 : Info: [peap] Got tunneled reply code 11
	EAP-Message = 0x019b001f1a019b001a104fc275362838287843230c0257213b1a7573657231
	Message-Authenticator = 0x00000000000000000000000000000000
	State = 0xed57a02eedccba97f246533dfe39229e
Tue Nov 26 15:44:42 2019 : Info: [peap] Got tunneled reply RADIUS code Access-Challenge
	EAP-Message = 0x019b001f1a019b001a104fc275362838287843230c0257213b1a7573657231
	Message-Authenticator = 0x00000000000000000000000000000000
	State = 0xed57a02eedccba97f246533dfe39229e
Tue Nov 26 15:44:42 2019 : Info: [peap] Got tunneled Access-Challenge
  PEAP tunnel data out 0000: 1a 01 9b 00 1a 10 4f c2 75 36 28 38 28 78 43 23 
  PEAP tunnel data out 0010: 0c 02 57 21 3b 1a 75 73 65 72 31 
Tue Nov 26 15:44:42 2019 : Info: [peap] >>> Unknown TLS version [length 0005]  
Tue Nov 26 15:44:42 2019 : Info: ++[eap] = handled
Tue Nov 26 15:44:42 2019 : Info: +} # group authenticate = handled



Sending Access-Challenge of id 84 to 192.168.168.3 port 54002
	EAP-Message = 0x019b003b19001703010030381f5e4f6e1996bebec6e72c40bb34bf15d75eb06575b28fb71ee9c6b92072b311d09cd196ca44118655f3f851bcffff
	Message-Authenticator = 0x00000000000000000000000000000000
	State = 0xb5f0560db36b4f9744a436dbbde670ca
Tue Nov 26 15:44:42 2019 : Info: Finished request 16.
Tue Nov 26 15:44:42 2019 : Debug: Going to the next request
Tue Nov 26 15:44:42 2019 : Debug: Waking up in 4.1 seconds.



rad_recv: Access-Request packet from host 192.168.168.3 port 54002, id=85, length=315
	User-Name = "user1"
	NAS-Identifier = "myNAS"
	Called-Station-Id = "04-F0-21-42-23-F3:bulletac-jeff"
	NAS-Port-Type = Wireless-802.11
	Service-Type = Framed-User
	NAS-Port = 1
	Calling-Station-Id = "00-0F-92-FE-00-86"
	Connect-Info = "CONNECT 54Mbps 802.11g"
	Acct-Session-Id = "FBC1081CA4C85162"
	WLAN-Pairwise-Cipher = 1027076
	WLAN-Group-Cipher = 1027076
	WLAN-AKM-Suite = 1027073
	Framed-MTU = 1400
	EAP-Message = 0x029b006b19001703010060794d544173e3f5529895160b5a36e9a6b2dbfec6899f4a59681f38e016e73800b76b5aba39a7687f3d7f8286a74a9bad417eebcf0ba32632f8148934e01035a5dcd438ed854014a3fcb92507ea5b135f4b0612fc6eea4b41a6a59d0fde9bf64e
	State = 0xb5f0560db36b4f9744a436dbbde670ca
	Message-Authenticator = 0x56fb518133029165564f4be24a818d29
Tue Nov 26 15:44:42 2019 : Info: # Executing section authorize from file /etc/freeradius/sites-enabled/default
Tue Nov 26 15:44:42 2019 : Info: +group authorize {
Tue Nov 26 15:44:42 2019 : Info: ++[preprocess] = ok
Tue Nov 26 15:44:42 2019 : Info: ++[chap] = noop
Tue Nov 26 15:44:42 2019 : Info: ++[mschap] = noop
Tue Nov 26 15:44:42 2019 : Info: ++[digest] = noop
Tue Nov 26 15:44:42 2019 : Info: [suffix] No '@' in User-Name = "user1", looking up realm NULL
Tue Nov 26 15:44:42 2019 : Info: [suffix] No such realm "NULL"
Tue Nov 26 15:44:42 2019 : Info: ++[suffix] = noop
Tue Nov 26 15:44:42 2019 : Info: [eap] EAP packet type response id 155 length 107
Tue Nov 26 15:44:42 2019 : Info: [eap] Continuing tunnel setup.
Tue Nov 26 15:44:42 2019 : Info: ++[eap] = ok
Tue Nov 26 15:44:42 2019 : Info: +} # group authorize = ok
Tue Nov 26 15:44:42 2019 : Info: Found Auth-Type = EAP
Tue Nov 26 15:44:42 2019 : Info: # Executing group from file /etc/freeradius/sites-enabled/default
Tue Nov 26 15:44:42 2019 : Info: +group authenticate {
Tue Nov 26 15:44:42 2019 : Info: [eap] Request found, released from the list
Tue Nov 26 15:44:42 2019 : Info: [eap] EAP/peap
Tue Nov 26 15:44:42 2019 : Info: [eap] processing type peap
Tue Nov 26 15:44:42 2019 : Info: [peap] processing EAP-TLS
Tue Nov 26 15:44:42 2019 : Info: [peap] eaptls_verify returned 7 
Tue Nov 26 15:44:42 2019 : Info: [peap] Done initial handshake
Tue Nov 26 15:44:42 2019 : Info: [peap] <<< Unknown TLS version [length 0005]  
Tue Nov 26 15:44:42 2019 : Info: [peap] eaptls_process returned 7 
Tue Nov 26 15:44:42 2019 : Info: [peap] EAPTLS_OK
Tue Nov 26 15:44:42 2019 : Info: [peap] Session established.  Decoding tunneled attributes.
Tue Nov 26 15:44:42 2019 : Info: [peap] Peap state phase2
Tue Nov 26 15:44:42 2019 : Info: [peap] EAP type mschapv2
Tue Nov 26 15:44:42 2019 : Info: [peap] Got tunneled request
	EAP-Message = 0x029b00401a029b003b3104c35ef824220d81dfbb1cf9d15dd8f600000000000000008db246d9cbf082a02ed2ee695a03dfcba79e2c9481a71caf007573657231
server  {
Tue Nov 26 15:44:42 2019 : Info: [peap] Setting User-Name to user1
Sending tunneled request
	EAP-Message = 0x029b00401a029b003b3104c35ef824220d81dfbb1cf9d15dd8f600000000000000008db246d9cbf082a02ed2ee695a03dfcba79e2c9481a71caf007573657231
	FreeRADIUS-Proxied-To = 127.0.0.1
	User-Name = "user1"
	State = 0xed57a02eedccba97f246533dfe39229e
server inner-tunnel {
Tue Nov 26 15:44:42 2019 : Info: # Executing section authorize from file /etc/freeradius/sites-enabled/inner-tunnel
Tue Nov 26 15:44:42 2019 : Info: +group authorize {
Tue Nov 26 15:44:42 2019 : Info: ++[chap] = noop
Tue Nov 26 15:44:42 2019 : Info: ++[mschap] = noop
Tue Nov 26 15:44:42 2019 : Info: [suffix] No '@' in User-Name = "user1", looking up realm NULL
Tue Nov 26 15:44:42 2019 : Info: [suffix] No such realm "NULL"
Tue Nov 26 15:44:42 2019 : Info: ++[suffix] = noop
Tue Nov 26 15:44:42 2019 : Info: ++update control {
Tue Nov 26 15:44:42 2019 : Info: ++} # update control = noop
Tue Nov 26 15:44:42 2019 : Info: [eap] EAP packet type response id 155 length 64
Tue Nov 26 15:44:42 2019 : Info: [eap] No EAP Start, assuming it's an on-going EAP conversation
Tue Nov 26 15:44:42 2019 : Info: ++[eap] = updated
Tue Nov 26 15:44:42 2019 : Info: [files] users: Matched entry user1 at line 206
Tue Nov 26 15:44:42 2019 : Info: ++[files] = ok
Tue Nov 26 15:44:42 2019 : Info: ++[expiration] = noop
Tue Nov 26 15:44:42 2019 : Info: ++[logintime] = noop
Tue Nov 26 15:44:42 2019 : Info: [pap] WARNING: Auth-Type already set.  Not setting to PAP
Tue Nov 26 15:44:42 2019 : Info: ++[pap] = noop
Tue Nov 26 15:44:42 2019 : Info: +} # group authorize = updated
Tue Nov 26 15:44:42 2019 : Info: Found Auth-Type = EAP
Tue Nov 26 15:44:42 2019 : Info: # Executing group from file /etc/freeradius/sites-enabled/inner-tunnel
Tue Nov 26 15:44:42 2019 : Info: +group authenticate {
Tue Nov 26 15:44:42 2019 : Info: [eap] Request found, released from the list
Tue Nov 26 15:44:42 2019 : Info: [eap] EAP/mschapv2
Tue Nov 26 15:44:42 2019 : Info: [eap] processing type mschapv2
Tue Nov 26 15:44:42 2019 : Info: [mschapv2] # Executing group from file /etc/freeradius/sites-enabled/inner-tunnel
Tue Nov 26 15:44:42 2019 : Info: [mschapv2] +group MS-CHAP {
Tue Nov 26 15:44:42 2019 : Info: [mschap] Creating challenge hash with username: user1
Tue Nov 26 15:44:42 2019 : Info: [mschap] Client is using MS-CHAPv2 for user1, we need NT-Password
Tue Nov 26 15:44:42 2019 : Info: [mschap] adding MS-CHAPv2 MPPE keys
Tue Nov 26 15:44:42 2019 : Info: ++[mschap] = ok
Tue Nov 26 15:44:42 2019 : Info: +} # group MS-CHAP = ok
Tue Nov 26 15:44:42 2019 : Debug: MSCHAP Success 
Tue Nov 26 15:44:42 2019 : Info: ++[eap] = handled
Tue Nov 26 15:44:42 2019 : Info: +} # group authenticate = handled
} # server inner-tunnel
Tue Nov 26 15:44:42 2019 : Info: [peap] Got tunneled reply code 11
	EAP-Message = 0x019c00331a039b002e533d41374143374142383432394235423439324537384538433036324236303634384631413443434146
	Message-Authenticator = 0x00000000000000000000000000000000
	State = 0xed57a02eeccbba97f246533dfe39229e
Tue Nov 26 15:44:42 2019 : Info: [peap] Got tunneled reply RADIUS code Access-Challenge
	EAP-Message = 0x019c00331a039b002e533d41374143374142383432394235423439324537384538433036324236303634384631413443434146
	Message-Authenticator = 0x00000000000000000000000000000000
	State = 0xed57a02eeccbba97f246533dfe39229e
Tue Nov 26 15:44:42 2019 : Info: [peap] Got tunneled Access-Challenge
  PEAP tunnel data out 0000: 1a 03 9b 00 2e 53 3d 41 37 41 43 37 41 42 38 34 
  PEAP tunnel data out 0010: 32 39 42 35 42 34 39 32 45 37 38 45 38 43 30 36 
  PEAP tunnel data out 0020: 32 42 36 30 36 34 38 46 31 41 34 43 43 41 46 
Tue Nov 26 15:44:42 2019 : Info: [peap] >>> Unknown TLS version [length 0005]  
Tue Nov 26 15:44:42 2019 : Info: ++[eap] = handled
Tue Nov 26 15:44:42 2019 : Info: +} # group authenticate = handled



Sending Access-Challenge of id 85 to 192.168.168.3 port 54002
	EAP-Message = 0x019c005b1900170301005085a6e21babf886846f06fbbff631b1833eb2061b3bf95ea505a8d8225e4192e79feb591bb551977f08ef90712e9ab3270554517e8573984599ee4d09f7ad7eec990664f24d088fc515f2444da763bd2f
	Message-Authenticator = 0x00000000000000000000000000000000
	State = 0xb5f0560db26c4f9744a436dbbde670ca
Tue Nov 26 15:44:42 2019 : Info: Finished request 17.
Tue Nov 26 15:44:42 2019 : Debug: Going to the next request
Tue Nov 26 15:44:42 2019 : Debug: Waking up in 4.1 seconds.
rad_recv: Access-Request packet from host 192.168.168.3 port 54002, id=86, length=251
	User-Name = "user1"
	NAS-Identifier = "myNAS"
	Called-Station-Id = "04-F0-21-42-23-F3:bulletac-jeff"
	NAS-Port-Type = Wireless-802.11
	Service-Type = Framed-User
	NAS-Port = 1
	Calling-Station-Id = "00-0F-92-FE-00-86"
	Connect-Info = "CONNECT 54Mbps 802.11g"
	Acct-Session-Id = "FBC1081CA4C85162"
	WLAN-Pairwise-Cipher = 1027076
	WLAN-Group-Cipher = 1027076
	WLAN-AKM-Suite = 1027073
	Framed-MTU = 1400
	EAP-Message = 0x029c002b190017030100204a88be3d8d7807b0e11811f15a715f271b3fc0a76d60f77d99725a80a6c2baf5
	State = 0xb5f0560db26c4f9744a436dbbde670ca
	Message-Authenticator = 0x04c7ad2ce89111d85e85837509ac1991
Tue Nov 26 15:44:42 2019 : Info: # Executing section authorize from file /etc/freeradius/sites-enabled/default
Tue Nov 26 15:44:42 2019 : Info: +group authorize {
Tue Nov 26 15:44:42 2019 : Info: ++[preprocess] = ok
Tue Nov 26 15:44:42 2019 : Info: ++[chap] = noop
Tue Nov 26 15:44:42 2019 : Info: ++[mschap] = noop
Tue Nov 26 15:44:42 2019 : Info: ++[digest] = noop
Tue Nov 26 15:44:42 2019 : Info: [suffix] No '@' in User-Name = "user1", looking up realm NULL
Tue Nov 26 15:44:42 2019 : Info: [suffix] No such realm "NULL"
Tue Nov 26 15:44:42 2019 : Info: ++[suffix] = noop
Tue Nov 26 15:44:42 2019 : Info: [eap] EAP packet type response id 156 length 43
Tue Nov 26 15:44:42 2019 : Info: [eap] Continuing tunnel setup.
Tue Nov 26 15:44:42 2019 : Info: ++[eap] = ok
Tue Nov 26 15:44:42 2019 : Info: +} # group authorize = ok
Tue Nov 26 15:44:42 2019 : Info: Found Auth-Type = EAP
Tue Nov 26 15:44:42 2019 : Info: # Executing group from file /etc/freeradius/sites-enabled/default
Tue Nov 26 15:44:42 2019 : Info: +group authenticate {
Tue Nov 26 15:44:42 2019 : Info: [eap] Request found, released from the list
Tue Nov 26 15:44:42 2019 : Info: [eap] EAP/peap
Tue Nov 26 15:44:42 2019 : Info: [eap] processing type peap
Tue Nov 26 15:44:42 2019 : Info: [peap] processing EAP-TLS
Tue Nov 26 15:44:42 2019 : Info: [peap] eaptls_verify returned 7 
Tue Nov 26 15:44:42 2019 : Info: [peap] Done initial handshake
Tue Nov 26 15:44:42 2019 : Info: [peap] <<< Unknown TLS version [length 0005]  
Tue Nov 26 15:44:42 2019 : Info: [peap] eaptls_process returned 7 
Tue Nov 26 15:44:42 2019 : Info: [peap] EAPTLS_OK
Tue Nov 26 15:44:42 2019 : Info: [peap] Session established.  Decoding tunneled attributes.
Tue Nov 26 15:44:42 2019 : Info: [peap] Peap state phase2
Tue Nov 26 15:44:42 2019 : Info: [peap] EAP type mschapv2
Tue Nov 26 15:44:42 2019 : Info: [peap] Got tunneled request
	EAP-Message = 0x029c00061a03
server  {
Tue Nov 26 15:44:42 2019 : Info: [peap] Setting User-Name to user1
Sending tunneled request
	EAP-Message = 0x029c00061a03
	FreeRADIUS-Proxied-To = 127.0.0.1
	User-Name = "user1"
	State = 0xed57a02eeccbba97f246533dfe39229e
server inner-tunnel {
Tue Nov 26 15:44:42 2019 : Info: # Executing section authorize from file /etc/freeradius/sites-enabled/inner-tunnel
Tue Nov 26 15:44:42 2019 : Info: +group authorize {
Tue Nov 26 15:44:42 2019 : Info: ++[chap] = noop
Tue Nov 26 15:44:42 2019 : Info: ++[mschap] = noop
Tue Nov 26 15:44:42 2019 : Info: [suffix] No '@' in User-Name = "user1", looking up realm NULL
Tue Nov 26 15:44:42 2019 : Info: [suffix] No such realm "NULL"
Tue Nov 26 15:44:42 2019 : Info: ++[suffix] = noop
Tue Nov 26 15:44:42 2019 : Info: ++update control {
Tue Nov 26 15:44:42 2019 : Info: ++} # update control = noop
Tue Nov 26 15:44:42 2019 : Info: [eap] EAP packet type response id 156 length 6
Tue Nov 26 15:44:42 2019 : Info: [eap] No EAP Start, assuming it's an on-going EAP conversation
Tue Nov 26 15:44:42 2019 : Info: ++[eap] = updated
Tue Nov 26 15:44:42 2019 : Info: [files] users: Matched entry user1 at line 206
Tue Nov 26 15:44:42 2019 : Info: ++[files] = ok
Tue Nov 26 15:44:42 2019 : Info: ++[expiration] = noop
Tue Nov 26 15:44:42 2019 : Info: ++[logintime] = noop
Tue Nov 26 15:44:42 2019 : Info: [pap] WARNING: Auth-Type already set.  Not setting to PAP
Tue Nov 26 15:44:42 2019 : Info: ++[pap] = noop
Tue Nov 26 15:44:42 2019 : Info: +} # group authorize = updated
Tue Nov 26 15:44:42 2019 : Info: Found Auth-Type = EAP
Tue Nov 26 15:44:42 2019 : Info: # Executing group from file /etc/freeradius/sites-enabled/inner-tunnel
Tue Nov 26 15:44:42 2019 : Info: +group authenticate {
Tue Nov 26 15:44:42 2019 : Info: [eap] Request found, released from the list
Tue Nov 26 15:44:42 2019 : Info: [eap] EAP/mschapv2
Tue Nov 26 15:44:42 2019 : Info: [eap] processing type mschapv2
Tue Nov 26 15:44:42 2019 : Info: [eap] Freeing handler
Tue Nov 26 15:44:42 2019 : Info: ++[eap] = ok
Tue Nov 26 15:44:42 2019 : Info: +} # group authenticate = ok
Tue Nov 26 15:44:42 2019 : Info:   WARNING: Empty post-auth section.  Using default return values.
Tue Nov 26 15:44:42 2019 : Info: # Executing section post-auth from file /etc/freeradius/sites-enabled/inner-tunnel
} # server inner-tunnel
Tue Nov 26 15:44:42 2019 : Info: [peap] Got tunneled reply code 2
	MS-MPPE-Encryption-Policy = 0x00000001
	MS-MPPE-Encryption-Types = 0x00000006
	MS-MPPE-Send-Key = 0x1dbc4aa5fe2e71610552f93e842e4ef8
	MS-MPPE-Recv-Key = 0x8b1199f979fb43af2c25bd3b654f8d08
	EAP-Message = 0x039c0004
	Message-Authenticator = 0x00000000000000000000000000000000
	User-Name = "user1"
Tue Nov 26 15:44:42 2019 : Info: [peap] Got tunneled reply RADIUS code Access-Accept
	MS-MPPE-Encryption-Policy = 0x00000001
	MS-MPPE-Encryption-Types = 0x00000006
	MS-MPPE-Send-Key = 0x1dbc4aa5fe2e71610552f93e842e4ef8
	MS-MPPE-Recv-Key = 0x8b1199f979fb43af2c25bd3b654f8d08
	EAP-Message = 0x039c0004
	Message-Authenticator = 0x00000000000000000000000000000000
	User-Name = "user1"
Tue Nov 26 15:44:42 2019 : Info: [peap] Tunneled authentication was successful.
Tue Nov 26 15:44:42 2019 : Info: [peap] SUCCESS
Tue Nov 26 15:44:42 2019 : Info: [peap] >>> Unknown TLS version [length 0005]  
Tue Nov 26 15:44:42 2019 : Info: ++[eap] = handled
Tue Nov 26 15:44:42 2019 : Info: +} # group authenticate = handled
Sending Access-Challenge of id 86 to 192.168.168.3 port 54002
	EAP-Message = 0x019d002b19001703010020a99e8a64737e15e616b07c27a67610ce852e8b60bf7d4a23b7c8b5c21f781312
	Message-Authenticator = 0x00000000000000000000000000000000
	State = 0xb5f0560dbd6d4f9744a436dbbde670ca
Tue Nov 26 15:44:42 2019 : Info: Finished request 18.
Tue Nov 26 15:44:42 2019 : Debug: Going to the next request
Tue Nov 26 15:44:42 2019 : Debug: Waking up in 4.1 seconds.



rad_recv: Access-Request packet from host 192.168.168.3 port 54002, id=87, length=251
	User-Name = "user1"
	NAS-Identifier = "myNAS"
	Called-Station-Id = "04-F0-21-42-23-F3:bulletac-jeff"
	NAS-Port-Type = Wireless-802.11
	Service-Type = Framed-User
	NAS-Port = 1
	Calling-Station-Id = "00-0F-92-FE-00-86"
	Connect-Info = "CONNECT 54Mbps 802.11g"
	Acct-Session-Id = "FBC1081CA4C85162"
	WLAN-Pairwise-Cipher = 1027076
	WLAN-Group-Cipher = 1027076
	WLAN-AKM-Suite = 1027073
	Framed-MTU = 1400
	EAP-Message = 0x029d002b19001703010020f7f01f331019eda9fba5ca264be489bc75bec6e3de054e0aa9b263fd790985f7
	State = 0xb5f0560dbd6d4f9744a436dbbde670ca
	Message-Authenticator = 0x4f4cac3e8501c3bb699671396bc0791c
Tue Nov 26 15:44:42 2019 : Info: # Executing section authorize from file /etc/freeradius/sites-enabled/default
Tue Nov 26 15:44:42 2019 : Info: +group authorize {
Tue Nov 26 15:44:42 2019 : Info: ++[preprocess] = ok
Tue Nov 26 15:44:42 2019 : Info: ++[chap] = noop
Tue Nov 26 15:44:42 2019 : Info: ++[mschap] = noop
Tue Nov 26 15:44:42 2019 : Info: ++[digest] = noop
Tue Nov 26 15:44:42 2019 : Info: [suffix] No '@' in User-Name = "user1", looking up realm NULL
Tue Nov 26 15:44:42 2019 : Info: [suffix] No such realm "NULL"
Tue Nov 26 15:44:42 2019 : Info: ++[suffix] = noop
Tue Nov 26 15:44:42 2019 : Info: [eap] EAP packet type response id 157 length 43
Tue Nov 26 15:44:42 2019 : Info: [eap] Continuing tunnel setup.
Tue Nov 26 15:44:42 2019 : Info: ++[eap] = ok
Tue Nov 26 15:44:42 2019 : Info: +} # group authorize = ok
Tue Nov 26 15:44:42 2019 : Info: Found Auth-Type = EAP
Tue Nov 26 15:44:42 2019 : Info: # Executing group from file /etc/freeradius/sites-enabled/default
Tue Nov 26 15:44:42 2019 : Info: +group authenticate {
Tue Nov 26 15:44:42 2019 : Info: [eap] Request found, released from the list
Tue Nov 26 15:44:42 2019 : Info: [eap] EAP/peap
Tue Nov 26 15:44:42 2019 : Info: [eap] processing type peap
Tue Nov 26 15:44:42 2019 : Info: [peap] processing EAP-TLS
Tue Nov 26 15:44:42 2019 : Info: [peap] eaptls_verify returned 7 
Tue Nov 26 15:44:42 2019 : Info: [peap] Done initial handshake
Tue Nov 26 15:44:42 2019 : Info: [peap] <<< Unknown TLS version [length 0005]  
Tue Nov 26 15:44:42 2019 : Info: [peap] eaptls_process returned 7 
Tue Nov 26 15:44:42 2019 : Info: [peap] EAPTLS_OK
Tue Nov 26 15:44:42 2019 : Info: [peap] Session established.  Decoding tunneled attributes.
Tue Nov 26 15:44:42 2019 : Info: [peap] Peap state send tlv success
Tue Nov 26 15:44:42 2019 : Info: [peap] Received EAP-TLV response.
Tue Nov 26 15:44:42 2019 : Info: [peap] Success
Tue Nov 26 15:44:42 2019 : Info: [eap] Freeing handler
Tue Nov 26 15:44:42 2019 : Info: ++[eap] = ok
Tue Nov 26 15:44:42 2019 : Info: +} # group authenticate = ok
Tue Nov 26 15:44:42 2019 : Info: # Executing section post-auth from file /etc/freeradius/sites-enabled/default
Tue Nov 26 15:44:42 2019 : Info: +group post-auth {
Tue Nov 26 15:44:42 2019 : Info: [sql] 	expand: %{User-Name} -> user1
Tue Nov 26 15:44:42 2019 : Info: [sql] sql_set_user escaped user --> 'user1'
Tue Nov 26 15:44:42 2019 : Info: [sql] 	expand: %{User-Password} -> 
Tue Nov 26 15:44:42 2019 : Info: [sql] 	... expanding second conditional
Tue Nov 26 15:44:42 2019 : Info: [sql] 	expand: %{Chap-Password} -> 
Tue Nov 26 15:44:42 2019 : Info: [sql] 	expand: INSERT INTO radpostauth                           (username, pass, reply, authdate)                           VALUES (                           '%{User-Name}',                           '%{%{User-Password}:-%{Chap-Password}}',                           '%{reply:Packet-Type}', '%S') -> INSERT INTO radpostauth                           (username, pass, reply, authdate)                           VALUES (                           'user1',                           '',                           'Access-Accept', '2019-11-26 15:44:42')
Tue Nov 26 15:44:42 2019 : Debug: rlm_sql (sql) in sql_postauth: query is INSERT INTO radpostauth                           (username, pass, reply, authdate)                           VALUES (                           'user1',                           '',                           'Access-Accept', '2019-11-26 15:44:42')
Tue Nov 26 15:44:42 2019 : Debug: rlm_sql (sql): Reserving sql socket id: 25
Tue Nov 26 15:44:42 2019 : Debug: rlm_sql (sql): Released sql socket id: 25
Tue Nov 26 15:44:42 2019 : Info: ++[sql] = ok
Tue Nov 26 15:44:42 2019 : Info: ++[exec] = noop
Tue Nov 26 15:44:42 2019 : Info: +} # group post-auth = ok



Sending Access-Accept of id 87 to 192.168.168.3 port 54002
	MS-MPPE-Recv-Key = 0xf139cf209632504a86d03698bceafbb1452f9ab558052f55401484c0540409cd
	MS-MPPE-Send-Key = 0x4c7909c0a52d057239d29eb3dd2f383bb5450ef300ec86a1eadcb91f33cd5893
	EAP-Message = 0x039d0004
	Message-Authenticator = 0x00000000000000000000000000000000
	User-Name = "user1"
Tue Nov 26 15:44:42 2019 : Info: Finished request 19.
Tue Nov 26 15:44:42 2019 : Debug: Going to the next request
Tue Nov 26 15:44:42 2019 : Debug: Waking up in 4.1 seconds.
Tue Nov 26 15:44:46 2019 : Info: Cleaning up request 10 ID 78 with timestamp +76
Tue Nov 26 15:44:46 2019 : Info: Cleaning up request 11 ID 79 with timestamp +76
Tue Nov 26 15:44:46 2019 : Info: Cleaning up request 12 ID 80 with timestamp +76
Tue Nov 26 15:44:46 2019 : Info: Cleaning up request 13 ID 81 with timestamp +76
Tue Nov 26 15:44:46 2019 : Debug: Waking up in 0.7 seconds.
Tue Nov 26 15:44:47 2019 : Info: Cleaning up request 14 ID 82 with timestamp +77
Tue Nov 26 15:44:47 2019 : Info: Cleaning up request 15 ID 83 with timestamp +77
Tue Nov 26 15:44:47 2019 : Info: Cleaning up request 16 ID 84 with timestamp +77
Tue Nov 26 15:44:47 2019 : Info: Cleaning up request 17 ID 85 with timestamp +77
Tue Nov 26 15:44:47 2019 : Info: Cleaning up request 18 ID 86 with timestamp +77
Tue Nov 26 15:44:47 2019 : Info: Cleaning up request 19 ID 87 with timestamp +77
Tue Nov 26 15:44:47 2019 : Info: Ready to process requests.




Nov 25, 2019
Cleanup pMDDL reset-to-default channel:

Product		iw phy0 info			WebGUI info		ResetDefaultChannel(UCI)	Note
pDDL		2390 MHz [0] - 2488 MHz [98]	2402(ch1)-2482(ch81)		87(2477)		UCI matches "iw phy0 info" nad "iwinfo"
pM2350		2300 MHz [0] - 2398 MHz [98]	2310(ch1)-2390(ch81)		87(2387,UICH78)		UCI matches "iw phy0 info" nad "iwinfo"
pM2450		2390 MHz [0] - 2488 MHz [98]	2405(ch4)-2479(ch78)		87(2477)		UCI matches "iw phy0 info" nad "iwinfo"
pM2550		2490 MHz [0] - 2578 MHz [88]	2500(ch1)-2570(ch71)		87(2577)		UCI matches "iw phy0 info" nad "iwinfo". 2577 is not listed in GUI!
pM2450-JP	2485 MHz [0] - 2491 MHz [6]	2486(ch1)-2491(ch6)		4()

Set Pm2550 default channel to 77(2567MHz)

Nov 21, 2019
On Untn1604 machine, install FreeRadius and MySQL-server(v5.7). New password for the MySQL root user : Microhard18. This is the user jli pwd of this machine. Root pwd is : qazwsx.
In mysql : 
create dtabase wifi_enterprise_db
create user 'my_wifi_user'@'localhost' identified by 'my_wifi_password'
Port is standard 1812 for authentication

To test with a client:
Your username and password (you entered into radcheck earlier)
Your secret (you entered into nas table earlier)

"clients" in FreeRADIUS term means the authenticators such as NASes, APs or WLAN controllers. We want to verify that only authorized authenticators are used on our network. The authenticators and the authentication sever will use shared secrets to verify each other. The clients are defined in /etc/freeradius/clients.conf.

Nov 12, 2019
ath10k airtime fairness test. Toke's aql-06 branch patch works patched to kernel v4.14.137. The firmware should use firmware-5.bin_10.2.4.70.70. This firmare reports correct TX time. Compat wireless uses OWrt's latest backports-5.4-rc2-1.

Test with Iperf UDP. STA1 with RX rate=2.Mbps and T/P=1.0Mbps. STA2 with RX rate=52Mbps and T/P=13Mbps. STA2 t/p is not dragged down by the poor STA1. Withouth this patch, the STA2 will have the same poor T/P as STA1. 

Nov 8, 2019
Which firmware will work for airtime fairness? Tried the backports-5.4-rc2-1 + /home/jli/Downloads/firmware-5.bin_10.2.4.70.70 bundle. Ping 2 STAs with different tx rates, and observe the sys/kernel/debug/ieee80211/phy0/netdev\:wlan0/stations/00\:0f\:92\:fe\:00\:86/airtime values, the TX time look correct. The default QCA988X CT firmware doesn't read a correct TX time value.

Nov 5, 2019
Debug the oops in pMDDL2x50: 
WARNING: at /home/jli/project/work/pmddl/pmddl2450/build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/compat-wireless-pDDL2458base_v2/include/net/mac80211.h:4626 ieee80211_mps_frame_release+0xf68/0x1410 [mac80211]() and 
WARNING: at /home/jli/project/work/pmddl/pmddl2450/build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/compat-wireless-pDDL2458base_v2/net/mac80211/rate.c:251 rate_control_send_comport+0x32c/0x424 [mac80211]()

They have the same root cause : in meshd-nl80211 peer_created() function, the uint8_t supported_rates[] = { 2, 4, 10, 22, 96, 108 } doesn't match the station rate list, so that the station doesn't have any available rate. This causes:

[   31.070000] br-lan: port 1(eth0) entered forwarding state
[   33.540000] ==MHX2.0(nl80211_new_station)
[   33.540000] ==MHX2.1(nl80211_new_station)
[   33.540000] ==MHX2.2(nl80211_new_station)
[   33.540000] ==MHX2.3(nl80211_new_station)
[   33.540000] ==MHX2.4(nl80211_new_station)
[   33.540000] ==MHX2.5(nl80211_new_station)
[   33.540000] ==MHX2.6(nl80211_new_station)
[   33.540000] ==MHX2.7(nl80211_new_station)
[   33.540000] ==MHX2.8(nl80211_new_station)
[   33.540000] ==MHX2.9(nl80211_new_station) supported_rates=[2,4,10,22], len=6
[   33.540000] ==MHX(ieee80211_parse_bitrates)3.0srates_len=6
[   33.540000] ==MHX3.1(ieee80211_parse_bitrates) rate=2
[   33.540000] ==MHX3.1(ieee80211_parse_bitrates) rate=4
[   33.540000] ==MHX3.1(ieee80211_parse_bitrates) rate=10
[   33.540000] ==MHX3.1(ieee80211_parse_bitrates) rate=22
[   33.540000] ==MHX3.1(ieee80211_parse_bitrates) rate=96
[   33.540000] ==MHX3.1(ieee80211_parse_bitrates) rate=108
[   33.540000] ==MHX3.2(ieee80211_parse_bitrates) rate_mask=00000000, count=0
[   33.540000] =MHX1.0(rate_lowest_index) STA=82b433f8
[   33.540000] =MHX1.1(rate_lowest_index) STA=[fb:48:f8]. supp_rate[0]=00000000
[   33.540000] =MHX1.0(rate_lowest_index) STA=82b433f8
[   33.540000] =MHX1.1(rate_lowest_index) STA=[fb:48:f8]. supp_rate[0]=00000000
[   33.540000] =MHX1.0(rate_lowest_index) STA=82b433f8
[   33.540000] =MHX1.1(rate_lowest_index) STA=[fb:48:f8]. supp_rate[0]=00000000
[   33.540000] =MHX1.0(rate_lowest_index) STA=82b433f8
[   33.540000] =MHX1.1(rate_lowest_index) STA=[fb:48:f8]. supp_rate[0]=00000000
[   33.540000] =MHX1.0(rate_lowest_index) STA=82b433f8
[   33.540000] =MHX1.1(rate_lowest_index) STA=[fb:48:f8]. supp_rate[0]=00000000
[   33.540000] =MHX1.0(rate_lowest_index) STA=82b433f8
[   33.540000] =MHX1.1(rate_lowest_index) STA=[fb:48:f8]. supp_rate[0]=00000000
[   33.540000] ------------[ cut here ]------------
[   33.540000] WARNING: at /home/jli/project/work/pmddl/pmddl2450/build_dir/target-mips_34kc_uClibc
-0.9.33.2/linux-ar71xx_generic/compat-wireless-pDDL2458base_v2/include/net/mac80211.h:4633 ieee8021
1_mps_frame_release+0xfc4/0x146c [mac80211]()

Problem 1: 
After peer_created(), NL80211_CMD_NEW_STATION is sent to driver and the uint8_t supported_rates[] is passed to driver. This list must match sband->bitrates[] in ieee80211_parse_bitrates(). Otherwise rates(U32 rate mask) will be all 0 and no rate is found. Tried uint8_t supported_rates[] = { 12, 18, 24, 36, 48, 72 }; works. 

Problem 2: 
peer_created() sends NL80211_CMD_NEW_STATION(19) to driver and insert a station. After that, when estab_peer_link()--->set_supported_rates()--->NL80211_CMD_SET_STATION (18) is sent to driver, the NL complains "nlerror command 18". This supposed to set the supported rates by the IE from peer station but failed. This means can not SET_STATION after NEW_STATION. And also means the IE rates can not be used. Only way is to set a correct initial rate list uint8_t supported_rates[] = { 12, 18, 24, 36, 48, 72 }; in peer_created(). After setting a correct rate list:

<6>[   38.880000] br-lan: port 2(wlan0) entered forwarding state
<0>[   64.020000] ==MHX2.0(nl80211_new_station)
<0>[   64.020000] ==MHX2.1(nl80211_new_station)
<0>[   64.020000] ==MHX2.2(nl80211_new_station)
<0>[   64.020000] ==MHX2.3(nl80211_new_station)
<0>[   64.020000] ==MHX2.4(nl80211_new_station)
<0>[   64.020000] ==MHX2.5(nl80211_new_station)
<0>[   64.020000] ==MHX2.6(nl80211_new_station)
<0>[   64.020000] ==MHX2.7(nl80211_new_station)
<0>[   64.020000] ==MHX2.8(nl80211_new_station)
<0>[   64.020000] ==MHX2.9(nl80211_new_station) supported_rates=[12,18,24,36], len=6

<0>[   64.020000] ==MHX(ieee80211_parse_bitrates)3.0srates_len=6
<0>[   64.020000] ==MHX3.1(ieee80211_parse_bitrates) rate=12
<0>[   64.020000] ==MHX3.2(ieee80211_parse_bitrates) j=0, rate_flags=0, br->flags=68
<0>[   64.020000] ==MHX3.3(ieee80211_parse_bitrates) brate=12

<0>[   64.020000] ==MHX3.1(ieee80211_parse_bitrates) rate=18
<0>[   64.020000] ==MHX3.2(ieee80211_parse_bitrates) j=0, rate_flags=0, br->flags=68
<0>[   64.020000] ==MHX3.3(ieee80211_parse_bitrates) brate=12
<0>[   64.020000] ==MHX3.2(ieee80211_parse_bitrates) j=1, rate_flags=0, br->flags=60
<0>[   64.020000] ==MHX3.3(ieee80211_parse_bitrates) brate=18

<0>[   64.020000] ==MHX3.1(ieee80211_parse_bitrates) rate=24
<0>[   64.020000] ==MHX3.2(ieee80211_parse_bitrates) j=0, rate_flags=0, br->flags=68
<0>[   64.020000] ==MHX3.3(ieee80211_parse_bitrates) brate=12
<0>[   64.020000] ==MHX3.2(ieee80211_parse_bitrates) j=1, rate_flags=0, br->flags=60
<0>[   64.020000] ==MHX3.3(ieee80211_parse_bitrates) brate=18
<0>[   64.020000] ==MHX3.2(ieee80211_parse_bitrates) j=2, rate_flags=0, br->flags=68
<0>[   64.020000] ==MHX3.3(ieee80211_parse_bitrates) brate=24

<0>[   64.020000] ==MHX3.1(ieee80211_parse_bitrates) rate=36
<0>[   64.020000] ==MHX3.2(ieee80211_parse_bitrates) j=0, rate_flags=0, br->flags=68
<0>[   64.020000] ==MHX3.3(ieee80211_parse_bitrates) brate=12
<0>[   64.020000] ==MHX3.2(ieee80211_parse_bitrates) j=1, rate_flags=0, br->flags=60
<0>[   64.020000] ==MHX3.3(ieee80211_parse_bitrates) brate=18
<0>[   64.020000] ==MHX3.2(ieee80211_parse_bitrates) j=2, rate_flags=0, br->flags=68
<0>[   64.020000] ==MHX3.3(ieee80211_parse_bitrates) brate=24
<0>[   64.020000] ==MHX3.2(ieee80211_parse_bitrates) j=3, rate_flags=0, br->flags=60
<0>[   64.020000] ==MHX3.3(ieee80211_parse_bitrates) brate=36

<0>[   64.020000] ==MHX3.1(ieee80211_parse_bitrates) rate=48
<0>[   64.020000] ==MHX3.2(ieee80211_parse_bitrates) j=0, rate_flags=0, br->flags=68
<0>[   64.020000] ==MHX3.3(ieee80211_parse_bitrates) brate=12
<0>[   64.020000] ==MHX3.2(ieee80211_parse_bitrates) j=1, rate_flags=0, br->flags=60
<0>[   64.020000] ==MHX3.3(ieee80211_parse_bitrates) brate=18
<0>[   64.020000] ==MHX3.2(ieee80211_parse_bitrates) j=2, rate_flags=0, br->flags=68
<0>[   64.020000] ==MHX3.3(ieee80211_parse_bitrates) brate=24
<0>[   64.020000] ==MHX3.2(ieee80211_parse_bitrates) j=3, rate_flags=0, br->flags=60
<0>[   64.020000] ==MHX3.3(ieee80211_parse_bitrates) brate=36
<0>[   64.020000] ==MHX3.2(ieee80211_parse_bitrates) j=4, rate_flags=0, br->flags=68
<0>[   64.020000] ==MHX3.3(ieee80211_parse_bitrates) brate=48

<0>[   64.020000] ==MHX3.1(ieee80211_parse_bitrates) rate=72
<0>[   64.020000] ==MHX3.2(ieee80211_parse_bitrates) j=0, rate_flags=0, br->flags=68
<0>[   64.020000] ==MHX3.3(ieee80211_parse_bitrates) brate=12
<0>[   64.020000] ==MHX3.2(ieee80211_parse_bitrates) j=1, rate_flags=0, br->flags=60
<0>[   64.020000] ==MHX3.3(ieee80211_parse_bitrates) brate=18
<0>[   64.020000] ==MHX3.2(ieee80211_parse_bitrates) j=2, rate_flags=0, br->flags=68
<0>[   64.020000] ==MHX3.3(ieee80211_parse_bitrates) brate=24
<0>[   64.020000] ==MHX3.2(ieee80211_parse_bitrates) j=3, rate_flags=0, br->flags=60
<0>[   64.020000] ==MHX3.3(ieee80211_parse_bitrates) brate=36
<0>[   64.020000] ==MHX3.2(ieee80211_parse_bitrates) j=4, rate_flags=0, br->flags=68
<0>[   64.020000] ==MHX3.3(ieee80211_parse_bitrates) brate=48
<0>[   64.020000] ==MHX3.2(ieee80211_parse_bitrates) j=5, rate_flags=0, br->flags=60
<0>[   64.020000] ==MHX3.3(ieee80211_parse_bitrates) brate=72
<0>[   64.020000] ==MHX3.4(ieee80211_parse_bitrates) rate_mask=0000003f, count=6

<0>[   64.020000] =MHX1.0(rate_lowest_index) STA=82a4e3f8
<0>[   64.020000] =MHX1.1(rate_lowest_index) STA=[fb:48:f8]. supp_rate[0]=0000003f
<7>[   68.550000] wlan0: received PREQ from 00:0f:92:fb:48:f8
<7>[   68.550000] wlan0: PREQ is for us

===================================================================================
pMDDL2x50 mesh mode always set to aes128 mode, wireless.@wifi-iface[0].encryption=psk2. Even when in aes-246 mode, wireless.@wifi-iface[0].encryption=aes256, the meshd-nl80211 still uses cipher suite aes128. A test shows, when set to CCMP-256 cipher suite, it works in AES256 mode:

/////////////// JLI #define CIPHER_CCMP 0x000FAC04  AES128 suite
#define CIPHER_CCMP 0x000FAC0A				// force to aes256 cipher suite. it works.
#define CIPHER_AES_CMAC 0x000FAC06

Nov 1, 2019
pMDDL2450 on a generic dev board has 3 different opps with MESH mode:
1. This comes from mhx-bsp.ko. Because it doesn't have GPIO expander.
[   81.460000] CPU 0 Unable to handle kernel paging request at virtual address 00000044, epc == 80189504, ra == 8018969c
[   81.460000] Oops[#1]:
[   81.460000] CPU: 0 PID: 1282 Comm: mhx Not tainted 3.10.36 #1
[   81.460000] task: 83b00860 ti: 82900000 task.ti: 82900000
[   81.460000] $ 0   : 00000000 7f8ac55c 00000000 0000000c
[   81.460000] $ 4   : 803b72d4 7f8ac55c 00000000 0000001e
[   81.460000] $ 8   : 00000000 82901e74 00000000 fffffff8
[   81.460000] $12   : 00000005 77289448 00000000 00400b8b
[   81.460000] $16   : 00000000 7f8ac550 83b3e2b0 40044753
[   81.460000] $20   : 00000003 00000000 00000000 00000000
[   81.460000] $24   : 00000000 77256680                  
[   81.460000] $28   : 82900000 82901e40 7f8fbd90 8018969c
[   81.460000] Hi    : 00000369
[   81.460000] Lo    : 00001be5
[   81.460000] epc   : 80189504 gpio_chip_hwgpio+0x4/0x20
[   81.460000]     Not tainted
[   81.460000] ra    : 8018969c gpiod_get_value_cansleep+0x1c/0x54
[   81.460000] Status: 1100f403 KERNEL EXL IE 
[   81.460000] Cause : 00800008
[   81.460000] BadVA : 00000044
[   81.460000] PrId  : 0001974c (MIPS 74Kc)
[   81.460000] Modules linked in: ath9k ath9k_common qcserial ppp_async option iptable_nat ath9k_hw ath
 usb_wwan qmi_wwan ppp_generic pl2303 nf_nat_ipv4 nf_conntrack_netlink nf_conntrack_ipv4 mac80211 ipt_M
ASQUERADE cfg80211 cdc_ncm xt_time xt_state xt_recent xt_quota xt_pkttype xt_physdev xt_owner xt_nat xt
_multiport xt_mark xt_mac xt_limit xt_iprange xt_iface xt_helper xt_esp xt_conntrack xt_connmark xt_con
nlimit xt_connbytes xt_condition xt_comment xt_addrtype xt_TCPMSS xt_REDIRECT xt_RAWNAT xt_NETMAP xt_LO
G xt_IPMARK xt_CT usbserial usbnet slhc nfnetlink nf_nat_irc nf_nat_ftp nf_nat nf_defrag_ipv4 nf_conntr
ack_irc nf_conntrack_ftp nf_conntrack iptable_raw iptable_mangle iptable_filter ipt_ah ipt_REJECT ip_ta
bles ebt_among ebt_802_3 crc16 crc_ccitt compat_xtables compat cdc_wdm cdc_acm arptable_filter arpt_man
gle arp_tables act_skbedit act_mirred em_u32 cls_u32 cls_tcindex cls_flow cls_route cls_fw sch_hfsc sch
_ingress configfs arc4 crypto_blkcipher soip sd_mod scsi_mod gpio_button_hotplug mhx_bsp
[   81.460000] Process mhx (pid: 1282, threadinfo=82900000, task=83b00860, tls=77290440)
[   81.460000] Stack : 8287a000 ffffff9c 7f8fbde0 00000000 40044753 83af78c4 7f8fbd90 800f0eac
[   81.460000]    772509a0 80070df4 0000001e 00000000 00000000 0000016a 83af3970 82905e60
[   81.460000]    7f8ac550 800f2694 8287a015 00000049 00000000 834a9f68 83b3e2b0 800f3284
[   81.460000]    00000000 00000000 00000000 00000000 00000000 800fb898 834f5b28 83bc42b0
[   81.460000]    00000003 82905e60 8287a000 00000020 82905e68 83b3e2b0 00000000 00000000
[   81.460000]    ...
[   81.460000] Call Trace:
[   81.460000] [<80189504>] gpio_chip_hwgpio+0x4/0x20
[   81.460000] [<8018969c>] gpiod_get_value_cansleep+0x1c/0x54
[   81.460000] [<83af78c4>] 0x83af78c4
[   81.460000] 
[   81.460000] 
[   81.460000] Code: 03e00008  27bd0018  8c820000 <8c420044> 00822023  3c02aaaa  00042083  3442aaab  03
e00008 
[   81.460000] ---[ end trace fbdf1846666602c3 ]---

Find the loaded address of mhx-bsp.ko:
root@UserDevice:~# cat proc/modules | grep mhx
mhx_bsp 3904 0 - Live 0x83af7000
root@UserDevice:~# cat sys/module/mhx_bsp/sections/.text 
0x83af7000

The complaint address 0x83af78c4 - 0x83af7000 = 0x8c4. So dump the mhx_bsp.o [ NOT mhx_bsp.ko] :

jli@DENG-JEFFL:~/project/work/pmddl/pmddl2450$ staging_dir/toolchain-mips_34kc_gcc-4.8-linaro_uClibc-0.9.33.2/bin/mips-openwrt-linux-objdump -dlSr build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/mhx-bsp/mhx-bsp.o | less

And find the offset 0x8c4, we can see:
/home/jli/project/work/pmddl/pmddl2450/build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/mhx-bsp/mhx-bsp.c:640
                                info.status = gpio_direction_output(info.gpio, info.value);	// this causes the oops!!!
 8c4:   8fa40010        lw      a0,16(sp)
 8c8:   00402821        move    a1,v0
 8cc:   0c000000        jal     0 <mhx_bsp_open>
                        8cc: R_MIPS_26  gpio_direction_output
 8d0:   afa20014        sw      v0,20(sp)
/home/jli/project/work/pmddl/pmddl2450/build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/mhx-bsp/mhx-bsp.c:648
                                } else
                                        info.status = 0;        //zero means set output successfully, return value =0 means output
                        } else {
The end of this oops is [<80189504>] gpio_chip_hwgpio+0x4/0x20. This address shows it is in kernel. Check the vmlinux:
jli@DENG-JEFFL:~/project/work/pmddl/pmddl2450$ staging_dir/toolchain-mips_34kc_gcc-4.8-linaro_uClibc-0.9.33.2/bin/mips-openwrt-linux-objdump -dlSr build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/linux-3.10.36/vmlinux | less
Directly search the address 80189504:
80189500 <gpio_chip_hwgpio>:
/*
 * Return the GPIO number of the passed descriptor relative to its chip
 */
static int gpio_chip_hwgpio(const struct gpio_desc *desc)
{
        return desc - &desc->chip->desc[0];		// this causes the oops rootly. maybe desc=NULL...?
80189500:       8c820000        lw      v0,0(a0)
80189504:       8c420044        lw      v0,68(v0)
80189508:       00822023        subu    a0,a0,v0
/home/jli/project/work/pmddl/pmddl2450/build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/linux-3.10.36/drivers/gpio/gpiolib.c:119
}

2. This oops comes from a WARN_ON_ONCE(1). It is not actually a oops but a warning. 
[   90.710000] ------------[ cut here ]------------
[   90.710000] WARNING: at /home/jli/project/work/pmddl/pmddl2450/build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/compat-wireless-pDDL2458base_v2/include/net/mac80211.h:4626 ieee80211_mps_frame_release+0xf68/0x1410 [mac80211]()

[   90.710000] Modules linked in: ath9k ath9k_common qcserial ppp_async option iptable_nat ath9k_hw ath
 usb_wwan qmi_wwan ppp_generic pl2303 nf_nat_ipv4 nf_conntrack_netlink nf_conntrack_ipv4 mac80211 ipt_M
ASQUERADE cfg80211 cdc_ncm xt_time xt_state xt_recent xt_quota xt_pkttype xt_physdev xt_owner xt_nat xt
_multiport xt_mark xt_mac xt_limit xt_iprange xt_iface xt_helper xt_esp xt_conntrack xt_connmark xt_con
nlimit xt_connbytes xt_condition xt_comment xt_addrtype xt_TCPMSS xt_REDIRECT xt_RAWNAT xt_NETMAP xt_LO
G xt_IPMARK xt_CT usbserial usbnet slhc nfnetlink nf_nat_irc nf_nat_ftp nf_nat nf_defrag_ipv4 nf_conntr
ack_irc nf_conntrack_ftp nf_conntrack iptable_raw iptable_mangle iptable_filter ipt_ah ipt_REJECT ip_ta
bles ebt_among ebt_802_3 crc16 crc_ccitt compat_xtables compat cdc_wdm cdc_acm arptable_filter arpt_man
gle arp_tables act_skbedit act_mirred em_u32 cls_u32 cls_tcindex cls_flow cls_route cls_fw sch_hfsc sch
_ingress configfs arc4 crypto_blkcipher soip sd_mod scsi_mod gpio_button_hotplug mhx_bsp
[   90.710000] CPU: 0 PID: 1589 Comm: meshd-nl80211 Tainted: G      D      3.10.36 #1
[   90.710000] Stack : 00000000 00000000 00000000 00000000 80392dda 00000046 829a01a8 82e30ac0
[   90.710000]    802ebc20 803436bb 00000635 80392588 829a01a8 82e30ac0 00000004 82b7c3f8
[   90.710000]    83545dc0 80078488 00000003 80075e94 82ed2220 82e30ac0 802ed444 829b5a24
[   90.710000]    00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
[   90.710000]    00000000 00000000 00000000 00000000 00000000 00000000 00000000 829b59b0
[   90.710000]    ...
[   90.710000] Call Trace:
[   90.710000] [<8006d800>] show_stack+0x48/0x70
[   90.710000] [<80076004>] warn_slowpath_common+0x78/0xa8
[   90.710000] [<800760bc>] warn_slowpath_null+0x18/0x24
[   90.710000] [<82ec4120>] ieee80211_mps_frame_release+0xf68/0x1410 [mac80211]
[   90.710000] 
[   90.710000] ---[ end trace fbdf1846666602c7 ]---

3. This oops comes from a WARN_ON_ONCE(i == sband->n_bitrates);. It is not actually a oops but a warning.
[   90.800000] ------------[ cut here ]------------
[   90.800000] WARNING: at /home/jli/project/work/pmddl/pmddl2450/build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/compat-wireless-pDDL2458base_v2/net/mac80211/rate.c:251 rate_control_send_comport+0x32c/0x424 [mac80211]()

[   90.800000] Modules linked in: ath9k ath9k_common qcserial ppp_async option iptable_nat ath9k_hw ath
 usb_wwan qmi_wwan ppp_generic pl2303 nf_nat_ipv4 nf_conntrack_netlink nf_conntrack_ipv4 mac80211 ipt_M
ASQUERADE cfg80211 cdc_ncm xt_time xt_state xt_recent xt_quota xt_pkttype xt_physdev xt_owner xt_nat xt
_multiport xt_mark xt_mac xt_limit xt_iprange xt_iface xt_helper xt_esp xt_conntrack xt_connmark xt_con
nlimit xt_connbytes xt_condition xt_comment xt_addrtype xt_TCPMSS xt_REDIRECT xt_RAWNAT xt_NETMAP xt_LO
G xt_IPMARK xt_CT usbserial usbnet slhc nfnetlink nf_nat_irc nf_nat_ftp nf_nat nf_defrag_ipv4 nf_conntr
ack_irc nf_conntrack_ftp nf_conntrack iptable_raw iptable_mangle iptable_filter ipt_ah ipt_REJECT ip_ta
bles ebt_among ebt_802_3 crc16 crc_ccitt compat_xtables compat cdc_wdm cdc_acm arptable_filter arpt_man
gle arp_tables act_skbedit act_mirred em_u32 cls_u32 cls_tcindex cls_flow cls_route cls_fw sch_hfsc sch
_ingress configfs arc4 crypto_blkcipher soip sd_mod scsi_mod gpio_button_hotplug mhx_bsp
[   90.800000] CPU: 0 PID: 1589 Comm: meshd-nl80211 Tainted: G      D W    3.10.36 #1
[   90.800000] Stack : 00000000 00000000 00000000 00000000 80392dda 00000046 829a01a8 82b4ea40
[   90.800000]    802ebc20 803436bb 00000635 80392588 829a01a8 82b4ea40 82880420 829b5bb8
[   90.800000]    8293f2e0 80078488 00000003 80075e94 82ecd3cc 82b4ea40 802ed444 829b58cc
[   90.800000]    00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
[   90.800000]    00000000 00000000 00000000 00000000 00000000 00000000 00000000 829b5858
[   90.800000]    ...
[   90.800000] Call Trace:
[   90.800000] [<8006d800>] show_stack+0x48/0x70
[   90.800000] [<80076004>] warn_slowpath_common+0x78/0xa8
[   90.800000] [<800760bc>] warn_slowpath_null+0x18/0x24
[   90.800000] [<82e935f4>] rate_control_send_comport+0x32c/0x424 [mac80211]
[   90.800000] 
[   90.800000] ---[ end trace fbdf1846666602c8 ]---

We can still check rate_control_send_comport() in mac80211.ko. 
root@UserDevice:~# cat proc/modules | grep mac80211
mac80211 359147 1 ath9k, Live 0x82e80000
root@UserDevice:~# cat sys/module/mac80211/sections/.text
0x82e80000

Complaint address 82e935f4 - 0x82e80000 = 0x135F4.

Objdump the mac80211.o. Not .ko doesn't have debug info, note "with debug_info" information:

jli@DENG-JEFFL:~/project/work/pmddl/pmddl2450$ file build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/compat-wireless-pDDL2458base_v2/net/mac80211/mac80211.o
build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/compat-wireless-pDDL2458base_v2/net/mac80211/mac80211.o: ELF 32-bit MSB relocatable, MIPS, MIPS32 rel2 version 1 (SYSV), with debug_info, not stripped
jli@DENG-JEFFL:~/project/work/pmddl/pmddl2450$ file build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/compat-wireless-pDDL2458base_v2/net/mac80211/mac80211.ko 
build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/compat-wireless-pDDL2458base_v2/net/mac80211/mac80211.ko: ELF 32-bit MSB relocatable, MIPS, MIPS32 rel2 version 1 (SYSV), BuildID[sha1]=0c29d117429ddde77c7fb6ce86cca4d097e0463a, not stripped

jli@DENG-JEFFL:~/project/work/pmddl/pmddl2450$ staging_dir/toolchain-mips_34kc_gcc-4.8-linaro_uClibc-0.9.33.2/bin/mips-openwrt-linux-objdump -dlSr build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/compat-wireless-pDDL2458base_v2/net/mac80211/mac80211.o | less

and search offset 0x135f4: It is in actually in function __rate_control_send_low(). But if use .ko, which is actually reported by the oops, this offset is in rate_control_send_comport() function. Check the conde the WARN_ON_ONCE(i == sband->n_bitrates); is actually in __rate_control_send_low() so the .o is correct. 

addr2line doesn't work very well:
jli@DENG-JEFFL:~/project/work/pmddl/pmddl2450$ staging_dir/toolchain-mips_34kc_gcc-4.8-linaro_uClibc-0.9.33.2/bin/mips-openwrt-linux-addr2line -e build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/compat-wireless-pDDL2458base_v2/net/mac80211/mac80211.o 0x135f4
/home/jli/project/work/pmddl/pmddl2450/build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/compat-wireless-pDDL2458base_v2/net/mac80211/rate.c:0

Oct 31, 2019
Locate the in-kernel oops.  
[   95.110000] CPU 0 Unable to handle kernel paging request at virtual address 00000044, epc == 80189504, ra == 8018a2ac
[   95.110000] Oops[#2]:
[   95.110000] CPU: 0 PID: 1283 Comm: mhx Tainted: G      D      3.10.36 #1
[   95.110000] task: 8308dd50 ti: 828fc000 task.ti: 828fc000
[   95.110000] $ 0   : 00000000 7fcbe86c 00000000 00000000
[   95.110000] $ 4   : 803b72d4 00000001 00000000 0000001e
[   95.110000] $ 8   : ffffffff 828fde74 00000000 fffffff8
[   95.110000] $12   : 00000005 77250448 00000000 00400b8b
[   95.110000] $16   : 00000000 00000001 83af32b0 80044750
[   95.110000] $20   : 00000003 00000000 00000000 00000000
[   95.110000] $24   : 00000000 7721e680                  
[   95.110000] $28   : 828fc000 828fde38 7f94a510 8018a2ac
[   95.110000] Hi    : 00000369
[   95.110000] Lo    : 00001be5
[   95.110000] epc   : 80189504 gpio_chip_hwgpio+0x4/0x20
[   95.110000]     Tainted: G      D     
[   95.110000] ra    : 8018a2ac gpiod_set_value_cansleep+0x68/0x94
[   95.110000] Status: 1100f403 KERNEL EXL IE 
[   95.110000] Cause : 00800008
[   95.110000] BadVA : 00000044
[   95.110000] PrId  : 0001974c (MIPS 74Kc)
[   95.110000] Modules linked in: ath9k ath9k_common qcserial ppp_async option iptable_nat ath9k_hw ath usb_wwan qmi_wwan ppp_generic pl2303 nf_nat_ipv4 nf_conntrack_netlink nf_conntrack_ipv4 mac80211 ipt_MASQUERADE cfg80211 cdc_ncm xt_time xt_state xt_recent xt_quota xt_pkttype xt_physdev xt_owner xt_nat xt_multiport xt_mark xt_mac xt_limit xt_iprange xt_iface xt_helper xt_esp xt_conntrack xt_connmark xt_connlimit xt_connbytes xt_condition xt_comment xt_addrtype xt_TCPMSS xt_REDIRECT xt_RAWNAT xt_NETMAP xt_LOG xt_IPMARK xt_CT usbserial usbnet slhc nfnetlink nf_nat_irc nf_nat_ftp nf_nat nf_defrag_ipv4 nf_conntrack_irc nf_conntrack_ftp nf_conntrack iptable_raw iptable_mangle iptable_filter ipt_ah ipt_REJECT ip_tables ebt_among ebt_802_3 crc16 crc_ccitt compat_xtables compat cdc_wdm cdc_acm arptable_filter arpt_mangle arp_tables act_skbedit act_mirred em_u32 cls_u32 cls_tcindex cls_flow cls_route cls_fw sch_hfsc sch_ingress configfs crypto_mhx arc4 crypto_blkcipher soip sd_mod scsi_mod gpio_button_hotplug mhx_bsp
[   95.110000] Process mhx (pid: 1283, threadinfo=828fc000, task=8308dd50, tls=77257440)
[   95.110000] Stack : 828fdf00 00000001 828e8000 ffffff9c 7f94a560 80044750 7fcbe860 83af56f8
[   95.110000]    7f94a510 800f0eac 772189a0 80070df4 0000001e 00000001 ffffffff 0000016a
[   95.110000]    83af03d0 83b006e0 7fcbe860 800f2694 828e8015 00000049 00000000 834a0f68
[   95.110000]    83af32b0 800f3284 00000000 00000000 00000000 00000000 00000000 800fb898
[   95.110000]    8348e908 83bc02b0 00000003 83b006e0 828e8000 00000020 83b006e8 83af32b0
[   95.110000]    ...
[   95.110000] Call Trace:
[   95.110000] [<80189504>] gpio_chip_hwgpio+0x4/0x20
[   95.110000] [<8018a2ac>] gpiod_set_value_cansleep+0x68/0x94
[   95.110000] [<83af56f8>] 0x83af56f8
[   95.110000] 
[   95.110000] 
[   95.110000] Code: 03e00008  27bd0018  8c820000 <8c420044> 00822023  3c02aaaa  00042083  3442aaab  03e00008 
[   95.110000] ---[ end trace 35f67e806e48bf42 ]---

1. [<80189504>] gpio_chip_hwgpio+0x4/0x20 and [<8018a2ac>] gpiod_set_value_cansleep+0x68/0x94 are in Linux kernel part.

jli@DENG-JEFFL:~/project/work/pmddl/pmddl2450-2$ ll build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/linux-3.10.36/vmlinux
-rwxr-xr-x 1 jli jli 13701755 Oct 31 11:26 build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/linux-3.10.36/vmlinux*

jli@DENG-JEFFL:~/project/work/pmddl/pmddl2450-2$ file build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/linux-3.10.36/vmlinux
build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/linux-3.10.36/vmlinux: ELF 32-bit MSB executable, MIPS, MIPS32 rel2 version 1 (SYSV), statically linked, BuildID[sha1]=29c2f881a9dc81255315e8ffd6c4b1a6a514e13f, with debug_info, not stripped

jli@DENG-JEFFL:~/project/work/pmddl/pmddl2450-2$ ll /home/jli/project/work/pmddl/pmddl2450-2/build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/tmp/vmlinux-pDDL2458.bin.lzma 
-rw-r--r-- 1 jli jli 1109243 Oct 31 11:26 /home/jli/project/work/pmddl/pmddl2450-2/build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/tmp/vmlinux-pDDL2458.bin.lzma
[Note: Set CONFIG_DEBUG_INFO=y in make kernel_menuconfig doesn' change the results of above 3 commands. So looks no use.]

jli@DENG-JEFFL:~/project/work/pmddl/pmddl2450-2$ staging_dir/toolchain-mips_34kc_gcc-4.8-linaro_uClibc-0.9.33.2/bin/mips-openwrt-linux-objdump -dlSr build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/linux-3.10.36/vmlinux to show the source code. Search for 80189504

/*
 * Return the GPIO number of the passed descriptor relative to its chip
 */
static int gpio_chip_hwgpio(const struct gpio_desc *desc)
{
        return desc - &desc->chip->desc[0];
80189500:       8c820000        lw      v0,0(a0)
80189504:       8c420044        lw      v0,68(v0)
80189508:       00822023        subu    a0,a0,v0
/home/jli/project/work/pmddl/pmddl2450-2/build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/linux-3.10.36/drivers/gpio/gpiolib.c:119
}

Search for 8018a2ac:
/home/jli/project/work/pmddl/pmddl2450-2/build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/linu
x-3.10.36/drivers/gpio/gpiolib.c:2042
        else
                chip->set(chip, gpio_chip_hwgpio(desc), value);
8018a2a4:       0c062540        jal     80189500 <gpio_chip_hwgpio>
8018a2a8:       00a08821        move    s1,a1
8018a2ac:       8e190030        lw      t9,48(s0)
/home/jli/project/work/pmddl/pmddl2450-2/build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/linux-3.10.36/drivers/gpio/gpiolib.c:2043
}

They can be located to the C code. Or use the addr2line tool:

jli@DENG-JEFFL:~/project/work/pmddl/pmddl2450-2$ staging_dir/toolchain-mips_34kc_gcc-4.8-linaro_uClibc-0.9.33.2/bin/mips-openwrt-linux-addr2line -f -e build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/linux-3.10.36/vmlinux 80189504
??
/home/jli/project/work/pmddl/pmddl2450-2/build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/linux-3.10.36/drivers/gpio/gpiolib.c:118

jli@DENG-JEFFL:~/project/work/pmddl/pmddl2450-2$ staging_dir/toolchain-mips_34kc_gcc-4.8-linaro_uClibc-0.9.33.2/bin/mips-openwrt-linux-addr2line -f -e build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/linux-3.10.36/vmlinux 8018a2ac
??
/home/jli/project/work/pmddl/pmddl2450-2/build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/linux-3.10.36/drivers/gpio/gpiolib.c:2042

2. [<83af56f8>] 0x83af56f8 comes from mhx_bsp.ko, because:
root@UserDevice:~# cat proc/modules | grep 83a
gpio_button_hotplug 4464 0 - Live 0x83af8000
mhx_bsp 3904 0 - Live 0x83af5000
But still need to know the function and line# like the in-kernel as above.
jli@DENG-JEFFL:~/project/work/pmddl/pmddl2450-2$ file build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/mhx-bsp/mhx-bsp.ko 
build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/mhx-bsp/mhx-bsp.ko: ELF 32-bit MSB relocatable, MIPS, MIPS32 rel2 version 1 (SYSV), BuildID[sha1]=a43989ea72736fb28a0c18fbc2b0f5bb8272dd38, not stripped

jli@DENG-JEFFL:~/project/work/pmddl/pmddl2450-2$ staging_dir/toolchain-mips_34kc_gcc-4.8-linaro_uClibc-0.9.33.2/bin/mips-openwrt-linux-objdump -dlSr build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/mhx-bsp/mhx-bsp.ko | less. This can not see the C code [ how to see a interlaced C code like vmlinux? ]. But, by comparing the assemply code, still not hard to find the C code. The trick is to use .o instead of the .ko file. See the Nov 1, 2019 record.


Oct 30, 2019
Users saw pMDDL2350 mesh mode, 3 nodes disconnection issue. Screen the difference between pDDL and pMDDL.
1. ATH9K_ANI_OFDM_DEF_LEVEL = 0 (pDDL0); 3(pMDDL)
2. ar9003_phy.c/h.
3. ath9k.h : Antenna diversity/combining
4. beacon.c : ath9k_bcn_crypt_fast() in pMDDL
5. hw.c
6. pDDL has a reset mechanism in ath_tx_complete_poll_work().
7. ieee80211_start_tx_ba_session()
8. pMDDL MESH_DBG is set 1 
9. ieee80211_send_nullfunc(). *****
10. ieee80211_sta_tx_notify(), ieee80211_sta_work()
11. Minstrel rate control
12. CONFIG_MHX_STA_QLOCK_MONITOR is not in pMDDL
13. WIPHY_FLAG_HAS_CHANNEL_SWITCH
14. Checked all mesh parameters are same.

============================================================================

pMDDL2450 : during boot up, there are 2 oops:

[  114.050000] ------------[ cut here ]------------
[  114.050000] WARNING: at /home/jli/project/work/pmddl/pmddl2450-2/build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/compat-wireless-pDDL2458base_v2/include/net/mac80211.h:4626 ieee80211_mps_frame_release+0xf68/0x1410 [mac80211]()
[  114.050000] Modules linked in: g_multi usb_f_acm u_serial libcomposite ci13xxx_ar934x ci_hdrc udc_core ath9k ath9k_common qcserial ppp_async option iptable_nat ath9k_hw ath usb_wwan qmi_wwan ppp_generic pl2303 nf_nat_ipv4 nf_conntrack_netlink nf_conntrack_ipv4 mac80211 ipt_MASQUERADE cfg80211 cdc_ncm xt_time xt_state xt_recent xt_quota xt_pkttype xt_physdev xt_owner xt_nat xt_multiport xt_mark xt_mac xt_limit xt_iprange xt_iface xt_helper xt_esp xt_conntrack xt_connmark xt_connlimit xt_connbytes xt_condition xt_comment xt_addrtype xt_TCPMSS xt_REDIRECT xt_RAWNAT xt_NETMAP xt_LOG xt_IPMARK xt_CT usbserial usbnet slhc nfnetlink nf_nat_irc nf_nat_ftp nf_nat nf_defrag_ipv4 nf_conntrack_irc nf_conntrack_ftp nf_conntrack iptable_raw iptable_mangle iptable_filter ipt_ah ipt_REJECT ip_tables ebt_among ebt_802_3 crc16 crc_ccitt compat_xtables compat cdc_wdm cdc_acm arptable_filter arpt_mangle arp_tables act_skbedit act_mirred em_u32 cls_u32 cls_tcindex cls_flow cls_route cls_fw sch_hfsc sch_ingress configfs crypto_mhx arc4 crypto_blkcipher soip sd_mod scsi_mod gpio_button_hotplug mhx_bsp
[  114.050000] CPU: 0 PID: 1494 Comm: meshd-nl80211 Tainted: G      D      3.10.36 #5
[  114.050000] Stack : 00000000 00000000 00000000 00000000 80392dda 00000046 83bce328 83180ac0
[  114.050000]    802ebc20 803436bb 000005d6 80392588 83bce328 83180ac0 00000004 82fab3f8
[  114.050000]    8353c580 80078488 00000003 80075e94 83252288 83180ac0 802ed444 82fb3a24
[  114.050000]    00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
[  114.050000]    00000000 00000000 00000000 00000000 00000000 00000000 00000000 82fb39b0
[  114.050000]    ...
[  114.050000] Call Trace:
[  114.050000] [<8006d800>] show_stack+0x48/0x70
[  114.050000] [<80076004>] warn_slowpath_common+0x78/0xa8
[  114.050000] [<800760bc>] warn_slowpath_null+0x18/0x24
[  114.050000] [<83244120>] ieee80211_mps_frame_release+0xf68/0x1410 [mac80211]
[  114.050000] 
[  114.050000] ---[ end trace 6553adf23c7c4fa8 ]---

and 

[  114.070000] ------------[ cut here ]------------
[  114.070000] WARNING: at /home/jli/project/work/pmddl/pmddl2450-2/build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/compat-wireless-pDDL2458base_v2/net/mac80211/rate.c:251 rate_control_send_comport+0x32c/0x424 [mac80211]()
[  114.070000] Modules linked in: g_multi usb_f_acm u_serial libcomposite ci13xxx_ar934x ci_hdrc udc_core ath9k ath9k_common qcserial ppp_async option iptable_nat ath9k_hw ath usb_wwan qmi_wwan ppp_generic pl2303 nf_nat_ipv4 nf_conntrack_netlink nf_conntrack_ipv4 mac80211 ipt_MASQUERADE cfg80211 cdc_ncm xt_time xt_state xt_recent xt_quota xt_pkttype xt_physdev xt_owner xt_nat xt_multiport xt_mark xt_mac xt_limit xt_iprange xt_iface xt_helper xt_esp xt_conntrack xt_connmark xt_connlimit xt_connbytes xt_condition xt_comment xt_addrtype xt_TCPMSS xt_REDIRECT xt_RAWNAT xt_NETMAP xt_LOG xt_IPMARK xt_CT usbserial usbnet slhc nfnetlink nf_nat_irc nf_nat_ftp nf_nat nf_defrag_ipv4 nf_conntrack_irc nf_conntrack_ftp nf_conntrack iptable_raw iptable_mangle iptable_filter ipt_ah ipt_REJECT ip_tables ebt_among ebt_802_3 crc16 crc_ccitt compat_xtables compat cdc_wdm cdc_acm arptable_filter arpt_mangle arp_tables act_skbedit act_mirred em_u32 cls_u32 cls_tcindex cls_flow cls_route cls_fw sch_hfsc sch_ingress configfs crypto_mhx arc4 crypto_blkcipher soip sd_mod scsi_mod gpio_button_hotplug mhx_bsp
[  114.070000] CPU: 0 PID: 1494 Comm: meshd-nl80211 Tainted: G      D W    3.10.36 #5
[  114.070000] Stack : 00000000 00000000 00000000 00000000 80392dda 00000046 83bce328 82e69c40
[  114.070000]    802ebc20 803436bb 000005d6 80392588 83bce328 82e69c40 833f0420 82fb3bb8
[  114.070000]    82eafca0 80078488 00000003 80075e94 8324d3f4 82e69c40 802ed444 82fb38cc
[  114.070000]    00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
[  114.070000]    00000000 00000000 00000000 00000000 00000000 00000000 00000000 82fb3858
[  114.070000]    ...
[  114.070000] Call Trace:
[  114.070000] [<8006d800>] show_stack+0x48/0x70
[  114.070000] [<80076004>] warn_slowpath_common+0x78/0xa8
[  114.070000] [<800760bc>] warn_slowpath_null+0x18/0x24
[  114.070000] [<832135f4>] rate_control_send_comport+0x32c/0x424 [mac80211]
[  114.070000] 
[  114.070000] ---[ end trace 6553adf23c7c4fa9 ]---

They're all from mac80211.ko. Use command :
jli@DENG-JEFFL:~/project/work/pmddl/pmddl2450-2$ staging_dir/toolchain-mips_34kc_gcc-4.8-linaro_uClibc-0.9.33.2/bin/mips-openwrt-linux-objdump -lS build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/compat-wireless-pDDL2458base_v2/net/mac80211/mac80211.ko | less

1) Search ieee80211_mps_frame_release, the start address of this function is 431b8:

000431b8 <ieee80211_mps_frame_release>:
ieee80211_mps_frame_release():
   431b8:       8c880398        lw      t0,920(a0)
   431bc:       24030004        li      v1,4
   431c0:       00a01021        move    v0,a1
   431c4:       1503001a        bne     t0,v1,43230 <ieee80211_mps_frame_release+0x78>
   431c8:       00002821        move    a1,zero
   431cc:       8c430014        lw      v1,20(v0)

The oops comes from start_addr + 0xf68 = 000431b8 + 0xf68 = 44120, this matches the dumped address : [<83244120>] ieee80211_mps_frame_release+0xf68/0x1410 [mac80211]

2) Search rate_control_send_comport, 

000132c8 <rate_control_send_comport>:
rate_control_send_comport():
   132c8:       8ca3000c        lw      v1,12(a1)
   132cc:       8c670098        lw      a3,152(v1)
   132d0:       10e00033        beqz    a3,133a0 <rate_control_send_comport+0xd8>
   132d4:       8ca60000        lw      a2,0(a1)
   132d8:       94680062        lhu     t0,98(v1)

132c8 + 0x32c = 135F4, this matches the dump : [<832135f4>] rate_control_send_comport+0x32c/0x424 [mac80211]. But go to the address 135F4:
   135e0:       14400006        bnez    v0,135fc <rate_control_send_comport+0x334>
   135e4:       3c040000        lui     a0,0x0
   135e8:       24840000        addiu   a0,a0,0
   135ec:       0c000000        jal     0 <ieee80211_restart_hw>
   135f0:       240500fb        li      a1,251
   135f4:       24020001        li      v0,1
   135f8:       a2420021        sb      v0,33(s2)
   135fc:       8e020000        lw      v0,0(s0)
   13600:       30420004        andi    v0,v0,0x4
   13604:       14400003        bnez    v0,13614 <rate_control_send_comport+0x34c>

It is all assembly and no symbols. The absolute becomes 832135f4 from 132c8 because the mac80211.ko text section is loaded to address 0x83200000:
root@UserDevice:~# cat sys/module/mac80211/sections/.text
0x83200000
cat /proc/modules can show all modules address in memory after loaded.

Oct 29. 2019
PC1----PMDDL1 ~~~~~ PMDDL2.wan ------- Internet
PC1 to access Internet, the GW of PC1 must be set to PMDDL2 instead of PMDDL1. Other wise the packets reach br-lan of PMDDL1 but they are not forwarded to PMDDL1.wlan0.

Oct 25, 2019
https://patchwork.kernel.org/cover/11191289/
https://git.kernel.org/pub/scm/linux/kernel/git/toke/linux.git/commit/?h=mac80211-aql-01&id=56b9e2627eccefb129450afa234443a9cdff2f4c
https://chromium-review.googlesource.com/c/chromiumos/third_party/kernel/+/588190/14

Oct 24, 2019
This is important for airtime fairness in ath10k:
/**
 * DOC: mac80211 software tx queueing
 *
 * mac80211 provides an optional intermediate queueing implementation designed
 * to allow the driver to keep hardware queues short and provide some fairness
 * between different stations/interfaces.
 * In this model, the driver pulls data frames from the mac80211 queue instead
 * of letting mac80211 push them via drv_tx().
 * Other frames (e.g. control or management) are still pushed using drv_tx().
 *
 * Drivers indicate that they use this model by implementing the .wake_tx_queue
 * driver operation.
 *
 * Intermediate queues (struct ieee80211_txq) are kept per-sta per-tid, with
 * another per-sta for non-data/non-mgmt and bufferable management frames, and
 * a single per-vif queue for multicast data frames.
 *
 * The driver is expected to initialize its private per-queue data for stations
 * and interfaces in the .add_interface and .sta_add ops.
 *
 * The driver can't access the queue directly. To dequeue a frame from a
 * txq, it calls ieee80211_tx_dequeue(). Whenever mac80211 adds a new frame to a
 * queue, it calls the .wake_tx_queue driver op.
 *
 * Drivers can optionally delegate responsibility for scheduling queues to
 * mac80211, to take advantage of airtime fairness accounting. In this case, to
 * obtain the next queue to pull frames from, the driver calls
 * ieee80211_next_txq(). The driver is then expected to return the txq using
 * ieee80211_return_txq().
 *
 * For AP powersave TIM handling, the driver only needs to indicate if it has
 * buffered packets in the driver specific data structures by calling
 * ieee80211_sta_set_buffered(). For frames buffered in the ieee80211_txq
 * struct, mac80211 sets the appropriate TIM PVB bits and calls
 * .release_buffered_frames().
 * In that callback the driver is therefore expected to release its own
 * buffered frames and afterwards also frames from the ieee80211_txq (obtained
 * via the usual ieee80211_tx_dequeue).
 */

/**
 * struct txq_info - per tid queue
 *
 * @tin: contains packets split into multiple flows
 * @def_flow: used as a fallback flow when a packet destined to @tin hashes to
 *	a fq_flow which is already owned by a different tin
 * @def_cvars: codel vars for @def_flow
 * @frags: used to keep fragments created after dequeue
 * @schedule_order: used with ieee80211_local->active_txqs
 * @schedule_round: counter to prevent infinite loops on TXQ scheduling
 */
struct txq_info {
	struct fq_tin tin;
	struct fq_flow def_flow;
	struct codel_vars def_cvars;
	struct codel_stats cstats;
	struct sk_buff_head frags;
	struct list_head schedule_order;
	u16 schedule_round;
	unsigned long flags;

	/* keep last! */
	struct ieee80211_txq txq;
};

/**
 * struct ieee80211_txq - Software intermediate tx queue
 *
 * @vif: &struct ieee80211_vif pointer from the add_interface callback.
 * @sta: station table entry, %NULL for per-vif queue
 * @tid: the TID for this queue (unused for per-vif queue),
 *	%IEEE80211_NUM_TIDS for non-data (if enabled)
 * @ac: the AC for this queue
 * @drv_priv: driver private area, sized by hw->txq_data_size
 *
 * The driver can obtain packets from this queue by calling
 * ieee80211_tx_dequeue().
 */
struct ieee80211_txq {
	struct ieee80211_vif *vif;
	struct ieee80211_sta *sta;
	u8 tid;
	u8 ac;

	/* must be last */
	u8 drv_priv[0] __aligned(sizeof(void *));
};



Oct 23, 2019
Looks like firmware-5.bin_10.2.4.70.70 can get correct TX duration time. With firmware-5.bin_10.2.4.70.70, the log shows:
<0>[  241.158908] ==MHX5.1(ath10k_mac_update_airtime) sta=[fe:00:aa]
<0>[  241.158929] ==MHX5.2(ath10k_mac_update_airtime) arsta->last_tx_bitrate=650
<0>[  241.158949] ==MHX5.3(ath10k_mac_update_airtime) airtime=209
<0>[  241.159112] ==MHX4.1(ieee80211_next_txq) schedule_round=62317
<0>[  241.160275] ==MHX5.2(ath10k_mac_update_airtime) arsta->last_tx_bitrate=130
<0>[  241.160285] ==MHX5.3(ath10k_mac_update_airtime) airtime=982
<0>[  241.160415] ==MHX4.1(ieee80211_next_txq) schedule_round=62322
<0>[  241.160440] ==MHX4.2(ieee80211_next_txq) sta=[fe:00:aa]. Deficit=-949
<0>[  241.160461] ==MHX4.1(ieee80211_next_txq) schedule_round=62322
<0>[  241.160485] ==MHX4.2(ieee80211_next_txq) sta=[fe:00:aa]. Deficit=-693
<0>[  241.160506] ==MHX4.1(ieee80211_next_txq) schedule_round=62322
<0>[  241.160517] ==MHX4.2(ieee80211_next_txq) sta=[fe:00:aa]. Deficit=-437
<0>[  241.160525] ==MHX4.1(ieee80211_next_txq) schedule_round=62322
<0>[  241.160535] ==MHX4.2(ieee80211_next_txq) sta=[fe:00:aa]. Deficit=-181
<0>[  241.160544] ==MHX4.1(ieee80211_next_txq) schedule_round=62322
<0>[  241.160555] ==MHX4.2(ieee80211_next_txq) sta=[fe:00:aa]. Deficit=75
<0>[  241.160570] ==MHX5.0(ath10k_mac_update_airtime)
<0>[  241.160581] ==MHX5.1(ath10k_mac_update_airtime) sta=[fe:00:aa]
<0>[  241.160589] ==MHX5.2(ath10k_mac_update_airtime) arsta->last_tx_bitrate=650

The original firmware doesn't. It always shows arsta->last_tx_bitrate=0.

CT firmware firmware-2-ct-full-community.bin doesn't work at all no wlan0 interface. firmware-2-ct-non-commercial.bin has same issue of reporting : ==MHX5.2(ath10k_mac_update_airtime) arsta->last_tx_bitrate=0.

This post : https://lists.bufferbloat.net/pipermail/make-wifi-fast/2017-November/001646.html mentions the airtime fairness in ath10k is not implemented.

Oct 21, 2019
Some ath10k driver concepts:
Host-Target Transport (HTT)
Files: htt.c htt.h htt_rx.c htt_tx.c The data path for ath10k. Sends frame descriptors to the firmware using HTC.

Wireless Module Interface (WMI)
Files: wmi.h wmi.c The control path for ath10k. Sends all sorts configuration commands to the firmware and receives configuration events from the firmware.

Host-Target Communication (HTC)
Files: htc.h htc.c Multiplexes the bus for different services. The services are defined in enum ath10k_htc_svc_gid.

Host interconnect Framework (HIF)
Files: hif.h Abstracts the access to different bus types. Currently only supports PCI, but it's easy to add different bus types.

Copy Engine (CE)
The firmware/ hardware has 8 rings for communication with host, defined in host_ce_config_wlan: static const struct ce_attr host_ce_config_wlan[]


For drivers that don't control TXQ scheduling in software, a new API
function, ieee80211_txq_may_transmit(), is added which the driver can use
to check if the TXQ is eligible for transmission, or should be throttled to
enforce fairness. ------This looks like the reason whey debug doesn't print in ieee80211_txq_may_transmit() and it is never called.

Oct 18, 2019
Debug air-fairness on ath10k. In __ieee80211_tx_status():
		printk("==MHX5.0(%s) info->status.tx_time=%d,ack_sig=%d,ampdu_len=%d,ampdu_ack_len=%d. flagset=%d\n", __func__,info->status.tx_time,info->status.ack_signal,info->status.ampdu_len,info->status.ampdu_ack_len, wiphy_ext_feature_isset(local->hw.wiphy,  NL80211_EXT_FEATURE_AIRTIME_FAIRNESS));
		if (info->status.tx_time &&
		    wiphy_ext_feature_isset(local->hw.wiphy,
					    NL80211_EXT_FEATURE_AIRTIME_FAIRNESS))
			ieee80211_sta_register_airtime(&sta->sta, tid,
						       info->status.tx_time, 0);
The pring log is always:
<0>[  399.304562] ==MHX5.0(__ieee80211_tx_status) info->status.tx_time=0,ack_sig=0,ampdu_len=0,ampdu_ack_len=0.flagset=1  
<0>[  399.304577] ==MHX5.0(__ieee80211_tx_status) info->status.tx_time=0,ack_sig=0,ampdu_len=0,ampdu_ack_len=0. flagset=1 
<0>[  399.304590] ==MHX5.0(__ieee80211_tx_status) info->status.tx_time=0,ack_sig=0,ampdu_len=0,ampdu_ack_len=0. flagset=1 
<0>[  399.304602] ==MHX5.0(__ieee80211_tx_status) info->status.tx_time=0,ack_sig=0,ampdu_len=0,ampdu_ack_len=0. flagset=1 
<0>[  399.304615] ==MHX5.0(__ieee80211_tx_status) info->status.tx_time=0,ack_sig=0,ampdu_len=0,ampdu_ack_len=0. flagset=1  
<0>[  399.304631] ==MHX5.0(__ieee80211_tx_status) info->status.tx_time=0,ack_sig=0,ampdu_len=0,ampdu_ack_len=0. flagset=1 
<0>[  399.304644] ==MHX5.0(__ieee80211_tx_status) info->status.tx_time=0,ack_sig=0,ampdu_len=0,ampdu_ack_len=0. flagset=1 

Looks like in the tx_status, never be able to get the real tx_status information. So it doesn't affect the airtime at all.

=================================
Port latest OpenWRT backports-5.3-rc4-1 wireless driver to replace the G5 existing backports-2017-11-01 because the backports-5.3-rc4-1 has already had the AirTimeFairness support. The G5 build environment need a "lex" command in staging_dir/host/bin/ dir.

Oct 16, 2019
What is difference of 802.11n HT20 and normal 20MHz mode?
A device that uses 802.11n high throughput (HT) mode -- also known as Greenfield mode -- assumes that there are no 802.11a/b/g stations using the same channel. 802.11a/b/g devices cannot communicate with a Greenfield AP. Instead, their transmissions are likely to collide, causing errors and retransmissions for both parties.
However, because an 802.11a/b/g device cannot tell that a Greenfield device is transmitting, it will go right ahead and transmit. To avoid this, the 802.11n standard also defines an HT mixed mode.
A device using HT mixed mode prepares to transmit in both the old 802.11a/b/g fashion and the new 802.11n fashion. Specifically, HT mixed mode devices transmit a legacy format preamble, followed by an HT format preamble. An HT mixed mode device must also send legacy format CTS-to-Self or RTS/CTS (Request to Send/Clear to Send) frames before transmitting. These "protection mechanisms" let nearby 802.11a/b/g devices -- including those not connected to the HT mixed AP -- sense when the channel is busy.

Oct 15, 2019
In G5, /sbin/ifdown lan and then /sbin/ifup lan will not bring back lan again. Suspect uBus then try direct command "ubus call network.interface down '{ "interface" : "lan" }'" and saw uBus did send command netifd. But in interface_proto_event_cb():
	case IFPEV_DOWN:
//		if (NULL == iface->ifname || (
//			strcmp(iface->ifname, "br-wan1") &&
//			strcmp(iface->ifname, "br-wan2") &&
//			strcmp(iface->ifname, "br-lan"))) {
			if (iface->state == IFS_DOWN)
				return;
will retunr here so that br-lan is stuck in IFS_TEARDOWN state instead of IFS_DOWN state. Then in the future when use "ifup lan", uBus calls netifd and in function interface_set_up():
	if (iface->state != IFS_DOWN)
		return 0;

immediately returns so that the lan interface cann't be brought up successfully.

Debug netifd : only log works like:
netifd_log_message(L_NOTICE, "===MHX4.0(%s), name=%s, ifname=%s, state=%d\n", __func__, iface->name, iface->ifname, iface->state);

This is a netifd debug log, with above patch applied, so that lan never comes back to normal status:

                                                                                                            
root@UserDevice:~#                                                                                          
root@UserDevice:~#                                                                                          
root@UserDevice:~# ifconfig                                                                                 
br-lan    Link encap:Ethernet  HWaddr 00:0F:92:06:94:1C                                                     
          inet addr:192.168.168.3  Bcast:192.168.168.255  Mask:255.255.255.0                                
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1                                                
          RX packets:158 errors:0 dropped:0 overruns:0 frame:0                                              
          TX packets:40 errors:0 dropped:0 overruns:0 carrier:0                                             
          collisions:0 txqueuelen:1000                                                                      
          RX bytes:14698 (14.3 KiB)  TX bytes:5606 (5.4 KiB)                                                
                                                                                                            
br-wan1   Link encap:Ethernet  HWaddr 00:0F:92:06:94:1C                                                     
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1                                                
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0                                                
          TX packets:109 errors:0 dropped:0 overruns:0 carrier:0                                            
          collisions:0 txqueuelen:1000                                                                      
          RX bytes:0 (0.0 B)  TX bytes:37278 (36.4 KiB)                                                     
                                                                                                            
br-wan2   Link encap:Ethernet  HWaddr 00:0F:92:07:94:1C                                                     
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1                                                
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0                                                
          TX packets:109 errors:0 dropped:0 overruns:0 carrier:0                                            
          collisions:0 txqueuelen:1000                                                                      
          RX bytes:0 (0.0 B)  TX bytes:37278 (36.4 KiB)                                                     
                                                                                                            
br-wwan   Link encap:Ethernet  HWaddr 00:0F:92:FE:00:01                                                     
          inet addr:10.96.49.196  Bcast:255.255.255.255  Mask:255.255.255.255                               
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1                                                
          RX packets:22 errors:0 dropped:0 overruns:0 frame:0                                               
          TX packets:28 errors:0 dropped:0 overruns:0 carrier:0                                             
          collisions:0 txqueuelen:1000                                                                      
          RX bytes:2004 (1.9 KiB)  TX bytes:2327 (2.2 KiB)                                                  
                                                                                                            
eth0      Link encap:Ethernet  HWaddr 00:0F:92:06:94:1C                                                     
          inet6 addr: fe80::20f:92ff:fe06:941c/64 Scope:Link                                                
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1                                                
          RX packets:63 errors:0 dropped:0 overruns:0 frame:0                                               
          TX packets:241 errors:0 dropped:0 overruns:0 carrier:0                                            
          collisions:0 txqueuelen:1000                                                                      
          RX bytes:11093 (10.8 KiB)  TX bytes:51012 (49.8 KiB)                                              
          Interrupt:24                                                                                      
                                                                                                            
eth0.1    Link encap:Ethernet  HWaddr 00:0F:92:06:94:1C                                                     
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1                                                
          RX packets:63 errors:0 dropped:0 overruns:0 frame:0                                               
          TX packets:116 errors:0 dropped:0 overruns:0 carrier:0                                            
          collisions:0 txqueuelen:1000                                                                      
          RX bytes:9959 (9.7 KiB)  TX bytes:8384 (8.1 KiB)                                                  
                                                                                                            
eth0.2    Link encap:Ethernet  HWaddr 00:0F:92:06:94:1C                                                     
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1                                                
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0                                                
          TX packets:113 errors:0 dropped:0 overruns:0 carrier:0                                            
          collisions:0 txqueuelen:1000                                                                      
          RX bytes:0 (0.0 B)  TX bytes:37462 (36.5 KiB)                                                     
                                                                                                            
eth1      Link encap:Ethernet  HWaddr 00:0F:92:07:94:1C                                                     
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1                                                
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0                                                
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0                                              
          collisions:0 txqueuelen:1000                                                                      
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)                                                            
                                                                                                            
lo        Link encap:Local Loopback                                                                         
          inet addr:127.0.0.1  Mask:255.0.0.0                                                               
          UP LOOPBACK RUNNING  MTU:65536  Metric:1                                                          
          RX packets:8 errors:0 dropped:0 overruns:0 frame:0                                                
          TX packets:8 errors:0 dropped:0 overruns:0 carrier:0                                              
          collisions:0 txqueuelen:1000                                                                      
          RX bytes:440 (440.0 B)  TX bytes:440 (440.0 B)                                                    
                                                                                                            
usb0      Link encap:Ethernet  HWaddr 00:0F:92:FE:00:01                                                     
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1                                                
          RX packets:22 errors:0 dropped:0 overruns:0 frame:0                                               
          TX packets:28 errors:0 dropped:0 overruns:0 carrier:0                                             
          collisions:0 txqueuelen:1000                                                                      
          RX bytes:2004 (1.9 KiB)  TX bytes:2327 (2.2 KiB)                                                  
                                                                                                            
wlan0     Link encap:Ethernet  HWaddr 04:F0:21:42:23:F3                                                     
          inet6 addr: fe80::6f0:21ff:fe42:23f3/64 Scope:Link                                                
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1                                                
          RX packets:63 errors:0 dropped:0 overruns:0 frame:0                                               
          TX packets:158 errors:0 dropped:0 overruns:0 carrier:0                                            
          collisions:0 txqueuelen:1000                                                                      
          RX bytes:6109 (5.9 KiB)  TX bytes:16067 (15.6 KiB)                                                
                                                                                                            
root@UserDevice:~# brctl show                                                                               
bridge name     bridge id               STP enabled     interfaces                                          
br-lan          7fff.000f9206941c       no              eth0.1                                              
                                                        wlan0                                               
br-wan1         7fff.000f9206941c       no              eth0.2                                              
br-wan2         7fff.000f9207941c       no              eth1                                                
br-wwan         7fff.000f92fe0001       no              usb0                                                
root@UserDevice:~#                                                                                          
root@UserDevice:~# iw wlan0 station dump                                                                    
Station 00:0f:92:fe:00:aa (on wlan0)                                                                        
        inactive time:  15410 ms                                                                            
        rx bytes:       1474                                                                                
        rx packets:     23                                                                                  
        tx bytes:       534                                                                                 
        tx packets:     4                                                                                   
        tx retries:     0                                                                                   
        tx failed:      0                                                                                   
        signal:         -51 [-52, -64, -61] dBm                                                             
        signal avg:     -52 [-53, -63, -65] dBm                                                             
        tx bitrate:     1.0 MBit/s                                                                          
        rx bitrate:     57.8 MBit/s MCS 5 short GI                                                          
        authorized:     yes                                                                                 
        authenticated:  yes                                                                                 
        preamble:       short                                                                               
        WMM/WME:        yes                                                                                 
        MFP:            no                                                                                  
        TDLS peer:      no                                                                                  
        connected time: 423 seconds                                                                         
Station 00:0f:92:fe:00:86 (on wlan0)                                                                        
        inactive time:  1150 ms                                                                             
        rx bytes:       530                                                                                 
        rx packets:     7                                                                                   
        tx bytes:       534                                                                                 
        tx packets:     4                                                                                   
        tx retries:     0                                                                                   
        tx failed:      0                                                                                   
        signal:         -41 [-49, -51, -43] dBm                                                             
        signal avg:     -41 [-47, -58, -42] dBm                                                             
        tx bitrate:     1.0 MBit/s                                                                          
        rx bitrate:     1.0 MBit/s                                                                          
        authorized:     yes                                                                                 
        authenticated:  yes                                                                                 
        preamble:       short                                                                               
        WMM/WME:        yes                                                                                 
        MFP:            no                                                                                  
        TDLS peer:      no                                                                                  
        connected time: 30 seconds                                                                          
root@UserDevice:~#                                                                                          
root@UserDevice:~# ping google.ca                                                                           
PING google.ca (172.217.14.195): 56 data bytes                                                              
64 bytes from 172.217.14.195: seq=0 ttl=51 time=82.974 ms                                                   
^C                                                                                                          
--- google.ca ping statistics ---                                                                           
1 packets transmitted, 1 packets received, 0% packet loss                                                   
round-trip min/avg/max = 82.974/82.974/82.974 ms                                                            
root@UserDevice:~#                                                                                          
root@UserDevice:~# logread -f                                                                               
=============================ubus call network.interface up '{ "interface" : "wwan" }':
Thu Sep 12 11:58:00 2019 daemon.info hostapd: wlan0: STA 00:0f:92:fe:00:86 IEEE 802.11: authenticated                   
Thu Sep 12 11:58:00 2019 daemon.info hostapd: wlan0: STA 00:0f:92:fe:00:86 IEEE 802.11: associated (aid 1)  
Thu Sep 12 11:58:00 2019 daemon.notice hostapd: wlan0: AP-STA-CONNECTED 00:0f:92:fe:00:86                   
Thu Sep 12 11:58:00 2019 daemon.info hostapd: wlan0: STA 00:0f:92:fe:00:86 RADIUS: starting accounting sessi
on D4046BAC4AE2797B                                                                                         
Thu Sep 12 11:58:00 2019 daemon.info hostapd: wlan0: STA 00:0f:92:fe:00:86 WPA: pairwise key handshake compl
eted (RSN)                                                                                                  
                                                                                                            
                                                                                                            
Thu Sep 12 11:58:04 2019 daemon.notice netifd: ===MHX3.0(netifd_handle_up) start...                         
Thu Sep 12 11:58:04 2019 daemon.notice netifd: ===MHX4.0(interface_set_up), name=wwan, ifname=br-wwan, state
=1 // state=IFS_UP
Thu Sep 12 11:58:04 2019 daemon.notice netifd: ===MHX3.1(netifd_handle_up) exited                           
                                                                                                            
=================================ubus call network.interface down '{ "interface" : "wwan" }':               
                                                                                                            
Thu Sep 12 11:58:26 2019 daemon.notice netifd: Interface 'wan6', available=0                                
Thu Sep 12 11:58:26 2019 daemon.notice netifd: ===MHX2.0(interface_proto_event), cmd=1, forcr=1    //cmd=PROTO_CMD_TEARDOWN         
Thu Sep 12 11:58:26 2019 daemon.notice netifd: ===MHX2.0(interface_proto_event), cmd=1, forcr=0             
Thu Sep 12 11:58:26 2019 daemon.notice netifd: ===MHX2.1(interface_proto_event), ret=0                      
Thu Sep 12 11:58:26 2019 daemon.notice netifd: ===MHX2.2(interface_proto_event), ev=1     //ev= IFPEV_DOWN              
Thu Sep 12 11:58:26 2019 daemon.notice netifd: ===MHX1.0(interface_proto_event_cb)Event iface->name='wwan', iface->state=2,event=1 //state=IFS_TEARDOWN
Thu Sep 12 11:58:26 2019 daemon.notice netifd: ===MHX1.2(interface_proto_event_cb) Interface 'wwan' is now down. iface->state=2 //state=IFS_TEARDOWN
Thu Sep 12 11:58:26 2019 daemon.warn dnsmasq[3153]: no servers found in /tmp/resolv.conf.auto, will retry   
Thu Sep 12 11:58:27 2019 daemon.notice netifd: Update interface 'loopback'                                  
Thu Sep 12 11:58:[  551.505125] br-wwan: port 1(usb0) entered disabled state                                
27 2019 daemon.notice netifd: Update interface 'lan'                                                        
Thu Sep 12 11:58:27 2019 daemon.notice netifd: Update interface 'wan1'                                      
Thu Sep 12 11:58:27 2019 daemon.no[  551.524715] IPv6: ADDRCONF(NETDEV_UP): br-wwan: link is not ready      
tice netifd: Update interface 'wan2'                                                                        
Thu Sep 12 11:58:27 2019 daemon.notice net[  551.538441] device usb0 left promiscuous mode                  
ifd: Update inte[  551.543278] br-wwan: port 1(usb0) entered disabled state                                 
rface 'wifi'                                                                                                
Thu Sep 12 11:58:27 2019 daemon.notice netifd: Update interface 'wan6'                                      
Thu Sep 12 11:58:27 2019 daemon.notice netifd: Update interface 'wwan'                                      
Thu Sep 12 11:58:27 2019 daemon.notice netifd: Upd[  551.566838] IPv6: ADDRCONF(NETDEV_UP): usb0: link is not ready 
ate interface 'hotspot'                                                                                     
Thu Sep 12 11:58:27 2019 daemon.notice netifd: ===MHX4.0(interface_set_up), name=lan, ifname=br-lan, state=1	//state=IFS_UP
Thu Sep 12 11:58:27 2019 daemon.notice netifd: ===MHX4.0(interface_set_up), name=loopback, ifname=lo, state=1    //state=IFS_UP
Thu Sep 12 11:58:27 2019 daemon.notice netifd: ===MHX4.0(interface_set_up), name=wan1, ifname=br-wan1, state=0   //state=IFS_SETUP
Thu Sep 12 11:58:27 2019 daemon.notice netifd: ===MHX4.0(interface_set_up), name=wan2, ifname=br-wan2, state=0   //state=IFS_SETUP
Thu Sep 12 11:58:27 2019 daemon.notice netifd: ===MHX1.0(interface_proto_event_cb)Event iface->name='wan6', iface->state=2,event=1 
Thu Sep 12 11:58:27 2019 daemon.notice netifd: =======MHX1.2(interface_proto_event_cb) Interface 'wan6' is now down. iface->state=2  //state=IFS_TEARDOWN
Thu Sep 12 11:58:27 2019 daemon.notice netifd: ===MHX2.0(interface_proto_event), cmd=2, force=0        //cmd=PROTO_CMD_RENEW     
Thu Sep 12 11:58:27 2019 daemon.notice netifd: ===MHX2.0(interface_proto_event), cmd=2, force=0             
Thu Sep 12 11:58:27 2019 daemon.notice netifd: ===MHX2.1(interface_proto_event), ret=0                      
Thu Sep 12 11:58:27 2019 daemon.notice netifd: ===MHX2.2(interface_proto_event), ev=3                 //ev=IFPEV_RENEW     
Thu Sep 12 11:58:27 2019 daemon.notice netifd: ===MHX1.0(interface_proto_event_cb)Event iface->name='wwan',iface->state=3,event=3  //state=IFS_DOWN,event=IFPEV_RENEW
Thu Sep 12 11:58:27 2019 daemon.notice netifd: Interface 'wan6' is disabled                                 
Thu Sep 12 11:58:27 2019 daemon.notice netifd: Interface 'wwan' is disabled                                 
Thu Sep 12 11:58:27 2019 daemon.notice netifd: Network alias '' link is down                                
Thu Sep 12 11:58:27 2019 daemon.notice netifd: Interface 'wan6' has link connectivity loss                  
Thu Sep 12 11:58:27 2019 daemon.notice netifd: Network device 'usb0' link is down                           
Thu Sep 12 11:58:27 2019 daemon.notice netifd: ===MHX1.0(interface_proto_event_cb)Event iface->name='wan6', iface->state=3,event=2 //state=IFS_DOWN,event=IFPEV_LINK_LOST
Thu Sep 12 11:58:27 2019 daemon.notice netifd: bridge 'br-wwan' link is down                                
Thu Sep 12 11:58:27 2019 daemon.notice netifd: Interface 'wwan' has link connectivity loss                  
Thu Sep 12 11:58:27 2019 daemon.notice netifd: Update interface 'loopback'                                  
Thu Sep 12 11:58:27 2019 daemon.notice netifd: Update interface 'lan'                                       
Thu Sep 12 11:58:27 2019 daemon.notice netifd: Update interface 'wan1'                                      
Thu Sep 12 11:58:27 2019 daemon.notice netifd: Update interface 'wan2'                                      
Thu Sep 12 11:58:27 2019 daemon.notice netifd: Update interface 'wifi'                                      
Thu Sep 12 11:58:27 2019 daemon.notice netifd: Update interface 'wan6'                                      
Thu Sep 12 11:58:27 2019 daemon.notice netifd: Update interface 'wwan'                                      
Thu Sep 12 11:58:27 2019 daemon.notice netifd: Update interface 'hotspot'                                   
Thu Sep 12 11:58:27 2019 daemon.notice netifd: ===MHX4.0(interface_set_up), name=lan, ifname=br-lan, state=1	//IFS_UP
Thu Sep 12 11:58:27 2019 daemon.notice netifd: ===MHX4.0(interface_set_up), name=loopback, ifname=lo, state=1	//IFS_UP
Thu Sep 12 11:58:27 2019 daemon.notice netifd: ===MHX4.0(interface_set_up), name=wan1, ifname=br-wan1, state=0 	//IFS_SETUP
Thu Sep 12 11:58:27 2019 daemon.notice netifd: ===MHX4.0(interface_set_up), name=wan2, ifname=br-wan2, state=0 	//IFS_SETUP
Thu Sep 12 11:58:27 2019 local0.err hotplug-mvpn[12918]: call mifupdown down (wwan)                         
Thu Sep 12 11:58:27 2019 local0.err hotplug-mvpn[12969]: call mifupdown down (wwan)                         
                                                                                                            
                                                                                                            
                                                                                                            
                                                                                                            
                                                                                                            
=============================ubus call network.interface up '{ "interface" : "wwan" }':
Thu Sep 12 11:59:07 2019 daemon.notice netifd: ===MHX3.0(netifd_handle_up) start...                         
Thu Sep 12 11:59:07 2019 daemon.notice netifd: ===MHX4.0(interface_set_up), name=wwan, ifname=br-wwan, state=3	//state=IFS_DOWN
[  592.105613] br-wwan: port 1(usb0) entered blocking state  
[  592.112077] br-wwan: port 1(usb0) entered disabled state                                 
[  592.119386] device usb0 entered promiscuous mode 
                                                                                                        
Thu Sep 12 11:59:07 2019 daemon.notice netifd: ===MHX4.1(interface_set_up) availabel=1, enabled=0           
Thu Sep [  592.133052] br-wwan: port 1(usb0) entered blocking state                                         
12 11:59:07 2019[  592.139723] br-wwan: port 1(usb0) entered forwarding state                               
 daemon.notice netifd: ===MHX4.2(interface_set_up)                                                          
Thu Sep 12 11:59:07 2019 daemon.notice netifd: ===MHX2.0(interface_proto_event), cmd=2, forcr=0  //cmd=PROTO_CMD_RENEW           
Thu Sep 12 11:59:07 2019 daemon.notice netifd: ===MHX2.1(interface_proto_event), ret=0                      
Thu Sep 12 11:59:07 2019 daemon.notice netifd: ===MHX2.2(interface_proto_event), ev=3         //ev=IFPEV_RENEW              
Thu Sep 12 11:59:07 2019 daemon.notice netifd: ===MHX1.0(interface_proto_event_cb)Event iface->name='wwan', iface->state=3,event=3	//state=IFS_DOWN,event=IFPEV_RENEW
Thu Sep 12 11:59:07 2019 daemon.notice netifd: Interface 'wwan' is enabled                                  
Thu Sep 12 11:59:07 2019 daemon.notice netifd: ===MHX4.4(interface_set_up)                                  
Thu Sep 12 11:59:07 2019 daemon.notice netifd: ===MHX3.1(netifd_handle_up) exited                           
Thu Sep 12 11:59:07 2019 daemon.notice netifd: bridge 'br-wwan' link is up                                  
Thu Sep 12 11:59:07 2019 daemon.notice netifd: Interface 'wwan' has link connectivity                       
Thu Sep 12 11:59:07 2019 daemon.notice netifd: Interface 'wwan' is setting up now                           
Thu Sep 12 11:59:07 2019 daemon.notice netifd: ===MHX2.0(interface_proto_event), cmd=0, forcr=0  //cmd=PROTO_CMD_SETUP           
Thu Sep 12 11:59:07 2019 daemon.notice netifd: ===MHX2.1(interface_proto_event), ret=0                      
Thu Sep 12 11:59:07 2019 daemon.notice netifd: ===MHX2.2(interface_proto_event), ev=0        //ev=IFPEV_UP               
Thu Sep 12 11:59:07 2019 daemon.notice netifd: ===MHX1.0(interface_proto_event_cb)Event iface->name='wwan', iface->state=0,event=0           
Thu Sep 12 11:59:07 2019 daemon.notice netifd: Interface 'wan6', available=1                                
Thu Sep 12 11:59:07 2019 daemon.notice netifd: ===MHX4.0(interface_set_up), name=wan6, ifname=@wwan, state=3	//state=IFPEV_RENEW
Thu Sep 12 11:59:07 2019 daemon.notice netifd: ===MHX4.1(interface_set_up) availabel=1, enabled=0           
Thu Sep 12 11:59:07 2019 daemon.notice netifd: ===MHX4.2(interface_set_up)                                  
Thu Sep 12 11:59:07 2019 daemon.notice netifd: Interface 'wan6' is enabled                                  
Thu Sep 12 11:59:07 2019 daemon.notice netifd: ===MHX4.4(interface_set_up)                                  
Thu Sep 12 11:59:07 2019 daemon.notice netifd: Network alias 'br-wwan' link is up                           
Thu Sep 12 11:59:07 2019 daemon.notice netifd: Interface 'wan6' has link connectivity                       
Thu Sep 12 11:59:07 2019 daemon.notice netifd: Interface 'wan6' is setting up now                           
Thu Sep 12 11:59:07 2019 daemon.notice netifd: ===MHX2.0(interface_proto_event), cmd=0, forcr=0             
Thu Sep 12 11:59:07 2019 daemon.notice netifd: =========MHX1.1(interface_proto_event_cb) Interface 'wwan' is now up. iface->state=1 //state=IFS_UP
Thu Sep 12 11:59:07 2019 daemon.info dnsmasq[3153]: reading /tmp/resolv.conf.auto                           
Thu Sep 12 11:59:07 2019 daemon.info dnsmasq[3153]: using local addresses only for domain test              
Thu Sep 12 11:59:07 2019 daemon.info dnsmasq[3153]: using local addresses only for domain onion             
Thu Sep 12 11:59:07 2019 daemon.info dnsmasq[3153]: using local addresses only for domain localhost         
Thu Sep 12 11:59:07 2019 daemon.info dnsmasq[3153]: using local addresses only for domain local             
Thu Sep 12 11:59:07 2019 daemon.info dnsmasq[3153]: using local addresses only for domain invalid           
Thu Sep 12 11:59:07 2019 daemon.info dnsmasq[3153]: using local addresses only for domain example.net       
Thu Sep 12 11:59:07 2019 daemon.info dnsmasq[3153]: using local addresses only for domain example.org       
Thu Sep 12 11:59:07 2019 daemon.info dnsmasq[3153]: using local addresses only for domain example.com       
Thu Sep 12 11:59:07 2019 daemon.info dnsmasq[3153]: using nameserver 75.153.171.23#53                       
Thu Sep 12 11:59:07 2019 daemon.info dnsmasq[3153]: using nameserver 75.153.171.24#53                       
Thu Sep 12 11:59:07 2019 daemon.info dnsmasq[3153]: using 3 more local addresses                            
Thu Sep 12 11:59:07 2019 daemon.notice netifd: Network device 'usb0' link is up                             
Thu Sep 12 11:59:07 2019 daemon.notice netifd: Update interface 'loopback'                                  
Thu Sep 12 11:59:07 2019 daemon.notice netifd: Update interface 'lan'                                       
Thu Sep 12 11:59:07 2019 daemon.notice netifd: Update interface 'wan1'                                      
Thu Sep 12 11:59:07 2019 daemon.notice netifd: Update interface 'wan2'                                      
Thu Sep 12 11:59:07 2019 daemon.notice netifd: Update interface 'wifi'                                      
Thu Sep 12 11:59:07 2019 daemon.notice netifd: Update interface 'wan6'                                      
Thu Sep 12 11:59:07 2019 daemon.notice netifd: Update interface 'wwan'                                      
Thu Sep 12 11:59:07 2019 daemon.notice netifd: Update interface 'hotspot'                                   
Thu Sep 12 11:59:07 2019 daemon.notice netifd: ===MHX4.0(interface_set_up), name=lan, ifname=br-lan, state=1
Thu Sep 12 11:59:07 2019 daemon.notice netifd: ===MHX4.0(interface_set_up), name=loopback, ifname=lo, state=1
Thu Sep 12 11:59:07 2019 daemon.notice netifd: ===MHX4.0(interface_set_up), name=wan1, ifname=br-wan1, state=0 
Thu Sep 12 11:59:07 2019 daemon.notice netifd: ===MHX4.0(interface_set_up), name=wan2, ifname=br-wan2, state=0 
Thu Sep 12 11:59:07 2019 daemon.notice netifd: ===MHX4.0(interface_set_up), name=wan6, ifname=@wwan, state=0
Thu Sep 12 11:59:07 2019 daemon.notice netifd: ===MHX4.0(interface_set_up), name=wwan, ifname=br-wwan, state=1 
Thu Sep 12 11:59:07 2019 daemon.notice netifd: ===MHX1.0(interface_proto_event_cb)Event iface->name='wan6', iface->state=0,event=2 
Thu Sep 12 11:59:07 2019 user.notice defaultroute[13855]: ip route add 10.0.0.1/32 dev br-wwan [0]          
Thu Sep 12 11:59:07 2019 user.notice defaultroute[13855]: ip route add default 10.0.0.1 dev br-wwan [0]     
Thu Sep 12 11:59:07 2019 user.notice defaultroute[13855]: ip -6 neigh replace Address lladdr 00:0F:92:FE:00:01 dev br-wwan [0] 
Thu Sep 12 11:59:08 2019 user.notice fw-hotplug[13855]: Reloading firewall due to ifup of wwan (br-wwan)    
Thu Sep 12 11:59:08 2019 local0.err hotplug-mvpn[13855]: call mifupdown up (wwan)                           
Thu Sep 12 11:59:09 2019 user.notice coova-chilli-init[14047]: The network hotspot is not briged with wireless AP interface. Hotspot service can not start. 
                                                                                                            
                                                                                                            
                                                                                                            
                                                                                                            
====================ubus call network.interface up '{ "interface" : "lan" }':                               
Thu Sep 12 11:59:32 2019 daemon.notice netifd: ===MHX3.0(netifd_handle_up) start...                         
Thu Sep 12 11:59:32 2019 daemon.notice netifd: ===MHX4.0(interface_set_up), name=lan, ifname=br-lan, state=1
Thu Sep 12 11:59:32 2019 daemon.notice netifd: ===MHX3.1(netifd_handle_up) exited                           
                                                                                                            
==================ubus call network.interface down '{ "interface" : "lan" }':                               
Thu Sep 12 11:59:53 2019 daemon.notice netifd: ===MHX2.0(interface_proto_event), cmd=1, forcr=0   //cmd=PROTO_CMD_TEARDOWN          
Thu Sep 12 11:59:53 2019 daemon.notice netifd: ===MHX2.1(interface_proto_event), ret=0                      
Thu Sep 12 11:59:53 2019 daemon.notice netifd: ===MHX2.2(interface_proto_event), ev=1      	//ev=IFPEV_DOWN                 
Thu Sep 12 11:59:53 2019 daemon.notice netifd: ===MHX1.0(interface_proto_event_cb)Event iface->name='lan', iface->state=2,event=1   // state=IFS_TEARDOWN
Thu Sep 12 11:59:53 2019 daemon.notice netifd: Update interface 'loopback'                                  
Thu Sep 12 11:59:53 2019 daemon.notice netifd: Update interface 'lan'                                       
Thu Sep 12 11:59:53 2019 daemon.notice netifd: Update interface 'wan1'                                      
Thu Sep 12 11:59:53 2019 daemon.notice netifd: Update interface 'wan2'                                      
Thu Sep 12 11:59:53 2019 daemon.notice netifd: Update interface 'wifi'                                      
Thu Sep 12 11:59:53 2019 daemon.notice netifd: Update interface 'wan6'                                      
Thu Sep 12 11:59:53 2019 daemon.notice netifd: Update interface 'wwan'                                      
Thu Sep 12 11:59:53 2019 daemon.notice netifd: Update interface 'hotspot'                                   
Thu Sep 12 11:59:53 2019 daemon.notice netifd: ===MHX4.0(interface_set_up), name=loopback, ifname=lo, state=1 
Thu Sep 12 11:59:53 2019 daemon.notice netifd: ===MHX4.0(interface_set_up), name=wan1, ifname=br-wan1, state=0 
Thu Sep 12 11:59:53 2019 daemon.notice netifd: ===MHX4.0(interface_set_up), name=wan2, ifname=br-wan2, state=0 
Thu Sep 12 11:59:53 2019 daemon.notice netifd: ===MHX4.0(interface_set_up), name=wan6, ifname=@wwan, state=0
Thu Sep 12 11:59:53 2019 daemon.notice netifd: ===MHX4.0(interface_set_up), name=wwan, ifname=br-wwan, state=1 
                                                                                                            
                                                                                                            
Thu Sep 12 11:59:56 2019 daemon.info hostapd: wlan0: STA 00:0f:92:fe:00:86 WPA: group key handshake completed (RSN)
Thu Sep 12 11:59:56 2019 daemon.info hostapd: wlan0: STA 00:0f:92:fe:00:aa WPA: group key handshake completed (RSN) 
                                                                                                            
                                                                                                            
                                                                                                            
                                                                                                            
                                                                                                            
====================== ubus call network.interface up '{ "interface" : "lan" }':                            
Thu Sep 12 12:00:15 2019 daemon.notice netifd: ===MHX3.0(netifd_handle_up) start...                         
Thu Sep 12 12:00:15 2019 daemon.notice netifd: ===MHX4.0(interface_set_up), name=lan, ifname=br-lan, state=2
Thu Sep 12 12:00:15 2019 daemon.notice netifd: ===MHX3.1(netifd_handle_up) exited                           
                                                                                                            
                                                                                                            
==================== wifi:                                                                                  
                                                                                                            
Thu Sep 12 12:00:31 2019 daemon.notice netifd: Update interface 'loopback'                                  
Thu Sep 12 12:00:31 2019 daemon.notice netifd: Update interface 'lan'                                       
Thu Sep 12 12:00:31 2019 daemon.notice netifd: Update interface 'wan1'                                      
Thu Sep 12 12:00:31 2019 daemon.notice netifd: Update interface 'wan2'                                      
Thu Sep 12 12:00:31 2019 daemon.notice netifd: Update interface 'wifi'                                      
Thu Sep 12 12:00:31 2019 daemon.notice netifd: Update interface 'wan6'                                      
Thu Sep 12 12:00:31 2019 daemon.notice netifd: Update interface 'wwan'                                      
Thu Sep 12 12:00:31 2019 daemon.notice netifd: Update interface 'hotspot'                                   
Thu Sep 12 12:00:31 2019 daemon.notice netifd: ===MHX4.0(interface_set_up), name=lan, ifname=br-lan, state=2	//br-lan is still in IFS_TEARDOWN state.
Thu Sep 12 12:00:31 2019 daemon.notice netifd: ===MHX4.0(interface_set_up), name=loopback, ifname=lo, state=1  
Thu Sep 12 12:00:31 2019 daemon.notice netifd: ===MHX4.0(interface_set_up), name=wan1, ifname=br-wan1, state=0 
Thu Sep 12 12:00:31 2019 daemon.notice netifd: ===MHX4.0(interface_set_up), name=wan2, ifname=br-wan2, state=0 
Thu Sep 12 12:00:31 2019 daemon.notice netifd: ===MHX4.0(interface_set_up), name=wan6, ifname=@wwan, state=0
Thu Sep 12 12:00:31 2019 daemon.notice netifd: ===MHX4.0(interface_set_up), name=wwan, ifname=br-wwan, state=1 
Thu Sep 12 12:00:32 2019 daemon.notice hostapd: wlan0: interface state ENABLED->DISABLED                    
Thu Sep 12 12:00:32 2019 daemon.notice hostapd: wlan0: AP-STA-DISCONNECTED 00:0f:92:fe:00:86                
Thu Sep 12 12:00:32 2019 daemon.notice hostapd: wlan0: AP-STA-DISCONNECTED 00:0f:92:fe:00:aa                
Thu Sep 12 12:00:32 2019 daemon.notice hostapd: wlan0: AP-DISABLED                                          
Thu Sep 12 12:00:32 2019 daemon.notice hostapd: wlan0: CTRL-EVENT-TERMINATING                               
Thu Sep 12 12:00:32 2019 daemon.notice hostapd: nl80211: deinit ifname=wlan0 disabled_11b_rates=0           
[  676.585352] device wlan0 left promiscuous mode                                                           
[  676.590057] br-lan: port 2(wlan0) entered disabled state                                                 
Thu Sep 12 12:00:32 2019 daemon.notice netifd: Network device 'wlan0' link is down                          
Thu Sep 12 12:00:32 2019 daemon.notice netifd: radio0 (16000): WARNING: Variable 'data' does not exist or is
 not an array/object                                                                                        
Thu Sep 12 12:00:32 2019 daemon.notice netifd: ===MHX2.0(interface_proto_event), cmd=2, forcr=0             
Thu Sep 12 12:00:32 2019 daemon.notice netifd: ===MHX2.1(interface_proto_event), ret=0                      
Thu Sep 12 12:00:32 2019 daemon.notice netifd: ===MHX2.2(interface_proto_event), ev=3                       
Thu Sep 12 12:00:32 2019 daemon.notice netifd: ===MHX1.0(interface_proto_event_cb)Event iface->name='lan', iface->state=2,event=3   
Thu Sep 12 12:00:32 2019 daemon.err hostapd: Configuration file: /var/run/hostapd-phy0.conf                 
[  678.701402] IPv6: ADDRCONF(NETDEV_UP): wlan0: link is not ready                                          
[  678.711534] br-lan: port 2(wlan0) entered blocking state                                                 
[  678.716888] br-lan: port 2(wlan0) entered disabled state                                                 
[  678.722734] device wlan0 entered promiscuous mode                                                        
Thu Sep 12 12:00:34 2019 daemon.notice hostapd: wlan0: interface state UNINITIALIZED->COUNTRY_UPDATE        
Thu Sep 12 12:00:34 2019 daemon.err hostapd: Using interface wlan0 with hwaddr 04:f0:21:42:23:f3 and ssid "bulletac-jeff"  
[  679.078053] IPv6: ADDRCONF(NETDEV_CHANGE): wlan0: link becomes ready                                     
[  679.084728] br-lan: port 2(wlan0) entered blocking state                                                 
[  679.090065] br-lan: port 2(wlan0) entered forwarding state                                               
Thu Sep 12 12:00:34 2019 daemon.notice hostapd: wlan0: interface state COUNTRY_UPDATE->ENABLED              
Thu Sep 12 12:00:34 2019 daemon.notice hostapd: wlan0: AP-ENABLED                                           
Thu Sep 12 12:00:34 2019 daemon.notice netifd: Network device 'wlan0' link is up                            
Thu Sep 12 12:00:34 2019 daemon.notice netifd: ===MHX2.0(interface_proto_event), cmd=2, forcr=0             
Thu Sep 12 12:00:34 2019 daemon.notice netifd: ===MHX2.1(interface_proto_event), ret=0                      
Thu Sep 12 12:00:34 2019 daemon.notice netifd: ===MHX2.2(interface_proto_event), ev=3                       
Thu Sep 12 12:00:34 2019 daemon.notice netifd: ===MHX1.0(interface_proto_event_cb)Event iface->name='lan', iface->state=2,event=3   
Thu Sep 12 12:00:35 2019 daemon.info hostapd: wlan0: STA 00:0f:92:fe:00:86 IEEE 802.11: authenticated       
Thu Sep 12 12:00:35 2019 daemon.info hostapd: wlan0: STA 00:0f:92:fe:00:86 IEEE 802.11: associated (aid 1)  
Thu Sep 12 12:00:35 2019 daemon.notice hostapd: wlan0: AP-STA-CONNECTED 00:0f:92:fe:00:86                   
Thu Sep 12 12:00:35 2019 daemon.info hostapd: wlan0: STA 00:0f:92:fe:00:86 RADIUS: starting accounting session 62E65E668C1300F0 
Thu Sep 12 12:00:35 2019 daemon.info hostapd: wlan0: STA 00:0f:92:fe:00:86 WPA: pairwise key handshake completed (RSN)   
Thu Sep 12 12:00:36 2019 daemon.info hostapd: wlan0: STA 00:0f:92:fe:00:aa IEEE 802.11: authenticated       
Thu Sep 12 12:00:36 2019 daemon.info hostapd: wlan0: STA 00:0f:92:fe:00:aa IEEE 802.11: associated (aid 2)  
Thu Sep 12 12:00:36 2019 daemon.notice hostapd: wlan0: AP-STA-CONNECTED 00:0f:92:fe:00:aa                   
Thu Sep 12 12:00:36 2019 daemon.info hostapd: wlan0: STA 00:0f:92:fe:00:aa RADIUS: starting accounting session 908EAA192189F81E 
Thu Sep 12 12:00:36 2019 daemon.info hostapd: wlan0: STA 00:0f:92:fe:00:aa WPA: pairwise key handshake completed (RSN) 
                                                                                                            

Thu Sep 12 12:00:55 2019 daemon.info hostapd: wlan0: STA 00:0f:92:fe:00:86 IEEE 802.11: authenticated       
Thu Sep 12 12:00:55 2019 daemon.info hostapd: wlan0: STA 00:0f:92:fe:00:86 IEEE 802.11: associated (aid 1)  
Thu Sep 12 12:00:55 2019 daemon.notice hostapd: wlan0: AP-STA-CONNECTED 00:0f:92:fe:00:86                   
Thu Sep 12 12:00:55 2019 daemon.info hostapd: wlan0: STA 00:0f:92:fe:00:86 RADIUS: starting accounting session 62E65E668C1300F0  
Thu Sep 12 12:00:55 2019 daemon.info hostapd: wlan0: STA 00:0f:92:fe:00:86 WPA: pairwise key handshake completed (RSN) 

root@UserDevice:~# ifstatus lan                                                                             
{                                                                                                           
        "up": false,                                                                                        
        "pending": false,                                                                                   
        "available": true,                                                                                  
        "autostart": true,                                                                                  
        "dynamic": false,                                                                                   
        "proto": "static",                                                                                  
        "device": "br-lan",                                                                                 
        "data": {                                                                                           
                                                                                                            
        }                                                                                                   
}                                                                                                           
root@UserDevice:~# cat var/state/network                                                                    
network.lan.ifname='br-lan'                                                                                 
network.loopback.up='1'                                                                                     
network.wwan.lastip='10.96.49.196'                                                                          
network.wwan.link='auto'                                                                                    
network.wwan.up='1'                                                                                         
network.wwan.ifname='br-wwan'                                                                               
root@UserDevice:~# 


Oct 7, 2019
G5 baseline manually add airtime fairness:

Oct 3,2019
Performance anomaly of 802.11b : The performance of the IEEE 802.11b wireless local area networks is analyzed. We have observed that when some mobile hosts use a lower bit rate than the others, the performance of all hosts is considerably degraded. Such a situation is a common case in wireless local area networks in which a host far away from an access point is subject to important signal fading and interference. To cope with this problem, the host changes its modulation type, which degrades its bit rate to some lower value. Typically, 802.11b products degrade the bit rate from 11 Mb/s to 5.5, 2, or 1 Mb/s when repeated unsuccessful frame transmissions are detected. In such a case, a host transmitting for example at 1 Mb/s reduces the throughput of all other hosts transmitting at 11 Mb/s to a low value below 1 Mb/s. The basic CSMA/CA channel access method is at the root of this anomaly: it guarantees an equal long term channel access probability to all hosts. When one host captures the channel for a long time because its bit rate is low, it penalizes other hosts that use the higher rate. We analyze the anomaly theoretically by deriving simple expressions for the useful throughput, validate them by means of simulation, and compare with several performance measurements.

Guys, think of Airtime fairness as a toggle to decide whether the amount of data, or the amount of time should be fair, among actively receiving clients.

w/ airtime fairness (ATF), each devices gets the same amount of time, so a faster client (better modulation) can get more data in it's time, and a slower client gets less.

w/o, all devices get equal throughput. A fast device will get 2kb, then a slow client will get 2kb and back and forth.


Sept 27, 2019
In Ubnt16.04 install a TightVNC, in Ubnt18.04 install Remmina VNC viewer. The connection is ok but the X-Window desktop on the viwer side is different with the TightVNC serverside. It functions somehow well except some weird things. The port uses 5901 and VNC protocol. 

Actually Ubnt has already had its own common service for this application (similar not exactly the same). In Ubnt16.04, start the built-in Gnome "Desktop Sharing" service. On Ubnt18.04 client side, install a Ubnt Gnome "Remote Desktop Viewer". Then can connect to the Ubnt16.04 "Desktop Sharing". This software uses port 5900 and VNC protocol. Remmina can connect to the server too. 

In Ubnt18.04, you can go Settings ---> Sharing to turn on/off the "Screen Sharing" to turn on/off the "Desktop Sharing" server.

But NOTE, this "Desktop Sharing"-"Remote Desktop Viewer" solution is different with the TightVNC-Remmina solution. The 1st one, when the client side control the keyboard and mouse, these operations all show up in the server screen, because this service shares the Desktop of server side with the remote viewer side. If use the TightVNC, which uses 5901 port, the viewer side has an totally independent X-Window and the server side can not see the operations.

Sept 24, 2019
Besides web100/web10g, M-Lab has another speed test server : https://github.com/m-lab/ndt-server.

Should use this command to expose more ports to host machine:
sudo docker run --network=bridge                \
	   --publish 443:4443		\
	   --publish 3010:3010		\
	   --publish 3001:3001		\
	   --publish 3002:3002		\
	   --publish 9090:9990		\
           --volume `pwd`/certs:/certs:ro  \
           --volume `pwd`/datadir:/datadir \
           --read-only                     \
           --user `id -u`:`id -g`          \
           --cap-drop=all                  \
	   --rm				\
           ndt-server                      \
           -cert ./certs/cert.pem           \
           -key ./certs/key.pem             \
           -datadir ./datadir              \
	   -ndt7_addr :4443

Sept 23, 2019
Use the patch estats-nl-0.3-3.4.patch. Still has the TOTAL_NUM_VARS undefined error. But this error comes from web100-util.c but we are actually interested in the web10g. So just ignore this error and compiles successfully.

fakewww and w10gsrv must be run at the SAME TIME. Use the client to visit 127.0.0.1:7123 and start test. But looks Chrome doesn't work and only Firefox works.

Sept 19, 2019
https://github.com/redsox2002/ndt : Network Diagnostic Tools in Ubuntu14.04. In Ubuntu16.04(Kernel 4.13) the Linux3.4.1 kernel can not be compiled by the fakeroot make-kpkg --initrd --apend-to-version=-web10g kernel_image kernel_headers command. Install a Ubuntu14.04 VMware machine it compiles successfully according to https://github.com/redsox2002/ndt.

During bootup, hold "Shift" key to show the Grup menu and choose 3.4.1 kernel. After booting into the web10g kernel activate the estats modules by typing 'sudo modprobe tcp_estats_nl'.

Sept 16, 219
To use FTRACE, not only make kernel_menuconfig to turn on Kernel hacking ---> Tracers, but also, in make menuconfig, turn on Global build settings ---> Kernel build options ---> Compile the kernel with tracing support. If need more tracers, configure the kernel and add them in the kernel hacking:

root@UserDevice:~# cat sys/kernel/debug/tracing/available_tracers 
function_graph wakeup_dl wakeup_rt wakeup irqsoff function nop


For function graph:
#!/bin/sh
 
dir=/sys/kernel/debug/tracing
 
#### sysctl kernel.ftrace_enabled=1
echo function_graph > ${dir}/current_tracer
echo 1 > ${dir}/tracing_on
sleep 1
echo 0 > ${dir}/tracing_on
less ${dir}/trace

trace:
	This file holds the output of the trace in a human
	readable format (described below). Note, tracing is temporarily
	disabled while this file is being read (opened). // so you can NOT see real-time trace!!!

trace_pipe:
	The output is the same as the "trace" file but this
	file is meant to be streamed with live tracing.
	Reads from this file will block until new data is
	retrieved.  Unlike the "trace" file, this file is a
	consumer. This means reading from this file causes
	sequential reads to display more current data. Once
	data is read from this file, it is consumed, and
	will not be read again with a sequential read. The
	"trace" file is static, and if the tracer is not
	adding more data, it will display the same
	information every time it is read. This file will not
	disable tracing while being read.

trace_marker:
	This is a very useful file for synchronizing user space
	with events happening in the kernel. Writing strings into
	this file will be written into the ftrace buffer. // so the user space info is wwriten into trace file.

trace_clock:
	Whenever an event is recorded into the ring buffer, a
	"timestamp" is added. This stamp comes from a specified
	clock. By default, ftrace uses the "local" clock. This
	clock is very fast and strictly per cpu, but on some
	systems it may not be monotonic with respect to other
	CPUs. In other words, the local clocks may not be in sync
	with local clocks on other CPUs. global: This clock is in sync with all CPUs but may
	  	  be a bit slower than the local clock.

As function tracing can induce a much larger latency, but without
seeing what happens within the latency it is hard to know what
caused it. There is a middle ground, and that is with enabling
events.

Note, not all sections are traced. They may be prevented by either
a notrace, or blocked another way and all inline functions are not
traced. Check the "available_filter_functions" file to see what functions
can be traced. In G5 :
root@UserDevice:~# cat sys/kernel/debug/tracing/available_filter_functions | uniq | wc -l
20807	// totally 20k functions can be traced.
root@UserDevice:~# cat sys/kernel/debug/tracing/available_events | uniq | wc -l
1350	// 1350 events 

A section called "__mcount_loc" is created that holds
references to all the mcount/fentry call sites in the .text section.
The recordmcount program re-links this section back into the
original object. The final linking stage of the kernel will add all these
references into a single table.

On boot up, before SMP is initialized, the dynamic ftrace code
scans this table and updates all the locations into nops. It
also records the locations, which are added to the
available_filter_functions list.  Modules are processed as they
are loaded and before they are executed.  When a module is
unloaded, it also removes its functions from the ftrace function
list. This is automatic in the module unload code, and the
module author does not need to worry about it.

One special side-effect to the recording of the functions being
traced is that we can now selectively choose which functions we
wish to trace and which ones we want the mcount calls to remain
as nops.


ftrace_enabled
--------------

Note, the proc sysctl ftrace_enable is a big on/off switch for the
function tracer. By default it is enabled (when function tracing is
enabled in the kernel). If it is disabled, all function tracing is
disabled. This includes not only the function tracers for ftrace, but
also for any other uses (perf, kprobes, stack tracing, profiling, etc).

Please disable this with care.

This can be disable (and enabled) with:

  sysctl kernel.ftrace_enabled=0
  sysctl kernel.ftrace_enabled=1

 or

  echo 0 > /proc/sys/kernel/ftrace_enabled
  echo 1 > /proc/sys/kernel/ftrace_enabled

Sept 13, 2019
Disable the external watchdog:
/etc/init.d/alldone:    ############## /bin/mhx -wdt 750
And :
root@UserDevice:~# cat etc/init.d/softirq-wdt 
#!/bin/sh /etc/rc.common
#
# Copyright (C) 2019 Microhard Systems Inc.
#
# launches watchdog for monitoring stalled softirq (RCU in particular)

START=00
STOP=00
[ "$IPKG_INSTROOT" ] && return
#############boot() { /bin/mhx -wdt-dryrun 750; }
boot() { :; }

How to disable the admin password check:
In /usr/lib/webif/webif.sh, disable this:
## admin passwork check 
return // directly return here. 

Sept 11, 2019
OpenWrTARGET_LDFLAGS := -L$(STAGING_DIR)/usr/lib -Lbuild_dir/target-mipsel_24kc_musl/gettext-0.19.6/gettext-runtime/intl/.libs/ $(TARGET_LDFLAGS)  // add -L option to ld
LIBS += -lintl	// add -l option to ld
t buildroot:

Build oprofile package in G5:
1. make kernel_menuconfig : General Setup->Profiling support and Oprofile System Profiling set to 'M'. Then rebuild kernel by make target/linux/clean|compile. Note, this rebuild of kernel doesn't really build oprofile.o and any source code to .o. 

2. Modify package/kernel/linux/modules/other.mk, add

 $(eval $(call KernelPackage,mmc))
 
+define KernelPackage/oprofile
+  SUBMENU:=$(OTHER_MENU)
+  TITLE:=OProfile profiling support
+  KCONFIG:=CONFIG_OPROFILE
+  FILES:=$(LINUX_DIR)/arch/$(LINUX_KARCH)/oprofile/oprofile.ko
+  DEPENDS:=@KERNEL_PROFILING
+endef
+
+define KernelPackage/oprofile/description
+  Kernel module for support for oprofile system profiling.
+endef
+
+$(eval $(call KernelPackage,oprofile))
+

Looks like this part can generate oprofile.o and .ko.

3. make menuconfig : make sure binutil is selected. Oprofile needs these tools in it like nm, as, objdump, etc. Usually this is already selected. 
3.1 Go to  Global build settings > Kernel build options, select "Compile the kernel with profiling enabled"
3.2 Go to Kernel modules > Other modules, select "kmod-oprofile "
3.3 Go to Development, select oprofile and oprofile-utils. Now using 0.9.7.

4. When compiling, it complains:
In file included from opagent.c:68:0:
/home/jli/project/work/g5/7621-new-master/staging_dir/target-mipsel_24kc_musl/usr/include/bfd.h:35:2: error: #error config.h must be included before this header
 #error config.h must be included before this header

So edit this file, defile PACKAGE macro:

// MHXJL Sept 11, 2019 to make oprofile
#ifndef PACKAGE
#define PACKAGE "oProfile0.9.7"
#endif

#if !defined PACKAGE && !defined PACKAGE_VERSION
#error config.h must be included before this header
#endif

5. Build success and binaries are installed:

jli@DENG-JEFFL:~/project/work/g5/7621-new-master$ ll build_dir/target-mipsel_24kc_musl/root-ramips-BulletplusAC/usr/bin/opr*
-rwxr-xr-x 1 jli jli 258587 Sep 11 16:00 build_dir/target-mipsel_24kc_musl/root-ramips-BulletplusAC/usr/bin/opreport*
-rwxr-xr-x 1 jli jli  58131 Sep 11 16:00 build_dir/target-mipsel_24kc_musl/root-ramips-BulletplusAC/usr/bin/oprofiled*
jli@DENG-JEFFL:~/project/work/g5/7621-new-master$ ll build_dir/target-mipsel_24kc_musl/root-ramips-BulletplusAC/lib/modules/4.14.137/oprofile.ko 
-rw-r--r-- 1 jli jli 43236 Sep 11 16:00 build_dir/target-mipsel_24kc_musl/root-ramips-BulletplusAC/lib/modules/4.14.137/oprofile.ko
jli@DENG-JEFFL:~/project/work/g5/7621-new-master$ 

6. But couldn't run on the G5 unit:
root@UserDevice:~# opcontrol --start
Using default event: INSTRUCTIONS:100000:0:1:1
Using 2.6+ OProfile kernel interface.
Failed to open profile device: Out of memory
Couldn't start oprofiled.
Check the log file "/var/lib/oprofile/samples/oprofiled.log" and kernel syslog

Maybe this is oProfile0.9.7 is too old. Should try 1.3.0 that was released 2018.

7. Try oprofile-1.3.0. It doesn't need to modify the ./staging_dir/target-mipsel_24kc_musl/usr/include/bfd.h file to add PACKAGE definition. And it runs on G5.

root@UserDevice:~# operf --session-dir /tmp --separate-cpu --system-wide -V record
run for a while and the ^+C
root@UserDevice:~# opreport --session-dir /tmp	// show results.

How to profile the kernel:
1. On host side : scp build_dir/target-mipsel_24kc_musl/linux-ramips_mt7621/linux-4.14.137/vmlinux root@192.168.168.3:/tmp/.
2. Run on the target:

root@UserDevice:~# operf --system-wide --vmlinux=/tmp/vmlinux --session-dir /tmp -V debug
==MHX 1.1(__get_cpu_type)
==MHX 1.2(__get_cpu_type)machine=mips
==MHX 2.0(_get_mips_cpu_type)cpu_model=MIPS 1004Kc V2.15
==MHX 2.1(_get_mips_cpu_type) op_name=mips/1004K
Using samples dir /tmp/samples
==MHX 1.1(__get_cpu_type)
==MHX 1.2(__get_cpu_type)machine=mips
==MHX 2.0(_get_mips_cpu_type)cpu_model=MIPS 1004Kc V2.15
==MHX 2.1(_get_mips_cpu_type) op_name=mips/1004K
Final event code is 1
Forking read pid
operf: Press Ctl-c or 'kill -SIGINT 3881' to stop profiling
going into waitpid on operf record process 3887
Successfully read header info for sample data 
Converting operf data to oprofile sample data format
sample type is 43
operf: Profiler started
^Cin _handle_sigint
Read 1 of sample data pipe returned with Interrupted system call
in op_sig_stop
Caught ctrl-C. Killing operf-record process . . .
operf recording finished.
Total bytes recorded from perf events: 125408
operf-record process returned OK
operf_read: Total bytes received from operf_record process: 125192
Calling _do_jitdump_convert
start time/end time is 1568253087/1568253107
opjitconv: Non-fatal error trying to find JIT dump files in /tmp/.oprofile/jitdump/: No such file or 
directory
opjitconv: Ending with rc = 1. This code is usually OK, but can be useful for debugging purposes.
JIT dump processing complete.
operf-read process returned OK

Profiling done.
root@UserDevice:~# opreport --session-dir /tmp --symbols
warning: /nf_conntrack_ipv4 could not be found.
CPU: MIPS 74K, speed 876 MHz (estimated)
Counted INSTRUCTIONS events (1-0 Instructions graduated) with a unit mask of 0x00 (No unit mask) coun
t 100000
samples  %        image name               app name                 symbol name
49       44.1441  dropbear                 dropbear                 /usr/sbin/dropbear
12       10.8108  libc.so                  operf                    /lib/libc.so
4         3.6036  busybox                  mcmscript                /bin/busybox
3         2.7027  libc.so                  dropbear                 /lib/libc.so
3         2.7027  vmlinux                  operf                    mutex_unlock
2         1.8018  libstdc++.so.6.0.21      operf                    /usr/lib/libstdc++.so.6.0.21
2         1.8018  operf                    operf                    /usr/bin/operf
2         1.8018  vmlinux                  dropbear                 _raw_spin_unlock_irqrestore
2         1.8018  vmlinux                  operf                    _raw_spin_unlock_irqrestore
1         0.9009  nf_conntrack_ipv4        dropbear                 /nf_conntrack_ipv4
1         0.9009  vmlinux                  busybox                  __alloc_fd
1         0.9009  vmlinux                  busybox                  _raw_spin_lock
1         0.9009  vmlinux                  busybox                  copy_fd_bitmaps
1         0.9009  vmlinux                  busybox                  filemap_map_pages
1         0.9009  vmlinux                  busybox                  smp_call_function_many
1         0.9009  vmlinux                  busybox                  tty_write
1         0.9009  vmlinux                  busybox                  unmap_page_range
1         0.9009  vmlinux                  cut                      __slab_free.isra.17
1         0.9009  vmlinux                  cut                      _raw_spin_unlock_irqrestore
1         0.9009  vmlinux                  cut                      handle_mm_fault
1         0.9009  vmlinux                  dropbear                 __dev_queue_xmit
1         0.9009  vmlinux                  dropbear                 dev_hard_start_xmit
1         0.9009  vmlinux                  dropbear                 do_sys_open
1         0.9009  vmlinux                  dropbear                 sch_direct_xmit
1         0.9009  vmlinux                  dropbear                 task_work_run
1         0.9009  vmlinux                  grep                     blast_icache32
1         0.9009  vmlinux                  grep                     filemap_map_pages
1         0.9009  vmlinux                  grep                     perf_event_comm_output
1         0.9009  vmlinux                  hostapd                  ktime_get_ts64
1         0.9009  vmlinux                  hostapd                  poll_select_set_timeout
1         0.9009  vmlinux                  hostapd                  unix_dgram_poll
1         0.9009  vmlinux                  logread                  alloc_set_pte
1         0.9009  vmlinux                  operf                    _raw_spin_lock
1         0.9009  vmlinux                  operf                    clear_page
1         0.9009  vmlinux                  operf                    number
1         0.9009  vmlinux                  operf                    path_openat
1         0.9009  vmlinux                  operf                    task_work_add
1         0.9009  vmlinux                  operf                    terminate_walk
1         0.9009  vmlinux                  operf                    vfs_read
1         0.9009  vmlinux                  operf                    vsnprintf
1         0.9009  vmlinux                  u8:1                     kfree
root@UserDevice:~# 


NOTE: looks like the oprofile.ko is NOT needed!!!.


Sept 9, 2019
perf can run on G5 but failed:
root@UserDevice:~# perf top
perf_event_open(..., PERF_FLAG_FD_CLOEXEC) failed with unexpected error 89 (Function not implemented)
perf_event_open(..., 0) failed unexpectedly with error 89 (Function not implemented)
Error:
The sys_perf_event_open() syscall returned with 89 (Function not implemented) for event (cycles).
/bin/dmesg may provide additional information.
No CONFIG_PERF_EVENTS=y kernel support configured?
root@UserDevice:~# 

Kernel already turned CONFIG_PERF_EVENTS=y. Don't know why. Build with kernel 4.9 same errors.

Sept 5, 2019
New kernel branch mt7621_pkg_br_k4_14_137 [origin/mt7621_pkg_br_k4_14_137] has been branched and developed for about 3 weeks. During this time master has a lot of commits. Now it's time to grab maste's change to the mt7621_pkg_br_k4_14_137. 
jli@DENG-JEFFL:~/project/work/g5/7621-pure-branch/package$ git merge origin/master   // curent branch is updated to origin/mt7621_pkg_br_k4_14_137.

This will fetch master's change to overwrite local files. After the command, some files are green, meaning successfully updated by origin/master. Some are red, meanig conflict. Manually modify the red files, keep the low part (master part) to solve conflicts. Local branch changes are kept not damaged by the master. That is because the change only HAPPENED in the branch and master side those specific files are not modified by master commit. For these files, eventhouth they're still different, the master side doesn't change them so they only keep the local branch files. This is what we wanted.

If you want to give up the merge, use git merge --abort

Sept 4, 2019
The new kernel-mac80211 doesn't use the CFG80211_INTERNAL_REGDB mechanism (net/wireless/db.txt as the database) in the master branch(kernel v4.9, mac80211-2017-01-31) is obsoleted. So when use "iw phy0 info" we see all 5G band have "no IR", meaning can not Initiate Radiation (transmission).

The new one uses package/firmware/wireless-regdb/ package to generate lib/firmware/regulatory.db as the database. "iw reg get/set" command can change regulatory domain dynamically. 

CRDA is another option for regulatory domain management.

Aug 28, 2019

// Kernel sysinfo.h
jli@DENG-JEFFL:~/project/work/g5/7621-pure-branch$ md5sum build_dir/target-mipsel_24kc_musl/linux-ramips_mt7621/linux-4.14.137/user_headers/include/linux/sysinfo.h
6f8882c542ddb6603b06a4eafcc17015  build_dir/target-mipsel_24kc_musl/linux-ramips_mt7621/linux-4.14.137/user_headers/include/linux/sysinfo.h

jli@DENG-JEFFL:~/project/work/g5/7621-pure-branch$ md5sum build_dir/target-mipsel_24kc_musl/linux-ramips_mt7621/linux-4.14.137/include/uapi/linux/sysinfo.h
6f8882c542ddb6603b06a4eafcc17015  build_dir/target-mipsel_24kc_musl/linux-ramips_mt7621/linux-4.14.137/include/uapi/linux/sysinfo.h

// toolchain sysinfo.h
jli@DENG-JEFFL:~/project/work/g5/7621-pure-branch$ md5sum /home/jli/project/work/g5/7621-pure-branch/staging_dir/toolchain-mipsel_24kc_gcc-5.5.0_musl/include/linux/sysinfo.h
6f8882c542ddb6603b06a4eafcc17015  /home/jli/project/work/g5/7621-pure-branch/staging_dir/toolchain-mipsel_24kc_gcc-5.5.0_musl/include/linux/sysinfo.h  // this is copied from kernel???

jli@DENG-JEFFL:~/project/work/g5/7621-pure-branch$ ll staging_dir/toolchain-mipsel_24kc_gcc-5.5.0_musl/include/sys/sysinfo.h
-rw-r--r-- 1 jli jli 634 Aug 28 10:32 staging_dir/toolchain-mipsel_24kc_gcc-5.5.0_musl/include/sys/sysinfo.h	// this is musl's own file.

==================================================================================================================================================================
Toolchain will unar kernel to ./build_dir/toolchain-mipsel_24kc_gcc-5.5.0_musl/linux-4.14.137/ when building toolchain. At this time, the kernel build has not started yet in directory build_dir/target-mipsel_24kc_musl/linux-ramips_mt7621. The kernel patches apply as well during the toolchain build. 


Aug 27,2019
Try GCC7 (old is GCC5) on G5 and GCC7 defaultly enabled a feature -Wimplicit-fallthrough. To disable that compilation feature in specific package, use :

--- a/package/libs/libjson-c/Makefile
+++ b/package/libs/libjson-c/Makefile
@@ -27,7 +27,7 @@ PKG_MAINTAINER:=Felix Fietkau <nbd at nbd.name>
 
 include $(INCLUDE_DIR)/package.mk
 
-TARGET_CFLAGS += $(FPIC)
+TARGET_CFLAGS += $(FPIC) -Wno-implicit-fallthrough

But the GCC7 doesn't help the redefination error for netifd:

/home/jli/project/work/g5/mtd7621-4-14-137/staging_dir/toolchain-mipsel_24kc_gcc-7.2.0_musl/include/linux/if.h:192:8: error: redefinition of 'struct ifmap'
 struct ifmap {
        ^~~~~
/home/jli/project/work/g5/mtd7621-4-14-137/staging_dir/toolchain-mipsel_24kc_gcc-7.2.0_musl/include/net/if.h:64:8: note: originally defined here
 struct ifmap {
        ^~~~~

TO compile netifd, need to change vi /home/jli/project/work/g5/mtd7621-4-14-137/staging_dir/toolchain-mipsel_24kc_gcc-5.5.0_musl/include/linux/if.h  file and remove all __UAPI_DEF_* defines.


Aug 26, 2019
Some header files shared between Kernel and toolchain:
[Jeff@DENG0080-2 mt7621-4-14-137]$ find build_dir/ -name vtpm_proxy.h | xargs ls -al
-rw-r--r-- 1 Jeff Jeff 1734 Aug  6 11:05 build_dir/target-mipsel_24kc_musl/linux-ramips_mt7621/linux-4.14.137/include/uapi/linux/vtpm_proxy.h
-rw-r--r-- 1 Jeff Jeff 1719 Aug 26 11:52 build_dir/target-mipsel_24kc_musl/linux-ramips_mt7621/linux-4.14.137/user_headers/include/linux/vtpm_proxy.h
-rw-r--r-- 1 Jeff Jeff 1734 Aug  6 11:05 build_dir/toolchain-mipsel_24kc_gcc-5.5.0_musl/linux-4.14.137/include/uapi/linux/vtpm_proxy.h
-rw-r--r-- 1 Jeff Jeff 1719 Aug 26 11:41 build_dir/toolchain-mipsel_24kc_gcc-5.5.0_musl/linux-dev/include/linux/vtpm_proxy.h


Aug 22, 2019
Interrupt handler:
No guarantee in which address space the system will be in when the interrupt occurs : can't transfer data to and from user space.
Interrupt handler executin is manged by CPU, not the scheduler. Handlers can't run actions that may sleep, because there is nothing to resume their execution. In particular, need to allocate memory with GFP_ATOMIC. 
Interrupt handlers are run with all interrupts disabled on the local CPU. Therefore, they have to complete their job quickly enough, to avoiding blocking interrupts for too long.

Aug 21, 2019
With new kernel4.14.137, make menuconfig,  Kernel modules > Wireless Drivers doesn't show kmod-ath10k option. The mac80211 package is good for sure.

Run make kernel_menuconfig, Bus options (PCI, PCMCIA, EISA, ISA, TC), enable support for PCI controller. Recompile kernel, and rm -rf tmp to let it recollect package information. When make menuconfig, the Kernel modules > Wireless Drivers shows up kmod-ath10k option now. Looks like the make menuconfig will automatically probe and collect information from make kernel_menuconfig and decide what packages can be show in the make menuconfig.

Aug 19, 2019
Prepare a clean branch mt7621_br_k4_14_137 for kernel upgrade cooperation.
1. mmc : deselect Kernel modules > Other modules > kmod-sdhci and sdhci-mt7620.
2. mac80211 : deselect Kernel modules > Wireless Drivers > kmod-ath and kmod-mac80211 and kmod-cfg80211
3. soipkmd, soip : deselected for soip_listen.c, need to comment sock->ops->accept(sock, new_sock, O_NONBLOCK); line. deselect Kernel modules > Other modules > kmod-soipkm. 
4. xtables-addons : upgraded to master branch package. 
5. strongswan : no change. OK
6. package/libs/libnl-tiny/src/include/netlink/genl/family.h. GENL_ID_GENERATE always defined to 0.
7. iptables : use 1.6.2 from openwrt-18.06 branch. And 
scp build_dir/target-mipsel_24kc_musl/linux-ramips_mt7621/iptables-1.6.2/extensions/libxt_FLOWOFFLOAD.so root@192.168.168.1://usr/lib/iptables/. 
scp build_dir/target-mipsel_24kc_musl/linux-ramips_mt7621/linux-4.14.137/net/netfilter/nf_flow_table*.ko root@192.168.168.1://lib/modules/4.14.137/. 
scp build_dir/target-mipsel_24kc_musl/linux-ramips_mt7621/linux-4.14.137/net/netfilter/xt_FLOWOFFLOAD.ko  root@192.168.168.1://lib/modules/4.14.137/.
On target unit, run: 
root@UserDevice:~# cat ins.sh                                                                                 
#!/bin/sh                                                                                                     
                                                                                                              
for i in $(ls lib/modules/4.14.137/*.ko); do                                                                  
modprobe $i                                                                                                   
done  
       
And
iptables -I FORWARD 2 -m conntrack --ctstate RELATED,ESTABLISHED -m comment --comment "!fw3" -i br-wan2 -j FLOWOFFLOAD --hw

Aug 16, 2019
Tried to turn the tool "perf" but looks like the MIPS cpu doesn't support perf:
jli@DENG-JEFFL:~/project/work/g5/mt7621_k4_9$ find  build_dir/target-mipsel_24kc_musl/linux-ramips_mt7621/linux-4.14.137/arch/ -name perf
build_dir/target-mipsel_24kc_musl/linux-ramips_mt7621/linux-4.14.137/arch/powerpc/perf
build_dir/target-mipsel_24kc_musl/linux-ramips_mt7621/linux-4.14.137/arch/metag/kernel/perf

Try another tool oprofile:
jli@DENG-JEFFL:~/project/work/g5/mt7621_k4_9$ cat package/devel/oprofile/Makefile 
#
# Copyright (C) 2009-2010 OpenWrt.org
#
# This is free software, licensed under the GNU General Public License v2.
# See /LICENSE for more information.
#

include $(TOPDIR)/rules.mk

PKG_NAME:=oprofile
PKG_VERSION:=0.9.7
PKG_RELEASE:=1

PKG_SOURCE:=$(PKG_NAME)-$(PKG_VERSION).tar.gz
PKG_SOURCE_URL:=@SF/oprofile/
PKG_MD5SUM:=8b5d1d9b65f84420bcc3234777ad3be3

Still doen't compile complaining "configure: error: bfd library not found".

Aug 15, 2019
Compile iptables1.8.3 with KernelV4.14.137, G5 environment. Always complains the "struct ethhdr" redefined in both kernel and musl libc library. Just for hacking:
vi /home/jli/project/work/g5/mt7621_k4_9/build_dir/target-mipsel_24kc_musl/linux-ramips_mt7621/linux-4.14.137/user_headers/include/linux/if_ether.h , remove its "struct ethhdr " definition and the iptables1.8.2 package compiles successfully. 

Test still have the flow_offload_add() kernel oops. And this is caused by some .ko is not inserted. Use this bash to insert all .ko modules solved this problem:. Using iptables1.8.3.
root@UserDevice:~# cat ins.sh 
#!/bin/sh
for i in $(ls lib/modules/4.14.137/*.ko); do
modprobe $i
done
root@UserDevice:~# 

Without offload : iperf TCP (100M NIC, PC1--->G5-1), the G5-2 as a gateway has:
CPU:  0.2% usr  0.7% sys  0.0% nic 65.4% idle  0.0% io  0.0% irq 33.5% sirq
With iptables -I FORWARD 2 -m conntrack --ctstate RELATED,ESTABLISHED -m comment --comment "!fw3" -j FLOWOFFLOAD (sw offload)
CPU:  0.0% usr  0.4% sys  0.0% nic 81.3% idle  0.0% io  0.0% irq 18.2% sirq
With iptables -I FORWARD 2 -m conntrack --ctstate RELATED,ESTABLISHED -m comment --comment "!fw3" -j FLOWOFFLOAD --hw (hw offload)
CPU:  0.0% usr  0.2% sys  0.0% nic 99.7% idle  0.0% io  0.0% irq  0.0% sirq

When test UDP iperf, (100M NIC, push 200Mbps, PC1--->G5-1), the G5-2 as a gateway has:
Without offload
CPU:  0.0% usr  0.0% sys  0.0% nic 85.6% idle  0.0% io  0.0% irq 14.3% sirq
With iptables -I FORWARD 2 -m conntrack --ctstate RELATED,ESTABLISHED -m comment --comment "!fw3" -j FLOWOFFLOAD (sw offload)
CPU:  0.0% usr  0.4% sys  0.0% nic 89.8% idle  0.0% io  0.0% irq  9.7% sirq
With iptables -I FORWARD 2 -m conntrack --ctstate RELATED,ESTABLISHED -m comment --comment "!fw3" -j FLOWOFFLOAD --hw (hw offload)
CPU:  0.7% usr  0.2% sys  0.0% nic 89.4% idle  0.0% io  0.0% irq  9.5% sirq. Sometimes 99.7% idle and 0.0% sirq not stable.


Aug 14, 2019
Linux4.14.63 has the mt7621 eth driver in target/linux/ramips/files-4.14/drivers/net/ethernet/mtk/
Linux4.14.137 has it in target/linux/ramips/files-4.14/drivers/net/ethernet/mediatek/. Why the dir is changed?!!!

Linux4.14.137 has a patch target/linux/ramips/patches-4.14/0043-spi-add-mt7621-support.patch. This patch doesn't work for G5 board and SPI driver failure. Have to use Linux4.14.63's target/linux/ramips/patches-4.14/0043-spi-add-mt7621-support.patch. Really don't understand why it is not backward compatible.

Aug 13, 2019
Use v4.14.137 kernel in G5 and .dtb and vmlinux are all generated successfully. But the patch-dtb fails and complains "DTB marker not found". But v4.14.63 works fine. Check v4.14.63 has this patch that v4.14.137 doesn't have:
jli@DENG-JEFFL:~/project/openwrt/openwrt-18.06/openwrt$ find target/linux/ -type f | xargs grep OWRTDTB
target/linux/ramips/patches-4.14/0100-prom_fixes.patch:+	.ascii  "OWRTDTB:"
target/linux/generic/pending-4.14/332-arc-add-OWRTDTB-section.patch:Subject: openwrt: arc - add OWRTDTB section
target/linux/generic/pending-4.14/332-arc-add-OWRTDTB-section.patch:""patch-dtb" searches for ASCII "OWRTDTB:" strign and copies external

This places a place holder in vmlinux binary. And the external dtb will be appended to this table. Applied this patch from .63 to .137 and compile successes. Thie raises a question : the v4.14.137 comes from 

Aug 12, 2019
package/network/utils/nftables/ is nftables user land config app. nft app has dependency on package/libs/libnftnl. 

Aug 9, 2019
Use -j FLOWOFFLOAD in G5-v4.14:

scp build_dir/target-mipsel_24kc_musl/linux-ramips_mt7621/linux-4.14.63/net/netfilter/xt_FLOWOFFLOAD.ko root@192.168.168.1:/lib/modules/4.14.63/.

scp build_dir/target-mipsel_24kc_musl/linux-ramips_mt7621/linux-4.14.63/net/netfilter/nf_flow_table*.ko root@192.168.168.1:/lib/modules/4.14.63/.
nf_flow_table_hw.ko                                                                                     100% 5872   159.9KB/s   00:00    
nf_flow_table_inet.ko                                                                                   100% 2908   141.2KB/s   00:00    
nf_flow_table.ko                                                                                        100%   21KB 121.9KB/s   00:00 
scp build_dir/target-mipsel_24kc_musl/linux-ramips_mt7621/iptables-1.6.2/ipkg-install/usr/lib/iptables/libxt_FLOWOFFLOAD.so root@192.168.168.1://usr/lib/iptables/.

iptables -I FORWARD 2 -m conntrack --ctstate RELATED,ESTABLISHED -m comment --comment "!fw3" -j FLOWOFFLOAD --hw

Aug 8, 2019

G5-1(br-lan=10.10.12.100) ---------- G5-2.br-wan1(10.10.12.1) & G5-2.br-lan(192.168.168.1) ---PC1(192.168.168.101).

PC1 : route ADD 10.10.12.0 MASK 255.255.255.0 192.168.168.1 METRIC 3. 
G5-2 : Add Port Forwarding rules so that the iperf TCP/UDP can initiate from G5-1. src=WAN1,ExtPort=5001,InternalIP=192.168.168.101,InternalPort=5001.

Download Iperf 
1. TCP t/p. G5-1 : iperf -c 10.10.12.1 -i 2 -t 60. TCP traffic pushed to G5-2.br-wan1, and then port forwarded to PC1. PC1 runs iperf -s. T/P=453Mbps

2. UDP t/p : PC1 runs iperf -s -u.
G5-1 : iperf -c 10.10.12.1 -i 2 -t 60 -u -b 800M. T/P=252Mbps.
G5-1 : iperf -c 10.10.12.1 -i 2 -t 60 -u -b 500M. T/P=253Mbps.
G5-1 : iperf -c 10.10.12.1 -i 2 -t 60 -u -b 300M. T/P=252Mbps.

Upload Iperf:
1. TCP t/p. G5-1 runs iperf -s
PC1: ipeprf.exe -c 10.10.12.100 -i 2 -t 60. T/P=320Mbps.

2. UDP t/p : G5-1 runs iperf -s -u
PC1: ipeprf.exe -c 10.10.12.100 -i 2 -t 60 -u -b 800M. On G5-1 T/P=230Mbps.
PC1: ipeprf.exe -c 10.10.12.100 -i 2 -t 60 -u -b 500M. On G5-1 T/P=260Mbps.
PC1: ipeprf.exe -c 10.10.12.100 -i 2 -t 60 -u -b 300M. On G5-1 T/P=250Mbps.


Aug 7, 2019
G5 is upgraded to v4.14 kernel from v4.9. Use this command line to overwrite the bootarg:
root@UserDevice:~# cat proc/cmdline 
console=ttyS0,115200 root=31:6 rootfstype=squashfs,jffs2 noinitrd init=/sbin/init mtdparts=spi0.0:512k(u-boot)ro,64k(u-boot-env),192k(pro-zone),64k(u-boot-env-bak),192k(unused),2M(kernel),25344k(rootfs),4352k(mhs-data),2M(kernel-bak),25344k(rootfs-bak),5376k(NVM-zone)
[NOTE:] Can NOT have any white space in the mtdparts part!!!Otherwise this cmdline can not be parsed.


Aug 2, 2019
mt7621 HNAT investigation. G5 uses Linux4.9. Compared with OpenWrt18.06(Linux4.14), 
1. net/netfilter/ : OpenWrt18.06 has nf_flow_table_hw.c, nft_flow_offload.c, xt_FLOWOFFLOAD.c, etc. These look like the glue to H/W NAT.
2. drivers/net/ethernet/mtk/ : OpenWrt18.06 has mtk_offload.c to control Eth registers.

The first try is to upgrade G5's current 4.9.58 kernel to 4.14.63 kernel. Need to change and add some files below:

jli@DENG-JEFFL:~/project/work/g5/mt7621_k4_9$ git diff
diff --git a/include/kernel-version.mk b/include/kernel-version.mk
index 7d62edc..211863e 100644
--- a/include/kernel-version.mk
+++ b/include/kernel-version.mk
@@ -6,11 +6,13 @@ LINUX_VERSION-3.18 = .71
 LINUX_VERSION-4.4 = .93
 LINUX_VERSION-4.9 = .58
 #LINUX_VERSION-4.9 = .53
+LINUX_VERSION-4.14 = .63
 
 LINUX_KERNEL_HASH-3.18.71 = 5abc9778ad44ce02ed6c8ab52ece8a21c6d20d21f6ed8a19287b4a38a50c1240
 LINUX_KERNEL_HASH-4.4.93 = ed349314f16e78a6571b5f8884f6452782aef6c26b81bcc7ccdac44ecd917c36
 LINUX_KERNEL_HASH-4.9.58 = 748f12a28689644b6a9102c67f8fa7938ca73823a949ba6f65024aecf2f221a7
 #LINUX_KERNEL_HASH-4.9.53 = 32915a33bb0b993b779257748f89f31418992edba53acbe1160cb0f8ef3cb324
+LINUX_KERNEL_HASH-4.14.63 = cd2e52f0e7ba861afa91cf487b2f45e5174115870f256a1d65996647b7bcc6d3
 
 ifdef KERNEL_PATCHVER
   LINUX_VERSION:=$(KERNEL_PATCHVER)$(strip $(LINUX_VERSION-$(KERNEL_PATCHVER)))
diff --git a/target/linux/ramips/Makefile b/target/linux/ramips/Makefile
index 9bcffc1..887b590 100644
--- a/target/linux/ramips/Makefile
+++ b/target/linux/ramips/Makefile
@@ -13,7 +13,7 @@ SUBTARGETS:=mt7620 mt7621 mt76x8 rt288x rt305x rt3883
 FEATURES:=squashfs gpio
 MAINTAINER:=John Crispin <john@phrozen.org>
 
-KERNEL_PATCHVER:=4.9
+KERNEL_PATCHVER:=4.14
 
 define Target/Description
        Build firmware images for Ralink RT288x/RT3xxx based boards.
jli@DENG-JEFFL:~/project/work/g5/mt7621_k4_9$ git status 
On branch mt7621_hnat
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   include/kernel-version.mk
	modified:   target/linux/ramips/Makefile

Untracked files:
  (use "git add <file>..." to include in what will be committed)

	target/linux/generic/backport-4.14/
	target/linux/generic/config-4.14
	target/linux/generic/hack-4.14/
	target/linux/generic/pending-4.14/
	target/linux/ramips/files-4.14/
	target/linux/ramips/mt7621/config-4.14
	target/linux/ramips/patches-4.14/


FYI, I've backported the upstream flow offload code to Linux 4.14 in my staging tree. I've also written an extra patch that integrates it with iptables (so no dependency on nftables anymore).
You can test it by building my staging tree, enabling kmod-ipt-flow, and adding a rule to the FORWARD chain with -j FLOWOFFLOAD

Test the v4.14 kernel in G5 and it doesn't bootup:

[    2.361249] 4 CPUs re-calibrate udelay(lpj = 2924544)
[    2.367950] Crashlog allocated RAM at address 0x3f00000
[    2.373349] workingset: timestamp_bits=30 max_order=17 bucket_order=0
[    2.388201] squashfs: version 4.0 (2009/01/31) Phillip Lougher
[    2.394046] jffs2: version 2.2 (NAND) (SUMMARY) (LZMA) (RTIME) (CMODE_PRIORITY) (c) 2001-2006 Red H
at, Inc.
[    2.406318] random: fast init done
[    2.411159] bounce: pool size: 64 pages
[    2.415031] io scheduler noop registered
[    2.418855] io scheduler deadline registered (default)
[    2.425397] Serial: 8250/16550 driver, 3 ports, IRQ sharing disabled
[    2.433428] console [ttyS0] disabled
[    2.436983] 1e000c00.uartlite: ttyS0 at MMIO 0x1e000c00 (irq = 17, base_baud = 3125000) is a 16550A
[    0.000000] Linux version 4.14.63 (jli@DENG-JEFFL) (gcc version 5.5.0 (LEDE GCC 5.5.0 unknown)) #0 
SMP Fri Jul 26 21:37:04 2019
[    0.000000] SoC Type: MediaTek MT7621 ver:1 eco:3
[    0.000000] bootconsole [early0] enabled
[    0.000000] CPU0 revision is: 0001992f (MIPS 1004Kc)
[    0.000000] MIPS: machine is BulletAC
[    0.000000] Determined physical RAM map:
[    0.000000]  memory: 1c000000 @ 00000000 (usable)
[    0.000000]  memory: 04000000 @ 20000000 (usable)
[    0.000000] Initrd not found or empty - disabling initrd

It rebooted 3 times and the 2nd bank kicked in and booted from previous v4.9. 

Jul 31, 2019
PC1(168.100) ------ pMDDL2450(AP) ~~~~~~ pMDDL2450(STA,USB device mode) ---USB cable--- PC2(168.200). Do the multicast traffic T/P test.

PC1 ---> PC2
iperf -c 224.0.0.100 -u -b 10m -t 60 -i 2 : PC2 gets T/P=5.2Mbps. 
iperf -c 224.0.0.100 -u -b 100m -t 60 -i 2 : Overdrive the link, PC2 gets T/P=5.2Mbps the same. 

PC2 ---> PC1
iperf -c 224.0.0.100 -u -b 20m -t 60 -i 2 : PC1 gets T/P=19Mbps. 
iperf -c 224.0.0.100 -u -b 200m -t 60 -i 2 : Over load the link PC1 still gets T/P=17Mbps. 


Jul 30, 2019
In pMDDL:
root@UserDevice:~# cat sys/kernel/debug/ieee80211/phy0/hwflags 
0x9042b46
RX_INCLUDES_FCS
HOST_BCAST_PS_BUFFERING
SIGNAL_DBM
SPECTRUM_MGMT	// IEEE80211_HW_SPECTRUM_MGMT is set. But WLAN_ACTION_SPCT_TPC_REQ and WLAN_ACTION_SPCT_TPC_RPRT are never used. So the dynamic TPC functionality is not implemented.
AMPDU_AGGREGATION
PS_NULLFUNC_STACK
MFP_CAPABLE
REPORTS_TX_ACK_STATUS



Jul 2, 2019
On 3Pi board :
root@UserDevice:~# i2cdetect -y 0                                                                    
     0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f                                                  
00:          -- -- -- -- -- -- -- -- -- -- -- -- --                                                  
10: -- -- -- -- -- -- -- -- UU UU -- -- -- -- -- --                                                  
20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                                                  
30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                                                  
40: -- -- -- -- -- -- -- -- UU -- -- -- -- -- -- --                                                  
50: 50 51 -- -- -- -- -- -- -- -- -- -- -- -- -- --                                                  
60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                                                  
70: -- UU -- -- -- -- -- --                               


Jun 28， 2019
有多种bottom half的机制，例如：softirq、tasklet、workqueue或是直接创建一个kernel thread来执行bottom half（这在旧的kernel驱动中常见，现在，一个理智的driver厂商是不会这么做的）。本文主要讨论softirq机制。由于tasklet是基于softirq的，一个 tasket, 就象一个内核定时器, 在一个"softirq"的上下文中执行(以原子模式), 在使能硬件中断时执行异步任务的一个内核机制。一个 tasklet 可能和其他 tasklet 并发, 但是对它自己是严格地串行的 -- 同样的 tasklet 从不同时运行在超过一个处理器上。softirq不能动态分配，都是静态定义的。内核已经定义了若干种softirq number。workqueue运行在process context，而softirq和tasklet运行在interrupt context。

Jun 25, 2019
指针和引用的区别？
1. 指针是一个变量，只不过这个变量存储的是一个地址，指向内存的一个存储单元；而引用仅是个别名；
2. 引用使用时无需解引用(*)，指针需要解引用；
3. 引用只能在定义时被初始化一次，之后不可变；指针可变；
4. 引用没有 const，指针有 const；
5. 引用不能为空，指针可以为空；
6. “sizeof 引用”得到的是所指向的变量(对象)的大小，而“sizeof 指针”得到的是指针本身的大小；
7. 指针和引用的自增(++)运算意义不一样；
8. 指针可以有多级，但是引用只能是一级（int **p；合法 而 int &&a是不合法的）
9.从内存分配上看：程序为指针变量分配内存区域，而引用不需要分配内存区域。

问：new和malloc的区别？
1、malloc与free是C++/C语言的标准库函数，new/delete是C++的运算符。它们都可用于申请动态内存和释放内存。
2、对于非内部数据类型的对象而言，光用maloc/free无法满足动态对象的要求。对象在创建的同时要自动执行构造函数，对象在消亡之前要自动执行析构函数。
3、由于malloc/free是库函数而不是运算符，不在编译器控制权限之内，不能够把执行构造函数和析构函数的任务强加于malloc/free。因此C++语言需要一个能完成动态内存分配和初始化工作的运算符new，以一个能完成清理与释放内存工作的运算符delete。注意new/delete不是库函数。
4、C++程序经常要调用C函数，而C程序只能用malloc/free管理动态内存。
5、new可以认为是malloc加构造函数的执行。new出来的指针是直接带类型信息的。而malloc返回的都是void指针。

问：解释C++中静态函数和静态变量？
(1)类静态数据成员在编译时创建并初始化：在该类的任何对象建立之前就存在，不属于任何对象，而非静态类成员变量则是属于对象所有的。类静态数据成员只有一个拷贝，为所有此类的对象所共享。
(2)类静态成员函数属于整个类，不属于某个对象，由该类所有对象共享。
1、static 成员变量实现了同类对象间信息共享。
2、static 成员类外存储，求类大小，并不包含在内。
3、static 成员是命名空间属于类的全局变量，存储在 data 区的rw段。
4、static 成员只能类外初始化。
5、可以通过类名访问（无对象生成时亦可），也可以通过对象访问。

一个线程安全的函数可以同时被多个线程调用，即便是这些调用使用了共享数据。因为该共享数据的所有实例都被序列化了。
一个可重入的函数也可以同时被多个线程调用，但是只能是在每个调用使用自己的数据时。
在同一个作用域内，可以声明几个功能类似的同名函数，但是这些同名函数的形式参数（指参数的个数、类型或者顺序）必须不同。您不能仅通过返回类型的不同来重载函数。
对于像 int/char/long/int*/struct 等等简单数据类型，由于对象没有 destructor，所以用 delete 和 delete [] 是一样的！但是如果是C++ 对象数组就不同了！

JUn 20, 2019
QT Creator compile a android armv7(MotoG3) Qt sample project, link error:

/home/jli/Android/Sdk/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64/bin/clang++ -D__ANDROID_API__=16 -target armv7-none-linux-androideabi -gcc-toolchain /home/jli/Android/Sdk/ndk-bundle/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64 -fno-limit-debug-info -Wl,--exclude-libs,libgcc.a -Wl,--exclude-libs,libatomic.a -Wl,--exclude-libs,libunwind.a --sysroot=/home/jli/Android/Sdk/ndk-bundle/platforms/android-16/arch-arm/ -Wl,-soname,libmainwindow.so -Wl,-rpath=/home/jli/Qt/5.12.3/android_armv7/lib -Wl,--no-undefined -Wl,-z,noexecstack -shared -o libmainwindow.so colorswatch.o mainwindow.o toolbar.o main.o qrc_mainwindow.o moc_colorswatch.o moc_mainwindow.o moc_toolbar.o   -L/home/jli/Qt/5.12.3/android_armv7/lib -lQt5Widgets -L/opt/android/android-ndk-r18b/sources/cxx-stl/llvm-libc++/libs/armeabi-v7a -lQt5Gui -lQt5Core -lGLESv2  -L/home/jli/Android/Sdk/ndk-bundle/sources/cxx-stl/llvm-libc++/libs/armeabi-v7a /home/jli/Android/Sdk/ndk-bundle/sources/cxx-stl/llvm-libc++/libs/armeabi-v7a/libc++.so.16 -llog -lz -lm -ldl -lc
/home/jli/Android/Sdk/ndk-bundle/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/lib/gcc/arm-linux-androideabi/4.9.x/../../../../arm-linux-androideabi/bin/ld: error: cannot find -lc++
clang++: error: linker command failed with exit code 1 (use -v to see invocation)
make: *** [libmainwindow.so] Error 1
16:16:39: The process "/home/jli/Android/Sdk/ndk-bundle/prebuilt/linux-x86_64/bin/make" exited with code 2.
Error while building/deploying project mainwindow (kit: Android for armeabi-v7a (Clang Qt 5.12.3 for Android ARMv7))

In Projects, in the "Clang Qt5.12.3 for Android ARMv7" Build option, in "Build Steps"--->Make--->"Make arguments", input "-stdlib=libc++", then build success. App can be deployed to MotoG3 but crashed. Create a very simple Qt app still crashed in MotoG3. Looks this is not a root solution so don't use it.

I saw it's usling /home/jli/Android/Sdk/ndk-bundle/sources/cxx-stl/llvm-libc++/libs/armeabi-v7a/libc++.so.16 file and complaining missling libc++.so filie. So make a link:

jli@DENG-JEFFL:~/Android/Sdk/ndk-bundle/sources/cxx-stl/llvm-libc++/libs/x86$ ln -s libc++.so.16 libc++.so
jli@DENG-JEFFL:~/Android/Sdk/ndk-bundle/sources/cxx-stl/llvm-libc++/libs/x86$ ll
total 13320
drwxrwxr-x 2 jli jli    4096 Jun 21 11:47 ./
drwxrwxr-x 6 jli jli    4096 Jun 13 11:12 ../
-rw-rw-r-- 1 jli jli  426136 Jun 13 11:12 libandroid_support.a
-rw-rw-r-- 1 jli jli      29 Jun 13 11:12 libc++.a.27
-rw-rw-r-- 1 jli jli      29 Jun 13 11:12 libc++.a.28
-rw-rw-r-- 1 jli jli      29 Jun 13 11:12 libc++.a.29
-rw-rw-r-- 1 jli jli 1474980 Jun 13 11:12 libc++abi.a
-rwxrwxr-x 1 jli jli 5225820 Jun 13 11:12 libc++_shared.so*
lrwxrwxrwx 1 jli jli      12 Jun 21 11:47 libc++.so -> libc++.so.16

Then ld works fine and app works in the virtual cellphone.

For MotoG3, same thing in another directory:
jli@DENG-JEFFL:~/Android/Sdk/ndk-bundle/sources/cxx-stl/llvm-libc++/libs/armeabi-v7a$ cat libc++.so.16 
INPUT(-landroid_support -lunwind -latomic -lc++_shared)
jli@DENG-JEFFL:~/Android/Sdk/ndk-bundle/sources/cxx-stl/llvm-libc++/libs/armeabi-v7a$ ln -s libc++.so.16 libc++.so

In MotoG3, a basic Qt program needs 23M+ space. Compared with a simple code built by Android Studio, the app in my MotoG3 is only 784KB. Qt program is 25 times bigger than AndroidStudio native program!!!

Jun 20, 2019
Debug how as256 can survive a PLL reset in pMDDL.


<0>[   60.990000] ==MHX2.0(ath9k_hw_process_rxdesc_edma)rxsp->status11=0x00000003
<0>[   60.990000] ==MHX2.1(ath9k_hw_process_rxdesc_edma) Result rxs->rs_status=0x0
<0>[   60.990000] ==MHX0.1(ath9k_rx_skb_preprocess)
<0>[   60.990000] ==MHX0.2(ath9k_rx_skb_preprocess)
<0>[   60.990000] ==MHX0.3(ath9k_rx_skb_preprocess)
<0>[   60.990000] ==MHX0.4(ath9k_rx_skb_preprocess)
<0>[   60.990000] ==MHX0.5(ath9k_rx_skb_preprocess)
<0>[   60.990000] ==MHX0.6(ath9k_rx_skb_preprocess)
<0>[   60.990000] ==MHX0.7(ath9k_rx_skb_preprocess)
<0>[   60.990000] ==MHX1.0(ath9k_cmn_rx_accept) rx_stats->rs_status=0x0
<0>[   60.990000] ==MHX1.1(ath9k_cmn_rx_accept) rx_stats->rs_status=0x0 strip_mic=0, mic_error=0
<0>[   60.990000] ==MHX0.8(ath9k_rx_skb_preprocess)
<0>[   60.990000] ==MHX0.9(ath9k_rx_skb_preprocess)
<0>[   60.990000] ==MHX0.10(ath9k_rx_skb_preprocess)
<0>[   60.990000] ==MHX0.11(ath9k_rx_skb_preprocess)


<0>[   61.630000] ==MHX2.0(ath9k_hw_process_rxdesc_edma)rxsp->status11=0x00000003
<0>[   61.630000] ==MHX2.1(ath9k_hw_process_rxdesc_edma) Result rxs->rs_status=0x0
<0>[   61.630000] ==MHX0.1(ath9k_rx_skb_preprocess)
<0>[   61.630000] ==MHX0.2(ath9k_rx_skb_preprocess)
<0>[   61.630000] ==MHX0.3(ath9k_rx_skb_preprocess)
<0>[   61.630000] ==MHX0.4(ath9k_rx_skb_preprocess)
<0>[   61.630000] ==MHX0.5(ath9k_rx_skb_preprocess)
<0>[   61.630000] ==MHX0.6(ath9k_rx_skb_preprocess)
<0>[   61.630000] ==MHX0.7(ath9k_rx_skb_preprocess)
<0>[   61.630000] ==MHX1.0(ath9k_cmn_rx_accept) rx_stats->rs_status=0x0
<0>[   61.630000] ==MHX1.1(ath9k_cmn_rx_accept) rx_stats->rs_status=0x0 strip_mic=0, mic_error=0
<0>[   61.630000] ==MHX0.8(ath9k_rx_skb_preprocess)
<0>[   61.630000] ==MHX0.9(ath9k_rx_skb_preprocess)
<0>[   61.630000] ==MHX0.10(ath9k_rx_skb_preprocess)
<0>[   61.630000] ==MHX0.11(ath9k_rx_skb_preprocess)
<0>[   61.630000] ==MHX2.0(ath9k_hw_process_rxdesc_edma)rxsp->status11=0x00000003
<0>[   61.630000] ==MHX2.1(ath9k_hw_process_rxdesc_edma) Result rxs->rs_status=0x0
<0>[   61.630000] ==MHX0.1(ath9k_rx_skb_preprocess)
<0>[   61.630000] ==MHX0.2(ath9k_rx_skb_preprocess)
<0>[   61.630000] ==MHX0.3(ath9k_rx_skb_preprocess)
<0>[   61.630000] ==MHX0.4(ath9k_rx_skb_preprocess)
<0>[   61.630000] ==MHX0.5(ath9k_rx_skb_preprocess)
<0>[   61.630000] ==MHX0.6(ath9k_rx_skb_preprocess)
<0>[   61.630000] ==MHX0.7(ath9k_rx_skb_preprocess)
<0>[   61.630000] ==MHX1.0(ath9k_cmn_rx_accept) rx_stats->rs_status=0x0
<0>[   61.630000] ==MHX1.1(ath9k_cmn_rx_accept) rx_stats->rs_status=0x0 strip_mic=0, mic_error=0
<0>[   61.630000] ==MHX0.8(ath9k_rx_skb_preprocess)
<0>[   61.630000] ==MHX0.9(ath9k_rx_skb_preprocess)
<0>[   61.630000] ==MHX0.10(ath9k_rx_skb_preprocess)
<0>[   61.630000] ==MHX0.11(ath9k_rx_skb_preprocess)
<0>[   61.990000] ==MHX2.0(ath9k_hw_process_rxdesc_edma)rxsp->status11=0x00000003
<0>[   61.990000] ==MHX2.1(ath9k_hw_process_rxdesc_edma) Result rxs->rs_status=0x0
<0>[   61.990000] ==MHX0.1(ath9k_rx_skb_preprocess)
<0>[   61.990000] ==MHX0.2(ath9k_rx_skb_preprocess)
<0>[   61.990000] ==MHX0.3(ath9k_rx_skb_preprocess)
<0>[   61.990000] ==MHX0.4(ath9k_rx_skb_preprocess)
<0>[   61.990000] ==MHX0.5(ath9k_rx_skb_preprocess)
<0>[   61.990000] ==MHX0.6(ath9k_rx_skb_preprocess)
<0>[   61.990000] ==MHX0.7(ath9k_rx_skb_preprocess)
<0>[   61.990000] ==MHX1.0(ath9k_cmn_rx_accept) rx_stats->rs_status=0x0
<0>[   61.990000] ==MHX1.1(ath9k_cmn_rx_accept) rx_stats->rs_status=0x0 strip_mic=0, mic_error=0
<0>[   61.990000] ==MHX0.8(ath9k_rx_skb_preprocess)
<0>[   61.990000] ==MHX0.9(ath9k_rx_skb_preprocess)


<0>[   62.000000] ==MHX0.10(ath9k_rx_skb_preprocess)
<0>[   62.000000] ==MHX0.11(ath9k_rx_skb_preprocess)
<0>[   62.400000] ==MHX2.0(ath9k_hw_process_rxdesc_edma)rxsp->status11=0x00000003
<0>[   62.400000] ==MHX2.1(ath9k_hw_process_rxdesc_edma) Result rxs->rs_status=0x0
<0>[   62.400000] ==MHX0.1(ath9k_rx_skb_preprocess)
<0>[   62.400000] ==MHX0.2(ath9k_rx_skb_preprocess)
<0>[   62.400000] ==MHX0.3(ath9k_rx_skb_preprocess)
<0>[   62.400000] ==MHX0.4(ath9k_rx_skb_preprocess)
<0>[   62.400000] ==MHX0.5(ath9k_rx_skb_preprocess)
<0>[   62.400000] ==MHX0.6(ath9k_rx_skb_preprocess)
<0>[   62.400000] ==MHX0.7(ath9k_rx_skb_preprocess)
<0>[   62.400000] ==MHX1.0(ath9k_cmn_rx_accept) rx_stats->rs_status=0x0
<0>[   62.400000] ==MHX1.1(ath9k_cmn_rx_accept) rx_stats->rs_status=0x0 strip_mic=0, mic_error=0
<0>[   62.400000] ==MHX0.8(ath9k_rx_skb_preprocess)
<0>[   62.400000] ==MHX0.9(ath9k_rx_skb_preprocess)
<0>[   62.400000] ==MHX0.10(ath9k_rx_skb_preprocess)
<0>[   62.400000] ==MHX0.11(ath9k_rx_skb_preprocess)


<0>[   63.000000] ==MHX2.0(ath9k_hw_process_rxdesc_edma)rxsp->status11=0x00000003
<0>[   63.000000] ==MHX2.1(ath9k_hw_process_rxdesc_edma) Result rxs->rs_status=0x0
<0>[   63.000000] ==MHX0.1(ath9k_rx_skb_preprocess)
<0>[   63.000000] ==MHX0.2(ath9k_rx_skb_preprocess)
<0>[   63.000000] ==MHX0.3(ath9k_rx_skb_preprocess)
<0>[   63.000000] ==MHX0.4(ath9k_rx_skb_preprocess)
<0>[   63.000000] ==MHX0.5(ath9k_rx_skb_preprocess)
<0>[   63.000000] ==MHX0.6(ath9k_rx_skb_preprocess)
<0>[   63.000000] ==MHX0.7(ath9k_rx_skb_preprocess)
<0>[   63.000000] ==MHX1.0(ath9k_cmn_rx_accept) rx_stats->rs_status=0x0
<0>[   63.000000] ==MHX1.1(ath9k_cmn_rx_accept) rx_stats->rs_status=0x0 strip_mic=0, mic_error=0
<0>[   63.000000] ==MHX0.8(ath9k_rx_skb_preprocess)
<0>[   63.000000] ==MHX0.9(ath9k_rx_skb_preprocess)
<0>[   63.000000] ==MHX0.10(ath9k_rx_skb_preprocess)
<0>[   63.000000] ==MHX0.11(ath9k_rx_skb_preprocess)
^C
root@UserDevice:~# cat /proc/kmsg 
=======================Above is aes256 ping OK. But after echo 0xa > chanbw to reset chip.=====================
<0>[  107.850000] ==MHX2.0(ath9k_hw_process_rxdesc_edma)rxsp->status11=0x80000003
<0>[  107.850000] ==MHX2.1(ath9k_hw_process_rxdesc_edma) Result rxs->rs_status=0x20
<0>[  107.850000] ==MHX0.1(ath9k_rx_skb_preprocess)
<0>[  107.850000] ==MHX0.2(ath9k_rx_skb_preprocess)
<0>[  107.850000] ==MHX0.3(ath9k_rx_skb_preprocess)
<0>[  107.850000] ==MHX0.4(ath9k_rx_skb_preprocess)
<0>[  107.850000] ==MHX0.5(ath9k_rx_skb_preprocess)
<0>[  107.850000] ==MHX0.6(ath9k_rx_skb_preprocess)
<0>[  107.850000] ==MHX0.7(ath9k_rx_skb_preprocess)
<0>[  107.850000] ==MHX1.0(ath9k_cmn_rx_accept) rx_stats->rs_status=0x20
<0>[  107.850000] ==MHX1.1(ath9k_cmn_rx_accept) rx_stats->rs_status=0x81 strip_mic=0, mic_error=0
<0>[  107.850000] ==MHX1.2(ath9k_cmn_rx_accept) rx_stats->rs_status=0x81, status_mask=0xb8
<0>[  107.850000] ==MHX2.0(ath9k_hw_process_rxdesc_edma)rxsp->status11=0x80000003
<0>[  107.850000] ==MHX2.1(ath9k_hw_process_rxdesc_edma) Result rxs->rs_status=0x20
<0>[  107.850000] ==MHX0.1(ath9k_rx_skb_preprocess)
<0>[  107.860000] ==MHX0.2(ath9k_rx_skb_preprocess)
<0>[  107.860000] ==MHX0.3(ath9k_rx_skb_preprocess)
<0>[  107.860000] ==MHX0.4(ath9k_rx_skb_preprocess)
<0>[  107.860000] ==MHX0.5(ath9k_rx_skb_preprocess)
<0>[  107.860000] ==MHX0.6(ath9k_rx_skb_preprocess)
<0>[  107.860000] ==MHX0.7(ath9k_rx_skb_preprocess)
<0>[  107.860000] ==MHX1.0(ath9k_cmn_rx_accept) rx_stats->rs_status=0x20
<0>[  107.860000] ==MHX1.1(ath9k_cmn_rx_accept) rx_stats->rs_status=0x81 strip_mic=0, mic_error=0
<0>[  107.860000] ==MHX1.2(ath9k_cmn_rx_accept) rx_stats->rs_status=0x81, status_mask=0xb8


<0>[  108.850000] ==MHX2.0(ath9k_hw_process_rxdesc_edma)rxsp->status11=0x80000003
<0>[  108.850000] ==MHX2.1(ath9k_hw_process_rxdesc_edma) Result rxs->rs_status=0x20
<0>[  108.850000] ==MHX0.1(ath9k_rx_skb_preprocess)
<0>[  108.850000] ==MHX0.2(ath9k_rx_skb_preprocess)
<0>[  108.850000] ==MHX0.3(ath9k_rx_skb_preprocess)
<0>[  108.850000] ==MHX0.4(ath9k_rx_skb_preprocess)
<0>[  108.850000] ==MHX0.5(ath9k_rx_skb_preprocess)
<0>[  108.850000] ==MHX0.6(ath9k_rx_skb_preprocess)
<0>[  108.850000] ==MHX0.7(ath9k_rx_skb_preprocess)
<0>[  108.850000] ==MHX1.0(ath9k_cmn_rx_accept) rx_stats->rs_status=0x20
<0>[  108.850000] ==MHX1.1(ath9k_cmn_rx_accept) rx_stats->rs_status=0x81 strip_mic=0, mic_error=0
<0>[  108.850000] ==MHX1.2(ath9k_cmn_rx_accept) rx_stats->rs_status=0x81, status_mask=0xb8
<0>[  108.850000] ==MHX2.0(ath9k_hw_process_rxdesc_edma)rxsp->status11=0x80000003
<0>[  108.850000] ==MHX2.1(ath9k_hw_process_rxdesc_edma) Result rxs->rs_status=0x20
<0>[  108.850000] ==MHX0.1(ath9k_rx_skb_preprocess)
<0>[  108.850000] ==MHX0.2(ath9k_rx_skb_preprocess)
<0>[  108.850000] ==MHX0.3(ath9k_rx_skb_preprocess)
<0>[  108.850000] ==MHX0.4(ath9k_rx_skb_preprocess)
<0>[  108.850000] ==MHX0.5(ath9k_rx_skb_preprocess)
<0>[  108.850000] ==MHX0.6(ath9k_rx_skb_preprocess)
<0>[  108.850000] ==MHX0.7(ath9k_rx_skb_preprocess)
<0>[  108.850000] ==MHX1.0(ath9k_cmn_rx_accept) rx_stats->rs_status=0x20
<0>[  108.850000] ==MHX1.1(ath9k_cmn_rx_accept) rx_stats->rs_status=0x81 strip_mic=0, mic_error=0
<0>[  108.850000] ==MHX1.2(ath9k_cmn_rx_accept) rx_stats->rs_status=0x81, status_mask=0xb8



<0>[  109.850000] ==MHX2.0(ath9k_hw_process_rxdesc_edma)rxsp->status11=0x80000003
<0>[  109.850000] ==MHX2.1(ath9k_hw_process_rxdesc_edma) Result rxs->rs_status=0x20
<0>[  109.850000] ==MHX0.1(ath9k_rx_skb_preprocess)
<0>[  109.850000] ==MHX0.2(ath9k_rx_skb_preprocess)
<0>[  109.850000] ==MHX0.3(ath9k_rx_skb_preprocess)
<0>[  109.850000] ==MHX0.4(ath9k_rx_skb_preprocess)
<0>[  109.850000] ==MHX0.5(ath9k_rx_skb_preprocess)
<0>[  109.850000] ==MHX0.6(ath9k_rx_skb_preprocess)
<0>[  109.850000] ==MHX0.7(ath9k_rx_skb_preprocess)
<0>[  109.850000] ==MHX1.0(ath9k_cmn_rx_accept) rx_stats->rs_status=0x20
<0>[  109.850000] ==MHX1.1(ath9k_cmn_rx_accept) rx_stats->rs_status=0x81 strip_mic=0, mic_error=0
<0>[  109.850000] ==MHX1.2(ath9k_cmn_rx_accept) rx_stats->rs_status=0x81, status_mask=0xb8
<0>[  109.860000] ==MHX2.0(ath9k_hw_process_rxdesc_edma)rxsp->status11=0x80000003
<0>[  109.860000] ==MHX2.1(ath9k_hw_process_rxdesc_edma) Result rxs->rs_status=0x20
<0>[  109.860000] ==MHX0.1(ath9k_rx_skb_preprocess)
<0>[  109.860000] ==MHX0.2(ath9k_rx_skb_preprocess)
<0>[  109.860000] ==MHX0.3(ath9k_rx_skb_preprocess)
<0>[  109.860000] ==MHX0.4(ath9k_rx_skb_preprocess)
<0>[  109.860000] ==MHX0.5(ath9k_rx_skb_preprocess)
<0>[  109.860000] ==MHX0.6(ath9k_rx_skb_preprocess)
<0>[  109.860000] ==MHX0.7(ath9k_rx_skb_preprocess)
<0>[  109.860000] ==MHX1.0(ath9k_cmn_rx_accept) rx_stats->rs_status=0x20
<0>[  109.860000] ==MHX1.1(ath9k_cmn_rx_accept) rx_stats->rs_status=0x81 strip_mic=0, mic_error=0
<0>[  109.860000] ==MHX1.2(ath9k_cmn_rx_accept) rx_stats->rs_status=0x81, status_mask=0xb8



<0>[  110.860000] ==MHX2.0(ath9k_hw_process_rxdesc_edma)rxsp->status11=0x80000003
<0>[  110.860000] ==MHX2.1(ath9k_hw_process_rxdesc_edma) Result rxs->rs_status=0x20
<0>[  110.860000] ==MHX0.1(ath9k_rx_skb_preprocess)
<0>[  110.860000] ==MHX0.2(ath9k_rx_skb_preprocess)
<0>[  110.860000] ==MHX0.3(ath9k_rx_skb_preprocess)
<0>[  110.860000] ==MHX0.4(ath9k_rx_skb_preprocess)
<0>[  110.860000] ==MHX0.5(ath9k_rx_skb_preprocess)
<0>[  110.860000] ==MHX0.6(ath9k_rx_skb_preprocess)
<0>[  110.860000] ==MHX0.7(ath9k_rx_skb_preprocess)
<0>[  110.860000] ==MHX1.0(ath9k_cmn_rx_accept) rx_stats->rs_status=0x20
<0>[  110.860000] ==MHX1.1(ath9k_cmn_rx_accept) rx_stats->rs_status=0x81 strip_mic=0, mic_error=0
<0>[  110.860000] ==MHX1.2(ath9k_cmn_rx_accept) rx_stats->rs_status=0x81, status_mask=0xb8


<0>[  111.850000] ==MHX2.0(ath9k_hw_process_rxdesc_edma)rxsp->status11=0x80000003 // AR_KeyMiss happened.
<0>[  111.850000] ==MHX2.1(ath9k_hw_process_rxdesc_edma) Result rxs->rs_status=0x20 // This means ATH9K_RXERR_KEYMISS, not ATH9K_RX_DELIM_CRC_POST!!!
<0>[  111.850000] ==MHX0.1(ath9k_rx_skb_preprocess)
<0>[  111.850000] ==MHX0.2(ath9k_rx_skb_preprocess)
<0>[  111.850000] ==MHX0.3(ath9k_rx_skb_preprocess)
<0>[  111.850000] ==MHX0.4(ath9k_rx_skb_preprocess)
<0>[  111.850000] ==MHX0.5(ath9k_rx_skb_preprocess)
<0>[  111.850000] ==MHX0.6(ath9k_rx_skb_preprocess)
<0>[  111.850000] ==MHX0.7(ath9k_rx_skb_preprocess)
<0>[  111.850000] ==MHX1.0(ath9k_cmn_rx_accept) rx_stats->rs_status=0x20
<0>[  111.850000] ==MHX1.1(ath9k_cmn_rx_accept) rx_stats->rs_status=0x81 strip_mic=0, mic_error=0
<0>[  111.850000] ==MHX1.2(ath9k_cmn_rx_accept) rx_stats->rs_status=0x81, status_mask=0xb8

In ath9k_hw_process_rxdesc_edma():
	if (rxsp->status11 & AR_PostDelimCRCErr)
		rxs->rs_flags |= ATH9K_RX_DELIM_CRC_POST;
and
	if (rxsp->status11 & AR_KeyMiss)
		rxs->rs_status |= ATH9K_RXERR_KEYMISS; 

don't have conflict because one is rx_flags and one is rs_status !!!

Jun 16, 2019
In hostapd : 
	if (!(hapd->iface->drv_flags & WPA_DRIVER_FLAGS_INACTIVITY_TIMER)) {
		wpa_printf(MSG_DEBUG, "%s: reschedule ap_handle_timer timeout "
			   "for " MACSTR " (%d seconds - ap_max_inactivity)",
			   __func__, MAC2STR(sta->addr),
			   hapd->conf->ap_max_inactivity);
		eloop_cancel_timeout(ap_handle_timer, hapd, sta);
		eloop_register_timeout(hapd->conf->ap_max_inactivity, 0,
				       ap_handle_timer, hapd, sta);
	}
ap_handle_timer() only kicks in when WPA_DRIVER_FLAGS_INACTIVITY_TIMER flag is NOT set. Upper layer is NL80211_FEATURE_INACTIVITY_TIMER.

If using hostapd mechanism, the "Inactive time" gradually grows up to about 30sec and the AP sends a probe to STA. If ACK is not received, the STA is kicked out. 

=========================
QT compile using Android Clang but complain ":-1: error: error: cannot find -lc++". Use Synaptic Package Manager to install libc++7-dev, libc++1-7, libc++abi1-7, libc++abi-7-dev and didn't solve this issue.

Jun 14, 2019
In QT, Tools->Options->Devices->Android, always complains "Android SDK installation is missing", and a red cross mark in "Platform SDK installed". JDK uses openjdk11 and looks good. Install openjdk8 and point JDK location to openjdk8 solves that red mark. 

Jun 13, 2019
When iw scan freq [2406...2478], in bw=8Mhz, the dividing is bw=10. So the frequencies in bins will be [2401.703 ... 2482.297]. Observe the sample bin debug info it is true.

Jun 5, 2019
VSCode toggle the intelliSense colored region: Use Ctrl+Shift+P, in the pop-up window, search "inactive region colorization", then click it to toggle this feature on/off. 

The original calc_sample_ht20_rebin() takes the bandwidth into consideration, eg, 2440MHz:
1. bw=8M : freq = 2435.7 when i=0; freq = 2444.3 when i=55, FFT_BW=8.6M
2. bw=4M : f=2437.9 when i=0; f=2442.1 when i=55, FFT_BW=4.25MHz
3. bw=2M : f=2438.93 when i=0; f=2441.07 when i=55, FFT_BW=2.14MHz
4. bw=1M : f=2439.46 when i=0; f=2440.54 when i=55, FFT_BW=1.08MHz

Jun 4, 2019
pDDL2400, spectral_period=31 and spectral_count=16. "iw dev wlan0 scan 2480" at different BW settings. They all scan a whole FFT_BW=20MHz no matter what the BW is. A strange thing is that in BW=2MHz, there are spilled FFT samples in the current working channel, the FFT_BW=20MHz too. 

May 31, 2019
pMDDL2450, after the STA has a "TX path hung" reset, the aes256 can not communicate. The STA side can see the Beacon of AP, but it can't decode unicast packet from AP. It's like a packet loss.
AES256 must survive a BB reset because there're many reset situations even without the "echo > ath9k/chanbw" workaround.

Missing CONFIG_MHX_REORDER_CTRL looks like the root cause of RX lock. Porting that from pDDL to pMDDL and then pMDDL looks have no more RX lock issue.

May 29, 2019
A rx path log when receiving UDP Iperf, AES128:
<0>[ 8914.750000] ==MHX100.0(ath9k_tasklet) status=0x00000002
<0>[ 8914.750000] ==MHX100.1(ath9k_tasklet) receiving...
<0>[ 8914.750000] ==MHX101.0(ath_rx_tasklet) retval=0x00000000
<0>[ 8914.750000] ==MHX101.1(ath_rx_tasklet) calling ieee80211_rx()... 
<0>[ 8914.750000] ==MHX102.0(ieee80211_rx)
<0>[ 8914.750000] ==MHX102.1(ieee80211_rx)
<0>[ 8914.750000] ==MHX102.2(ieee80211_rx)
<0>[ 8914.750000] ==MHX102.3(ieee80211_rx)
<0>[ 8914.750000] ==MHX102.4(ieee80211_rx)
<0>[ 8914.750000] ==MHX102.5(ieee80211_rx)
<0>[ 8914.750000] ==MHX103.0(__ieee80211_rx_handle_packet)
<0>[ 8914.750000] ==MHX103.1(__ieee80211_rx_handle_packet)
<0>[ 8914.750000] ==MHX103.2(__ieee80211_rx_handle_packet)
<0>[ 8914.750000] ==MHX104.0(ieee80211_prepare_and_rx_handle) status->rx_flags=0x00000002, consume=1
<0>[ 8914.750000] ==MHX104.1(ieee80211_prepare_and_rx_handle)
<0>[ 8914.750000] ==MHX105.2(ieee80211_invoke_rx_handlers)
<0>[ 8914.750000] ==MHX101.0(ath_rx_tasklet) retval=0x00000000
<0>[ 8914.750000] ==MHX101.1(ath_rx_tasklet) calling ieee80211_rx()... 
<0>[ 8914.750000] ==MHX102.0(ieee80211_rx)
<0>[ 8914.750000] ==MHX102.1(ieee80211_rx)
<0>[ 8914.750000] ==MHX102.2(ieee80211_rx)
<0>[ 8914.750000] ==MHX102.3(ieee80211_rx)
<0>[ 8914.750000] ==MHX102.4(ieee80211_rx)
<0>[ 8914.750000] ==MHX102.5(ieee80211_rx)
<0>[ 8914.750000] ==MHX103.0(__ieee80211_rx_handle_packet)
<0>[ 8914.750000] ==MHX103.1(__ieee80211_rx_handle_packet)
<0>[ 8914.750000] ==MHX103.2(__ieee80211_rx_handle_packet)
<0>[ 8914.750000] ==MHX104.0(ieee80211_prepare_and_rx_handle) status->rx_flags=0x00000002, consume=1
<0>[ 8914.750000] ==MHX104.1(ieee80211_prepare_and_rx_handle)
<0>[ 8914.750000] ==MHX104.2(ieee80211_prepare_and_rx_handle) calling ieee80211_invoke_rx_handlers()......
<0>[ 8914.750000] ==MHX105.0(ieee80211_invoke_rx_handlers)
<0>[ 8914.750000] ==MHX105.1(ieee80211_invoke_rx_handlers)
<0>[ 8914.750000] ==MHX105.2(ieee80211_invoke_rx_handlers)





<0>[ 8914.750000] ==MHX100.0(ath9k_tasklet) status=0x00000002
<0>[ 8914.750000] ==MHX100.1(ath9k_tasklet) receiving...
<0>[ 8914.750000] ==MHX100.0(ath9k_tasklet) status=0x00000002
<0>[ 8914.750000] ==MHX100.1(ath9k_tasklet) receiving...
<0>[ 8914.750000] ==MHX101.0(ath_rx_tasklet) retval=0x00000000
<0>[ 8914.750000] ==MHX101.1(ath_rx_tasklet) calling ieee80211_rx()... 
<0>[ 8914.750000] ==MHX102.0(ieee80211_rx)
<0>[ 8914.750000] ==MHX102.1(ieee80211_rx)
<0>[ 8914.750000] ==MHX102.2(ieee80211_rx)
<0>[ 8914.750000] ==MHX102.3(ieee80211_rx)
<0>[ 8914.750000] ==MHX102.4(ieee80211_rx)
<0>[ 8914.750000] ==MHX102.5(ieee80211_rx)
<0>[ 8914.750000] ==MHX103.0(__ieee80211_rx_handle_packet)
<0>[ 8914.750000] ==MHX103.1(__ieee80211_rx_handle_packet)
<0>[ 8914.750000] ==MHX103.2(__ieee80211_rx_handle_packet)
<0>[ 8914.750000] ==MHX104.0(ieee80211_prepare_and_rx_handle) status->rx_flags=0x00000002, consume=1
<0>[ 8914.750000] ==MHX104.1(ieee80211_prepare_and_rx_handle)
<0>[ 8914.750000] ==MHX104.2(ieee80211_prepare_and_rx_handle) calling ieee80211_invoke_rx_handlers()......
<0>[ 8914.750000] ==MHX105.0(ieee80211_invoke_rx_handlers)
<0>[ 8914.750000] ==MHX105.1(ieee80211_invoke_rx_handlers)
<0>[ 8914.750000] ==MHX105.2(ieee80211_invoke_rx_handlers)


<0>[ 8914.750000] ==MHX100.0(ath9k_tasklet) status=0x00000002
<0>[ 8914.750000] ==MHX100.1(ath9k_tasklet) receiving...
<0>[ 8914.750000] ==MHX101.0(ath_rx_tasklet) retval=0x00000000
<0>[ 8914.750000] ==MHX101.1(ath_rx_tasklet) calling ieee80211_rx()... 
<0>[ 8914.750000] ==MHX102.0(ieee80211_rx)
<0>[ 8914.750000] ==MHX102.1(ieee80211_rx)
<0>[ 8914.750000] ==MHX102.2(ieee80211_rx)
<0>[ 8914.750000] ==MHX102.3(ieee80211_rx)
<0>[ 8914.750000] ==MHX102.4(ieee80211_rx)
<0>[ 8914.750000] ==MHX102.5(ieee80211_rx)
<0>[ 8914.750000] ==MHX103.0(__ieee80211_rx_handle_packet)
<0>[ 8914.750000] ==MHX103.1(__ieee80211_rx_handle_packet)
<0>[ 8914.750000] ==MHX103.2(__ieee80211_rx_handle_packet)
<0>[ 8914.750000] ==MHX104.0(ieee80211_prepare_and_rx_handle) status->rx_flags=0x00000002, consume=1
<0>[ 8914.750000] ==MHX104.1(ieee80211_prepare_and_rx_handle)
<0>[ 8914.750000] ==MHX104.2(ieee80211_prepare_and_rx_handle) calling ieee80211_invoke_rx_handlers()......
<0>[ 8914.750000] ==MHX105.0(ieee80211_invoke_rx_handlers)
<0>[ 8914.750000] ==MHX105.1(ieee80211_invoke_rx_handlers)
<0>[ 8914.750000] ==MHX105.2(ieee80211_invoke_rx_handlers)


<0>[ 8914.750000] ==MHX100.0(ath9k_tasklet) status=0x00000002
<0>[ 8914.750000] ==MHX100.1(ath9k_tasklet) receiving...
<0>[ 8914.750000] ==MHX101.0(ath_rx_tasklet) retval=0x00000000
<0>[ 8914.750000] ==MHX101.1(ath_rx_tasklet) calling ieee80211_rx()... 
<0>[ 8914.750000] ==MHX102.0(ieee80211_rx)
<0>[ 8914.750000] ==MHX102.1(ieee80211_rx)
<0>[ 8914.750000] ==MHX102.2(ieee80211_rx)
<0>[ 8914.750000] ==MHX102.3(ieee80211_rx)
<0>[ 8914.750000] ==MHX102.4(ieee80211_rx)
<0>[ 8914.750000] ==MHX102.5(ieee80211_rx)
<0>[ 8914.750000] ==MHX103.0(__ieee80211_rx_handle_packet)
<0>[ 8914.750000] ==MHX103.1(__ieee80211_rx_handle_packet)
<0>[ 8914.750000] ==MHX103.2(__ieee80211_rx_handle_packet)
<0>[ 8914.750000] ==MHX104.0(ieee80211_prepare_and_rx_handle) status->rx_flags=0x00000002, consume=1
<0>[ 8914.750000] ==MHX104.1(ieee80211_prepare_and_rx_handle)
<0>[ 8914.750000] ==MHX105.2(ieee80211_invoke_rx_handlers)


<0>[ 8914.750000] ==MHX101.0(ath_rx_tasklet) retval=0x00000000
<0>[ 8914.750000] ==MHX101.1(ath_rx_tasklet) calling ieee80211_rx()... 
<0>[ 8914.750000] ==MHX102.0(ieee80211_rx)
<0>[ 8914.750000] ==MHX102.1(ieee80211_rx)
<0>[ 8914.750000] ==MHX102.2(ieee80211_rx)
<0>[ 8914.750000] ==MHX102.3(ieee80211_rx)
<0>[ 8914.750000] ==MHX102.4(ieee80211_rx)
<0>[ 8914.750000] ==MHX102.5(ieee80211_rx)
<0>[ 8914.750000] ==MHX103.0(__ieee80211_rx_handle_packet)
<0>[ 8914.750000] ==MHX103.1(__ieee80211_rx_handle_packet)
<0>[ 8914.750000] ==MHX103.2(__ieee80211_rx_handle_packet)
<0>[ 8914.750000] ==MHX104.0(ieee80211_prepare_and_rx_handle) status->rx_flags=0x00000002, consume=1
<0>[ 8914.750000] ==MHX104.1(ieee80211_prepare_and_rx_handle)
<0>[ 8914.750000] ==MHX104.2(ieee80211_prepare_and_rx_handle) calling ieee80211_invoke_rx_handlers()......
<0>[ 8914.750000] ==MHX105.0(ieee80211_invoke_rx_handlers)
<0>[ 8914.750000] ==MHX105.1(ieee80211_invoke_rx_handlers)
<0>[ 8914.750000] ==MHX105.2(ieee80211_invoke_rx_handlers)
<0>[ 8914.750000] ==MHX100.0(ath9k_tasklet) status=0x00000002
<0>[ 8914.750000] ==MHX100.1(ath9k_tasklet) receiving...
<0>[ 8914.750000] ==MHX100.0(ath9k_tasklet) status=0x00000002
<0>[ 8914.750000] ==MHX100.1(ath9k_tasklet) receiving...
<0>[ 8914.750000] ==MHX101.0(ath_rx_tasklet) retval=0x00000000
<0>[ 8914.750000] ==MHX101.1(ath_rx_tasklet) calling ieee80211_rx()... 
<0>[ 8914.750000] ==MHX102.0(ieee80211_rx)
<0>[ 8914.750000] ==MHX102.1(ieee80211_rx)
<0>[ 8914.750000] ==MHX102.2(ieee80211_rx)
<0>[ 8914.750000] ==MHX102.3(ieee80211_rx)
<0>[ 8914.750000] ==MHX102.4(ieee80211_rx)
<0>[ 8914.750000] ==MHX102.5(ieee80211_rx)
<0>[ 8914.750000] ==MHX103.0(__ieee80211_rx_handle_packet)
<0>[ 8914.750000] ==MHX103.1(__ieee80211_rx_handle_packet)
<0>[ 8914.750000] ==MHX103.2(__ieee80211_rx_handle_packet)
<0>[ 8914.750000] ==MHX104.0(ieee80211_prepare_and_rx_handle) status->rx_flags=0x00000002, consume=1
<0>[ 8914.750000] ==MHX104.1(ieee80211_prepare_and_rx_handle)
<0>[ 8914.750000] ==MHX104.2(ieee80211_prepare_and_rx_handle) calling ieee80211_invoke_rx_handlers()......
<0>[ 8914.750000] ==MHX105.0(ieee80211_invoke_rx_handlers)
<0>[ 8914.750000] ==MHX105.1(ieee80211_invoke_rx_handlers)
<0>[ 8914.750000] ==MHX105.2(ieee80211_invoke_rx_handlers)
<0>[ 8914.750000] ==MHX101.0(ath_rx_tasklet) retval=0x00000000
<0>[ 8914.750000] ==MHX101.1(ath_rx_tasklet) calling ieee80211_rx()... 
<0>[ 8914.750000] ==MHX102.0(ieee80211_rx)
<0>[ 8914.750000] ==MHX102.1(ieee80211_rx)
<0>[ 8914.750000] ==MHX102.2(ieee80211_rx)
<0>[ 8914.750000] ==MHX102.3(ieee80211_rx)
<0>[ 8914.750000] ==MHX102.4(ieee80211_rx)
<0>[ 8914.750000] ==MHX102.5(ieee80211_rx)
<0>[ 8914.750000] ==MHX103.0(__ieee80211_rx_handle_packet)
<0>[ 8914.750000] ==MHX103.1(__ieee80211_rx_handle_packet)
<0>[ 8914.750000] ==MHX103.2(__ieee80211_rx_handle_packet)
<0>[ 8914.750000] ==MHX104.0(ieee80211_prepare_and_rx_handle) status->rx_flags=0x00000002, consume=1
<0>[ 8914.750000] ==MHX104.1(ieee80211_prepare_and_rx_handle)
<0>[ 8914.750000] ==MHX104.2(ieee80211_prepare_and_rx_handle) calling ieee80211_invoke_rx_handlers()......
<0>[ 8914.750000] ==MHX105.0(ieee80211_invoke_rx_handlers)
<0>[ 8914.750000] ==MHX105.1(ieee80211_invoke_rx_handlers)
<0>[ 8914.750000] ==MHX105.2(ieee80211_invoke_rx_handlers)
<0>[ 8914.750000] ==MHX100.0(ath9k_tasklet) status=0x00000002
<0>[ 8914.750000] ==MHX100.1(ath9k_tasklet) receiving...
<0>[ 8914.750000] ==MHX100.0(ath9k_tasklet) status=0x00000002
<0>[ 8914.750000] ==MHX100.1(ath9k_tasklet) receiving...
<0>[ 8914.750000] ==MHX101.0(ath_rx_tasklet) retval=0x00000000
<0>[ 8914.750000] ==MHX101.1(ath_rx_tasklet) calling ieee80211_rx()... 
<0>[ 8914.750000] ==MHX102.0(ieee80211_rx)
<0>[ 8914.750000] ==MHX102.1(ieee80211_rx)
<0>[ 8914.760000] ==MHX105.2(ieee80211_invoke_rx_handlers)
<0>[ 8914.760000] ==MHX101.0(ath_rx_tasklet) retval=0x00000000
<0>[ 8914.760000] ==MHX101.1(ath_rx_tasklet) calling ieee80211_rx()... 
<0>[ 8914.760000] ==MHX102.0(ieee80211_rx)
<0>[ 8914.760000] ==MHX102.1(ieee80211_rx)
<0>[ 8914.760000] ==MHX102.2(ieee80211_rx)
<0>[ 8914.760000] ==MHX102.3(ieee80211_rx)
<0>[ 8914.760000] ==MHX102.4(ieee80211_rx)
<0>[ 8914.760000] ==MHX102.5(ieee80211_rx)
<0>[ 8914.760000] ==MHX103.0(__ieee80211_rx_handle_packet)
<0>[ 8914.760000] ==MHX103.1(__ieee80211_rx_handle_packet)
<0>[ 8914.760000] ==MHX103.2(__ieee80211_rx_handle_packet)
<0>[ 8914.760000] ==MHX104.0(ieee80211_prepare_and_rx_handle) status->rx_flags=0x00000002, consume=1
<0>[ 8914.760000] ==MHX104.1(ieee80211_prepare_and_rx_handle)
<0>[ 8914.760000] ==MHX104.2(ieee80211_prepare_and_rx_handle) calling ieee80211_invoke_rx_handlers()......
<0>[ 8914.760000] ==MHX105.0(ieee80211_invoke_rx_handlers)
<0>[ 8914.760000] ==MHX105.1(ieee80211_invoke_rx_handlers)
<0>[ 8914.760000] ==MHX100.1(ath9k_tasklet) receiving...
<0>[ 8914.760000] ==MHX100.0(ath9k_tasklet) status=0x00000002
<0>[ 8914.760000] ==MHX100.1(ath9k_tasklet) receiving...
<0>[ 8914.760000] ==MHX101.0(ath_rx_tasklet) retval=0x00000000
<0>[ 8914.760000] ==MHX101.1(ath_rx_tasklet) calling ieee80211_rx()... 
<0>[ 8914.760000] ==MHX102.0(ieee80211_rx)
<0>[ 8914.760000] ==MHX102.1(ieee80211_rx)
<0>[ 8914.760000] ==MHX102.2(ieee80211_rx)
<0>[ 8914.760000] ==MHX102.3(ieee80211_rx)
<0>[ 8914.760000] ==MHX102.4(ieee80211_rx)
<0>[ 8914.760000] ==MHX102.5(ieee80211_rx)
<0>[ 8914.760000] ==MHX103.0(__ieee80211_rx_handle_packet)
<0>[ 8914.760000] ==MHX103.1(__ieee80211_rx_handle_packet)
<0>[ 8914.760000] ==MHX103.2(__ieee80211_rx_handle_packet)
<0>[ 8914.760000] ==MHX104.0(ieee80211_prepare_and_rx_handle) status->rx_flags=0x00000002, consume=1
<0>[ 8914.760000] ==MHX104.1(ieee80211_prepare_and_rx_handle)
<0>[ 8914.760000] ==MHX104.2(ieee80211_prepare_and_rx_handle) calling ieee80211_invoke_rx_handlers()......
<0>[ 8914.760000] ==MHX105.0(ieee80211_invoke_rx_handlers)
<0>[ 8914.760000] ==MHX105.1(ieee80211_invoke_rx_handlers)
<0>[ 8914.760000] ==MHX105.2(ieee80211_invoke_rx_handlers)
<0>[ 8914.760000] ==MHX101.0(ath_rx_tasklet) retval=0x00000000
<0>[ 8914.770000] ==MHX101.1(ath_rx_tasklet) calling ieee80211_rx()... 
<0>[ 8914.770000] ==MHX102.0(ieee80211_rx)

Tried the 130-microhard-rxorn-reset-rx-check.patch and 140-microhard-ba-reorder.patch, aes256 still get into stuck on STA: all counters in sys/kernel/debug/ieee80211/phy0/ath9k/interrupt freeze. In sys/kernel/debug/ieee80211/phy0/ath9k/reset the "TX Path Hang" counter jumps every second, which means and verified by kernel message that a REAL reset is happening but still novail. In this case, echo to chanbw doesn't recover it. 

When this situation happens, the inactive timer becomes so high like 5000sec. And the ath9k/queues has lots of pending frames in VO and BE queues.

The current STA side can monitor RSSI level and Beacon loss and after 30sec STA disassociate the AP. But in this situation Beacon is received perfectly but the "inactive time" gets too high. Need to add a monitor to inactive time.

May 28,2019
pMDDL2550, AES128 and AES256 both have rx stuck issue. 
ah->config.rx_intr_mitigation = true;	// turning this to false makes the rx lock worse instead of better.

May 27, 2019
pMDDL2x50(ar9341) periodic reset as rx stuck workaround will cause aes256 encryption fail. So remove the reset and use aes256 TCP iperf still lockup when the signal is not good. So AES256 and Reset can not co-exist. If using reset workaround, ath9k_rx_skb_preprocess() returns -22 and drop the packet. Looking into that, ath9k_cmn_rx_accept() returns a false.
After a reset by echoing 0xa > chanbw, the debugfs sys/kernel/debug/ieee80211/phy0/ath9k/recv has "POST-DELIM CRC ERR" jumps. The root cause is that :
	if (rxsp->status11 & AR_PostDelimCRCErr)
		rxs->rs_flags |= ATH9K_RX_DELIM_CRC_POST;
The rx descriptor word11 has bit18(post_delim_crc_err) set. 

May 23, 2019
#define MESH_PATH_EXPIRE (15 * HZ) : defines how long to remove mpath from "iw mpath dump"
#define MESH_DEFAULT_PLINK_TIMEOUT	15 : defines how long to remove sta from "iw station dump"
These 2 timeout must be greater than IEEE80211_MESH_HOUSEKEEPING_INTERVAL(10sec) to be accurate.

Jason tested housekeeping=3sec and plinktimeout=pathexpire=5sec worked fine and prompt.

Found a symptom. Only 2 mesh nodes ping. When mpath expires and ACTIVE flag is cleared, ping breaks. But, the metric gets so high for some reasons so that there's no chance to do mesh_path_activate(). So the connection is broken for long time.

May 21, 2019
/* Destination only */
#define MP_F_DO	0x1
When this flag is 0, the N2 in between N1 and N3 replies PREQs from both N1 and N3. This seems cause a lot problems when receiving PREP from both N1 and N3. Set this flag to 1 always seems OK:
	if (preq_node->flags & PREQ_Q_F_REFRESH)
		target_flags = MP_F_DO;
	else
		// target_flags = MP_F_RF;
		target_flags = MP_F_DO;


May 16, 2019
Jason runs a unit into a situation very vulnerable to interference. 
N1 and N2 direct link, if a N3 is powered on and joins in, the N1 can not receive N2's PREP frequently and causes a ping loss.  When the N3 is powered off, the N1 N2 traffic is OK. Looks like the beacon and forwarded HWMP packets from N3 seriously affect the N1-N2 link.

When N1 applies wifi command, this symptom disappeared.

May 15, 2019
N1-N2-----------N3-N4 topology. Found the N4 doesn't send PREQ in about 20 seconds that causes traffic interrupt. The N4 log:

root@UserDevice:~# cat /proc/kmsg | grep PRE
<7>[ 1180.150000] wlan0: received PREQ from 00:0f:92:fb:6c:21
<7>[ 1180.150000] wlan0: PREQ is for us
<7>[ 1180.150000] wlan0: replying to the PREQ
<7>[ 1180.150000] wlan0: sending PREP to 00:0f:92:fb:6c:21


<7>[ 1182.530000] wlan0: received PREQ from 00:0f:92:fb:6c:21
<7>[ 1182.530000] wlan0: PREQ is for us
<7>[ 1182.530000] wlan0: replying to the PREQ
<7>[ 1182.530000] wlan0: sending PREP to 00:0f:92:fb:6c:21



<7>[ 1184.960000] wlan0: received PREQ from 00:0f:92:fb:6c:21
<7>[ 1184.960000] wlan0: PREQ is for us
<7>[ 1184.960000] wlan0: replying to the PREQ
<7>[ 1184.960000] wlan0: sending PREP to 00:0f:92:fb:6c:21



<7>[ 1187.430000] wlan0: received PREQ from 00:0f:92:fb:6c:21
<7>[ 1187.430000] wlan0: PREQ is for us
<7>[ 1187.430000] wlan0: replying to the PREQ
<7>[ 1187.430000] wlan0: sending PREP to 00:0f:92:fb:6c:21


<7>[ 1189.950000] wlan0: received PREQ from 00:0f:92:fb:6c:21
<7>[ 1189.950000] wlan0: PREQ is for us
<7>[ 1189.950000] wlan0: replying to the PREQ
<7>[ 1189.950000] wlan0: sending PREP to 00:0f:92:fb:6c:21


<7>[ 1194.460000] wlan0: received PREQ from 00:0f:92:fb:6c:21
<7>[ 1194.460000] wlan0: PREQ is for us
<7>[ 1194.460000] wlan0: replying to the PREQ
<7>[ 1194.460000] wlan0: sending PREP to 00:0f:92:fb:6c:21


<0>[ 1199.440000] ==MHX7.2(mesh_nexthop_lookup) Qed a PREQ.
<7>[ 1199.440000] wlan0: sending PREQ to 00:0f:92:fb:6c:21	// about 19sec later the first PREQ is sent. The connection during the 19s is broken. 
<7>[ 1199.450000] wlan0: received PREP from 00:0f:92:fb:6c:21


<0>[ 1204.440000] ==MHX7.2(mesh_nexthop_lookup) Qed a PREQ.
<7>[ 1204.440000] wlan0: sending PREQ to 00:0f:92:fb:6c:21
<7>[ 1204.450000] wlan0: received PREQ from 00:0f:92:fb:6c:21
<7>[ 1204.450000] wlan0: PREQ is for us
<7>[ 1204.450000] wlan0: replying to the PREQ
<7>[ 1204.450000] wlan0: sending PREP to 00:0f:92:fb:6c:21
<7>[ 1204.760000] wlan0: received PREQ from 00:0f:92:fb:6c:21
<7>[ 1204.760000] wlan0: PREQ is for us
<7>[ 1204.760000] wlan0: replying to the PREQ
<7>[ 1204.760000] wlan0: sending PREP to 00:0f:92:fb:6c:21



<0>[ 1209.440000] ==MHX7.2(mesh_nexthop_lookup) Qed a PREQ.
<7>[ 1209.440000] wlan0: sending PREQ to 00:0f:92:fb:6c:21
<7>[ 1209.450000] wlan0: received PREP from 00:0f:92:fb:6c:21



<0>[ 1214.440000] ==MHX7.2(mesh_nexthop_lookup) Qed a PREQ.
<7>[ 1214.450000] wlan0: received PREQ from 00:0f:92:fb:6c:21
<7>[ 1214.450000] wlan0: PREQ is for us
<7>[ 1214.450000] wlan0: replying to the PREQ
<7>[ 1214.450000] wlan0: sending PREP to 00:0f:92:fb:6c:21
<7>[ 1214.450000] wlan0: sending PREQ to 00:0f:92:fb:6c:21
<7>[ 1214.460000] wlan0: received PREP from 00:0f:92:fb:6c:21



<0>[ 1219.440000] ==MHX7.2(mesh_nexthop_lookup) Qed a PREQ.
<7>[ 1219.440000] wlan0: sending PREQ to 00:0f:92:fb:6c:21
<7>[ 1219.450000] wlan0: received PREP from 00:0f:92:fb:6c:21


============================================================================================
The second issue is about the PC2 behind N4 ping PC1 behind N1 takes about 40sec to success. The N4 log shows the PREQ is sent to PC1 nistead of N1:

<7>[ 4184.960000] wlan0: sending PREQ to 00:0e:c6:89:43:83
<7>[ 4185.270000] wlan0: sending PREQ to 00:0e:c6:89:43:83
<7>[ 4185.590000] wlan0: sending PREQ to 00:0e:c6:89:43:83
<7>[ 4186.060000] wlan0: sending PREQ to 00:0e:c6:89:43:83
<7>[ 4186.570000] wlan0: sending PREQ to 00:0e:c6:89:43:83
<7>[ 4187.090000] wlan0: sending PREQ to 00:0e:c6:89:43:83
<7>[ 4187.700000] wlan0: sending PREQ to 00:0e:c6:89:43:83
<7>[ 4188.330000] wlan0: sending PREQ to 00:0e:c6:89:43:83
<7>[ 4189.080000] wlan0: sending PREQ to 00:0e:c6:89:43:83
<7>[ 4189.960000] wlan0: sending PREQ to 00:0e:c6:89:43:83
<7>[ 4190.960000] wlan0: sending PREQ to 00:0e:c6:89:43:83
<7>[ 4191.970000] wlan0: sending PREQ to 00:0e:c6:89:43:83
<7>[ 4192.990000] wlan0: sending PREQ to 00:0e:c6:89:43:83
<7>[ 4194.010000] wlan0: sending PREQ to 00:0e:c6:89:43:83
<7>[ 4195.160000] wlan0: sending PREQ to 00:0e:c6:89:43:83
<7>[ 4196.370000] wlan0: sending PREQ to 00:0e:c6:89:43:83
<7>[ 4197.700000] wlan0: sending PREQ to 00:0e:c6:89:43:83
<7>[ 4199.120000] wlan0: sending PREQ to 00:0e:c6:89:43:83
<7>[ 4200.560000] wlan0: sending PREQ to 00:0e:c6:89:43:83
<7>[ 4202.110000] wlan0: sending PREQ to 00:0e:c6:89:43:83	// the above 18sec PREQ was sent to PC1 MAC, not N1.
<7>[ 4202.980000] wlan0: sending PREQ to 00:0f:92:fb:6c:21	// until now the PREQ is sent to N1, ping starts to success

<7>[ 4202.980000] wlan0: received PREP from 00:0f:92:fb:6c:21
<7>[ 4202.990000] wlan0: received PREP from 00:0f:92:fb:6c:21
<0>[ 4207.960000] ==MHX7.2(mesh_nexthop_lookup) Qed a PREQ.
<7>[ 4207.960000] wlan0: sending PREQ to 00:0f:92:fb:6c:21
<7>[ 4207.970000] wlan0: received PREP from 00:0f:92:fb:6c:21
<0>[ 4212.960000] ==MHX7.2(mesh_nexthop_lookup) Qed a PREQ.
<7>[ 4212.960000] wlan0: sending PREQ to 00:0f:92:fb:6c:21
<7>[ 4212.970000] wlan0: received PREP from 00:0f:92:fb:6c:21


This is the N1 log:
<7>[ 3774.610000] wlan0: received PREQ from 00:0f:92:fb:6f:88
<7>[ 3774.610000] wlan0: forwarding the PREQ from 00:0f:92:fb:6f:88
<7>[ 3774.610000] wlan0: sending PREQ to 00:0e:c6:89:43:83	// the dest of PREQ is for PC1, not for me!
<7>[ 3774.610000] wlan0: received PREQ from 00:0f:92:fb:6f:88
<7>[ 3774.610000] wlan0: forwarding the PREQ from 00:0f:92:fb:6f:88
<7>[ 3774.610000] wlan0: sending PREQ to 00:0e:c6:89:43:83
<7>[ 3775.250000] wlan0: received PREQ from 00:0f:92:fb:6f:88
<7>[ 3775.250000] wlan0: forwarding the PREQ from 00:0f:92:fb:6f:88
<7>[ 3775.250000] wlan0: sending PREQ to 00:0e:c6:89:43:83
<7>[ 3775.710000] wlan0: received PREQ from 00:0f:92:fb:6f:88
<7>[ 3775.710000] wlan0: forwarding the PREQ from 00:0f:92:fb:6f:88
<7>[ 3775.710000] wlan0: sending PREQ to 00:0e:c6:89:43:83
<7>[ 3776.220000] wlan0: received PREQ from 00:0f:92:fb:6f:88
<7>[ 3776.220000] wlan0: forwarding the PREQ from 00:0f:92:fb:6f:88
<7>[ 3776.220000] wlan0: sending PREQ to 00:0e:c6:89:43:83
<7>[ 3776.740000] wlan0: received PREQ from 00:0f:92:fb:6f:88
<7>[ 3776.740000] wlan0: forwarding the PREQ from 00:0f:92:fb:6f:88
<7>[ 3776.740000] wlan0: sending PREQ to 00:0e:c6:89:43:83
<7>[ 3777.350000] wlan0: received PREQ from 00:0f:92:fb:6f:88
<7>[ 3777.350000] wlan0: forwarding the PREQ from 00:0f:92:fb:6f:88
<7>[ 3777.350000] wlan0: sending PREQ to 00:0e:c6:89:43:83
<7>[ 3777.980000] wlan0: received PREQ from 00:0f:92:fb:6f:88
<7>[ 3777.980000] wlan0: forwarding the PREQ from 00:0f:92:fb:6f:88
<7>[ 3777.980000] wlan0: sending PREQ to 00:0e:c6:89:43:83
<7>[ 3778.730000] wlan0: received PREQ from 00:0f:92:fb:6f:88
<7>[ 3778.730000] wlan0: forwarding the PREQ from 00:0f:92:fb:6f:88
<7>[ 3778.730000] wlan0: sending PREQ to 00:0e:c6:89:43:83
<7>[ 3779.610000] wlan0: received PREQ from 00:0f:92:fb:6f:88
<7>[ 3779.610000] wlan0: forwarding the PREQ from 00:0f:92:fb:6f:88
<7>[ 3779.610000] wlan0: sending PREQ to 00:0e:c6:89:43:83
<7>[ 3780.610000] wlan0: received PREQ from 00:0f:92:fb:6f:88
<7>[ 3780.610000] wlan0: forwarding the PREQ from 00:0f:92:fb:6f:88
<7>[ 3780.610000] wlan0: sending PREQ to 00:0e:c6:89:43:83
<7>[ 3781.620000] wlan0: received PREQ from 00:0f:92:fb:6f:88
<7>[ 3781.620000] wlan0: forwarding the PREQ from 00:0f:92:fb:6f:88
<7>[ 3781.620000] wlan0: sending PREQ to 00:0e:c6:89:43:83
<7>[ 3782.640000] wlan0: received PREQ from 00:0f:92:fb:6f:88
<7>[ 3782.640000] wlan0: forwarding the PREQ from 00:0f:92:fb:6f:88
<7>[ 3782.640000] wlan0: sending PREQ to 00:0e:c6:89:43:83
<7>[ 3784.810000] wlan0: received PREQ from 00:0f:92:fb:6f:88
<7>[ 3784.810000] wlan0: forwarding the PREQ from 00:0f:92:fb:6f:88
<7>[ 3784.810000] wlan0: sending PREQ to 00:0e:c6:89:43:83
<7>[ 3786.020000] wlan0: received PREQ from 00:0f:92:fb:6f:88
<7>[ 3786.020000] wlan0: forwarding the PREQ from 00:0f:92:fb:6f:88
<7>[ 3786.020000] wlan0: sending PREQ to 00:0e:c6:89:43:83
<7>[ 3787.350000] wlan0: received PREQ from 00:0f:92:fb:6f:88
<7>[ 3787.350000] wlan0: forwarding the PREQ from 00:0f:92:fb:6f:88
<7>[ 3787.350000] wlan0: sending PREQ to 00:0e:c6:89:43:83
<7>[ 3788.770000] wlan0: received PREQ from 00:0f:92:fb:6f:88
<7>[ 3788.770000] wlan0: forwarding the PREQ from 00:0f:92:fb:6f:88
<7>[ 3788.770000] wlan0: sending PREQ to 00:0e:c6:89:43:83
<7>[ 3790.210000] wlan0: received PREQ from 00:0f:92:fb:6f:88
<7>[ 3790.210000] wlan0: forwarding the PREQ from 00:0f:92:fb:6f:88
<7>[ 3790.210000] wlan0: sending PREQ to 00:0e:c6:89:43:83
<7>[ 3791.760000] wlan0: received PREQ from 00:0f:92:fb:6f:88
<7>[ 3791.760000] wlan0: forwarding the PREQ from 00:0f:92:fb:6f:88
<7>[ 3791.760000] wlan0: sending PREQ to 00:0e:c6:89:43:83

<7>[ 3792.630000] wlan0: received PREQ from 00:0f:92:fb:6f:88	// this PREQ dest is for me. ping starts to success.
<7>[ 3792.630000] wlan0: PREQ is for us
<7>[ 3792.630000] wlan0: replying to the PREQ
<7>[ 3792.630000] wlan0: sending PREP to 00:0f:92:fb:6f:88
<7>[ 3797.610000] wlan0: received PREQ from 00:0f:92:fb:6f:88
<7>[ 3797.610000] wlan0: PREQ is for us
<7>[ 3797.610000] wlan0: replying to the PREQ
<7>[ 3797.610000] wlan0: sending PREP to 00:0f:92:fb:6f:88
<7>[ 3802.610000] wlan0: received PREQ from 00:0f:92:fb:6f:88
<7>[ 3802.610000] wlan0: PREQ is for us
<7>[ 3802.610000] wlan0: replying to the PREQ
<7>[ 3802.610000] wlan0: sending PREP to 00:0f:92:fb:6f:88



May 14, 2019
Fine tune metric and weights:
#define MESH_BITRATE_AVG_WEIGHT 10
static int signal_avg_percent = 100
#define MESH_PATH_TIMEOUT      1000 * 5
#define MESH_PATH_REFRESH_TIME	3000 	// This should be as big as possible but less than MESH_PATH_TIMEOUT. Otherwis ping is very long and sometimes ping packet loss.
#define MESH_DIAM_TRAVERSAL_TIME 50 * 10 *2
#define MESH_MIN_DISCOVERY_TIMEOUT (2 * MESH_DIAM_TRAVERSAL_TIME)
+#define MESH_RSSI_THRESHOLD    -85
result = ((1000000L / sta->bitrate_avg) *  ewma_read(&sta->avg_signal) * signal_avg_percent) / (100 - sta->fail_avg);



May 10,2019

The MESH action is in IE field : 

21:49:03.946833 [bit 15] 0us BSSID:00:0f:92:fb:6c:21 DA:ff:ff:ff:ff:ff:ff SA:00:0f:92:fb:6c:21 Action: 
MeshAction HWMP                                                                                        
        0x0000:  0d01 8225 0000 1fbd 0700 0000 0f92 fb6c  //0d: Category=13; 01:MeshAction=HWMP Mesh Path Selection(0x01) 0x82=130=PREQ;0x25:IE length=37;0x00:HWMP Flags; 0x00:HopCount;
							  //0x1f:TTL;0x000007bd:PathDicoveryID;OrigAddr;
        0x0010:  2152 2200 00d0 0300 0000 0000 0001 0100   //0x00002252:OrigSeqNo;0x000003d0:Lifetime;0x00000000:Metric;x01:TargetCount;0x01:PerTargetFlags;TargetAddr;
        0x0020:  0f92 fb6d 2fea 2000 004c 1004 00c0 0700   //0x000020ea:SeqNo.
        0x0030:  0000 0089 465d df33 0052 8c                                                           

21:49:03.948664 8865930711us tsft 3.0 Mb/s 2477 MHz 11g/10Mhz -65dB signal [bit 29] 60us BSSID:00:0f:92:fb:6d:2f DA:00:0f:92:fb:6c:21 SA:00:0f:92:fb:6d:2f Action: MeshAction HWMP                            
        0x0000:  0d01 831f 0000 1f00 0f92 fb6d 2feb 2000  //0d: Category=13; 01:MeshAction=HWMP Mesh Path Selection(0x01) 0x83=131=PREP;0x1f:IE length=31;0x00:HWMP Flags; 0x00:HopCount;
							  //0x1f:TTL;TargetAddr;
        0x0010:  00d0 0300 0000 0000 0000 0f92 fb6c 2152  //OrigAddr.
        0x0020:  2200 00e2 c360 7a

May 9, 2019
The Mesh node can't receive PREP issue:
Only 2 mesh nodes, the monitor interface can see the other peer's PREP packet but in function ieee80211_iface_work():
	while ((skb = skb_dequeue(&sdata->skb_queue))) {
		struct ieee80211_mgmt *mgmt = (void *)skb->data;
can not get the management (type)--->action (category WLAN_CATEGORY_MESH_ACTION = 13 ) frame. Trace back to function ieee80211_rx_h_mgmt_check():
	if (ieee80211_drop_unencrypted_mgmt(rx))
		return RX_DROP_UNUSABLE;
always droped by the flag WLAN_STA_MFP and I guess dropped by this piece of code:
		/*
		 * When using MFP, Action frames are not allowed prior to
		 * having configured keys.
		 */
		if (unlikely(ieee80211_is_action(fc) && !rx->key &&
			     ieee80211_is_robust_mgmt_frame(rx->skb)))
			return -EACCES;

In authsae : meshd-nl80211.c, remove the flag NL80211_STA_FLAG_MFP can receive PREP. 

May 8,2019
Ubuntu1804 sshd service:
1. Check status : sudo systemctl status ssh.service
2. Restart : sudo systemctl restart ssh.service
3. To disable the SSH service to start during system boot run: sudo systemctl disable ssh
jli@DENG-JEFFL:~$ sudo systemctl disable ssh
Synchronizing state of ssh.service with SysV service script with /lib/systemd/systemd-sysv-install.
Executing: /lib/systemd/systemd-sysv-install disable ssh
Removed /etc/systemd/system/sshd.service.
4. To enable it again type: sudo systemctl enable ssh
jli@DENG-JEFFL:~$ sudo systemctl enable ssh
Synchronizing state of ssh.service with SysV service script with /lib/systemd/systemd-sysv-install.
Executing: /lib/systemd/systemd-sysv-install enable ssh
Created symlink /etc/systemd/system/sshd.service → /lib/systemd/system/ssh.service.


====================================================
PREP is lost before ieee80211_iface_work(). Only mesh beacon is seen in this function. Only after (skb->pkt_type == IEEE80211_SDATA_QUEUE_AGG_START) is received, peer starts to receive PREP frame. Looks like the aggregation affect the PREP receiving. PREQ is broadcast so it is not affected.

May 6, 2019
$(STAGING_DIR_HOST)/bin/mkmylofw -B $(2) -i 0x0F92:0x6721:0x0001:0x0000 -s $(4) -R 255.255 \ : -R255.255 means to create dual image and upgrade 2 images in the flas.

When use shell statements in a Makefile, some tricks:

	if [ "$(CONFIG_PACKAGE_kmod-crypto-mhx)" = "y" ]; then \
		if [ "$(CONFIG_PACKAGE_uboot-ar9341-alpha)" = "y" ]; then \
			$(KDIR)/u-boot-ar9344-mhs/u-boot-1.1.4/tools/ubparams; \
			mv params $(KDIR_TMP); \	// Each statement must have a ';'
			$(STAGING_DIR_HOST)/bin/mkmylofw -B $(2) -i 0x0F92:0x6721:0x0002:0x000A -s $(4) \
				-p0x0:0x80000:al::u-boot:$(KDIR)/u-boot-ar9341-alpha/u-boot-1.1.4/u-boot.bin \
				-p0x80000:0x40000:al::u-boot-env:$(KDIR_TMP)/params \
				-p0x100000:0x200000:al:0x80060000:kernel:$(KDIR_TMP)/vmlinux-$(2).uImage \
				-p0x300000:0x18c0000:::rootfs:$(KDIR)/root.$(1) \
				$(BIN_DIR)/$(2)-factory-$(3)-AES256$(VERSION)$(REVISION).bin; \
		fi; \			// 1) Must have a ';'. 2)No blank lines after it are allowed.
		$(STAGING_DIR_HOST)/bin/mkmylofw -B $(2) -i 0x0F92:0x6721:0x0002:0x000A -s $(4) \

Mesh metric improvement:
1. Reduce MESH_BITRATE_AVG_WEIGHT : the Minstrel probe frames vibrate the tx rates. So "rate" is very dynamic. sta->bitrate_avg is in 1Kbps. Default MESH_BITRATE_AVG_WEIGHT=40 reduced to 10.
2. Increase the weight of sta->avg_signal : low signal node should be removed faster. Default signal_avg_percent=5 increased to 50. sdata->u.mesh.mshcfg.rssi_threshold is signed. ewma_read(&sta->avg_signal) returns PLUS rssi. 
3. Increase the weight of sta->fail_avg : this is a percentage. When calculated with "sta->bitrate_avg"[in 1Kbps, e.g, 65000 for 65Mbps], PER is too small[65000 compared with 8(%)].
May 3, 2019
aes256 option can be seen in both menuconfig and kernel_menuconfig in pDDL. But in pMDDL, crypto-mhx only shows in kernel_menuconfig. To show it in menuconfig, need to add :
define KernelPackage/crypto-mhx
  TITLE:=MHX crypto cipher CryptoAPI module
  KCONFIG:=CONFIG_CRYPTO_MHX
  FILES:=$(LINUX_DIR)/crypto/crypto_mhx.ko
  AUTOLOAD:=$(call AutoLoad,09,crypto_mhx)
  $(call AddDepends/crypto)
endef

$(eval $(call KernelPackage,crypto-mhx))

In the target/linux/modules/crypto.mk file. AND, in make menuconfig, make sure select kmod-crypto-mhx by "*" instead of "M". "M" doesn't generate crypto_mhx.ko. 

May 2, 2019
About the iw station dump:
inactive time:  590 ms //NL80211_STA_INFO_INACTIVE_TIME
rx bytes:       35355305 //NL80211_STA_INFO_RX_BYTES
rx packets:     299092 //NL80211_STA_INFO_RX_PACKETS
tx bytes:       30347855 //NL80211_STA_INFO_TX_BYTES
tx packets:     237437 //NL80211_STA_INFO_TX_PACKETS
tx retries:     8361 //NL80211_STA_INFO_TX_RETRIES
tx failed:      574 //NL80211_STA_INFO_TX_FAILED<---sinfo->tx_failed=sta->tx_retry_failed<---acked = !!(info->flags & IEEE80211_TX_STAT_ACK), if !acked ++. 

In mesh metric calculation, PER comes from sta->fail_avg. Looks like existing need to improve : fail_avt increase weight; bitrate_avg decrease weight because the RC has random rates; signal_avg_percent can keep as is. And potentially path_switch_threshold (10, 50, 90).

May 1, 2019
/**
 * enum nl80211_plink_state - state of a mesh peer link finite state machine
 *
 * @NL80211_PLINK_LISTEN: initial state, considered the implicit
 *	state of non existant mesh peer links
 * @NL80211_PLINK_OPN_SNT: mesh plink open frame has been sent to
 *	this mesh peer
 * @NL80211_PLINK_OPN_RCVD: mesh plink open frame has been received
 *	from this mesh peer
 * @NL80211_PLINK_CNF_RCVD: mesh plink confirm frame has been
 *	received from this mesh peer
 * @NL80211_PLINK_ESTAB: mesh peer link is established
 * @NL80211_PLINK_HOLDING: mesh peer link is being closed or cancelled
 * @NL80211_PLINK_BLOCKED: all frames transmitted from this mesh
 *	plink are discarded
 * @NUM_NL80211_PLINK_STATES: number of peer link states
 * @MAX_NL80211_PLINK_STATES: highest numerical value of plink states
 */
enum nl80211_plink_state {
	NL80211_PLINK_LISTEN,
	NL80211_PLINK_OPN_SNT,
	NL80211_PLINK_OPN_RCVD,
	NL80211_PLINK_CNF_RCVD,
	NL80211_PLINK_ESTAB,
	NL80211_PLINK_HOLDING,
	NL80211_PLINK_BLOCKED,

	/* keep last */
	NUM_NL80211_PLINK_STATES,
	MAX_NL80211_PLINK_STATES = NUM_NL80211_PLINK_STATES - 1
};

ath9k power set by ar9003_set_txdesc(), word 11[TPC_0]:
	ACCESS_ONCE(ads->ctl11) = (i->pkt_len & AR_FrameLen)
		| (i->flags & ATH9K_TXDESC_VMF ? AR_VirtMoreFrag : 0)
		| SM(i->txpower, AR_XmitPower)
But the printk shows i->txpower is always 0x3f no matter what the txpower is set.
0xb8108004 : Control ACK/CTS rate.
0xb81080e8 : Control ACK/CTS power. In pMDDL2450 it is defaulted to 0x3f3f3f3f, maximum ACK power. By test on a monitor interface check ACK power, this register doesn't affect.

Apr 30, 3019
In open mesh mode : rssi_threshold_check() only checks when mesh is in NL80211_PLINK_LISTEN status. In LISTEN state, the IW command still dumps this station. Than means the STA is alread created in the STA list. 

Once the mesh status turns into ESTAB, rssi_threshold_check() will not be called. Even if the radio contition deteriorates to -9XdBm, the IW still dumps the mesh plink as ESTAB status. Looks like after married, the peers will never separate. 

Apr 29, 2019
In a pMDDL2450 board. In function void ath_start_rfkill_poll(struct ath_softc *sc)
{
	struct ath_hw *ah = sc->sc_ah;

	if (ah->caps.hw_caps & ATH9K_HW_CAP_RFSILENT)
		wiphy_rfkill_start_polling(sc->hw->wiphy);
}

Print ==MHX(ath_start_rfkill_poll) ah=830fc010, ah->caps.hw_caps=000809fd. 
enum ath9k_hw_caps {
        ATH9K_HW_CAP_HT                         = BIT(0),
        ATH9K_HW_CAP_RFSILENT                   = BIT(1),
        ATH9K_HW_CAP_AUTOSLEEP                  = BIT(2),
        ATH9K_HW_CAP_4KB_SPLITTRANS             = BIT(3),
        ATH9K_HW_CAP_EDMA                       = BIT(4),
        ATH9K_HW_CAP_RAC_SUPPORTED              = BIT(5),
        ATH9K_HW_CAP_LDPC                       = BIT(6),
        ATH9K_HW_CAP_FASTCLOCK                  = BIT(7),
        ATH9K_HW_CAP_SGI_20                     = BIT(8),
        ATH9K_HW_CAP_ANT_DIV_COMB               = BIT(10),
        ATH9K_HW_CAP_2GHZ                       = BIT(11),
        ATH9K_HW_CAP_5GHZ                       = BIT(12),
        ATH9K_HW_CAP_APM                        = BIT(13),
#ifdef CPTCFG_ATH9K_PCOEM
        ATH9K_HW_CAP_RTT                        = BIT(14),
        ATH9K_HW_CAP_MCI                        = BIT(15),
        ATH9K_HW_WOW_DEVICE_CAPABLE             = BIT(16),
        ATH9K_HW_CAP_BT_ANT_DIV                 = BIT(17),
#else
        ATH9K_HW_CAP_RTT                        = 0,
        ATH9K_HW_CAP_MCI                        = 0,
        ATH9K_HW_WOW_DEVICE_CAPABLE             = 0,
        ATH9K_HW_CAP_BT_ANT_DIV                 = 0,
#endif
        ATH9K_HW_CAP_DFS                        = BIT(18),
        ATH9K_HW_CAP_PAPRD                      = BIT(19),
        ATH9K_HW_CAP_FCC_BAND_SWITCH            = BIT(20),
};

==================================================================
Use pMDDL2450-Japan code in a pMDDL2450 radio. During boot-up the iw command has data bus error. Use a correctly calibrated Japan radio no errors. Maybe the eeprom9003.c code read un-matching channels from EEPROM. 

Apr 25, 2019
pMDDL mesh : A symptom is seen --- the iw station dump sees a -89dBm signal with a station, but the ping wouldn't work. Increas the power level until the ping works, then the mesh path works too. This means some signal levels are cheating. A reasonable signal level reading doesn't guarantee a good data traffic. In this case, the HWMP protocol may choose a station as the next hop, but in reality the ARP packet can't pass. 

The point is to remove those fake nodes. Maybe set up a higher RSSI threshold below which a node can't be a path candidate. Or Increase the PER weight in metric calculation. 

Apr 23, 2019
pMDDL2458 FAN control uses LED exported as a bit. But :
1. The pca953x driver saves output register values to memory. When it outputs bits, it uses the memory stored values instead of reading back the current output status.
2. The RS485 driver directly accesses the pca953x chip by using i2c functions. After the RS485 drivers modifies the pca953x, the Linux pca953x io expander driver doesn't know that. When the IO driver outputs a value, that value doesn't reflect the latest change made by RS485 driver and will overwrite that, which destroys the RS485 functions.
==========================================================================================
Sometimes, the iw station dump only dumps the MAC address of a STA. When this happens, the ARP req/resp can not pass between this pair. Not sure if HWMP packets passes well.

Apr 22, 2019
Current pMDDL frequency list:
#if defined(CONFIG_MHX_PMDDL2350)
/* 2.3G band: band [2300, 2399] */
#define START_FREQ_STEPONE_2G   2300
#define END_FREQ_STEPONE_2G     2399
#elif defined(CONFIG_MHX_PMDDL2550)
/* 2.5G band: band [2490, 2579] */
#define START_FREQ_STEPONE_2G   2490
#define END_FREQ_STEPONE_2G     2579
#else
/* 2.4G band: band [2390, 2490], low-15MHz/high-10MHz extra bands for internal test */
#define START_FREQ_STEPONE_2G   2390
#define END_FREQ_STEPONE_2G     2489
#endif
#define MAX_NUM_CH_STEPONE_2G   (END_FREQ_STEPONE_2G - START_FREQ_STEPONE_2G + 1)

/* 5G band: [5000, 5845], total channel number = 846, step=1MHz */
#define START_FREQ_STEPONE_5G   5000
#define END_FREQ_STEPONE_5G     5845
#define MAX_NUM_CH_STEPONE_5G   ((END_FREQ_STEPONE_5G - START_FREQ_STEPONE_5G) + 1)

Apr 18, 2019
Secure mesh authsae sees a symptom : iw wlan0 station dump can not dump a nearby node with very good signal. some sae.conf parameters:
1. giveup : the number of errors and/or state-machine resyncronizations
	allowed before the conversation is abandoned. Default
	is 5. Used by "if (peer->sync > giveup_threshold) ..." 

if (strncmp(buf, "giveup", strlen("giveup")) == 0) {
            config->giveup_threshold = atoi(ptr);
        }	// max=0xffffffff. 32 bit in ath9k.

2. blacklist: how long to ignore peers which fail authentication.
	Default is 30 seconds.
3. retrans: the amount of seconds to wait before retransmitting.
	Default is 3.
4 thresh: the number of open connections allowed before
	anti-clogging tokens are demanded. Default is 5.

Apr 17, 2019
In ssh, "reset" command clears ALL consol history while "clear" only clears current screen.

Apr 16, 2019
Chip supported bands are defined in EEPROM, in ath9k_init_softc():
		ah->disable_2ghz = pdata->disable_2ghz;
		ah->disable_5ghz = pdata->disable_5ghz;	// read from EEPROM
To distinguish ar9341 and ar9344:
In ar9341:
root@UserDevice:~# mhx -reg get 0xb8060090
Register 0xb8060090 has value 0x00010123
In ar9344:
root@UserDevice:~# mhx -reg get 0xb8060090
Register 0xb8060090 has value 0x00002122

============================================This can not distinguish:
	ath_dbg(common, ANI, "ver %d.%d opmode %u chan %d Mhz\n",
		ah->hw_version.macVersion,
		ah->hw_version.macRev,
		ah->opmode,
		chan->channel);
In ar9341:
[ 3841.560000] ath: phy0: ah->misc_mode 0x10000004
[ 3841.890000] ath: phy0: ver 768.0 opmode 2 chan 2477 Mhz	// macVersion = 0x300

In ar9344:
[ 1928.680000] ath: phy0: ah->misc_mode 0x10000004
[ 1928.930000] ath: phy0: ver 768.0 opmode 2 chan 2477 Mhz

Apr 15, 2019
Compile the github : simonwunderlich/FFT_eval project.
1. git clone https://github.com/simonwunderlich/FFT_eval.git. Cd to FFT_eval
2. gcc -O2 -Wall -pedantic -c -o fft_eval.o fft_eval.c -I /usr/include/SDL/
3. gcc -lSDL -lSDL_ttf -o fft_eval fft_eval.o -L /usr/share/doc/libsdl1.2-dev/  -lSDL -lm -lSDL_ttf


Apr 11, 2019
iw "$ifname" set bitrates legacy-2.4 6 9 12 18 24 36 ht-mcs-2.4 "$rate" : This can not fix the rate. It behaves like a ceiling rate instead of FIXED rate.
echo "$rate" > /sys/kernel/debug/ieee80211/"$phy"/rc/fixed_rate_idx : This really fixes the tx rate.

Apr 10, 2019
Flent net tester: 
1. irtt : The :command:`irtt` tool is highly recommended for UDP measurements. IRTT measures round-trip time and other latency related metrics using UDP packets sent on a fixed period, and produces both text and JSON output. That test needs a irtt server running on server side.
2. D-ITG Tool : If the server side doesn't install Flent, this test can not be done. See:
jli@DENG-JEFFL:~/project/work/g3/pddl-branch$ ll /usr/share/doc/flent/misc/
total 52
drwxr-xr-x 2 root root 4096 Mar 21 16:20 ./
drwxr-xr-x 4 root root 4096 Mar 21 16:20 ../
-rw-r--r-- 1 root root 5464 Apr 17  2018 ditg-control-server.py.gz
-rw-r--r-- 1 root root 2392 Apr 17  2018 ditg-ignore-client-log.patch
-rw-r--r-- 1 root root 2434 Apr 17  2018 file_iterate.c.gz
-rw-r--r-- 1 root root 3720 Apr 17  2018 iperf-server.py
-rw-r--r-- 1 root root  514 Apr 17  2018 Makefile
-rw-r--r-- 1 root root 2618 Apr 17  2018 tc_iterate.c.gz
-rw-r--r-- 1 root root 1755 Apr 17  2018 tcpdump-wrapper.py.gz
-rw-r--r-- 1 root root 1905 Apr 17  2018 testcontrol-web-service.py.gz
-rw-r--r-- 1 root root   37 Apr 17  2018 test-exec.sh
-rw-r--r-- 1 root root 3815 Apr 17  2018 wifistats_iterate.c.gz
Due to the hassle of using D-ITG, it is recommended to install :command:`irtt` instead and use that for VoIP tests.


Apr 2, 2019
Continue the weekend test. This morning  (Tuesday) found a reauth really happened once last night:
setting reauth timer for 272800 seconds
==MHX(process_authentication_frame), sizeof(long long)=8, expire=272800000000[0x3f8425a8S
state of 00:0f:92:fb:6f:88 is now (3) ACCEPTED

This means the 272800(about 3 days) timer works fine.

The issue is after the reauth the link is broken. This means the key setting failure is a high probability even with low traffic (1Mbps). This is with hw encryption. HW encryption with secure mesh has a know bug in setting hw keys. When set the reauth time to 20sec, this can be very obvious. But with sw cryption, the worst case is packet loss during the key exchange during a TCP iperf.

Apr 1, 2019
Weekend pMDDL2450---pMDDL2458 mesh h/w encryption test. lifetime = 272800;

[  4] 231434.0-231435.0 sec   123 KBytes  1.01 Mbits/sec   0.714 ms    0/   86 (0%)
[  4] 231435.0-231436.0 sec   122 KBytes  1000 Kbits/sec   1.723 ms    0/   85 (0%)
[  4] 231436.0-231437.0 sec   122 KBytes  1000 Kbits/sec   3.854 ms    0/   85 (0%)
[  4] 231437.0-231438.0 sec   121 KBytes   988 Kbits/sec  10.003 ms    0/   84 (0%)
[  4] 231438.0-231439.0 sec   121 KBytes   988 Kbits/sec   7.299 ms    1/   85 (1.2%)
[  4] 231439.0-231440.0 sec   122 KBytes  1000 Kbits/sec   2.522 ms    0/   85 (0%)
Totally abou 2.6 days. No reauth has happened.
This trick is :  ull_reauth = ((unsigned long long int)pmk_expiry * 1000000L); pmk_expiry is (unsigned long) type . Must force to (unsigned long long) before calculation.

Mar 28, 2019
git clone Flent project and compare the git source code with the Ubnt804 unstalled Flent tool:
jli@DENG-JEFFL:~/project/flent$ pwd
/home/jli/project/flent
jli@DENG-JEFFL:~/project/flent$ git pull
Already up to date.
jli@DENG-JEFFL:~/project/flent$ meld ./flent /usr/share/flent/flent	//usr/share/flent is installed by Ubnt18.04 Synaptic Package Manager.

They're almost same. The source code are Python and Shell and don't need compile.
============
Authsae : In /var/run/authsae-wlan0.cfg. set a very long lifetime=72000 (20hour). This suppose to basically disable the reauth between mesh points. 
But still see this message in about 1hour:
sae_debug(SAE_DEBUG_PROTOCOL_MSG, "setting reauth timer for %d seconds\n", pmk_expiry);
peer->t1 = srv_add_timeout(srvctx, SRV_SEC(pmk_expiry), reauth, peer);

The meshd-nl80211 shows print:
setting reauth timer for 72000 seconds
state of 00:0f:92:fb:6c:21 is now (3) ACCEPTED

The problem is SRV_SEC(pmk_expiry) makes the 72000sec to a very long 72GuSec that overflows the parameter "unsigned long usec". The 32bit represents maximum 4GuSec, about 1h12min.

Mar 26, 2019
In pMDDL (and 3Pi), secure mesh mode, the "iw phy "$phy" set ccathresh 1 "$ccathresh" command causes segmentation fault and kernel dump.

[   23.150000] br-lan: port 2(eth1) entered forwarding state
[   23.150000] br-lan: port 2(eth1) entered forwarding state
[   25.080000] device wlan0 entered promiscuous mode
[   25.150000] br-lan: port 2(eth1) entered forwarding state
[   25.720000] Data bus error, epc == 831219d0, ra == 831219c8
[   25.720000] Oops[#1]:
[   25.720000] CPU: 0 PID: 1131 Comm: iw Not tainted 3.10.36 #1
[   25.720000] task: 82defaa0 ti: 82fe4000 task.ti: 82fe4000
[   25.720000] $ 0   : 00000000 009e113c deadc0de 830e1460
[   25.720000] $ 4   : b8109e1c b8100000 0007f000 0007f000
[   25.720000] $ 8   : 00000020 800644f0 5c9a77bc 0000046b
[   25.720000] $12   : 02000000 82e1102c 00000000 00080001
[   25.720000] $16   : fff80fff 00009e1c 830f1460 0007f000
[   25.720000] $20   : 00000000 82d23f00 00000004 0000002c
[   25.720000] $24   : 00000000 76f59680                  
[   25.720000] $28   : 82fe4000 82fe5ad8 83526c60 831219c8
[   25.720000] Hi    : 00000027
[   25.720000] Lo    : 001797ba
[   25.720000] epc   : 831219d0 ath_start_rfkill_poll+0x270/0x3dc [ath9k]
[   25.720000]     Not tainted
[   25.720000] ra    : 831219c8 ath_start_rfkill_poll+0x268/0x3dc [ath9k]
[   25.720000] Status: 1100fc03 KERNEL EXL IE 
[   25.720000] Cause : 0080001c
[   25.720000] PrId  : 0001974c (MIPS 74Kc)
[   25.720000] Modules linked in: ftdi_sio rndis_host cdc_ether cdc_eem ax88179_178a asip
[   25.720000] Process iw (pid: 1131, threadinfo=82fe4000, task=82defaa0, tls=77009440)
[   25.720000] Stack : 00000006 0000000b 00000068 000000d7 00000000 832e8010 0000007f 000
[   25.720000]    00000000 832a0af8 00000001 00000003 8316bffc 82d23f00 832e8010 0000007f
[   25.720000]    00000000 831237b4 000000d0 80217994 00000000 07735940 82d23f00 00000001
[   25.720000]    82fc7a00 82d23f00 8316bffc 830e0000 82fe5bf0 00000000 00000000 83215bf8
[   25.720000]    82d52e00 8024306c 8316bffc 82fe5bf0 82e11014 83156038 82d23f00 82d23f00
[   25.720000]    ...
[   25.720000] Call Trace:
[   25.720000] [<831219d0>] ath_start_rfkill_poll+0x270/0x3dc [ath9k]
[   25.720000] [<831219c8>] ath_start_rfkill_poll+0x268/0x3dc [ath9k]
[   25.720000] 
[   25.720000] 
[   25.720000] Code: 00852021  00108027  8e45cf2c <00501024> 00538025  02002021  0c0622e 
[   25.720000] ---[ end trace 49a75d4e090d976d ]---
[   33.050000] ------------[ cut here ]------------

[Solution] : This looks like a conflict between iw set ccathresh command and meshd-nl80211 daemon. Add at least 2sec delay after "authsae_start_interface || failed=1" where meshd-nl80211 daemon is started. 

Mar 22, 2019
Installed Flent on the Fedora13's VM Ubnt-Mate-16. But finally found the server side doesn't need the Flent package installed. The server side only needs a Netperf daemon to test against with a Flent GUI client.:
In order for Flent to work properly, you need a server to test against. That server needs to be running Netperf in server mode. ”$ sudo netserver &“。 When run netserver, an error shows up but looks like that erro is just a warning. PS command shows netserver is already up and running. On the Ubnt-1804 machine, start a Flent GUI client and the t/p can be measured.

pMDDL2458 serial page:
1. Console : uci get comport2.com2.COM2_Port_Status. DataMode=B; ConsoleMode=A; The physical USB-Mini port
2. Data : uci get comport-S1.com2.COM2_Port_Status. DataMode=B; IdleMode=A; The physical RS232 port.
3. Gadget : uci get comport-GS0.com2.COM2_Port_Status. DataMode=B; IdleMode=A; The physical USB port.

Mar 21, 2019
Ubuntu18.04 SSH server:
service ssh status; service ssh stop; service ssh start

How to enable the mac80211 tx latency analysis:
1. At a glance:
root@UserDevice:~# find sys/kernel/debug/ieee80211/ -name *late*
sys/kernel/debug/ieee80211/phy0/netdev:wlan0/stations/00:0f:92:fa:37:c3/tx_latency_stat_reset  
sys/kernel/debug/ieee80211/phy0/netdev:wlan0/stations/00:0f:92:fa:37:c3/tx_latency_stat        
sys/kernel/debug/ieee80211/phy0/statistics/tx_latency   // This is the config of latency enable/disable and bins. MUST set it before any STA connection.

2. Wifi down to disconnect any current connections.
root@UserDevice:~# wifi down                                                                   

3. Configure the latency bins. Totally 5 bins, unit is mS.
root@UserDevice:~# echo "1,2,3,5,10" > sys/kernel/debug/ieee80211/phy0/statistic               
s/tx_latency                                                                                   
root@UserDevice:~# cat sys/kernel/debug/ieee80211/phy0/statistics/tx_latency                   
1,2,3,5,10,    

4. wifi to reconnect STAs. And check the latency statistics:
root@UserDevice:~# cat sys/kernel/debug/ieee80211/phy0/netdev\:wlan0/stations/00               
\:0f\:92\:fa\:37\:c3/tx_latency_stat                                                           
Station                 TID     Max     Avg     <=1     1-2     2-3     3-5     5-10    10<    
00:0f:92:fa:37:c3                                                                              
                        0       3       0       59      2       1       0       0       0      
                        1       0       0       0       0       0       0       0       0      
                        2       0       0       0       0       0       0       0       0      
                        3       0       0       0       0       0       0       0       0      
                        4       0       0       0       0       0       0       0       0      
                        5       0       0       0       0       0       0       0       0      
                        6       0       0       0       0       0       0       0       0      
                        7       1       1       2       0       0       0       0       0      
                        8       0       0       0       0       0       0       0       0      
                        9       0       0       0       0       0       0       0       0      
                        10      0       0       0       0       0       0       0       0      
                        11      0       0       0       0       0       0       0       0      
                        12      0       0       0       0       0       0       0       0      
                        13      0       0       0       0       0       0       0       0      
                        14      0       0       0       0       0       0       0       0      
                        15      0       0       0       0       0       0       0       0 
Max: worst case latency is 3mS
Avg: (sum of all latencies) / (amount of Tx frames sent from interface), unit is mS

5. Reset the bin statstics:
root@UserDevice:~# echo 1 > sys/kernel/debug/ieee80211/phy0/netdev\:wlan0/stations/00\:0f\:92\:fa\:37\:c3/tx_latency_stat_reset

Mar 20, 2019
CCA control:
1. In pDDL, there are 2 controls:
root@UserDevice:~# uci show wireless | grep cca                                                
wireless.radio0.phycca=-1                                                                      
wireless.radio0.ctrlcca=-1                                                                     
wireless.radio0.ccathresh=127
root@UserDevice:~# cat sys/kernel/debug/ieee80211/phy0/ath9k/cca_phy 
0x00000000
root@UserDevice:~# cat sys/kernel/debug/ieee80211/phy0/ath9k/cca_ctrl 
0x00000000
cca_phy--->common->phy_cca_thrshld---> If not 0, then goes to Reg0x9e1c bit[12..19](cf_thresh62). This is the real acting point.
cca_ctrl--->common->ctrl_cca_thrshld---> If not 0, then goes to Reg0x9e20 bit[0..8] (min_CCApwr_thr_0). This looks not effective.
In pDDL, both are 0 so that only the "wireless.radio0.ccathresh=127" setting takes effects. In package/kernel/mac80211/files/lib/netifd/wireless/mac80211.sh.ddl2, the "iw set phy0 ccathresh" command will do the work to set CCA thres62 to 127.

2. In pMDDL, the 2 controls combine to one  sys/kernel/debug/ieee80211/phy0/ath9k/cca_ctrl:
root@UserDevice:~# uci show wireless | grep cca                                                
wireless.radio0.phycca=-1                                                                      
wireless.radio0.ctrlcca=-1                                                                     
wireless.radio0.ccathresh=127                                                                  
root@UserDevice:~# cat sys/kernel/debug/ieee80211/phy0/ath9k/cca_ctrl                          
0x0001ff7f             
    u16 phy_cca_thrshld;	/* thresh62 */ // same as pDDL, Reg0x9e1c
    u16 ctrl_cca_thrshld;	/* mincca_thresh */ // same as pDDL Reg0x9e20
    u16 max_cca_pwr;		/* maxcca_pwr in nfcal */ // This is newly added. cca_ctrl>>20&0xff--->common->max_cca_pwr---> If not 0, goes to NF regs defined as below:
	static const u32 ar9300_cca_regs[6] = {
		AR_PHY_CCA_0,	//AGC0, 0x9e1c, cf_maxCCApwr_0 bit[0..8]
		AR_PHY_CCA_1,	//AGC1, 0xae1c
		AR_PHY_CCA_2,	//AGC2, 0xbe1c
		AR_PHY_EXT_CCA,	// channel0 reg, 0x9830
		AR_PHY_EXT_CCA_1,	// channel1 reg, 0xa830
		AR_PHY_EXT_CCA_2,	// channel2 reg, 0xb830
	};
pMDDL doesn't use "iw phy0 set ccathresh" command so that "wireless.radio0.ccathresh=127" is obsoleted. Use "wireless.radio0.phycca" for the Thresh62. 

3. Both platforms have a bug.
The common->phy_cca_thrshld, common->ctrl_cca_thrshld are used only in ar9003_hw_process_ini(). This is called by ath9k_hw_process_ini(), which is called by ath9k_hw_reset() only once when chip is brought up. After the chip h/w reset, those values will not take effects at all no matter what you write to the debugfs. 

So far ignore the bug, only use "wireless.radio0.ccathresh=121" + "iw set ccathresh" command to set CCA threshold.

Mar 19, 2019
About the random noise injection, Jason mentioned it's not the whole band. Only in CF,LeftEdge and RightEdge, a very narrow band injection blocks TX. This issue looks not that serious then.

CMake（Cross platform Make）是一个开源的跨平台自动化构建工具， 可以跨平台地生成各式各样的 makefile 或者 project 文件， 支持利用各种编译工具生成可执行程序或链接库。CMake 自己不编译程序， 它相当于用自己的构建脚本 CMakeLists.txt，叫各种编译工具集去生成可执行程序或链接库。 一般用于编译程序的 makefile 文件比较复杂，自己去编写比较麻烦， 而利用 CMake ，就可以编写相对简单的 CMakeLists.txt ，由 CMake 根据 CMakeLists.txt 自动生成 makefile，然后就可以用 make 生成可执行程序或链接库。 
qmake 工具有两种工作模式，它首先根据项目文件夹的头文件、源文件、图形界面文件、资源文件等，生成标准的 .pro 项目文件。然后使用第二种工作模式， qmake 可以根据 .pro 文件自动生成 Makefile 文件，我们就只需要“再”运行一下 make 就行了。

qmake等同于CMake。最后仍然需要运行make或者”mingw32-make all“来最终编译。为了在 Windows 系统里可以使用 GNU 工具，诞生了 MinGW（Minimalist GNU for Windows） 项目，利用 MinGW 就可以生成 Windows 里面的 exe 程序和 dll 链接库。

Mar 15, 2019
AR_DIAG_IGNORE_VIRT_CS: This flag set looks block the mcast TX when random noise injected.
UDP transmitter with aggregation still back off. But pure 11g wthout aggregration doesn't backoff. This testifies the ACK is received. It is not because the ACK not receving that blocks the TX.

1. Multicast/Broadcast :
Transmitter is not blocked when noise is injected.

2. UDP Iperf T/P:
No side effect is seen to UDP traffic so far without injection. When a weak random noise injection is applied, the UDP Iperf T/P drops drastically. The symptom looks like the TX is blocked.
Note: This symptom is not related to the BACKOFF mechanism. No matter the BACKOFF mechanism is ON or OFF, this issue exists.
How to solve:
When we reduce the aggregation length to minimum (8K) from the default 64K, the link can withstand -60dBm random noise injection. The price : a shorter aggregation reduces the T/P value. Looks like the longer the aggregation, the lower the immunization. We saw that in pDDL900/1800 before.

3. TCP Iperf T/P:
The TCP T/P drops a lot even without noise injection. We saw a lot TX conflicts in an analyzer. Reducing the aggregation length doesn't help on this. The TX collision makes TCP almost unusable. TCP works, but very low T/P. I don't know how this will affect the end users.

Mar 14, 2019
1. REG_SET_BIT(ah, AR_D_GBL_IFS_MISC, AR_D_GBL_IFS_MISC_IGNORE_BACKOFF);
looks disable the CSMA/CA backoff mechanism. Mcast/Bcast shows it does un-block the transmitter when a random noise injected. But Iperf TCP t/p looks very low.
2. REG_SET_BIT(ah, AR_DIAG_SW, AR_DIAG_FORCE_CH_IDLE_HIGH);
Doesn't try if this un-block the sender. But it affects Iperf TCP T/P the same as AR_D_GBL_IFS_MISC_IGNORE_BACKOFF. It is said this bit disable the CSMA/CA.
3. Set both bits to HIGH has same result. TCP t/p low.
4. Only STA side turn on BACKOFF mechanism solves the tcp t/p problem. If only one side backoff can prevent collision. But still looks like a bit lower than normal.

Mar 12, 2019
Use apt-get update, and then apt-get install qtcreator to install qtcreator. This is an IDE that does up and running but in Tools->Options->Build&Run, couldn't see any "QT Versions". And when opened a old QT project, it doesn't build it at all. In a console, qmake and qtconfig run into error. 

Install qt5-default by Synaptic Package Manager. Then qmake works.

Increase CYCPWR_THR1 to 30 reduces the RX sensitivity very much. So it is not usable. The NF calibration works normally no matter the CYCPWR_THR1 is 2 or 30. But only 30 unblocks the TX.

Mar 8, 2019
Per Jishant: 
1. minCCApwr_0 is the noise floor register. In art it is defined as :
{"BB_cca_b0"                   , "minCCApwr_0"                 , 0x00009e1c, 28, 20},

2. cf_thresh62 is the thresh62 register. In ART it is defined as:
{"BB_cca_b0"                   , "cf_thresh62"                 , 0x00009e1c, 19, 12},
In driver this can be read by:
root@UserDevice:~# echo 0x9e1c > sys/kernel/debug/ieee80211/phy0/ath9k/regidx 
root@UserDevice:~# cat sys/kernel/debug/ieee80211/phy0/ath9k/regval 
0x18f7ff24			// bit 12-19 is 0x7f=127 the max CCA value.

3. Others:
In ART:
{"BB_cca_b0"                   , "minCCApwr_0"                 , 0x00009e1c, 28, 20},
{"BB_cca_b0"                   , "cf_thresh62"                 , 0x00009e1c, 19, 12},
{"BB_cca_b0"                   , "cf_cca_count_maxC"           , 0x00009e1c, 11, 9 },
{"BB_cca_b0"                   , "cf_maxCCApwr_0"              , 0x00009e1c, 8 , 0 },
{"BB_cca_ctrl_2_b0"            , "thresh62_mode"               , 0x00009e20, 18, 18},
{"BB_cca_ctrl_2_b0"            , "NF_gain_comp_0"              , 0x00009e20, 17, 10},
{"BB_cca_ctrl_2_b0"            , "enable_minCCApwr_thr"        , 0x00009e20, 9 , 9 },
{"BB_cca_ctrl_2_b0"            , "minCCApwr_thr_0"             , 0x00009e20, 8 , 0 },

In driver:
/*
 * AGC 0 Register Map
 */
#define AR_AGC_BASE	0x9e00
#define AR_PHY_CCA_0            (AR_AGC_BASE + 0x1c)
#define AR_PHY_CCA_CTRL_0       (AR_AGC_BASE + 0x20)
/*
 * AGC 1 Register Map
 */
#define AR_AGC1_BASE	0xae00
#define AR_PHY_CCA_1                 (AR_AGC1_BASE + 0x1c)
#define AR_PHY_CCA_CTRL_1            (AR_AGC1_BASE + 0x20)
/*
 * AGC 2 Register Map
 */
#define AR_AGC2_BASE	0xbe00
#define AR_PHY_CCA_2                 (AR_AGC2_BASE + 0x1c)
#define AR_PHY_CCA_CTRL_2            (AR_AGC2_BASE + 0x20)


	static const u32 ar9300_cca_regs[6] = {
		AR_PHY_CCA_0,			// 0x9e1c. chain0
		AR_PHY_CCA_1,			// 0xae1c. chain1
		AR_PHY_CCA_2,			// 0xbe1c. chain2
		AR_PHY_EXT_CCA,			// 0x9830. chain0. set AR_PHY_EXT_CCA for extension channel, maybe for HT40
		AR_PHY_EXT_CCA_1,		// 0xa830. chain1
		AR_PHY_EXT_CCA_2,		// 0xb830. chain2
	};

Deaf mode: used in ART continuous transmit test:
{"BB_timing_control_5"         , "rssi_thr1a"                  , 0x00009810, 22, 16}, set it to 127 will make the unit deaf. phy <phyname> set rssiThr1 <RSSI Thr1 0-127|255> command can set this.

Mar 6, 2019
Jason tested on pDDL. CCA (thread62 register) works for OFDM pattern interference. But it doesn't help the non-OFDM type interference. When a white noise is injected, the TX blocks no matter what CCA value is.

Mar 4, 2019
Looks like the Tx side can not tcpdump to see it's own RTS packets. " iw phy0 set rts 10" on a AP as Tx. "tcpdump -i mon type ctl subtype  rts -env" can not see much RTS sending out. But on the Rx side, can see the flood of RTS from this Tx.

The test shows "iw set rts" command works, but how? 
1. Lowest level: ath_tx_fill_desc() ---> ath9k_hw_set_txdesc()[dummy bridge] ---> ar9003_set_txdesc() uses "ath_tx_info->flags & ATH9K_TXDESC_RTSENA" as the final step to determine RTS. 


2. Before calling ath9k_hw_set_txdesc(),  ath_tx_fill_desc()calls ath_buf_set_rate(), in which:
		if (rts || rates[i].flags & IEEE80211_TX_RC_USE_RTS_CTS) {
			info->rates[i].RateFlags |= ATH9K_RATESERIES_RTS_CTS;
			info->flags |= ATH9K_TXDESC_RTSENA;
		} else if (rates[i].flags & IEEE80211_TX_RC_USE_CTS_PROTECT) {
			info->rates[i].RateFlags |= ATH9K_RATESERIES_RTS_CTS;
			info->flags |= ATH9K_TXDESC_CTSENA;
		}
Here there're 2 controls: 2.1) rts is controlled ONLY by ath_tx_fill_desc() and ath_buf_set_rate() 2 functions; 2.2) rates[i].flags & IEEE80211_TX_RC_USE_RTS_CTS is controlled by rate control.

3. In rate control minstrel_ht_set_rate(), 
        if (offset > 0) {
                ratetbl->rate[offset].count = ratetbl->rate[offset].count_rts;
                flags |= IEEE80211_TX_RC_USE_RTS_CTS;
        }
        printk("=MHX(%s) offset=%d, flags=%08x\n", __func__, offset, flags);

means all retries other than offset=0 [ at which tx failed ], use RTS/CTS control. This is quite a flood I think. Because even in a normal good iperf traffic, the print is :
<0>[  798.180000] =MHX(ieee80211_tx_h_rate_ctrl) len=1536, rts=0, cts=0,
<0>[  798.180000] =MHX(ieee80211_tx_h_rate_ctrl) len=1536, rts=0, cts=0,
<0>[  798.180000] =MHX(ieee80211_tx_h_rate_ctrl) len=1536, rts=0, cts=0,
<0>[  798.190000] =MHX(minstrel_ht_set_rate) offset=0, flags=00000008
<0>[  798.190000] =MHX(minstrel_ht_set_rate) offset=1, flags=00000009
<0>[  798.190000] =MHX(minstrel_ht_set_rate) offset=2, flags=00000009
<0>[  798.190000] =MHX(ieee80211_tx_h_rate_ctrl) len=1536, rts=0, cts=0,
<0>[  798.190000] =MHX(ieee80211_tx_h_rate_ctrl) len=1536, rts=0, cts=0,
<0>[  798.190000] =MHX(ieee80211_tx_h_rate_ctrl) len=1536, rts=0, cts=0,
<0>[  798.190000] =MHX(ieee80211_tx_h_rate_ctrl) len=1536, rts=0, cts=0,

4. Completely disable RTS by:
ar9003_set_txdesc(struct ath_hw *ah, void *ds, struct ath_tx_info *i)
{
        struct ar9003_txc *ads = ds;
        int checksum = 0;
        u32 val, ctl12, ctl17;
        u8 desc_len;

        // printk("=MHX(%s) flags=0x%08x\n", __func__, i->flags);
        i->flags &= ~ATH9K_TXDESC_RTSENA;
Even with this fix, the intermediate interrupt of iperf traffic still happens with pMDDL2450. Looks like not a flooding RTS issue rather be a BAR issue:
                                                                                          
//pMDDL2450, AP TX side
                                                                                          
16:18:43.759883 1810392724us tsft 3.0 Mb/s 2412 MHz 11g/10Mhz -46dB signal [bit 29] BAR RA :00:0f:92:fb:48:f8 (oui Unknown) TA:00:0f:92:fb:0c:f8 (oui Unknown) CTL(4) SEQ(24048)     
16:18:43.802377 1810435205us tsft 3.0 Mb/s 2412 MHz 11g/10Mhz -45dB signal [bit 29] BAR RA :00:0f:92:fb:48:f8 (oui Unknown) TA:00:0f:92:fb:0c:f8 (oui Unknown) CTL(4) SEQ(24240)     
                                                                                          
// rx stuck, nothing received on STA receiver side during this 20 seconds.
//
.......................
16:19:04.334888 6.0 Mb/s [bit 15] BAR RA:00:0f:92:fb:0c:f8 (oui Unknown) TA:00:0f:92:fb:48:f8 (oui Unknown) CTL(4) SEQ(48)                                                      
16:19:04.350990 6.0 Mb/s [bit 15] BAR RA:00:0f:92:fb:0c:f8 (oui Unknown) TA:00:0f:92:fb:48:f8 (oui Unknown) CTL(4) SEQ(64)                                                          
16:19:04.652795 6.0 Mb/s [bit 15] BAR RA:00:0f:92:fb:0c:f8 (oui Unknown) TA:00:0f:92:fb:48:f8 (oui Unknown) CTL(4) SEQ(96)                                                          
16:19:04.670086 6.0 Mb/s [bit 15] BAR RA:00:0f:92:fb:0c:f8 (oui Unknown) TA:00:0f:92:fb:48:f8 (oui Unknown) CTL(4) SEQ(80)                                                          
k16:19:05.356750 6.0 Mb/s [bit 15] BAR RA:00:0f:92:fb:0c:f8 (oui Unknown) TA:00:0f:92:fb:48:f8 (oui Unknown) CTL(4) SEQ(128)                                                        
16:19:06.025154 6.0 Mb/s [bit 15] BAR RA:00:0f:92:fb:0c:f8 (oui Unknown) TA:00:0f:92:fb:48:f8 (oui Unknown) CTL(4) SEQ(144)                                                         
16:19:06.110440 6.0 Mb/s [bit 15] BAR RA:00:0f:92:fb:0c:f8 (oui Unknown) TA:00:0f:92:fb:48:f8 (oui Unknown) CTL(4) SEQ(160) 

Mar 1,2019
pMDDL and 3Pi ANI work fine, level adjusting well when in-band injection is applied. But the response is slower than pDDLar9331.

Feb 28, 2019
实现Captive Portal的方法有很多，常见的几种方式有：

    DNS拦截：拦截所有DNS请求且返回认证主机IP地址(设置了强制主页)，这样用户访问任何网站都会看到同一个强制主页。
    HTTP重定向：利用HTTP重定向功能将所有的HTTP请求重定向到认证主机，如此一来，用户的发出的任何HTTP请求都会得到重定向后的强制主页。当用户通过认证后，便不再重定向用户请求。
    IP跳转：把所有IP包里的目标地址改为认证主机地址，在认证主机上进行404跳转，当然是跳转到强制主页了。
    内核层劫持：当网关收到一个访问外网地址(80端口)的TCP SYN请求包后，立即伪造一个来自外网地址的TCP ACK包。客户端收到此伪造的响应后会误认为外网主机可以连接便再次发送ACK，此时TCP握手成功。客户端发起请求，网关再次劫持后回应ACK+PUSH包，其中就包含强制主页。



Feb 26, 2019
pMDDL/3Pi. Change admin password via WebUI will cause 
root@UserDevice:~# cat /etc/passwd
root:x:0:0:root:/:/bin/false
In this case the ssh and scp will not work for root. Change it to root:x:0:0:root:/:/bin/ash will work.

New 3Pi board with Fan:
root@UserDevice:~# i2cdetect -y 0
     0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f
00:          -- -- -- -- -- -- -- -- -- -- -- -- -- 
10: -- -- -- -- -- -- -- -- UU UU -- -- -- -- -- -- 	// 0x18: pca9557-1; 0x19: pca9557-2
20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
40: -- -- -- -- -- -- -- -- 48 -- -- -- -- -- -- -- 	// ADC : ???
50: 50 51 -- -- -- -- -- -- -- -- -- -- -- -- -- -- 	// EEPROM : takes 2 addresses
60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 	// tmp103 : temperature
70: -- UU -- -- -- -- -- --    



Feb 21, 2019
pMDDL rx intr stuck issue. Iperf UDP data AP--->STA, on STA side:
Found when RXLP counter statically stuck and will not recover, the TSFOOR counter jumps 10/sec. It is defined in ISR_S2 bit30, means "TSF out of range; indicates that the corrected TSF received from a beacon differs from the PCU's internal TSF by more than a (programmable) threshold". In normal working, TSFOOR doesn't jump. The STA rx will never recover when this happens.

Sometimes, when RXLP counter has glitches but can recover, the BMISS jumps 1/sec along with a slow RXLP, while TSFOOR remains same. BMISS : "The PCU indicates that is has not received a beacon during the previous N (N is programmable) beacon periods". There is a link break when this happens. On AP, uci set wireless.radio0.beacon_int=1000 [default=100 * 1.024mS]seems mitigates the UDP RX broken issues on STA side but doesn't solve it. Using shorter beacon_int=50 make STA RX worse. 

Feb 20, 2019
Two BulletAC units with WLE900VX 7AA wifi 3x3 MIMO cards. Use single CH2 antenna on one unit and get TCP T/P=9.3Mbps. When manuall turn off CH2 by command "iw phy phy0 set antenna 0x3", the TCP T/P drops to 673bps. 
Connect a single CH0 antenna, TCP T/P=93.3Mbps. When manuall turn off CH2 by command "iw phy phy0 set antenna 0x3", TCP T/P=97.4Mbps, looks same.
But when using 2 antennas, CH0+CH1 and CH2+CH1 have not difference. All can negotiate to NSS=2.
Conclusion: 1. CH0 is primary chain. 2. tx/rx chain mask looks no effect when use reduced antennas.

Feb 19, 2019
Port CONFIG_MHX_AP_INACT_MONITOR mechanism to pMDDL AP. The ath9k_hw_reset_pllrtc() doesn't fix AP RX interrupt stuck issue. It can sense it [note: not always!!!]but doesn't fix it. 

<0>[ 3809.040000] ==MHX1.0(ieee80211_ap_inactive_timer) 2Xtime has passed no response, reset chip.
<0>[ 3809.040000] ==MHX1.2(ieee80211_ap_inactive_timer) reset_pll_hw=1.
<3>[ 3809.040000] ath: phy0: reset PLL RTC due to AP inactivity!
<0>[ 3809.040000] ===MHX2.0(ath9k_hw_reset_pllrtc). reset PLL RTC due to AP inactivity!
<0>[ 3809.040000] ===MHX2.1(ath9k_hw_reset_pllrtc). RESET done!

But the sense is not right either. AP RX interrupt stuck for a long time but the reset still not triggered timely. This means the sinfo->inactive_time and sta->last_rx maybe the same : they all can not detect this failure.

How to debug procd and hotplug:
root@UserDevice:~# export DBGLVL=10
root@UserDevice:~# procd -h /etc/hotplug.json 
This will show more details than logread -f.

Feb 14, 2019
Bring back -DCONFIG_MHX_AP_INACT_MONITOR feature from pDDL to pMDDL. Because the origional hostapd level probe_client mechanism can not sense a BB or PHY stuck. If AP RX interrupt stuck, the hostapd level probe_client still success. 

ap_max_inactivity=xx is a main-line hostapd config, not microhard falvor. 

Driver sends NL80211_FEATURE_INACTIVITY_TIMER to hostapd ----> hostapd sets WPA_DRIVER_FLAGS_INACTIVITY_TIMER flag----> hostapd sets ap_max_inactivity to driver ----> hostapt sets up a ellop timer by eloop_register_timeout(hapd->conf->ap_max_inactivity, 0, ap_handle_timer, hapd, sta); so that every ap_max_inactivity the ap_handle_timer is called. ------> In ap_handle_timer() it uses hostapd_drv_get_inact_sec()->get_inact_sec()->i802_get_inact_sec()->i802_read_sta_data()->NL80211_CMD_GET_STATION->nl80211_get_station()->ieee80211_get_station()->sta_info_get_bss() to get STATION_INFO_INACTIVE_TIME of a STA. If the inactive time is too long, hostapd uses hostapd_drv_poll_client() to poll that one STA. But this sinfo->inactive_time updates even the AP RX interrupt stuck. This is a flaw of the origional scheme.

The Microhard MHX_AP_INACT_MONITOR takes use of the origional ap_max_inactivity number as interval in kerenel timer. This kernel driver part sends a null data packet to that STA and check sta->last_rx. This maybe different from sinfo->inactive_time check and work.

So the ap_max_inactivity has 2 uses: 1. The origional hostapd mechanism use ap_max_inactivity hostapd_drv_poll_client() and check sinfo->inactive_time to see if a STA is still there. If not, the STA is kicked out; 2. Microhard NL80211_FEATURE_INACTIVITY_TIMER uses this number as interval to send NULL packet and check sta->last_rx. This will both detect a lost STA and a local RX stuck issue.

Question is the origional mechanism uses ieee80211_probe_client() to send a NULL packet every ap_max_inactivity seconds ( default 30 sec ). The Microhard mechanism uses ieee80211_send_nullfunc_ap() to send a NULL packet. Basically they're the same thing. The difference is origional mechanism checks sinfo->inactive_time, which may be incorrect, and Microhard checks sta->last_rx. Will the 2 conflict? 

Feb 13, 2019
pMDDL STA side, during Iperf test, the STA side disconnects all suddenly. RX interrupt stuck. Monitor interface mon tcpdump can see nothing, even can not see AP beacons. But the station dump on STA still sees the AP inactive time fine. No-encryption mode.


nl80211: Event message available
nl80211: Drv Event 64 (NL80211_CMD_NOTIFY_CQM) received for wlan0
nl80211: Event message available
nl80211: Drv Event 64 (NL80211_CMD_NOTIFY_CQM) received for wlan0
RTM_NEWLINK: ifi_index=11 ifname=wlan0 master=5 operstate=33554432 ifi_flags=0x1003 ([UP])
nl80211: Add ifindex 5 for bridge br-lan
nl80211: Add own interface ifindex 5
nl80211: ifindex 5 already in the list
RTM_NEWLINK: ifi_index=11 ifname=wlan0 master=5 operstate=33554432 ifi_flags=0x1003 ([UP])
nl80211: Add ifindex 5 for bridge br-lan
nl80211: Add own interface ifindex 5
nl80211: ifindex 5 already in the list
RTM_NEWLINK: ifi_index=11 ifname=wlan0 operstate=33554432 linkmode=16777216 master=5 ifi_f
lags=0x1003 ([UP])
RTM_NEWLINK: ifi_index=11 ifname=wlan0 wext ifi_flags=0x1043 ([UP][RUNNING])
nl80211: Event message available
nl80211: Drv Event 20 (NL80211_CMD_DEL_STATION) received for wlan0
nl80211: Delete station 00:0f:92:fb:0c:f8
nl80211: Event message available
nl80211: Drv Event 39 (NL80211_CMD_DEAUTHENTICATE) received for wlan0
nl80211: MLME event 39 (NL80211_CMD_DEAUTHENTICATE) on wlan0(00:0f:92:fb:48:f8) A1=00:0f:9
2:fb:0c:f8 A2=00:0f:92:fb:48:f8
nl80211: MLME event frame - hexdump(len=26): c0 00 00 00 00 0f 92 fb 0c f8 00 0f 92 fb 48 
f8 00 0f 92 fb 0c f8 00 00 04 00
nl80211: Deauthenticate event
wlan0: Event DEAUTH (12) received
wlan0: Deauthentication notification
wlan0:  * reason 4 (locally generated)
wlan0:  * address 00:0f:92:fb:0c:f8
Deauthentication frame IE(s) - hexdump(len=0): [NULL]
wlan0: CTRL-EVENT-DISCONNECTED bssid=00:0f:92:fb:0c:f8 reason=4 locally_generated=1
wlan0: Auto connect enabled: try to reconnect (wps=0 wpa_state=9)
wlan0: Setting scan request: 0.100000 sec
Added BSSID 00:0f:92:fb:0c:f8 into blacklist
wlan0: Ignore new scan request for 0.100000 sec since an earlier request is scheduled to t
rigger sooner
wlan0: State: COMPLETED -> DISCONNECTED
nl80211: Set wlan0 operstate 1->0 (DORMANT)
netlink: Operstate: ifindex=11 linkmode=-1 (no change), operstate=5 (IF_OPER_DORMANT)
EAPOL: External notification - portEnabled=0
EAPOL: SUPP_PAE entering state DISCONNECTED
EAPOL: Supplicant port status: Unauthorized
nl80211: Skip set_supp_port(unauthorized) while not associated
EAPOL: SUPP_BE entering state INITIALIZE
EAPOL: External notification - portValid=0
nl80211: Event message available
nl80211: Drv Event 48 (NL80211_CMD_DISCONNECT) received for wlan0
nl80211: Ignore disconnect event when using userspace SME
wlan0: State: DISCONNECTED -> SCANNING
Scan SSID - hexdump_ascii(len=11):
     70 6d 32 34 35 30 2d 6a 65 66 66                  pm2450-jeff     
wlan0: Scan only the fixed channel: freq=2412 MHz
wlan0: BSS: Remove id 0 BSSID 00:0f:92:fb:0c:f8 SSID 'pm2450-jeff' due to wpa_bss_flush
wlan0: Add radio work 'scan'@0x4ceb20
wlan0: First radio work item in the queue - schedule start immediately
wlan0: Starting radio work 'scan'@0x4ceb20 after 0.000060 second wait
wlan0: nl80211: scan request
nl80211: Scan SSID - hexdump_ascii(len=11):
     70 6d 32 34 35 30 2d 6a 65 66 66                  pm2450-jeff     
nl80211: Scan frequency 2412 MHz
nl80211: Add NL80211_SCAN_FLAG_FLUSH
Scan requested (ret=0) - scan timeout 30 seconds
nl80211: Event message available
nl80211: Drv Event 33 (NL80211_CMD_TRIGGER_SCAN) received for wlan0
wlan0: nl80211: Scan trigger
wlan0: Event SCAN_STARTED (49) received
wlan0: Own scan request started a scan in 0.000203 seconds
wlan0: CTRL-EVENT-SCAN-STARTED 
RTM_NEWLINK: ifi_index=11 ifname=wlan0 wext ifi_flags=0x1003 ([UP])
nl80211: Event message available
nl80211: Drv Event 34 (NL80211_CMD_NEW_SCAN_RESULTS) received for wlan0
wlan0: nl80211: New scan results available
nl80211: Scan probed for SSID 'pm2450-jeff'
nl80211: Scan included frequencies: 2412
wlan0: Event SCAN_RESULTS (3) received
wlan0: Scan completed in 0.794437 seconds
nl80211: Received scan results (1 BSSes)
Sorted scan results
00:0f:92:fb:0c:f8 freq=2412 qual=0 noise=-97 level=-71 snr=26 flags=0x9 age=20
IEs - hexdump(len=121): 00 0b 70 6d 32 34 35 30 2d 6a 65 66 66 01 06 8c 12 98 24 b0 48 03 
01 16 05 04 00 02 00 00 2a 01 00 2d 1a 8d 01 1b ff ff 00 00 00 00 00 00 00 00 00 00 01 00 
00 00 00 00 00 00 00 00 00 3d 16 16 00 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
00 00 00 7f 08 00 00 00 00 00 00 00 40 dd 18 00 50 f2 02 01 01 00 00 03 a4 00 00 27 a4 00 
00 42 43 5e 00 62 32 2f 00
Beacon IEs - hexdump(len=121): 00 0b 70 6d 32 34 35 30 2d 6a 65 66 66 01 06 8c 12 98 24 b0
 48 03 01 16 05 04 00 02 00 00 2a 01 00 2d 1a 8d 01 1b ff ff 00 00 00 00 00 00 00 00 00 00
 01 00 00 00 00 00 00 00 00 00 00 3d 16 16 00 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00
 00 00 00 00 00 7f 08 00 00 00 00 00 00 00 40 dd 18 00 50 f2 02 01 01 00 00 03 a4 00 00 27
 a4 00 00 42 43 5e 00 62 32 2f 00
wlan0: BSS: Start scan result update 2
wlan0: BSS: Add new id 1 BSSID 00:0f:92:fb:0c:f8 SSID 'pm2450-jeff'
BSS: last_scan_res_used=1/32
wlan0: New scan results available (own=1 ext=0)
wlan0: Radio work 'scan'@0x4ceb20 done in 0.847436 seconds
wlan0: Selecting BSS from priority group 0
wlan0: 0: 00:0f:92:fb:0c:f8 ssid='pm2450-jeff' wpa_ie_len=0 rsn_ie_len=0 caps=0x421 level=
-71
wlan0:    allow in non-WPA/WPA2
wlan0:    selected BSS 00:0f:92:fb:0c:f8 ssid='pm2450-jeff'
wlan0: Considering connect request: reassociate: 0  selected: 00:0f:92:fb:0c:f8  bssid: 00
:00:00:00:00:00  pending: 00:00:00:00:00:00  wpa_state: SCANNING  ssid=0x4ceb50  current_s
sid=(nil)
wlan0: Request association with 00:0f:92:fb:0c:f8
wlan0: Add radio work 'sme-connect'@0x4ceb20
wlan0: First radio work item in the queue - schedule start immediately
wlan0: Starting radio work 'sme-connect'@0x4ceb20 after 0.000095 second wait
wlan0: Automatic auth_alg selection: 0x1
wlan0: WPA: clearing AP WPA IE
wlan0: WPA: clearing AP RSN IE
wlan0: WPA: clearing own WPA/RSN IE
wlan0: Cancelling scan request
wlan0: SME: Trying to authenticate with 00:0f:92:fb:0c:f8 (SSID='pm2450-jeff' freq=2412 MH
z)
wlan0: State: SCANNING -> AUTHENTICATING
EAPOL: External notification - EAP success=0
EAPOL: External notification - EAP fail=0
EAPOL: External notification - portControl=ForceAuthorized
nl80211: Authenticate (ifindex=11)
  * bssid=00:0f:92:fb:0c:f8
  * freq=2412
  * SSID - hexdump_ascii(len=11):
     70 6d 32 34 35 30 2d 6a 65 66 66                  pm2450-jeff     
  * IEs - hexdump(len=0): [NULL]
  * Auth Type 0
nl80211: Authentication request send successfully
nl80211: Event message available
nl80211: Drv Event 19 (NL80211_CMD_NEW_STATION) received for wlan0
nl80211: New station 00:0f:92:fb:0c:f8
nl80211: Event message available
nl80211: Drv Event 37 (NL80211_CMD_AUTHENTICATE) received for wlan0
nl80211: MLME event 37 (NL80211_CMD_AUTHENTICATE) on wlan0(00:0f:92:fb:48:f8) A1=00:0f:92:
fb:48:f8 A2=00:0f:92:fb:0c:f8
nl80211: MLME event frame - hexdump(len=30): b0 00 3c 00 00 0f 92 fb 48 f8 00 0f 92 fb 0c 
f8 00 0f 92 fb 0c f8 10 04 00 00 02 00 00 00
nl80211: Authenticate event
wlan0: Event AUTH (11) received
wlan0: SME: Authentication response: peer=00:0f:92:fb:0c:f8 auth_type=0 auth_transaction=2
 status_code=0
SME: Authentication response IEs - hexdump(len=0): [NULL]
wlan0: Trying to associate with 00:0f:92:fb:0c:f8 (SSID='pm2450-jeff' freq=2412 MHz)
wlan0: State: AUTHENTICATING -> ASSOCIATING
nl80211: Set wlan0 operstate 0->0 (DORMANT)
netlink: Operstate: ifindex=11 linkmode=-1 (no change), operstate=5 (IF_OPER_DORMANT)
wlan0: WPA: clearing own WPA/RSN IE
nl80211: Associate (ifindex=11)
  * bssid=00:0f:92:fb:0c:f8
  * freq=2412
  * SSID - hexdump_ascii(len=11):
     70 6d 32 34 35 30 2d 6a 65 66 66                  pm2450-jeff     
  * IEs - hexdump(len=10): 7f 08 00 00 00 00 00 00 00 40
nl80211: Association request send successfully
RTM_NEWLINK: ifi_index=11 ifname=wlan0 master=5 operstate=83886080 ifi_flags=0x11003 ([UP]
[LOWER_UP])
nl80211: Add ifindex 5 for bridge br-lan
nl80211: Add own interface ifindex 5
nl80211: ifindex 5 already in the list
RTM_NEWLINK: ifi_index=11 ifname=wlan0 operstate=83886080 linkmode=16777216 master=5 ifi_f
lags=0x11003 ([UP][LOWER_UP])
RTM_NEWLINK: ifi_index=11 ifname=wlan0 wext ifi_flags=0x11003 ([UP][LOWER_UP])
RTM_NEWLINK: ifi_index=11 ifname=wlan0 wext ifi_flags=0x11003 ([UP][LOWER_UP])
nl80211: Event message available
nl80211: Drv Event 38 (NL80211_CMD_ASSOCIATE) received for wlan0
nl80211: MLME event 38 (NL80211_CMD_ASSOCIATE) on wlan0(00:0f:92:fb:48:f8) A1=00:0f:92:fb:
48:f8 A2=00:0f:92:fb:0c:f8
nl80211: MLME event frame - hexdump(len=126): 10 00 3c 00 00 0f 92 fb 48 f8 00 0f 92 fb 0c
 f8 00 0f 92 fb 0c f8 40 04 21 04 00 00 01 c0 01 06 8c 12 98 24 b0 48 2d 1a 8d 01 1b ff ff
 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 3d 16 16 00 04 00 00 00 00
 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 7f 08 00 00 00 00 00 00 00 40 dd 18 00 50 f2
 02 01 01 00 00 03 a4 00 00 27 a4 00 00 42 43 5e 00 62 32 2f 00
nl80211: Associate event
wlan0: Event ASSOC (0) received
wlan0: Association info event
resp_ies - hexdump(len=96): 01 06 8c 12 98 24 b0 48 2d 1a 8d 01 1b ff ff 00 00 00 00 00 00
 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 3d 16 16 00 04 00 00 00 00 00 00 00 00 00 00
 00 00 00 00 00 00 00 00 00 7f 08 00 00 00 00 00 00 00 40 dd 18 00 50 f2 02 01 01 00 00 03
 a4 00 00 27 a4 00 00 42 43 5e 00 62 32 2f 00
wlan0: freq=2412 MHz
wlan0: State: ASSOCIATING -> ASSOCIATED
nl80211: Set wlan0 operstate 0->0 (DORMANT)
netlink: Operstate: ifindex=11 linkmode=-1 (no change), operstate=5 (IF_OPER_DORMANT)
wlan0: Associated to a new BSS: BSSID=00:0f:92:fb:0c:f8
wlan0: Associated with 00:0f:92:fb:0c:f8
wlan0: WPA: Association event - clear replay counter
wlan0: WPA: Clear old PTK
EAPOL: External notification - portEnabled=0
EAPOL: External notification - portValid=0
EAPOL: External notification - portEnabled=1
EAPOL: SUPP_PAE entering state S_FORCE_AUTH
EAPOL: Supplicant port status: Authorized
nl80211: Set supplicant port authorized for 00:0f:92:fb:0c:f8
EAPOL: SUPP_BE entering state IDLE
wlan0: Cancelling authentication timeout
Removed BSSID 00:0f:92:fb:0c:f8 from blacklist
wlan0: State: ASSOCIATED -> COMPLETED
wlan0: Radio work 'sme-connect'@0x4ceb20 done in 0.481555 seconds
wlan0: CTRL-EVENT-CONNECTED - Connection to 00:0f:92:fb:0c:f8 completed [id=0 id_str=]
nl80211: Set wlan0 operstate 0->1 (UP)
netlink: Operstate: ifindex=11 linkmode=-1 (no change), operstate=6 (IF_OPER_UP)
wlan0: Cancelling scan request
RTM_NEWLINK: ifi_index=11 ifname=wlan0 master=5 operstate=100663296 ifi_flags=0x11043 ([UP
][RUNNING][LOWER_UP])
nl80211: Add ifindex 5 for bridge br-lan
nl80211: Add own interface ifindex 5
nl80211: ifindex 5 already in the list
RTM_NEWLINK: ifi_index=11 ifname=wlan0 master=5 operstate=100663296 ifi_flags=0x11043 ([UP
][RUNNING][LOWER_UP])
nl80211: Add ifindex 5 for bridge br-lan
nl80211: Add own interface ifindex 5
nl80211: ifindex 5 already in the list
RTM_NEWLINK: ifi_index=11 ifname=wlan0 master=5 operstate=100663296 ifi_flags=0x11043 ([UP
][RUNNING][LOWER_UP])
nl80211: Add ifindex 5 for bridge br-lan
nl80211: Add own interface ifindex 5
nl80211: ifindex 5 already in the list
RTM_NEWLINK: ifi_index=11 ifname=wlan0 operstate=100663296 linkmode=16777216 master=5 ifi_
flags=0x11043 ([UP][RUNNING][LOWER_UP])
nl80211: Event message available
nl80211: Drv Event 46 (NL80211_CMD_CONNECT) received for wlan0
nl80211: Ignore connect event (cmd=46) when using userspace SME
RTM_NEWLINK: ifi_index=11 ifname=wlan0 master=5 operstate=100663296 ifi_flags=0x11043 ([UP
][RUNNING][LOWER_UP])
nl80211: Add ifindex 5 for bridge br-lan
nl80211: Add own interface ifindex 5
nl80211: ifindex 5 already in the list
nl80211: Event message available
nl80211: Drv Event 64 (NL80211_CMD_NOTIFY_CQM) received for wlan0




nl80211: Event message available
nl80211: Drv Event 64 (NL80211_CMD_NOTIFY_CQM) received for wlan0
nl80211: Event message available
nl80211: Drv Event 64 (NL80211_CMD_NOTIFY_CQM) received for wlan0




nl80211: Event message available
nl80211: Drv Event 64 (NL80211_CMD_NOTIFY_CQM) received for wlan0
nl80211: Event message available
nl80211: Drv Event 64 (NL80211_CMD_NOTIFY_CQM) received for wlan0


////////////Frnl80211: Event message available
nl80211: Drv Event 64 (NL80211_CMD_NOTIFY_CQM) received for wlan0
from now the mon interface no data, no interrupt...........on RX
nl80211: Event message available
nl80211: Drv Event 64 (NL80211_CMD_NOTIFY_CQM) received for wlan0

nl80211: Event message available
nl80211: Drv Event 64 (NL80211_CMD_NOTIFY_CQM) received for wlan0
nl80211: Event message available
nl80211: Drv Event 64 (NL80211_CMD_NOTIFY_CQM) received for wlan0
nl80211: Event message available
nl80211: Drv Event 64 (NL80211_CMD_NOTIFY_CQM) received for wlan0
nl80211: Event message available
nl80211: Drv Event 64 (NL80211_CMD_NOTIFY_CQM) received for wlan0
nl80211: Event message available
nl80211: Drv Event 64 (NL80211_CMD_NOTIFY_CQM) received for wlan0
nl80211: Event message available
nl80211: Drv Event 64 (NL80211_CMD_NOTIFY_CQM) received for wlan0
nl80211: Event message available
nl80211: Drv Event 64 (NL80211_CMD_NOTIFY_CQM) received for wlan0
nl80211: Event message available
nl80211: Drv Event 64 (NL80211_CMD_NOTIFY_CQM) received for wlan0
nl80211: Event message available
nl80211: Drv Event 64 (NL80211_CMD_NOTIFY_CQM) received for wlan0
nl80211: Event message available
nl80211: Drv Event 64 (NL80211_CMD_NOTIFY_CQM) received for wlan0
nl80211: Ignore RTM_NEWLINK event for foreign ifindex 12
nl80211: Ignore RTM_NEWLINK event for foreign ifindex 12
nl80211: Event message available
nl80211: Drv Event 64 (NL80211_CMD_NOTIFY_CQM) received for wlan0
nl80211: Event message available
nl80211: Drv Event 64 (NL80211_CMD_NOTIFY_CQM) received for wlan0
nl80211: Event message available
nl80211: Drv Event 64 (NL80211_CMD_NOTIFY_CQM) received for wlan0
nl80211: Event message available
nl80211: Drv Event 64 (NL80211_CMD_NOTIFY_CQM) received for wlan0

///echo 0xa to STA chanbw and it works now, wpa_supplicant log doesn't show the NL80211_CMD_NOTIFY_CQM message anymore.

Looks like when STA stops receiving RX interrupt, the NL80211_CMD_NOTIFY_CQM happens. Can check this flag and call set_channel() to recover. But this is only for STA side. AP side doesn't see this event 64 in hostapd.

When reverse the traffic STA===>AP, the hostapd shows:

// normal iperf traffic  STA--->AP.
1547829556.985325: ap_handle_timer: 00:0f:92:fb:48:f8 flags=0x8aa3 timeout_next=0
1547829556.986329: wlan0: Station 00:0f:92:fb:48:f8 has been active 0s ago
1547829556.986394: ap_handle_timer: register ap_handle_timer timeout for 00:0f:92:fb:48:f8 (41 seconds)
1547829597.989500: ap_handle_timer: 00:0f:92:fb:48:f8 flags=0x8aa3 timeout_next=0
1547829597.996384: wlan0: Station 00:0f:92:fb:48:f8 has been active 0s ago
1547829597.996452: ap_handle_timer: register ap_handle_timer timeout for 00:0f:92:fb:48:f8 (38 seconds)
1547829635.998378: ap_handle_timer: 00:0f:92:fb:48:f8 flags=0x8aa3 timeout_next=0
1547829635.999744: wlan0: Station 00:0f:92:fb:48:f8 has been active 0s ago
1547829635.999815: ap_handle_timer: register ap_handle_timer timeout for 00:0f:92:fb:48:f8 (37 seconds)
1547829673.005281: ap_handle_timer: 00:0f:92:fb:48:f8 flags=0x8aa3 timeout_next=0
1547829673.006173: wlan0: Station 00:0f:92:fb:48:f8 has been active 9s ago
1547829673.006237: ap_handle_timer: register ap_handle_timer timeout for 00:0f:92:fb:48:f8 (30 seconds)

// AP finds something wrong,the ping is already broken, and starts to poll the STA. But the polling is successful.
// Looks like the ACK from STA is h/w so the AP still gets the STA's ACK. But actually AP RX interrupt RXLP is stuck. 

1547829703.014765: ap_handle_timer: 00:0f:92:fb:48:f8 flags=0x8aa3 timeout_next=0
1547829703.015733: wlan0: Station 00:0f:92:fb:48:f8 has been inactive too long: 39 sec, max allowed: 30
1547829703.015800:   Polling STA	// Use NL80211_CMD_PROBE_CLIENT command. Finally calls into ieee80211_probe_client()
1547829703.015989: nl80211: Drv Event 84 (NL80211_CMD_PROBE_CLIENT) received for wlan0
1547829703.016051: nl80211: Probe client event
1547829703.016101: ap_handle_timer: register ap_handle_timer timeout for 00:0f:92:fb:48:f8 (1 seconds - AP_DISASSOC_DELAY)
1547829703.016386: nl80211: Event message available
1547829703.016472: nl80211: Drv Event 84 (NL80211_CMD_PROBE_CLIENT) received for wlan0
1547829703.016514: nl80211: Probe client event
1547829703.016570: wlan0: Event DRIVER_CLIENT_POLL_OK (39) received
1547829703.016606: STA 00:0f:92:fb:48:f8 ACKed pending activity poll
1547829704.017253: ap_handle_timer: 00:0f:92:fb:48:f8 flags=0x8aa3 timeout_next=1
1547829704.018142: wlan0: Station 00:0f:92:fb:48:f8 has been active 0s ago
1547829704.018207: ap_handle_timer: register ap_handle_timer timeout for 00:0f:92:fb:48:f8 (40 seconds)


1547829744.025283: ap_handle_timer: 00:0f:92:fb:48:f8 flags=0x8aa3 timeout_next=0
1547829744.026206: wlan0: Station 00:0f:92:fb:48:f8 has been inactive too long: 40 sec, max allowed: 30
1547829744.026273:   Polling STA
1547829744.026456: nl80211: Drv Event 84 (NL80211_CMD_PROBE_CLIENT) received for wlan0
1547829744.026517: nl80211: Probe client event
1547829744.026567: ap_handle_timer: register ap_handle_timer timeout for 00:0f:92:fb:48:f8 (1 seconds - AP_DISASSOC_DELAY)
1547829744.026848: nl80211: Event message available
1547829744.026931: nl80211: Drv Event 84 (NL80211_CMD_PROBE_CLIENT) received for wlan0
1547829744.026972: nl80211: Probe client event
1547829744.027028: wlan0: Event DRIVER_CLIENT_POLL_OK (39) received
1547829744.027065: STA 00:0f:92:fb:48:f8 ACKed pending activity poll
1547829745.027101: ap_handle_timer: 00:0f:92:fb:48:f8 flags=0x8aa3 timeout_next=1
1547829745.028038: wlan0: Station 00:0f:92:fb:48:f8 has been active 0s ago
1547829745.028101: ap_handle_timer: register ap_handle_timer timeout for 00:0f:92:fb:48:f8 (33 seconds)



1547829778.031592: ap_handle_timer: 00:0f:92:fb:48:f8 flags=0x8aa3 timeout_next=0
1547829778.032499: wlan0: Station 00:0f:92:fb:48:f8 has been inactive too long: 33 sec, max allowed: 30
1547829778.032567:   Polling STA
1547829778.032751: nl80211: Drv Event 84 (NL80211_CMD_PROBE_CLIENT) received for wlan0
1547829778.032813: nl80211: Probe client event
1547829778.032863: ap_handle_timer: register ap_handle_timer timeout for 00:0f:92:fb:48:f8 (1 seconds - AP_DISASSOC_DELAY)
1547829778.033323: nl80211: Event message available
1547829778.033433: nl80211: Drv Event 84 (NL80211_CMD_PROBE_CLIENT) received for wlan0
1547829778.033476: nl80211: Probe client event
1547829778.033532: wlan0: Event DRIVER_CLIENT_POLL_OK (39) received
1547829778.033645: STA 00:0f:92:fb:48:f8 ACKed pending activity poll
1547829779.034019: ap_handle_timer: 00:0f:92:fb:48:f8 flags=0x8aa3 timeout_next=1
1547829779.034915: wlan0: Station 00:0f:92:fb:48:f8 has been active 0s ago
1547829779.034980: ap_handle_timer: register ap_handle_timer timeout for 00:0f:92:fb:48:f8 (45 seconds)

IN ieee80211_probe_client(), change the probe packet to IEEE80211_AC_BE queue and priority=0. The hostapd still gets DRIVER_CLIENT_POLL_OK. So on hostapd level, the RX stuck can not be sensed. May still need the driver level -DCONFIG_MHX_AP_INACT_MONITOR. The probe packet seen on STA monitor is like this:

14:25:23.071820 4119471367us tsft 2412 MHz 11g/10Mhz -60dB signal 65.0 Mb/s MCS 7 20 MHz lon GI RX-STBC0 [bit 29] 60us CF +QoS DA:00:0f:92:fb:48:f8 BSSID:00:0f:92:fb:0c:f8 SA:00:0f:92:fb:0c:f8 
        0x0000:  666d a356

AP uses NL80211_CMD_GET_STATION to get the inactive time of a STA.
 
Feb 6, 2019
ath9k TX Descriptor Status process, words 0-8 are defined by:

struct ar9003_txs {
	u32 ds_info;
	u32 status1;
	u32 status2;
	u32 status3;
	u32 status4;
	u32 status5;
	u32 status6;
	u32 status7;
	u32 status8;
} __packed __aligned(4);

The Tx Descriptor Status doesn't generate a interrupt, it is polled by:
ath_tx_edma_tasklet() ---> status = ath9k_hw_txprocdesc(ah, NULL, (void *)&ts) ---> ar9003_hw_proc_txdesc() , until the word8 bit0 becomes 1 (AR_TxDone=1)
then                   |----->ath_tx_process_buffer()
		       `----->ath_txq_unlock_complete() ---> ieee80211_tx_status().

Feb 5, 2019
Test the pDDL and pMDDL multicast rate. With all WDS=0. pMDDL MIMO=OFF
TX(MAS)	RX(STA)		Mcast Rate in WebGUI		Rx Bitrate Shown on Rx Side	iw dev wlan0 set mcast_rate value	Mcast B/W
pDDL	pMDDL		QPSK FEC 1/2			13.0 MBit/s MCS 1			9				5.5Mbps
pDDL	pMDDL		QPSK FEC 3/4			19.5 MBit/s MCS 2			12				8Mbps
pDDL	pMDDL		16-QAM FEC 1/2			26.0 MBit/s MCS 3			18				10Mbps
pDDL	pMDDL		16-QAM FEC 3/4			39.0 MBit/s MCS 4			24				14.2Mbps
pDDL	pMDDL		64-QAM FEC 2/3			52.0 MBit/s MCS 5			36				18Mbps

pMDDL	pDDL		QPSK FEC 1/2			13.0 MBit/s MCS 1			9				5.6Mbps
pMDDL	pDDL		QPSK FEC 3/4			19.5 MBit/s MCS 2			12				7.8Mbps
pMDDL	pDDL		16-QAM FEC 1/2			26.0 MBit/s MCS 3			18				9.7Mbps
pMDDL	pDDL		16-QAM FEC 3/4			39.0 MBit/s MCS 4			24				13Mbps
pMDDL	pDDL		64-QAM FEC 2/3			52.0 MBit/s MCS 5			36				15.3Mbps

So the settings are exactlly the same but pMDDL tx multicast has lower t/p. This comes from the longer gap (260uS) between transmission bursts in pMDDL. Reducing that gap should improve the t/p, but how???

Feb 4, 2019
Use 2 pMDDL and 2 PC to do multicast t/p test. The TX PC should manually set route to let 224.0.0.100 traffic go through the TX unit. NOTE: the RX PC must set a default GW too, otherwise the RX PC can not join the multicast and receive the traffic. That means, the multicast receiver also needs to send something to network and need a default gateway. 

Jan 25, 2019
Test the AES enc-dec speed on a PWii board:
root@UserDevice:/tmp#                                                                             
root@UserDevice:/tmp# time openssl enc -aes-128-cbc -pass pass:123456 -p -in root.squashfs  -out root.squashfs.enc                                                                
salt=23B652C14F221083                                                                             
key=095694403676A551603E47441D6F67E6                                                              
iv =23852EA3DF7BEABB842B070A57DF4BB6                                                              
real    0m 2.83s                                                                                  
user    0m 2.35s                                                                                  
sys     0m 0.33s                                                                                  
root@UserDevice:/tmp# ls -al root.squashfs* -al                                                   
-rw-r--r--    1 root     root      12582916 Dec 18 15:59 root.squashfs      // scped from PC.
-rw-r--r--    1 root     root      12582944 Dec 18 16:12 root.squashfs.enc                        
root@UserDevice:/tmp# rm root.squashfs                                      // remove to free some memory
root@UserDevice:/tmp# time openssl enc -aes-128-cbc -pass pass:123456 -p -d -in root.squashfs.enc  -out root.squashfs                                                             
salt=23B652C14F221083                                                                             
key=095694403676A551603E47441D6F67E6                                                              
iv =23852EA3DF7BEABB842B070A57DF4BB6                                                              
real    0m 2.90s                                                                                  
user    0m 2.55s                                                                                  
sys     0m 0.21s                                                                                  
root@UserDevice:/tmp# ls -al root.squashfs* -al                                                   
-rw-r--r--    1 root     root      12582916 Dec 18 16:13 root.squashfs      // decrypted one
-rw-r--r--    1 root     root      12582944 Dec 18 16:12 root.squashfs.enc                        
root@UserDevice:/tmp# md5sum  root.squashfs                                                       
fbdade9f3f50a73a3d33356061ddd1ba  root.squashfs                             // this matches the md5 value in PC.
root@UserDevice:/tmp# 

Jan 21, 2018
Normally a rootfs last 4 bytes are "de ad c0 de". Eg. bless build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/root.squashfs and you can see the last 4 bytes. 
If tools/firmware-utils/src/enc_rootfs.c encrypts every byte including the last 4, the JFFS2 fs can not be created successfully.

This "deadc0de" marker is not added by the mksquashfs4 program, but added by the "padjffs2" program immediatelly after mksquashfs4. Solution: in enc_rootfs.c, skip "deadc0de" JFFS2 marker no encryption.

Jan 17, 2019
Provision a ecc508 device with the node-auth-basic-20181015.
1. Before provision, the default ECC508 settings, use "test" program:
$ 508

Device Selected.

$ info

==MHX(hal_i2c_send) I2C addr=0x60, txlength=8. txdata[]=:
03 07 30 00 00 00 03 5d 
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=7. rxdata[]=:
07 00 00 50 00 03 91 
revision:
00 00 50 00

$ sernum

==MHX(hal_i2c_send) I2C addr=0x60, txlength=8. txdata[]=:
03 07 02 80 00 00 09 ad 
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=35. rxdata[]=:
23 01 23 55 bf 00 00 50 00 04 6c 48 6e ee c0 55 
00 c0 00 55 00 83 20 87 20 8f 20 c4 8f 8f 8f 8f 
8f 69 df 
serial number:
01 23 55 BF 04 6C 48 6E EE

$ lockstat

==MHX(hal_i2c_send) I2C addr=0x60, txlength=8. txdata[]=:
03 07 02 00 15 00 17 5d 
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=7. rxdata[]=:
07 00 00 55 55 f5 52 
Config Zone: unlocked
==MHX(hal_i2c_send) I2C addr=0x60, txlength=8. txdata[]=:
03 07 02 00 15 00 17 5d 
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=7. rxdata[]=:
07 00 00 55 55 f5 52 
Data Zone  : unlocked

$ readcfg

==MHX(hal_i2c_send) I2C addr=0x60, txlength=8. txdata[]=:
03 07 02 80 00 00 09 ad 
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=35. rxdata[]=:
23 01 23 55 bf 00 00 50 00 04 6c 48 6e ee c0 55 
00 c0 00 55 00 83 20 87 20 8f 20 c4 8f 8f 8f 8f 
8f 69 df 
==MHX(hal_i2c_send) I2C addr=0x60, txlength=8. txdata[]=:
03 07 02 80 08 00 0a 4d 
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=35. rxdata[]=:
23 9f 8f af 8f 00 00 00 00 00 00 00 00 00 00 00 
00 00 00 af 8f ff ff ff ff 00 00 00 00 ff ff ff 
ff b2 03 
==MHX(hal_i2c_send) I2C addr=0x60, txlength=8. txdata[]=:
03 07 02 80 10 00 0a 1d 
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=35. rxdata[]=:
23 00 00 00 00 ff ff ff ff ff ff ff ff ff ff ff 
ff ff ff ff ff 00 00 55 55 ff ff 00 00 00 00 00 
00 5c 70 
==MHX(hal_i2c_send) I2C addr=0x60, txlength=8. txdata[]=:
03 07 02 80 18 00 09 fd 
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=35. rxdata[]=:
23 33 00 33 00 33 00 1c 00 1c 00 1c 00 1c 00 1c 
00 3c 00 3c 00 3c 00 3c 00 3c 00 3c 00 3c 00 1c 
00 3a 57 

01 23 55 BF 00 00 50 00  04 6C 48 6E EE C0 55 00
C0 00 55 00 83 20 87 20  8F 20 C4 8F 8F 8F 8F 8F
9F 8F AF 8F 00 00 00 00  00 00 00 00 00 00 00 00
00 00 AF 8F FF FF FF FF  00 00 00 00 FF FF FF FF
00 00 00 00 FF FF FF FF  FF FF FF FF FF FF FF FF
FF FF FF FF 00 00 55 55  FF FF 00 00 00 00 00 00
33 00 33 00 33 00 1C 00  1C 00 1C 00 1C 00 1C 00
3C 00 3C 00 3C 00 3C 00  3C 00 3C 00 3C 00 1C 00

$ 

2. Run the prov-tool to provion the device:
root@UserDevice:~#                                                                                
root@UserDevice:~# ./prov-tool                                                                    
prov-cmd# help                                                                                    
                                                                                                  
Usage:                                                                                            
client-provision  - Configure and load certificate data onto ATECC device.                        
client-build      - Read certificate data off ATECC device and rebuild full signer and device cert
ificates.                                                                                         
host-chain-verify - Verify the certificate chain from the client.                                 
host-gen-chal     - Generate challenge for the client.                                            
client-gen-resp   - Generate response to challenge from host.                                     
host-verify-resp  - Verify the client response to the challenge.                                  
Utility functions:                                                                                
lockstat - zone lock status                                                                       
lockcfg  - lock config zone                                                                       
lockdata - lock data and OTP zones                                                                
info     - get the chip revision                                                                  
sernum   - get the chip serial number                                                             
                                                                                                  
prov-cmd# client-provision                                                                        
==MHX(hal_i2c_send) I2C addr=0x60, txlength=8. txdata[]=:                                         
03 07 02 00 15 00 17 5d                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=7. rxdata[]=:                         
07 00 00 55 55 f5 52                                                                              
==MHX(hal_i2c_send) I2C addr=0x60, txlength=12. txdata[]=:                                        
03 0b 12 00 04 00 c0 00 55 00 8c 8f                                                               
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=4. rxdata[]=:                         
04 00 03 40                                                                                       
==MHX(hal_i2c_send) I2C addr=0x60, txlength=12. txdata[]=:                                        
03 0b 12 00 05 00 8f 20 c4 44 ba 51                                                               
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=4. rxdata[]=:                         
04 00 03 40                                                                                       
==MHX(hal_i2c_send) I2C addr=0x60, txlength=12. txdata[]=:                                        
03 0b 12 00 06 00 87 20 c4 44 70 11                                                               
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=4. rxdata[]=:                         
04 00 03 40                                                                                       
==MHX(hal_i2c_send) I2C addr=0x60, txlength=12. txdata[]=:                                        
03 0b 12 00 07 00 8f 0f 8f 8f 88 b3                                                               
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=4. rxdata[]=:                         
04 00 03 40                                                                                       
==MHX(hal_i2c_send) I2C addr=0x60, txlength=40. txdata[]=:                                        
03 27 12 80 08 00 9f 8f 83 64 c4 44 c4 44 0f 0f                                                   
0f 0f 0f 0f 0f 0f 0f 0f 0f 0f ff ff ff ff 00 00                                                   
00 00 ff ff ff ff e6 7b                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=4. rxdata[]=:                         
04 00 03 40                                                                                       
==MHX(hal_i2c_send) I2C addr=0x60, txlength=12. txdata[]=:                                        
03 0b 12 00 10 00 00 00 00 00 ae 8f                                                               
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=4. rxdata[]=:                         
04 00 03 40                                                                                       
==MHX(hal_i2c_send) I2C addr=0x60, txlength=12. txdata[]=:                                        
03 0b 12 00 11 00 ff ff ff ff 0c 8f                                                               
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=4. rxdata[]=:                         
04 00 03 40                                                                                       
==MHX(hal_i2c_send) I2C addr=0x60, txlength=12. txdata[]=:                                        
03 0b 12 00 12 00 ff ff ff ff c0 8f                                                               
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=4. rxdata[]=:                         
04 00 03 40                                                                                       
==MHX(hal_i2c_send) I2C addr=0x60, txlength=12. txdata[]=:                                        
03 0b 12 00 13 00 ff ff ff ff 4b 0f                                                               
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=4. rxdata[]=:                         
04 00 03 40                                                                                       
==MHX(hal_i2c_send) I2C addr=0x60, txlength=12. txdata[]=:                                        
03 0b 12 00 14 00 ff ff ff ff a6 8f                                                               
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=4. rxdata[]=:                         
04 00 03 40                                                                                       
==MHX(hal_i2c_send) I2C addr=0x60, txlength=12. txdata[]=:                                        
03 0b 12 00 16 00 ff ff 00 00 ec 8f                                                               
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=4. rxdata[]=:                         
04 00 03 40                                                                                       
==MHX(hal_i2c_send) I2C addr=0x60, txlength=12. txdata[]=:                                        
03 0b 12 00 17 00 00 00 00 00 43 0f                                                               
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=4. rxdata[]=:                         
04 00 03 40                                                                                       
==MHX(hal_i2c_send) I2C addr=0x60, txlength=40. txdata[]=:                                        
03 27 12 80 18 00 33 00 1c 00 13 00 1c 00 3c 00                                                   
1c 00 1c 00 33 00 1c 00 1c 00 3c 00 3c 00 3c 00                                                   
3c 00 3c 00 3c 00 a9 bb                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=4. rxdata[]=:                         
04 00 03 40                                                                                       
==MHX(hal_i2c_send) I2C addr=0x60, txlength=8. txdata[]=:                                         
03 07 20 00 00 00 00 7d                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=4. rxdata[]=:                         
04 00 03 40                                                                                       
==MHX(hal_i2c_send) I2C addr=0x60, txlength=8. txdata[]=:                                         
03 07 20 01 00 00 03 f7                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=4. rxdata[]=:                         
04 00 03 40                                                                                       
==MHX(hal_i2c_send) I2C addr=0x60, txlength=8. txdata[]=:                                         
03 07 17 80 00 00 39 8d                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=4. rxdata[]=:                         
04 00 03 40                                                                                       
==MHX(hal_i2c_send) I2C addr=0x60, txlength=8. txdata[]=:                                         
03 07 02 80 00 00 09 ad                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=35. rxdata[]=:                        
23 01 23 55 bf 00 00 50 00 04 6c 48 6e ee c0 55                                                   
00 c0 00 55 00 8f 20 c4 44 87 20 c4 44 8f 0f 8f                                                   
8f 80 64                                                                                          
==MHX(hal_i2c_send) I2C addr=0x60, txlength=8. txdata[]=:                                         
03 07 02 80 08 00 0a 4d                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=35. rxdata[]=:                        
23 9f 8f 83 64 c4 44 c4 44 0f 0f 0f 0f 0f 0f 0f                                                   
0f 0f 0f 0f 0f ff ff ff ff 00 00 00 00 ff ff ff                                                   
ff 03 c0                                                                                          
==MHX(hal_i2c_send) I2C addr=0x60, txlength=8. txdata[]=:                                         
03 07 02 00 15 00 17 5d                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=7. rxdata[]=:                         
07 00 00 55 00 09 51                                                                              
==MHX(hal_i2c_send) I2C addr=0x60, txlength=76. txdata[]=:                                        
03 4b 46 00 07 00 00 00 00 00 49 0c 1e 09 e2 40                                                   
af 00 e9 6b 43 32 92 0e 15 8f 69 58 8e d4 25 c7                                                   
f6 8b 0c 6a 52 5d 0d 21 4f ee 00 00 00 00 00 00                                                   
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                                   
00 00 00 00 00 00 00 00 00 00 aa 2c                                                               
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=4. rxdata[]=:                         
04 00 03 40                                                                                       
==MHX(hal_i2c_send) I2C addr=0x60, txlength=40. txdata[]=:                                        
03 27 12 82 20 00 32 12 d0 66 f5 ed 52 c7 79 98                                                   
ff aa ac 43 22 60 dd ff 9c 10 99 6f 41 66 3a 60                                                   
23 fa f6 aa 3e c5 39 bf                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=4. rxdata[]=:                         
04 00 03 40                                                                                       
==MHX(hal_i2c_send) I2C addr=0x60, txlength=8. txdata[]=:                                         
03 07 17 81 00 00 3a 07                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=4. rxdata[]=:                         
04 00 03 40                                                                                       
==MHX(hal_i2c_send) I2C addr=0x60, txlength=8. txdata[]=:                                         
03 07 40 00 07 00 0c 45                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=67. rxdata[]=:                        
43 f9 29 04 f3 bf d0 6c 5c 42 02 4c c3 5e 04 8b                                                   
3f a3 c7 c3 c8 07 c6 6f a9 e4 18 42 1e 34 0f 94                                                   
7c bd 4d df 52 6f d9 5a a0 55 7e 48 08 ac 11 fb                                                   
85 50 09 cf 59 db 4f 05 0b 4d 3d 67 aa e9 97 c4                                                   
91 a4 8d                                                                                          
Signer CA Public Key:                                                                             
F9 29 04 F3 BF D0 6C 5C 42 02 4C C3 5E 04 8B 3F                                                   
A3 C7 C3 C8 07 C6 6F A9 E4 18 42 1E 34 0F 94 7C                                                   
BD 4D DF 52 6F D9 5A A0 55 7E 48 08 AC 11 FB 85                                                   
50 09 CF 59 DB 4F 05 0B 4D 3D 67 AA E9 97 C4 91                                                   
                                                                                                  
==MHX(hal_i2c_send) I2C addr=0x60, txlength=8. txdata[]=:                                         
03 07 40 04 02 00 85 07                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=67. rxdata[]=:                        
43 94 01 33 c2 b7 0e 60 8c e9 87 8f 48 3b 0a b1                                                   
b6 c6 18 9c 6a 4e a9 c0 55 00 86 72 06 6c 52 c8                                                   
25 ae 5b 45 a1 40 b3 66 5d 1c 2f ff cd fb 80 fc                                                   
e1 ae 67 61 f8 81 55 8b 1c dd a4 ea 7b 56 87 d2                                                   
26 12 b7                                                                                          
Signer Public Key:                                                                                
94 01 33 C2 B7 0E 60 8C E9 87 8F 48 3B 0A B1 B6                                                   
C6 18 9C 6A 4E A9 C0 55 00 86 72 06 6C 52 C8 25                                                   
AE 5B 45 A1 40 B3 66 5D 1C 2F FF CD FB 80 FC E1                                                   
AE 67 61 F8 81 55 8B 1C DD A4 EA 7B 56 87 D2 26                                                   
                                                                                                  
==MHX(hal_i2c_send) I2C addr=0x60, txlength=8. txdata[]=:                                         
03 07 40 04 00 00 83 87                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=67. rxdata[]=:                        
43 fa ea 78 62 b9 83 33 e9 ef 12 c0 32 ef 93 8a                                                   
63 5f 37 12 94 9b 00 21 c6 f2 44 bd 29 c8 78 95                                                   
a0 f6 1e dd 7e 2c 95 ea 83 19 f4 21 a3 9d 18 d2                                                   
7e bb 29 bd 68 ef 23 a4 26 7f 35 78 f8 1d 11 df                                                   
17 b3 9c                                                                                          
Device Public Key:                                                                                
FA EA 78 62 B9 83 33 E9 EF 12 C0 32 EF 93 8A 63                                                   
5F 37 12 94 9B 00 21 C6 F2 44 BD 29 C8 78 95 A0                                                   
F6 1E DD 7E 2C 95 EA 83 19 F4 21 A3 9D 18 D2 7E                                                   
BB 29 BD 68 EF 23 A4 26 7F 35 78 F8 1D 11 DF 17                                                   
                                                                                                  
==MHX(hal_i2c_send) I2C addr=0x60, txlength=8. txdata[]=:                                         
03 07 1b 00 00 00 24 cd                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=35. rxdata[]=:                        
23 eb c0 29 05 0c c2 53 27 27 82 32 68 f4 d0 87                                                   
bc 5b 69 13 8c 32 a0 2d 56 6b c7 cc b0 75 00 13                                                   
d2 5e b1                                                                                          
==MHX(hal_i2c_send) I2C addr=0x60, txlength=40. txdata[]=:                                        
03 27 16 03 00 00 80 fc 06 b7 60 24 a0 d0 93 21                                                   
d9 b5 ac f1 6c 2e 71 94 77 85 3a dd 2c 90 97 1c                                                   
7f 84 62 39 da 93 b3 8f                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=4. rxdata[]=:                         
04 00 03 40                                                                                       
==MHX(hal_i2c_send) I2C addr=0x60, txlength=8. txdata[]=:                                         
03 07 41 80 07 00 24 45                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=67. rxdata[]=:                        
43 0f 33 30 9f ef 96 28 6a 71 7e da 4a 8d ab 9c                                                   
24 2f 70 53 4a 43 e5 f1 a3 66 39 46 ba 01 c1 4d                                                   
b3 6f a7 3e 9c 97 48 25 b8 42 47 5b 2e 88 de ae                                                   
d9 b3 98 14 41 58 98 13 bd 29 69 db ef 7a d5 45                                                   
e7 db 92                                                                                          
==MHX(hal_i2c_send) I2C addr=0x60, txlength=40. txdata[]=:                                        
03 27 12 82 60 00 0f 33 30 9f ef 96 28 6a 71 7e                                                   
da 4a 8d ab 9c 24 2f 70 53 4a 43 e5 f1 a3 66 39                                                   
46 ba 01 c1 4d b3 c2 aa                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=4. rxdata[]=:                         
04 00 03 40                                                                                       
==MHX(hal_i2c_send) I2C addr=0x60, txlength=40. txdata[]=:                                        
03 27 12 82 60 01 6f a7 3e 9c 97 48 25 b8 42 47                                                   
5b 2e 88 de ae d9 b3 98 14 41 58 98 13 bd 29 69                                                   
db ef 7a d5 45 e7 d7 a0                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=4. rxdata[]=:                         
04 00 03 40                                                                                       
==MHX(hal_i2c_send) I2C addr=0x60, txlength=40. txdata[]=:                                        
03 27 12 82 60 02 74 0a 80 c4 8b 10 a0 00 00 00                                                   
00 00 00 40 7b 8f 7f c4 ab 08 00 31 37 00 77 cc                                                   
43 a0 00 00 04 00 99 65                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=4. rxdata[]=:                         
04 00 03 40                                                                                       
==MHX(hal_i2c_send) I2C addr=0x60, txlength=40. txdata[]=:                                        
03 27 12 82 58 00 00 00 00 00 94 01 33 c2 b7 0e                                                   
60 8c e9 87 8f 48 3b 0a b1 b6 c6 18 9c 6a 4e a9                                                   
c0 55 00 86 72 06 fd a9                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=4. rxdata[]=:                         
04 00 03 40                                                                                       
==MHX(hal_i2c_send) I2C addr=0x60, txlength=40. txdata[]=:                                        
03 27 12 82 58 01 6c 52 c8 25 00 00 00 00 ae 5b                                                   
45 a1 40 b3 66 5d 1c 2f ff cd fb 80 fc e1 ae 67                                                   
61 f8 81 55 8b 1c 2e 1e                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=4. rxdata[]=:                         
04 00 03 40                                                                                       
==MHX(hal_i2c_send) I2C addr=0x60, txlength=40. txdata[]=:                                        
03 27 12 82 58 02 dd a4 ea 7b 56 87 d2 26 00 00                                                   
00 00 00 40 7b 8f 7f c4 ab 08 00 31 37 00 77 cc                                                   
43 a0 00 00 04 00 78 2a                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=4. rxdata[]=:                         
04 00 03 40                                                                                       
Signer Certificate:                                                                               
30 82 01 F0 30 82 01 97 A0 03 02 01 02 02 11 5A                                                   
51 2F 04 A8 DA 97 EB BE 2C ED 86 E8 34 24 BB 01                                                   
30 0A 06 08 2A 86 48 CE 3D 04 03 02 30 43 31 1D                                                   
30 1B 06 03 55 04 0A 0C 14 45 78 61 6D 70 6C 65                                                   
20 4F 72 67 61 6E 69 7A 61 74 69 6F 6E 31 22 30                                                   
20 06 03 55 04 03 0C 19 45 78 61 6D 70 6C 65 20                                                   
41 54 45 43 43 35 30 38 41 20 52 6F 6F 74 20 43                                                   
41 30 20 17 0D 31 34 30 38 30 32 32 30 30 30 30                                                   
30 5A 18 0F 39 39 39 39 31 32 33 31 32 33 35 39                                                   
35 39 5A 30 47 31 1D 30 1B 06 03 55 04 0A 0C 14                                                   
45 78 61 6D 70 6C 65 20 4F 72 67 61 6E 69 7A 61                                                   
74 69 6F 6E 31 26 30 24 06 03 55 04 03 0C 1D 45                                                   
78 61 6D 70 6C 65 20 41 54 45 43 43 35 30 38 41                                                   
20 53 69 67 6E 65 72 20 43 34 38 42 30 59 30 13                                                   
06 07 2A 86 48 CE 3D 02 01 06 08 2A 86 48 CE 3D                                                   
03 01 07 03 42 00 04 94 01 33 C2 B7 0E 60 8C E9                                                   
87 8F 48 3B 0A B1 B6 C6 18 9C 6A 4E A9 C0 55 00                                                   
86 72 06 6C 52 C8 25 AE 5B 45 A1 40 B3 66 5D 1C                                                   
2F FF CD FB 80 FC E1 AE 67 61 F8 81 55 8B 1C DD                                                   
A4 EA 7B 56 87 D2 26 A3 66 30 64 30 12 06 03 55                                                   
1D 13 01 01 FF 04 08 30 06 01 01 FF 02 01 00 30                                                   
0E 06 03 55 1D 0F 01 01 FF 04 04 03 02 02 84 30                                                   
1D 06 03 55 1D 0E 04 16 04 14 ED 1F B6 11 88 CE                                                   
B6 EE 4C 2A 19 9C 3E 0B AD 2F F8 DB 27 CD 30 1F                                                   
06 03 55 1D 23 04 18 30 16 80 14 37 0A A1 3A EB                                                   
EB CF 09 89 70 82 6B 3A B2 74 FB 96 72 68 D3 30                                                   
0A 06 08 2A 86 48 CE 3D 04 03 02 03 47 00 30 44                                                   
02 20 0F 33 30 9F EF 96 28 6A 71 7E DA 4A 8D AB                                                   
9C 24 2F 70 53 4A 43 E5 F1 A3 66 39 46 BA 01 C1                                                   
4D B3 02 20 6F A7 3E 9C 97 48 25 B8 42 47 5B 2E                                                   
88 DE AE D9 B3 98 14 41 58 98 13 BD 29 69 DB EF                                                   
7A D5 45 E7                                                                                       
==MHX(hal_i2c_send) I2C addr=0x60, txlength=8. txdata[]=:                                         
03 07 1b 00 00 00 24 cd                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=35. rxdata[]=:                        
23 99 dc db 00 8f 50 74 62 0d ec ae 48 d2 24 57                                                   
b7 40 f5 90 e5 53 dc c5 a9 50 95 e4 a2 2c 40 4c                                                   
da ca 42                                                                                          
==MHX(hal_i2c_send) I2C addr=0x60, txlength=40. txdata[]=:                                        
03 27 16 03 00 00 3f 5f 8e 31 0d 8e 8e 7d a8 fc                                                   
3e f9 1a c1 60 66 2c cb 9d 48 eb a0 43 97 d0 ba                                                   
b9 70 7e 85 3a ca 29 5f                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=4. rxdata[]=:                         
04 00 03 40                                                                                       
==MHX(hal_i2c_send) I2C addr=0x60, txlength=8. txdata[]=:                                         
03 07 41 80 02 00 2e 85                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=67. rxdata[]=:                        
43 0a cd 7f 0e 88 7c e5 91 4e 69 89 5a f0 c7 9a                                                   
37 36 06 00 96 68 23 50 84 40 8c 37 a3 eb 71 31                                                   
69 77 0c 17 34 a6 fb aa d5 0f 4e bf a8 d9 5c 3c                                                   
f1 54 74 82 4e ec dd 8f e2 e0 8f d6 f6 2f 9d 2c                                                   
e4 14 aa                                                                                          
==MHX(hal_i2c_send) I2C addr=0x60, txlength=40. txdata[]=:                                        
03 27 12 82 50 00 0a cd 7f 0e 88 7c e5 91 4e 69                                                   
89 5a f0 c7 9a 37 36 06 00 96 68 23 50 84 40 8c                                                   
37 a3 eb 71 31 69 b5 d7                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=4. rxdata[]=:                         
04 00 03 40                                                                                       
==MHX(hal_i2c_send) I2C addr=0x60, txlength=40. txdata[]=:                                        
03 27 12 82 50 01 77 0c 17 34 a6 fb aa d5 0f 4e                                                   
bf a8 d9 5c 3c f1 54 74 82 4e ec dd 8f e2 e0 8f                                                   
d6 f6 2f 9d 2c e4 68 c5                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=4. rxdata[]=:                         
04 00 03 40                                                                                       
==MHX(hal_i2c_send) I2C addr=0x60, txlength=40. txdata[]=:                                        
03 27 12 82 50 02 7c 8e a0 c4 8b 20 a0 00 00 00                                                   
00 00 00 40 7b 8f 7f c4 ab 08 00 45 37 00 77 cc                                                   
43 a0 00 00 04 00 40 76                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=4. rxdata[]=:                         
04 00 03 40                                                                                       
Device Certificate:                                                                               
30 82 01 AC 30 82 01 53 A0 03 02 01 02 02 11 4D                                                   
13 8C DD 92 4D 7C F8 BF 91 AC 59 65 5F B0 A9 02                                                   
30 0A 06 08 2A 86 48 CE 3D 04 03 02 30 47 31 1D                                                   
30 1B 06 03 55 04 0A 0C 14 45 78 61 6D 70 6C 65                                                   
20 4F 72 67 61 6E 69 7A 61 74 69 6F 6E 31 26 30                                                   
24 06 03 55 04 03 0C 1D 45 78 61 6D 70 6C 65 20                                                   
41 54 45 43 43 35 30 38 41 20 53 69 67 6E 65 72                                                   
20 43 34 38 42 30 20 17 0D 31 35 30 39 30 33 32                                                   
31 30 30 30 30 5A 18 0F 39 39 39 39 31 32 33 31                                                   
32 33 35 39 35 39 5A 30 42 31 1D 30 1B 06 03 55                                                   
04 0A 0C 14 45 78 61 6D 70 6C 65 20 4F 72 67 61                                                   
6E 69 7A 61 74 69 6F 6E 31 21 30 1F 06 03 55 04                                                   
03 0C 18 45 78 61 6D 70 6C 65 20 41 54 45 43 43                                                   
35 30 38 41 20 44 65 76 69 63 65 30 59 30 13 06                                                   
07 2A 86 48 CE 3D 02 01 06 08 2A 86 48 CE 3D 03                                                   
01 07 03 42 00 04 FA EA 78 62 B9 83 33 E9 EF 12                                                   
C0 32 EF 93 8A 63 5F 37 12 94 9B 00 21 C6 F2 44                                                   
BD 29 C8 78 95 A0 F6 1E DD 7E 2C 95 EA 83 19 F4                                                   
21 A3 9D 18 D2 7E BB 29 BD 68 EF 23 A4 26 7F 35                                                   
78 F8 1D 11 DF 17 A3 23 30 21 30 1F 06 03 55 1D                                                   
23 04 18 30 16 80 14 ED 1F B6 11 88 CE B6 EE 4C                                                   
2A 19 9C 3E 0B AD 2F F8 DB 27 CD 30 0A 06 08 2A                                                   
86 48 CE 3D 04 03 02 03 47 00 30 44 02 20 0A CD                                                   
7F 0E 88 7C E5 91 4E 69 89 5A F0 C7 9A 37 36 06                                                   
00 96 68 23 50 84 40 8C 37 A3 EB 71 31 69 02 20                                                   
77 0C 17 34 A6 FB AA D5 0F 4E BF A8 D9 5C 3C F1                                                   
54 74 82 4E EC DD 8F E2 E0 8F D6 F6 2F 9D 2C E4                                                   
                                                                                                  
prov-cmd# client-build                                                                            
==MHX(hal_i2c_send) I2C addr=0x60, txlength=8. txdata[]=:                                         
03 07 02 82 60 00 0a 3c                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=35. rxdata[]=:                        
23 0f 33 30 9f ef 96 28 6a 71 7e da 4a 8d ab 9c                                                   
24 2f 70 53 4a 43 e5 f1 a3 66 39 46 ba 01 c1 4d                                                   
b3 36 63                                                                                          
==MHX(hal_i2c_send) I2C addr=0x60, txlength=8. txdata[]=:                                         
03 07 02 82 60 01 09 bf                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=35. rxdata[]=:                        
23 6f a7 3e 9c 97 48 25 b8 42 47 5b 2e 88 de ae                                                   
d9 b3 98 14 41 58 98 13 bd 29 69 db ef 7a d5 45                                                   
e7 20 df                                                                                          
==MHX(hal_i2c_send) I2C addr=0x60, txlength=8. txdata[]=:                                         
03 07 02 82 60 02 89 bd                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=35. rxdata[]=:                        
23 74 0a 80 c4 8b 10 a0 00 00 00 00 00 00 00 00                                                   
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                                   
00 40 1a                                                                                          
==MHX(hal_i2c_send) I2C addr=0x60, txlength=8. txdata[]=:                                         
03 07 02 82 58 00 09 f4                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=35. rxdata[]=:                        
23 00 00 00 00 94 01 33 c2 b7 0e 60 8c e9 87 8f                                                   
48 3b 0a b1 b6 c6 18 9c 6a 4e a9 c0 55 00 86 72                                                   
06 11 70                                                                                          
==MHX(hal_i2c_send) I2C addr=0x60, txlength=8. txdata[]=:                                         
03 07 02 82 58 01 0a 77                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=35. rxdata[]=:                        
23 6c 52 c8 25 00 00 00 00 ae 5b 45 a1 40 b3 66                                                   
5d 1c 2f ff cd fb 80 fc e1 ae 67 61 f8 81 55 8b                                                   
1c c1 71                                                                                          
==MHX(hal_i2c_send) I2C addr=0x60, txlength=8. txdata[]=:                                         
03 07 02 82 58 02 8a 75                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=35. rxdata[]=:                        
23 dd a4 ea 7b 56 87 d2 26 00 00 00 00 00 00 00                                                   
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                                   
00 b9 45                                                                                          
CLIENT: Rebuilt Signer Certificate:                                                               
30 82 01 F0 30 82 01 97 A0 03 02 01 02 02 11 5A                                                   
51 2F 04 A8 DA 97 EB BE 2C ED 86 E8 34 24 BB 01                                                   
30 0A 06 08 2A 86 48 CE 3D 04 03 02 30 43 31 1D                                                   
30 1B 06 03 55 04 0A 0C 14 45 78 61 6D 70 6C 65                                                   
20 4F 72 67 61 6E 69 7A 61 74 69 6F 6E 31 22 30                                                   
20 06 03 55 04 03 0C 19 45 78 61 6D 70 6C 65 20                                                   
41 54 45 43 43 35 30 38 41 20 52 6F 6F 74 20 43                                                   
41 30 20 17 0D 31 34 30 38 30 32 32 30 30 30 30                                                   
30 5A 18 0F 39 39 39 39 31 32 33 31 32 33 35 39                                                   
35 39 5A 30 47 31 1D 30 1B 06 03 55 04 0A 0C 14                                                   
45 78 61 6D 70 6C 65 20 4F 72 67 61 6E 69 7A 61                                                   
74 69 6F 6E 31 26 30 24 06 03 55 04 03 0C 1D 45                                                   
78 61 6D 70 6C 65 20 41 54 45 43 43 35 30 38 41                                                   
20 53 69 67 6E 65 72 20 43 34 38 42 30 59 30 13                                                   
06 07 2A 86 48 CE 3D 02 01 06 08 2A 86 48 CE 3D                                                   
03 01 07 03 42 00 04 94 01 33 C2 B7 0E 60 8C E9                                                   
87 8F 48 3B 0A B1 B6 C6 18 9C 6A 4E A9 C0 55 00                                                   
86 72 06 6C 52 C8 25 AE 5B 45 A1 40 B3 66 5D 1C                                                   
2F FF CD FB 80 FC E1 AE 67 61 F8 81 55 8B 1C DD                                                   
A4 EA 7B 56 87 D2 26 A3 66 30 64 30 12 06 03 55                                                   
1D 13 01 01 FF 04 08 30 06 01 01 FF 02 01 00 30                                                   
0E 06 03 55 1D 0F 01 01 FF 04 04 03 02 02 84 30                                                   
1D 06 03 55 1D 0E 04 16 04 14 ED 1F B6 11 88 CE                                                   
B6 EE 4C 2A 19 9C 3E 0B AD 2F F8 DB 27 CD 30 1F                                                   
06 03 55 1D 23 04 18 30 16 80 14 37 0A A1 3A EB                                                   
EB CF 09 89 70 82 6B 3A B2 74 FB 96 72 68 D3 30                                                   
0A 06 08 2A 86 48 CE 3D 04 03 02 03 47 00 30 44                                                   
02 20 0F 33 30 9F EF 96 28 6A 71 7E DA 4A 8D AB                                                   
9C 24 2F 70 53 4A 43 E5 F1 A3 66 39 46 BA 01 C1                                                   
4D B3 02 20 6F A7 3E 9C 97 48 25 B8 42 47 5B 2E                                                   
88 DE AE D9 B3 98 14 41 58 98 13 BD 29 69 DB EF                                                   
7A D5 45 E7                                                                                       
==MHX(hal_i2c_send) I2C addr=0x60, txlength=8. txdata[]=:                                         
03 07 02 82 50 00 0a 14                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=35. rxdata[]=:                        
23 0a cd 7f 0e 88 7c e5 91 4e 69 89 5a f0 c7 9a                                                   
37 36 06 00 96 68 23 50 84 40 8c 37 a3 eb 71 31                                                   
69 4e 4e                                                                                          
==MHX(hal_i2c_send) I2C addr=0x60, txlength=8. txdata[]=:                                         
03 07 02 82 50 01 09 97                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=35. rxdata[]=:                        
23 77 0c 17 34 a6 fb aa d5 0f 4e bf a8 d9 5c 3c                                                   
f1 54 74 82 4e ec dd 8f e2 e0 8f d6 f6 2f 9d 2c                                                   
e4 90 ea                                                                                          
==MHX(hal_i2c_send) I2C addr=0x60, txlength=8. txdata[]=:                                         
03 07 02 82 50 02 89 95                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=35. rxdata[]=:                        
23 7c 8e a0 c4 8b 20 a0 00 00 00 00 00 00 00 00                                                   
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                                   
00 19 a4                                                                                          
==MHX(hal_i2c_send) I2C addr=0x60, txlength=8. txdata[]=:                                         
03 07 40 00 00 00 00 05                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=67. rxdata[]=:                        
43 fa ea 78 62 b9 83 33 e9 ef 12 c0 32 ef 93 8a                                                   
63 5f 37 12 94 9b 00 21 c6 f2 44 bd 29 c8 78 95                                                   
a0 f6 1e dd 7e 2c 95 ea 83 19 f4 21 a3 9d 18 d2                                                   
7e bb 29 bd 68 ef 23 a4 26 7f 35 78 f8 1d 11 df                                                   
17 b3 9c                                                                                          
CLIENT: Rebuilt Device Certificate:                                                               
30 82 01 AC 30 82 01 53 A0 03 02 01 02 02 11 4D                                                   
13 8C DD 92 4D 7C F8 BF 91 AC 59 65 5F B0 A9 02                                                   
30 0A 06 08 2A 86 48 CE 3D 04 03 02 30 47 31 1D                                                   
30 1B 06 03 55 04 0A 0C 14 45 78 61 6D 70 6C 65                                                   
20 4F 72 67 61 6E 69 7A 61 74 69 6F 6E 31 26 30                                                   
24 06 03 55 04 03 0C 1D 45 78 61 6D 70 6C 65 20                                                   
41 54 45 43 43 35 30 38 41 20 53 69 67 6E 65 72                                                   
20 43 34 38 42 30 20 17 0D 31 35 30 39 30 33 32                                                   
31 30 30 30 30 5A 18 0F 39 39 39 39 31 32 33 31                                                   
32 33 35 39 35 39 5A 30 42 31 1D 30 1B 06 03 55                                                   
04 0A 0C 14 45 78 61 6D 70 6C 65 20 4F 72 67 61                                                   
6E 69 7A 61 74 69 6F 6E 31 21 30 1F 06 03 55 04                                                   
03 0C 18 45 78 61 6D 70 6C 65 20 41 54 45 43 43                                                   
35 30 38 41 20 44 65 76 69 63 65 30 59 30 13 06                                                   
07 2A 86 48 CE 3D 02 01 06 08 2A 86 48 CE 3D 03                                                   
01 07 03 42 00 04 FA EA 78 62 B9 83 33 E9 EF 12                                                   
C0 32 EF 93 8A 63 5F 37 12 94 9B 00 21 C6 F2 44                                                   
BD 29 C8 78 95 A0 F6 1E DD 7E 2C 95 EA 83 19 F4                                                   
21 A3 9D 18 D2 7E BB 29 BD 68 EF 23 A4 26 7F 35                                                   
78 F8 1D 11 DF 17 A3 23 30 21 30 1F 06 03 55 1D                                                   
23 04 18 30 16 80 14 ED 1F B6 11 88 CE B6 EE 4C                                                   
2A 19 9C 3E 0B AD 2F F8 DB 27 CD 30 0A 06 08 2A                                                   
86 48 CE 3D 04 03 02 03 47 00 30 44 02 20 0A CD                                                   
7F 0E 88 7C E5 91 4E 69 89 5A F0 C7 9A 37 36 06                                                   
00 96 68 23 50 84 40 8C 37 A3 EB 71 31 69 02 20                                                   
77 0C 17 34 A6 FB AA D5 0F 4E BF A8 D9 5C 3C F1                                                   
54 74 82 4E EC DD 8F E2 E0 8F D6 F6 2F 9D 2C E4                                                   
                                                                                                  
prov-cmd# host-chain-verify                                                                       
==MHX(hal_i2c_send) I2C addr=0x60, txlength=40. txdata[]=:                                        
03 27 16 03 00 00 80 fc 06 b7 60 24 a0 d0 93 21                                                   
d9 b5 ac f1 6c 2e 71 94 77 85 3a dd 2c 90 97 1c                                                   
7f 84 62 39 da 93 b3 8f                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=4. rxdata[]=:                         
04 00 03 40                                                                                       
==MHX(hal_i2c_send) I2C addr=0x60, txlength=136. txdata[]=:                                       
03 87 45 02 04 00 0f 33 30 9f ef 96 28 6a 71 7e                                                   
da 4a 8d ab 9c 24 2f 70 53 4a 43 e5 f1 a3 66 39                                                   
46 ba 01 c1 4d b3 6f a7 3e 9c 97 48 25 b8 42 47                                                   
5b 2e 88 de ae d9 b3 98 14 41 58 98 13 bd 29 69                                                   
db ef 7a d5 45 e7 f9 29 04 f3 bf d0 6c 5c 42 02                                                   
4c c3 5e 04 8b 3f a3 c7 c3 c8 07 c6 6f a9 e4 18                                                   
42 1e 34 0f 94 7c bd 4d df 52 6f d9 5a a0 55 7e                                                   
48 08 ac 11 fb 85 50 09 cf 59 db 4f 05 0b 4d 3d                                                   
67 aa e9 97 c4 91 52 3a                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=4. rxdata[]=:                         
04 00 03 40                                                                                       
HOST: Signer certificate verified against signer certificate authority (CA) public key!           
==MHX(hal_i2c_send) I2C addr=0x60, txlength=40. txdata[]=:                                        
03 27 16 03 00 00 3f 5f 8e 31 0d 8e 8e 7d a8 fc                                                   
3e f9 1a c1 60 66 2c cb 9d 48 eb a0 43 97 d0 ba                                                   
b9 70 7e 85 3a ca 29 5f                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=4. rxdata[]=:                         
04 00 03 40                                                                                       
==MHX(hal_i2c_send) I2C addr=0x60, txlength=136. txdata[]=:                                       
03 87 45 02 04 00 0a cd 7f 0e 88 7c e5 91 4e 69                                                   
89 5a f0 c7 9a 37 36 06 00 96 68 23 50 84 40 8c                                                   
37 a3 eb 71 31 69 77 0c 17 34 a6 fb aa d5 0f 4e                                                   
bf a8 d9 5c 3c f1 54 74 82 4e ec dd 8f e2 e0 8f                                                   
d6 f6 2f 9d 2c e4 94 01 33 c2 b7 0e 60 8c e9 87                                                   
8f 48 3b 0a b1 b6 c6 18 9c 6a 4e a9 c0 55 00 86                                                   
72 06 6c 52 c8 25 ae 5b 45 a1 40 b3 66 5d 1c 2f                                                   
ff cd fb 80 fc e1 ae 67 61 f8 81 55 8b 1c dd a4                                                   
ea 7b 56 87 d2 26 48 2c                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=4. rxdata[]=:                         
04 00 03 40                                                                                       
HOST: Device certificate verified against signer public key!                                      
prov-cmd# host-gen-chal                                                                           
                                                                                                  
syntax error in command: host-gen-chal                                                            
                                                                                                  
prov-cmd# hostgen                                                                                 
                                                                                                  
syntax error in command: hostgen                                                                  
                                                                                                  
prov-cmd# host-gen-chal                                                                           
==MHX(hal_i2c_send) I2C addr=0x60, txlength=8. txdata[]=:                                         
03 07 1b 00 00 00 24 cd                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=35. rxdata[]=:                        
23 b2 7e 6c 51 ce cf 90 8a f7 a3 f0 17 14 96 b3                                                   
23 f8 9c 74 50 a3 79 1a 65 d1 9d ba a1 5c 78 fa                                                   
c3 1b 67                                                                                          
HOST: Generated challenge:                                                                        
B2 7E 6C 51 CE CF 90 8A F7 A3 F0 17 14 96 B3 23                                                   
F8 9C 74 50 A3 79 1A 65 D1 9D BA A1 5C 78 FA C3                                                   
                                                                                                  
prov-cmd# client-gen-resp                                                                         
==MHX(hal_i2c_send) I2C addr=0x60, txlength=8. txdata[]=:                                         
03 07 1b 00 00 00 24 cd                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=35. rxdata[]=:                        
23 5e d9 23 68 ca 0c c5 29 8a 88 c2 25 94 39 5d                                                   
4b c1 63 d5 13 7b 6b a5 d0 6a ae fb 58 84 0d 30                                                   
d1 b0 dc                                                                                          
==MHX(hal_i2c_send) I2C addr=0x60, txlength=40. txdata[]=:                                        
03 27 16 03 00 00 b2 7e 6c 51 ce cf 90 8a f7 a3                                                   
f0 17 14 96 b3 23 f8 9c 74 50 a3 79 1a 65 d1 9d                                                   
ba a1 5c 78 fa c3 6f 73                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=4. rxdata[]=:                         
04 00 03 40                                                                                       
==MHX(hal_i2c_send) I2C addr=0x60, txlength=8. txdata[]=:                                         
03 07 41 80 00 00 28 05                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=67. rxdata[]=:                        
43 1c 4e dd 72 a8 5f 22 f9 68 08 e9 d8 d4 4e c2                                                   
67 09 9e 56 44 c5 ec 43 c5 0f 81 a6 0f 84 13 42                                                   
be 44 e3 f1 10 63 37 46 5b da 34 3f 0e 26 14 c2                                                   
8e a3 96 e2 7c c9 3f 81 cf 87 1c 29 b9 5f c0 0a                                                   
fb b9 49                                                                                          
CLIENT: Calculated response to host challenge:                                                    
1C 4E DD 72 A8 5F 22 F9 68 08 E9 D8 D4 4E C2 67                                                   
09 9E 56 44 C5 EC 43 C5 0F 81 A6 0F 84 13 42 BE                                                   
44 E3 F1 10 63 37 46 5B DA 34 3F 0E 26 14 C2 8E                                                   
A3 96 E2 7C C9 3F 81 CF 87 1C 29 B9 5F C0 0A FB                                                   
                                                                                                  
prov-cmd# host-verify-resp                                                                        
HOST: Device public key from certificate:                                                         
FA EA 78 62 B9 83 33 E9 EF 12 C0 32 EF 93 8A 63                                                   
5F 37 12 94 9B 00 21 C6 F2 44 BD 29 C8 78 95 A0                                                   
F6 1E DD 7E 2C 95 EA 83 19 F4 21 A3 9D 18 D2 7E                                                   
BB 29 BD 68 EF 23 A4 26 7F 35 78 F8 1D 11 DF 17                                                   
                                                                                                  
==MHX(hal_i2c_send) I2C addr=0x60, txlength=40. txdata[]=:                                        
03 27 16 03 00 00 b2 7e 6c 51 ce cf 90 8a f7 a3                                                   
f0 17 14 96 b3 23 f8 9c 74 50 a3 79 1a 65 d1 9d                                                   
ba a1 5c 78 fa c3 6f 73                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=4. rxdata[]=:                         
04 ee 31 41                                                                                       
verify_response failed with error code E1                                                         
prov-cmd# 

However, wait for a moment, then verify again:
prov-cmd# info                                                                                    
==MHX(hal_i2c_send) I2C addr=0x60, txlength=8. txdata[]=:                                         
03 07 30 00 00 00 03 5d                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=7. rxdata[]=:                         
07 00 00 50 00 03 91                                                                              
                                                                                                  
revision:                                                                                         
00 00 50 00                                                                                       
prov-cmd# sernum                                                                                  
==MHX(hal_i2c_send) I2C addr=0x60, txlength=8. txdata[]=:                                         
03 07 02 80 00 00 09 ad                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=35. rxdata[]=:                        
23 01 23 55 bf 00 00 50 00 04 6c 48 6e ee c0 55                                                   
00 c0 00 55 00 8f 20 c4 44 87 20 c4 44 8f 0f 8f                                                   
8f 80 64                                                                                          
                                                                                                  
serial number:                                                                                    
01 23 55 BF 04 6C 48 6E EE                                                                        
prov-cmd# lockstat                                                                                
==MHX(hal_i2c_send) I2C addr=0x60, txlength=8. txdata[]=:                                         
03 07 02 00 15 00 17 5d                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=7. rxdata[]=:                         
07 00 00 00 00 03 ad                                                                              
==MHX(hal_i2c_send) I2C addr=0x60, txlength=8. txdata[]=:                                         
03 07 02 00 15 00 17 5d                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=7. rxdata[]=:                         
07 00 00 00 00 03 ad                                                                              
Config Zone Lock: locked                                                                          
Data Zone Lock  : locked       

                                                                   
prov-cmd# host-verify-resp                                                                        
HOST: Device public key from certificate:                                                         
FA EA 78 62 B9 83 33 E9 EF 12 C0 32 EF 93 8A 63                                                   
5F 37 12 94 9B 00 21 C6 F2 44 BD 29 C8 78 95 A0                                                   
F6 1E DD 7E 2C 95 EA 83 19 F4 21 A3 9D 18 D2 7E                                                   
BB 29 BD 68 EF 23 A4 26 7F 35 78 F8 1D 11 DF 17                                                   
                                                                                                  
==MHX(hal_i2c_send) I2C addr=0x60, txlength=40. txdata[]=:                                        
03 27 16 03 00 00 b2 7e 6c 51 ce cf 90 8a f7 a3                                                   
f0 17 14 96 b3 23 f8 9c 74 50 a3 79 1a 65 d1 9d                                                   
ba a1 5c 78 fa c3 6f 73                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=4. rxdata[]=:                         
04 00 03 40                                                                                       
==MHX(hal_i2c_send) I2C addr=0x60, txlength=136. txdata[]=:                                       
03 87 45 02 04 00 1c 4e dd 72 a8 5f 22 f9 68 08                                                   
e9 d8 d4 4e c2 67 09 9e 56 44 c5 ec 43 c5 0f 81                                                   
a6 0f 84 13 42 be 44 e3 f1 10 63 37 46 5b da 34                                                   
3f 0e 26 14 c2 8e a3 96 e2 7c c9 3f 81 cf 87 1c                                                   
29 b9 5f c0 0a fb fa ea 78 62 b9 83 33 e9 ef 12                                                   
c0 32 ef 93 8a 63 5f 37 12 94 9b 00 21 c6 f2 44                                                   
bd 29 c8 78 95 a0 f6 1e dd 7e 2c 95 ea 83 19 f4                                                   
21 a3 9d 18 d2 7e bb 29 bd 68 ef 23 a4 26 7f 35                                                   
78 f8 1d 11 df 17 1e a6                                                                           
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=4. rxdata[]=:                         
04 00 03 40                                                                                       
HOST: Device response to challenge verified!      

Looks like finally the verification is successful.

3. Use test program to check the final config zone:
$ lockstat

==MHX(hal_i2c_send) I2C addr=0x60, txlength=8. txdata[]=:
03 07 02 00 15 00 17 5d 
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=4. rxdata[]=:
04 11 33 43 
is_device_locked() failed with ret=0x000000F3


$ lockstat

==MHX(hal_i2c_send) I2C addr=0x60, txlength=8. txdata[]=:
03 07 02 00 15 00 17 5d 
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=7. rxdata[]=:
07 00 00 00 00 03 ad 
Config Zone: LOCKED
==MHX(hal_i2c_send) I2C addr=0x60, txlength=8. txdata[]=:
03 07 02 00 15 00 17 5d 
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=7. rxdata[]=:
07 00 00 00 00 03 ad 
Data Zone  : LOCKED


$ readcfg

==MHX(hal_i2c_send) I2C addr=0x60, txlength=8. txdata[]=:
03 07 02 80 00 00 09 ad 
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=35. rxdata[]=:
23 01 23 55 bf 00 00 50 00 04 6c 48 6e ee c0 55 
00 c0 00 55 00 8f 20 c4 44 87 20 c4 44 8f 0f 8f 
8f 80 64 
==MHX(hal_i2c_send) I2C addr=0x60, txlength=8. txdata[]=:
03 07 02 80 08 00 0a 4d 
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=35. rxdata[]=:
23 9f 8f 83 64 c4 44 c4 44 0f 0f 0f 0f 0f 0f 0f 
0f 0f 0f 0f 0f ff ff ff ff 00 00 00 00 ff ff ff 
ff 03 c0 
==MHX(hal_i2c_send) I2C addr=0x60, txlength=8. txdata[]=:
03 07 02 80 10 00 0a 1d 
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=35. rxdata[]=:
23 00 00 00 00 ff ff ff ff ff ff ff ff ff ff ff 
ff ff ff ff ff 00 00 00 00 ff ff 00 00 00 00 00 
00 1c 7b 
==MHX(hal_i2c_send) I2C addr=0x60, txlength=8. txdata[]=:
03 07 02 80 18 00 09 fd 
==MHX(hal_i2c_receive)Read addr=0x60, baud=400000, rxlength=35. rxdata[]=:
23 33 00 1c 00 13 00 1c 00 3c 00 1c 00 1c 00 33 
00 1c 00 1c 00 3c 00 3c 00 3c 00 3c 00 3c 00 3c 
00 45 e0 

01 23 55 BF 00 00 50 00  04 6C 48 6E EE C0 55 00
C0 00 55 00 8F 20 C4 44  87 20 C4 44 8F 0F 8F 8F
9F 8F 83 64 C4 44 C4 44  0F 0F 0F 0F 0F 0F 0F 0F
0F 0F 0F 0F FF FF FF FF  00 00 00 00 FF FF FF FF
00 00 00 00 FF FF FF FF  FF FF FF FF FF FF FF FF
FF FF FF FF 00 00 00 00  FF FF 00 00 00 00 00 00
33 00 1C 00 13 00 1C 00  3C 00 1C 00 1C 00 33 00
1C 00 1C 00 3C 00 3C 00  3C 00 3C 00 3C 00 3C 00


Analysis:
01 23 55 BF //SN
00 00 50 00  // RevNum
04 6C 48 6E EE // SN
C0	// Reserved
55 	// I2C_Enable
00	// Reserved
C0 	// I2C Address
00 	// Reserved
55 	// OTPmode is Consumption Mode
00 	// ChipMode. watchdog 1.3 sec. 
8F 20 	// SlotConfig0. device_private_key_slot. 0x8FLSB: IsSecret=1. 0x20MSB: Never-Writes are never permitted on this slot using the Write command. Slots set to never can still be used as key storage. Random private key(atcab_genkey).
C4 44  	// SlotConfig1
87 20 	// SlotConfig2. signer_private_key_slot. 0x87LSB: IsSecret=1. 0x20MSB:. Random private key(atcab_genkey)
C4 44 	// SlotConfig3
8F 0F 	// SlotConfig4.	access_key_slot. 0x8FLSB:IsSecret=1. 0x0fMSB:Clear text writes are always permitted.Should bot store key.
8F 8F	// SlotConfig5
9F 8F 	// SlotConfig6
83 64 	// SlotConfig7. signer_ca_private_key_slot. 0x83 is LSB(bit0..7):IsSecret=1,EncryptRead=0. Pre-defined in g_signer_ca_private_key[].
	// 0x64 is MSB(bit8..15): Encrypt write,WriteKey=4.
C4 44 	// SlotConfig8
C4 44  	// SlotConfig9
0F 0F 	// SlotConfig10
0F 0F 	// SlotConfig11
0F 0F 	// SlotConfig12
0F 0F	// SlotConfig13
0F 0F 	// SlotConfig14
0F 0F 	// SlotConfig15
FF FF FF FF  00 00 00 00 // Counter0
FF FF FF FF  00 00 00 00 // Counter1
FF FF FF FF  FF FF FF FF FF FF FF FF FF FF FF FF // LastKeyUse
00 	// UseExtra
00	// Selector
00 	// LockValue = 0, Locked
00	// LockConfig=0, Locked
FF FF 	// SlotLocked=1. 
00 00	// Reserved.
00 00 00 00	// X509format
33 00 	// KeyConfig0
1C 00 	// KeyConfig1
13 00 	// KeyConfig2
1C 00  	// KeyConfig3
3C 00 	// KeyConfig4
1C 00 	// KeyConfig5
1C 00 	// KeyConfig6
33 00	// KeyConfig7
1C 00 	// KeyConfig8
1C 00 	// KeyConfig9
3C 00 	// KeyConfig10
3C 00  	// KeyConfig11
3C 00 	// KeyConfig12
3C 00 	// KeyConfig13
3C 00 	// KeyConfig14
3C 00	// KeyConfig15

Jan 16, 2019
ATCA_STATUS _atinit(ATCAIface ca_iface, ATCAHAL_t *hal)
{
    // get method mapping to HAL methods for this interface
    hal_iface_init(ca_iface->mIfaceCFG, hal);
    ca_iface->atinit     = hal->halinit;
    ca_iface->atpostinit = hal->halpostinit;
    ca_iface->atsend     = hal->halsend;
    ca_iface->atreceive  = hal->halreceive;
    ca_iface->atwake     = hal->halwake;
    ca_iface->atsleep    = hal->halsleep;
    ca_iface->atidle     = hal->halidle;
    ca_iface->hal_data   = hal->hal_data;

    return ATCA_SUCCESS;
}

ATCA_STATUS hal_iface_init(ATCAIfaceCfg *cfg, ATCAHAL_t *hal)
{
    ATCA_STATUS status = ATCA_COMM_FAIL;

    switch (cfg->iface_type)
    {
    case ATCA_I2C_IFACE:
        #ifdef ATCA_HAL_I2C
        printf("==MHX(%s) init i2c hal.\n", __func__);
        hal->halinit = &hal_i2c_init;				// defined in hal_linux_i2c_userspace.c
        hal->halpostinit = &hal_i2c_post_init;
        hal->halreceive = &hal_i2c_receive;
        hal->halsend = &hal_i2c_send;
        hal->halsleep = &hal_i2c_sleep;
        hal->halwake = &hal_i2c_wake;
        hal->halidle = &hal_i2c_idle;
        hal->halrelease = &hal_i2c_release;
        hal->hal_data = NULL;



Jan 15, 2019
typedef struct
{

    // used for transmit/send
    uint8_t _reserved;  // used by HAL layer as needed (I/O tokens, Word address values)

    //--- start of packet i/o frame----
    uint8_t  txsize;
    uint8_t  opcode;
    uint8_t  param1;    // often same as mode
    uint16_t param2;
    uint8_t  data[130]; // includes 2-byte CRC.  data size is determined by largest possible data section of any
                        // command + crc (see: x08 verify data1 + data2 + data3 + data4)
                        // this is an explicit design trade-off (space) resulting in simplicity in use
                        // and implementation
    //--- end of packet i/o frame

    // used for receive
    uint8_t  execTime;      // execution time of command by opcode
    uint16_t rxsize;        // expected response size, response is held in data member

    // structure should be packed since it will be transmitted over the wire
    // this method varies by compiler.  As new compilers are supported, add their structure packing method here

} ATCAPacket;
#pragma pack( pop, ATCAPacket)

param2 (and maybe rxsize too) has endian problem in PWii(big endian). Must swap byte1 and byte2. Fix this by:
void atCalcCrc(ATCAPacket *packet)
{
    uint8_t length, *crc;

    // MHXJL : swap 2 bytes for big endian MIPS CPU.
    packet->param2 = (packet->param2 << 8 & 0xff00 ) | (packet->param2 >> 8 & 0xff);
...
}

With a 508 chip shipped from Atmel with default setting, "readcfg" command returns:
01 23 55 BF 	// SN[0..3]
00 00 50 00  	// RevNum
04 6C 48 6E EE 	// SN[4..8]
C0 		// Reserved                                       
55 		// I2C_Enable = 1
00           	// Reserved
C0 		// I2C_Address. 
00 		// Reserved must be 0
55 		// OTPmode 0x55 (ConsumptionMode)
00 		// ChipMode. 
83 20 87 20  8F 20 C4 8F 8F 8F 8F 8F 9F 8F AF 8F 00 00 00 00  00 00 00 00 00 00 00 00 00 00 AF 8F 	// SlogConfig
FF FF FF FF  00 00 00 00 	// Counter0
FF FF FF FF  00 00 00 00 	// Counter1
FF FF FF FF  FF FF FF FF FF FF FF FF FF FF FF FF 	// LastKeyUse
00 		// UserExtra
00 		// Selector
55 		// LockValue. unlocked
55  		// LockConfig. unlocked
FF FF 		// SlotLocked
00 00 		// Reserved must be 0
00 00 00 00 	// X509format
33 00 33 00 33 00 1C 00  1C 00 1C 00 1C 00 1C 00 3C 00 3C 00 3C 00 3C 00  3C 00 3C 00 3C 00 1C 00      // KeyConfig

Jan 10, 2019
Open Micochip AT88CKSCKTSOIC-XPRO, check the laser markers on top of chips.
SHA204A I2C SOIC A09-2660/02 SN:1800000895 : Y 6BAR
SHA132A I2C SOIC A09-2661/02 SN:1800000810 : CN 1818EU9
SHA508A I2C SOIC A09-2659/02 SN:1800000797 : Y 6EAZ
SHA608A I2C SOIC A09-3149/01 SN:1800000448 : CN 10173H3

Checked another set of AT88CKSCKTSOIC-XPRO kit the laser marks of chips are the same as this kit.

Atmel CryptoAuth lib uses (ioctl(f_i2c, 0x0703 (I2C_SLAVE) , cfg->atcai2c.slave_address >> 1) to prepare a slave address. With a SHA204 chip:
root@UserDevice:~# i2cdetect -y 0                                                                 
     0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f                                               
00:          -- -- -- -- -- -- -- -- -- -- -- -- --                                               
10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                                               
20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                                               
30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                                               
40: -- -- -- -- -- -- -- -- UU -- -- -- -- -- -- --                                               
50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                                               
60: -- -- -- -- 64 -- -- -- -- -- -- -- -- -- -- --                                               
70: -- UU -- -- -- -- -- --                                
This means this SHA204 chip is already set to a I2C address of 0x64. To comply with the I2C_SLAVE ioctl command, .atcai2c.slave_address  = 0x64<<1. And it works:

# 204                                                                                             
                                                                                                  
Current device: ATSHA204A                                                                         
# info                                                                                            
                                                                                                  
===MHX(hal_i2c_wake)1.0                                                                           
===MHX(hal_i2c_wake)1.1                                                                           
===MHX(hal_i2c_wake)1.2                                                                           
===MHX(hal_i2c_wake)1.3                                                                           
==MHX(hal_i2c_send) TX data=[3,7,30,0], len=8                                                     
revision:                                                                                         
00 02 00 09                                                                                       
# sernum                                                                                          
                                                                                                  
===MHX(hal_i2c_wake)1.0                                                                           
===MHX(hal_i2c_wake)1.1                                                                           
===MHX(hal_i2c_wake)1.2                                                                           
===MHX(hal_i2c_wake)1.3                                                                           
==MHX(hal_i2c_send) TX data=[3,7,2,80], len=8                                                     
serial number:                                                                                    
01 23 31 D0 91 FB 7C 91 EE                                                                        
# 

ECC508 chip identified by i2cdetect of address 0x60. revision: 00 00 50 00 ; serial number:01 23 55 BF 04 6C 48 6E EE. 

Dec 27, 2018
A pX2 board, change MHX_PRODUCT=BulletCAT1 and MHX_PRODUCTMODE=6 to pretend to be a CAT-M board. Use CAT-M f/w on this board. Kill all LEDS, ANT_C=0, I=87mA@12V. ANT_C=1, I=69mA@12V. Saving 18mA@12V. 

A pX2 module, remove R21 connected to pin B59 (BIASREF), the CPU doesn't even boot up. 

Dec 21, 2018
In a pX2-CATM board, test why ART program can drop current to I=56mA@12V while driver code has I=66mA. In /usr/local/art-run :
/usr/bin/nart.out -console	// show nart debug message
/bin/sleep 1
# /usr/bin/mcart		// manually start mcart in another console.

Before starting the ART program, the driver has already set ANT_C=1 and current drops to 66mA@12V.

===========I=66mA, ANT_C is already set to 1(EEPROM43=554) in driver. 
===========In mcard UI, Change EEPROM 43 to 0x554(no real change at all actually in theory).Then Commit flash..........
> commit caldata=1
< 7508 CONTROL BEGIN commit caldata=1
MyRegisterWrite , address=b806001c, value=808
MyRegisterWrite , address=b806001c, value=8
MyRegisterWrite , address=b806001c, value=808
MyRegisterWrite , address=b806001c, value=8
< 6018 WARNING Device reset error 14. frequency=2312, ht40=40, tx chain=1, rx chain=1. Retrying.
MyRegisterWrite , address=b806001c, value=808
MyRegisterWrite , address=b806001c, value=8
MyRegisterWrite , address=b806001c, value=808
MyRegisterWrite , address=b806001c, value=8
< 6005 ERROR Device reset error 1. frequency=2312, ht40=40, tx chain=1, rx chain=1.
< 6016 ERROR Device not loaded or not reset.
< 7506 CONTROL DONE commit caldata=1
====================================== I drops to 56mA from now. 
====================================== Restart ART program and I rises back to 66mA.

This means in normal chip working state, 66mA@12V is the normal value. Only when chips goes wrong, it drops to 56mA.

///////////////////////////////
A pX2 board, in driver, radio disabled, if ANT_C=0, I=69mA@12V, 


Dec 20, 2018
1. On pX2-CATM, In previous CATM code without ANT_C control, "v1.3.0" build "1044", 2018-12-04 10:49:41:
    LEDs off, Cellular module off, radio disabled, Ethernet cable connected  : I1=81mA@12V

2. On pX2-CATM, With my CATM test code with ANT_C control when radio is disabled/stopped:
    In driver code, I deactivated PHY, drove ANT_C=1, and put chip into FULL-SLEEP mode.
    LEDs off, Cellular module off, radio disabled, Ethernet cable connected  : I2=66mA@12V. When Ethernet cable is removed I3=46mA@12V.
I1 - I2 = 15mA. Power saved : Pdiff = 15mA x 12V = 180mW.
 
3. On Nicole-CATM, In previous CATM code without ANT_C control, "v1.3.0" build "1044", 2018-12-04 10:49:41:
    LEDs off, Cellular module off, radio disabled, Ethernet cable connected  : I4=48mA@12V. When Ethernet cable is removed I5=28~33mA@12V.

4. With my same CATM test code on a Nicole-CATM board with radio disabled/stopped:
    LEDs off, Cellular module off, radio disabled, Ethernet cable connected  : I4=48mA@12V. When Ethernet cable is removed I5=27~32mA@12V.
====================
Hany doubts the internal PA bias should be turnd off. But this BIASREF(Pin B59) is fed from peripheral circuit. 
In ar9003_hw_set_radar_params(), REG_CLR_BIT(ah, AR_PHY_RADAR_0, AR_PHY_RADAR_0_ENA); return; doesn't save current. No use for 2G.
Turn off Rx/Tx chains doesn't reduce current.

Dec 19, 2018
In the end of ath9k_stop(), these piece of code doesn't reduce current further, still I=66mA@12V. 
	ath9k_stop_btcoex(sc);
	ath9k_hw_disable(sc->sc_ah);
	del_timer_sync(&sc->sleep_timer);
	ath9k_hw_setpower(sc->sc_ah, ATH9K_PM_FULL_SLEEP);
This is the log of this piece of code:
[   72.190000] ==MHX1.0(ath9k_hw_setpower) incoming mode=0  
	//enum ath9k_power_mode {
	ATH9K_PM_AWAKE = 0,
	ATH9K_PM_FULL_SLEEP,
	ATH9K_PM_NETWORK_SLEEP,
	ATH9K_PM_UNDEFINED};
[   72.190000] ==MHX1.0(ath9k_hw_setpower) incoming mode=0
[   72.190000] ==MHX1.0(ath9k_hw_setpower) incoming mode=0
[   72.190000] ==MHX1.0(ath9k_hw_setpower) incoming mode=0
[   72.190000] ==MHX1.0(ath9k_hw_setpower) incoming mode=0


[   72.190000] ==MHX(ath9k_stop) Deactivate PHY and ANT_C. Orig antCtrlCommon=0x00000550
[   72.190000] ==MHX1.0(ath9k_hw_setpower) incoming mode=0
[   72.210000] ==MHX1.0(ath9k_hw_setpower) incoming mode=1
[   72.210000] ==MHX1.1(ath9k_hw_setpower) AWAKE -> FULL-SLEEP
[   72.210000] ==MHX1.2(ath9k_hw_setpower) Going to ath9k_set_power_sleep()...
[   72.210000] ==MHX(ath9k_set_power_sleep)  AR_SREV_9300_20_OR_LATER(ah) = TRUE. 
[   72.210000] ==MHX 1.3 (ath9k_hw_setpower) Returnig status=1


[   72.210000] ==MHX1.0(ath9k_hw_setpower) incoming mode=0
[   72.210000] ==MHX1.1(ath9k_hw_setpower) FULL-SLEEP -> AWAKE
[   72.210000] ==MHX 1.3 (ath9k_hw_setpower) Returnig status=1


[   72.310000] ==MHX1.0(ath9k_hw_setpower) incoming mode=1		// chip is set to FULL-SLEEP by other code than ath9k_stop().
[   72.310000] ==MHX1.1(ath9k_hw_setpower) AWAKE -> FULL-SLEEP
[   72.310000] ==MHX1.2(ath9k_hw_setpower) Going to ath9k_set_power_sleep()...
[   72.310000] ==MHX(ath9k_set_power_sleep)  AR_SREV_9300_20_OR_LATER(ah) = TRUE. 
[   72.310000] ==MHX 1.3 (ath9k_hw_setpower) Returnig status=1



[  125.990000] usb 1-1: USB disconnect, device number 2
[  126.010000] option1 ttyUSB0: GSM modem (1-port) converter now disconnected from ttyUSB0
[  126.010000] option 1-1:1.0: device disconnected



Dec 18, 2018
A Nicole-CATM, with latest Cat-1 f/w. With Ethernet port connection. Enter art (art has AR_PHY_ACTIVE_EN=0), I=90mA@10V no matter what ANT_C is. LEDs are turned off. Turn Cellular module off by " mhx -gpio set 34 1 " the I=66mA@10V. Remove the Ethernet cable and and wait 10 seconds and drops to I=40mA@10V. 

A PX2-CATM, with latest Cat-1 f/w, same as Nicole-CATM. With Ethernet port connection. Enter art (art has AR_PHY_ACTIVE_EN=0), I=91mA@10V while I=112mA@10V@ANT_C=0. Turn Cellular module off by " mhx -gpio set 34 1 " the I=66mA@10V(I=86mA@10V when ANT_C=0). Remove the Ethernet cable and and wait 10 seconds and drops to I=40mA@10V and 37mA@12V.

This shows with ANT_C control, PX2-CATM consumes same current as Nicole-CATM in ART program. The LNA consumes 20mA@10V.

PX2-CATM, mhx -led off, mhx -rssiled XXX, mhx -gpio set 34 1, with Ethernet connected, when radio=disabled, I=81mA@12V. In this case if ANT_C is set HIGH, I=66mA@12V. Remove Ethernet cable I=46mA@12V. But in a Nicole-CATM with same firmware, with wifi driver, I=48mA@12V, there is still a 66-48=18mA difference. But why ART can drop current to the same level of a Nicole-CATM? Maybe ART has some code turns down all the analog parts? 

Dec 17, 2018
Looks like in ART #define AR_PHY_ACTIVE_EN  must be  0x00000000 to enable switch table to control to control ANT_C. Otherwise ANT_C is always 0. That may means, the antenna switch table only work when PHY is inactive.

1. Use a pDDL unit, ART modified to disable the AR_PHY_ACTIVE_EN, and then switch the ANT_C. When ANT_C=0(EEPROM 43 = 0x550), I=97mA@10V. When ANT_C=1(EEPROM 43 = 0x554), I=73mA@10V. Savd 24mA@10V. 

pDDL, with mac80211 driver STA mode, scan for connection, I=110ma@10V. Disable radio and power cycle I=110ma@10V same. Rename ath.ko and ath9k.ko to disable loading driver, I=90mA@10V. 

2. Use a CAT-M unit(with WiFi and cellular), ART modified to disable the AR_PHY_ACTIVE_EN, and then switch the ANT_C. When ANT_C=0(EEPROM 43 = 0x550), I=110mA@10V. When ANT_C=1(EEPROM 43 = 0x554), I=91mA@10V. Savd 19mA@10V. 

CAT-M, with mac80211 driver STA mode, scan for connection, I=110ma@10V. Disable radio and power cycle I=121mA@10V. Rename ath.ko and ath9k.ko to disable loading driver, I=102mA@10V. 

Dec 12, 2018
Low current is extremely important for CAT-M, which has both LTE and WiFi. Hope to minimize power consumption when WiFi is disabled. In art-2:
/* BB_active */
#define AR_PHY_ACTIVE       0x981C      /* activation register */
#define AR_PHY_ACTIVE_EN    0x00000001  /* Activate PHY chips */
#define AR_PHY_ACTIVE_DIS   0x00000000  /* Deactivate PHY chips */		// Jason test this doesn't reduce current

Ar9300AntCtrlCommonSet() and Ar9300AntCtrlCommonSet2() set antenna switch table.

In driver looks like ant_ctrl_comm2g_switch_enable is for antenna switch table. And ar9003_hw_ant_ctrl_common_get() and ar9003_hw_ant_ctrl_common_2_get() get the antenna switch table.

Dec 11, 2018
ar9331 is Big Endian. The rootfs image stored in flash is little endian.
In Flash: 
68 73 71 73 ED 06 00 00 82 AC AA 5B 00 00 04 00 3C    |    hsqs....
In kernel, 
if (le32_to_cpu(magic) != SQUASHFS_MAGIC && magic != 0x19852003) // le32_to_cpu(magic) change LE data to CPU BigEndian format SQUASHFS_MAGIC= 0x73717368
		return -EINVAL;

The minimum flash read length recorded on a PWii board is 48: [    0.990000] ==MHX(part_read_enc) r_min_len = 48

Dec 10, 2018
pMDDL multicast : TX negative pulse width 260uS	// this causes a lower mcast rate in pMDDL.
pDDL multicast : TX negative pulse width 80uS

pMDDL unicast : TX negative pulse width 260uS
pDDL unicast : TX negative pulse width 260uS

Nov 29, 2018
In ar71xx/image/Makefile:
In define Image/Build/MicrohardMyLoader function : 
$(1)=squashfs;	$(2)=PWii;	$(4)=0x4000000;	

NOv 28, 2018
CryptoMemory Cryptographic Security ICs offer a low cost, high security solution for any embedded application requiring data protection. A proprietary cryptographic algorithm encrypts data, passwords and checksums, providing a secure place for storage of sensitive information within a system. With its tamper detection circuits, this information remains safe even under attack. Whether it is factory configuration data, user preference data or encryption keys that need to be protected, Atmel’s CryptoMemory offers a secure solution.

The World’s Only Secure Serial EEPROM Atmel CryptoMemory 
cryptographic security ICs offer a cost-efficient, high-security solution for any application requiring authentication, data protection or secure storage. A cryptographic algorithm encrypts data and passwords, generates Message Authentication Codes (MAC) thereby providing asecure 
place where information remains safe, even under attack. CryptoMemory is the only family of secure memory devices in the industry with mutual authentication between device and host, plus data encryption. Both synchronous (2-wire) and asynchronous (ISO7816) protocols are available.

#define SQUASHFS_MAGIC		0x73717368
mtd_find_rootfs_from--->mtd_check_rootfs_magic()

NOv 27, 2018
In package/boot/uboot-ar9344-mhs/src/include/configs/db12x.h, #define DEBUG, can print verbose u-boot debug info. And pay attention to the CONSOLE_QUILT value too.

Nov 24, 2018
/* Our partition node structure */
struct mtd_part {
	struct mtd_info mtd;
	struct mtd_info *master;
	uint64_t offset;
	struct list_head list;
};

struct m25p {
	struct spi_device	*spi;
	struct mutex		lock;
	struct mtd_info		mtd;
	u16			page_size;
	u16			addr_width;
	u8			erase_opcode;
	u8			*command;
	bool			fast_read;
	size_t			max_read_len;
};



NOv 22, 2018
AR9344/9341 u-Boot DDR control: 
#define AR7240_APB_BASE						0x18000000  /* 384M */
#define AR7240_DDR_CTL_BASE					AR7240_APB_BASE+0x00000000
/*
 * DDR block
 */
#define AR7240_DDR_CONFIG					AR7240_DDR_CTL_BASE+0
#define AR7240_DDR_CONFIG2					AR7240_DDR_CTL_BASE+4
#define AR7240_DDR_MODE						AR7240_DDR_CTL_BASE+0x08
#define AR7240_DDR_EXT_MODE					AR7240_DDR_CTL_BASE+0x0c
#define AR7240_DDR_CONTROL					AR7240_DDR_CTL_BASE+0x10
#define AR7240_DDR_REFRESH					AR7240_DDR_CTL_BASE+0x14
#define AR7240_DDR_RD_DATA_THIS_CYCLE				AR7240_DDR_CTL_BASE+0x18
#define AR7240_DDR_TAP_CONTROL0				AR7240_DDR_CTL_BASE+0x1c
#define AR7240_DDR_TAP_CONTROL1				AR7240_DDR_CTL_BASE+0x20
#define AR7240_DDR_TAP_CONTROL2				AR7240_DDR_CTL_BASE+0x24
#define AR7240_DDR_TAP_CONTROL3				AR7240_DDR_CTL_BASE+0x28

#ifdef CONFIG_WASP
#define AR7240_DDR_DDR2_CONFIG				AR7240_DDR_CTL_BASE+0xb8
#else
#define AR7240_DDR_DDR2_CONFIG				AR7240_DDR_CTL_BASE+0x8c
#endif

#define AR7240_DDR_BURST				AR7240_DDR_CTL_BASE+0xc4
#define AR7240_DDR_BURST2				AR7240_DDR_CTL_BASE+0xc8
#define AR7240_AHB_MASTER_TIMEOUT			AR7240_DDR_CTL_BASE+0xcc
#define AR7240_DDR_CTL_CONFIG				AR7240_DDR_CTL_BASE+0x108
#define AR7240_DDR_DEBUG_RD_CNTL			AR7240_DDR_CTL_BASE+0x118

_start (in lolevel_init_934x.S) ---> board_init_f() ---> Call :
init_fnc_t *init_sequence[] = {
	timer_init,
	env_init,		/* initialize environment */
	init_baudrate,	/* initialze baudrate settings */
	serial_init,	/* serial communications setup */
	console_init_f,
	display_banner,	/* say that we are here */
	checkboard,
	init_func_ram,
	test_ram_db,
	test_ram_ab,
	/* test_ram_full, */
	NULL,
};

init_func_ram() ---> initdram() ---> wasp_mem_config()---> qca_dram_init() ---> 1. ar7240_sys_frequency():use DDL2(0x18118244) OUTDIV and DDL(0x18116240) register NINT and REF_DIV; 2. Set DDR controller registers.

In pMDDL2450:
root@UserDevice:~# mhx -reg get 0xb8116244
Register 0xb8116244 has value 0x50802f00	// DDR DPLL2 bit30 LOCAL_PLL=1,  Selects if we want to manually set PLL control bits through the SRIF space. Use SRIF. 

Some DDR controller init values (cpu/mips/ar7240/qca_dram.c):
#define DDRx_tMRD_ns    10
#define DDRx_tRAS_ns    40
#define DDRx_tRCD_ns    15
#define DDRx_tRP_ns     15
#define DDRx_tRRD_ns    10
#define DDRx_tWR_ns     15
#define DDRx_tWTR_ns    10

#define DDR1_tRFC_ns    75
#define DDR2_tRFC_ns    120

#define DDR2_tFAW_ns    50
#define DDR2_tWL_ns     5

#define DDR_addit_lat   0
#define DDR_burst_len   8

In a old JenniePCIE board:
[    0.000000] CPU revision is: 0001974c (MIPS 74Kc)
[    0.000000] SoC: Atheros AR9344 rev 2
[    0.000000] Clocks: CPU:560.000MHz, DDR:400.000MHz, AHB:200.000MHz, Ref:40.000MHz
root@UserDevice:~# mhx -reg get 0xb80600b0	// bootstrap
Register 0xb80600b0 has value 0x00a0055e	// DDR2, 32bit wide


In 3PI board:
[    0.000000] CPU revision is: 0001974c (MIPS 74Kc)                                             
[    0.000000] SoC: Atheros AR9344 rev 2                                                         
[    0.000000] Clocks: CPU:560.000MHz, DDR:400.000MHz, AHB:200.000MHz, Ref:40.000MHz  
root@UserDevice:~# mhx -reg get 0xb80600b0                                                                    
Register 0xb80600b0 has value 0x00a005d6		// DDR2, 16bit wide.
  
In a pMDDL2450 board:
[    0.000000] CPU revision is: 0001974c (MIPS 74Kc)
[    0.000000] SoC: Atheros AR9341 rev 3
[    0.000000] Clocks: CPU:535.000MHz, DDR:400.000MHz, AHB:200.000MHz, Ref:40.000MHz
root@UserDevice:~# mhx -reg get 0xb80600b0
Register 0xb80600b0 has value 0x00bf0736		// DDR2, 16bit wide



MyInfineon and ST account : pwd=JeffLi@Microhard18.
Microchip account : pwd=Microhard18

Nov 21, 2018
Conference call with Infineon. TrustB/E/X don't have enc/dec functionality. So they're not working for our off-line scenario. TPM guarntees every unit has a unique pair of keys and TrustP uses a pair of keys for a group of units.

IPn3Gii/4Gii programing : Need a jumper plugged to let the Atmel SAMA chip enter Boot mode, not running through to Boot-strap, u-boot and Linux. The PC needs to install a "atmel sama cdc driver". When USB cable is connected to a PC, the Sama5d3 chip works as a UART port. If the Atmel SAMA CDC driver doesn't install well, or the Win10 persistently installs its own driver and refuses to switch to Atmel CDC driver, just Uninstall that UART port driver completely, and then right click the ATmel's CDC driver file (.ini file), choose install from this file. This should work. Then the PC windows programmer application can see this UART port and program it. 

ar9344 u-boot : Only when using compressed u-boot, the u-boot-bootstrap.lds is used. In our case we don't use compressed u-boot and ignore the _bootstrap_ part of code. ENTRY(_start) is defined.
ifeq ($(COMPRESSED_UBOOT), 1)
LDFLAGS_BOOTSTRAP += -Bstatic -T $(LDSCRIPT_BOOTSTRAP) -Ttext $(BOOTSTRAP_TEXT_BASE) $(PLATFORM_LDFLAGS)
endif



Nov 19, 2018
For instance, it is common in flash-based MCU devices to include a lock bit which prevents reading portions of the memory (such as those containing program code and/or secrets) as an example . It is often relatively easy to defeat these lock bits with one or more of the attacks noted earlier : Fault Injection, TimingAnalysis, SideChannelAnalysis and Probing.

Using the GenDig command(see Section GenDig Command), the values in other slots can be included in the response digest or signature, which provides an effective way of proving that a data read really did come from the device, as opposed to being inserted by a man-in-the-middle attacker------This looks like random personalized data in other slots can change the signature so that the PUBk---PRIVk pair can not be replaced by a new pair.

atcab_get_pubkey() function generates a public key from a private key slot#(not the private key). This prevents the MCU from storing a public in the flash chip.---But this incurs another rist. If the hacker makes his own code on top of the public Atmel AuthCrypto library to read out all the slots of the device. If a Rootfs encryption secret is stored in a slot, the hacker knows the secret. For the unreadable Private Key, he just replace with his own Private Key.

Nov 16, 2018
Unit1 change root password by pass command to "123qaz". Copy Unit1's /etc/shadow file the root line:
root:$1$acbrfSJO$y..f/CQ1j5wVVhsl1nG3w.:17822:0:99999:7:::
to Unit2's /etc/shadow file. Then Unit2's root password becomes "123qaz" too from none password. 

Nov 15,2018
The device features
hardware acceleration for the NIST standard P256 prime curve and supports the complete key life cycle from high quality private key generation, to ECDSA signature generation, ECDH key agreement, and ECDSA public key signature verification.
Each ATECC508A ships with a guaranteed unique 72-bit serial number.Using the cryptographic protocols supported by the device, a host system or remote server can verify a signature of the serial number to prove that the serial number is authentic and not a copy.Serial numbers are often stored in a standard Serial EEPROM; however, these can be easily copied with no way for the host to know if the serial number is authentic or if it is a clone.
The device is designed to securely store multiple private keys along with their associated public keys and certificates.
In a host-client configuration where the host (for instance, a mobile phone) needs to verify a client (for instance, an OEM battery), there is a need to store the secret in the host in order to validate the response from the client. The CheckMac command(see Section CheckMac Command) allows the device to securely store the secret in the host system and hides the correct response value from the pins, returning only a yes or no answer to the system.

The ATECC508A contains an integrated EEPROM storage memory and SRAM buffer. The EEPROM memory contains a total of 11,200 bits and is divided into the following zones: 1. Data :1208 Bytes), 2.Configuration (128Bytes), 3.OTP(64Bytes).

EEPROM Data Zone: The data zone is broken into 16 slots, for which access restrictions are individually programmable. While all slots can be used for private or secret keys or user data, only slots 8 through 15 are large enough to store an ECC public key or ECDSA certificate/signature.Private keys can never be read from the device under any circumstances.
EEPROM Configuration Zone: The 128 bytes in the configuration zone contain the manufacturing identification data, general device and system configuration information, and access policy control values for the slots within the Data zone. It is organized as four blocks of 32 bytes each.

Slots used to store key values should always have IsSecret set to one and EncryptRead set to zero (reads prohibited) for maximum security.

The device should be personalized at the system manufacturer’s site with the desired configuration information; after which, the configuration zone should be locked. Then, all necessary writes of public and secret information into the data and OTP zones should be performed by using encrypted writes, if appropriate, and then the data and OTP zones should be locked.It is vital that the data and OTP zones be locked prior to release into the field of the system containing the device.

Contact Microchip for optional secure personalization services. This looks like the personalization can be done in Microhard.


Nov 14, 2018
dm-crypt looks need human input for passphrase. 
root@UserDevice:~# cat proc/sys/kernel/random/boot_id                                  
14082a2a-2444-45c1-8abc-88fb78633291  
This can distinguish each boot-up.

Nov 13, 2018
In a ar9331 pwii board, dmesg shows 
<5>[    0.960000] 0x000000300000-0x000001bc0000 : "rootfs"
<5>[    0.970000] 1 squashfs-split partitions found on MTD device rootfs
<5>[    0.970000] 0x000000e40000-0x000001bc0000 : "rootfs_data"

So only extract this rootfs part to a file by:
root@UserDevice:~# dd if=/dev/mtdblock8 of=/tmp/sqfs.bin bs=64k count=180

Scp this file to a Ubuntu1804 system and try to mount it:
jli@DENG-JEFFL:~/test/squashfs$ sudo mount -t squashfs -o loop sqfs.bin mn
mount: /home/jli/test/squashfs/mn: can't read superblock on /dev/loop24.

Try to extract this image by unsquashfs:
jli@DENG-JEFFL:~/test/squashfs$ unsquashfs sqfs.bin 
Parallel unsquashfs: Using 8 processors
1561 inodes (1560 blocks) to write


create_inode: could not create character device squashfs-root/dev/console, because you're not superuser!
[==============================================================================| ] 1559/1560  99%

created 1293 files
created 91 directories
created 267 symlinks
created 0 devices
created 0 fifos
jli@DENG-JEFFL:~/test/squashfs$ ll
total 18832
drwxr-xr-x  4 jli jli     4096 Nov 13 13:38 ./
drwxr-xr-x  8 jli jli     4096 Nov 13 09:12 ../
-rw-r--r--  1 jli jli  7471104 Nov 13 09:22 MHS-root.squashfs
drwxr-xr-x  2 jli jli     4096 Nov 13 13:37 mn/
-rw-r--r--  1 jli jli 11796480 Nov 13 12:01 sqfs.bin
drwxr-xr-x 16 jli jli     4096 Oct 18 15:10 squashfs-root/
jli@DENG-JEFFL:~/test/squashfs$ ll squashfs-root/
total 64
drwxr-xr-x 16 jli jli 4096 Oct 18 15:10 ./
drwxr-xr-x  4 jli jli 4096 Nov 13 13:38 ../
drwxr-xr-x  2 jli jli 4096 Oct 18 15:10 bin/
drwxr-xr-x  2 jli jli 4096 Oct 18 15:00 dev/
drwxr-xr-x 22 jli jli 4096 Oct 18 15:08 etc/
drwxrwxr-x 11 jli jli 4096 Oct 18 15:10 lib/
drwxr-xr-x  2 jli jli 4096 Oct 18 15:00 mnt/
drwxr-xr-x  2 jli jli 4096 Oct 18 15:00 overlay/
drwxr-xr-x  2 jli jli 4096 Oct 18 15:00 proc/
drwxrwxr-x  2 jli jli 4096 Oct 18 15:10 rom/
drwxr-xr-x  2 jli jli 4096 Oct 18 15:00 root/
drwxr-xr-x  2 jli jli 4096 Oct 18 15:10 sbin/
drwxr-xr-x  2 jli jli 4096 Oct 18 15:00 sys/
drwxrwxrwt  2 jli jli 4096 Oct 18 15:10 tmp/
lrwxrwxrwx  1 jli jli    4 Oct 18 15:10 upgrade -> /tmp/
drwxr-xr-x  7 jli jli 4096 Oct 18 15:01 usr/
lrwxrwxrwx  1 jli jli    4 Oct 18 15:10 var -> /tmp/
drwxrwxr-x  7 jli jli 4096 Oct 18 15:10 www/

All the files are shown clearly.

Nov 8, 2018
#0006890. When a pMDDL unit can not hear anything, the ath9k/ani looks have high SPUR and FIR values.
root@UserDevice:~# cat sys/kernel/debug/ieee80211/phy0/ath9k/ani 
            ANI: ENABLED
      ANI RESET: 450
     OFDM LEVEL: 1
      CCK LEVEL: 0
        SPUR UP: 223
      SPUR DOWN: 223
 OFDM WS-DET ON: 0
OFDM WS-DET OFF: 0
     MRC-CCK ON: 0
    MRC-CCK OFF: 0
    FIR-STEP UP: 231
  FIR-STEP DOWN: 267
 INV LISTENTIME: 0
    OFDM ERRORS: 16801657
     CCK ERRORS: 0

Nov 7,2018
How config button works in all devices.
1. machine file, define the input GPIO of the button:
static struct gpio_keys_button mhs_331_gpio_keys[] __initdata = {
	{
		.desc		= "RESET",
		.type		= EV_KEY,
		.code		= KEY_RESTART,
		.debounce_interval = MHS_331_KEYS_DEBOUNCE_INTERVAL,
		.gpio		= MHS_331_GPIO_BTN_RESET,
		.active_low	= 1,

	},
};

2. In package/kernel/gpio-button-hotplug/src/gpio-button-hotplug.c, map KEY_RESTART to "reset"
static struct bh_map button_map[] = {
        BH_MAP(BTN_0,           "BTN_0"),
        BH_MAP(BTN_1,           "BTN_1"),
        BH_MAP(BTN_2,           "BTN_2"),
        BH_MAP(BTN_3,           "BTN_3"),
        BH_MAP(BTN_4,           "BTN_4"),
        BH_MAP(BTN_5,           "BTN_5"),
        BH_MAP(BTN_6,           "BTN_6"),
        BH_MAP(BTN_7,           "BTN_7"),
        BH_MAP(BTN_8,           "BTN_8"),
        BH_MAP(BTN_9,           "BTN_9"),
        BH_MAP(KEY_POWER,       "power"),
        BH_MAP(KEY_RESTART,     "reset"),
        BH_MAP(KEY_RFKILL,      "rfkill"),
        BH_MAP(KEY_WPS_BUTTON,  "wps"),
        BH_MAP(KEY_WIMAX,       "wwan"),
};

3. Kernel calls /etc/hotplug.json in any button events.

4. /etc/rc.button/reset is called if it is "reset" key. 

NOv 5,2018
How to print syslog info in netifd program?
netifd_log_message(L_NOTICE, "==MHX1.0(%s) Interface=%s\n",  __func__, iface->name);
Netifd generates the /tmp/resolv.conf.auto.DNSMASK basically only reads it.

Nov 2, 2018
STSAFE-A100, NXP-A71CH and Infineion OPTIGA Trust are all sccurity chips. My understanding:
1. In IoT scenario. G5(with a scrurity IC on board) <--TLS--> server(cloud), authenticate with each other. So the whole G5 board can be sure genuine. In this case the MCU+FlashCode+RAM only works as a pass-through to the remote server. 
2. For stand-alone product like pDDL. Imagine AR9331+Flash+RAM consists a system-A while all other parts+PCB+SecureIC consists system-B. System-A<-----I2C,encrypted---->System-B. System-A uses a challenge to authenticate system-B. Because serure IC can not be cloned and globally unique, so the system-B can be verified genuine. The only concern is that the Flash in System-A can be read and changed to by-pass the authentication procedure. 


Oct 30, 2018
pMDDL module can be mounted on the regular pDDL dev boards. And it can be installed to nCPU Interface carrier boards, and HongKong boards. 
The RSMode and RING signals should be initialized to 1 in u-boot otherwise the console port doesn't work.
TO make J5 as console port work, !RSMode=3.3V(RSMode=0), RING_I=0V. 

Oct 29, 2018
pMDDL2458(3Pi), some channels are HT mode but some channels are only 11a rates.

// 5899 is not-ht rates
root@UserDevice:~# iw wlan0 scan
BSS 00:0f:92:fa:88:28(on wlan0) -- associated
        TSF: 335564920 usec (0d, 00:05:35)
        freq: 5899
        beacon interval: 100 TUs
        capability: ESS Privacy (0x0011)
        signal: -60.00 dBm
        last seen: 240 ms ago
        Information elements from Probe Response frame:
        SSID: pMDDL
        Supported rates: 6.0* 9.0 12.0* 18.0 24.0* 36.0 48.0 54.0 
        DS Parameter set:       TIM: DTIM Count 0 DTIM Period 2 Bitmap Control 0x0 
Bitmap[0] 0x0
        RSN:     * Version: 1
                 * Group cipher: CCMP
                 * Pairwise ciphers: CCMP
                 * Authentication suites: PSK
                 * Capabilities: 16-PTKSA-RC 1-GTKSA-RC (0x000c)
        HT capabilities:
                Capabilities: 0x18d
                        RX LDPC
                        HT20
                        SM Power Save disabled
                        TX STBC
                        RX STBC 1-stream
                        Max AMSDU length: 3839 bytes
                        No DSSS/CCK HT40
                Maximum RX AMPDU length 65535 bytes (exponent: 0x003)
                Minimum RX AMPDU time spacing: 8 usec (0x06)
                HT TX/RX MCS rate indexes supported: 0-15
        HT operation:
                 * secondary channel offset: no secondary
                 * STA channel width: 20 MHz
                 * RIFS: 0
                 * HT protection: non-HT mixed
                 * non-GF present: 0
                 * OBSS non-GF present: 1
                 * dual beacon: 0
                 * dual CTS protection: 0
                 * STBC beacon: 0
                 * L-SIG TXOP Prot: 0
                 * PCO active: 0
                 * PCO phase: 0
        Extended capabilities: 6
        WMM:     * Parameter version 1
                 * BE: CW 15-1023, AIFSN 3
                 * BK: CW 15-1023, AIFSN 7
                 * VI: CW 7-15, AIFSN 2, TXOP 3008 usec
                 * VO: CW 3-7, AIFSN 2, TXOP 1504 usec

// 5010 is ht mode.
root@UserDevice:~# iw wlan0 scan
BSS 00:0f:92:fa:88:28(on wlan0) -- associated
        TSF: 322150520 usec (0d, 00:05:22)
        freq: 5010
        beacon interval: 100 TUs
        capability: ESS Privacy (0x0011)
        signal: -68.00 dBm
        last seen: 180 ms ago
        Information elements from Probe Response frame:
        SSID: pMDDL
        Supported rates: 6.0* 9.0 12.0* 18.0 24.0* 36.0 48.0 54.0 
        DS Parameter set:       TIM: DTIM Count 1 DTIM Period 2 Bitmap Control 0x0 
Bitmap[0] 0x0
        RSN:     * Version: 1
                 * Group cipher: CCMP
                 * Pairwise ciphers: CCMP
                 * Authentication suites: PSK
                 * Capabilities: 16-PTKSA-RC 1-GTKSA-RC (0x000c)
        HT capabilities:
                Capabilities: 0x18d
                        RX LDPC
                        HT20
                        SM Power Save disabled
                        TX STBC
                        RX STBC 1-stream
                        Max AMSDU length: 3839 bytes
                        No DSSS/CCK HT40
                Maximum RX AMPDU length 65535 bytes (exponent: 0x003)
                Minimum RX AMPDU time spacing: 8 usec (0x06)
                HT TX/RX MCS rate indexes supported: 0-15
        HT operation:
                 * secondary channel offset: no secondary
                 * STA channel width: 20 MHz
                 * RIFS: 0
                 * HT protection: no		// not HT protection.
                 * non-GF present: 1
                 * OBSS non-GF present: 0
                 * dual beacon: 0
                 * dual CTS protection: 0
                 * STBC beacon: 0
                 * L-SIG TXOP Prot: 0
                 * PCO active: 0
                 * PCO phase: 0
        Extended capabilities: 6
        WMM:     * Parameter version 1
                 * BE: CW 15-1023, AIFSN 3
                 * BK: CW 15-1023, AIFSN 7
                 * VI: CW 7-15, AIFSN 2, TXOP 3008 usec
                 * VO: CW 3-7, AIFSN 2, TXOP 1504 usec

This non-ht issue comes from STA side:
<6>[10034.710000] wlan0: authenticate with 00:0f:92:fa:88:28
<6>[10034.710000] wlan0: Wrong control channel: center-freq: 5899 ht-cfreq: 5131 ht->primary_chan: 131 band: 1 - Disabling HT
<6>[10034.710000] wlan0: direct probe to 00:0f:92:fa:88:28 (try 1/3)
<6>[10034.920000] wlan0: send auth to 00:0f:92:fa:88:28 (try 2/3)
<6>[10034.920000] wlan0: authenticated
<6>[10034.930000] wlan0: associate with 00:0f:92:fa:88:28 (try 1/3)
<6>[10035.040000] wlan0: associate with 00:0f:92:fa:88:28 (try 2/3)
<6>[10035.150000] wlan0: associate with 00:0f:92:fa:88:28 (try 3/3)
<6>[10035.260000] wlan0: association with 00:0f:92:fa:88:28 timed out
<6>[10036.210000] wlan0: authenticate with 00:0f:92:fa:88:28
<6>[10036.210000] wlan0: Wrong control channel: center-freq: 5899 ht-cfreq: 5131 ht->primary_chan: 131 band: 1 - Disabling HT

If require_ht=1 is set on AP side, then hostapd reports:
1540002760.447880: 1540002760.447890: wlan0: STA 00:0f:92:fa:88:1a IEEE 802.11: authenticated 
1540002760.456828: nl80211: BSS Event 59 (NL80211_CMD_FRAME) received for wlan0   
1540002760.456920: nl80211: RX frame freq=5899 ssi_signal=-63 stype=0 len=86      
1540002760.456990: wlan0: Event RX_MGMT (20) received                             
1540002760.457027: mgmt::assoc_req                                                
1540002760.457050: association request: STA=00:0f:92:fa:88:1a capab_info=0x11 list en_interval=1
1540002760.457112: Validating WMM IE: OUI 00:50:f2  OUI type 2  OUI sub-type 0  version 1  QoS info 0x0 
1540002760.457239: 1540002760.457250: wlan0: STA 00:0f:92:fa:88:1a IEEE 802.11: Station does not support mandatory HT PHY - reject association
1540002760.457478: nl80211: send_mlme - noack=0 freq=0 no_cck=0 offchanok=0 wait_time=0 fc=0x10 nlmode=3
1540002760.457542: nl80211: send_mlme -> send_frame
1540002760.457566: nl80211: send_frame - Use bss->freq=5899
1540002760.457593: nl80211: send_frame -> send_frame_cmd
1540002760.459034: nl80211: Drv Event 60 (NL80211_CMD_FRAME_TX_STATUS) received for wlan0
1540002760.459146: nl80211: Frame TX status event                                 


Oct 19,2018
Talk about the pDDL USB bodes with Lihong.
1) pDDL as a USB Device mode (Pin14=0) : This can be directly connected with Windows PC or Linux PC easily. When connected to a Android device, e.g., Tablet or SmartPhone, a OTG cable is needed to change the Android device USB to HOST mode. Otherwise Android is a Device too and can not connect to the pDDL USB Device.

2) pDDL as a USB HOST mode (Pin14=1) : The scenario is that, a Android cellphone as a USB Device and connected to pDDL HOST with a normal USB cable. pDDL side needs to use WebUI to turn on Tethering mode. This is actually turing on Firewall, no any other operations. On the Andrond Tablet or Cellphone, if it has a SIM card (with cellular cnnectoin), the Tethering mode can be turned on on this device. After turning on the Tethering mode, the Android device will start a DHCP server and assign a IP to the pDDL USB HOST. Then the pDDL can use the Android device(Tablet or Smartphone) to access Internet. 

Oct 17, 2018
3Pi some channel# are still u8:
1. cfg80211_get_bss_channel() : channel_number = tmp[2]; channel_number = htop->primary_chan; // primary_chan is u8.

stepOne_channel_to_frequency(int chan, enum ieee80211_band band) and int stepOne_frequency_to_channel(int freq) : The chan is in the big order but not in the in-band order. The 2.4G in-band chan order is 0-99 and 5G in-band order is 0-900. But these 2 functions use big order. For 5G the chan is 100-1000; 

Note hostapd/supplicant use in-band channel order. So the channel# in Beacon IE is in-band chan#. 

Does this scheme make sense? In 5G band, in-band channel# should be uesd just like in 2G band. 

Oct 15, 2018
To accompdate 900 channels in pMDDL2458:
1. In libnl-tiny, nl.c, nl_recv:
iov.iov_len = page_size * 8;	// this buffer needs to be enlarged from *6 to *8.

2. In driver /net/wireless/nl80211.c:
nl80211_get_wiphy(): msg = nlmsg_new(4096 * 4, GFP_KERNEL); // times 4 to make authsae to work. But if this number is too high, iwinfo command will fail.

Oct 11,2018
root@UserDevice:~# iwinfo wlan0 freq
======MHX(nl_recv) iov.iov_len=33554432, ret n=2360, errno=0. EINTR=4, EAGAIN=11    // page_size=4k, the recv buffer is big enough.
======MHX(nl_recv) iov.iov_len=33554432, ret n=20, errno=0. EINTR=4, EAGAIN=11
==MHX2.-2(nl80211_get_freqlist) req=0x76ff51e8
======MHX(nl_recv) iov.iov_len=33554432, ret n=-1, errno=132. EINTR=4, EAGAIN=11    // errno : 132 , error : Operation not possible due to RF-kill
======MHX(nl_recv) errno=132. return.

In static int nl80211_get_wiphy(struct sk_buff *skb, struct genl_info *info)
{
        struct sk_buff *msg;
        struct cfg80211_registered_device *rdev = info->user_ptr[0];
        struct nl80211_dump_wiphy_state state = {};

        msg = nlmsg_new(4096, GFP_KERNEL);	// restore size from 4096 * 16 to 4096 solves this error!!!
...
}
Finally found the root cause is in kernel driver. This brought 2 points:
1. The error comes from NL send side not in the recvmsg() side in the iwinfo.
2. iw doesn't have this error with CMD_GET_WIPHY only iwinfo has this issue. Maybe because the userspace has different NL programming scheme.

Oct 10, 2018
3Pi product expand 5G channels to 900. iwinfo package has recvmsg() error ENOBUFS:

sendmsg(3, {msg_name(12)={sa_family=AF_NETLINK, pid=0, groups=00000000}, msg_iov(1)
=[{"\0\0\0\34\0\23\0\5[\276H>\0\0\21\35\1\0\0\0\0\10\0\3\0\0\0\7", 28}], msg_contro
llen=0, msg_flags=0}, 0) = 28
mmap(NULL, 4198400, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, 0, 0) = 0x76ee
2000
recvmsg(3, 0x7fbb7f10, 0)               = -1 ENOBUFS (No buffer space available)
write(1, "======MHX(nl_recv) ret n=-1\n", 28======MHX(nl_recv) ret n=-1
) = 28
munmap(0x76ee2000, 4198400)             = 0
mmap(NULL, 4198400, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, 0, 0) = 0x76ee
2000
recvmsg(3, {msg_name(12)={sa_family=AF_NETLINK, pid=0, groups=00000000}, msg_iov(1)
=[{"\0\0W\200\0\23\0\0[\276H>\0\0\21\35\3\1\0\0\0\10\0\1\0\0\0\0\0\t\0\2"..., 41943
04}], msg_controllen=0, msg_flags=0}, 0) = 22400
write(1, "======MHX(nl_recv) ret n=22400\n", 31======MHX(nl_recv) ret n=22400
) = 31
brk(0x8ba000)                           = 0x8ba000
write(1, "==MHX1.0(nl80211_get_freqlist_cb"..., 34==MHX1.0(nl80211_get_freqlist_cb)
) = 34
write(1, "==MHX1.0(nl80211_get_freqlist_cb"..., 34==MHX1.0(nl80211_get_freqlist_cb)
) = 34
write(1, "==MHX1.2(nl80211_get_freqlist_cb"..., 34==MHX1.2(nl80211_get_freqlist_cb)
) = 34


   Increasing the buffer size would not solve the problem, that will
    only delay the ENOBUFS error. There are several reasons why you may
    hit ENOBUFS:

    a) your program is too slow to handle the Netlink messages that you
    receive from the kernel at a given rate. This is easier to trigger
    if the handling that you perform on every message takes too long.
    b) the queue size is too small, but this does not seem to be your case.

    ENOBUFS basically means that the kernel has to drop Netlink messages
    because your user-space program cannot back-off.


Oct 5, 2018
How to debug a shell script. For example, 
root@UserDevice:~# vi lib/netifd/wireless/mac80211.sh 
IN the first line, change to "#!/bin/sh -x". In this case, if some errors happen, the "logread -f" will show : 

Wed Jul 11 18:45:53 2018 daemon.notice netifd: radio0 (10859): + ubus call network.wireless notify { "command": 0, "device": "radio0", "data": { } }
Wed Jul 11 18:45:53 2018 daemon.notice netifd: radio0 (10859): + json_set_namespace
Wed Jul 11 18:45:53 2018 daemon.notice netifd: radio0 (10859): + local _new=
Wed Jul 11 18:45:53 2018 daemon.notice netifd: radio0 (10859): + local _old=
Wed Jul 11 18:45:53 2018 daemon.notice netifd: radio0 (10859): + [ -n  ]
Wed Jul 11 18:45:53 2018 daemon.notice netifd: radio0 (10859): + JSON_PREFIX=
Wed Jul 11 18:45:53 2018 daemon.notice netifd: radio0 (10859): + cat /sys/kernel/debug/ieee80211/phy0/ath10k/chip_id
Wed Jul 11 18:45:53 2018 daemon.notice netifd: radio0 (10859): + chipid=0x043202ff
Wed Jul 11 18:45:53 2018 daemon.notice netifd: radio0 (10859): + [ 0x043202ff = 0x043202ff ]
Wed Jul 11 18:45:53 2018 daemon.notice netifd: radio0 (10859): + iw dev wlan0 set bitrates vht-mcs-5 1:0-9 2:0-9 3:0-7 sgi-5
Wed Jul 11 18:45:53 2018 daemon.notice netifd: radio0 (10859): command failed: Operation not permitted (-1)

So you can pin down the "iw dev wlan0 sete bitrates" command execution error.

In G5 ath10k, STA mode doesn't support setting bitrates. Only AP mode supports.
root@UserDevice:~# iw dev wlan0 set bitrates vht-mcs-5 1:0-9 2:0-9 3:0-7 sgi-5                          
command failed: Operation not permitted (-1) 

Oct 3, 2018

The tx_aggr crash+reboot issus is caused by :
ath_tx_aggr_start()
{
............

	txtid = ATH_AN_2_TID(an, tid);
	if(!txtid) return 0;
	if(!(txtid->ac)) {		// in secure mesh mode, ac can be NULL.
		WARN_ON_ONCE(1);
		return 0;
	}
..................
}

Further debug secure mesh WARN_ON_ONCE() issue. In mesh_sta_info_get(), add a delay to allow upper meshd-nl80211 to create a new STA:
		sta = mesh_sta_info_alloc(sdata, addr, elems);
		printk("==MHX3.1(%s) new sta(%p)\n", __func__, sta);
		if (!sta) {
			rcu_read_lock();
			printk("==MHX3.2(%s) before msleep_interruptible(200)\n", __func__);
			msleep_interruptible(200);	// MHXJL wait sta to be created.
			printk("==MHX3.3(%s) after msleep_interruptible(200)\n", __func__);
			return NULL;
		}
But this doesn't help to remove thw WARN_ON_ONCE issue. NOTE: WARN_ON_ONCE will only core cump once. Following same error conditions will not trigger a dump. Here is the log:

root@UserDevice:~# ps | grep mesh                                                                  
 1849 root      1364 S    grep mesh                                                                
root@UserDevice:~# cat var/run/authsae-wlan0.cfg                                                   
authsae:                                                                                           
{                                                                                                  
 sae:                                                                                              
  {                                                                                                
    debug = 0x3ff;                                                                                 
    password = "qazwsxedc";                                                                        
    group = [19, 26, 21, 25, 20];                                                                  
    blacklist = 30;                                                                                
    thresh = 5;                                                                                    
    lifetime = 72000;                                                                              
  };                                                                                               
 meshd:                                                                                            
  {                                                                                                
    meshid = "pDDL900-jeff";                                                                       
    interface = "wlan0";                                                                           
    passive = 0;                                                                                   
    debug = 1;                                                                                     
    mediaopt = 1;                                                                                  
    band = "11g";                                                                                  
    channel = 1;                                                                                   
    htmode = "HT20";                                                                               
    mcast-rate = 6;                                                                                
  };                                                                                               
};                                                                                                 
root@UserDevice:~#                                                                                 
root@UserDevice:~# echo "8 8 8 8" > /proc/sys/kernel/printk; /usr/bin/meshd-nl80                   
211 -i wlan0 -s pDDL900-jeff -c /var/run/authsae-wlan0.cfg                                         
group 19 is configured, prime is 32 bytes                                                          
group 26 is configured, prime is 28 bytes                                                          
group 21 is configured, prime is 66 bytes                                                          
group 25 is configured, prime is 24 bytes                                                          
group 20 is configured, prime is 48 bytes                                                          
----------                                                                                         
nlcfg rates hexdump                                                                                
00 3c 00 5a 00 78 00 b4 00 f0 01 68                                                                
----------                                                                                         
                                                                                                   
----------                                                                                         
mgtk:  hexdump                                                                                     
52 81 b8 75 85 9a 61 b5 38 da 23 f1 ae 15 0c 11                                                    
----------                                                                                         
                                                                                                   
----------                                                                                         
Fixed Information Element
[   91.310000] br-lan: port 2(wlan0) entered forwarding state             
[   91.310000] br-lan: port 2(wlan0) entered forwarding state                                      
s in this STA hexdump                                                                              
01 06 8c 12 98 24 b0 48                                                                            
----------                                                                                         
                                                                                                   
meshd: Starting mesh with mesh id = pDDL900-jeff                                                   
----------                                                                                         
basic rates: hexdump                                                                               
8c 98 b0                                                                                           
----------                                                                                         
                                                                                                   
joining mesh pDDL900-jeff on freq 2391, mode 1                                                     
[   91.840000] ==MHX3.1(mesh_sta_info_get) new sta(  (null))                                       
[   91.840000] ==MHX3.2(mesh_sta_info_get) before msleep_interruptible(200)                        
[   91.850000] ===MHX6.1(rate_lowest_index): band=0, sband->n_bitrates=6, rates=0x00000000         
[   91.860000] ------------[ cut here ]------------                                                
[   91.860000] WARNING: at /home/jli/project/work/g3/pddl-924/build_dir/target-mips_34kc_uClibc-0.9
.33.2/linux-ar71xx_generic/compat-wireless-mh_ddl2/include/net/mac80211.h:4632 ieee80211_mps_frame_
release+0xfe0/0x1488 [mac80211]()                                                                  
[   91.880000] CPU: 0 PID: 2027 Comm: meshd-nl80211 Not tainted 3.10.36 #9                         
[   91.890000] Call Trace:                                                                         
[   91.890000] [<8006dcc8>] show_stack+0x48/0x70                                                   
[   91.890000] [<800764cc>] warn_slowpath_common+0x78/0xa8                                         
[   91.900000] [<80076584>] warn_slowpath_null+0x18/0x24                                           
[   91.900000] [<832446e8>] ieee80211_mps_frame_release+0xfe0/0x1488 [mac80211]                    
NL80211_CMD_NEW[   91.910000] [<832196fc>] ieee80211_csa_finish+0x3b80/0x4230 [mac80211]           
[   91.920000]                                                                                     
[   91.920000] ---[ end trace a6794538ac8b7d29 ]---                                                
_PEER_CANDIDATE(1538668973.779493)                                                                 
received a beacon from 00:0f:92:01:02:02                                                           
Initiate event                                                                                     
new peer candidate (seq num=1538668989)                                                            
computing PWE on 256 bit curve number 19                                                           
H(00:0f:92:fa:4f:d5 | 00:0f:92:01:02:02, qazwsxedc | 1)                                            
9bf27cf3 9e9f4415 0fc3fc0e b3844263 fdd67727 f421594c a306acc0 6f267cb2                            
candidate x value:                                                                                 
0605bcaf 4251d5d9 9244de68 23753b
[   91.960000] ------------[ cut here ]------------               
[   91.960000] WARNING: at /home/jli/project/work/g3/pddl-924/build_dir/target-mips_34kc_uClibc-0.9
.33.2/linux-ar71xx_generic/compat-wireless-mh_ddl2/net/mac80211/rate.c:251 rate_control_send_compor
t+0x410/0x508 [mac80211]()                                                                         
[   91.980000] CPU: 0 PID: 2027 Comm: meshd-nl80211 Tainted: G        W    3.10.36 #9              
[   91.990000] Call Trace:                                                                         
[   91.990000] [<8006dcc8>] show_stack+0x48/0x70                                                   
[   92.000000] [<800764cc>] warn_slowpath_common+0x78/0xa8                                         
[   92.000000] [<80076584>] warn_slowpath_null+0x18/0x24                                           
[   92.010000] [<83213768>] rate_control_send_comport+0x410/0x508 [mac80211]                       
[   92.010000]                                                                                     
[   92.010000] ---[ end trace a6794538ac8b7d2a ]---                                                
f9 733e8cb5 49dae724 689e4e61 1587a7c9                                                             
                                                                                                   
PWE (x,y):                                                                                         
x:                                                                                                 
0605bcaf 4251d5d9 9244de68 23753bf9 733e8cb5 49dae724 689e4e61 1587a7c9                            
                                                                                                   
y:                                                                                                 
42ade93c e8e5a63c 360ab398 645581c9 ca5e9490 13ea3936 a5dc8093 ab8b8d08                            
                                                                                                   
it took 1 tries to find PWE: 19                                                                    
assigning group 19 to peer, the size of the prime is 32                                            
local private value:                                                                               
2908dcce dab8564e 4a968c9b 341b1ae3 243e530a bc93c63c e8ecd69f 250d462f                            
                                                                                                   
local mask value:                                                                                  
18
[   92.060000] ==MHX3.3(mesh_sta_info_get) after msleep_interruptible(200)  // sleep time is correct 200ms. but doesn't help.
[   92.060000] ==MHX4.1(ieee80211_mesh_rx_bcn_presp) ifmsh->csa_role=0, sdata->vif.csa_active=0    
[   92.070000] ==MHX5.1(ieee80211_mesh_process_chnswitch) sta_flags=0x00000c00, err=1              
d07b80 ba6a6a86 43b2abf4 736208c6 61501bf1 89d65fc0 4cc341cd 4d2a15e2                              
                                                                                                   
local commit:                                                                                      
my scalar:                                                                                         
41d9584f 9522c0d4 8e49388f a77d23a9 858e6efc 466a25fd 35b0186c 72375c11                            
                                                                                                   
my element:                                                                                        
x:                                                                                                 
adb5c379 8b979650 8b10dc7e 56aa7d0f 87b4904a b3670d5c b6c92cc0 6867b492                            
                                                                                                   
y:                                                                                                 
e982b72a 90aa2503 5569fb2f 79843bbd 12560562 49b298a4 6d9f90b3 3cf169e0                            
                                                                                                   
in NOTHING, sending COMMIT (no token), len 128, group 19                                           
tx_frame(0x41c9d8, 0x7fad97d0, 128)                                                                
tx frame (seq num=1538668990)                                                                      
----------                                                                                         
tx frame hexdump                                                                                   
b0 00 00 00 00 0f 92 01 02 02 00 0f 92 fa 4f d5 00 0f 92 01                                        
02 02 00 00 03 00 01 00 00 00 13 00 41 d9 58 4f 95 22 c0 d4                                        
8e 49 38 8f a7 7d 23 a9 85 8e 6e fc 46 6a 25 fd 35 b0 18 6c                                        
72 37 5c 11 ad b5 c3 79 8b 97 96 50 8b 10 dc 7e 56 aa 7d 0f                                        
87 b4 90 4a b3 67 0d 5c b6 c9 2c c0 68 67 b4 92 e9 82 b7 2a                                        
90 aa 25 03 55 69 fb 2f 79 84 3b bd 12 56 05 62 49 b2 98 a4                                        
6d 9f 90 b3 3c f1 69 e0                                                                            
----------                                                                                         
                                                                                                   
state of 00:0f:92:01:02:02 is now (1) COMMITTED                                                    
                                                                                                   
new unauthed sta (seq num=1538668991)                                                              
NL80211_CMD_NEW_STATION (1538668973.954320)                                                        
NL80211_CMD_TX_STATUS (1538668973.954446)                                                          
nlerror, cmd 18, seq 1538668991: Invalid argument                                                  
NL80211_CMD_FRAME (1538668973.980700)                                                              
----------                                                                                         
rx frame hexdump                                                                                   
b0 00 3c 00 00 0f 92 fa 4f d5 00 0f 92 01 02 02 00 0f 92 fa                                        
4f d5 e0 2a 03 00 01 00 00 00 13 00 cf 69 d6 07 47 b2 29 69                                        
c5 7b e1 a0 c1 dd 88 0f 5d ab f8 a6 5e 5c 21 8c c4 b2 1b 10                                        
b3 ba 6a 6e 4d 48 45 79 e6 ee d3 d1 9a 6b 46 72 60 c5 11 e0                                        
65 4e 65 5f 78 ea 61 8a a6 2e c0 d2 2c b1 a5 91 89 2b e7 66                                        
de 2b a5 61 96 9f 7b 57 f9 70 5d d7 e3 89 a9 ae 68 bc ee 22                                        
69 a7 f7 15 d3 cc 30 5a                                                                            
----------                                                                                         
                                                                                                   
recv'd COMMIT from 00:0f:92:01:02:02 while in COMMITTED                                            
peer's commit:                                                                                     
peer's scalar:                                                                                     
cf69d607 47b22969 c57be1a0 c1dd880f 5dabf8a6 5e5c218c c4b21b10 b3ba6a6e                            
                                                                                                   
peer's element:                                                                                    
x:                                                                                                 
4d484579 e6eed3d1 9a6b4672 60c511e0 654e655f 78ea618a a62ec0d2 2cb1a591                            
                                                                                                   
y:                                                                                                 
892be766 de2ba561 969f7b57 f9705dd7 e389a9ae 68bcee22 69a7f715 d3cc305a                            
                                                                                                   
k:                                                                                                 
a1fcb017 cebdb42c 48dc2b5c c5701497 133cfefb dce8197b 75b58434 3680cd67                            
                                                                                                   
keyseed:                                                                                           
235ccb0a 201cbcf0 e6e7560c c9409149 94882495 6f7e531c 6f2bbaeb 7b289e1f                            
                                                                                                   
KCK:                                                                                               
4294dd01 b729a4ac 5a522a84 ceb5f402 106a68e9 f92d1f63 18fd4e1d d48a66e8                            
                                                                                                   
PMK:                                                                                               
d191be49 b0ba39e0 7987309d 7afd9838 5e6963b0 182ed66d 21f0aa07 c126eedc                            
                                                                                                   
local confirm:                                                                                     
01004
[   92.280000] ==MHX3.1(mesh_sta_info_get) new sta(  (null))                                  
[   92.280000] ==MHX3.2(mesh_sta_info_get) before msleep_interruptible(200)                        
64f 9af48521 b8d0f0f1 82fb2593 f8402e16 cbb79d2d d3c172c8 41eb00eb                                 
4f33                                                                                               
                                                                                                   
in COMMITTED, sending CONFIRM (sc=1), len 64                                                       
tx_frame(0x41c9d8, 0x7fad9628, 64)                                                                 
tx frame (seq num=1538668992)                                                                      
----------                                                                                         
tx frame hexdump                                                                                   
b0 00 00 00 00 0f 92 01 02 02 00 0f 92 fa 4f d5 00 0f 92 01                                        
02 02 00 00 03 00 02 00 00 00 01 00 46 4f 9a f4 85 21 b8 d0                                        
f0 f1 82 fb 25 93 f8 40 2e 16 cb b7 9d 2d d3 c1 72 c8 41 eb                                        
00 eb 4f 33                                                                                        
----------                                                                                         
                                                                                                   
state of 00:0f:92:01:02:02 is now (2) CONFIRMED                                                    
                                                                                                   
NL80211_CMD_TX_STATUS (1538668974.56437)                                                           
NL80211_CMD_FRAME (1538668974.82526)                                                               
----------                                                                                         
rx frame hexdump                                                                                   
b0 00 3c 00 00 0f 92 fa 4f d5 00 0f 92 01 02 02 00 0f 92 fa                                        
4f d5 00 2b 03 00 02 00 00 00 01 00 73 f2 db 83 17 6c 7c 0c                                        
fb e5 0e b9 e9 c2 94 58 e0 21 c8 95 ae a6 47 3d 70 33 10 f2                                        
50 44 7a 5e                                                                                        
----------                                                                                         
                                                                                                   
recv'd CONFIRM from 00:0f:92:01:02:02 while in CONFIRMED                                           
processing confirm (1)                                                                             
peer's confirm:                                                                                    
010073f2 db83176c 7c0cfbe5 0eb9e9c2 9458e021 c895aea6 473d7033 10f25044                            
7a5e                                                                                               
                                                                                                   
PMK:                                                                                               
d191be49 b0ba39e0 7987309d 7afd9838 5e6963b0 182ed66d 21f0aa07 c126eedc                            
                                                                                                   
fin: 0, key len:32 peer:00:0f:92:01:02:02 me:00:0f:92:fa:4f:d5                                     
----------                                                                                         
pmk hexdump                                                                                        
d1 91 be 49 b0 ba 39 e0 79 87 30 9d 7a fd 98 38 5e 69 63 b0                                        
18 2e d6 6d 21 f0 aa 07 c1 26 ee dc                                                                
----------                                                                                         
                                                                                                   
set plink state (seq num=1538668993)                                                               
----------                                                                                         
aek context:  hexdump                                                                              
00 0f ac 08 00 0f 92 01 02 02 00 0f 92 fa 4f d5                                                    
----------                                                                                         
                                                                                                   
----------                                                                                         
aek:  hexdump                                                                                      
40 f5 97 df 80 3a 03 49 c3 b7 e1 e7 72 8b 63 4c a5 ea 57 fc                                        
83 60 bf 8e 4a e1 96 03 bb 7a 7e 7b                                                                
----------                                                                                         
                                                                                                   
set plink state (seq num=1538668994)                                                               
Mesh plink: starting establishment with 00:0f:92:01:02:02                                          
Mesh plink: Sending plink action 1                                                                 
Protecting frame from 00:0f:92:fa:4f:d5 to 00:0f:92:01:02:02                                       
Checking tricky lengths of protected frame 110, 98                                                 
----------                                                                                         
SIV- Put AAD[3]:  hexdump                                                                          
0f 01 10 00 01 06 8c 12 98 24 b0 48 72 0c 70 44 44 4c 39 30                                        
30 2d 6a 65 66 66 71 08 00 00 00 00 00 00 00 00 75 14 01 00                                        
0b c5 11 43 2e 57 dc d4 ea 3d 53 c5 1a 30 69 5a ab b9 2d 1a                                        
00 01 18 ff 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00                                        
00 00 00 00 00 00 3d 16 01 00 03 00 00 00 ff 00 00 00 00 00                                        
00 00 00 00 00 00 00 00 00 00                                                                      
----------                                                                                         
                                                                                                   
tx_frame(0x41c9d8, 0x4bea18, 250)                                                                  
tx frame (seq num=1538668995)                                                                      
----------                                                                                         
tx frame hexdump                                                                                   
d0 00 00 00 00 0f 92 01 02 02 00 0f 92 fa 4f d5 00 0f 92 fa                                        
4f 
[   92.500000] ==MHX3.3(mesh_sta_info_get) after msleep_interruptible(200)                      
[   92.500000] ==MHX4.1(ieee80211_mesh_rx_bcn_presp) ifmsh->csa_role=0, sdata->vif.csa_active=0    
d5 00 00 0f 01 
[   92.510000] ==MHX5.1(ieee80211_mesh_process_chnswitch) sta_flags=0x00000c00, err=
1                                                                                                  
10 00 01 06 8c 12 98 24 b0 48 72 0c 70 44                                                          
44 4c 39 30 30 2d 6a 65 66 66 71 08 00 00 00 00 00 00 00 00                                        
75 14 01 00 0b c5 11 43 2e 57 dc d4 ea 3d 53 c5 1a 30 69 5a                                        
ab b9 2d 1a 00 01 18 ff 00 00 00 00 00 00 00 00 00 00 00 01                                        
00 00 00 00 00 00 00 00 00 00 3d 16 01 00 03 00 00 00 ff 00                                        
00 00 00 00 00 00 00 00 00 00 00 00 00 00 8c 10 c9 53
[   92.550000] ===MHX6.1(rate_lowest_index): band=0, sband->n_bitrates=6, rates=0x00000000 // only WARN ONCE, not core dump this time.
 8e 40                                                                                             
4a 14 e0 ab ce 73 62 14 4b 56 9d 13 29 6e a0 be c9 51 97 76                                        
67 0e 38 fe fa 51 16 18 a0 8c 3c b5 f8 84 fb 45 52 ce 23 cd                                        
db c0 cf 69 77 d3 31 a4 38 16 34 87 f6 a3 62 48 af b8 65 ae                                        
51 bb 7c 62 c9 4c af a5 a0 ab b0 3c 02 77 2b ef 3a 91 4b e9                                        
ed e8 30 ff 63 c2 a3 22 23 63 64 c3 07 e4 08 1b 82 c5 e4 4b                                        
0f c4 b5 45 88 b6 2f e7 82 b5                                                                      
----------                                                                                         
                                                                                                   
setting reauth timer for 72000 seconds                                                             
state of 00:0f:92:01:02:02 is now (3) ACCEPTED                                                     
                                                                                                   
NL80211_CMD_FRAME (1538668974.463019)                                                              
----------                                                                                         
rx frame hexdump                                                                                   
d0 00 3c 00 00 0f 92 fa 4f d5 00 0f 92 01 02 02 00 0f 92 01                                        
02 02 10 2b 0f 01 10 00 01 06 8c 12 98 24 b0 48 72 0c 70 44                                        
44 4c 39 30 30 2d 6a 65 66 66 71 08 00 00 00 00 00 00 00 00                                        
75 14 01 00 38 95 11 43 2e 57 dc d4 ea 3d 53 c5 1a 30 69 5a                                        
ab b9 2d 1a 00 01 18 ff 00 00 00 00 00 00 00 00 00 00 00 01                                        
00 00 00 00 00 00 00 00 00 00 3d 16 01 00 03 00 00 00 ff 00                                        
00 00 00 00 00 00 00 00 00 00 00 00 00 00 8c 10 3a 46 cd 92                                        
81 ee ee fa e7 59 a4 a2 6e be 32 86 19 1d 18 f0 61 6f 46 ab                                        
d7 3a 44 b9 96 14 a0 bf b9 c8 e0 21 46 4f d7 93 a3 c9 54 68                                        
07 15 3e 45 56 bb 86 b8 51 83 12 6f 95 a8 ce 18 0a 6d bd c2                                        
dc 92 b3 54 85 2c 47 4a ce 79 d3 b1 e2 c6 cb e5 71 41 74 4a                                        
43 0d 64 af 61 4e ea b6 24 b8 7e 8b 1e 5d b4 42 99 ff fa ea                                        
26 aa eb ed db 8c 38 6c 8d 0e                                                                      
----------                                                                                         
                                                                                                   
Checking protection to 00:0f:92:fa:4f:d5 from 00:0f:92:01:02:02                                    
Len checking cat-to-mic len:110 ampe ie full length: 98                                            
----------                                                                                         
SIV- Got AAD[3]:  hexdump                                                                          
0f 01 10 00 01 06 8c 12 98 24 b0 48 72 0c 70 44 44 4c 39 30                                        
30 2d 6a 65 66 66 71 08 00 00 00 00 00 00 00 00 75 14 01 00                                        
38 95 11 43 2e 57 dc d4 ea 3d 53 c5 1a 30 69 5a ab b9 2d 1a                                        
00 01 18 ff 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00                                        
00 00 00 00 00 00 3d 16 01 00 03 00 00 00 ff 00 00 00 00 00                                        
00 00 00 00 00 00 00 00 00 00                                                                      
----------                                                                                         
                                                                                                   
----------                                                                                         
AMPE IE:  hexdump                                                                                  
8b 60 00 0f ac 04 13 21 73 42 25 b8 68 c6 d8 7b aa 02 00 00                                        
d6 8a 21 aa 0b ef 2e 80 70 54 29 10 2c 32 ec 01 b0 14 00 00                                        
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                        
00 00 00 00 00 00 00 00 00 00 23 de 57 d1 39 b8 d1 f3 46 be                                        
ff 7d ca c3 24 b3 00 00 00 00 00 00 00 00 ff ff ff ff                                              
----------                                                                                         
                                                                                                   
----------                                                                                         
Received mgtk:  hexdump                                                                            
23 de 57 d1 39 b8 d1 f3 46 be ff 7d ca c3 24 b3                                                    
----------                                                                                         
                                                                                                   
TODO: return available peer link slots                                                             
Mesh plink (peer, state, llid, plid, event): 00:0f:92:01:02:02 OPN-SNT 50443 38200 1               
set plink state (seq num=1538668996)                                                               
Mesh plink: Sending plink action 2                                                                 
Protecting frame from 00:0f:92:fa:4f:d5 to 00:0f:92:01:02:02                                       
Checking tricky lengths of protected frame 114, 98                                                 
----------                                                                                         
SIV- Put AAD[3]:  hexdump                                                                          
0f 02 10 00 00 00 01 06 8c 12 98 24 b0 48 72 0c 70 44 44 4c                                        
39 30 30 2d 6a 65 66 66 71 08 00 00 00 00 00 00 00 00 75 16                                        
01 00 0b c5 38 95 11 43 2e 57 dc d4 ea 3d 53 c5 1a 30 69 5a                                        
ab b9 2d 1a 00 01 18 ff 00 00 00 00 00 00 00 00 00 00 00 01                                        
00 00 00 00 00 00 00 00 00 00 3d 16 01 00 03 00 00 00 ff 00                                        
00 00 00 00 00 00 00 00 00 00 00 00 00 00                                                          
----------                                                                                         
                                                                                                   
tx_frame(0x41c9d8, 0x4bea18, 254)                                                                  
tx frame (seq num=1538668997)                                                                      
----------                                                                                         
tx frame hexdump                                                                                   
d0 00 00 00 00 0f 92 01 02 02 00 0f 92 fa 4f d5 00 0f 92 fa                                        
4f d5 00 00 0f 02 10 00 00 00 01 06 8c 12 98 24 b0 48 72 0c                                        
70 44 44 4c 39 30 30 2d 6a 65 66 66 71 08 00 00 00 00 00 00                                        
00 00 75 16 01 00 0b c5 38 95 11 43 2e 57 dc d4 ea 3d 53 c5                                        
1a 30 69 5a ab b9 2d 1a 00 01 18 ff 00 00 00 00 00 00 00 00                                        
00 00 00 01 00 00 00 00 00 00 00 00 00 00 3d 16 01 00 03 00                                        
00 00 ff 00 00 00 00 00 00 00 00 00 00 0
[   92.860000] ==MHX3.0(mesh_sta_info_get) sta(82bf1000) found                                        
[   92.870000] ===MHX2.0(mesh_sta_info_init): rates=0x0000003f. insert=0,sta->plink_state=2        
[   92.870000] ==MHX1.1(ieee80211_mps_frame_release)plink_state=2                                  
[   92.880000] ==MHX5.1(ieee80211_mesh_process_chnswitch) sta_flags=0x00000c00, err=1              
0 00 00 00 00 8c 10                                                                                
eb 65 6c f5 8b 9e 33 06 1b 7a 14 d7 bb 20 42 67 96 13 93 05                                        
83 20 65 ac b5 22 f2 66 8c 19 a2 41 03 ca 38 92 e0 14 5d df                                        
70 1a e5 09 24 f9 53 b2 65 d4 7c a5 3c 68 92 1a b7 6f 94 51                                        
68 9f 82 04 ad 77 86 b7 45 f4 3f 12 89 8e 29 9f f7 54 14 74                                        
ec c6 2b ce c8 96 c7 3d 9c 59 69 ec c8 26 df 8c 94 20 71 b5                                        
44 e1 82 35 08 3c ba 63 98 f3 98 2e 59 48                                                          
----------                                                                                         
                                                                                                   
NL80211_CMD_TX_STATUS (1538668974.479563)                                                          
NL80211_CMD_NEW_PEER_CANDIDATE(1538668974.479705)                                                  
received a beacon from 00:0f:92:fa:4f:d2                                                           
Initiate event                                                                                     
new peer candidate (seq num=1538668998)                                                            
computing PWE on 256 bit curve number 19                                                           
H(00:0f:92:fa:4f:d5 | 00:0f:92:fa:4f:d2, qazwsxedc | 1)                                            
6daae119 37adf337 dfdca2cf cbd79d33 ef1abced 3a0ce8d1 41eacfc0 0e2fae09                            
candidate x value:                                                                                 
08ff0449 34b0b5d8 810d2a72 50b89646
[   92.960000] ==MHX7.0(ath_tx_aggr_start) sc=831b1540, sta=82bf
13e8, tid=7, ssn=0                                                                                 
[   92.970000] ==MHX7.1(ath_tx_aggr_start)                                                         
[   92.970000] ------------[ cut here ]------------                                                
[   92.970000] WARNING: at /home/jli/project/work/g3/pddl-924/build_dir/target-mips_34kc_uClibc-0.9
.33.2/linux-ar71xx_generic/compat-wireless-mh_ddl2/drivers/net/wireless/ath/ath9k/xmit.c:1439 ath_t
x_aggr_start+0xb0/0x1d0 [ath9k]()                                                                  
[   92.990000] CPU: 0 PID: 304 Comm: kworker/u2:2 Tainted: G        W    3.10.36 #9                
[   93.000000] Call Trace:                                                                         
[   93.000000] [<8006dcc8>] show_stack+0x48/0x70                                                   
[   93.010000] [<800764cc>] warn_slowpath_common+0x78/0xa8                                         
[   93.010000] [<80076584>] warn_slowpath_null+0x18/0x24                                           
[   93.020000] [<83269a24>] ath_tx_aggr_start+0xb0/0x1d0 [ath9k]                                   
[   93.020000] [<83264228>] ath9k_ps_restore+0x1d0/0xb7c [ath9k]                                   
[   93.030000]                                                                                     
[   93.030000] ---[ end trace a6794538ac8b7d2b ]---                                                
 d9f59d2d 6c90f19a d881d40e 8bfc69af                                                               
                                                                                                   
PWE (x,y):                                                                                         
x:                                                                                                 
08ff0449 34b0b5d8 810d2a72 50b89646 d9f59d2d 6c90f19a d881d40e 8bfc69af                            
                                                                                                   
y:                                                                                                 
a0d58402 eb8d6303 3e5555d9 85ab532f ea671f70 80657397 d4aaaa7d df651f9b                            
                                                                                                   
it took 1 tries to find PWE: 19                                                                    
assigning group 19 to peer, the size of the prime is 32                                            
local private value:                                                                               
d076724c 01a67ec9 950c2e90 c8a61504 f19bf7b7 d12afd52 a1fe7435 a04c2692                            
                                                                                                   
local mask value:                                                                                  
16032e3c 5f9b849f 93fc7d3c 97aa8cf9 8d2df7fd 0bae194a 2cdcb079 af2966cd                            
                                                                                                   
local commit:                                                                                      
my scalar:                                                                                         
e679a088 61420369 2908abcd 6050a1fe 7ec9efb4 dcd9169c cedb24af 4f758d5f                            
                                                                                                   
my element:                                                                                        
x:                                                                                                 
5175b257 b716f05f a4cf4081 0183c934 2ba46573 7d478f50 5d8c53af d104b05d                            
                                                                                                   
y:                                                                                                 
ecdb5135 b9d72879 170499f8 ae94297b e02fca37 49f3370f da2a3669 03228e97                            
                                                                                                   
in NOTHING, sending COMMIT (no token), len 128, group 19                                           
tx_frame(0x41c9d8, 0x7fad97d0, 128)                                                                
tx frame (seq num=1538668999)                                                                      
----------                                                                                         
tx frame hexdump                                                                                   
b0 00 00 00 00 0f 92 fa 4
[   93.120000] ==MHX7.0(ath_tx_aggr_start) sc=831b1540, sta=82bf13e8, tid=
0, ssn=4                                                                                           
[   93.130000] ==MHX7.1(ath_tx_aggr_start)                                                         
[   93.130000] ==MHX7.2(ath_tx_aggr_start)txtid=82bf1444, txtid->ac=82bf1934                       
[   93.140000] ==MHX7.3(ath_tx_aggr_start) txq=831bd898                                            
[   93.140000] ==MHX7.4(ath_tx_aggr_start)                                                         
[   93.140000] ==MHX7.5(ath_tx_aggr_start)                                                         
[   93.150000] ==MHX7.6(ath_tx_aggr_start)                                                         
f d2 00 0f 92 fa 4f d5 00 0f 92 fa                                                                 
4f d2 00 00 03 00 01 00 00 00 13 00 e6 79 a0 88 61 42 03 69                                        
29 08 ab cd 60 50 a1 fe 7e c9 ef b4 dc d9 16 9c ce db 24 af                                        
4f 75 8d 5f 51 75 b2 57 b7 16 f0 5f a4 cf 40 81 01 83 c9 34                                        
2b a4 65 73 7d 47 8f 50 5d 8c 53 af d1 04 b0 5d ec db 51 35                                        
b9 d7 28 79 17 04 99 f8 ae 94 29 7b e0 2f ca 37 49 f3 37 0f                                        
da 2a 36 69 03 22 8e 97                                                                            
----------                                                                                         
                                                                                                   
state of 00:0f:92:fa:4f:d2 is now (1) COMMITTED                                                    
                                                                                                   
new unauthed sta (seq num=1538669000)                                                              
NL80211_CMD_TX_STATUS (1538668974.879813)                                                          
NL80211_CMD_NEW_STATION (1538668974.879938)                                                        
NL80211_CMD_TX_STATUS (1538668974.880059)                                                          
NL80211_CMD_FRAME (1538668974.880157)                                                              
----------                                                                                         
rx frame hexdump                                                                                   
d0 00 3c 00 00 0f 92 fa 4f d5 00 0f 92 01 02 02 00 0f 92 01                                        
02 02 20 2b 0f 02 10 00 00 00 01 06 8c 12 98 24 b0 48 72 0c                                        
70 44 44 4c 39 30 30 2d 6a 65 66 66 71 08 00 00 00 00 00 00                                        
00 00 75 16 01 00 38 95 0b c5 11 43 2e 57 dc d4 ea 3d 53 c5                                        
1a 30 69 5a ab b9 2d 1a 00 01 18 ff 00 00 00 00 00 00 00 00                                        
00 00 00 01 00 00 00 00 00 00 00 00 00 00 3d 16 01 00 03 00                                        
00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 8c 10                                        
60 da e8 0f 65 df 8f e6 97 c8 5a 31 28 08 e2 79 ed 88 f7 91                                        
51 ac 7e fb 69 4a 51 ed 8f 61 5a 58 df b3 88 bc af a7 57 d5                                        
11 04 3d 55 c2 28 13 c3 d3 0a 9f 5b 12 68 c4 72 75 71 bd 31                                        
a6 2d 75 33 43 39 d5 fe 40 64 e8 3f 11 3c df be c2 76 d6 54                                        
93 28 20 0f 5d c9 bb b7 af c7 60 e5 55 d0 61 bc 31 5c f8 cf                                        
5e f1 d3 86 eb 8b 69 3d cd 4c d9 f8 2a 5c                                                          
----------                                                                                         
                                                                                                   
Checking protection to 00:0f:92:fa:4f:d5 from 00:0f:92:01:02:02                                    
Len checking cat-to-mic len:114 ampe ie full length: 98                                            
----------                                                                                         
SIV- Got AAD[3]:  hexdump                                                                          
0f 02 10 00 00 00 01 06 8c 12 98 24 b0 48 72 0c 70 44 44 4c                                        
39 30 30 2d 6a 65 66 66[   93.300000] ==MHX3.0(mesh_sta_info_get) sta(83386000) found              
[   93.310000] br-lan: port 2(wlan0) entered forwarding state                                      
[   93.310000] ===MHX2.0(mesh_sta_info_init): rates=0x0000003f. insert=0,sta->plink_state=0        
[   93.320000] ==MHX1.1(ieee80211_mps_frame_release)plink_state=0                                  
[   93.330000] ==MHX5.1(ieee80211_mesh_process_chnswitch) sta_flags=0x00000c00, err=1              
 71 08 00 00 00 00 00 00 00 00 75 16                                                               
01 00 38 95 0b c5 11 43 2e 57 dc d4 ea 3d 53 c5 1a 30 69 5a                                        
ab b9 2d 1a 00 01 18 ff 00 00 00 00 00 00 00 00 00 00 00 01                                        
00 00 00 00 00 00 00 00 00 00 3d 16 01 00 03 00 00 00 ff 00                                        
00 00 00 00 00 00 00 00 00 00 00 00 00 00                                                          
----------                                                                                         
                                                                                                   
----------                                                                                         
AMPE IE:  hexdump                                                                                  
8b 60 00 0f ac 04 13 21 73 42 25 b8 68 c6 d8 7b aa 02 00 00                                        
d6 8a 21 aa 0b ef 2e 80 70 54 29 10 2c 32 ec 01 b0 14 0d 91                                        
2a 3a c0 f7 64 d6 cb 4d 49 7e 3d 03 51 98 7a 51 e3 16 b3 a0                                        
fa 1c c7 b7 c0 27 c0 96 9e 46 23 de 57 d1 39 b8 d1 f3 46 be                                        
ff 7d ca c3 24 b3 00 00 00 00 00 00 00 00 ff ff ff ff                                              
----------                                                                                         
                                                                                                   
----------                                                                                         
Received mgtk:  hexdump                                                                            
23 de 57 d1 39 b8 d1 f3 46 be ff 7d ca c3 24 b3                                                    
----------                                                                                         
                                                                                                   
TODO: return available peer link slots                                                             
Mesh plink (peer, state, llid, plid, event): 00:0f:92:01:02:02 OPN-RCVD 50443 38200 4              
set plink state (seq num=1538669001)                                                               
----------                                                                                         
mtk context:  hexdump                                                                              
0d 91 2a 3a c0 f7 64 d6 cb 4d 49 7e 3d 03 51 98 7a 51 e3 16                                        
b3 a0 fa 1c c7 b7 c0 27 c0 96 9e 46 13 21 73 42 25 b8 68 c6                                        
d8 7b aa 02 00 00 d6 8a 21 aa 0b ef 2e 80 70 54 29 10 2c 32                                        
ec 01 b0 14 38 95 0b c5 00 0f ac 08 00 0f 92 01 02 02 00 0f                                        
92 fa 4f d5                                                                                        
----------                                                                                         
                                                                                                   
----------                                                                                         
mtk:  hexdump                                                                                      
0f 5c 09 79 24 11 6f 91 e1 a6 ef 1e 5d 71 19 f9                                                    
----------                                                                                         
                                                                                                   
estab with 00:0f:92:01:02:02                                                                       
set auth flag (seq num=1538669002)                                                                 
changing ht protection mode to: 0                                                                  
mesh plink with 00:0f:92:01:02:02 established                                                      
set_mesh_conf(0x41c9d8, 1)                                                                         
set meshconf (seq num=1538669007)                                                                  
Mesh plink timer for 00:0f:92:01:02:02 fired on state ESTAB                                        
Timeout for peer 00:0f:92:01:02:02 in state 4                                                      
NL80211_CMD_FRAME (1538668975.371850)                                                              
----------                                                                                         
rx frame hexdump                                                                                   
b0 00 3c 00 00 0f 92 fa 4f d5 00 0f 92 fa 4f d2 00 0f 92 fa                                        
4f d5 00 13 03 00 01 00 00 00 13 00 4e 11 62 74 b3 e6 9a 08                                        
6e a3 91 e8 5d a4 25 f5 20 cf e2 55 c4 9f eb 2f e1 b4 9d f7                                        
6a 1d 1f 85 5b 0b 3f 1e b5 54 79 a6 b5 42 19 21 b1 e6 8b 69                                        
fc 6a bf 73 f5 eb 60 06 e8 28 4a 46 87 13 9b e1 57 18 37 64                                        
18 7c 6d eb 72 04 4c a5 8c 2a 49 1a f2 9a e0 7d dd c2 a6 ee                                        
8b 97 06 eb a2 c4 69 bd                                                                            
----------                                                                                         
                                                                                                   
recv'd COMMIT from 00:0f:92:fa:4f:d2 while in COMMITTED                                            
peer's commit:                                                                                     
peer's scalar:                                                                                     
4e116274 b3e69a08 6ea391e8 5da425f5 20cfe255 c49feb2f e1b49df7 6a1d1f85                            
                                                                                                   
peer's element:                                                                                    
x:                                                                                                 
5b0b3f1e b55479a6 b5421921 b1e68b69 fc6abf73 f5eb6006 e8284a46 87139be1                            
                                                                                                   
y:                                                                                                 
57183764 187c6deb 72044ca5 8c2a491a f29ae07d ddc2a6ee 8b9706eb a2c469bd                            
                                                                                                   
k:                                                                                                 
5f71cc17 79e0021d 82e19e6d 3a13ee66 95c4de09 f8627878 33a84317 6b087779                            
                                                                                                   
keyseed:                                                                                           
9df375dc e399ae09 32f187cb 03c044b6 d3a557e0 5424deb6 8a47c325 ff775261                            
                                                                                                   
KCK:                                                                                               
fd585a1c 9aa092e1 5fa8cc0e e09789b9 70400cd1 3588fa58 0baef54b 5ee78968                            
                                                                                                   
PMK:                                                                                               
6acc2e11 2e96a5d8 feb907e6 30c59f62 9a171157 a44e4b5b a63be77b bb4e5597                            
                                                                                                   
local confirm:                                                                                     
0100b75e 9efb396c 77a1feea 91f8f303 7468d83c 5d385b30 312808bd d4c36454                            
38ba                                                                                               
                                                                                                   
in COMMITTED, sending CONFIRM (sc=1), len 64                                                       
tx_frame(0x41c9d8, 0x7fad9628, 64)                                                                 
tx frame (seq num=1538669008)                                                                      
----------                                                                                         
tx frame hexdump                                                                                   
b0 00 00 00 00 0f 92 fa 4f d2 00 0f 92 fa 4f d5 00 0f 92 fa                                        
4f d2 00 00 03 00 02 00 00 00 01 00 b7 5e 9e fb 39 6c 77 a1                                        
fe ea 91 f8 f3 03 74 68 d8 3c 5d 38 5b 30 31 28 08 bd d4 c3                                        
64 54 38 ba                                                                                        
----------                                                                                         
                                                                                                   
state of 00:0f:92:fa:4f:d2 is now (2) CONFIRMED                                                    
                                                                                                   
NL80211_CMD_TX_STATUS (1538668975.426014)                                                          
nlerror, cmd 18, seq 1538669000: Invalid argument                                                  
NL80211_CMD_FRAME (1538668975.426577)                                                              
----------                                                                                         
rx frame hexdump                                                                                   
b0 00 3c 00 00 0f 92 fa 4f d5 00 0f 92 fa 4f d2 00 0f 92 fa                                        
4f d5 60 13 03 00 02 00 00 00 01 00 91 86 6e 94 f4 22 bf 4e                                        
3f ef a8 b8 bb 1c c6 71 d1 10 90 20 67 b5 cb 03 a3 3b 71 82                                        
34 d3 21 fe                                                                                        
----------                                                                                         
                                                                                                   
recv'd CONFIRM from 00:0f:92:fa:4f:d2 while in CONFIRMED                                           
processing confirm (1)                                                                             
peer's confirm:                                                                                    
01009186 6e94f422 bf4e3fef a8b8bb1c c671d110 902067b5 cb03a33b 718234d3                            
21fe                                                                                               
                                                                                                   
PMK:                                                                                               
6acc2e11 2e96a5d8 feb907e6 30c59f62 9a171157 a44e4b5b a63be77b bb4e5597                            
                                                                                                   
fin: 0, key len:32 peer:00:0f:92:fa:4f:d2 me:00:0f:92:fa:4f:d5                                     
----------                                                                                         
pmk hexdump                                                                                        
6a cc 2e 11 2e 96 a5 d8 fe b9 07 e6 30 c5 9f 62 9a 17 11 57                                        
a4 4e 4b 5b a6 3b e7 7b bb 4e 55 97                                                                
----------                                                                                         
                                                                                                   
set plink state (seq num=1538669009)                                                               
----------                                                                                         
aek context:  hexdump                                                                              
00 0f ac 08 00 0f 92 fa 4f d2 00 0f 92 fa 4f d5                                                    
----------                                                                                         
                                                                                                   
----------                                                                                         
aek:  hexdump                                                                                      
98 68 fd be a7 13 86 e4 86 ff a8 50 22 80 e3 14 01 53 ef 4f                                        
2b 32 76 7d f0 cc a7 02 ac a1 a4 aa                                                                
----------                                                                                         
                                                                                                   
set plink state (seq num=1538669010)                                                               
Mesh plink: starting establishment with 00:0f:92:fa:4f:d2                                          
Mesh plink: Sending plink action 1                                                                 
Protecting frame from 00:0f:92:fa:4f:d5 to 00:0f:92:fa:4f:d2                                       
Checking tricky lengths of protected frame 110, 98                                                 
----------                                                                                         
SIV- Put AAD[3]:  hexdump                                                                          
0f 01 10 00 01 06 8c 12 98 24 b0 48 72 0c 70 44 44 4c 39 30                                        
30 2d 6a 65 66 66 71 08 00 00 00 00 00 00 00 00 75 14 01 00                                        
4b 6c 34 8b 02 fe 15 28 9d 70 97 ac 3d b5 bd f4 c7 f3 2d 1a                                        
00 01 18 ff 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00                                        
00 00 00 00 00 00 3d 16 01 00 00 00 00 00 ff 00 00 00 00 00                                        
00 00 00 00 00 00 00 00 00 00                                                                      
----------                                                                                         
                                                                                                   
tx_frame(0x41c9d8, 0x4cbbe8, 250)                                                                  
tx frame (seq num=1538669011)                                                                      
----------                                                                                         
tx frame hexdump                                                                                   
d0 00 00 00 00 0f 92 fa 4f d2 00 0f 92 fa 4f d5 00 0f 92 fa                                        
4f d5 00 00 0f 01 10 00 01 06 8c 12 98 24 b0 48 72 0c 70 44                                        
44 4c 39 30 30 2d 6a 65 66 66 71 08 00 00 00 00 00 00 00 00                                        
75 14 01 00 4b 6c 34 8b 02 fe 15 28 9d 70 97 ac 3d b5 bd f4                                        
c7 f3 2d 1a 00 01 18 ff 00 00 00 00 00 00 00 00 00 00 00 01                                        
00 00 00 00 00 00 00 00 00 00 3d 16 01 00 00 00 00 00 ff 00                                        
00 00 00 00 00 00 00 00 00 00 00 00 00 00 8c 10 3c f3 2a a6                                        
a2 f2 ec 70 bc 53 58 b8 b5 94 f3 73 a5 70 01 79 8e 67 80 20                                        
d4 4e 0c c2 b4 fe b0 5f 6b 0e 57 d4 8a d5 a2 14 6f 2b ee 19                                        
e2 c5 0c ea dd 3e 91 38 6a 02 bb 53 46 04 33 83 ae 06 55 ee                                        
c3 5c 56 9e 4c e8 45 54 7a 65 9e 5f a2 a4 03 3e c8 25 07 0c                                        
d2 2c f8 24 ad e0 e3 cc f9 f8 d2 57 08 f2 91 58 ce 71 d0 23                                        
07 c0 39 82 d9 d3 52 14 d9 90                                                                      
----------                                                                                         
                                                                                                   
setting reauth timer for 72000 seconds                                                             
state of 00:0f:92:fa:4f:d2 is now (3) ACCEPTED                                                     
                                                                                                   
NL80211_CMD_TX_STATUS (1538668975.439167)                                                          
nlerror, cmd 18, seq 1538669006: Invalid argument                                                  
NL80211_CMD_FRAME (1538668975.772520)                                                              
----------                                                                                         
rx frame hexdump                                                                                   
d0 00 3c 00 00 0f 92 fa 4f d5 00 0f 92 fa 4f d2 00 0f 92 fa                                        
4f d2 e0 13 0f 01 10 00 01 06 8c 12 98 24 b0 48 72 0c 70 44                                        
44 4c 39 30 30 2d 6a 65 66 66 71 08 00 00 00 00 0
[   93.890000] ==MHX3.0(mesh_sta_info_get) sta(82bf1000) found
[   93.890000] ===MHX2.0(mesh_sta_info_init): rates=0x0000003f. insert=0,sta->plink_state=4        
[   93.900000] ==MHX1.1(ieee80211_mps_frame_release)plink_state=4                                  
[   93.910000] ==MHX5.1(ieee80211_mesh_process_chnswitch) sta_flags=0x00000c00, err=1              
0 00 00 00                                                                                         
75 14 01 00 b8 13 34 8b 02 fe 15 28 9d 70 97 ac 3d b5 bd f4                                        
c7 f3 2d 1a 00 01 18 ff 00 00 00 00 00 00 00 00 00 00 00 01                                        
00 00 00 00 00 00 00 00 00 00 3d 16 01 00 00 00 00 00 ff 00                                        
00 00 00 00 00 00 00 00 00 00 00 00 00 00 8c 10 ac 98 17 0a                                        
3c 41 e3 f6 f6 2b 08 43 59 a2 a2 f7 f0 ae 79 fb 4f 27 73 82                                        
5b ef d1 8c 45 e2 57 ab 3e 92 6c c1 3e f4 0a 9d 4a 45 cd 69                                        
86 4e da 0b 0a 18 ac 78 03 fe 76 97 e7 cc 57 cf 6e 8f 97 8f                                        
8b 37 80 fb bc 20 1f 47 d8 b0 62 b0 6d bb e2 6a e0 62 23 16                                        
7c a4 3b 42 47 1c 9f b9 01 5c 73 93 04 b4 a5 5e 04 88 91 9b                                        
c7 c8 7b 10 27 d4 c4 fe a7 11                                                                      
----------                                                                                         
                                                                                                   
Checking protection to 00:0f:92:fa:4f:d5 from 00:0f:92:fa:4f:d2                                    
Len checking cat-to-mic len:110 ampe ie full length: 98                                            
----------                                                                                         
SIV- Got AAD[3]:  hexdump                                                                          
0f 01 10 00 01 06 8c 12 98 24 b0 48 72 0c 70 44 44 4c 39 30                                        
30 2d 6a 65 66 66 71 08 00 00 00 00 00 00 00 00 75 14 01 00                                        
b8 13 34 8b 02 fe 15 28 9d 70 97 ac 3d b5 bd f4 c7 f3 2d 1a                                        
00 01 18 ff 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00                                        
00 00 00 00 00 00 3d 16 01 00 00 00 00 00 ff 00 00 00 00 00                                        
00 00 00 00 00 00 00 00 00 00                                                                      
----------                                                                                         
                                                                                                   
----------                                                                                         
AMPE IE:  hexdump                                                                                  
8b 60 00 0f ac 04 7e d2 78 8d 72 59 19 62 cb 35 3b e4 55 a1                                        
58 3d c8 70 72 3a 1e 0b 7e d1 9f 44 1b b6 9f a8 60 73 00 00                                        
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                        
00 00 00 00 00 00 00 00 00 00 ca 26 fb a3 c1 3b 72 66 07 5a                                        
81 86 53 9a 19 5f 00 00 00 00 00 00 00 00 ff ff ff ff                                              
----------                                                                                         
                                                                                                   
----------                                                                                         
Received mgtk:  hexdump                                                                            
ca 26 fb a3 c1 3b 72 66 07 5a 81 86 53 9a 19 5f                                                    
----------                                                                                         
                                                                                                   
TODO: return available peer link slots                                                             
Mesh plink (peer, state, llid, plid, event): 00:0f:92:fa:4f:d2 OPN-SNT 27723 5048 1                
set plink state (seq num=1538669012)                                                               
Mesh plink: Sending plink action 2                                                                 
Protecting frame from 00:0f:92:fa:4f:d5 to 00:0f:92:fa:4f:d2                                       
Checking tricky lengths of protected frame 114, 98                                                 
----------                                                                                         
SIV- Put AAD[3]:  hexdump                                                                          
0f 02 10 00 00 00 01 06 8c 12 98 24 b0 48 72 0c 70 44 44 4c                                        
39 30 30 2d 6a 65 66 66 71 08 00 00 00 00 00 00 00 00 75 16                                        
01 00 4b 6c b8 13 34 8b 02 fe 15 28 9d 70 97 ac 3d b5 bd f4                                        
c7 f3 2d 1a 00 01 18 ff 00 00 00 00 00 00 00 00 00 00 00 01                                        
00 00 00 00 00 00 00 00 00 00 3d 16 01 00 00 00 00 00 ff 00                                        
00 00 00 00 00 00 00 00 00 00 00 00 00 00                                                          
----------                                                                                         
                                                                                                   
tx_frame(0x41c9d8, 0x4cbbe8, 254)                                                                  
tx frame (seq num=1538669013)                                                                      
----------                                                                                         
tx frame hexdump                                                                                   
d0 00 00 00 00 0f 92 fa 4f d2 00 0f 92 fa 4f d5 00 0f 92 fa                                        
4f d5 00 00 0f 02 10 00 00 00 01 06 8c 12 98 24 b0 48 72 0c                                        
70 44 44 4c 39 30 30 2d 6a 65 66 66 71 08 00 00 00 00 00 00                                        
00 00 75 16 01 00 4b 6c b8 13 34 8b 02 fe 15 28 9d 70 97 ac                                        
3d b5 bd f4 c7 f3 2d 1a 00 01 18 ff 00 00 00 00 00 00 00 00                                        
00 00 00 01 00 00 00 00 00 00 00 00 00 00 3d 16 01 00 00 00                                        
00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 8c 10                                        
90 08 95 a2 d4 09 39 9f bf 34 79 40 06 db b0 2c 80 9e 32 8f                                        
7e 2d b8 6d 2d 5d 38 ba 19 db 49 70 cf bd 83 5b 99 fc c0 da                                        
cd 10 44 e3 16 8b 8f bf 21 40 a9 50 87 2c 48 11 20 bd b3 5a                                        
b4 ad 2b 04 78 b2 b7 19 b7 b2 06 0d 3b 05 e4 c6 bb bc f8 65                                        
26 66 9c 32 ca 60 ee 9e 5e 30 27 48 9b 73 50 04 9a a3 62 42                                        
9c 20 3e 25 99 e8 23 74 e4 38 c8 d3 e0 37                                                          
----------                                                                                         
                                                                                                   
NL80211_CMD_TX_STATUS (1538668975.788945)                                                          
NL80211_CMD_FRAME (1538668975.789133)                                                              
----------                                                                                         
rx frame hexdump                                                                                   
d0 00 3c 00 00 0f 92 fa 4f d5 00 0f 92 fa 4f d2 00 0f 92 fa                                        
4f d2 f0 13 0f 02 10 00 00 00 01 06 8c 12 98 24 b0 48 72 0c                                        
70 44 44 4c 39 30 30 2d 6a 65 66 66 71 08 00 00 00 00 00 00                                        
00 00 75 16 01 00 b8 13 4b 6c 34 8b 02 fe 15 28 9d 70 97 ac                                        
3d b5 bd f4 c7 f3 2d 1a 00 01 18 ff 00 00 00 00 00 00 00 00                                        
00 00 
[   94.230000] ==MHX7.0(ath_tx_aggr_start) sc=831b1540, sta=833863e8, tid=7, ssn=0           
[   94.230000] ==MHX7.1(ath_tx_aggr_start)                                                         
00 01 00 00 00 00 00 00 00 00 00 00 3d 16 01 00 00 00                                              
00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 8c 10                                        
85 04 95 f9 ca 47 60 68 01 ca 0e 2c 40 80 ed 6f 34 64 2a 6d                                        
93 3e af f4 c3 aa e3 6f e2 48 33 cf 1e 92 a7 d8 97 44 31 04                                        
2b 32 b7 88 71 7e 85 1c a9 16 84 d7 af 5d 13 8e 7b 1d f1 f9                                        
36 88 b7 2e 68 9e 65 7f e4 3e 1c 0b 66 28 87 50 30 4f 2b 63                                        
46 54 86 3e 3f ea 19 af 0c ae 88 93 63 6f 30 ec 1f 8c 41 61                                        
43 e0 c0 a5 f3 1a 7c 96 86 a1 62 b1 56 48                                                          
----------                                                                                         
                                                                                                   
Checking protection to 00:0f:92:fa:4f:d5 from 00:0f:92:fa:4f:d2                                    
Len checking cat-to-mic len:114 ampe ie full length: 98                                            
----------                                                                                         
SIV- Got AAD[3]:  hexdump                                                                          
0f 02 10 00 00 00 01 06 8c 12 98 24 b0 48 72 0c 70 44 44 4c                                        
39 30 30 2d 6a 65 66 66 71 08 00 00 00 00 00 00 00 00 75 16                                        
01 00 b8 13 4b 6c 34 8b 02 fe 15 28 9d 70 97 ac 3d b5 bd f4                                        
c7 f3 2d 1a 00 01 18 ff 00 00 00 00 00 00 00 00 00 00 00 01                                        
00 00 00 00 00 00 00 00 00 00 3d 16 01 00 00 00 00 00 ff 00                                        
00 00 00 00 00 00 00 00 00 00 00 00 00 00                                                          
----------                                                                                         
                                                                                                   
-----[   94.330000] ==MHX3.0(mesh_sta_info_get) sta(83386000) found                                
[   94.330000] ===MHX2.0(mesh_sta_info_init): rates=0x0000003f. insert=0,sta->plink_state=4        
[   94.340000] ==MHX1.1(ieee80211_mps_frame_release)plink_state=4                                  
[   94.350000] ==MHX5.1(ieee80211_mesh_process_chnswitch) sta_flags=0x00000c00, err=1              
-----                                                                                              
AMPE IE:  hexdump                                                                                  
8b 60 00 0f ac 04 7e d2 78 8d 72 59 19 62 cb 35 3b e4 55 a1                                        
58 3d c8 70 72 3a 1e 0b 7e d1 9f 44 1b b6 9f a8 60 73 b6 30                                        
e7 b8 07 ee e1 31 01 96 2c f4 71 b5 a5 a7 64 93 5e 45 62 e4                                        
b7 1b c5 30 83 39 27 a1 fc cb ca 26 fb a3 c1 3b 72 66 07 5a                                        
81 86 53 9a 19 5f 00 00 00 00 00 00 00 00 ff ff ff ff                                              
----------                                                                                         
                                                                                                   
----------                                                                                         
Received mgtk:  hexdump                                                                            
ca 26 fb a3 c1 3b 72 66 07 5a 81 86 53 9a 19 5f                                                    
----------                                                                                         
                                                                                                   
TODO: return available peer link slots                                                             
Mesh plink (peer, state, llid, plid, event): 00:0f:92:fa:4f:d2 OPN-RCVD 27723 5048 4               
set plink state (seq num=1538669014)                                                               
----------                                                                                         
mtk context:  hexdump                                                                              
7e d2 78 8d 72 59 19 62 cb 35 3b e4 55 a1 58 3d c8 70 72 3a                                        
1e 0b 7e d1 9f 44 1b b6 9f a8 60 73 b6 30 e7 b8 07 ee e1 31                                        
01 96 2c f4 71 b5 a5 a7 64 93 5e 45 62 e4 b7 1b c5 30 83 39                                        
27 a1 fc cb b8 13 4b 6c 00 0f ac 08 00 0f 92 fa 4f d2 00 0f                                        
92 fa 4f d5                                                                                        
----------                                                                                         
                                                                                                   
----------                                                                                         
mtk:  hexdump                                                                                      
dd e3 ba d6 41 12 5b 77 06 10 13 33 82 6a 11 de                                                    
----------                                                                                         
                                                                                                   
estab with 00:0f:92:fa:4f:d2                                                                       
set auth flag (seq num=1538669015)                                                                 
mesh plink with 00:0f:92:fa:4f:d2 established                                                      
nlerror, cmd 18, seq 1538669019: Invalid argument                                                  
Mesh plink timer for 00:0f:92:fa:4f:d2 fired on state ESTAB                                        
Timeout for peer 00:0f:92:fa:4f:d2 in state 4                                                      
[   94.910000] ==MHX3.0(mesh_sta_info_get) sta(82bf1000) found                                     
[   94.910000] ===MHX2.0(mesh_sta_info_init): rates=0x0000003f. insert=0,sta->plink_state=4        
[   94.920000] ==MHX1.1(ieee80211_mps_frame_release)plink_state=4                                  
[   94.930000] ==MHX5.1(ieee80211_mesh_process_chnswitch) sta_flags=0x00000c00, err=1              
[   95.350000] ==MHX3.0(mesh_sta_info_get) sta(83386000) found                                     
[   95.360000] ===MHX2.0(mesh_sta_info_init): rates=0x0000003f. insert=0,sta->plink_state=4        
[   95.360000] ==MHX1.1(ieee80211_mps_frame_release)plink_state=4                                  
[   95.370000] ==MHX5.1(ieee80211_mesh_process_chnswitch) sta_flags=0x00000c00, err=1              
[   95.930000] ==MHX3.0(mesh_sta_info_get) sta(82bf1000) found                                     
[   95.940000] ===MHX2.0(mesh_sta_info_init): rates=0x0000003f. insert=0,sta->plink_state=4        
[   95.950000] ==MHX1.1(ieee80211_mps_frame_release)plink_state=4                                  
[   95.950000] ==MHX5.1(ieee80211_mesh_process_chnswitch) sta_flags=0x00000c00, err=1              
[   96.380000] ==MHX3.0(mesh_sta_info_get) sta(83386000) found                                     
[   96.380000] ===MHX2.0(mesh_sta_info_init): rates=0x0000003f. insert=0,sta->plink_state=4        
[   96.390000] ==MHX1.1(ieee80211_mps_frame_release)plink_state=4                                  
[   96.390000] ==MHX5.1(ieee80211_mesh_process_chnswitch) sta_flags=0x00000c00, err=1              
[   96.960000] ==MHX3.0(mesh_sta_info_get) sta(82bf1000) found                                     
[   96.960000] ===MHX2.0(mesh_sta_info_init): rates=0x0000003f. insert=0,sta->plink_state=4        
[   96.970000] ==MHX1.1(ieee80211_mps_frame_release)plink_state=4                                  
[   96.980000] ==MHX5.1(ieee80211_mesh_process_chnswitch) sta_flags=0x00000c00, err=1              
[   97.400000] ==MHX3.0(mesh_sta_info_get) sta(83386000) found                                     
[   97.400000] ===MHX2.0(mesh_sta_info_init): rates=0x0000003f. insert=0,sta->plink_state=4        
[   97.410000] ==MHX1.1(ieee80211_mps_frame_release)plink_state=4                                  
[   97.420000] ==MHX5.1(ieee80211_mesh_process_chnswitch) sta_flags=0x00000c00, err=1              
[   97.980000] ==MHX3.0(mesh_sta_info_get) sta(82bf1000) found                                     
[   97.990000] ===MHX2.0(mesh_sta_info_init): rates=0x0000003f. insert=0,sta->plink_state=4        
[   97.990000] ==MHX1.1(ieee80211_mps_frame_release)plink_state=4                                  
[   98.000000] ==MHX5.1(ieee80211_mesh_process_chnswitch) sta_flags=0x00000c00, err=1              
[   98.420000] ==MHX3.0(mesh_sta_info_get) sta(83386000) found                                     
[   98.430000] ===MHX2.0(mesh_sta_info_init): rates=0x0000003f. insert=0,sta->plink_state=4        
[   98.440000] ==MHX1.1(ieee80211_mps_frame_release)plink_state=4                                  
[   98.440000] ==MHX5.1(ieee80211_mesh_process_chnswitch) sta_flags=0x00000c00, err=1              
[   99.010000] ==MHX3.0(mesh_sta_info_get) sta(82bf1000) found                                     
[   99.010000] ===MHX2.0(mesh_sta_info_init): rates=0x0000003f. insert=0,sta->plink_state=4        
[   99.020000] ==MHX1.1(ieee80211_mps_frame_release)plink_state=4                                  
[   99.020000] ==MHX5.1(ieee80211_mesh_process_chnswitch) sta_flags=0x00000c00, err=1              
[   99.450000] ==MHX3.0(mesh_sta_info_get) sta(83386000) found                                     
[   99.450000] ===MHX2.0(mesh_sta_info_init): rates=0x0000003f. insert=0,sta->plink_state=4        
[   99.460000] ==MHX1.1(ieee80211_mps_frame_release)plink_state=4                                  
[   99.470000] ==MHX5.1(ieee80211_mesh_process_chnswitch) sta_flags=0x00000c00, err=1              
[  100.470000] ==MHX3.0(mesh_sta_info_get) sta(83386000) found                                     
[  100.480000] ===MHX2.0(mesh_sta_info_init): rates=0x0000003f. insert=0,sta->plink_state=4        
[  100.480000] ==MHX1.1(ieee80211_mps_frame_release)plink_state=4                                  
[  100.490000] ==MHX5.1(ieee80211_mesh_process_chnswitch) sta_flags=0x00000c00, err=1              
[  101.070000] ==MHX3.0(mesh_sta_info_get) sta(82bf1000) found                                     
[  101.070000] ===MHX2.0(mesh_sta_info_init): rates=0x0000003f. insert=0,sta->plink_state=4        
[  101.080000] ==MHX1.1(ieee80211_mps_frame_release)plink_state=4                                  
[  101.080000] ==MHX5.1(ieee80211_mesh_process_chnswitch) sta_flags=0x00000c00, err=1              
[  101.500000] ==MHX3.0(mesh_sta_info_get) sta(83386000) found                                     
[  101.500000] ===MHX2.0(mesh_sta_info_init): rates=0x0000003f. insert=0,sta->plink_state=4        
[  101.510000] ==MHX1.1(ieee80211_mps_frame_release)plink_state=4                                  
[  101.510000] ==MHX5.1(ieee80211_mesh_process_chnswitch) sta_flags=0x00000c00, err=1              
[  102.080000] ==MHX3.0(mesh_sta_info_get) sta(82bf1000) found                                     
[  102.080000] ===MHX2.0(mesh_sta_info_init): rates=0x0000003f. insert=0,sta->plink_state=4        
[  102.090000] ==MHX1.1(ieee80211_mps_frame_release)plink_state=4                                  
[  102.100000] ==MHX5.1(ieee80211_mesh_process_chnswitch) sta_flags=0x00000c00, err=1              
[  102.520000] ==MHX3.0(mesh_sta_info_get) sta(83386000) found                                     
[  102.520000] ===MHX2.0(mesh_sta_info_init): rates=0x0000003f. insert=0,sta->plink_state=4  








                                                                    

Oct 1, 2018
pDDL924 Mesh mode, every boot-up:
<6>[   87.660000] br-lan: port 2(wlan0) entered forwarding state
<6>[   87.660000] br-lan: port 2(wlan0) entered forwarding state
<6>[   89.660000] br-lan: port 2(wlan0) entered forwarding state
///////////////////Me[00:0F:92:FA:4F:D5] meshd-nl80211 started,wait for incoming connection //////////////////////////////////////
<4>[  104.680000] ------------[ cut here ]------------
<4>[  104.680000] WARNING: at /home/jli/project/work/g3/pddl-924/build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/compat-wireless-mh_ddl2/include/net/mac80211.h:4632 ieee80211_mps_frame_release+0xef4/0x139c [mac80211]()
<0>[  104.680000] Modules linked in: rt2800usb rt2800lib rt2x00usb rt2x00lib ftdi_sio rndis_host cdc_ether cdc_eem ax88179_178a asix smsc75xx usbnet uhci_hcd ohci_hcd ehci_platform ehci_hcd ath9k ath9k_common ppp_async iptable_nat ath9k_hw ath ppp_generic pl2303 nf_nat_ipv4 nf_conntrack_ipv4 mac80211 ipt_MASQUERADE cfg80211 zlib_inflate zlib_deflate xt_time xt_tcpmss xt_statistic xt_state xt_recent xt_quota xt_pkttype xt_physdev xt_owner xt_nat xt_multiport xt_mark xt_mac xt_limit xt_length xt_iprange xt_iface xt_hl xt_helper xt_esp xt_ecn xt_dscp xt_conntrack xt_connmark xt_connlimit xt_connbytes xt_condition xt_comment xt_addrtype xt_TCPMSS xt_REDIRECT xt_RAWNAT xt_NETMAP xt_LOG xt_IPMARK xt_HL xt_DSCP xt_CT xt_CLASSIFY usbserial slhc nf_nat_irc nf_nat_ftp nf_nat nf_defrag_ipv4 nf_conntrack_netlink nf_conntrack_irc nf_conntrack_ftp nf_conntrack iptable_raw iptable_mangle iptable_filter ipt_ah ipt_REJECT ipt_ECN ip_tables ebt_among ebt_802_3 crc16 crc_ccitt compat_xtables compat arptable_filter arpt_mangle arp_tables rffc5071 act_skbedit act_mirred em_u32 cls_u32 cls_tcindex cls_flow cls_route cls_fw sch_hfsc sch_ingress xt_set ip_set_list_set ip_set_hash_netport ip_set_hash_netiface ip_set_hash_net ip_set_hash_ipportnet ip_set_hash_ipportip ip_set_hash_ipport ip_set_hash_ip ip_set_bitmap_port ip_set_bitmap_ipmac ip_set_bitmap_ip ip_set nfnetlink configfs arc4 crypto_blkcipher soip gpio_button_hotplug mhx_bsp
<0>[  104.690000] CPU: 0 PID: 1997 Comm: meshd-nl80211 Not tainted 3.10.36 #1
<0>[  104.690000] Stack : 00000000 00000000 00000000 00000000 80392eb2 0000003b 83bc2758 83190ac0
<0>[  104.690000]         802ea09c 803417db 000007cd 80392660 83bc2758 83190ac0 00000004 824183e8
<0>[  104.690000]         8351cdc0 80078950 00000003 800763d0 832d1d58 83190ac0 802eb924 83b6da24
<0>[  104.690000]         00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
<0>[  104.690000]         00000000 00000000 00000000 00000000 00000000 00000000 00000000 83b6d9b0
<0>[  104.690000]         ...
<0>[  104.690000] Call Trace:
<0>[  104.690000] [<8006dcc8>] show_stack+0x48/0x70
<0>[  104.690000] [<800764cc>] warn_slowpath_common+0x78/0xa8
<0>[  104.690000] [<80076584>] warn_slowpath_null+0x18/0x24
<0>[  104.690000] [<832c44cc>] ieee80211_mps_frame_release+0xef4/0x139c [mac80211]
<0>[  104.690000] 
<4>[  104.690000] ---[ end trace 6db4c0400f5a7fdb ]---
<4>[  104.720000] ------------[ cut here ]------------
<4>[  104.720000] WARNING: at /home/jli/project/work/g3/pddl-924/build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/compat-wireless-mh_ddl2/net/mac80211/rate.c:251 rate_control_send_comport+0x410/0x508 [mac80211]()
<0>[  104.720000] Modules linked in: rt2800usb rt2800lib rt2x00usb rt2x00lib ftdi_sio rndis_host cdc_ether cdc_eem ax88179_178a asix smsc75xx usbnet uhci_hcd ohci_hcd ehci_platform ehci_hcd ath9k ath9k_common ppp_async iptable_nat ath9k_hw ath ppp_generic pl2303 nf_nat_ipv4 nf_conntrack_ipv4 mac80211 ipt_MASQUERADE cfg80211 zlib_inflate zlib_deflate xt_time xt_tcpmss xt_statistic xt_state xt_recent xt_quota xt_pkttype xt_physdev xt_owner xt_nat xt_multiport xt_mark xt_mac xt_limit xt_length xt_iprange xt_iface xt_hl xt_helper xt_esp xt_ecn xt_dscp xt_conntrack xt_connmark xt_connlimit xt_connbytes xt_condition xt_comment xt_addrtype xt_TCPMSS xt_REDIRECT xt_RAWNAT xt_NETMAP xt_LOG xt_IPMARK xt_HL xt_DSCP xt_CT xt_CLASSIFY usbserial slhc nf_nat_irc nf_nat_ftp nf_nat nf_defrag_ipv4 nf_conntrack_netlink nf_conntrack_irc nf_conntrack_ftp nf_conntrack iptable_raw iptable_mangle iptable_filter ipt_ah ipt_REJECT ipt_ECN ip_tables ebt_among ebt_802_3 crc16 crc_ccitt compat_xtables compat arptable_filter arpt_mangle arp_tables rffc5071 act_skbedit act_mirred em_u32 cls_u32 cls_tcindex cls_flow cls_route cls_fw sch_hfsc sch_ingress xt_set ip_set_list_set ip_set_hash_netport ip_set_hash_netiface ip_set_hash_net ip_set_hash_ipportnet ip_set_hash_ipportip ip_set_hash_ipport ip_set_hash_ip ip_set_bitmap_port ip_set_bitmap_ipmac ip_set_bitmap_ip ip_set nfnetlink configfs arc4 crypto_blkcipher soip gpio_button_hotplug mhx_bsp
<0>[  104.720000] CPU: 0 PID: 1997 Comm: meshd-nl80211 Tainted: G        W    3.10.36 #1
<0>[  104.720000] Stack : 00000000 00000000 00000000 00000000 80392eb2 00000046 83bc2758 82b13840
<0>[  104.720000]         802ea09c 803417db 000007cd 80392660 83bc2758 82b13840 83894420 83b6dbb8
<0>[  104.720000]         82429d80 80078950 00000003 8007635c 832cd288 82b13840 802eb924 83b6d8cc
<0>[  104.720000]         00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
<0>[  104.720000]         00000000 00000000 00000000 00000000 00000000 00000000 00000000 83b6d858
<0>[  104.720000]         ...
<0>[  104.720000] Call Trace:
<0>[  104.720000] [<8006dcc8>] show_stack+0x48/0x70
<0>[  104.720000] [<800764cc>] warn_slowpath_common+0x78/0xa8
<0>[  104.720000] [<80076584>] warn_slowpath_null+0x18/0x24
<0>[  104.720000] [<83293768>] rate_control_send_comport+0x410/0x508 [mac80211]
<0>[  104.720000] 
<4>[  104.720000] ---[ end trace 6db4c0400f5a7fdc ]---

This core dump only happens in secure mesh mode. meshd-nl80211 causes this issue. Open the debug to 480 and 1 to watch more debug info. This core dump looks only happens in the boot-up time. When kernel core dump as above, the meshd-nl80211 shows:

root@UserDevice:~# /usr/bin/meshd-nl80211 -i wlan0 -s pDDL900-jeff -c /var/run/a                   
uthsae-wlan0.cfg                                                                                   
----------                                                                                         
nlcfg rates hexdump                                                                                
00 3c 00 5a 00 78 00 b4 00 f0 01 68                                                                
----------                                                                                         
                                                                                                   
----------                                                                                         
mgtk:  hexdump                                                                                     
dc 61 20 d9 99 c3 bc 66 82 fb d9 26 40 67 89 6d                                                    
----------                                                                                         
                                                                                                   
----------                                                                                         
Fixed Information Elements in this STA hexdump                                                     
01 06 8c 12 98 24 b0 48                                                                            
----------                                                                                         
                                                                                                   
meshd: Starting mesh with mesh id = pDDL900-jeff                                                   
----------                                                                                         
basic rates: hexdump                                                                               
8c 98 b0                                                                                           
----------                                                                                         
                                                                                                   
joining mesh pDDL900-jeff on freq 2391, mode 1                                                     
                                                                                                   
///////Me [00:0F:92:FA:4F:D5] meshd-nl80211 started,wait for incoming connection ///////  
////// Peer [00:0F:92:FA:4F:D2] is starting and connecting to me.........                                         
NL80211_CMD_NEW_PEER_CANDIDATE(1536272651.390048)                                                  
new peer candidate (seq num=1536272650)                                                            
tx_frame(0x41c9d8, 0x7fd821b0, 128)                                                                
tx frame (seq num=1536272651)                                                                      
----------                                                                                         
tx frame hexdump                                                                                   
b0 00 00 00 00 0f 92 fa 4f d2 00 0f 92 fa 4f d5 00 0f 92 fa                                        
4f d2 00 00 03 00 01 00 00 00 13 00 7d ee 83 56 a6 9b a0 c2                                        
c6 95 c6 b7 74 ba 93 d9 e9 77 72 c9 2a 1c 2c 9d 3d c2 e5 e9                                        
45 56 a7 0d e3 f2 a3 19 2a d4 c4 88 92 4f 3e a0 2b da b0 b6                                        
72 e4 98 d6 67 43 d3 7b ca 6f 35 28 3e 6b 91 0c 88 1c 89 2a                                        
0f ea 66 ea 8c 76 26 29 a7 8a fe 2e 35 30 29 46 09 4e 08 fd                                        
51 3d 11 67 77 00 11 56                                                                            
----------                                                                                         
                                                                                                   
new unauthed sta (seq num=1536272652)                                                              
NL80211_CMD_NEW_STATION (1536272651.425698)                                                        
NL80211_CMD_TX_STATUS (1536272651.425821)                                                          
nlerror, cmd 18, seq 1536272652: Invalid argument                                                  
NL80211_CMD_FRAME (1536272651.451688)                                                              
----------                                                                                         
rx frame hexdump                                                                                   
b0 00 3c 00 00 0f 92 fa 4f d5 00 0f 92 fa 4f d2 00 0f 92 fa                                        
4f d5 b0 b3 03 00 01 00 00 00 13 00 b5 14 d9 68 c1 36 fc b4                                        
12 ee 53 af 44 57 7f 85 2d 7c 70 61 91 95 87 f1 24 3c 34 47                                        
92 a8 ca 04 e1 1e 0d 27 3f be 36 5b 4f 04 80 fe b1 f0 6d 27                                        
81 7c ab 88 b9 50 14 cb f0 8a f9 f5 c3 22 02 1c 06 1c ef 85                                        
a1 7f 45 e5 a2 11 83 7e b1 98 98 83 73 41 2d e8 c3 40 43 7d                                        
a3 d1 ac cc 95 60 b4 49                                                                            
----------                                                                                         
                                                                                                   
tx_frame(0x41c9d8, 0x7fd82008, 64)                                                                 
tx frame (seq num=1536272653)                                                                      
----------                                                                                         
tx frame hexdump                                                                                   
b0 00 00 00 00 0f 92 fa 4f d2 00 0f 92 fa 4f d5 00 0f 92 fa                                        
4f d2 00 00 03 00 02 00 00 00 01 00 b2 a2 2b 24 be 5c 25 d9                                        
2a 1e 89 d6 fe dd e3 7d dc b1 fb 48 60 07 92 b9 14 ca c1 11                                        
5a 56 42 dc                                                                                        
----------                                                                                         
                                                                                                   
NL80211_CMD_FRAME (1536272651.508603)                                                              
----------                                                                                         
rx frame hexdump                                                                                   
b0 00 3c 00 00 0f 92 fa 4f d5 00 0f 92 fa 4f d2 00 0f 92 fa                                        
4f d5 c0 b3 03 00 02 00 00 00 01 00 ee 02 d2 45 f6 e7 f7 42                                        
98 c7 f3 ae bd 97 de 7f e5 06 bf 07 79 2b a0 5c 21 f2 56 1d                                        
85 62 b8 51                                                                                        
----------                                                                                         
                                                                                                   
fin: 0, key len:32 peer:00:0f:92:fa:4f:d2 me:00:0f:92:fa:4f:d5                                     
----------                                                                                         
pmk hexdump                                                                                        
55 8f 83 2a 9b e0 26 e8 d2 87 73 c7 5b 97 83 70 c3 34 9d 9f                                        
f8 d3 bf 7c fe 8c e2 1b 6c 10 82 fd                                                                
----------                                                                                         
                                                                                                   
set plink state (seq num=1536272654)                                                               
----------                                                                                         
aek context:  hexdump                                                                              
00 0f ac 08 00 0f 92 fa 4f d2 00 0f 92 fa 4f d5                                                    
----------                                                                                         
                                                                                                   
----------                                                                                         
aek:  hexdump                                                                                      
1a 5f c1 6d 9b cd a7 66 c8 a1 79 b9 ea 60 cd b2 f6 a3 d7 61                                        
d7 5a 81 fc ce c0 3b 19 d2 58 5f 46                                                                
----------                                                                                         
                                                                                                   
set plink state (seq num=1536272655)                                                               
Mesh plink: starting establishment with 00:0f:92:fa:4f:d2                                          
Mesh plink: Sending plink action 1                                                                 
Protecting frame from 00:0f:92:fa:4f:d5 to 00:0f:92:fa:4f:d2                                       
Checking tricky lengths of protected frame 110, 98                                                 
----------                                                                                         
SIV- Put AAD[3]:  hexdump                                                                          
0f 01 10 00 01 06 8c 12 98 24 b0 48 72 0c 70 44 44 4c 39 30                                        
30 2d 6a 65 66 66 71 08 00 00 00 00 00 00 00 00 75 14 01 00                                        
d2 0d 33 03 5c c0 67 d2 9d 75 d9 84 1a 66 b9 12 13 5f 2d 1a                                        
00 01 18 ff 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00                                        
00 00 00 00 00 00 3d 16 01 00 03 00 00 00 ff 00 00 00 00 00                                        
00 00 00 00 00 00 00 00 00 00                                                                      
----------                                                                                         
                                                                                                   
tx_frame(0x41c9d8, 0x6b2a18, 250)                                                                  
tx frame (seq num=1536272656)                                                                      
----------                                                                                         
tx frame hexdump                                                                                   
d0 00 00 00 00 0f 92 fa 4f d2 00 0f 92 fa 4f d5 00 0f 92 fa                                        
4f d5 00 00 0f 01 10 00 01 06 8c 12 98 24 b0 48 72 0c 70 44                                        
44 4c 39 30 30 2d 6a 65 66 66 71 08 00 00 00 00 00 00 00 00                                        
75 14 01 00 d2 0d 33 03 5c c0 67 d2 9d 75 d9 84 1a 66 b9 12                                        
13 5f 2d 1a 00 01 18 ff 00 00 00 00 00 00 00 00 00 00 00 01                                        
00 00 00 00 00 00 00 00 00 00 3d 16 01 00 03 00 00 00 ff 00                                        
00 00 00 00 00 00 00 00 00 00 00 00 00 00 8c 10 b7 e2 cd b1                                        
e7 51 09 76 1f 6e 87 30 67 7f 1f aa f7 f7 57 79 df 83 c8 ad                                        
db f4 ac 67 ac 47 c9 78 81 d8 af fd 8f b9 40 19 c5 de fa 14                                        
00 d7 6e 5b f9 e0 c5 03 94 11 6d 3e 1a bb e3 76 ac ad 61 c0                                        
33 77 53 89 78 5a 6c 89 9f 2a 6e 32 18 95 7a fe 0e e0 11 41                                        
7f f3 52 d6 36 07 68 0b a1 d2 42 f1 65 94 7d 98 9a 59 c8 b2                                        
71 7b dc c7 31 c5 c9 31 dd 64                                                                      
----------                                                                                         
                                                                                                   
NL80211_CMD_TX_STATUS (1536272651.520492)                                                          
NL80211_CMD_TX_STATUS (1536272651.520639)                                                          
NL80211_CMD_FRAME (1536272651.520838)                                                              
----------                                                                                         
rx frame hexdump                                                                                   
d0 00 3c 00 00 0f 92 fa 4f d5 00 0f 92 fa 4f d2 00 0f 92 fa                                        
4f d2 d0 b3 0f 01 10 00 01 06 8c 12 98 24 b0 48 72 0c 70 44                                        
44 4c 39 30 30 2d 6a 65 66 66 71 08 00 00 00 00 00 00 00 00                                        
75 14 01 00 9d 0f 33 03 5c c0 67 d2 9d 75 d9 84 1a 66 b9 12                                        
13 5f 2d 1a 00 01 18 ff 00 00 00 00 00 00 00 00 00 00 00 01                                        
00 00 00 00 00 00 00 00 00 00 3d 16 01 00 03 00 00 00 ff 00                                        
00 00 00 00 00 00 00 00 00 00 00 00 00 00 8c 10 e8 92 f9 f8                                        
4f 14 aa c0 76 d0 6b e7 14 c1 63 5f 49 22 86 d9 0f d7 07 d9                                        
bd 10 95 99 30 fd 60 5b 3a f5 9a 64 9b 01 15 84 36 92 9f a8                                        
de 6a e4 11 f0 af 22 b0 cc 9e 3f a3 1c d3 3a c2 b9 4e ca 0e                                        
2f 2c 1f a9 5d a8 10 62 2c be 4f 14 53 74 c4 65 37 72 ad 4a                                        
8f bc 89 43 eb f3 d0 50 08 f7 75 ac 4c 80 51 6e ae 30 3a 76                                        
b5 20 f3 89 34 21 b9 ee cd 6b                                                                      
----------                                                                                         
                                                                                                   
Checking protection to 00:0f:92:fa:4f:d5 from 00:0f:92:fa:4f:d2                                    
Len checking cat-to-mic len:110 ampe ie full length: 98                                            
----------                                                                                         
SIV- Got AAD[3]:  hexdump                                                                          
0f 01 10 00 01 06 8c 12 98 24 b0 48 72 0c 70 44 44 4c 39 30                                        
30 2d 6a 65 66 66 71 08 00 00 00 00 00 00 00 00 75 14 01 00                                        
9d 0f 33 03 5c c0 67 d2 9d 75 d9 84 1a 66 b9 12 13 5f 2d 1a                                        
00 01 18 ff 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00                                        
00 00 00 00 00 00 3d 16 01 00 03 00 00 00 ff 00 00 00 00 00                                        
00 00 00 00 00 00 00 00 00 00                                                                      
----------                                                                                         
                                                                                                   
----------                                                                                         
AMPE IE:  hexdump                                                                                  
8b 60 00 0f ac 04 99 b4 12 42 95 ba 16 dd 1f 52 d0 1b e4 15                                        
7d 4a e5 5d 3c 3c 73 6e 87 8a 03 35 26 10 71 bd 7e 8c 00 00                                        
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                        
00 00 00 00 00 00 00 00 00 00 d9 13 48 8e dd 25 09 f5 82 ba                                        
03 fa 59 64 51 9f 00 00 00 00 00 00 00 00 ff ff ff ff                                              
----------                                                                                         
                                                                                                   
----------                                                                                         
Received mgtk:  hexdump                                                                            
d9 13 48 8e dd 25 09 f5 82 ba 03 fa 59 64 51 9f                                                    
----------                                                                                         
                                                                                                   
TODO: return available peer link slots                                                             
Mesh plink (peer, state, llid, plid, event): 00:0f:92:fa:4f:d2 OPN-SNT 3538 3997 1                 
set plink state (seq num=1536272657)                                                               
Mesh plink: Sending plink action 2                                                                 
Protecting frame from 00:0f:92:fa:4f:d5 to 00:0f:92:fa:4f:d2                                       
Checking tricky lengths of protected frame 114, 98                                                 
----------                                                                                         
SIV- Put AAD[3]:  hexdump                                                                          
0f 02 10 00 00 00 01 06 8c 12 98 24 b0 48 72 0c 70 44 44 4c                                        
39 30 30 2d 6a 65 66 66 71 08 00 00 00 00 00 00 00 00 75 16                                        
01 00 d2 0d 9d 0f 33 03 5c c0 67 d2 9d 75 d9 84 1a 66 b9 12                                        
13 5f 2d 1a 00 01 18 ff 00 00 00 00 00 00 00 00 00 00 00 01                                        
00 00 00 00 00 00 00 00 00 00 3d 16 01 00 03 00 00 00 ff 00                                        
00 00 00 00 00 00 00 00 00 00 00 00 00 00                                                          
----------                                                                                         
                                                                                                   
tx_frame(0x41c9d8, 0x6b2a18, 254)                                                                  
tx frame (seq num=1536272658)                                                                      
----------                                                                                         
tx frame hexdump                                                                                   
d0 00 00 00 00 0f 92 fa 4f d2 00 0f 92 fa 4f d5 00 0f 92 fa                                        
4f d5 00 00 0f 02 10 00 00 00 01 06 8c 12 98 24 b0 48 72 0c                                        
70 44 44 4c 39 30 30 2d 6a 65 66 66 71 08 00 00 00 00 00 00                                        
00 00 75 16 01 00 d2 0d 9d 0f 33 03 5c c0 67 d2 9d 75 d9 84                                        
1a 66 b9 12 13 5f 2d 1a 00 01 18 ff 00 00 00 00 00 00 00 00                                        
00 00 00 01 00 00 00 00 00 00 00 00 00 00 3d 16 01 00 03 00                                        
00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 8c 10                                        
9f 02 9c 62 5e b8 a2 da 06 2e a4 ea 83 0c a1 0d e6 2b fc f6                                        
99 95 a2 11 dd 8b ab ef 91 2b c7 be 0a 22 1c 30 e0 dc 9b 88                                        
92 0b 9e ce 23 d7 da 78 38 40 1d 6b 7c 62 47 43 53 15 67 75                                        
b0 dc 28 d7 2f 1a 1a 95 11 08 ee 08 64 5f 50 48 cd a4 91 63                                        
10 d2 7c 03 41 16 f5 d5 11 83 eb 6b bf eb e0 fd ff fa 63 47                                        
eb 9f 35 9f 83 a9 e4 b5 31 87 52 9b cb ca                                                          
----------                                                                                         
                                                                                                   
NL80211_CMD_TX_STATUS (1536272651.870319)                                                          
NL80211_CMD_FRAME (1536272651.870515)                                                              
----------                                                                                         
rx frame hexdump                                                                                   
d0 00 3c 00 00 0f 92 fa 4f d5 00 0f 92 fa 4f d2 00 0f 92 fa                                        
4f d2 e0 b3 0f 02 10 00 00 00 01 06 8c 12 98 24 b0 48 72 0c                                        
70 44 44 4c 39 30 30 2d 6a 65 66 66 71 08 00 00 00 00 00 00                                        
00 00 75 16 01 00 9d 0f d2 0d 33 03 5c c0 67 d2 9d 75 d9 84                                        
1a 66 b9 12 13 5f 2d 1a 00 01 18 ff 00 00 00 00 00 00 00 00                                        
00 00 00 01 00 00 00 00 00 00 00 00 00 00 3d 16 01 00 03 00                                        
00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 8c 10                                        
50 85 d8 8a 64 ea b4 c5 62 8d 75 28 07 5c e6 20 dd dc f6 af                                        
32 37 db 7b 6c 93 e1 05 d4 91 f9 0f bb d4 86 a6 cc 1d 56 e2                                        
73 c5 bc e8 bd 6f 6b 02 6a 07 04 a7 0a 2d a0 4d f3 a8 0a 95                                        
6b 65 92 59 f1 3f 21 48 f4 63 ce 4e b3 2c 77 49 a2 f9 3d 4e                                        
94 ac 7c 9d b5 44 44 3a 36 5d f1 5d 7a fb 94 9c 52 30 59 6b                                        
2b be 54 aa 9e 2a 49 54 bb 85 39 6e aa dc                                                          
----------                                                                                         
                                                                                                   
Checking protection to 00:0f:92:fa:4f:d5 from 00:0f:92:fa:4f:d2                                    
Len checking cat-to-mic len:114 ampe ie full length: 98                                            
----------                                                                                         
SIV- Got AAD[3]:  hexdump                                                                          
0f 02 10 00 00 00 01 06 8c 12 98 24 b0 48 72 0c 70 44 44 4c                                        
39 30 30 2d 6a 65 66 66 71 08 00 00 00 00 00 00 00 00 75 16                                        
01 00 9d 0f d2 0d 33 03 5c c0 67 d2 9d 75 d9 84 1a 66 b9 12                                        
13 5f 2d 1a 00 01 18 ff 00 00 00 00 00 00 00 00 00 00 00 01                                        
00 00 00 00 00 00 00 00 00 00 3d 16 01 00 03 00 00 00 ff 00                                        
00 00 00 00 00 00 00 00 00 00 00 00 00 00                                                          
----------                                                                                         
                                                                                                   
----------                                                                                         
AMPE IE:  hexdump                                                                                  
8b 60 00 0f ac 04 99 b4 12 42 95 ba 16 dd 1f 52 d0 1b e4 15                                        
7d 4a e5 5d 3c 3c 73 6e 87 8a 03 35 26 10 71 bd 7e 8c ee 3e                                        
a3 25 85 35 53 44 77 f9 b0 f4 8a 48 de b7 20 41 8b 4e 2c e9                                        
b4 cc 6a 03 67 13 10 7c 09 93 d9 13 48 8e dd 25 09 f5 82 ba                                        
03 fa 59 64 51 9f 00 00 00 00 00 00 00 00 ff ff ff ff                                              
----------                                                                                         
                                                                                                   
----------                                                                                         
Received mgtk:  hexdump                                                                            
d9 13 48 8e dd 25 09 f5 82 ba 03 fa 59 64 51 9f                                                    
----------                                                                                         
                                                                                                   
TODO: return available peer link slots                                                             
Mesh plink (peer, state, llid, plid, event): 00:0f:92:fa:4f:d2 OPN-RCVD 3538 3997 4                
set plink state (seq num=1536272659)                                                               
----------                                                                                         
mtk context:  hexdump                                                                              
99 b4 12 42 95 ba 16 dd 1f 52 d0 1b e4 15 7d 4a e5 5d 3c 3c                                        
73 6e 87 8a 03 35 26 10 71 bd 7e 8c ee 3e a3 25 85 35 53 44                                        
77 f9 b0 f4 8a 48 de b7 20 41 8b 4e 2c e9 b4 cc 6a 03 67 13                                        
10 7c 09 93 d2 0d 9d 0f 00 0f ac 08 00 0f 92 fa 4f d2 00 0f                                        
92 fa 4f d5                                                                                        
----------                                                                                         
                                                                                                   
----------                                                                                         
mtk:  hexdump                                                                                      
e9 4b e7 93 4a 42 ee 08 54 27 fe 1a 56 8e 89 0e                                                    
----------                                                                                         
                                                                                                   
estab with 00:0f:92:fa:4f:d2                                                                       
set auth flag (seq num=1536272660)                                                                 
changing ht protection mode to: 0                                                                  
mesh plink with 00:0f:92:fa:4f:d2 established                                                      
set_mesh_conf(0x41c9d8, 1)                                                                         
set meshconf (seq num=1536272665)                                                                  
nlerror, cmd 18, seq 1536272664: Invalid argument                                                  
Mesh plink timer for 00:0f:92:fa:4f:d2 fired on state ESTAB                                        
Timeout for peer 00:0f:92:fa:4f:d2 in state 4                                                      
                                                                                                   
When turn on printk and mix kernel and user message :
                                                                                                  
root@UserDevice:~#                                                                                 
root@UserDevice:~#                                                                                 
root@UserDevice:~# echo "8 8 8 8" > proc/sys/kernel/printk                                         
root@UserDevice:~#                                                                                 
root@UserDevice:~#                                                                                 
root@UserDevice:~# cat var/run/authsae-wlan0.cfg                                                   
authsae:                                                                                           
{                                                                                                  
 sae:                                                                                              
  {                                                                                                
    debug = 0x3ff;                                                                                 
    password = "qazwsxedc";                                                                        
    group = [19, 26, 21, 25, 20];                                                                  
    blacklist = 30;                                                                                
    thresh = 5;                                                                                    
    lifetime = 72000;                                                                              
  };                                                                                               
 meshd:                                                                                            
  {                                                                                                
    meshid = "pDDL900-jeff";                                                                       
    interface = "wlan0";                                                                           
    passive = 0;                                                                                   
    debug = 1;                                                                                     
    mediaopt = 1;                                                                                  
    band = "11g";                                                                                  
    channel = 1;                                                                                   
    htmode = "HT20";                                                                               
    mcast-rate = 12;                                                                               
  };                                                                                               
};                                                                                                 
root@UserDevice:~# ps | grep mesh                                                                  
 2920 root      1364 S    grep mesh                                                                
root@UserDevice:~#                                                                                 
root@UserDevice:~# /usr/bin/meshd-nl80211 -i wlan0 -s pDDL900-jeff -c /var/run/a                   
uthsae-wlan0.cfg                                                                                   
group 19 is configured, prime is 32 bytes                                                          
group 26 is configured, prime is 28 bytes                                                          
group 21 is configured, prime is 66 bytes                                                          
group 25 is configured, prime is 24 bytes                                                          
group 20 is configured, prime is 48 bytes                                                          
----------                                                                                         
nlcfg rates hexdump                                                                                
00 3c 00 5a 00 78 00 b4 00 f0 01 68                                                                
----------                                                                                         
                                                                                                   
----------                                                                                         
mgtk:  hexdump                                                                                     
fc 8f 01 bd 76 8b 26 dc 9c ca 04 ee 08 7e 70 aa                                                    
----------                                                                                         
                                                                                                   
----------                                                                                         
Fixed Information Element[  181.460000] br-lan: port 2(wlan0) entered forwarding state             
[  181.470000] br-lan: port 2(wlan0) entered forwarding state                                      
s in this STA hexdump                                                                              
01 06 8c 12 98 24 b0 48                                                                            
----------                                                                                         
                                                                                                   
meshd: Starting mesh with mesh id = pDDL900-jeff                                                   
----------                                                                                         
basic rates: hexdump                                                                               
8c 98 b0                                                                                           
----------                                                                                         
                                                                                                   
joining mesh pDDL900-jeff on freq 2391, mode 1                                                     
                                                                                                   
[  183.470000] br-lan: port 2(wlan0) entered forwarding state                                     
========================waiting for [00:0f:92:fa:4f:d2] to connect to me...=========================================                          
                                                                                                   
                                                                                                   
                                                                                                   
                                                                                                   
NL80211_CMD_NEW_PE
[  193.210000] ------------[ cut here ]------------                              
[  193.210000] WARNING: at /home/jli/project/work/g3/pddl-924/build_dir/target-mips_34kc_uClibc-0.9
.33.2/linux-ar71xx_generic/compat-wireless-mh_ddl2/include/net/mac80211.h:4632 ieee80211_mps_frame_
release+0xef4/0x139c [mac80211]()                                                                  
[  193.230000] CPU: 0 PID: 3281 Comm: meshd-nl80211 Not tainted 3.10.36 #1                         
[  193.240000] Call Trace:                                                                         
[  193.240000] [<8006dcc8>] show_stack+0x48/0x70                                                   
[  193.250000] [<800764cc>] warn_slowpath_common+0x78/0xa8                                         
[  193.250000] [<80076584>] warn_slowpath_null+0x18/0x24                                           
[  193.260000] [<832c44cc>] ieee80211_mps_frame_release+0xef4/0x139c [mac80211]                    
[  193.260000]                                                                                     
[  193.260000] ---[ end trace dc149f35058a0c71 ]---                                                
ER_CANDIDATE(1536272739.829194)                                                                    

received a beacon from 00:0f:92:fa:4f:d2                                                           
Initiate event                                                                                     
new peer candidate (seq num=1536272744)                                                            
computing PWE on 256 bit curve number 19                                                           
H(00:0f:92:fa:4f:d5 | 00:0f:92:fa:4f:d2, qazwsxedc | 1)                                            
6daae119 37adf337 dfdca2cf cbd79d33 ef1abced 3a0ce8d1 41eacfc0 0e2fae09                            
candidate x value:                                                                                 
08ff0449 34b0b5d8 810d2a72 50b89646 d9f59d2d 6c90f19a d881d40e 8bfc69af                            
                                                                                                   
PWE (x,y):                                                                                         
x:                                                                                                 
08ff0449 34b0b5d8 810d2a72 50b89646 d9f59d2d 6c90f19a d881d40e 8bfc69af                            
                                                                                                   
y:                                                                                                 
a0d58402 eb8d6303 3e5555d9 85ab532f ea671f70 80657397 d4aaaa7d df651f9b                            
                                                                                                   
it took 1 tries to find PWE: 19                                                                    
assigning group 19 to peer, the size of the prime is 32                                            
local private value:                                                                               
369c15df 69ae249b cd13af19 f1202233 588ebff2 e500ab7b 47b91eb7 8244b570                            
                                                                                                   
local mask value:                                                                                  
7f5bc537 aa383797 11cd278a 8e6ee956 2b31d725 d18a4975 e3fc5f20 27fec99f                            
                                                                                                   
local
[  193.340000] ------------[ cut here ]------------                                           
[  193.350000] WARNING: at /home/jli/project/work/g3/pddl-924/build_dir/target-mips_34kc_uClibc-0.9
.33.2/linux-ar71xx_generic/compat-wireless-mh_ddl2/net/mac80211/rate.c:251 rate_control_send_compor
t+0x410/0x508 [mac80211]()                                                                         
[  193.370000] CPU: 0 PID: 3281 Comm: meshd-nl80211 Tainted: G        W    3.10.36 #1              
[  193.380000] Call Trace:                                                                         
[  193.380000] [<8006dcc8>] show_stack+0x48/0x70                                                   
[  193.380000] [<800764cc>] warn_slowpath_common+0x78/0xa8                                         
[  193.390000] [<80076584>] warn_slowpath_null+0x18/0x24                                           
[  193.390000] [<83293768>] rate_control_send_comport+0x410/0x508 [mac80211]                       
[  193.400000]                                                                                     
[  193.400000] ---[ end trace dc149f35058a0c72 ]---                                                
 commit:                                                                                           
my scalar:                                                                                         
b5f7db17 13e65c32 dee0d6a4 7f8f0b89 83c09718 b68af4f1 2bb57dd7 aa437f0f                            
                                                                                                   
my element:                                                                                        
x:                                                                                                 
c7907fe8 48b52fd3 86ac7343 abcd1cdc f60b4ab0 c704c2a8 b96371ff bd905a4b                            
                                                                                                   
y:                                                                                                 
23ba4576 838033c1 73d3e05d 6ec71ca7 72621fea d1f98ec4 326992ba 4b56dd86                            
                                                                                                   
in NOTHING, sending COMMIT (no token), len 128, group 19                                           
tx_frame(0x41c9d8, 0x7f92a970, 128)                                                                
tx frame (seq num=1536272745)                                                                      
----------                                                                                         
tx frame hexdump                                                                                   
b0 00 00 00 00 0f 92 fa 4f d2 00 0f 92 fa 4f d5 00 0f 92 fa                                        
4f d2 00 00 03 00 01 00 00 00 13 00 b5 f7 db 17 13 e6 5c 32                                        
de e0 d6 a4 7f 8f 0b 89 83 c0 97 18 b6 8a f4 f1 2b b5 7d d7                                        
aa 43 7f 0f c7 90 7f e8 48 b5 2f d3 86 ac 73 43 ab cd 1c dc                                        
f6 0b 4a b0 c7 04 c2 a8 b9 63 71 ff bd 90 5a 4b 23 ba 45 76                                        
83 80 33 c1 73 d3 e0 5d 6e c7 1c a7 72 62 1f ea d1 f9 8e c4                                        
32 69 92 ba 4b 56 dd 86                                                                            
----------                                                                                         
                                                                                                   
state of 00:0f:92:fa:4f:d2 is now (1) COMMITTED                                                    
                                                                                                   
new unauthed sta (seq num=1536272746)                                                              
NL80211_CMD_NEW_STATION (1536272740.43311)                                                         
NL80211_CMD_TX_STATUS (1536272740.43437)                                                           
nlerror, cmd 18, seq 1536272746: Invalid argument                                                  
NL80211_CMD_FRAME (1536272740.56821)                                                               
----------                                                                                         
rx frame hexdump                                                                                   
b0 00 3c 00 00 0f 92 fa 4f d5 00 0f 92 fa 4f d2 00 0f 92 fa                                        
4f d5 70 54 03 00 01 00 00 00 13 00 c6 39 b4 aa 73 e9 75 2b                                        
79 d5 48 34 0f e8 0b 7f 71 70 28 52 38 5c 2b 1b fa 3e 00 98                                        
8c d0 7e 5c ea 40 cc 71 fd 87 1f 79 63 57 2d f9 4f b6 bb cf                                        
6f 0f 7f 5a 1e a5 fe 1e c3 ab ce ee d9 4f 7a 88 b6 08 fc d6                                        
b5 70 d6 65 41 3d f9 f9 9e 41 67 77 3d ae cd a2 1f 51 08 1a                                        
80 66 5f fe aa 21 c4 9a                                                                            
----------                                                                                         
                                                                                                   
recv'd COMMIT from 00:0f:92:fa:4f:d2 while in COMMITTED                                            
peer's commit:                                                                                     
peer's scalar:                                                                                     
c639b4aa 73e9752b 79d54834 0fe80b7f 71702852 385c2b1b fa3e0098 8cd07e5c                            
                                                                                                   
peer's element:                                                                                    
x:                                                                                                 
ea40cc71 fd871f79 63572df9 4fb6bbcf 6f0f7f5a 1ea5fe1e c3abceee d94f7a88                            
                                                                                                   
y:                                                                                                 
b608fcd6 b570d665 413df9f9 9e416777 3daecda2 1f51081a 80665ffe aa21c49a                            
                                                                                                   
k:                                                                                                 
db122a9c 0ad9a65d cd943b66 b54c7ff7 2dbae47d 609201a0 445b191b ac2efe3e                            
                                                                                                   
keyseed:                                                                                           
e7879f07 1b47a877 149b3b6d 1a34a137 82a14d3c 62f12c34 8ebdcaaa 4152e887                            
                                                                                                   
KCK:                                                                                               
8eeb0062 69dbcd20 d4bd3cf4 f0c856e6 41e4cac9 0f8ae889 6ebe9d08 f167ca15                            
                                                                                                   
PMK:                                                                                               
d749fa13 b24a3949 0828bb64 1edaae9b c6249884 f37e4001 7d9bad38 85b1039a                            
                                                                                                   
local confirm:                                                                                     
01001059 ff18eb4e 533a6f31 59c4f872 82a0c38e 9d7d51a1 537ff1b3 8b2c3617                            
4967                                                                                               
                                                                                                   
in COMMITTED, sending CONFIRM (sc=1), len 64                                                       
tx_frame(0x41c9d8, 0x7f92a7c8, 64)                                                                 
tx frame (seq num=1536272747)                                                                      
----------                                                                                         
tx frame hexdump                                                                                   
b0 00 00 00 00 0f 92 fa 4f d2 00 0f 92 fa 4f d5 00 0f 92 fa                                        
4f d2 00 00 03 00 02 00 00 00 01 00 10 59 ff 18 eb 4e 53 3a                                        
6f 31 59 c4 f8 72 82 a0 c3 8e 9d 7d 51 a1 53 7f f1 b3 8b 2c                                        
36 17 49 67                                                                                        
----------                                                                                         
                                                                                                   
state of 00:0f:92:fa:4f:d2 is now (2) CONFIRMED                                                    
                                                                                                   
NL80211_CMD_FRAME (1536272740.110966)                                                              
----------                                                                                         
rx frame hexdump                                                                                   
b0 00 3c 00 00 0f 92 fa 4f d5 00 0f 92 fa 4f d2 00 0f 92 fa                                        
4f d5 80 54 03 00 02 00 00 00 01 00 03 75 66 bb 3b 64 29 d0                                        
3a 04 49 d2 1a 43 9c 91 b8 82 a9 75 eb c4 05 bb ef dd 87 a2                                        
e1 0c d0 ff                                                                                        
----------                                                                                         
                                                                                                   
recv'd CONFIRM from 00:0f:92:fa:4f:d2 while in CONFIRMED                                           
processing confirm (1)                                                                             
peer's confirm:                                                                                    
01000375 66bb3b64 29d03a04 49d21a43 9c91b882 a975ebc4 05bbefdd 87a2e10c                            
d0ff                                                                                               
                                                                                                   
PMK:                                                                                               
d749fa13 b24a3949 0828bb64 1edaae9b c6249884 f37e4001 7d9bad38 85b1039a                            
                                                                                                   
fin: 0, key len:32 peer:00:0f:92:fa:4f:d2 me:00:0f:92:fa:4f:d5                                     
----------                                                                                         
pmk hexdump                                                                                        
d7 49 fa 13 b2 4a 39 49 08 28 bb 64 1e da ae 9b c6 24 98 84                                        
f3 7e 40 01 7d 9b ad 38 85 b1 03 9a                                                                
----------                                                                                         
                                                                                                   
set plink state (seq num=1536272748)                                                               
----------                                                                                         
aek context:  hexdump                                                                              
00 0f ac 08 00 0f 92 fa 4f d2 00 0f 92 fa 4f d5                                                    
----------                                                                                         
                                                                                                   
----------                                                                                         
aek:  hexdump                                                                                      
15 7a d9 9d 02 47 ae bc 2d 32 20 32 18 06 ef 78 ea 45 b4 ec                                        
22 35 09 a5 13 57 ad 70 b7 28 68 3e                                                                
----------                                                                                         
                                                                                                   
set plink state (seq num=1536272749)                                                               
Mesh plink: starting establishment with 00:0f:92:fa:4f:d2                                          
Mesh plink: Sending plink action 1                                                                 
Protecting frame from 00:0f:92:fa:4f:d5 to 00:0f:92:fa:4f:d2                                       
Checking tricky lengths of protected frame 110, 98                                                 
----------                                                                                         
SIV- Put AAD[3]:  hexdump                                                                          
0f 01 10 00 01 06 8c 12 98 24 b0 48 72 0c 70 44 44 4c 39 30                                        
30 2d 6a 65 66 66 71 08 00 00 00 00 00 00 00 00 75 14 01 00                                        
dd 5b 7c 31 8f c2 87 cf d1 5d 58 b6 1e d8 8f 77 17 09 2d 1a                                        
00 01 18 ff 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00                                        
00 00 00 00 00 00 3d 16 01 00 03 00 00 00 ff 00 00 00 00 00                                        
00 00 00 00 00 00 00 00 00 00                                                                      
----------                                                                                         
                                                                                                   
tx_frame(0x41c9d8, 0x814a18, 250)                                                                  
tx frame (seq num=1536272750)                                                                      
----------                                                                                         
tx frame hexdump                                                                                   
d0 00 00 00 00 0f 92 fa 4f d2 00 0f 92 fa 4f d5 00 0f 92 fa                                        
4f d5 00 00 0f 01 10 00 01 06 8c 12 98 24 b0 48 72 0c 70 44                                        
44 4c 39 30 30 2d 6a 65 66 66 71 08 00 00 00 00 00 00 00 00                                        
75 14 01 00 dd 5b 7c 31 8f c2 87 cf d1 5d 58 b6 1e d8 8f 77                                        
17 09 2d 1a 00 01 18 ff 00 00 00 00 00 00 00 00 00 00 00 01                                        
00 00 00 00 00 00 00 00 00 00 3d 16 01 00 03 00 00 00 ff 00                                        
00 00 00 00 00 00 00 00 00 00 00 00 00 00 8c 10 04 94 87 69                                        
37 f6 9a c1 01 92 e0 25 33 bf e8 9f 89 60 d4 99 1e 73 cb 6e                                        
c0 15 09 07 35 1a eb 82 1f 0b c3 e5 c0 13 cd e3 d0 45 ac 87                                        
2a b8 d2 b5 cd 23 09 67 29 80 85 9e 31 f4 52 0c f1 2e ec 62                                        
60 3b cf 6d cb c3 76 d8 72 ab 0e 7b 3b 95 c0 53 93 e3 56 13                                        
a2 b5 a1 34 85 91 69 20 14 9a 21 be d7 0b cb 98 28 bf 3f 00                                        
02 b0 c8 65 b3 6f 1b da 6c 93                                                                      
----------                                                                                         
                                                                                                   
setting reauth timer for 72000 seconds                                                             
state of 00:0f:92:fa:4f:d2 is now (3) ACCEPTED                                                     
                                                                                                   
NL80211_CMD_TX_STATUS (1536272740.456939)                                                          
NL80211_CMD_TX_STATUS (1536272740.457129)                                                          
NL80211_CMD_FRAME (1536272740.457267)                                                              
----------                                                                                         
rx frame hexdump                                                                                   
d0 00 3c 00 00 0f 92 fa 4f d5 00 0f 92 fa 4f d2 00 0f 92 fa                                        
4f d2 90 54 0f 01 10 00 01 06 8c 12 98 24 b0 48 72 0c 70 44                                        
44 4c 39 30 30 2d 6a 65 66 66 71 08 00 00 00 00 00 00 00 00                                        
75 14 01 00 b8 e9 7c 31 8f c2 87 cf d1 5d 58 b6 1e d8 8f 77                                        
17 09 2d 1a 00 01 18 ff 00 00 00 00 00 00 00 00 00 00 00 01                                        
00 00 00 00 00 00 00 00 00 00 3d 16 01 00 03 00 00 00 ff 00                                        
00 00 00 00 00 00 00 00 00 00 00 00 00 00 8c 10 6f 36 a0 45                                        
23 7f d3 72 17 7a 72 7a a8 4b fe db ff 35 1c 6d 28 e1 cc 36                                        
35 fd 71 9d 0b de 6d 1c 3e d8 3e b2 6e 4c 20 77 ab 65 6b bc                                        
a4 43 2b e3 d2 68 48 79 ef 74 a5 d8 73 6a f0 de 2d d8 e6 0f                                        
16 df 68 68 5c e1 8e fe be 05 56 fc 70 6e dc bb 48 2c 81 92                                        
d6 3c 3a ce 15 5f d4 38 08 83 0c 13 f3 ae 22 16 4b cf d6 5d                                        
24 66 6f b0 42 56 78 42 31 03                                                                      
----------                                                                                         
                                                                                                   
Checking protection to 00:0f:92:fa:4f:d5 from 00:0f:92:fa:4f:d2                                    
Len checking cat-to-mic len:110 ampe ie full length: 98                                            
----------                                                                                         
SIV- Got AAD[3]:  hexdump                                                                          
0f 01 10 00 01 06 8c 12 98 24 b0 48 72 0c 70 44 44 4c 39 30                                        
30 2d 6a 65 66 66 71 08 00 00 00 00 00 00 00 00 75 14 01 00                                        
b8 e9 7c 31 8f c2 87 cf d1 5d 58 b6 1e d8 8f 77 17 09 2d 1a                                        
00 01 18 ff 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00                                        
00 00 00 00 00 00 3d 16 01 00 03 00 00 00 ff 00 00 00 00 00                                        
00 00 00 00 00 00 00 00 00 00                                                                      
----------                                                                                         
                                                                                                   
----------                                                                                         
AMPE IE:  hexdump                                                                                  
8b 60 00 0f ac 04 99 82 f7 a8 8f c8 e7 c1 7a a6 8d 13 79 11                                        
db 4c 2f b9 6f 01 fa 9a b6 4a 67 56 4b 8a ad 16 82 4e 00 00                                        
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                        
00 00 00 00 00 00 00 00 00 00 66 84 ef 45 95 f1 8c 54 35 91                                        
22 56 af 0c 3c 6d 00 00 00 00 00 00 00 00 ff ff ff ff                                              
----------                                                                                         
                                                                                                   
----------                                                                                         
Received mgtk:  hexdump                                                                            
66 84 ef 45 95 f1 8c 54 35 91 22 56 af 0c 3c 6d                                                    
----------                                                                                         
                                                                                                   
TODO: return available peer link slots                                                             
Mesh plink (peer, state, llid, plid, event): 00:0f:92:fa:4f:d2 OPN-SNT 23517 59832 1               
set plink state (seq num=1536272751)                                                               
Mesh plink: Sending plink action 2                                                                 
Protecting frame from 00:0f:92:fa:4f:d5 to 00:0f:92:fa:4f:d2                                       
Checking tricky lengths of protected frame 114, 98                                                 
----------                                                                                         
SIV- Put AAD[3]:  hexdump                                                                          
0f 02 10 00 00 00 01 06 8c 12 98 24 b0 48 72 0c 70 44 44 4c                                        
39 30 30 2d 6a 65 66 66 71 08 00 00 00 00 00 00 00 00 75 16                                        
01 00 dd 5b b8 e9 7c 31 8f c2 87 cf d1 5d 58 b6 1e d8 8f 77                                        
17 09 2d 1a 00 01 18 ff 00 00 00 00 00 00 00 00 00 00 00 01                                        
00 00 00 00 00 00 00 00 00 00 3d 16 01 00 03 00 00 00 ff 00                                        
00 00 00 00 00 00 00 00 00 00 00 00 00 00                                                          
----------                                                                                         
                                                                                                   
tx_frame(0x41c9d8, 0x814a18, 254)                                                                  
tx frame (seq num=1536272752)                                                                      
----------                                                                                         
tx frame hexdump                                                                                   
d0 00 00 00 00 0f 92 fa 4f d2 00 0f 92 fa 4f d5 00 0f 92 fa                                        
4f d5 00 00 0f 02 10 00 00 00 01 06 8c 12 98 24 b0 48 72 0c                                        
70 44 44 4c 39 30 30 2d 6a 65 66 66 71 08 00 00 00 00 00 00                                        
00 00 75 16 01 00 dd 5b b8 e9 7c 31 8f c2 87 cf d1 5d 58 b6                                        
1e d8 8f 77 17 09 2d 1a 00 01 18 ff 00 00 00 00 00 00 00 00                                        
00 00 00 01 00 00 00 00 00 00 00 00 00 00 3d 16 01 00 03 00                                        
00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 8c 10                                        
67 98 0b 8f e9 a3 90 cd bb 81 f3 23 31 c4 a9 f2 86 79 2a b6                                        
0e 50 e3 50 f2 21 82 c2 fb ba 9e 67 70 af 18 2d e5 69 18 04                                        
1f fc 2d 63 a4 6f cf 6d ef d9 9a e8 04 e6 05 30 1d d4 88 30                                        
7e be 73 52 2a 58 9b fc 32 ae 94 28 2b 7b 5b 3e 52 ff 42 52                                        
9f d2 b1 00 11 69 3d 6d dd 0a a2 bd ee 18 6c 0c 38 80 6c 59                                        
13 b9 07 e5 cb 08 3c 91 68 d9 4f a5 9d 6f                                                          
----------                                                                                         
                                                                                                   
NL80211_CMD_TX_STATUS (1536272740.473665)                                                          
NL80211_CMD_FRAME (1536272740.473866)                                                              
----------                                                                                         
rx frame hexdump                                                                                   
d0 00 3c 00 00 0f 92 fa 4f d5 00 0f 92 fa 4f d2 00 0f 92 fa                                        
4f d2 a0 54 0f 02 10 00 00 00 01 06 8c 12 98 24 b0 48 72 0c                                        
70 44 44 4c 39 30 30 2d 6a 65 66 66 71 08 00 00 00 00 00 00                                        
00 00 75 16 01 00 b8 e9 dd 5b 7c 31 8f c2 87 cf d1 5d 58 b6                                        
1e d8 8f 77 17 09 2d 1a 00 01 18 ff 00 00 00 00 00 00 00 00                                        
00 00 00 01 00 00 00 00 00 00 00 00 00 00 3d 16 01 00 03 00                                        
00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 8c 10                                        
c0 5a 39 34 4d 4b 60 54 61 11 8e 9e 56 bb 35 f3 5a 10 49 d5                                        
6b be 70 0f 4a 7c bc f4 6a 7a 23 3d a8 59 8a f7 4f e9 88 16                                        
e1 84 ab 0c 59 20 c6 9b ae 40 94 71 d3 00 86 f7 15 17 f1 3c                                        
f5 45 16 62 5c 56 10 03 e6 23 47 ba 9c b2 e9 f6 85 66 ed 23                                        
66 09 a8 af 38 12 68 0c 60 5b 55 5a b0 fa 80 93 c3 cd 06 77                                        
c9 9a 33 cb bc 7a 9a b9 e5 66 07 89 fe a5                                                          
----------                                                                                         
                                                                                                   
Checking protection to 00:0f:92:fa:4f:d5 from 00:0f:92:fa:4f:d2                                    
Len checking cat-to-mic len:114 ampe ie full length: 98                                            
----------                                                                                         
SIV- Got AAD[3]:  hexdump                                                                          
0f 02 10 00 00 00 01 06 8c 12 98 24 b0 48 72 0c 70 44 44 4c                                        
39 30 30 2d 6a 65 66 66 71 08 00 00 00 00 00 00 00 00 75 16                                        
01 00 b8 e9 dd 5b 7c 31 8f c2 87 cf d1 5d 58 b6 1e d8 8f 77                                        
17 09 2d 1a 00 01 18 ff 00 00 00 00 00 00 00 00 00 00 00 01                                        
00 00 00 00 00 00 00 00 00 00 3d 16 01 00 03 00 00 00 ff 00                                        
00 00 00 00 00 00 00 00 00 00 00 00 00 00                                                          
----------                                                                                         
                                                                                                   
----------                                                                                         
AMPE IE:  hexdump                                                                                  
8b 60 00 0f ac 04 99 82 f7 a8 8f c8 e7 c1 7a a6 8d 13 79 11                                        
db 4c 2f b9 6f 01 fa 9a b6 4a 67 56 4b 8a ad 16 82 4e 39 d4                                        
19 3a 60 b6 5d bd 5f 7b e6 a6 a6 27 7a 67 bb 45 83 9d d7 9b                                        
39 34 eb c9 66 6a 99 ee 9e c5 66 84 ef 45 95 f1 8c 54 35 91                                        
22 56 af 0c 3c 6d 00 00 00 00 00 00 00 00 ff ff ff ff                                              
----------                                                                                         
                                                                                                   
----------                                                                                         
Received mgtk:  hexdump                                                                            
66 84 ef 45 95 f1 8c 54 35 91 22 56 af 0c 3c 6d                                                    
----------                                                                                         
                                                                                                   
TODO: return available peer link slots                                                             
Mesh plink (peer, state, llid, plid, event): 00:0f:92:fa:4f:d2 OPN-RCVD 23517 59832 4              
set plink state (seq num=1536272753)                                                               
----------                                                                                         
mtk context:  hexdump                                                                              
39 d4 19 3a 60 b6 5d bd 5f 7b e6 a6 a6 27 7a 67 bb 45 83 9d                                        
d7 9b 39 34 eb c9 66 6a 99 ee 9e c5 99 82 f7 a8 8f c8 e7 c1                                        
7a a6 8d 13 79 11 db 4c 2f b9 6f 01 fa 9a b6 4a 67 56 4b 8a                                        
ad 16 82 4e dd 5b b8 e9 00 0f ac 08 00 0f 92 fa 4f d2 00 0f                                        
92 fa 4f d5                                                                                        
----------                                                                                         
                                                                                                   
----------                                                                                         
mtk:  hexdump                                                                                      
b6 3d b2 0a 07 0b 1b b7 1c fc 6b e2 7c 07 fd 9a                                                    
----------                                                                                         
                                                                                                   
estab with 00:0f:92:fa:4f:d2                                                                       
set auth flag (seq num=1536272754)                                                                 
changing ht protection mode to: 0                                                                  
mesh plink with 00:0f:92:fa:4f:d2 established                                                      
set_mesh_conf(0x41c9d8, 1)                                                                         
set meshconf (seq num=1536272759)                                                                  
nlerror, cmd 18, seq 1536272758: Invalid argument                                                  
Mesh plink timer for 00:0f:92:fa:4f:d2 fired on state ESTAB                                        
Timeout for peer 00:0f:92:fa:4f:d2 in state 4                                                      
                                                                                                   
                                                                                                   
                                                                                                   
                                                                                                   
                                                       

Sept 25, 2018
IEEE80211_TX_CTL_USE_MINRATE looks mainly used for ieee80211_send_nullfunc() and ieee80211_send_4addr_nullfunc(), which are all IEEE80211_FTYPE_DATA, but should use basic rates. For mgt and ctl frames, this has no use. Use this flag to skip rate_control_apply_mask() for data frames. 

Use "tcpdump -i mon type mgt and not subtype beacon -env" on MP1 to observer HWMP frames. When MP2 sends MPREQ like this:

<7>[ 8081.920000] ath: phy0: transmitting packet, skb: 829e0780, priority=7, queue=0
<7>[ 8081.920000] ath: phy0: TXDP[3] = 316d680 (a316d680)
<7>[ 8081.920000] ath: phy0: TX complete: skb: 829e0780
<7>[ 8083.220000] ath: phy0: transmitting packet, skb: 8282b9c0, priority=7, queue=0
<7>[ 8083.220000] ath: phy0: TXDP[3] = 316d700 (a316d700)
<7>[ 8083.220000] ath: phy0: TX complete: skb: 8282b9c0
<7>[ 8084.620000] ath: phy0: transmitting packet, skb: 8282b600, priority=7, queue=0
<7>[ 8084.620000] ath: phy0: TXDP[3] = 316d780 (a316d780)
<7>[ 8084.620000] ath: phy0: TX complete: skb: 8282b600
<7>[ 8085.600000] ath: phy0: transmitting packet, skb: 838236c0, priority=6, queue=0
<7>[ 8085.600000] ath: phy0: TXDP[3] = 316d800 (a316d800)
<7>[ 8085.600000] ath: phy0: TX complete: skb: 838236c0

We see the priority is correct. But on the MP1 we see, with "tcpdump -i mon type mgt and not subtype beacon -env":

14:02:04.763719 4101742846us tsft 2461 MHz 11g/10Mhz -74dB signal 26.0 Mb/s MCS 3 20 MHz lon 
GI RX-STBC0 [bit 29] 0us BSSID:00:0f:92:fa:37:c3 DA:ff:ff:ff:ff:ff:ff SA:00:0f:92:fa:37:c3 Ac
tion: MeshAction HWMP                                                                        
14:02:06.882058 4103861159us tsft 2461 MHz 11g/10Mhz -74dB signal 26.0 Mb/s MCS 3 20 MHz lon 
GI RX-STBC0 [bit 29] 0us BSSID:00:0f:92:fa:37:c3 DA:ff:ff:ff:ff:ff:ff SA:00:0f:92:fa:37:c3 Ac
tion: MeshAction HWMP                                                                        
14:02:08.982072 4105961147us tsft 2461 MHz 11g/10Mhz -73dB signal 26.0 Mb/s MCS 3 20 MHz lon 
GI RX-STBC0 [bit 29] 0us BSSID:00:0f:92:fa:37:c3 DA:ff:ff:ff:ff:ff:ff SA:00:0f:92:fa:37:c3 Ac
tion: MeshAction HWMP                                                                        
14:02:11.202076 4108181161us tsft 2461 MHz 11g/10Mhz -74dB signal 39.0 Mb/s MCS 4 20 MHz lon 
GI RX-STBC0 [bit 29] 0us BSSID:00:0f:92:fa:37:c3 DA:ff:ff:ff:ff:ff:ff SA:00:0f:92:fa:37:c3 Ac
tion: MeshAction HWMP                                                                        
14:02:13.532112 4110511153us tsft 2461 MHz 11g/10Mhz -73dB signal 39.0 Mb/s MCS 4 20 MHz lon 
GI RX-STBC0 [bit 29] 0us BSSID:00:0f:92:fa:37:c3 DA:ff:ff:ff:ff:ff:ff SA:00:0f:92:fa:37:c3 Ac
tion: MeshAction HWMP

When using "iw wlan0 set mcast_rate 24" to set MP2 mcast rate, this bcast rate is also affected. See this table:
iw wlan0 set mcast_rate command			MP1 monitor captured rate
6						6.5 Mb/s MCS 0 
9						13.0 Mb/s MCS 1
12						19.5 Mb/s MCS 2
18						26.0 Mb/s MCS 3
24						39.0 Mb/s MCS 4
36						52.0 Mb/s MCS 5

Both encryption and non-encryption has the same symptom.

Sept 24, 2018
Run pMDDL2450 whole weekend with :
root@UserDevice:~# cat etc/modules.d/ath9k                                      
ath9k                                                                           
ath9k_common ampdu_factor_drv=0 	// 8KBytes AMPDU aggregation
for all AP, STA1 and STA2 and rts_threshold=-1. STA1 up 2 days, 15:44; STA2  up 2 days, 15:40 but AP  up 1 day, 15:41 looks like the AP has restarted so the test result is not reliable.

It happened again this time in AP side. RXORN jumps but RXLP stalls. 

============
pDDL Mesh, captured that some HWMP packets are sent at MCS rate instead of basic rates:

12:22:56.817999 1132394454us tsft 2461 MHz 11g/10Mhz -88dB signal 19.5 Mb/s MCS 2 20 MHz lon
 GI RX-STBC0 [bit 29] 0us BSSID:00:0f:92:fa:98:b8 DA:ff:ff:ff:ff:ff:ff SA:00:0f:92:fa:98:b8 
Action: MeshAction HWMP
        0x0000:  0d01 8225 0000 1fe5 0400 0000 0f92 fa98
        0x0010:  b85e 0500 00d0 0300 0000 0000 0001 0200
        0x0020:  0f92 fa37 c3a4 0300 004c 1004 001f 0500
        0x0030:  0000 0001 45d9 4628 240e 794a 5a6c d1
12:22:56.818808 6.0 Mb/s [bit 15] WEP Encrypted 221us BSSID:00:0f:92:fa:37:c3 DA:00:0f:92:fa
:98:b8 SA:00:0f:92:fa:37:c3 Action: Reserved(59) Act#4
        0x0000:  3b04 0020 0000 0000 0d01 831f 0000 1f00
        0x0010:  0f92 fa37 c3a5 0300 00d0 0300 0000 0000
        0x0020:  0000 0f92 fa98 b85e 0500 00
12:22:57.957318 [bit 15] 0us BSSID:00:0f:92:fa:37:c3 DA:ff:ff:ff:ff:ff:ff SA:00:0f:92:fa:37:
c3 Action: MeshAction HWMP
        0x0000:  0d01 8225 0000 1fc5 0400 0000 0f92 fa37
        0x0010:  c3a6 0300 00d0 0300 0000 0000 0001 0100
        0x0020:  0f92 fa98 b85e 0500 004c 1004 00cc 0400
        0x0030:  0000 0023 d8bc 0e6d 4044 c8
12:22:57.958523 1133534789us tsft 3.0 Mb/s 2461 MHz 11g/10Mhz -88dB signal [bit 29] WEP Encr
ypted 60us BSSID:00:0f:92:fa:98:b8 DA:00:0f:92:fa:37:c3 SA:00:0f:92:fa:98:b8 Action: Reserve
d(91) Act#8
        0x0000:  5b08 0020 0000 0000 0d01 831f 0000 1f00
        0x0010:  0f92 fa98 b85f 0500 00d0 0300 0000 0000
        0x0020:  0000 0f92 fa37 c3a6 0300 0020 2a78 b66c
        0x0030:  4725 1079 094d dd
12:22:59.697950 1135274402us tsft 2461 MHz 11g/10Mhz -88dB signal 19.5 Mb/s MCS 2 20 MHz lon
 GI RX-STBC0 [bit 29] 0us BSSID:00:0f:92:fa:98:b8 DA:ff:ff:ff:ff:ff:ff SA:00:0f:92:fa:98:b8 
Action: MeshAction HWMP
        0x0000:  0d01 8225 0000 1fe8 0400 0000 0f92 fa98
        0x0010:  b861 0500 00d0 0300 0000 0000 0001 0200
        0x0020:  0f92 fa37 c3a6 0300 004c 1004 0022 0500
        0x0030:  0000 00ee 694d 79ac 5544 dcf3 5c98 03
12:22:59.698750 6.0 Mb/s [bit 15] WEP Encrypted 221us BSSID:00:0f:92:fa:37:c3 DA:00:0f:92:fa
:98:b8 SA:00:0f:92:fa:37:c3 Action: Reserved(66) Act#4
        0x0000:  4204 0020 0000 0000 0d01 831f 0000 1f00
        0x0010:  0f92 fa37 c3a7 0300 00d0 0300 0000 0000
        0x0020:  0000 0f92 fa98 b861 0500 00
12:23:01.007324 [bit 15] 0us BSSID:00:0f:92:fa:37:c3 DA:ff:ff:ff:ff:ff:ff SA:00:0f:92:fa:37:
c3 Action: MeshAction HWMP
        0x0000:  0d01 8225 0000 1fc6 0400 0000 0f92 fa37
        0x0010:  c3a8 0300 00d0 0300 0000 0000 0001 0100
        0x0020:  0f92 fa98 b861 0500 004c 1004 00cd 0400
        0x0030:  0000 0026 0792 03fa 1379 79
12:23:01.008374 1136584657us tsft 3.0 Mb/s 2461 MHz 11g/10Mhz -87dB signal [bit 29] WEP Encr
ypted 60us BSSID:00:0f:92:fa:98:b8 DA:00:0f:92:fa:37:c3 SA:00:0f:92:fa:98:b8 Action: Reserve
d(95) Act#8
        0x0000:  5f08 0020 0000 0000 0d01 831f 0000 1f00
        0x0010:  0f92 fa98 b862 0500 00d0 0300 0000 0000
        0x0020:  0000 0f92 fa37 c3a8 0300 00c2 d6a6 2f9b
        0x0030:  d52a 45d8 7e71 f4
12:23:01.847397 [bit 15] 0us BSSID:00:0f:92:fa:37:c3 DA:ff:ff:ff:ff:ff:ff SA:00:0f:92:fa:37:
c3 Action: MeshAction HWMP
        0x0000:  0d01 8225 0000 1fc7 0400 0000 0f92 fa37
        0x0010:  c3a9 0300 00d0 0300 0000 0000 0001 0100
        0x0020:  0f92 fa98 b862 0500 004c 1004 00ce 0400
        0x0030:  0000 0058 c059 a5cc c51d 4d
12:23:02.167327 [bit 15] 0us BSSID:00:0f:92:fa:37:c3 DA:ff:ff:ff:ff:ff:ff SA:00:0f:92:fa:37:
c3 Action: MeshAction HWMP
        0x0000:  0d01 8225 0000 1fc8 0400 0000 0f92 fa37
        0x0010:  c3a9 0300 00d0 0300 0000 0000 0001 0200
        0x0020:  0f92 fa98 b862 0500 004c 1004 00cf 0400
        0x0030:  0000 0059 b9ae 543b ed5a 59
12:23:02.587328 [bit 15] 0us BSSID:00:0f:92:fa:37:c3 DA:ff:ff:ff:ff:ff:ff SA:00:0f:92:fa:37:
c3 Action: MeshAction HWMP
        0x0000:  0d01 8225 0000 1fc9 0400 0000 0f92 fa37
        0x0010:  c3aa 0300 00d0 0300 0000 0000 0001 0200
        0x0020:  0f92 fa98 b862 0500 004c 1004 00d0 0400
        0x0030:  0000 00ac 57d8 6227 76f6 66
12:23:02.588385 1138164663us tsft 3.0 Mb/s 2461 MHz 11g/10Mhz -90dB signal [bit 29] WEP Encr
ypted 60us BSSID:00:0f:92:fa:98:b8 DA:00:0f:92:fa:37:c3 SA:00:0f:92:fa:98:b8 Action: Reserve
d(101) Act#8
        0x0000:  6508 0020 0000 0000 0d01 831f 0000 1f00
        0x0010:  0f92 fa98 b864 0500 00d0 0300 0000 0000
        0x0020:  0000 0f92 fa37 c3aa 0300 00ea d98f fc99
        0x0030:  364e 0dfd be21 77

Sept 21, 2018
pMDDL2450, AP both tx/rx data. Interrupt RXORN (RxFIFO overrun) jumps but RXLP stalls. Some explaination:
ath%d: rx FIFO overrun; resetting  The receive FIFO in the hardware overflowed before the
     data could be transferred to the host.  This typically occurs because the hardware ran short
     of receive descriptors and had no place to transfer received data.  The driver will reset
     the hardware and continue.

Sept 20,2018
Installed Chrome browser Version 69.0.3497.100 (Official Build) (64-bit) but it is extremely slow. going to http://chrome://settings click show advanced settings... and "uncheck use hardware acceleration" solves this problem.

Sept 18,2018
Fedora13 has it's own VNC server application installed by default,  just like the vino in Ubuntu18.04. You can enable it by System--->Preferences--->RemoteDesktop to configure it. I have installed a separate TigerVNC server so that this default one should be disabled first.

[Jeff@DENG0080-2 ~]$ cat /etc/sysconfig/vncservers 
VNCSERVERS="1:Jeff"
VNCSERVERARGS[1]="-geometry 1024x768 -nolisten tcp -localhost no" // "-localhost no" should be removed otherwise this VNC server only accepts connection from 127.0.0.1. Other IP addresses are blocked. This is trick 1.

On Ubuntu18.04 when Remmina connects to the TigerVNC server on Fedora, should use 192.168.22.66:1 to specify the 1 display. If the ":1" is omitted it complains can not connect to the VNC server. This is trick 2.

And must use "vncpasswd" to setup a password this is trick3. 
Trick4 is the firewall in the Fedora13, use "sudo system-config-firewall" to disable the firewall to be able to connect to it. If you don't want to disable the whole firewall, you open 5900-5904 ports to make sure the VNC Viewer can access to it. "sudo /etc/rc.d/init.d/vncserver restart" to restart VNC server.

Use VIP2 hostapd package for nanocpu WPA2 authentication baseline.

Sept 14, 2018
Tried Appweb cross-compile in pddl-branch, created a suitable buildroot Makefile for it, 7.03, 5.62, 2.4, 3.4, 6.2 failed. 4.7 compiles for MIPS cross-compiling. 7.0.3 works on host Fedora13 machine.

Sept 12, 2018
https://wireless.wiki.kernel.org/en/developers/documentation/wireless-extensions : Linux Wireless-Extensions(WE or Wext). WE is being replaced by cfg80211+nl80211.
https://hewlettpackard.github.io/wireless-tools/Linux.Wireless.Extensions.html : This explains how WE was born. The wireless extensions have been implemented in three complementary parts. The first part is the user interface, a set of tools to manipulate those extensions. The second part is a modification of the Linux kernel to support and define the extensions. The third part is the hardware interface and is implemented in each network driver itself to map the extensions to the actual hardware manipulations. 

In both pDDL and pMDDL, iw wlan0 set mcast_rate 18 will change beacon rate to 18Mbps. No matter in WDS=1 or WDS=0 mode. Other Mgmt frames like ProbeResponse, AssoResponse, etc.. are not affected. Only beacon is affected.

In ath9k_beacon_generate(), printk("===MHX 1.0(%s) .idx=%d. basic_rates=0x%08x\n", __func__, ieee80211_tx_info *info->control.rates[0].idx, vif->bss_conf.basic_rates); When WDS=1, AP prints:
<0>[  387.020000] ===MHX 1.0(ath9k_beacon_generate) .idx=0. basic_rates=0x00000015                   
<0>[  387.120000] ===MHX 1.0(ath9k_beacon_generate) .idx=0. basic_rates=0x00000015                   
<0>[  387.220000] ===MHX 1.0(ath9k_beacon_generate) .idx=0. basic_rates=0x00000015                   
<0>[  387.320000] ===MHX 1.0(ath9k_beacon_generate) .idx=0. basic_rates=0x00000015                   
<0>[  387.430000] ===MHX 1.0(ath9k_beacon_generate) .idx=0. basic_rates=0x00000015                   
<0>[  387.530000] ===MHX 1.0(ath9k_beacon_generate) .idx=0. basic_rates=0x00000015                   
<0>[  387.630000] ===MHX 1.0(ath9k_beacon_generate) .idx=0. basic_rates=0x00000015                   
<0>[  387.730000] ===MHX 1.0(ath9k_beacon_generate) .idx=0. basic_rates=0x00000015                   
<0>[  387.840000] ===MHX 1.0(ath9k_beacon_generate) .idx=0. basic_rates=0x00000015                   
<0>[  387.940000] ===MHX 1.0(ath9k_beacon_generate) .idx=0. basic_rates=0x00000015

The rate is confirmed 6Mbps on the monitor interface of STA. In WDS=1 mode after wifi restart, the ieee80211_tx_info *info->control.rates[0].idx is always 0 (6Mbps). After command "iw wlan0 set mcast_rate 9", .idx=1 and 12Mbps(.idx=2), maxium is 36Mbps(.idx=5). In 36Mbps(.idx5) the beacon tx_rate changes to 36Mbps too. When having iperf traffic from AP->STA, the beacon rate is not affected by unicast data rates, eventhough control.rates[0].idx looks like used for unicast data frames too. WDS=0 not verified but supposed to be the same. 

So what does "iw wlan0 set mcast_rate 9" do? It mainly do memcpy(ieee80211_sub_if_data *sdata->vif.bss_conf.mcast_rate, rate, sizeof(int) * IEEE80211_NUM_BANDS); Then ath9k_beacon_generate-->ieee80211_beacon_get()->ieee80211_beacon_get_tim()-->__ieee80211_beacon_get(), the created  ieee80211_tx_rate_control txrc.bss_conf = &sdata->vif.bss_conf; So the ieee80211_tx_rate_control structure.bss_conf points to the .bss_conf of vif structure, so is bss_conf.mcast_rate. In rate_control_send_low(), mcast_rate = txrc->bss_conf->mcast_rate[sband->band]; is used to overwrite the ieee80211_tx_info *info->control.rates[0].idx = mcast_rate - 1; This finally sets the mcast frame tx_rate. This ieee80211_tx_info *info->control.rates[0].idx comes from the skb and will be shared by ath9k_beacon_generate() so that the beacon tx_rate follows the mcast frame rates.

I think this is is what mac80211 is designed to do. In generic WiFi, the mcast rate is not changable so that mcast_rate = txrc->bss_conf->mcast_rate[sband->band]; is always 0 that is 6Mbps. If in generic WiFi the mcast rate is changed, I believe the Beacon tx-rate will follow too.

For mcast and bcast and rc_no_data_or_no_ack_use_min() frames, rate_control_send_low() returns TRUE so that the data frames rates are not affected. For those basic rates frames, the rate_control_send_low() logic works and changes the info->control.rates[0].idx. 

The question left is that even though "iw wlan0 set mcast_rate 9" affects mcast data tx_rate and Beacon tx_rate, but it doesn't affect the ProbeResponse, AssocResponse, etc. mgmt frames. Maybe those are transmitted by ath9k_hw_puttxbuf() directly and do not follow this path???


Sept 11,2018
nanoIP compile in Fedora13 will complain getline() function duplicated defiled. Need to comment:
/* Like `getdelim', but reads up to a newline.

   This function is not part of POSIX and therefore no official
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
   therefore not marked with __THROW.  */
extern _IO_ssize_t getline (char **__restrict __lineptr,
                            size_t *__restrict __n,
                            FILE *__restrict __stream) __wur;
#endif

In /usr/include/stdio.h.

Sept 10, 2018
Run a pair of AlphaK for 2 days and 22:45, signal avg -62 and -70 dBm. No disconnection happened.

Sept 7,2018
Tried to install SmartCVS but looks like the Java10 in the Ubnt18.04 is too new to be compatible with Java8. In old Fedora Java1.8 works for Smartcvs7.1.6.

Sept 5, 2018
Use ssh to execute a remote command with GUI:
ssh -C -X jli@192.168.22.197 "meld ~/project/work/pwii/package/kernel/mac80211/Makefile.mac80211_ddl2 ~/project/work/pmddl/alpha-k/package/kernel/mac80211/Makefile.mac80211_ddl2"

Aug 31, 2018
pX2, Repeater mode. The repeater HAS to connect to an root AP before it can beacon. Remove the start_disable option for Hostapd and add scan_freq=2462 for Wpa_supplicant still don't work.  From the kmsg of Repeater, "phy0: AP (Disable) nexttbtt: 2662400 intval: 12800 conf_intval: 100" disables beaconing. Look further into a wpa_supplicant parameter : "-H = connect to a hostapd instance to manage state changes ". Remove this "-H" option of wpa_supplicant in repeater mode and it beacons before connecting to a AP.

In REPEATER mode, 2 key points : 1) Repeater channel must be set to same as AP channel; 2) WDS=1 all or WDS=0 for all 3. Mixed mode not tested.

Aug 29, 2018
Build G1 VIP4G on Ununtu18.04
In Ubuntu18.04, use PWii's scripts/config to replace VIP4G's whole directory. "Considering target file 'scripts/config/mconf_check'" issue is solved. But this introduces more errors in packages' Makefile. Copy include/ directory doesn't help.

1. Use PWii's scripts/ include/ Makefile and rules.mk, then make prereq can success. But when make menuconfig more errors pop up. The Config.in files in many packages have Kconfig language syntax errors for example "depends on". Fix syntax errors in each package to comply with newer Kconfig language.

$(info "===MHX1.0=======var=${OPENWRT_BUILD}") # Makefile's printf like Shell's echo command.

2. tools/ : The packages under this dir are mainly for host. Copy from pwii's tools/ directory if compile error. Remove ubifs build for tools/mtd-utils package.

3. toolchain/ : toolchain-mips_mips32_gcc-4.4.3_uClibc-0.9.30.1 doesn't compile. G2, G3, G4 all use uClibc-0.9.33.2 with gcc4.8-linaro (target-arm_v5te_uClibc-0.9.33.2_eabi ,target-mips_34kc_uClibc-0.9.33.2), G5 uses musl libc. Tried different schme toolchain-mips_mips32_gcc-4.4.3_glibc-2.7 still not working. Copy G3 PWii's toolchain/gcc/ and toolchain/uClibc/ and toolchain/binutils/ to replace G1 VIP4G's. This upgrades G1 to gcc4.8-linaro+uClibc0.9.33.2. And then use PWii's toolchain/gmp, tools/mpfr and tools/mpc and tools/gmp. Doesn't help. 
Tried to use PWii's whole toolchain/ directory. Same problem about the mpfr, gmp and mpc.	

Aug 24,2018
AR9331, ar9341 (and maybe ar9344 too---yes ar9344 verified works too) Uboot: 

   transmit "tftpboot 81000000 u-boot.bin^M"
   waitfor "transferred"

   transmit "erase 9f000000 +50000^M"
   waitfor "Erased 2 sectors"

   transmit "cp.b 81000000 9f000000 50000^M"
   waitfor "done"


Aug 23, 2018
G3 and all its branches are done.
Try G1's vip4g. Too many problems. Suspend it. Try G2 same issue with G1:
1.
/usr/bin/x86_64-linux-gnu-ld: i386 architecture of input file `conf.o' is incompatible with i386:x86-64 output
zconf.tab.o: In function `zconflex':
zconf.tab.c:(.text+0x2495): undefined reference to `kconf_id_lookup'
zconf.tab.c:(.text+0x25e7): undefined reference to `kconf_id_lookup'
collect2: error: ld returned 1 exit status


解決"undefined reference to kconf_id_lookup"

vim scripts/config/lex.zconf.c

+extern struct kconf_id * kconf_id_lookup(register const char *str, register unsigned int len);
YY_DECL
{
register yy_state_type yy_current_state;

2. 
make[1]: Entering directory '/home/jli/project/work/g2/ipn4gii/scripts/config'
In file included from /usr/include/ctype.h:25:0,
                 from zconf.tab.c:147:
/usr/include/features.h:424:12: fatal error: sys/cdefs.h: No such file or directory
 #  include <sys/cdefs.h>

sudo apt-get install libc6:i386 still doesn't solve this. sudo apt-get install libc6-dev-i386 creates "/usr/share/doc/lib/libc6-dev-i386/ libc6-dev-x32/  libc6-i386/     libc6-x32/" and solves this issue.

3. Actually, step 1 and 2 are because of the .o file and executable files in scripts/config are in CVS. To make menuconfig, all of them must be removed and rebuilt. Only need to solve the "undefined reference to kconf_id_lookup" issue by adding an "extern"

4. tools/pkg-config can't compile. Replaced with G5's pkg-config-0.29.2 version compiles.

5. need  tools/automake/patches/102-microhard-automake-backport-perl-522.patch

6. tools/mtd-utils/ : need PWii's patch : 137-no_extern_inline.patch, 200-libubigen-add-ubigen_write_terminator-function.patch and 201-ubinize-add-terminator-support.patch.

7. tools/squashfs4 : need 180-openbsd_compat.patch, 190-no_nonstatic_inline.patch from PWii.

(checked Fedora13 build on target ok)


8. cfns.gperf:101:1: error: 'const char* libc_name_p(const char*, unsigned int)' redeclared inline with 'gnu_inline' attribute. Need 922-microhard-gcc73-support.patch for toolchain/gcc/patches/4.8-linaro.
9. /home/jli/project/work/g2/ipn4gii/build_dir/target-arm_v5te_uClibc-0.9.33.2_eabi/linux-sama5d35/u-boot-at91/tools/ubparams terminated Aborted (core dumped). Need to increas the buffer like this:
jli@DENG-JEFFL:~/project/work/g2/ipn4gii$ cat target/linux/sama5d35/image/u-boot/patches/357-microhard-putc.patch Index: u-boot-at91/drivers/serial/atmel_usart.c
===================================================================
--- u-boot-at91.orig/drivers/serial/atmel_usart.c
+++ u-boot-at91/drivers/serial/atmel_usart.c
@@ -116,8 +116,10 @@ void serial_putc(char c)
        c='*';
        else
        c='\0';
-       while (!(readl(&usart->csr) & USART3_BIT(TXRDY)));
-	   writel(c, &usart->thr);
+	   if (c != '\0') {
+		   while (!(readl(&usart->csr) & USART3_BIT(TXRDY)));
+		   writel(c, &usart->thr);
+	   }
    }
 #else
 	if (c == '\n')
Index: u-boot-at91/tools/ubparams.c
===================================================================
--- u-boot-at91.orig/tools/ubparams.c
+++ u-boot-at91/tools/ubparams.c
@@ -137,7 +137,7 @@ int main(void)
 	env_t *envptr, *source;
 	unsigned char *dataptr;
 	FILE *params;
-	char env_data[256];
+	char env_data[256 * 1024];		// Increase buffer size for 64-bit host machine.
 	int  env_pos = 0;
 	int idx;

10. /package/glib2 : gdate.c:2497:7: error: format not a string literal, format string not checked [-Werror=format-nonliteral]
       tmplen = strftime (tmpbuf, tmpbufsize, locale_format, &tm);
       ^~~~~~
For GCC>6 need to see https://github.com/widora/openwrt_widora/issues/12. Use #pragma GCC diagnostic push #pragma GCC diagnostic ignored "-Wformat-nonliteral" #pragma GCC diagnostic pop. Found a solution is to change /package/glib2/Makefile, add :
PKG_USE_MIPS16:=0

HOST_BUILD_DIR:=$(BUILD_DIR_HOST)/glib-$(PKG_VERSION)
HOST_CFLAGS += "-Wno-error=format-nonliteral"		// remove too tight warning check for gcc > 6.

11. Can't use 'defined(@array)' (Maybe you should just omit the defined()?) at kernel/timeconst.pl line 373.将kernel/timeconst.pl中第373行的defined()去掉只留下@val就可以了

Aug 22,2018
Default Meld in Ubuntu18.04 has no CVS support. KDiff3 doesn't work as well as meld. Install synaptic package manager but the ForceVersion is greyed out and can not force Meld to <3.16. 

For the IDE, SUblime and Bluefish don't have connection to CVS. Looks like SlickEdit is still the best.

Aug 21, 2018
Try to git clone G5 code on the new machine. 
jli@DENG-JEFFL:~/project/work/g5$ pwd
/home/jli/project/work/g5
jli@DENG-JEFFL:~/project/work/g5$ git clone git@gitlab.microhardcorp.com:MHDevelopers/mt7621_k4_9.git

In the new Unt machine do "ssh-keygen -t rsa -C jli@microhardcorp.com -b 4096" and upload the  ~/.ssh/id_rsa.pub to the GitLab WebUI. Then the git clone command works.

Compile the G5 in Ubuntu18.04:
1. G5 is using automake1.15 instead of automake-1.11.6 used in G4 Alpha-K. So warning : WARNING: 'makeinfo' is missing on your system. sudo apt-get install texinfo works.
2. package/utils/e2fsprogs doesn't compile. Current one is 1.43.1. Use the OpenWrt trunk latest v1.44.3 in Fedora13 and it compiled. But the 1.44.3 still doesn't compile in Ubuntu18.04 because of copy_file_range() function. This package is actually in tools/e2fsprogs/. This is because Ununtu18.04 glibc has already defined copy_file_range() function but in old glibc of Fedora13 doesn't define it.
3. WARNING: 'aclocal-1.15' is missing on your system. : sudo apt-get install automake. still doesn't work. Don't use QUILT=1 in making looks solve this issue.

G5 compile in Ubuntu18.04 is good and uploaded it test ok.

Aug 20, 2018
Test the patch created in the Ubuntu18.06 in the old Fedora13 environment. Use make dirclean to clean up the toolchains. 102-microhard-automake-backport-perl-522.patch and 922-microhard-gcc73-support.patch work in the Fedora13. Built a image and uploaded to AlphaK it worked well.

Aug 16, 2018
Install Ubuntu18.04 Bionic Beaver.
1. sudo apt install openssh-server. Install sshd to remote login.
2. apt install make, apt install make-guile, apt install g++.
3. sudo apt install libncurses5-dev, sudo apt-get install zlib1g-dev. sudo apt-get install gawk.  sudo apt install git, sudo apt install subversion.
4. sudo apt install python-minimal. Install old python2. 
5. From this on, make menuconfig should work.

6. jli@DENG-JEFFL:~/project/work/pmddl/alpha-k$ /home/jli/project/work/pmddl/alpha-k/staging_dir/host/bin/automake --help
Unescaped left brace in regex is illegal here in regex; marked by <-- HERE in m/\${ <-- HERE ([^ \t=:+{}]+)}/ at /home/jli/project/work/pmddl/alpha-k/staging_dir/host/bin/automake line 4160.
jli@DENG-JEFFL:~/project/work/pmddl/alpha-k$ 
This perl script doesn't run. This is because Ubuntu18.04 uses Perl5.26. See "automake: Backport perl 5.22 fix". In sub substitute_ac_subst_variables ($) in staging_dir/host/bin/automake, change to "$text =~ s/\$[{]([^ \t=:+{}]+)}/substitute_ac_subst_variables_worker ($1)/ge;"

7. With host GCC6+, target toolchain gcc-linaro-4.8-2014-04 has libc_name_p issue. Add patch toolchain/gcc/patches/4.8-linaro/922-microhard-gcc73-support.patch.
8. make package/system/ubox/compile V=99 first, because backupconfig package has dependency on it. This is a depencency issue.
9. vi /home/jli/project/work/pmddl/alpha-k/build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/u-boot-ar9341-alpha/u-boot-1.1.4/include/config.h, remove "-e", which is created by package/boot/uboot-ar9344-mhs/src/Makefile.
[Aug 27, 2018] : Removing -e doesn't work for Fedora13. The root cause is that the 2 bashes behave differently so does echo command. In Ubundu1804:
jli@DENG-JEFFL:~/project/work/pmddl/pmddl2450$ bash -c 'echo -ne "hello\n"'
bash -c 'echo -ne "hello\n"'
hello
But in Fedora 13:
[Jeff@DENG0080-2 ~]$ bash -c 'echo -ne "hello\n"'
hello
Need to tweak G4's package/boot/uboot-ar9344-mhs/src/Makefile to match different bashes. For all the strings, wasp_str,ar934x_common_str,alpha_str, and mhx344_str, must NOT use @echo. Must use @/bin/echo to specify the echo command. Change "@echo -e $(wasp_str) >> include/config.h" to "@/bin/echo -e $(wasp_str) >> include/config.h" then both Ubuntu1804 and Fedora13 work well.

10. Install Java. sudo apt install default-jre, sudo apt install default-jdk. After this installation, "make package/boot/uboot-ar9344-mhs/compile V=99" should success.
11. libcli package should be built manually separately: make package/libs/libcli/compile V=99. This maybe a depencency issue too. Also this exists in old host machines.
12. When compiling  package/libs/libnetfilter-conntrack/, error "configure: error: Package requirements (libnfnetlink >= 1.0.0) were not met:". Manually make package libnfnetlink first by "make package/libs/libnfnetlink/compile V=99" then package libnetfilter-conntrack compile successfully. This is a depencency issue.
13. When compiling package/libs/openssl/Makefile, it depends on package/libs/zlib. Manually " make package/libs/zlib/compile V=99". This is a depencency issue. openssl package has a explicit "DEPENDS:=+zlib" in its Makefile but why zlib is not compiled ahead???
14. When compiling /package/network/config/firewall, error:
/home/jli/project/work/pmddl/alpha-k/build_dir/target-mips_34kc_uClibc-0.9.33.2/firewall-2014-04-14/iptables.h:22:29: fatal error: libiptc/libiptc.h: No such file or directory
 #include <libiptc/libiptc.h>

Manually "make package/network/utils/iproute2/compile V=99" to create libiptc.h first. Still same error. Manually "make package/network/utils/iptables/compile V=99" then successful.
This is a depencency issue.

15. Missing ./staging_dir/host/bin/opkg executable. Don't know why. Copy an old opkg binary from old machine doesn't work because old machine is 32-bit and that binary doesn't run on 64-bit machine. ./build_dir/host/opkg-9c97d5ecd795709c8584e972bfdf3aee3a5b846d/src/opkg-cl is supposed to be there but missing. The host side opkg just doesn't compile. Don't know why. Just borrowed Ubuntu 16.04 binary.

16. The generated encrypted f/w pMDDL900-crpd-v1_4_0-r1011-1-ubuntu1804-64-gcc73.bin  can not be used. The uncompressed is working well. System-upgrade.sh:
 openssl des3 -d -k "$(cat /rom/etc/cryptedbin | sed 's/CoziH/34065/')" -in $FORM_upgradefile -out ${FORM_upgradefile}.decrypt fails:
root@UserDevice:~# openssl des3 -d -k "$(cat /rom/etc/cryptedbin | sed 's/CoziH/34065/')" -in  tmp/pMDDL900-crpd-v1_4_0-r1011-1-ubuntu1804-64-gcc73.bin  -out /tmp/1.decrypt
bad decrypt                                                                               
2010727496:error:06065064:lib(6):func(101):reason(100):NA:0:         

To solve this, need to manually specify the md method to sha256 like this:
root@UserDevice:~# openssl des3 -md sha256 -d -k "$(cat /rom/etc/cryptedbin | sed 's/CoziH/34065/')" -in  tmp/pMDDL900-crpd-v1_4_0-r1011-1-ubuntu1804-64-gcc73.b in  -out /tmp/1.decrypt  
This works fine. This means in Ubuntu18.04(OpenSSL 1.1.0g  2 Nov 2017), the default md is sha256 while the old host machine (OpenSSL 1.0.0d-fips 8 Feb 2011) use md5 as default. 

PS: IN Aug 24,2018, tested u-boot-ar9341-alpha-1.1.4-ubuntu-1804-64-gcc73.bin on Alpha-K and worked well.

Aug 9, 2018
Test newer h/w version Alpha-K cards. Single antenna.
ht_info->ampdu_factor		Average A-MPDU length	Signal		TCP T/P
IEEE80211_HT_MAX_AMPDU_64K	9.3			-53		14.8M
IEEE80211_HT_MAX_AMPDU_16K	5.8			-59		15.4M

In ar9341, the difference is not as significant as in ar9331. The increase of t/p is only about 5% here. Maybe in pDDL900 a connector is used while pMDDL900 removes that connector.

Aug 7, 2018
│ │       < > ath10k-firmware-qca988x.............. ath10k firmware for QCA988x devices │ │  // Microhard default f/w for 11AC wifi card. qam256 not good.
  │ │       <*> ath10k-firmware-qca988x-ct... ath10k CT 10.1 firmware for QCA988x devices 	// Compex suggested to try CT f/w.


Download some CT ath10k f/w from https://www.candelatech.com/ath10k-10.4.php#config. The latest firmware-2-ct-non-commercial.bin limit the Tx rate to MCS4 and can't be higher in 1 and 2 antenna(s). 3 antennas can reach upto 1170Mbps(80MHz VHT MCS8) looks no issue.

Aug 3, 2018
Using 4-address for AP and client mode

In some situations it might be useful to run a network with an Access Point and multiple clients, but with each client bridged to a network behind it. For this to work, both the client and the AP need to transmit 4-address frames, containing both source and destination MAC addresses. 4-address mode is how OpenWrt supports WDS mode for mac80211 drivers, that is if you enable wds option on your OpenWrt OpenWrt wireless configuration you will end up using 4-address mode. 4-address mode is not compatible with other WDS implementations, ie, you'll need all endpoints using this mode in order for WDS to work appropriately. 

On the AP side you can enable 4-address frames for individual clients by isolating them in separate AP VLANs which are configured in 4-address mode. Such an AP VLAN will be limited to one client only, and this client will be used as the destination for all traffic on its interface, regardless of the destination MAC address in the packet headers. The advantage of this mode compared to regular WDS mode is that it's easier to configure and does not require a static list of peer MAC addresses on any side. 4-address mode is incompatible with WDS. 

In AP(wds=1, 4addr mode):
For non-wds STA:
=MHX1.0(ieee80211_deliver_skb)sdata->vif.type=00000003, sdata=8f572480, flags=00000029,sdata->u.vlan.sta=  (null)	// NL80211_IFTYPE_AP, IEEE80211_SDATA_IN_DRIVER|IEEE80211_SDATA_DONT_BRIDGE_PACKETS|IEEE80211_SDATA_ALLMULTI. Note: non-wds shares same sdata with AP (sdata=8f572480). So shares the flags. 
For wds STA:
=MHX1.0(ieee80211_deliver_skb)sdata->vif.type=00000004, sdata=8e065480, flags=00000001,sdata->u.vlan.sta=8fef6000	// NL80211_IFTYPE_AP_VLAN. Create a separate sdata and has different flags.
[Note] Each STA has its own sdata structure stored in AP. AP has its own sdata for itself too. So there are 3 sdata in AP. AP's own sdata is like:
 =MHX3.1(ieee80211_change_bss) ap_isolate=1, sdata=8f572480, flags=00000029	// Note: non-wds STA shares same sdata with AP (sdata=8f572480)


Aug 1, 2018
Airtime Fairness makes fast devices even "faster" and slow devices even "slower". Airtime Fairness gives equal amounts of air time (instead of equal number of frames) to each client regardless of its theoretical data rate. This will ensure higher download speed to latest devices when slower devices are connected to the same AP.

July 31,2018
G5 WiFi issues:
1. RTS setting not working: .rts and .rtsoff. Use "iw phy0 set rts off/2345" works. Use "rts_threshold=-1" in hostapd config file works too.
2. Fragment setting not working : Neithter "iw phy0 set frag 1023" nor the "fragm_threshold=1023" in hostapd config file work. The driver doesn't support. In drivers/net/wireless/ath/ath10k/mac.c:
static int ath10k_mac_op_set_frag_threshold(struct ieee80211_hw *hw, u32 value)
{
        /* Even though there's a WMI enum for fragmentation threshold no known
         * firmware actually implements it. Moreover it is not possible to rely
         * frame fragmentation to mac80211 because firmware clears the "more
         * fragments" bit in frame control making it impossible for remote
         * devices to reassemble frames.
         *
         * Hence implement a dummy callback just to say fragmentation isn't
         * supported. This effectively prevents mac80211 from doing frame
         * fragmentation in software.
         */
        return -EOPNOTSUPP;
}
This fixes Tx becoming broken after settingfragmentation threshold. Checked the latest v4.18-rc7 mailline Linux remains the same code.

3. ap_isolation control doesn't work.
Looked through G5 code. With AP WDS=1 and 0. 2 PWii STAs.
WebUI  			UCI 				var/run/hostapd-phy0.conf	sys/devices/virtual/net/br-lan/brif/wlan0/hairpin_mode	PWii(STA)-PWii(STA) ping
AP Isolation ON		default_radio0.isolate='1'	ap_isolate=1				0						broken
AP Isolation Off	default_radio0.isolate='0'	ap_isolate=1				1						OK
Looks like hostapd doesn't control the isolation but by the hairpin_mode.
Only when both STAs' WDS=0, the AP isolation works fine. If there is a WDS station connected to AP, the AP isolation doesn't block, ping always success. G5 AP with other 2 G5 STAs gets same result. So the isolation only works for ALL NON-WDS stations. If there is even one WDS station, isolation doesn't work.

Replace the G5 AP with a PWii AP. Same result that WDS stations can not be isolated. For all non-WDS stations, this feature works properly. But PWii AP doesn't use the hairpin_mode, it uses the hostapd ap_isolate=1 method to achieve the same result.

Is it possible STA1 directly send frames to STA2? Set both STAs WDS=1 and use monitor interface on AP. When STA1 ping STA2, the ICMP Rreq send to AP first and then AP relay this ICMP Req to STA2. Reverse ICMP Resp the same. So on AP's monitor interface I see 2 ICMP Reqs and 2 ICMP Resps for each ping. So AP always relay the STAs' traffic. This is AP's capture:

19:35:46.867894 1602791933us tsft 2462 MHz 11g -52dB signal 26.0 Mb/s MCS 3 20 MHz lon GI RX-STBC0 [bit 20] 48us CF +QoS RA:00:0f:92:fe:02:a8 TA:04:f0:21:3b:22:8a DA:00:0f:92:06:51:1e SA:00:0f:92:06:51:6d LLC, dsap SNAP (0xaa) Individual, ssap SNAP (0xaa) Command, ctrl 0x03: oui Ethernet (0x000000), ethertype IPv4 (0x0800): (tos 0x0, ttl 64, id 59170, offset 0, flags [DF], proto ICMP (1), length 84)                  
    192.168.168.167 > 192.168.168.168: ICMP echo request, id 48452, seq 0, length 64                     // STA1(228a) to AP(02a8)

19:35:46.868459 [bit 15] 0us CF +QoS RA:04:f0:21:3b:26:69 TA:00:0f:92:fe:02:a8 DA:00:0f:92:06:51:1e SA:00:0f:92:06:51:6d LLC, dsap SNAP (0xaa) Individual, ssap SNAP (0xaa) Command, ctrl 0x03: oui Ethernet (0x000000), ethertype IPv4 (0x0800): (tos 0x0, ttl 64, id 59170, offset 0, flags [DF], proto ICMP (1), length 84)                                                                                                      
    192.168.168.167 > 192.168.168.168: ICMP echo request, id 48452, seq 0, length 64                     // AP(02a8) to STA2(2669)

19:35:46.870552 1602794601us tsft 2462 MHz 11g -52dB signal 26.0 Mb/s MCS 3 20 MHz lon GI RX-STBC0 [bit 20] 48us CF +QoS RA:00:0f:92:fe:02:a8 TA:04:f0:21:3b:26:69 DA:00:0f:92:06:51:6d SA:00:0f:92:06:51:1e LLC, dsap SNAP (0xaa) Individual, ssap SNAP (0xaa) Command, ctrl 0x03: oui Ethernet (0x000000), ethertype IPv4 (0x0800): (tos 0x0, ttl 64, id 42150, offset 0, flags [none], proto ICMP (1), length 84)                
    192.168.168.168 > 192.168.168.167: ICMP echo reply, id 48452, seq 0, length 64                       // STA2(2669) to AP(02a8)

19:35:46.871086 [bit 15] 0us CF +QoS RA:04:f0:21:3b:22:8a TA:00:0f:92:fe:02:a8 DA:00:0f:92:06:51:6d SA:00:0f:92:06:51:1e LLC, dsap SNAP (0xaa) Individual, ssap SNAP (0xaa) Command, ctrl 0x03: oui Ethernet (0x000000), ethertype IPv4 (0x0800): (tos 0x0, ttl 64, id 42150, offset 0, flags [none], proto ICMP (1), length 84)                                                                                                    
    192.168.168.168 > 192.168.168.167: ICMP echo reply, id 48452, seq 0, length 64                       // AP(02a8) to STA1(22a8)

19:35:47.105410 [bit 15] 0us CF +QoS RA:04:f0:21:3b:26:69 TA:00:0f:92:fe:02:a8 DA:01:00:5e:00:00:01 SA:00:0f:92:02:a8:35 LLC, dsap SNAP (0xaa) Individual, ssap SNAP (0xaa) Command, ctrl 0x03: oui Ethernet (0x000000), ethertype IPv4 (0x0800): (tos 0xc0, ttl 1, id 0, offset 0, flags [DF], proto IGMP (2), length 32, options (RA))                                                                                            
    0.0.0.0 > 224.0.0.1: igmp query v2                                                                   

19:35:47.491296 1603414872us tsft 1.0 Mb/s 2462 MHz 11g -73dB signal [bit 29] 314us CF +QoS DA:e4:95:6e:4
b:fc:91 BSSID:10:78:5b:cd:6b:82 SA:10:78:5b:cd:6b:82           


July 30, 2018
One Compex11ac card, working in 11na mode, AP; 2 same STAs. In HT20 mode (not in VHT40 and VHT80. Pushing simultaneous 2 UDP streams to 2 STAs and a standalone sniffer only captures a LOT of RTS sent from AP to both 2 STAs. STAs seem not responding CTS. On STA monitor interface RTS is received but no CTS sent back to AP. This causes connection drops.

On AP use "iw phy0 set rts off" command to turn off RTS/CTS protection and this issue is gone. The default in BulletAC was set to about 2k.

July 27, 2018
Use Compex WLE600 11ac card as AP and 2 WLE900 as STAs. With hwmode=11a, htmode=VHT40 or VHT80, simultaneously pushing 2 IPerf UDP streams to 2 STAs has no problem. But with htmode=HT20, simultaneous push causes link drops.

Jul 25, 2018
Change ht_info->ampdu_factor = IEEE80211_HT_MAX_AMPDU_64K(default) to others. AP=VIP4g(AR9220ng), STA=BulletPlus. Tx fixed rate=MCS7. STA shows signal avg=-68dBm.

ht_info->ampdu_factor					AP->STA TCP T/P		phy0/ath9k/recv CRC ERR	
IEEE80211_HT_MAX_AMPDU_64K(3)					17M			Delta=1400/s
IEEE80211_HT_MAX_AMPDU_32K(2)					18M			Delta=1500/s
IEEE80211_HT_MAX_AMPDU_16K(1)					26.3M			Delta=1200/s
IEEE80211_HT_MAX_AMPDU_8K(0)					24.7M			Delta=1000/s

This shows similar result of pDDL900/1800 where the lower aggregation length had higher T/P. The benefit of longer agregation is compromised by the higher CRC errors.

When using IEEE80211_HT_MAX_AMPDU_16K(1) in a BulletPlus, test with a CompexAC cars AP of G5. AP--->STA, Signal avg on receiver is -56dBm.
Fixed AP TX Rate	STA's statistics/dot11FCSErrorCount	TCP T/P		Comments
MCS7				Delta=100/Sec		   	35.8M		Compared with MAX_AMPDU_64K(3), t/p increases 33%
MCS6				Delta=50/Sec		   	32.5M		Compared with MAX_AMPDU_64K(3), t/p increases 14%
MCS5				Delta=30/Sec		   	30.7M		Compared with MAX_AMPDU_64K(3), t/p same
MCS4				Delta=1/Sec		   	25M		Compared with MAX_AMPDU_64K(3), t/p decreases 4%

Jason reports his test pX2-VIP4G, and pX2-CompexAC are all increased to about 42Mbps and stay at MCS7. 

Looks like ar9331 has hardness to receive high-density aggregate frames.

Jul 24, 2018
G5 with CompexAC card as AP. BulletPlus as STA. Push data AP--->STA. Receiver STA signal avg=-47dBm.
Fixed AP TX Rate	STA's statistics/dot11FCSErrorCount	TCP T/P
MCS7				Delta=1300/Sec		   	27M
MCS6				Delta=1100/Sec		   	28.4M
MCS5				Delta=600/Sec		   	30.1M
MCS4				Delta=6/Sec		   	26.1M



    AP                                                    STA                                                    T/P
    pX2                                                   pX2                                                     Max 57Mbps
    Compex AR9220 ng card                                 pX2                                                     Max 29Mbps
    Compex 11ac card                                      pX2                                                     Max 28Mbps
    Compex 11ac card(ng mode)                             Compex 11ac card(ng mode)                               Max 52Mbps

In pX2->pX2 test at MCS7, the receiver CRC ERR is only about 50/s. 

Jul 20, 2018
So far has seen Compex 11AC card issues:
1. VHT : QAM256 doesn't work (MCS8/9)
2. 11ng mode HT: MCS5/6/7 low t/p.
3. Coexisting issue : Use 11AC as AP and one pX2, one 11AC as clients. UDP Iperf to 2 clients will stuck the traffic.
4. Not specific to 11AC, but the WiFi mechanism : When there is 1 STA has poor connection, all other STAs are affected because of too much retry to this poor STA.

Jul 12, 2018
G5 11AC card, AP->STA unit-to-unit iperf : iperf -c 192.168.168.2 -i 2 -l 1024k -w 1024k -t 90.


AP Rx Rate						STA Rx Rate						T/P	Comment
1170.0 MBit/s VHT-MCS 8 80MHz short GI VHT-NSS 3	1300.0 MBit/s VHT-MCS 9 80MHz short GI VHT-NSS 3	119M	CPU idle >70% both sides, higher than below(50%).
540.0 MBit/s VHT-MCS 8 40MHz short GI VHT-NSS 3		600.0 MBit/s VHT-MCS 9 40MHz short GI VHT-NSS 3		220M

Use "wifi down; iw phy phy0 set antenna 0xXX" to control chain masks to 2x2:
866.7 MBit/s VHT-MCS 9 80MHz short GI VHT-NSS 2		866.7 MBit/s VHT-MCS 9 80MHz short GI VHT-NSS 2		201M
400.0 MBit/s VHT-MCS 9 40MHz short GI VHT-NSS 2		400.0 MBit/s VHT-MCS 9 40MHz short GI VHT-NSS 2		202M

Jul 11, 2018
Minstrels MRR is populated based on timing parameters and through-
put calculations. The developers of Minstrel found that they wanted
to adjust the retry chain such that the entire chain can be completed
within a time span of 26ms. They have taken this from TCP theory:
according to [24], TCP starts to back off if a packet sent is not delivered
in less than 26ms. This can be used to fingerprint the behaviour of Min-
strel. Additionally, Minstrel tries to complete each segment in the retry
chain within a set time, which defaults to 6ms. If every segment in the
retry chain is given a time limit of 6ms, the entire chain would complete
and fail in 24ms if every transmission and retry attempt fails.

                                  Minstrel uses EWMA to calculate the
success of each rate by looking at previous transmission results. The
calculation runs every 100ms, and the results of the transmissions of
the last 100ms are given a 25% weight in the EWMA calculation.

Minstrel se-lects the lookaround rate according to a few simple rules, and does this
for 10% of the transmissions.Additionally, Minstrel will randomize the
lookaround percentage slightly in order to try to prevent similar be-
haviour of several stations operating in the same wireless environment.

G5+Compex WLE900VX 802.11ac card. 
					BW mode		Antenna				UDP T/P
G5 + WLE900VX				40MHz		2x2				355Mbps
					40MHz		3x3				480Mbps
					80MHz		2x2				400Mbps
					80MHz		3x3				Failed in pushing 300Mbps, dropped to 7Mbps
Compex  MMZ344HV Eval board
					40MHz		2X2				n/a
					80MHz		2x2				500Mbps

Jul 10, 2018
pMDDL sees a problem. And later checked pDDL had the same issue, when WDS=0.

PC1(168.100)------AP(168.11) ~~~ STA(168.12)-------PC2(168.225)
1. On PC1 ping PC2, Wireshark log in PC1 shows the ARP Rep from PC2 is that : Eth Src=STA_MAC, ARP payload Sender=STA_MAC. This means arpnat in STA has changed both addresses. On PC1, arp command shows PC2 MAC=STA_MAC. Ping works fine.
2. During PC1 ping PC2, on PC2, use "arp -d 192.168.168.12" to remove PC2's ARP item of PC2.
3. On PC2, ping STA. PC2 will send an ARP Req to STA(.12). This ARP Req is strange: Eth Src=STA_MAC. But in ARP Req payload, Sender=PC2_MAC. This is a broadcast so that PC1 can see this ARP Req. 
4. PC1 thinks PC2(.225) is on PC2_MAC and change ARP item .225 to PC2_MAC. After this change the PC1 ping to PC2 doesn't work anymore. Actually this is between PC2---STA and broadcasted to PC1, why PC1 cares this ARP Req not destined to itself????
 
Jul 3, 2018
G5 bluetoothd daemon starts successfully. But bluetoothctl can not connect to it. Must allow some controls in config file:

root@UserDevice:~# cat /etc/dbus-1/system.d/bluetooth.conf 
<!-- This configuration file specifies the required security policies
     for Bluetooth core daemon to work. -->

<!DOCTYPE busconfig PUBLIC "-//freedesktop//DTD D-BUS Bus Configuration 1.0//EN"
 "http://www.freedesktop.org/standards/dbus/1.0/busconfig.dtd">
<busconfig>

  <!-- ../system.conf have denied everything, so we just punch some holes -->

  <policy user="root">
    <allow own="org.bluez"/>
    <allow send_destination="org.bluez"/>			// allow this
    <allow send_interface="org.bluez.Agent"/>			// allow this
  </policy>


Jun 29, 2018
Use WPEQ-261ACN (BT) WiFi card Chipset:QCA6174A-5. On G5 build package/firmware/ath10k-firmware/ package and add QCA6174 f/w build. Upgrade the target and the ath10k f/w can not load. 

Use this trick:
cd /lib/firmware/ath10k/QCA6174/hw3.0
mv firmware-4.bin_WLAN.RM.2.0-00180-QCARMSWPZ-1 firmware-4.bin
wget http://projects.dymacz.pl/sparklan_wpeq-261acn-bt/eeprom_ar6320_3p0_NFA324i_5.bin -O board.bin
rmmod ath10k_pci
modprobe ath10k_pci

Reboot and it worked.

Jun 27, 2018
Symptom: With low RSSI, the STA doesn't connect to AP when it receives a few (not enough) beacons.

void ieee80211_scan_work(struct work_struct *work)
{
        struct ieee80211_local *local =
                container_of(work, struct ieee80211_local, scan_work.work);
        struct ieee80211_sub_if_data *sdata;
        unsigned long next_delay = 0;
        bool aborted;

        mutex_lock(&local->mtx);

        sdata = rcu_dereference_protected(local->scan_sdata,
                                          lockdep_is_held(&local->mtx));
        printk("==MHX5.1(%s) local->scan_sdata=%p\n", __func__, local->scan_sdata);

        /* When scanning on-channel, the first-callback means completed. */
        if (test_bit(SCAN_ONCHANNEL_SCANNING, &local->scanning)) {
                aborted = test_and_clear_bit(SCAN_ABORTED, &local->scanning);
                goto out_complete;
        }

        printk("==MHX5.2(%s) \n", __func__);
..........

out_complete:
        __ieee80211_scan_completed(&local->hw, aborted);
.......

In __ieee80211_scan_completed(),    RCU_INIT_POINTER(local->scan_sdata, NULL); resets the local->scan_sdata to NULL. This will close the scan window set by "next_delay = global_beacon_interval==0?IEEE80211_PASSIVE_CHANNEL_TIME:global_beacon_interval + 1", usually it is 101mS. So if the Beacon falls in to the non-window area, it will not be considered and be ignored. Because in ieee80211_scan_rx(): 

       sdata1 = rcu_dereference(local->scan_sdata);
        sdata2 = rcu_dereference(local->sched_scan_sdata);

        printk("==MHX4.2(%s) sdata1=%p, sdata2=%p\n", __func__, sdata1, sdata2);	// local->sched_scan_sdata is always NULL by test.
        if (likely(!sdata1 && !sdata2))
                return;
If local->scan_sdata=NULL, it will return and will not call ieee80211_bss_info_update() so that this beacon is just ignored. This means if "next_delay" is the scan window size for AP beacons. AP beacons must fall into this window otherwise it will not be considered. This window shoule be small in adaptive mode to increase the speed of scanning multiple frequencies. But in generic pDDL mode, only one frequency is scaned, this can be set to very large to increase the chance beacons fall into the window.


Jun 19, 2018
Test ath10k chain(antenna) control. Compax WLE900VX 7AA WiFi card, on G5 platform. Working as AP. A pX2 working as a STA.
        phy <phyname> set antenna <bitmap> | all | <tx bitmap> <rx bitmap>                                   
                Set a bitmap of allowed antennas to use for TX and RX.                                       
                The driver may reject antenna configurations it cannot support. 
Use iw phy0 info | grep Antennas to chech the bit mask.

Antenna Bitmap			AP(ath10k) Signal Avg(dBm)		STA(1th9k) Signal Avg(dBm)	AP--->STA TCP Iperf T/P(Mbps)
	0x1(1 antenna)			-49					-59				27.5
	0x3(2 antennas)			-48					-60				26
	0x7(3 antennas)			-45					-61				24

Use 2 G5 units.Use HT20 mode and each chain had 20MHz signals. Use spectrum analyzer to measure antennas. Antenna mask applies to both units. AP only has Ch0 antenna attached. STA doesn't have any antennas.
Antenna Bitmap			AP(ath10k) Signal Avg(dBm)		STA(ath10k) Signal Avg(dBm)	AP--->STA TCP Iperf T/P(Mbps)
	0x1(1 antenna,on ch0)		-68					-60				38
	0x3(2 antennas,on ch0+ch1)	-71					-58				34
	0x7(3 antennas, on ch0+ch1+ch2)	-69					-56				30

Note, on G5, the WiFi antenna close to the Cell Main antenna is the Ch0 antenna.

Question: In both tests it shows the more antennas the lower TCP T/P, why???? Because of 1. Connected antennas; 2. Tx power too high. Connect all 3 antennas on STA, AP has ch0 antenna connected. 

===STA has br-wan3 as WIFi connecting to an AP(168.11) and IP=168.203, a br-wan with eth1 and a br-lan(169.12) with eth0.
1. In AP, ping 192.168.168.203 : for STA this is an external traffic and needs a fw rule to enable it. Add a user rule : Type=Input, ACCEPT, Source=WIFI, 0.0.0.0-255.255.255.255,Dest=Any,0.0.0.0.-255.255.255.255, Protocol=ICMP. 

2. In AP, ping 192.168.168.12 : The dest IP is local host, the ICMP goes into local TCP/IP stack, no matter which bridge the IP resides on, the ping will be successful. This is not going to a device behind br-lan(eth0), so FORARD chain doesn' apply. INPUT chain allows the ICMP to local host stack and reply ICMP reply back to AP through br-wan3 bridge. On br-lan, tcpdump can not see the ICMP packets.

3. In a PC1(168.100) on AP.eth0, ping a PC2(169.225) on STA.eth0(br-lan) : You need add a user fw rull to forward the ICMP between br-wan3 and br-lan. Type=Forward, ACCEPT, Source=WIFI, 0.0.0.0-255.255.255.255,Dest=LAN,0.0.0.0-255.255.255.255, Protocol=ICMP. This time. packet goes through br-lan to eth0 to PC2. So tcpdump can see the packet on br-lan.

===Test with root@UserDevice:~# cat etc/modules.d/ath9k : ath9k nohwcrypt=1, use s/w cryption. Both AP and STA are about 30% idle but go-through TCP t/p=8.3Mbps. 
To compare, with h/w cryption, APidle=63%, STAidle=25%, t/p=40.2Mbps. This is about 5 times higher thant s/w cryption.

Jun 15, 2018
pX2 secure mesh mode with authsae. Rekeying time set to 60 seconds. With high traffic, the link drop can be seen randomly and quite often. By https://www.mail-archive.com/search?l=ath9k-devel@lists.ath9k.org&q=subject:%22\[ath9k\-devel\]+AuthSAE+rekeying+issues+with+ATH9K%22&o=newest&f=1, this is a h/w bug of key and can be mitigated by using s/w encryption. 

Use s/w encryption as below
root@UserDevice:~# cat etc/modules.d/ath9k                                                                   
ath9k nohwcrypt=1   
4 nodes, serial link, push 10mbps iperf UDP and tx node has about 70% idle CPU and receiver node 75%, middle 2 nodes about 60% idle. NO link drop is seen anymore. T/P will be compromised but it's worth it.

Jun 12, 2018
In pX2,mesh mode the Q lock issue still exists:
root@UserDevice:~# cat sys/kernel/debug/ieee80211/phy0/ath9k/queues 
(VO):  qnum: 0 qdepth:  0 ampdu-depth:  0 pending:   0 stopped: 0
(VI):  qnum: 1 qdepth:  0 ampdu-depth:  0 pending:   0 stopped: 0
(BE):  qnum: 2 qdepth:  0 ampdu-depth:  0 pending: 123 stopped: 1
(BK):  qnum: 3 qdepth:  0 ampdu-depth:  0 pending:   0 stopped: 0
(CAB): qnum: 8 qdepth:  0 ampdu-depth:  0 pending:   0 stopped: 0
root@UserDevice:~# cat sys/kernel/debug/ieee80211/phy0/queues 
00: 0x00000000/0
01: 0x00000000/0
02: 0x00000001/1043
03: 0x00000000/0
root@UserDevice:~# 

In pX2 mac80211 Makefile:
        EXTRA_CFLAGS="-I$(PKG_BUILD_DIR)/include -DMH_CLIENT_BRIDGE -DCONFIG_MHX_ENCRYPT -DCONFIG_MHX_ALM_RATE_AVERAGE -DCONFIG_MHX_MPATH_STABILITY -DCONFIG_MHX_MESH_BYPASS_ROUTING_FOR_TEST_FRAMES -DCPTCFG_MAC80211_MPATH_DEBUG -DCPTCFG_MAC80211_MHWMP_DEBUG -DCPTCFG_MAC80211_HT_DEBUG -DCPTCFG_MAC80211_STA_DEBUG -DCPTCFG_ATH_DEBUG" \

DCPTCFG_ATH_DEBUG can create sys/kernel/debug/ieee80211/phy0/ath9k/debug debug file but if echo 0x80 (XMIT debug), unit reboots. NO use.

In function ath_tx_txqaddbuf()

        if (puttxbuf) {
                TX_STAT_INC(txq->axq_qnum, puttxbuf);
                ath9k_hw_puttxbuf(ah, txq->axq_qnum, bf->bf_daddr);
                ath_dbg(common, XMIT, "TXDP[%u] = %llx (%p)\n",
                        txq->axq_qnum, ito64(bf->bf_daddr), bf->bf_desc);
                printk("TXDP[%u] = %llx (%p). rates=[%d,%d,%04x],[%d,%d,%04x],[%d,%d,%04x],[%d,%d,%04x]\n",
                        txq->axq_qnum, ito64(bf->bf_daddr), bf->bf_desc,bf->rates[0].idx, bf->rates[0].count, bf->rates[0].flags,bf->rates[1].idx, bf->rates[1].count,bf->rates[1].flags,bf->rates[2].idx, bf->rates[2].count,bf->rates[2].flags,bf->rates[3].idx, bf->rates[3].count,bf->rates[3].flags);
        }

I got:
<0>[ 1277.680000] qnum: 0, txq depth: 0
<0>[ 1277.680000] TXDP[0] = 2ed9e00 (a2ed9e00). rates=[0,10,0000],[-1,0,0009],[-1,2,0009],[-1,0,0000]
<0>[ 1277.940000] qnum: 0, txq depth: 0
<0>[ 1277.940000] TXDP[0] = 2ed9f80 (a2ed9f80). rates=[0,10,0000],[-1,0,0009],[-1,2,0009],[-1,0,0000]
<0>[ 1278.180000] qnum: 2, txq depth: 0
<0>[ 1278.180000] TXDP[2] = 2eda000 (a2eda000). rates=[3,1,0008],[0,2,0009],[0,2,0009],[-1,0,0000]
<7>[ 1278.180000] wlan0: sending PREQ to 00:0f:92:fe:00:86
<0>[ 1278.220000] qnum: 0, txq depth: 0
<0>[ 1278.220000] TXDP[0] = 2ed9f00 (a2ed9f00). rates=[0,1,0000],[-1,0,0009],[-1,2,0009],[-1,0,0000]	// looks like PREQ is always 1 retry.
<0>[ 1278.280000] qnum: 2, txq depth: 0
<0>[ 1278.280000] TXDP[2] = 2eda000 (a2eda000). rates=[3,1,0008],[0,2,0009],[0,2,0009],[-1,0,0000]
<0>[ 1278.420000] qnum: 0, txq depth: 0
<0>[ 1278.420000] TXDP[0] = 2eda080 (a2eda080). rates=[0,1,0000],[-1,0,0009],[-1,3,0009],[-1,0,0000]
<7>[ 1278.520000] wlan0: sending PREQ to 00:0f:92:fe:00:86
<0>[ 1278.540000] qnum: 0, txq depth: 0
<0>[ 1278.540000] TXDP[0] = 2eda100 (a2eda100). rates=[0,1,0000],[-1,0,0009],[-1,3,0009],[-1,0,0000]	// looks like PREQ is always 1 retry.
<7>[ 1278.910000] wlan0: sending PREQ to 00:0f:92:fe:00:86
<0>[ 1278.940000] qnum: 0, txq depth: 0
<0>[ 1278.940000] TXDP[0] = 2eda180 (a2eda180). rates=[0,1,0000],[-1,0,0009],[-1,3,0009],[-1,0,0000]	// looks like PREQ is always 1 retry.
<0>[ 1279.180000] qnum: 2, txq depth: 0
<0>[ 1279.180000] TXDP[2] = 2eda200 (a2eda200). rates=[3,1,0008],[0,2,0009],[0,2,0009],[-1,0,0000]
<0>[ 1279.280000] qnum: 2, txq depth: 0
<0>[ 1279.280000] TXDP[2] = 2eda200 (a2eda200). rates=[3,1,0008],[0,2,0009],[0,2,0009],[-1,0,0000]
<7>[ 1279.300000] wlan0: received PREQ from 00:0f:92:fe:00:86
<7>[ 1279.300000] wlan0: PREQ is for us
<7>[ 1279.300000] wlan0: replying to the PREQ
<7>[ 1279.300000] wlan0: sending PREP to 00:0f:92:fe:00:86
<0>[ 1279.300000] qnum: 0, txq depth: 0
<0>[ 1279.300000] TXDP[0] = 2eda400 (a2eda400). rates=[0,10,0000],[-1,0,0009],[-1,2,0009],[-1,0,0000]	// PREP looks 10 retries
<0>[ 1279.490000] qnum: 0, txq depth: 0
<0>[ 1279.490000] TXDP[0] = 2eda300 (a2eda300). rates=[0,10,0000],[-1,0,0009],[-1,2,0009],[-1,0,0000]
<0>[ 1279.590000] qnum: 0, txq depth: 0
<0>[ 1279.590000] TXDP[0] = 2eda380 (a2eda380). rates=[0,10,0000],[-1,0,0009],[-1,2,0009],[-1,0,0000]
<0>[ 1279.710000] qnum: 0, txq depth: 0
<0>[ 1279.710000] TXDP[0] = 2eda500 (a2eda500). rates=[0,10,0000],[-1,0,0009],[-1,2,0009],[-1,0,0000]
<0>[ 1279.810000] qnum: 2, txq depth: 0
<0>[ 1279.810000] TXDP[2] = 2eda600 (a2eda600). rates=[3,1,0008],[0,2,0009],[0,2,0009],[-1,0,0000]
<0>[ 1279.810000] qnum: 2, txq depth: 1
<0>[ 1279.810000] TXDP[2] = 2eda280 (a2eda280). rates=[3,1,0008],[0,2,0009],[0,2,0009],[-1,0,0000]
<0>[ 1279.850000] qnum: 0, txq depth: 0
<0>[ 1279.850000] TXDP[0] = 2eda580 (a2eda580). rates=[0,10,0000],[-1,0,0009],[-1,3,0089],[-1,0,0000]
<0>[ 1280.090000] qnum: 0, txq depth: 0
<0>[ 1280.090000] TXDP[0] = 2eda480 (a2eda480). rates=[0,1,0000],[-1,0,0009],[-1,3,0009],[-1,0,0000]
<0>[ 1280.130000] qnum: 0, txq depth: 0
<0>[ 1280.130000] TXDP[0] = 2eda680 (a2eda680). rates=[0,1,0000],[-1,0,0009],[-1,3,0009],[-1,0,0000]
<0>[ 1280.180000] qnum: 2, txq depth: 0
<0>[ 1280.180000] TXDP[2] = 2eda780 (a2eda780). rates=[0,1,0088],[0,3,0009],[0,3,0009],[-1,0,0000]
<7>[ 1280.180000] wlan0: sending PREQ to 00:0f:92:fe:00:86
<0>[ 1280.200000] qnum: 0, txq depth: 0
<0>[ 1280.200000] TXDP[0] = 2eda700 (a2eda700). rates=[0,1,0000],[-1,0,0009],[-1,2,0009],[-1,0,0000]	// looks like PREQ is always 1 retry.
<7>[ 1280.500000] wlan0: sending PREQ to 00:0f:92:fe:00:86
<0>[ 1280.520000] qnum: 0, txq depth: 0
<0>[ 1280.520000] TXDP[0] = 2eda800 (a2eda800). rates=[0,1,0000],[-1,0,0009],[-1,2,0009],[-1,0,0000]
<0>[ 1280.520000] qnum: 0, txq depth: 1
<0>[ 1280.520000] TXDP[0] = 2eda880 (a2eda880). rates=[0,10,0000],[-1,0,0009],[-1,3,0009],[-1,0,0000]
<7>[ 1280.610000] wlan0: received PREQ from 00:0f:92:fe:00:86
<7>[ 1280.610000] wlan0: PREQ is for us
<7>[ 1280.610000] wlan0: replying to the PREQ
<7>[ 1280.610000] wlan0: sending PREP to 00:0f:92:fe:00:86
<0>[ 1280.610000] qnum: 0, txq depth: 0
<0>[ 1280.610000] TXDP[0] = 2eda900 (a2eda900). rates=[0,10,0000],[-1,0,0009],[-1,2,0009],[-1,0,0000]	// PREP unicast,flag=0 so use basic rate 0(not MCS0) 10 retries.
<0>[ 1280.620000] qnum: 0, txq depth: 1
<0>[ 1280.620000] TXDP[0] = 2eda980 (a2eda980). rates=[0,10,0000],[-1,0,0009],[-1,3,0009],[-1,0,0000]
<0>[ 1280.810000] qnum: 0, txq depth: 0
<0>[ 1280.810000] TXDP[0] = 2edaa00 (a2edaa00). rates=[0,10,0000],[-1,0,0009],[-1,3,0009],[-1,0,0000]
^C
root@UserDevice:~# 

YES, this is correct because PREQ is a Broadcast and PREP is unicast!!!
Note the data rate TXDP[2] = 2eda600 (a2eda600). rates=[3,1,0008],[0,2,0009],[0,2,0009],[-1,0,0000]. This [rate,count,flag] comes from ieee80211_tx_rate rates[4], not the real PHY rates. The real PHY rates are set in ar9003_set_txdesc(), using struct ath_tx_info { struct ath9k_11n_rate_series rates[4] }. In  ath_buf_set_rate(), if the ieee80211_tx_rate *rates has a flag of IEEE80211_TX_RC_MCS, then struct ath_tx_info *info->rates[i].Rate = rix | 0x80. So 0x83 (MCS3) is the first rate and then 0x80(MCS0).

May 29, 2018
git clone Openwrt CC, and add feed LuCI and doesn't compile.
1. Change feeds/luci/contrib/package/lucihttp/Makefile:

# PKG_SOURCE_PROTO:=git
# PKG_SOURCE_URL=https://github.com/jow-/lucihttp.git
# PKG_SOURCE_DATE:=2018-05-18
# PKG_SOURCE_VERSION:=cb119deddee5f0f8f1da883b20c60aea7611b175
PKG_SOURCE_VERSION:=master
# PKG_MIRROR_HASH:=573a20817c73344b17c8fa1b8112f14af9dccc25fef017ae072ecd09140cf9e1
CMAKE_INSTALL:=1


PKG_SOURCE:=$(PKG_NAME)-$(PKG_SOURCE_VERSION).zip
PKG_SOURCE_SUBDIR:=$(PKG_NAME)-$(PKG_SOURCE_VERSION)
PKG_BUILD_DIR:=$(BUILD_DIR)/$(PKG_NAME)-$(PKG_SOURCE_VERSION)

2. Change feeds/luci/luci-base/Makefile: See https://github.com/openwrt/luci/issues/815


May 23, 2018
pDDL924(ch=1,freq=2391) as STA, change the Beacon IE from pMDDL900(Ch=97,freq=2487). In ieee802_11_parse_elems_crc(), 
			// DS Parameter Set :pos[0]: Channel#. This is 97(0x61) from pMDDL900. Shuld be changed to 1; pos[1]: length=0x1.
                        if(id == WLAN_EID_DS_PARAMS)
                                pos[0] = 1;	// change beacon IE to channel=1.
                        if(id == WLAN_EID_HT_OPERATION)	// change  ieee80211_ht_operation. primary_chan to channel1
                                pos[0] = 1;
After this change, the pDDL924 STA can connect to pMDDL900 AP with NONE encryption mode. 
[Note Mar 18, 2020] : pDDL924 uses IF=2391MHz,Ch=1; pMDDL900 uses IF=2487MHz,ch=97.

May 22,2018
Where the BSS information is updated when STA scans:
*ieee80211_alloc_hw--->tasklet_init(&local->tasklet,ieee80211_tasklet_handler, (unsigned long) local);------>case IEEE80211_RX_MSG:/* Clear skb->pkt_type in order to not confuse kernel * netstack. */	skb->pkt_type = 0;ieee80211_rx(&local->hw, skb);----->__ieee80211_rx_handle_packet(hw, skb);------>if (unlikely(ieee80211_is_probe_resp(hdr->frame_control) ||ieee80211_is_beacon(hdr->frame_control))) ieee80211_scan_rx(local, skb);


May 16, 2018
About MANET:
I prefer to use the term *ad hoc* when I want to focus on the self-organizing capability of nodes, while I prefer to use the term *mesh* when I want to refer to the type of connections among nodes in the network (that is every node can communicate in a distributed fashion with all the nodes) 

Mobility is a particular characteristic of nodes and if you want to highlight this characteristic as critical in the  application you are considering you could use the term MANETs (Mobile Ad hoc NETworks).

Essentially, MANETs are a type of mesh network, i.e. a subset of 'mesh' networks.

Mesh networking to the mesh topology, which means that each node has a point-to-point and point-to-multipoint connectivity with other nodes, (thereby forming a mesh). Mobile ad-hoc networking, on the other hand, is networking among nodes that : 1) form a network on the fly (ad-hoc manner), and 2) which could also be mobile.

A mesh network can also be formed by wireless nodes that are static, e.g. mounted on lamp posts. That said, there are currently very few implementations of 'mesh networks' that are true MANETs.

May 15, 2018
AlphaK, load with an fake ART partition so that the wifi drive can load properly. And then start ART program and find the 2nd chain(antenna) doesn't receive any signal. Remove the ART partition and don't let the driver to initialize anything during boot-up. Run ART program and then the 2nd chain receives signal with art T/P test.

May 14, 2018
900MHz channel mapping in pDDL924:
1. WebUI is different. For example in WebUI 10-912MHz
2. iw wlan0 info, iw phy0 info, and UCI match, and are different with WebUI
	
root@UserDevice:~# uci show wireless | grep chann
wireless.radio0.channel=17
wireless.radio0.channel_1800=4
wireless.radio0.channel_900=12
root@UserDevice:~# iw wlan0 info
Interface wlan0
        ifindex 9
        wdev 0x4
        addr 00:0f:92:fa:4f:d2
        type mesh point
        wiphy 0
        channel 12 (912 MHz), width: 20 MHz, center1: 912 MHz
root@UserDevice:~# iw phy0 info
		        * 911 MHz [11] (30.0 dBm)
                        * 912 MHz [12] (30.0 dBm)
                        * 913 MHz [13] (30.0 dBm)

In pMDDL900, try to make all 4 match to channel 10.

May 11, 2018
How to add an image after a form title in X-WRT WebUI:
	append forms "start_form|@TR<<Interface Configuration>> <img width='20' src='/images/abt.jpg' alt='' />" "$N"

May 8, 2018
AlphaK, art is built to pMDDL2350 product:
==========================================================================================
| Continuous Transmit Options                                                            |
------------------------------------------------------------------------------------------
|  f - (F)requency [2487 MHz]                                                            |
|  c - In(c)rease frequency by 5 MHz [2487 MHz]                                          |
|  d - (D)ecrease frequency by 5 MHz [2487 MHz]                                          |
|  m - Rate (M)ode [Legacy Mode]                                                         |
|  r - (R)ate [54M OFDM]                                                                 |
|  4 - HT(4)0 Rate Mode [Auto]                                                           |
|  b - Bandwidth [8MHz]                                                                  |
|  g - Tx (G)ain [30 - Selected]                                                         |
|  p - Tx (P)ower [0.0 dBm]                                                              |
|  x - Transmit Mode [Continuous]                                                        |
|  h - Tx/Rx Mask C(h)ain [TxCh=0x7 RxCh=0x7]                                            |
|  n - Packet Cou(n)t [Infinite]                                                         |
|  l - Packet (L)ength [1500]                                                            |
|  i - G(I) Settings [Long]                                                              |
|  e - Interfram(e) Spacing [Normal]                                                     |
|  t - Start                                                                             |
|ESC - Quit           

When transmit, analog mixer pin 1(IF input) should see OFTM IF at 2487MHz. Pin3 is LO input, when at 3000MHz, Pin6 output should see 513MHz output. And only 2487MHz works. 2391MHz doesn't work.tt

May 4,2018
Set ar9331 PLL:
1. CFG_PLL_FREQ=CFG_PLL_380_380_190, CPU_PLL_CONFIG_VAL1=0x40814c00, Clocks: CPU:380.000MHz, DDR:380.000MHz, AHB:190.000MHz, Ref:40.000MHz, UART,Eth works fine.
2. CFG_PLL_FREQ=CFG_PLL_420_400_200, CPU_PLL_CONFIG_VAL1=0x40815400, Clocks: CPU:420.000MHz, DDR:420.000MHz, AHB:210.000MHz, Ref:40.000MHz, UART,Eth works fine.
May 1,2018
3 pMDDL2350 in chain topology. AuthSAE lifetime = 30. With heavy traffic, the link will be down for 30 seconds randomly which means the rekey fails. Turn on the AuthSAE debug and check the debug print. A successful re-pair and a failure re-pair print the same information. Looks like even the re-key procedure looks perfect but actually it is not. Remove the heavy traffic just use ping traffic. This will not happen and every re-key is successful.

April 25, 2018
The BasebandWatchdog issue is caused by sending test frames to an un-authorized peer. Before sending the test probe frames it must be sure that peer is already authorized : 
	list_for_each_entry(sta, &local->sta_list, list) {
		if ((sdata == sta->sdata || sdata->bss == sta->sdata->bss) && (sta->sta_state == IEEE80211_STA_AUTHORIZED)){

In open mesh, the final status of a sta is also IEEE80211_STA_AUTHORIZED.

April 23, 2018
In authsae, sending background test frames will cause "Baseband Watchdog" happen.
root@UserDevice:~# cat sys/kernel/debug/ieee80211/phy0/ath9k/reset                                          
Baseband Watchdog:  1222 

Disable sending test frames in authsae mode then that watchdog disappears. Need to dig how to send test frames in secure mesh mode.

Test with 4 nodes in over weekend:
root@UserDevice:~# uptime                                                                                   
 08:29:49 up 2 days, 17:02,  load average: 0.25, 0.15, 0.14                                                 
root@UserDevice:~# date                                                                                     
Mon Apr 23 08:29:51 MDT 2018   

3 nodes run 2days 17 housrs with BaseBand Watchdog are all zero. But one node ( the transmitter ) just died and never recover. Looks like h/w issue.

April 20, 1028
Secure mesh mode with authsae. Sending background test frames will cause "tx frame failed!" in meshd-nl80211. And then causes Baseband Watchdog. 

April 17, 2018
4 nodes reduce test frames sending to 1 packet/hour. Over night of 15.5hours none of them reboot. The memory leakage comes from sending OR receiving test frames. Mostly because of sending test frames. When the node freezes, the kernel dumps:

<0>[   90.670000] ==MHX8.2(ieee80211_mesh_mpath_stats_timer) probe STA[fa:80:82]                         
<0>[   90.670000] ===MHX6.1(mpath_lookup) Looking for dst=[00:00:00]                                     
<0>[   90.670000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...                                
<0>[   90.680000] ==MHX8.2(ieee80211_mesh_mpath_stats_timer) probe STA[fa:80:82]                         
<0>[   90.680000] ===MHX6.1(mpath_lookup) Looking for dst=[00:00:00]                                     
<0>[   90.680000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...                                
<3>[   90.690000] BUG: scheduling while atomic: iw/2132/0x00000100                                       
<0>[   90.690000] Modules linked in: rt2800usb rt2800lib rt2x00usb rt2x00lib ftdi_sio rndis_host cdc_ethe
r cdc_eem ax88179_178a asix smsc75xx usbnet uhci_hcd ohci_hcd ehci_platform ehci_hcd ath9k ath9k_common p
pp_async iptable_nat ath9k_hw ath ppp_generic pl2303 nf_nat_ipv4 nf_conntrack_ipv4 mac80211 ipt_MASQUERAD
E cfg80211 zlib_inflate zlib_deflate xt_time xt_tcpmss xt_statistic xt_state xt_recent xt_quota xt_pkttyp
e xt_physdev xt_owner xt_nat xt_multiport xt_mark xt_mac xt_limit xt_length xt_iprange xt_iface xt_hl xt_
helper xt_esp xt_ecn xt_dscp xt_conntrack xt_connmark xt_connlimit xt_connbytes xt_condition xt_comment x
t_addrtype xt_TCPMSS xt_REDIRECT xt_RAWNAT xt_NETMAP xt_LOG xt_IPMARK xt_HL xt_DSCP xt_CT xt_CLASSIFY usb
serial slhc nf_nat_irc nf_nat_ftp nf_nat nf_defrag_ipv4 nf_conntrack_netlink nf_conntrack_irc nf_conntrac
k_ftp nf_conntrack iptable_raw iptable_mangle iptable_filter ipt_ah ipt_REJECT ipt_ECN ip_tables ebt_amon
g ebt_802_3 crc16 crc_ccitt compat_xtables compat arptable_filter arpt_mangle arp_tables act_skbedit act_
mirred em_u32 cls_u32 cls_tcindex cls_flow cls_route cls_fw sch_hfsc sch_ingress xt_set ip_set_list_set i
p_set_hash_netport ip_set_hash_netiface ip_set_hash_net ip_set_hash_ipportnet ip_set_hash_ipportip ip_set
_hash_ipport ip_set_hash_ip ip_set_bitmap_port ip_set_bitmap_ipmac ip_set_bitmap_ip ip_set nfnetlink conf
igfs arc4 crypto_blkcipher soip gpio_button_hotplug mhx_bsp                                              
<0>[   90.690000] CPU: 0 PID: 2132 Comm: iw Not tainted 3.10.36 #2                                       
<0>[   90.690000] Stack : 00000000 00000000 00000000 00000000 80392eb2 00000030 831073e8 80340310        
<0>[   90.690000]         802ea09c 803417db 00000854 80392660 831073e8 80340310 803b382c 80340310        
<0>[   90.690000]         00000004 80078950 00000003 800763d0 00000002 80340310 802eb924 82abd784        
<0>[   90.690000]         00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000        
<0>[   90.690000]         00000000 00000000 00000000 00000000 00000000 00000000 00000000 82abd710        
<0>[   90.690000]         ...                                                                            
<0>[   90.690000] Call Trace:                                                                            
<0>[   90.690000] [<8006dcc8>] show_stack+0x48/0x70                                                      
<0>[   90.690000] [<80099d78>] __schedule_bug+0x48/0x64                                                  
<0>[   90.690000] [<80067894>] __schedule+0x74/0x488                                                     
<0>[   90.690000] [<80067f34>] schedule_preempt_disabled+0x10/0x1c                                       
<0>[   90.690000] [<80066e64>] __mutex_lock_slowpath+0xb4/0x108                                          
<0>[   90.690000] [<8323babc>] ieee80211_debugfs_key_sta_del+0x758/0x954 [mac80211]                      
<0>[   90.690000]                                                                                        
<0>[  183.780000] ===MHX6.1(mpath_lookup) Looking for dst=[04:0f:59]                                     
<0>[  309.220000] ===MHX6.1(mpath_lookup) Looking for dst=[04:0f:59]       

The line "BUG: scheduling while atomic: iw/2132/0x00000100" shows a conflict with iw command.
[Solution] : In sending test frames, remove mutex_lock(&local->sta_mtx) and mutex_unlock(&local->sta_mtx). This will lock the iw command to retrieve station list.

April 11, 2018
A symptom is noticed : with n1<->n4 direct link traffic. On n1, the signal/RSSI to n4 is -70/23. On n4 the signal/RSSI to n1 is -73/25. They are good signals supposely.

But on n1, still see the n4[fa:5a:d4] doesn't reply the PREQ, like below:
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRET    FLAGS   
00:0f:92:fa:5a:d4 00:0f:92:fa:5a:d4 wlan0       1696    117     0       0       430     26      0x7             
00:0f:92:00:6c:45 00:0f:92:00:6c:45 wlan0       0       115     0       2890    0       0       0x11            
00:0f:92:fa:80:82 00:0f:92:fa:80:82 wlan0       0       93      0       2890    0       0       0x11            
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRET    FLAGS   
00:0f:92:fa:5a:d4 00:0f:92:fa:5a:d4 wlan0       1696    117     0       0       450     28      0x7             
00:0f:92:00:6c:45 00:0f:92:00:6c:45 wlan0       0       113     0       2300    0       0       0x11            
00:0f:92:fa:80:82 00:0f:92:fa:80:82 wlan0       0       93      0       2870    0       0       0x11 

This happens periodically. Because n4 doesn't have antenna and very close n1, it shouldn't be a outside interference. 

And during the DTIM increasing on n1, the n4 doesn' show DTIM jumps and the SN from n1 is increasing normally. So n4 should have already received PREQ from n1 normally and reply PREPs. But why n1 doesn't see them???

Captured 273S in n1. During the 273S, n1 receives 19 direct PREQ/PREP from n4, averagely 14S/pecket. Among the 19, PREQ from n4 11 times, PREP from n4 8 times, averagely 34s/PREP. This will cause discovery_timeout of n1 sending PREQ and expecting PREP from n4. 

To compare, during this 273S, n1 receives the PREQ bounced back from n2 464 times. n1 receives PREQ bounced back from n3 338 times.

This is 464+338=802 versus 8 times. That's why n1 can not see n4's PREP that is flooded out. Use a longer mesh_min_discovery_timeout mitigates this issue. Increase this time will not cause delay to switch to another path.

April 10, 2018
static void ieee80211_mesh_housekeeping(struct ieee80211_sub_if_data *sdata)
{
	struct ieee80211_if_mesh *ifmsh = &sdata->u.mesh;
	u32 changed;

	ieee80211_sta_expire(sdata, ifmsh->mshcfg.plink_timeout * HZ);	// .plink_timeout = MESH_DEFAULT_PLINK_TIMEOUT=1800
	mesh_path_expire(sdata);	// MESH_PATH_EXPIRE=(600 * HZ). 

	changed = mesh_accept_plinks_update(sdata);
	ieee80211_mbss_info_change_notify(sdata, changed);

	mod_timer(&ifmsh->housekeeping_timer,
		  round_jiffies(jiffies +
				IEEE80211_MESH_HOUSEKEEPING_INTERVAL));	// (60 * HZ) do housekeeping every 60 seconds
}

Test case : n1 n2 n3 n4, TCP traffic n1<--->n3<--->n4
1. On n1, mpath is n1->n3->n4, stable. Suddenly move n4 to n1 hoping a direct connection of n1-n4. But this mpath switch takes long time about 27sec to finish. The n1 kmsg log starting from the move, totally 36sec. The log shows, in 36 seconds, n1 only gets 5 PREQ/PREP directly from n4, 2 PREQ and 3 PREP, average 7 seconds per packet. The time points of receiving these packets are : 5S, 8S, 26S, 29S and 33S. This is weird because the discovery_time of n1/n4 is about 300~500mS. The first 2 are PREQs from n4. In this 2 PREQs, n1 calculates a very high metric to n4. This is because the test frames from n1->n4 underestimate the TX rates, or bitrate_avg_weight may affect too. At the 3rd PREQ/PREP (26S), n1 gets the direct PREQ from n4 with low/normal metric and the next_hop is changed to n4.

To compare, during this 36S, n1 receives 49 PREQ/PREP relaied from n3, 37 PREQ/PREP relaied from n2. Looks like these packets floods the direct PREQ/PREP from n4 so that the n1-n4 direct link can not be established quickly. Why the direct packets are flooded by the relaied packets from n2 and n3????

In Jason test, if remove the n1-n2 cable connection and n2 will not affect n1's receiving and the mpath can set up quickly.

Maybe n4 doesn't receive the PREQ from n1 directly?

2. On n4, the kmsg log shows n4 receives 10 PREQ from n1 in 7 seconds, and unicast PREP to n1. This means it is not n4's sending problem. Just because n1 can not receive them.

3. Another factor is that, during the n1<--->n3<--->n4 traffic scenario, n1 can not see n4 and "iw wlan0 station dump" has already removed n4. This plink timeout is reduced to 90S now.

4. Another factor maybe too much printk() in hwmp_route_info_get(). But remove printk() and looked like didn't help much.

April 9, 2018
n1 n2 n3 n4
When a node n3 has a immediate neighbour n4 that actively sending something like PREQ/PREP, it is harder for it to receive the FORWARDED BROADCAST PREQ or PREP from n2. The PREQ from n2 carries the metric M2->1. If that packet from n2 can't be received on time, the mpath information on n3 of n3->n1 is not updated. The only solution looks like to reduce the mesh_hwmp_active_path_timeout. The time on n3 receiving n1's PREQ from n2 varies a lot, from 3sec to even 40sec. And in worst case, the n3 log shows it doesn't receive anything from n2 (direct or relaied PREQ from n1), and n2 is all flooded by the broadcast PREQ from n4.

April 6, 2018
In hwmp_preq_frame_process(), when replying a PREQ to us, the metric in PREP is 0.
iw wlan0 mpath dump sometimes see some stalling SN and metric to a specific node is frozen. This is because even though we update the TX rate/per status by send test frames, the Metric it self is sent only by PREQ and PREP. If a traffic doesn't use a node, this node will never send PREQ or PREP to show its latest SN and metric. That node only forward the PREQ and PREP, which doesn't have its own metric information.

To a DEST ADDR node, if the SN is frozen, that means that specific doesn't send any PREQ/PREP. But you can see the Metric and Exptime still refresh. This is because even though this node doesn' send its own PREQ/PREP, it forwards other nodes' PREQ/PREP and a node that receives its forwarding can still the Metric and Exptime to it. So that the Metric to this specific node of immediated nodes is still updated. But for nodes that can't see this specific node, the metric to it can not be updated because it doesn't send PREQ/PREP.

Mar 28, 2018
AP:VIP4G,WPa+WPA2(Radius), STA:PWii,WPA2(Radius), STA doesn't connect to AP. In AP's /etc/config/wireless, encryption is set to "wpa+wpa2" that is wrong. This causese the /hostapd-phy0.conf has "wpa=1". So the beacon has rsn_ie_len=0. In this case, the STA with WPA2(Radius) doesn't think this is a matching SSID and never connects to it. 
Change "wpa+wpa2" in config file to "wpa-mixed+tkip+ccmp" for WPA+WPA2 Enterprise solves this issue.

Mar 22, 2018
The added test frames are not enought to keep the metric accurate fresh. Use iperf can really fresh it.
Test frame frequency #define MESH_PATH_STATS_UPDATE_INTERVAL can not be shorter than 500mS otherwise cause problems in sending test frames and ifconfig even stop working. This is 3 nodes scenario. With more nodes, this time may be longer. So maybe 1Sec is a safer choice.

Mar 21, 2018
11C.9.8.5 Repeated attempts at path discovery
Repeated attempts by a40mesh STA at path discovery towards a single target shall be limited to dot11MeshHWMPmaxPREQretries. The minimum waiting time for the repeated attempt at path discovery to a single target is 2 X dot11MeshHWMPnetDiameterTraversalTime. For each attempt, the HWMP sequence number is incremented and a new Path Discovery ID is chosen.

11C.9.8.6 Limiting the rate of HWMP sequence number increments
In order to improve path stability (and further reduce overhead), a mesh STA may use the same originator HWMP sequence number for a certain time interval. In this case, the originator HWMP SN shall be incremented only after at least dot11MeshHWMPnetDiameterTraversalTime has elapsed since the previous increment. This mechanism prevents mesh STAs from changing the path frequently to the originator mesh STA every time the originator mesh STA sends a burst of PREQs within a very short time. This element of the protocol allows an originator mesh STA to immediately initiate on-demand path discovery to a new target without affecting recently refreshed paths to the originator in other mesh STAs.


Mar 19, 2018
AP: G5; STA:VIP4G test build with EAP-TLS support. With Fangzhu's self-signed certificates. Settings:
		FreeRADIUS	|	VIP4G
Private key:	server.key	|	X509 Private Key:	client.key 	
Certificate:	server.pem	|	X509 Certificate:	client.crt
Root CA certificate:	ca.pem	|	X509 Root Certificate:	ca.pem

Mar 16, 2018
Bug5022: When in WPA2-PSK, Ap:G5, STA:VIP4G, hostapd log:

1449978114.882592: wlan0: Event TX_STATUS (17) received
1449978114.882646: mgmt::reassoc_resp cb
1449978114.882772: 1449978114.882778: wlan0: STA 04:f0:21:12:3f:4a IEEE 802.11: associated (aid 1)
1449978114.883043: 1449978114.883051: wlan0: STA 04:f0:21:12:3f:4a MLME: MLME-REASSOCIATE.indication(04:f0:21:12:3f:4a)
1449978114.883165: 1449978114.883171: wlan0: STA 04:f0:21:12:3f:4a MLME: MLME-DELETEKEYS.request(04:f0:21:12:3f:4a)
1449978114.883506: wpa_driver_nl80211_set_key: ifindex=33 (wlan0) alg=0 addr=0x77b09888 key_idx=0 set_tx=1 seq_len=0 key_len=0
1449978114.883768:    addr=04:f0:21:12:3f:4a
==MHX1.0(ap_sta_bind_vlan) sta->flags=0x00008A83					//WLAN_STA_WDS flag is not set yet
==MHX1.1(ap_sta_bind_vlan) sta->vlan_id=0. old_vlanid=0
1449978114.884380: 1449978114.884389: wlan0: STA 04:f0:21:12:3f:4a IEEE 802.11: binding station to interface 'wlan0'
==MHX1.3(ap_sta_bind_vlan) wpa_auth_sta_set_vlan() returned ok!
1449978114.884664: nl80211: wlan0[33]: set_sta_vlan(04:f0:21:12:3f:4a, ifname=wlan0[33], vlan_id=0)
==MHX1.4(ap_sta_bind_vlan) ret=hostapd_drv_set_sta_vlan() = 0
1449978114.885477: nl80211: Set STA flags - ifname=wlan0 addr=04:f0:21:12:3f:4a total_flags=0x66 flags_or=0x6 flags_and=0xfffffff7 authorized=0
1449978114.885779: 1449978114.885786: wlan0: STA 04:f0:21:12:3f:4a WPA: event 1 notification
1449978114.886001: wpa_driver_nl80211_set_key: ifindex=33 (wlan0) alg=0 addr=0x77b09888 key_idx=0 set_tx=1 seq_len=0 key_len=0
1449978114.886081:    addr=04:f0:21:12:3f:4a
1449978114.886242: IEEE 802.1X: Ignore STA - 802.1X not enabled or forced for WPS
1449978114.886319: 1449978114.886325: wlan0: STA 04:f0:21:12:3f:4a WPA: start authentication
1449978114.886359: WPA: 04:f0:21:12:3f:4a WPA_PTK entering state INITIALIZE
1449978114.886546: wpa_driver_nl80211_set_key: ifindex=33 (wlan0) alg=0 addr=0x77b09888 key_idx=0 set_tx=1 seq_len=0 key_len=0
1449978114.886694:    addr=04:f0:21:12:3f:4a
1449978114.886836: nl80211: Set STA flags - ifname=wlan0 addr=04:f0:21:12:3f:4a total_flags=0x66 flags_or=0x0 flags_and=0xfffffffe authorized=0
1449978114.887447: 1449978114.887459: wlan0: STA 04:f0:21:12:3f:4a IEEE 802.1X: unauthorizing port
1449978114.887545: WPA: 04:f0:21:12:3f:4a WPA_PTK_GROUP entering state IDLE
1449978114.887593: WPA: 04:f0:21:12:3f:4a WPA_PTK entering state AUTHENTICATION
1449978114.887634: WPA: 04:f0:21:12:3f:4a WPA_PTK entering state AUTHENTICATION2
1449978114.887669: WPA: Re-initialize GMK/Counter on first station
1449978114.887966: GMK - hexdump(len=32): [REMOVED]
1449978114.888312: Key Counter - hexdump(len=32): [REMOVED]
1449978114.888646: GTK - hexdump(len=16): [REMOVED]
1449978114.888840: wpa_driver_nl80211_set_key: ifindex=33 (wlan0) alg=3 addr=0x46a15c key_idx=1 set_tx=1 seq_len=0 key_len=16
1449978114.888915: nl80211: KEY_DATA - hexdump(len=16): [REMOVED]
1449978114.888952:    broadcast key
1449978114.890832: WPA: Assign ANonce - hexdump(len=32): c6 8c 47 7b da 21 d0 d2 ed 97 a1 17 41 9d c7 b5 49 c0 75 8a d7 ee 63 d1 5a 4f 32 7f 0a 89 f9 4b
1449978114.891026: WPA: 04:f0:21:12:3f:4a WPA_PTK entering state INITPSK
1449978114.891105: Searching a PSK for 04:f0:21:12:3f:4a prev_psk=0
1449978114.891169: Searching a PSK for 04:f0:21:12:3f:4a prev_psk=0
1449978114.891223: WPA: 04:f0:21:12:3f:4a WPA_PTK entering state PTKSTART
1449978114.891333: 1449978114.891340: wlan0: STA 04:f0:21:12:3f:4a WPA: sending 1/4 msg of 4-Way Handshake			// Start 4-way handshake, 1/4
1449978114.891405: WPA: Send EAPOL(version=2 secure=0 mic=0 ack=1 install=0 pairwise=1 kde_len=0 keyidx=0 encr=0)
1449978114.891527: WPA: Replay Counter - hexdump(len=8): 00 00 00 00 00 00 00 01
1449978114.891842: WPA: Use EAPOL-Key timeout of 100 ms (retry counter 1)
1449978114.891995: wlan0: hostapd_new_assoc_sta: reschedule ap_handle_timer timeout for 04:f0:21:12:3f:4a (300 seconds - ap_max_inactivity)
1449978114.892177: nl80211: Event message available
1449978114.892355: nl80211: BSS Event 86 (NL80211_CMD_UNEXPECTED_4ADDR_FRAME) received for wlan0		// set WLAN_STA_WDS flag in ieee802_11_rx_from_unknown()
1449978114.892470: wlan0: Event RX_FROM_UNKNOWN (18) received
1449978114.892507: Enable 4-address WDS mode for STA 04:f0:21:12:3f:4a (aid 1)
1449978114.892558: nl80211: Set WDS STA addr=04:f0:21:12:3f:4a aid=1 val=1 name=wlan0.sta1
1449978114.893757: nl80211: Create interface iftype 4 (AP_VLAN)
1449978114.897473: nl80211: Ignored event (cmd=7) for foreign interface (ifindex 34 wdev 0x0)
1449978114.897876: nl80211: New interface wlan0.sta1 created: ifindex=34
1449978114.897979: nl80211: Add own interface ifindex 34 (ifidx_reason -1)
1449978114.898065: nl80211: if_indices[16]: 10(33) 33(-1) 34(-1)
1449978114.902856: nl80211: wlan0[33]: set_sta_vlan(04:f0:21:12:3f:4a, ifname=wlan0.sta1[34], vlan_id=0)
1449978114.903646: nl80211: Beacon event message available
1449978114.903810: wlan0: Event RX_MGMT (19) received
1449978114.903856: unknown vendor specific information element ignored (vendor OUI 00:03:7f len=9)
1449978114.904015: RTM_NEWLINK: ifi_index=34 ifname=wlan0.sta1 operstate=2 linkmode=0 ifi_family=0 ifi_flags=0x1002 ()
1449978114.904227: nl80211: Ignore interface down event since interface wlan0.sta1 is up
1449978114.904318: RTM_NEWLINK: ifi_index=34 ifname=wlan0.sta1 operstate=2 linkmode=0 ifi_family=0 ifi_flags=0x1002 ()
1449978114.904416: nl80211: Ignore interface down event since interface wlan0.sta1 is up
1449978114.904570: RTM_NEWLINK: ifi_index=34 ifname=wlan0.sta1 operstate=2 linkmode=0 ifi_family=0 ifi_flags=0x1002 ()
1449978114.904703: nl80211: Ignore interface down event since interface wlan0.sta1 is up
1449978114.904819: RTM_NEWLINK: ifi_index=34 ifname=wlan0.sta1 operstate=2 linkmode=0 master=10 ifi_family=0 ifi_flags=0x1002 ()
1449978114.905700: nl80211: Ignore interface down event since interface wlan0.sta1 is up
1449978114.905809: RTM_NEWLINK: ifi_index=34 ifname=wlan0.sta1 operstate=2 linkmode=0 master=10 ifi_family=0 ifi_flags=0x1002 ()
1449978114.905971: nl80211: Ignore interface down event since interface wlan0.sta1 is up
1449978114.906072: RTM_NEWLINK: ifi_index=34 ifname=wlan0.sta1 master=10 operstate=2 ifi_family=7 ifi_flags=0x1002 ()
1449978114.906217: nl80211: Ignore interface down event since interface wlan0.sta1 is up
1449978114.906558: RTM_NEWLINK: ifi_index=34 ifname=wlan0.sta1 operstate=0 linkmode=0 master=10 ifi_family=0 ifi_flags=0x11043 ([UP][RUNNING][LOWER_UP])
1449978114.906696: wlan0: Event INTERFACE_STATUS (5) received
1449978114.906764: Unknown event 5
1449978114.906847: RTM_NEWLINK: ifi_index=34 ifname=wlan0.sta1 master=10 operstate=0 ifi_family=7 ifi_flags=0x11043 ([UP][RUNNING][LOWER_UP])
1449978114.906935: wlan0: Event INTERFACE_STATUS (5) received
1449978114.906986: Unknown event 5
1449978114.907277: nl80211: Add ifindex 10 for bridge br-lan
1449978114.907369: nl80211: Add own interface ifindex 10 (ifidx_reason 34)
1449978114.907452: nl80211: if_indices[16]: 10(33) 33(-1) 34(-1) 10(34)
1449978114.907531: RTM_NEWLINK: ifi_index=34 ifname=wlan0.sta1 master=10 operstate=0 ifi_family=7 ifi_flags=0x11043 ([UP][RUNNING][LOWER_UP])
1449978114.907627: wlan0: Event INTERFACE_STATUS (5) received
1449978114.907673: Unknown event 5
1449978114.907973: nl80211: Add ifindex 10 for bridge br-lan
1449978114.908068: nl80211: Add own interface ifindex 10 (ifidx_reason 34)
1449978114.908135: nl80211: ifindex 10 already in the list
1449978114.908243: RTM_NEWLINK: ifi_index=34 ifname=wlan0.sta1 master=10 operstate=0 ifi_family=7 ifi_flags=0x11043 ([UP][RUNNING][LOWER_UP])
1449978114.908324: wlan0: Event INTERFACE_STATUS (5) received
1449978114.908357: Unknown event 5
1449978114.908461: nl80211: Add ifindex 10 for bridge br-lan
1449978114.908519: nl80211: Add own interface ifindex 10 (ifidx_reason 34)
1449978114.908684: nl80211: ifindex 10 already in the list
1449978114.908730: nl80211: Event message available
1449978114.908814: nl80211: BSS Event 59 (NL80211_CMD_FRAME) received for wlan0
1449978114.908864: nl80211: MLME event 59 (NL80211_CMD_FRAME) on wlan0(04:f0:21:25:1d:b9) A1=ff:ff:ff:ff:ff:ff A2=00:22:43:05:14:3c
1449978114.908931: nl80211: MLME event frame - hexdump(len=42): 40 00 00 00 ff ff ff ff ff ff 00 22 43 05 14 3c ff ff ff ff ff ff 70 e3 00 00 01 08 82 84 8b 96 0c 12 18 24 32 04 30 48 60 6c
1449978114.909061: nl80211: Frame event
1449978114.909117: nl80211: RX frame da=ff:ff:ff:ff:ff:ff sa=00:22:43:05:14:3c bssid=ff:ff:ff:ff:ff:ff freq=2437 ssi_signal=-38 fc=0x40 seq_ctrl=0xe370 stype=4 (WLAN_FC_STYPE_PROBE_REQ) len=42
1449978114.909229: wlan0: Event RX_MGMT (19) received
1449978114.909324: nl80211: send_mlme - da= 00:22:43:05:14:3c noack=1 freq=0 no_cck=0 offchanok=0 wait_time=0 fc=0x50 (WLAN_FC_STYPE_PROBE_RESP) nlmode=3
1449978114.909384: nl80211: send_mlme -> send_frame
1449978114.909418: nl80211: send_frame - Use bss->freq=2437
1449978114.909446: nl80211: send_frame -> send_frame_cmd
1449978114.909474: nl80211: CMD_FRAME freq=2437 wait=0 no_cck=0 no_ack=1 offchanok=0
1449978114.909510: CMD_FRAME - hexdump(len=194): 50 00 00 00 00 22 43 05 14 3c 04 f0 21 25 1d b9 04 f0 21 25 1d b9 00 00 00 00 00 00 00 00 00 00 64 00 31 04 00 0c 47 35 61 63 56 48 54 2d 6a 65 66 66 01 08 82 84 8b 96 0c 12 18 24 03 01 06 07 06 55 53 20 01 0b 1e 2a 01 00 32 04 30 48 60 6c 30 14 01 00 00 0f ac 04 01 00 00 0f ac 04 01 00 00 0f ac 02 0c 00 3b 02 51 00 2d 1a ed 19 1b ff ff ff 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 3d 16 06 00 15 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 7f 08 04 00 00 00 00 00 00 40 dd 18 00 50 f2 02 01 01 80 00 03 a4 00 00 27 a4 00 00 42 43 5e 00 62 32 2f 00
1449978114.910473: nl80211: Frame TX command accepted (no ACK); cookie 0x0
1449978114.910565: nl80211: Drop oldest pending send action cookie 0x0
1449978114.910643: STA 00:22:43:05:14:3c sent probe request for broadcast SSID
1449978114.910767: wlan0: Event EAPOL_TX_STATUS (38) received
1449978114.910814: IEEE 802.1X: 04:f0:21:12:3f:4a TX status - version=2 type=3 length=95 - ack=1
1449978114.910873: WPA: EAPOL-Key TX status for STA 04:f0:21:12:3f:4a ack=1
1449978114.910935: WPA: Increase initial EAPOL-Key 1/4 timeout by 1000 ms because of acknowledged frame
1449978114.911058: VLAN: RTM_NEWLINK: ifi_index=34 ifname=wlan0.sta1 ifi_family=0 ifi_flags=0x1002 ()
1449978114.911139: VLAN: vlan_newlink(wlan0.sta1)
1449978114.911273: VLAN: RTM_NEWLINK: ifi_index=34 ifname=wlan0.sta1 ifi_family=0 ifi_flags=0x1002 ()
1449978114.911337: VLAN: vlan_newlink(wlan0.sta1)
1449978114.911440: VLAN: RTM_NEWLINK: ifi_index=34 ifname=wlan0.sta1 ifi_family=0 ifi_flags=0x1002 ()
1449978114.911519: VLAN: vlan_newlink(wlan0.sta1)
1449978114.911814: VLAN: RTM_NEWLINK: ifi_index=34 ifname=wlan0.sta1 ifi_family=0 ifi_flags=0x1002 ()
1449978114.911924: VLAN: vlan_newlink(wlan0.sta1)
1449978114.912043: VLAN: RTM_NEWLINK: ifi_index=34 ifname=wlan0.sta1 ifi_family=0 ifi_flags=0x1002 ()
1449978114.912116: VLAN: vlan_newlink(wlan0.sta1)
1449978114.912267: VLAN: RTM_NEWLINK: ifi_index=34 ifname=wlan0.sta1 ifi_family=7 ifi_flags=0x1002 ()
1449978114.912531: VLAN: vlan_newlink(wlan0.sta1)
1449978114.912697: VLAN: RTM_NEWLINK: ifi_index=34 ifname=wlan0.sta1 ifi_family=0 ifi_flags=0x11043 ([UP][RUNNING][LOWER_UP])
1449978114.912768: VLAN: vlan_newlink(wlan0.sta1)
1449978114.912887: VLAN: RTM_NEWLINK: ifi_index=34 ifname=wlan0.sta1 ifi_family=7 ifi_flags=0x11043 ([UP][RUNNING][LOWER_UP])
1449978114.912965: VLAN: vlan_newlink(wlan0.sta1)
1449978114.913246: VLAN: RTM_NEWLINK: ifi_index=34 ifname=wlan0.sta1 ifi_family=7 ifi_flags=0x11043 ([UP][RUNNING][LOWER_UP])
1449978114.913344: VLAN: vlan_newlink(wlan0.sta1)
1449978114.913439: VLAN: RTM_NEWLINK: ifi_index=34 ifname=wlan0.sta1 ifi_family=7 ifi_flags=0x11043 ([UP][RUNNING][LOWER_UP])
1449978114.913489: VLAN: vlan_newlink(wlan0.sta1)
1449978114.929786: wlan0: Event EAPOL_RX (24) received
1449978114.929916: IEEE 802.1X: 121 bytes from 04:f0:21:12:3f:4a
1449978114.929996:    IEEE 802.1X: version=1 type=3 length=117
1449978114.930052: WPA: RX EAPOL data - hexdump(len=121): 01 03 00 75 02 01 0a 00 00 00 00 00 00 00 00 00 01 73 95 44 df 09 b2 a7 cb c0 0b 02 e8 db f8 b3 14 45 c9 b9 8f 1d 63 67 5e ec 00 92 54 38 84 e9 45 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 9d 52 00 8f 0d 18 c6 f8 a7 4a 03 bd 00 a0 45 cf 00 16 30 14 01 00 00 0f ac 04 01 00 00 0f ac 04 01 00 00 0f ac 02 00 00
1449978114.930559: WPA: Received EAPOL-Key from 04:f0:21:12:3f:4a key_info=0x10a type=2 mic_len=16 key_data_length=22
1449978114.930658: WPA: EAPOL-Key header (ending before Key MIC) - hexdump(len=77): 02 01 0a 00 00 00 00 00 00 00 00 00 01 73 95 44 df 09 b2 a7 cb c0 0b 02 e8 db f8 b3 14 45 c9 b9 8f 1d 63 67 5e ec 00 92 54 38 84 e9 45 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
1449978114.931070: WPA: EAPOL-Key Key MIC - hexdump(len=16): 9d 52 00 8f 0d 18 c6 f8 a7 4a 03 bd 00 a0 45 cf
1449978114.931183: WPA: Received Key Nonce - hexdump(len=32): 73 95 44 df 09 b2 a7 cb c0 0b 02 e8 db f8 b3 14 45 c9 b9 8f 1d 63 67 5e ec 00 92 54 38 84 e9 45
1449978114.931353: WPA: Received Replay Counter - hexdump(len=8): 00 00 00 00 00 00 00 01
1449978114.931536: 1449978114.931547: wlan0: STA 04:f0:21:12:3f:4a WPA: received EAPOL-Key frame (2/4 Pairwise)

The ap_sta_bind_vlan() is only called once. But with EAP-Enterprise, it is called twice after RADIUS authentication:

1449983548.500274: 1449983548.500281: wlan0: STA 04:f0:21:12:3f:4a IEEE 802.1X: received EAP packet (code=2 id=158 len=43) from STA: EAP Response-PEAP (25)
1449983548.500399: IEEE 802.1X: 04:f0:21:12:3f:4a BE_AUTH entering state RESPONSE
1449983548.500469: EAP: EAP entering state RECEIVED2
1449983548.500514: EAP: parseEapResp: rxResp=1 rxInitiate=0 respId=158 respMethod=25 respVendor=0 respVendorMethod=0
1449983548.500576: EAP: EAP entering state AAA_REQUEST
1449983548.500633: EAP: EAP entering state AAA_IDLE
1449983548.500681: Encapsulating EAP message into a RADIUS packet
1449983548.501003: Copied RADIUS State Attribute
1449983548.501139: 1449983548.501146: wlan0: RADIUS Sending RADIUS message to authentication server
1449983548.501202: RADIUS message: code=1 (Access-Request) identifier=13 length=241
1449983548.501256:    Attribute 1 (User-Name) length=5
1449983548.501305:       Value: 'jli'
1449983548.501350:    Attribute 30 (Called-Station-Id) length=32
1449983548.501409:       Value: '04-F0-21-25-1D-B9:G5acVHT-jeff'
1449983548.501456:    Attribute 61 (NAS-Port-Type) length=6
1449983548.501502:       Value: 19
1449983548.501549:    Attribute 6 (Service-Type) length=6
1449983548.501600:       Value: 2
1449983548.501646:    Attribute 5 (NAS-Port) length=6
1449983548.501694:       Value: 1
1449983548.501740:    Attribute 31 (Calling-Station-Id) length=19
1449983548.501791:       Value: '04-F0-21-12-3F-4A'
1449983548.501834:    Attribute 77 (Connect-Info) length=24
1449983548.501885:       Value: 'CONNECT 54Mbps 802.11g'
1449983548.501930:    Attribute 44 (Acct-Session-Id) length=18
1449983548.501977:       Value: 'C60D8FAB4588CCFE'
1449983548.502025:    Attribute 186 (WLAN-Pairwise-Cipher) length=6
1449983548.502099:       Value: 000fac04
1449983548.502142:    Attribute 187 (WLAN-Group-Cipher) length=6
1449983548.502211:       Value: 000fac04
1449983548.502251:    Attribute 188 (WLAN-AKM-Suite) length=6
1449983548.502316:       Value: 000fac01
1449983548.502351:    Attribute 12 (Framed-MTU) length=6
1449983548.502398:       Value: 1400
1449983548.502442:    Attribute 79 (EAP-Message) length=45
1449983548.502597:       Value: 029e002b19001703010020af2cd2062192d3363bf4f67c04851bb48e60398ba5b16dc315ca904510d2bd33
1449983548.502640:    Attribute 24 (State) length=18
1449983548.502734:       Value: edf6f0bde468e9af1ace3e8f5a4de5af
1449983548.502774:    Attribute 80 (Message-Authenticator) length=18
1449983548.502865:       Value: 856f99023fc68a89799036609b961604
1449983548.503060: 1449983548.503067: wlan0: RADIUS Next RADIUS client retransmit in 3 seconds
1449983548.503776: 1449983548.503783: wlan0: RADIUS Received 165 bytes from RADIUS server
1449983548.503886: 1449983548.503893: wlan0: RADIUS Received RADIUS message
1449983548.503938: RADIUS message: code=2 (Access-Accept) identifier=13 length=165
1449983548.503991:    Attribute 26 (Vendor-Specific) length=58
1449983548.504187:       Value: 0000013711348303acf7df08c15161e1a7d163e80a078a04d4e2475c2cc4b889a34c6ca67303c309b71dd06b4bc5937535e6b04453e5a669
1449983548.504232:    Attribute 26 (Vendor-Specific) length=58
1449983548.504419:       Value: 0000013710348873a04874f89c31398500ed08a4d6ccd2ce551ab0676eabd4434873c488bf27bb9ddd3ece7da31226823cd0e3b91c6672c9
1449983548.504464:    Attribute 79 (EAP-Message) length=6
1449983548.504531:       Value: 039e0004
1449983548.504569:    Attribute 80 (Message-Authenticator) length=18
1449983548.504664:       Value: cfe65958ccf678393a5d7ed7c1247072
1449983548.504705:    Attribute 1 (User-Name) length=5
1449983548.504760:       Value: 'jli'
1449983548.504858: 1449983548.504864: wlan0: STA 04:f0:21:12:3f:4a RADIUS: Received RADIUS packet matched with a pending request, round trip time 0.00 sec
1449983548.505049: RADIUS packet matching with station 04:f0:21:12:3f:4a
==MHX1.0(ap_sta_bind_vlan) sta->flags=0x0000CA83					// After the RADIUS authentication, ap_sta_bind_vlan() is called again. This call has WLAN_STA_WDS flag. And causes wlan0.sta1 disappear.
==MHX1.1(ap_sta_bind_vlan) sta->vlan_id=0. old_vlanid=0
1449983548.505277: 1449983548.505283: wlan0: STA 04:f0:21:12:3f:4a IEEE 802.11: binding station to interface 'wlan0'
==MHX1.3(ap_sta_bind_vlan) wpa_auth_sta_set_vlan() returned ok!
1449983548.505556: nl80211: wlan0[38]: set_sta_vlan(04:f0:21:12:3f:4a, ifname=wlan0[38], vlan_id=0)
==MHX1.4(ap_sta_bind_vlan) ret=hostapd_drv_set_sta_vlan() = 0
1449983548.506239: MS-MPPE-Send-Key - hexdump(len=32): [REMOVED]
1449983548.506291: MS-MPPE-Recv-Key - hexdump(len=32): [REMOVED]
1449983548.506402: 1449983548.506409: wlan0: STA 04:f0:21:12:3f:4a IEEE 802.1X: old identity 'jli' updated with User-Name from Access-Accept 'jli'
1449983548.506514: 1449983548.506520: wlan0: STA 04:f0:21:12:3f:4a IEEE 802.1X: decapsulated EAP packet (code=3 id=158 len=4) from RADIUS server: EAP Success
1449983548.506650: EAP: EAP entering state SUCCESS2
1449983548.506723: IEEE 802.1X: 04:f0:21:12:3f:4a BE_AUTH entering state SUCCESS
1449983548.506829: 1449983548.506835: wlan0: STA 04:f0:21:12:3f:4a IEEE 802.1X: Sending EAP Packet (identifier 158)
1449983548.507053: IEEE 802.1X: 04:f0:21:12:3f:4a BE_AUTH entering state IDLE
1449983548.507190: WPA: 04:f0:21:12:3f:4a WPA_PTK entering state INITPMK
1449983548.507247: WPA: PMK from EAPOL state machine (MSK len=64 PMK len=32)
1449983548.507305: WPA: 04:f0:21:12:3f:4a WPA_PTK entering state PTKSTART
1449983548.507393: 1449983548.507400: wlan0: STA 04:f0:21:12:3f:4a WPA: sending 1/4 msg of 4-Way Handshake



Mar 15,2018
pDDL1800, VCXO difference 2.5ppm, long aggregation length (IEEE80211_HT_MAX_AMPDU_64K = 3 ), t/p=11Mbps. With shorter aggregation length (IEEE80211_HT_MAX_AMPDU_8K = 0), t/p goes up to 19Mbps. This is opposite with pDDL2450 product where the PPM should be very low.
With 2 golden pDDL1800 units of very low PPM, it behaves like pDDL2450, longer aggregation having higher t/p. 
This means 1.8G aggregation can not tolerate higher PPM like 2.4G, which tolerates 25ppm. Because the aggregation has lower chance to sync the receiver's VCO like single frame. In pure 11G mode with sigle frame, there is no this issue.

Mar 14, 2018
nVIP2400 with ath5k driver, in ieee80211_rx_h_michael_mic_verify():

        data = skb->data + hdrlen;
        data_len = skb->len - hdrlen - MICHAEL_MIC_LEN;
        key = &rx->key->conf.key[NL80211_TKIP_DATA_OFFSET_RX_MIC_KEY];
        michael_mic(key, hdr, data, data_len, mic);
        if (memcmp(mic, data + data_len, MICHAEL_MIC_LEN) != 0){
                goto mic_fail;		// always faile here with krack patch.
        }

Change it to
        if (memcmp(mic, data + data_len, MICHAEL_MIC_LEN) != 0){
                printk("==MHX1.2.1(%s)\n", __func__);
                if(rx->key->conf.cipher != WLAN_CIPHER_SUITE_TKIP)
                        goto mic_fail;					// In WPA/TKIP mode, ignore this MICHAEL_MIC_FAILURE
        }


Mar 13, 2018
Compile gcc6.4.0 with configure like "--build=x86_64-linux-gnu --prefix=/home/Jeff/gcc_5_5_0 --enable-checking=release --enable-languages=c,c++,fortran --disable-multilib --program-suffix=-5.5.0" failed because of "-lc of ld command".
Install glibc's static library libc.a and compile gcc5.5.0 still see the same error. Remove the x86_64-linux-gun option and use "../gcc-5.5.0/configure --prefix=/home/Jeff/gcc_5_5_0 --enable-checking=release --enable-languages=c,c++,fortran --disable-multilib --program-suffix=-5.5.0" works.
After make, make install to install to /home/Jeff/gcc_5_5_0/.

Mar 12,2018
LEDE/OpenWrt is using cmake 3.10 now, which needs a support of C++11 that is supported by gcc4.8+. Fedora13 uses "gcc version 4.4.5 20101112 (Red Hat 4.4.5-2) (GCC)".

G5 as AP and VIP4G as STA and BulletPlus(G3) as STA, using PEAP+MSCHAP. G3 can pass the auth but VIP4G fails. Sticking to EAP-TLS step and can not work around. Set up another Ubuntu FreeRadius server and both pass. The cause is that the original radius server (on Windows, v1.1.7) has an outdated Certificate. PEAP+CHAP still needs the TLS as outer layer so VIP4G(hostapd v2.0) can not work around an outdated certificate but the G3(hostapd v2.6) can work around this error situation and go ahead with PEAP-MSCHAP.

This means EAP-PEAP still NEEDS a valid server certificate even thouhgh it will not be used later.

Mar 5, 2018
KRACK fix in VIP4G: 
Ignored : src/rsn_supp/tdls.c, wpa_supplicant/wnm_sta.c
Partially : src/rsn_supp/wpa.c (wpa_wnmsleep_install_key).

VIP4G hostapdv2.0, doesn't define CONFIG_TDLS and CONFIG_IEEE80211R.

Mar 5,2018
In EAP Radius mode, PWii G3 as AP and 2 VIP4G as STAs, all WDS=1. Radius auth passes successfully but sometimes "iw wlan0 station dump" shows 1 VIP4G STA is bound to wlan0 instead of supposed to wlan0.stax (x is aid).

[Solurion] In ap_sta_bind_vlan() function.
int ap_sta_bind_vlan(struct hostapd_data *hapd, struct sta_info *sta)
{

       if (sta->flags & WLAN_STA_WDS)
               return 0;

#ifndef CONFIG_NO_VLAN
....
Seems solves this problem in G5 AP. The cause looks like wpa_auth_sta_set_vlan() or hostapd_drv_set_sta_vlan() can not be called twice. hostapd_drv_set_sta_vlan()--->driver_nl80211_set_sta_vlan()--->i802_set_sta_vlan()--->NL80211_CMD_SET_STATION,NL80211_ATTR_IFINDEX,NL80211_ATTR_STA_VLAN--->nl80211_set_station()--->rdev_change_station()--->rdev->ops->change_station()--->ieee80211_change_station()--->cfg80211_check_station_change()/ ieee80211_send_layer2_update()/sta_apply_parameters().
The root cause of this is that in ieee802_1x_receive_auth(), after the RADIUS auth successfully done, ap_sta_bind_vlan() was called the 2nd time again. This call will move the stations in wlan0.stax out back to wlan0.

Mar 2,2018
mac80211 patch manually added.
hostapd patch is hard to add. Current patch works for hostapd v2.7(used in G5) and hostapd v2.6(used in G3). But VIP4G/nVIP/VIP2 uses hostapd v2.0 which has significant changes with v2.6+. An example is the TDLS can not be applied in rsn_supp/tdls.c. 
From https://github.com/kristate/krackinfo: Access points are only affected, if they implement the standard 802.11r (a.k.a. Fast-BSS Transition). Verified nVIP and VIP2 have no 802.11r support included (CONFIG_IEEE80211R not defined). VIP4G has same hostapd as nVIP&VIP2 so should be the same. This means VIP4G as AP mode doesn't have problems but still vulnerable in STA mode.

Feb 28,2018
Install FreeRadius by System->Administration->Add/Remove Software menus. [Jeff@DENG0080-2 etc]$ sudo radiusd -X to start and debug info.

On the AP side you can enable 4-address frames for individual clients by isolating them in separate AP VLANs which are configured in 4-address mode. Such an AP VLAN will be limited to one client only, and this client will be used as the destination for all traffic on its interface, regardless of the destination MAC address in the packet headers. The advantage of this mode compared to regular WDS mode is that it's easier to configure and does not require a static list of peer MAC addresses on any side. 4-address mode is incompatible with WDS. 

Test : G5BulletAC(AP),168.1, PWiiPX2(G3) as STA, 168.2, WPA2 PSK. On STA ping AP, ping works correctly, AP creates interface wlan0.sta1. capture monitor log on AP:
17:46:15.810424 1989194933us tsft 11.0 Mb/s 2462 MHz 11b -27dB signal antenna 0 117us CF +QoS RA:04:f0:21:25:
1d:c5 TA:00:0f:92:fe:02:f2 DA:ff:ff:ff:ff:ff:ff SA:00:0f:92:02:a9:97 LLC, dsap SNAP (0xaa) Individual, ssap S
NAP (0xaa) Command, ctrl 0x03: oui Ethernet (0x000000), ethertype ARP (0x0806): Ethernet (len 6), IPv4 (len 4
), Request who-has 192.168.168.1 tell 192.168.168.2, length 28		// ARP req from STA


17:46:15.816537 1.0 Mb/s [bit 15] WEP Encrypted 0us RA:00:0f:92:fe:02:f2 TA:04:f0:21:25:1d:c5 DA:00:0f:92:02:
a9:97 SA:00:0f:92:04:b3:0d Data IV:3aaaa Pad 0 KeyID 0			// ARP reply to STA


17:46:15.816667 1989201251us tsft 2462 MHz 11g -37dB signal antenna 0 65.0 Mb/s MCS 7 20 MHz lon GI 44us CF +
QoS RA:04:f0:21:25:1d:c5 TA:00:0f:92:fe:02:f2 DA:00:0f:92:04:b3:0d SA:00:0f:92:02:a9:97 LLC, dsap SNAP (0xaa)
 Individual, ssap SNAP (0xaa) Command, ctrl 0x03: oui Ethernet (0x000000), ethertype IPv4 (0x0800): (tos 0x0,
 ttl 64, id 54492, offset 0, flags [DF], proto ICMP (1), length 84)
    192.168.168.2 > 192.168.168.1: ICMP echo request, id 2745, seq 0, length 64	// ICMP req from STA


17:46:15.817492 1.0 Mb/s [bit 15] WEP Encrypted 0us RA:00:0f:92:fe:02:f2 TA:04:f0:21:25:1d:c5 DA:00:0f:92:02:
a9:97 SA:00:0f:92:04:b3:0d Data IV:3aaaa Pad 0 KeyID 0				// ICMP reply to STA


17:46:16.199298 1989583885us tsft bad-fcs 2462 MHz 11g -70dB signal antenna 0 65.0 Mb/s MCS 7 20 MHz lon GI W
EP Encrypted 40239us CF Ack BSSID:0e:7c:fc:c8:ae:66 SA:49:7b:63:51:3f:25 DA:b1:6c:2f:e9:08:af 

17:46:16.810572 1990195088us tsft 2462 MHz 11g -28dB signal antenna 0 72.2 Mb/s MCS 7 20 MHz short GI 44us CF
 +QoS RA:04:f0:21:25:1d:c5 TA:00:0f:92:fe:02:f2 DA:00:0f:92:04:b3:0d SA:00:0f:92:02:a9:97 LLC, dsap SNAP (0xa
a) Individual, ssap SNAP (0xaa) Command, ctrl 0x03: oui Ethernet (0x000000), ethertype IPv4 (0x0800): (tos 0x
0, ttl 64, id 54493, offset 0, flags [DF], proto ICMP (1), length 84)
    192.168.168.2 > 192.168.168.1: ICMP echo request, id 2745, seq 1, length 64	// ICMP req from STA


17:46:16.812065 1.0 Mb/s [bit 15] WEP Encrypted 0us RA:00:0f:92:fe:02:f2 TA:04:f0:21:25:1d:c5 DA:00:0f:92:02:
a9:97 SA:00:0f:92:04:b3:0d Data IV:3aaaa Pad 0 KeyID 0				// ICMP reply to STA

In this working scenario, ARP addresses are:
RA:04:f0:21:25:1d:c5 	AP wlan0.sta1 MAC
TA:00:0f:92:fe:02:f2 	STA wlan0 MAC
DA:ff:ff:ff:ff:ff:ff 	Broadcast
SA:00:0f:92:02:a9:97	STA br-lan MAC

Change to DHCP scenario, capture monitor interface on AP:
18:17:26.772761 3860133010us tsft 2462 MHz 11g -36dB signal antenna 0 72.2 Mb/s MCS 7 20 MHz short GI 44us CF
 +QoS RA:04:f0:21:25:1d:c5 TA:00:0f:92:fe:02:f2 DA:ff:ff:ff:ff:ff:ff SA:00:0f:92:02:a9:97 LLC, dsap SNAP (0xa
a) Individual, ssap SNAP (0xaa) Command, ctrl 0x03: oui Ethernet (0x000000), ethertype IPv4 (0x0800): (tos 0x
0, ttl 64, id 0, offset 0, flags [none], proto UDP (17), length 328)
    0.0.0.0.68 > 255.255.255.255.67: BOOTP/DHCP, Request from 00:0f:92:02:a9:97, length 300, xid 0x181c6ba6, 
Flags [none]
          Client-Ethernet-Address 00:0f:92:02:a9:97
          Vendor-rfc1048 Extensions
            Magic Cookie 0x63825363
            DHCP-Message Option 53, length 1: Discover
            MSZ Option 57, length 2: 576
            Parameter-Request Option 55, length 7: 
              Subnet-Mask, Default-Gateway, Domain-Name-Server, Hostname
              Domain-Name, BR, NTP
            Vendor-Class Option 60, length 12: "udhcp 1.22.1"
            Hostname Option 12, length 10: "UserDevice"

RA:04:f0:21:25:1d:c5 	AP wlan0.sta1 MAC
TA:00:0f:92:fe:02:f2 	STA wlan0 MAC
DA:ff:ff:ff:ff:ff:ff 	Broadcast
SA:00:0f:92:02:a9:97	STA br-lan MAC

ON the AP wlan0.sta1, DHCP req can be seen properly:
18:17:26.772913 00:0f:92:02:a9:97 > ff:ff:ff:ff:ff:ff, ethertype IPv4 (0x0800), length 342: (tos 0x0, ttl 64, id 0, offset 0, flags [none], proto UDP (17), length 328)
    0.0.0.0.68 > 255.255.255.255.67: BOOTP/DHCP, Request from 00:0f:92:02:a9:97, length 300, xid 0x181c6ba6, Flags [none]
	  Client-Ethernet-Address 00:0f:92:02:a9:97
	  Vendor-rfc1048 Extensions
	    Magic Cookie 0x63825363
	    DHCP-Message Option 53, length 1: Discover
	    MSZ Option 57, length 2: 576
	    Parameter-Request Option 55, length 7: 
	      Subnet-Mask, Default-Gateway, Domain-Name-Server, Hostname
	      Domain-Name, BR, NTP
	    Vendor-Class Option 60, length 12: "udhcp 1.22.1"
	    Hostname Option 12, length 10: "UserDevice"


In another test scenario, G5BulletAC(AP),169.1, VIP4G(G1) as STA, DHCP, WPA2 Enterprise. STA can not get IP from AP. AP creates interface wlan0.sta1 but no ARP req is seen on this interface. capture monitor log on AP, and analyze the DHCP request packet:
RA:04:f0:21:25:1d:c5 	AP wlan0.sta1 MAC
TA:04:f0:21:02:37:c8 	STA wlan0 MAC
DA:ff:ff:ff:ff:ff:ff 	Broadcast
SA:04:f0:21:02:37:c8	STA wlan0 MAC		// this supposed to be STA br-lan MAC!!!??? Looks like VIP4G sending a wrong SA???

But if change to WPA2 PSK instead of EAP, STA can get DHCP address successfully and STA pin AP successfully. AP monitor interface shows:
19:56:38.280570 1221612959us tsft 2462 MHz 11g -61dB signal antenna 0 58.5 Mb/s MCS 6 20 MHz lon GI Retry 44u
s CF +QoS RA:04:f0:21:25:1d:c5 TA:04:f0:21:03:e9:f7 DA:ff:ff:ff:ff:ff:ff SA:04:f0:21:03:e9:f7 LLC, dsap SNAP 
(0xaa) Individual, ssap SNAP (0xaa) Command, ctrl 0x03: oui Ethernet (0x000000), ethertype IPv4 (0x0800): (to
s 0x0, ttl 64, id 0, offset 0, flags [none], proto UDP (17), length 389)
    0.0.0.0.68 > 255.255.255.255.67: BOOTP/DHCP, Request from 04:f0:21:03:e9:f7, length 361, xid 0x3cab9c24, 
Flags [none]
          Client-Ethernet-Address 04:f0:21:03:e9:f7
          Vendor-rfc1048 Extensions
            Magic Cookie 0x63825363
            DHCP-Message Option 53, length 1: Discover
            Client-ID Option 61, length 7: ether da:8b:d5:40:94:c3
            Vendor-Class Option 60, length 12: "udhcp 1.15.3"
            MSZ Option 57, length 2: 576
            Parameter-Request Option 55, length 8: 
              Subnet-Mask, Default-Gateway, Domain-Name-Server, Hostname
              Domain-Name, RP, BR, NTP
RA:04:f0:21:25:1d:c5 	AP wlan0.sta1 MAC
TA:04:f0:21:03:e9:f7 	STA wlan0 MAC
DA:ff:ff:ff:ff:ff:ff 	Broadcast
SA:04:f0:21:03:e9:f7	STA wlan0 MAC		// this supposed to be STA br-lan MAC!!!??? Looks like VIP4G sending a wrong SA??? Actually this is the same as br-wan3 bridge 							// MAC. br-wan3 has only one interface wlan0 so that they have same MACs
So far looks like not 4addr isssue, because WPA2 PSK w/ WDS=1 works fine.

Feb 27,2018
Looks like ns1 relays REP from ns3 to ns1 with a wrong hop_count. Here is a dump on ns1:

<0>[ 7222.470000] ==MHX4.0(hwmp_route_info_get)
<0>[ 7222.470000] ==MHX1.2(airtime_link_metric_get) tx_time=32528, err=0, estimated_retx=256,sta->bitrate_avg=64982, sta->fail_avg=0. signal=39. result(metric)=83
<0>[ 7222.470000] ==MHX4.1(hwmp_route_info_get) action=1, from STA=[fa:80:82], whose last_hop_metric=83
<0>[ 7222.470000] ==MHX4.2.1(hwmp_route_info_get) orig_addr=[00:6c:45], IE dump : orig_sn=74, orig_lifetime=5859, orig_metric=106, orig_hop=0.And new_metric=189.//orig_hop from ns2 should be 1 instead of 0.
<0>[ 7222.470000] ===MHX6.1(mpath_lookup) Looking for dst=[00:6c:45]
<0>[ 7222.470000] ==MHX4.2.2(hwmp_route_info_get) mpath to orig_addr exists : flags=0x00000007, sn=74, metric=189 .
<0>[ 7222.470000] ==MHX4.2.4(hwmp_route_info_get) first fresh_info=1.
<0>[ 7222.470000] ==MHX4.2.5(hwmp_route_info_get) Updating orig_addr's mpath next_hop and other info and TX pending mpath Q.
<0>[ 7222.470000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[00:6c:45], next_hop=[fa:80:82],flag=0x00000017,orig_sn=74, metric=189,exp_time=692847, hop=1
<0>[ 7222.470000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:80:82]
<0>[ 7222.470000] ==MHX4.4.0(hwmp_route_info_get) mpath to SA exists : flags=0x00000011, sn=0, metric=84 .
<0>[ 7222.470000] ==MHX4.4.2(hwmp_route_info_get) second fresh_info=1.
<0>[ 7222.470000] ==MHX4.4.3(hwmp_route_info_get) Updating SA's mpath next_hop and other info and TX pending mpath Q.
<0>[ 7222.470000] ==MHX4.5(hwmp_route_info_get) mpath to SA=[fa:80:82], next_hop=[fa:80:82],flag=0x00000011,sn=0, metric=83,exp_time=692847.hop=1
<7>[ 7222.470000] wlan0: received PREP from 00:0f:92:00:6c:45

Feb 26, 2018
WPA2 Enterprise, TLS, certificate fails. Cause: The STA side hase a wrong system time, which invalidate the certificate that has a validate period. In a system that uses certificate, pay attention to the valid period of the certificate.

And a logic for inactive mpath in hwmp_route_info_get():
			else if (!(mpath->flags & MESH_PATH_ACTIVE)) {
				if(new_metric >= mpath->metric)  {
					process = false;
					fresh_info = false;
				}
			}

This caused a problem. When n1 directly talks to n3 but n3 suddenly hides. A link n1->n2->n3 will never establish. Because the direct metric n1->n3 is always lower than the metric m1->n2 + n2->n3. This causes a connection loss. 

Looks like the bumpy mpath when n1,n2,n3 all have fair connection is not avoidable. The root cause is the periodic inactive mpath refresh.

=================================================
Symptom : 
1. On n1, use "root@UserDevice:~# while true; do cat sys/kernel/debug/ieee80211/phy0/netdev\:wlan0/destinations/00\:0f\:92\:00\:6c\:45/path_stats ;sleep 1;done" command and see the hop to n3 is not stable , 1 and 2 random.
2. ON n1, use "root@UserDevice:~# while true; do iw wlan0 mpath dump;sleep 1;done" command and see the mpath is always n1-->n2-->n3, no n1-->n3 direct connection. So the hop should be always 2 instead of 1.
From the debug info on n1:

<0>[ 6704.960000] ==MHX4.0(hwmp_route_info_get)
<0>[ 6704.960000] ==MHX1.2(airtime_link_metric_get) tx_time=32528, err=245, estimated_retx=5957,sta->bitrate_avg=64982, sta->fail_avg=96. signal=79. result(metric)=1518
<0>[ 6704.960000] ==MHX4.1(hwmp_route_info_get) action=1, from STA=[00:6c:45], whose last_hop_metric=1518	// received REP from n3 directly, eventhough hign metric.
<0>[ 6704.960000] ==MHX4.2.1(hwmp_route_info_get) orig_addr=[00:6c:45], IE dump : orig_sn=1131, orig_lifetime=5859, orig_metric=0, orig_hop=0.And new_metric=1518.
<0>[ 6704.960000] ===MHX6.1(mpath_lookup) Looking for dst=[00:6c:45]
<0>[ 6704.960000] ==MHX4.2.2(hwmp_route_info_get) mpath to orig_addr exists : flags=0x00000007, sn=1125, metric=184 .
<0>[ 6704.960000] ==MHX4.2.4(hwmp_route_info_get) first fresh_info=0.		// skip orig update
<0>[ 6704.960000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[00:6c:45], next_hop=[fa:80:82],flag=0x00000007,orig_sn=1131, metric=184,exp_time=640595, hop=1
<0>[ 6704.960000] ==MHX4.5(hwmp_route_info_get) mpath to SA=[00:6c:45], next_hop=[fa:80:82],flag=0x00000007,sn=1125, metric=184,exp_time=640595.hop=1	//skip tx update, wrong hop

But sometimes, even though n1 receives n3 directly, but the hop is correct, like below info in n1:

<0>[ 8175.420000] ==MHX4.0(hwmp_route_info_get)
<0>[ 8175.420000] ==MHX1.2(airtime_link_metric_get) tx_time=32528, err=0, estimated_retx=256,sta->bitrate_avg=64982, sta->fail_avg=0. signal=37. result(metric)=82
<0>[ 8175.420000] ==MHX4.1(hwmp_route_info_get) action=0, from STA=[fa:80:82], whose last_hop_metric=82
<0>[ 8175.420000] ==MHX4.2.1(hwmp_route_info_get) orig_addr=[00:6c:45], IE dump : orig_sn=1513, orig_lifetime=5859, orig_metric=99, orig_hop=1.And new_metric=181.
<0>[ 8175.420000] ===MHX6.1(mpath_lookup) Looking for dst=[00:6c:45]
<0>[ 8175.420000] ==MHX4.2.2(hwmp_route_info_get) mpath to orig_addr exists : flags=0x00000015, sn=1512, metric=183 .
<0>[ 8175.420000] ==MHX4.2.4(hwmp_route_info_get) first fresh_info=1.
<0>[ 8175.420000] ==MHX4.2.5(hwmp_route_info_get) Updating orig_addr's mpath next_hop and other info and TX pending mpath Q.
<0>[ 8175.420000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[00:6c:45], next_hop=[fa:80:82],flag=0x00000015,orig_sn=1513, metric=181,exp_time=788142, hop=2

<0>[ 8175.420000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:80:82]
<0>[ 8175.420000] ==MHX4.4.0(hwmp_route_info_get) mpath to SA exists : flags=0x00000015, sn=16, metric=83 .
<0>[ 8175.420000] ==MHX4.4.2(hwmp_route_info_get) second fresh_info=1.
<0>[ 8175.430000] ==MHX4.4.3(hwmp_route_info_get) Updating SA's mpath next_hop and other info and TX pending mpath Q.
<0>[ 8175.430000] ==MHX4.5(hwmp_route_info_get) mpath to SA=[fa:80:82], next_hop=[fa:80:82],flag=0x00000015,sn=16, metric=82,exp_time=788142.hop=1
<0>[ 8175.430000] ==MHX2.1(ieee80211s_update_metric)To STA[fa:80:82].rate=650, retry=0, failed=0,sta->fail_avg=0,sta->bitrate_avg=64982
<7>[ 8175.430000] wlan0: received PREQ from 00:0f:92:00:6c:45
......
<0>[ 8175.730000] ==MHX4.0(hwmp_route_info_get)
<0>[ 8175.730000] ==MHX1.2(airtime_link_metric_get) tx_time=32528, err=245, estimated_retx=5957,sta->bitrate_avg=64982, sta->fail_avg=96. signal=75. result(metric)=1516
<0>[ 8175.730000] ==MHX4.1(hwmp_route_info_get) action=0, from STA=[00:6c:45], whose last_hop_metric=1516
<0>[ 8175.730000] ==MHX4.2.1(hwmp_route_info_get) orig_addr=[00:6c:45], IE dump : orig_sn=1513, orig_lifetime=5859, orig_metric=0, orig_hop=0.And new_metric=1516.
<0>[ 8175.730000] ===MHX6.1(mpath_lookup) Looking for dst=[00:6c:45]
<0>[ 8175.730000] ==MHX4.2.2(hwmp_route_info_get) mpath to orig_addr exists : flags=0x00000015, sn=1513, metric=181 .
<0>[ 8175.730000] ==MHX4.2.4(hwmp_route_info_get) first fresh_info=0.
<0>[ 8175.730000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[00:6c:45], next_hop=[fa:80:82],flag=0x00000015,orig_sn=1513, metric=181,exp_time=788142, hop=2
<0>[ 8175.730000] ==MHX4.5(hwmp_route_info_get) mpath to SA=[00:6c:45], next_hop=[fa:80:82],flag=0x00000015,sn=1513, metric=181,exp_time=788142.hop=2

So the root cause should be, n1 still gets direct packet from n3 even though the mpath doesn't look so. The trick is "while true; do cat sys/kernel/debug/ieee80211/phy0/netdev\:wl
an0/destinations/00\:0f\:92\:00\:6c\:45/path_stats ;sleep 1;done" command shows an insteable hop count, that means a direct link must exist. The "iw mpath dump" command doesn't tell all story behind. And the hop count is not accountable. 


Feb 22, 2018
"iw wlan0 mpath dump" command sometimes miss some intermediate result like below:

00:0f:92:00:6c:45 00:0f:92:00:6c:45 wlan0       1711    102     0       2110    300     0       0x5
00:0f:92:fa:80:82 00:0f:92:fa:80:82 wlan0       0       86      0       2110    0       0       0x11
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRET  S
00:0f:92:00:6c:45 00:0f:92:00:6c:45 wlan0       1711    102     0       1090    300     0       0x5
00:0f:92:fa:80:82 00:0f:92:fa:80:82 wlan0       0       86      0       1090    0       0       0x11
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRET  S
00:0f:92:00:6c:45 00:0f:92:fa:80:82 wlan0       1713    193     0       5650    300     0       0x5
00:0f:92:fa:80:82 00:0f:92:fa:80:82 wlan0       0       86      0       5650    0       0       0x11
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRET  S
00:0f:92:00:6c:45 00:0f:92:fa:80:82 wlan0       1713    193     0       4630    300     0       0x5
00:0f:92:fa:80:82 00:0f:92:fa:80:82 wlan0       0       86      0       4630    0       0       0x11

The mpath to "00:0f:92:00:6c:45" changes from SN1711 to 00:0f:92:fa:80:82 in SN1713 and the metric increases from 102 to 193, which is strange. The reason:

1. From debug info, the mpath's flag becomes INACTIVE so that a new bigger metric can even update the old smaller metric. The mpath becomes INACTIVE periodically based on mesh_hwmp_active_path_timeout parameter.

2. From debug info, the SN1712 exists but not shown by iw command:
<0>[10760.790000] ==MHX4.0(hwmp_route_info_get)
<0>[10760.790000] ==MHX1.2(airtime_link_metric_get) tx_time=32528, err=245, estimated_retx=5957,sta->bitrate_avg=64982, sta->fail_avg=96. signal=68. result(metric)=1512
<0>[10760.790000] ==MHX4.1(hwmp_route_info_get) action=1, from STA=[00:6c:45], whose last_hop_metric=1512
<0>[10760.790000] ==MHX4.2.1(hwmp_route_info_get) orig_addr=[00:6c:45], IE dump : orig_sn=1712, orig_lifetime=5859, orig_metric=0.And new_metric=1512.
<0>[10760.790000] ===MHX6.1(mpath_lookup) Looking for dst=[00:6c:45]
<0>[10760.790000] ==MHX4.2.2(hwmp_route_info_get) mpath to orig_addr exists : flags=0x00000006, sn=1712, metric=102 .
<0>[10760.790000] ==MHX4.2.4(hwmp_route_info_get) first fresh_info=1.
<0>[10760.790000] ==MHX4.2.5(hwmp_route_info_get) Updating orig_addr's mpath next_hop and other info and TX pending mpath Q.
<0>[10760.790000] ==MHX5.1(mesh_path_assign_nexthop) Change next_hop of the Q-ed mpath frames : addr1(DA)=[00:6c:45], addr2(SA)=[fa:98:b8]
<0>[10760.790000] ==MHX5.1(mesh_path_assign_nexthop) Change next_hop of the Q-ed mpath frames : addr1(DA)=[00:6c:45], addr2(SA)=[fa:98:b8]
<0>[10760.790000] ==MHX5.1(mesh_path_assign_nexthop) Change next_hop of the Q-ed mpath frames : addr1(DA)=[00:6c:45], addr2(SA)=[fa:98:b8]
<0>[10760.790000] ==MHX5.1(mesh_path_assign_nexthop) Change next_hop of the Q-ed mpath frames : addr1(DA)=[00:6c:45], addr2(SA)=[fa:98:b8]
<0>[10760.790000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[00:6c:45], next_hop=[00:6c:45],flag=0x00000017,orig_sn=1712, metric=1512,exp_time=1046679, hop=1
<0>[10760.790000] ==MHX4.5(hwmp_route_info_get) mpath to SA=[00:6c:45], next_hop=[00:6c:45],flag=0x00000017,sn=1712, metric=1512,exp_time=1046679.hop=1
<7>[10760.790000] wlan0: received PREP from 00:0f:92:00:6c:45

The SN1712's metric becomes 1512 from 102 and is updated by SN1713 by metric=193. Why M1512 can replace M102? Because the mpath SN1711 is becomes inactive at that time (flag=0x6). 

3. Shis shouldn't be a bug. Because, if this udpate is wrong, the next PREQ/PREP from another node will correct this soon. But, if the other PREP/PREQ is lost (suppose should be received), the correction will not happen and the wrong update keeps there.
----This guess is wrong. The PREP is unicast not broadcast like PREQ. So a node only gets ONE PREP from ONE node.

Feb 12, 2018
Verify on ALphaK
CP=4.69mA In AlphaK
LO Freq		LD		Spectrum Analyzer
500M		1		V
1G		1		V
1.5G		1		V		// unstable, sometimes LD=wafeform and output not locked.
2G		1		V
2.2G		1		V
2.4G		1		V
2.8G		0		Looks normal at 2.8G	// used 5mA same result
2.9G		1		A bit higher than 2.9G

However AlfaK needs 900MHz~930MHz, IF=2391. LO=3291~3321, CP=4.69mA
LO Freq		LD on scope		Change CP to 5mA
3281MHz		SW			1
3291MHz		SW			
3301MHz		SW	// unstable???
3311MHz		SW
3321MHz		SW
3331MHz		SW


Feb 8, 2018
AlfaK idt8v97051:
Pin6, Vcp=2.73V while Pin10 Vdda=3.0V. Alex's board has same values(2.74V and 3.0V) but it works. From spec, Pin10 Vdda ranges from 3.3V ± 5% (3.135 to 3.465). Weird design.

Solution: For AlphaK board, available ICP settings are 1101,1110 and 1111. But all 16 settings work in Eval board. Maybe because of the low Vcp.

Jan 31, 2018
AR9341 AlphaK. GPIO22 used as synthersizer's CS/. 
root@UserDevice:~# mhx -reg set 0xb8040040 0x700	// Set GPIO22 mux to SPI_CS1/. Or 0x800 to SPI_CS2/. Or 0x400 to SLIC_DATA_OUT whatever.
root@UserDevice:~# mhx -reg get 0xb8040040
Register 0xb8040040 has value 0x00000700
root@UserDevice:~# while true; do mhx -reg set 0xb8040008 0x00660019;sleep 1;mhx -reg set 0xb8040008 0x00260019;sleep 1;done	// GPIO22 still shows waveform which means it still works as GPIO not SPI_CS/.

Use the following command can not see any waveform on GPIO22 as SPI_CS1/.
root@UserDevice:~# mhx -reg set 0xb8040040 0x700
root@UserDevice:~# while true; do modprobe idt8v97051;sleep 2; rmmod idt8v97051;sleep 2;date;done

Jan 30, 2018
Add idt8v97051 synthesizer driver to AlphaK.

1. In drivers/iio/frequency/Kconfig, add:
menu "Wideband RF Synthesizer / PLL"

config IDT8V97051
        tristate "IDT8v97051 Wideband Synthesizers"
        depends on SPI
        help
          Say yes here to build support for IDT8V97051
          Wideband Synthesizers. The driver provides direct access via sysfs.

          To compile this driver as a module, choose M here: the
          module will be called idt8v97051.

endmenu

In make kernel_menuconfig, choose DeviceDrivers--->(*)Industrial I/O support--->FrequencySynthesizersDDS/PLL--->Wideband RF Synthesizer / PLL--->(M)IDT8v97051 Wideband Synthesizers. Note, here we can choose "M"

2. Modify package/kernel/linux/modules/spi.mk, add:
define KernelPackage/spi-synthesizer-idt8v97051
  SUBMENU:=$(SPI_MENU)
  TITLE:=Synthesizer IDT8V97051 IIO driver
  KCONFIG:=CONFIG_IDT8V97051
  DEPENDS:=
  FILES:=$(LINUX_DIR)/drivers/iio/frequency/idt8v97051.ko
  AUTOLOAD:=$(call AutoLoad,idt8v97051)
  # AUTOLOAD:=$(call AutoLoad,90,idt8v97051) this will create root-ar71xx/etc/modules.d/90-spi-synthesizer-idt8v97051 to load the .ko during boot-up.
endef

define KernelPackage/spi-synthesizer-idt8v97051/description
 This package is the kernel module driver for SPI synthesizer IDT8V97051
endef

$(eval $(call KernelPackage,spi-synthesizer-idt8v97051))

In make menuconfig, choose Kernel Modules--->SPI Support--->(*)kmod-spi-synthesizer-idt8v97051. NOTE: here, if you want to install the .ko to target rootfs, you can NOT choose "M". Must choose "*".


Check in basic build for AlphyK(pMDDL900), still not in C coding level, still use "make -f Makefile.ddl2 DDL2=1 PMDDL2350=1 V=99" to make f/w.


Jan 29, 2018
A loop mpath found because of the unsymmetrical path. 

Jan 25, 2018
Found an issue for only using RSSI as metric. When M1 to M3 has a very bad signal like -90dBm and low t/p as low as 900Kbps, the metric M1->3 is calculated about 7000. While M1 to M2 and M2 to M3 have good signal of -70dBm, metric being 4000, so the mpath M1->2->3 has a much better t/p like 9Mbps. But the metric M1->3=M1->2 + M2->3=8000 > 7000, so the mpath M1 to M3 still stays in the direct connection with poorer t/p. 

Jan 23, 2018
Symptom : PC1-->MP1~~~MP2~~~MP3-->PC2, mpath goes through MP2, the iperf UDP t/p breaks down randomly. During down time, the MP2 stops sending data while MP1 is still pushing. 
-------------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRET    FLAGS
00:0f:92:00:6c:45 00:0f:92:00:6c:45 wlan0       498     991562  0       0       100     0       0x14
00:0f:92:fa:98:b8 00:0f:92:fa:98:b8 wlan0       579     915000  0       4270    200     1       0x15
-------------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRET    FLAGS
00:0f:92:00:6c:45 00:0f:92:00:6c:45 wlan0       498     991562  0       0       100     0       0x14			// Flag shows MP2->MP3 mpath is not active.
00:0f:92:fa:98:b8 00:0f:92:fa:98:b8 wlan0       579     915000  0       3250    200     1       0x15
-------------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRET    FLAGS
00:0f:92:00:6c:45 00:0f:92:00:6c:45 wlan0       500     991562  0       10680   100     0       0x15			// MP2->MP3 mpath turns to active. SN jumped 2
00:0f:92:fa:98:b8 00:0f:92:fa:98:b8 wlan0       580     945000  0       10680   200     1       0x15
-------------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRET    FLAGS
00:0f:92:00:6c:45 00:0f:92:00:6c:45 wlan0       500     991562  0       9650    100     0       0x15
00:0f:92:fa:98:b8 00:0f:92:fa:98:b8 wlan0       580     945000  0       9650    200     1       0x15
-------------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRET    FLAGS
00:0f:92:00:6c:45 00:0f:92:00:6c:45 wlan0       500     991562  0       8630    100     0       0x15
00:0f:92:fa:98:b8 00:0f:92:fa:98:b8 wlan0       580     945000  0       8630    200     1       0x15
-------------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRET    FLAGS
00:0f:92:00:6c:45 00:0f:92:00:6c:45 wlan0       500     991562  0       7600    100     0       0x15
00:0f:92:fa:98:b8 00:0f:92:fa:98:b8 wlan0       580     945000  0       7600    200     1       0x15
-------------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRET    FLAGS
00:0f:92:00:6c:45 00:0f:92:00:6c:45 wlan0       500     991562  0       6580    100     0       0x15
00:0f:92:fa:98:b8 00:0f:92:fa:98:b8 wlan0       580     945000  0       6580    200     1       0x15
-------------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRET    FLAGS
00:0f:92:00:6c:45 00:0f:92:00:6c:45 wlan0       500     991562  0       5550    100     0       0x15
00:0f:92:fa:98:b8 00:0f:92:fa:98:b8 wlan0       580     945000  0       5550    200     1       0x15
-------------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRET    FLAGS
00:0f:92:00:6c:45 00:0f:92:00:6c:45 wlan0       500     991562  0       4520    100     0       0x15
00:0f:92:fa:98:b8 00:0f:92:fa:98:b8 wlan0       580     945000  0       4520    200     1       0x15
-------------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRET    FLAGS
00:0f:92:00:6c:45 00:0f:92:00:6c:45 wlan0       500     991562  0       3500    100     0       0x15
00:0f:92:fa:98:b8 00:0f:92:fa:98:b8 wlan0       580     945000  0       3500    200     1       0x15
-------------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRET    FLAGS
00:0f:92:00:6c:45 00:0f:92:00:6c:45 wlan0       500     991562  0       2470    100     0       0x15
00:0f:92:fa:98:b8 00:0f:92:fa:98:b8 wlan0       581     945000  0       10720   200     1       0x15
-------------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRET    FLAGS
00:0f:92:00:6c:45 00:0f:92:00:6c:45 wlan0       500     991562  0       1450    100     0       0x15
00:0f:92:fa:98:b8 00:0f:92:fa:98:b8 wlan0       581     945000  0       9700    200     1       0x15
-------------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRET    FLAGS
00:0f:92:00:6c:45 00:0f:92:00:6c:45 wlan0       500     991562  0       430     100     0       0x15
00:0f:92:fa:98:b8 00:0f:92:fa:98:b8 wlan0       581     945000  0       8680    200     1       0x15
-------------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRET    FLAGS
00:0f:92:00:6c:45 00:0f:92:00:6c:45 wlan0       500     991562  0       0       100     0       0x14		// Afte 11 seconds(mesh_hwmp_active_path_timeout = 11000 TUs), mpath invalidate and refresh. inactive
00:0f:92:fa:98:b8 00:0f:92:fa:98:b8 wlan0       581     945000  0       7650    200     1       0x15
-------------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRET    FLAGS
00:0f:92:00:6c:45 00:0f:92:00:6c:45 wlan0       500     991562  0       0       100     0       0x14
00:0f:92:fa:98:b8 00:0f:92:fa:98:b8 wlan0       581     945000  0       6630    200     1       0x15
-------------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRET    FLAGS
00:0f:92:00:6c:45 00:0f:92:00:6c:45 wlan0       500     991562  0       0       100     0       0x14
00:0f:92:fa:98:b8 00:0f:92:fa:98:b8 wlan0       581     945000  0       5600    200     1       0x15
-------------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRET    FLAGS
00:0f:92:00:6c:45 00:0f:92:00:6c:45 wlan0       500     991562  0       0       100     0       0x14
00:0f:92:fa:98:b8 00:0f:92:fa:98:b8 wlan0       581     945000  0       4580    200     1       0x15
-------------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRET    FLAGS
00:0f:92:00:6c:45 00:0f:92:00:6c:45 wlan0       500     991562  0       0       100     0       0x14
00:0f:92:fa:98:b8 00:0f:92:fa:98:b8 wlan0       581     945000  0       3550    200     1       0x15
-------------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRET    FLAGS
00:0f:92:00:6c:45 00:0f:92:00:6c:45 wlan0       500     991562  0       0       100     0       0x14
00:0f:92:fa:98:b8 00:0f:92:fa:98:b8 wlan0       582     795000  0       10850   200     1       0x15
-------------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRET    FLAGS
00:0f:92:00:6c:45 00:0f:92:00:6c:45 wlan0       500     991562  0       0       100     0       0x14
00:0f:92:fa:98:b8 00:0f:92:fa:98:b8 wlan0       583     795000  0       10430   200     1       0x15
-------------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRET    FLAGS
00:0f:92:00:6c:45 00:0f:92:00:6c:45 wlan0       500     991562  0       0       100     0       0x14
00:0f:92:fa:98:b8 00:0f:92:fa:98:b8 wlan0       584     795000  0       10200   200     1       0x15
-------------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRET    FLAGS
00:0f:92:00:6c:45 00:0f:92:00:6c:45 wlan0       505     1169687 0       10780   100     0       0x15		// mpath can't be refreshed until 8seconds later. Flag shows active but SN lost 5.
00:0f:92:fa:98:b8 00:0f:92:fa:98:b8 wlan0       585     795000  0       10780   200     1       0x15
-------------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRET    FLAGS
00:0f:92:00:6c:45 00:0f:92:00:6c:45 wlan0       505     1169687 0       9760    100     0       0x15
00:0f:92:fa:98:b8 00:0f:92:fa:98:b8 wlan0       585     795000  0       9760    200     1       0x15

When the mpath is not active, data frames will not be transmitted. What makes a mpath inactive? 1. expired by mesh_hwmp_active_path_timeout; 2. PERR message when too many fails.

Jan 18,2018
PWii board, the etc/rc.d/S03mh-preinit can not be executed. Turns out that there is a gramatic error in this shell script about "elif". If an sentence error is found before interferating this script, the script will not be run even a single line.

Jan 10, 2018
AR9331 CPU/DDL/AHB frequency setup in u-Boot.

#define AR933X_PLL_CPU_CONFIG_REG	0x00
#define AR933X_PLL_CLOCK_CTRL_REG	0x08

#define AR933X_PLL_CPU_CONFIG_NINT_SHIFT	10
#define AR933X_PLL_CPU_CONFIG_NINT_MASK		0x3f
#define AR933X_PLL_CPU_CONFIG_REFDIV_SHIFT	16
#define AR933X_PLL_CPU_CONFIG_REFDIV_MASK	0x1f
#define AR933X_PLL_CPU_CONFIG_OUTDIV_SHIFT	23
#define AR933X_PLL_CPU_CONFIG_OUTDIV_MASK	0x7

#define AR933X_PLL_CLOCK_CTRL_CPU_DIV_SHIFT	5
#define AR933X_PLL_CLOCK_CTRL_CPU_DIV_MASK	0x3

#define AR933X_PLL_CLOCK_CTRL_DDR_DIV_SHIFT	10
#define AR933X_PLL_CLOCK_CTRL_DDR_DIV_MASK	0x3

#define AR933X_PLL_CLOCK_CTRL_AHB_DIV_SHIFT	15
#define AR933X_PLL_CLOCK_CTRL_AHB_DIV_MASK	0x7

1. board/ar7240/common/lowlevel_init.c : doesn't do any settings. It is bypassed actually
2. board/ar7240/ap121/hornet_pll_init.S : This is the real place to init clocks. There are 2 values:
	CPU_PLL_CONFIG_VAL2 : This is set to AR7240_CPU_PLL_CONFIG(0xb8050000). CPU_PLL_CONFIG_VAL1 is just a mimic of CPU_PLL_CONFIG_VAL2 to power down PLL before setting PLL register.
	CPU_CLK_CONTROL_VAL2 : This is set to AR933X_PLL_CLOCK_CTRL_REG(0xb8050008). For CPU_POST_DIV,DDR_POST_DIV, and AHB_POST_DIV. Default is 0x00008000, CPU_POST_DIV=DDR_POST_DIV=1, AHB_POST_DIV=2.
3. For frequency of CPU, DDR and AHB:
	Freq = (((F_REF * DIV_INT)/REFDIV) >> OUTDIV) / POST_DIV
4. Default frequency is 400_400_200.
	Test 200_200_100_12(SPI) : Eth port doesn't work in uBoot but works in kernel.
	Test 200_200_200_25(SPI) : Eth port works in uBoot.

Jan 9,2018
 mesh_path_start_discovery() : 
da = (mpath->is_root) ? mpath->rann_snd_addr : broadcast_addr;		// broadcast PREQ

	mesh_path_sel_frame_tx(MPATH_PREQ, 0, sdata->vif.addr,
			cpu_to_le32(ifmsh->sn), target_flags, mpath->dst,
			cpu_to_le32(mpath->sn), da, 0,
			ttl, cpu_to_le32(lifetime), 0,
			cpu_to_le32(ifmsh->preq_id++), sdata);

A intermediate MP will forward the PREQ too : in hwmp_preq_frame_process(): 
                mhwmp_dbg(sdata, "forwarding the PREQ from %pM\n", orig_addr);
                --ttl;
                preq_id = PREQ_IE_PREQ_ID(preq_elem);
                hopcount = PREQ_IE_HOPCOUNT(preq_elem) + 1;
                da = (mpath && mpath->is_root) ?
                        mpath->rann_snd_addr : broadcast_addr;		// broadcast PREQ

                if (flags & IEEE80211_PREQ_PROACTIVE_PREP_FLAG) {
                        target_addr = PREQ_IE_TARGET_ADDR(preq_elem);
                        target_sn = PREQ_IE_TARGET_SN(preq_elem);
                        metric = orig_metric;
                }

                mesh_path_sel_frame_tx(MPATH_PREQ, flags, orig_addr,
                                       orig_sn, target_flags, target_addr,
                                       target_sn, da, hopcount, ttl, lifetime,
                                       metric, preq_id, sdata);

20:28:37.704489 6.0 Mb/s [bit 15] 0us BSSID:00:0f:92:fa:6c:45 DA:ff:ff:ff:ff:ff:ff SA:00:0f:92:fa:6c:45 Action: MeshAction HWMP		// MP3 broadcasts PREQ
20:28:37.705847 10144667829us tsft 3.0 Mb/s 2461 MHz 11g/10Mhz -75dB signal [bit 29] 0us BSSID:00:0f:92:fa:80:82 DA:ff:ff:ff:ff:ff:ff SA:00:0f:92:fa:80:82 Action: MeshAction HWMP	// MP2 re-broadcast/forward the PREQ back to MP1.


Looks like the intermediate MPs don't forward PREP.


Jan 3, 2018
Only the target can reply the PREQ.
From the HWMP sequence number (SN), the TTL and Life Time values, A(originator) and D will know that this was the previous PREQ that bounced through another station, and will discard the message. Stations receiving such duplicates will discard the PREQ message the same way, and will forward only if the HWMP sequence number is new, or if the received PREQ has a lower TTL and Life Time than the previously received PREQ for the same HWMP sequence number.
Each station adds its own metric before forwarding the PREP
/**
 * enum mesh_path_flags - mac80211 mesh path flags
 *
 * @MESH_PATH_ACTIVE: the mesh path can be used for forwarding
 * @MESH_PATH_RESOLVING: the discovery process is running for this mesh path
 * @MESH_PATH_SN_VALID: the mesh path contains a valid destination sequence
 *	number
 * @MESH_PATH_FIXED: the mesh path has been manually set and should not be
 *	modified
 * @MESH_PATH_RESOLVED: the mesh path can has been resolved
 * @MESH_PATH_REQ_QUEUED: there is an unsent path request for this destination
 *	already queued up, waiting for the discovery process to start.
 *
 * MESH_PATH_RESOLVED is used by the mesh path timer to
 * decide when to stop or cancel the mesh path discovery.
 */
enum mesh_path_flags {
	MESH_PATH_ACTIVE =	BIT(0),
	MESH_PATH_RESOLVING =	BIT(1),
	MESH_PATH_SN_VALID =	BIT(2),
	MESH_PATH_FIXED	=	BIT(3),
	MESH_PATH_RESOLVED =	BIT(4),
	MESH_PATH_REQ_QUEUED =	BIT(5),
};

Jan 2, 2018
http://comments.gmane.org/gmane.linux.drivers.ath9k.devel/12800: So on the Atheros NICs, the block-acks are generated by the receiver in hardware and processed by the transmitter in hardware; you then get a bitmap in the TX completion descriptor telling you which frames did succeed/fail. The TX completion path does check the two 32 bit blockack (ba) fields in the TX descriptor for completion. It doesn't hand-parse a BA frame.


Dec 21, 2017
pDDL1800 low T/P issue. AP--->STA, TCP T/P iperf.
1. AP side : sys/kernel/debug/ieee80211/phy0/ath9k/xmit : "AMPDUs Retried" is about 1000/Sec too high. It is from TX_STAT_INC(txq->axq_qnum, a_retries) in ath_tx_set_retry()<---ath_tx_complete_aggr().
2. STA side : sys/kernel/debug/ieee80211/phy0/statistics/dot11FCSErrorCount : 500/sec. This is from stats->fcs_bad += REG_READ(ah, AR_FCS_FAIL). Register Failed FCS Count (MAC_PCU_FCS_FAIL_CNT) Offset: 0x18108094. 
3. STA side : sys/kernel/debug/ieee80211/phy0/ath9k/recv : "CRC ERR" : about 500/sec. From ath_rx_status *rxs. 		
	if (rxsp->status11 & AR_CRCErr)		//RX descriptor word11. PCU detected an incorrect CRC value.CPU<-DRU<-PCU.
			rxs->rs_status |= ATH9K_RXERR_CRC;

TX status descriptor : struct ath_tx_status {...}. Every sub-frame has a TX satus descriptor.
RX desctiptor : struct ath_rx_status {...}. Every sub-frame has a RX descriptor.

Dec 18, 2017
About arpnet. PC1--->AP(WDS=1)--->STA(WDS=0)--->PC2.
1. ARPNET only works on slave side and when slave's WDS=0. It doesn't work on AP side.
2. STA side, br-lan has wlan0's MAC address. 
3. PC1 ping PC2. STA doesn't need any ARP items. AP shows PC2's IP address has br-lan(=wlan0)'s MAC address of STA.
4. PC1 shows PC2's IP address has br-lan(=wlan0)'s MAC address of STA.

On pDDM1800, use 11g mode the t/p is normal, 6Mbps@BW=4MHz. But in 11n mode, with aggregation, the T/P is low.

On pDDL1800,cable connection, RSSI AP/STA=43/53 ,fixed rate=MCS7,BW=8MHz,Freq=1864MHz.Distance=30m, density=IEEE80211_HT_MPDU_DENSITY_8(default)

ampdu_factor_drv 	Average A-MPDU length(AP) 	CRC ERR AP/STA (ath9k/recv)	TCP T/P(PC1-->AP-->STA--PC2)[Mbps]
IEEE80211_HT_MAX_AMPDU_8K 	3.1			1/510 per second			13.8
IEEE80211_HT_MAX_AMPDU_16K 	6.2			1/620  per second			10.7
IEEE80211_HT_MAX_AMPDU_64K	9.5			10/380 per Second			6.95




Dec 14, 2017

/*	ht_info->ampdu_factor
 * Maximum length of AMPDU that the STA can receive.
 * Length = 2 ^ (13 + max_ampdu_length_exp) - 1 (octets)
 */
enum ieee80211_max_ampdu_length_exp {
	IEEE80211_HT_MAX_AMPDU_8K = 0,
	IEEE80211_HT_MAX_AMPDU_16K = 1,
	IEEE80211_HT_MAX_AMPDU_32K = 2,
	IEEE80211_HT_MAX_AMPDU_64K = 3		//default
};

#define IEEE80211_HT_MAX_AMPDU_FACTOR 13

/* Minimum MPDU start spacing */	// ht_info->ampdu_density. It’s the minimum time between the start of adjacent MPDUs within an A-MPDU.
enum ieee80211_min_mpdu_spacing {
	IEEE80211_HT_MPDU_DENSITY_NONE = 0,	/* No restriction */
	IEEE80211_HT_MPDU_DENSITY_0_25 = 1,	/* 1/4 usec */
	IEEE80211_HT_MPDU_DENSITY_0_5 = 2,	/* 1/2 usec */
	IEEE80211_HT_MPDU_DENSITY_1 = 3,	/* 1 usec */
	IEEE80211_HT_MPDU_DENSITY_2 = 4,	/* 2 usec */
	IEEE80211_HT_MPDU_DENSITY_4 = 5,	/* 4 usec */
	IEEE80211_HT_MPDU_DENSITY_8 = 6,	/* 8 usec */		//default
	IEEE80211_HT_MPDU_DENSITY_16 = 7	/* 16 usec */
};

Fixed rate=64QAM 5/6(MCS7), Non-encryption, f=2477M,WDS=0, signal:AP:-36dBm;STA:-40dBm, RSSI=59, Distance=300m. Regular pDDL products.
ampdu_factor			ampdu_density			Average A-MPDU length(AP)		TCP T/P(PC-->AP-->STA--PC2)
IEEE80211_HT_MAX_AMPDU_8K	IEEE80211_HT_MPDU_DENSITY_NONE		3.5					17.8M
..				IEEE80211_HT_MPDU_DENSITY_1		3.5					17.5M
..				IEEE80211_HT_MPDU_DENSITY_8		3.4					17.8M	
..				IEEE80211_HT_MPDU_DENSITY_16		3.4					17.6
IEEE80211_HT_MAX_AMPDU_16K	IEEE80211_HT_MPDU_DENSITY_NONE		6.2					19.3
..				IEEE80211_HT_MPDU_DENSITY_1		6.2					18.9
..				IEEE80211_HT_MPDU_DENSITY_8		6.5					18.8
..				IEEE80211_HT_MPDU_DENSITY_16		6.5					18.6
IEEE80211_HT_MAX_AMPDU_64K	IEEE80211_HT_MPDU_DENSITY_NONE		11					20.1
..				IEEE80211_HT_MPDU_DENSITY_1		11					20
..				IEEE80211_HT_MPDU_DENSITY_8		11.5					20.1
..				IEEE80211_HT_MPDU_DENSITY_16		11					20.2

The ampdu_factor has more control over the aggregation and t/p. 

Nov 30, 2017
For G2 products with Atmel sama5d35 CPU, how to compile sam-ba applets:
1. Use this toolchain : https://launchpad.net/gcc-arm-embedded/4.7/4.7-2012-q4-major/+download/gcc-arm-
none-eabi-4_7-2012q4-20121208-linux.tar.bz2. The 4gii/3gii toolchain in staging_dir/toolchain-arm_v5te_gcc-4.8-linaro_uClibc-0.9.33.2_eabi/bin/ are arm-openwrt-linux-uclibcgnueabi-* toochian with EABI. If using this EABI toolchain, errors pop up in LD stage.

2. Untar the toolchain to /home/Jeff/project-2/work/arm-cotex-4gii/my_toolchain.

3. Under sam-ba_cdc_cdc_linux/applets/sama5d3x/sam-ba_applets/ directory, 
[Jeff@DENG0080-2 sam-ba_applets]$ source ../../../../set-env.sh
[Jeff@DENG0080-2 sam-ba_applets]$ cat ../../../../set-env.sh 
#!/bin/sh
# setenv PATH <Your_build_env_path>/build/gcc-3.4.4-2.16.1/build_mips/bin:$PATH
export PATH=/home/Jeff/project-2/work/arm-cotex-4gii/my_toolchain/gcc-arm-none-eabi-4_7-2012q4/bin/:$PATH
# setenv KERNELPATH <Your_build_env_path>/linux/kernels/mips-linux-2.6.15/
export KERNELPATH=/home/Jeff/project/ar71xx_4g/build_dir/linux-ar71xx/linux-2.6.32.9/
export STAGING_DIR=/home/Jeff/project-2/work/arm-cotex-4gii/staging_dir/
export CROSS_COMPILE=gcc-arm-none-eabi-4_7-2012q4/bin/arm-none-eabi-

4. Compile:
[Jeff@DENG0080-2 sam-ba_applets]$ pwd
/home/Jeff/project-2/work/arm-cotex-4gii/sam-ba_cdc_cdc_linux/applets/sama5d3x/sam-ba_applets
[Jeff@DENG0080-2 sam-ba_applets]$ make TARGET=sama5d3x RELEASE=1

5. Check the result elf file:
[Jeff@DENG0080-2 sam-ba_applets]$ pwd
/home/Jeff/project-2/work/arm-cotex-4gii/sam-ba_cdc_cdc_linux/applets/sama5d3x/sam-ba_applets
[Jeff@DENG0080-2 sam-ba_applets]$ file serialflash/bin/applet-serialflash-sama5d3x.elf
serialflash/bin/applet-serialflash-sama5d3x.elf: ELF 32-bit LSB executable, ARM, version 1 (SYSV), statically linked, not stripped

6. Use this .bin file with sam-ba tool to burn the empty flash chip.

Nov 28,2017
https://gist.github.com/Chaser324/ce0505fbed06b947d962 : GitHub Standard Fork & Pull Request Workflow 

Nov 22, 2017
.main > .main-left > .nav > li a : Main and sub menu text color
.main-right, .main > .main-left > .nav > li a : Main and sub menu text shadow. Status-->Process text and table text shadow.
.main > .main-left > .nav > li -->background : Main menu background. #81abcb. Both active and non-active.
.main-left > .nav > .slide > .slide-menu > .active > a, h2 > a, h2 > a:hover -->color : Active Main and Sub menu text color. 
.main > .main-left > .nav > .slide > .slide-menu.active > li : : Submenu NON-active background. #536b84
.main > .main-left > .nav > .slide > .slide-menu > .active -->background : Submenu active background
.main>.main-left>.nav>.slide>.slide-menu.active>li:hover --> background : Submenu when mounse hover. Use rgba() to have Alpha channel.


.main-right -->background-color : Main right background color. #314962
	    --> text-shadow : Table text shadow.
.main-right>#maincontent -->background-color : Where the table is showed background. White.
.main-right>#maincontent -->color : Main right main text color (biggest text). 
.panel-title -->background : Some tables' title background.
fieldset-->background : System->TimeSync table body color. #6189c2
fieldset-->color : System table title text color and table text color.
.cbi-section-table-titles-->background : Network->Hostnames->HostEntries table title background.#6189c2
.cbi-section-node:nth-of-type(2n),.cbi-section-remove:nth-of-type(2n) : 3rd level table content background. #81a9e2
.cbi-rowstyle-1 and .cbi-rowstyle-2 -->background-color : Table content with interleave color of rows. #ffffff and #ffffe2
.node-status-overview table > tbody > tr -->background-color : Status->Overview table cell row background color,  odd rows.  #ffffe2
.node-status-overview table > tbody > tr:nth-of-type(2n) -->background-color : Status->Overview table cell row background color,  even rows. #ffffff
.tabs -->background-color : The menu on the right background color. #81abcb
.node-status-realtime table>tbody>tr and .node-status-realtime table>tbody>tr:nth-of-type(2n) -->background-color : Status-->RealtimeGraph table row colors interleaved. #ffffe2 and #ffffff
input, select -->background-color,color : Input text control colors.
.cbi-tabcontainer > .cbi-value:nth-of-type(2n) -->background-color:  Some table rows background.

.cbi-button-apply : Save&Apply button

Nov 17, 2017
Pushing a local branch to repo and then fire a "Merge request". or, Forking a repo and then fire a Pull Request?
These 2 are the same on WebUI operations. And are all easy to code review. But, the 1st approach gives a developer "Write" premission of the repo because he needs to Push his local branch to the Repo. So most probably the developer can do a direct push to the master branch directly technically. But only polocise don't allow him to do so. 

The 2nd approach doesn't need the write permit to "upstream Repo" and more safer I think. Another advantage may be direct share of 2 individual developers. On developer can add remote to the other developer like below:
$ git remote -v
bakkdoor  https://github.com/bakkdoor/grit (fetch)
bakkdoor  https://github.com/bakkdoor/grit (push)
cho45     https://github.com/cho45/grit (fetch)
cho45     https://github.com/cho45/grit (push)
defunkt   https://github.com/defunkt/grit (fetch)
defunkt   https://github.com/defunkt/grit (push)
koke      git://github.com/koke/grit.git (fetch)
koke      git://github.com/koke/grit.git (push)
origin    git@github.com:mojombo/grit.git (fetch)
origin    git@github.com:mojombo/grit.git (push)

So the 2 developers can share their in a very small scale instead of affecting the original repo.

=======================
With Gen5 fresh checkout.
1. Build the original code.
2. In feeds.conf.default, add src-git darkmatter git://github.com/apollo-ng/luci-theme-darkmatter.git.
3. 	$ scripts/feeds update darkmatter
	$ scripts/feeds install luci-theme-darkmatter
	$ make menuconfig

4. 	./scripts/feeds update luci
	./scripts/feeds install -a -p luci

5. Make menuconfig, LuCI-->Modules select luci-mod-admin-full. Themes select luci-theme-darkmatter(should be selected automatically).
6. Make V=99 to build.
7. In browser, visit https://192.168.168.1/luci_index.html, instead of the default index.html.
8. Login with root account. System->System-->SystemProperties-->LanguageAndStyle, You can choose the "Design" for different themes.

Nov 16, 2017
In IPnDDL2350-F1(step1 branch), the section:
config 'defaults'
        option 'syn_flood' '1'
        option 'input' 'ACCEPT'
        option 'output' 'ACCEPT'
        option 'forward' 'REJECT'

In /etc/config/firewall causes a 6 seconds wireless glitch after the wireless connection is setup. But!!! Not the root cause. Removing that section will cause uci error and then false steps.

Root cause:
config 'zone'
        option 'name' 'lan'
        option 'input' 'ACCEPT'
        option 'output' 'ACCEPT'
        option 'forward' 'ACCEPT'	// If this is REJECT, PC--->AP:Eth0--->AP:Wlan0~~~~~~~STA:Wlan0 connection will be off 6 seconds and then resume.


Nov 10, 2017
git config --global color.ui true 	// Turn on git cmdline color syntax
Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾

Nov 8, 2017
In make kernel_menuconfig, don't select the DeviceDriver--->Industrial I/O Support--->Frequency--->Wideband RF Synthesizer---> IDT8v97051. Only select the KernelModules--->SPI Support--->kmod-spi-idt8v97051 to '*'. This will NOT compile idt8v97051.ko. This "make menuconfig" menu is controlled in target/linux/ar71xx/modules.mk. Must select both sides.

Nov 7, 2017
The semantics of do_div() are:
 uint32_t do_div(uint64_t *n, uint32_t base)
 {
 	uint32_t remainder = *n % base;
 	*n = *n / base;
 	return remainder;
 }
#define DIV_ROUND_UP(n,d) (((n) + (d) - 1) / (d))
gcd(x,y) : return Greatest common divisor

NOv 6, 2017
idt8v97051_read(), idt8v97051_write() are channel specific extended info : static const struct iio_chan_spec_ext_info idt8v97051_ext_info[]. These specific info are shown in sys/bus/iio/devices/iio\:device0/out_altvoltage0_*. 

For the whole IIO device (not channel specific),  iio_dev *indio_dev->info = static const struct iio_info *idt8v97051_info-> .debugfs_reg_access = &idt8v97051_reg_access is for the whole generic chip register r/w, which is located in sys/kernel/debug/iio/iio\:device0/direct_reg_access. 

NOv 3, 2017
// Backup
cp build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/linux-3.10.36/drivers/iio/frequency/idt8v97051.c ~/backup/alpha-idt8b97051/.
cp build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/linux-3.10.36/include/linux/iio/frequency/idt8v97051.h ~/backup/alpha-idt8b97051/.
cp target/linux/ar71xx/files/arch/mips/ath79/dev-m25p80.c ~/backup/alpha-idt8b97051/.

// Build
cp target/linux/ar71xx/files/arch/mips/ath79/dev-m25p80.c build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/linux-3.10.36/arch/mips/ath79/dev-m25p80.c
rm -rf build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/linux-3.10.36/drivers/iio/frequency/idt8v97051.o
rm -rf build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/linux-3.10.36/drivers/iio/frequency/idt8v97051.ko
rm -rf build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/linux-3.10.36/drivers/iio/frequency/*.cmd
rm -rf build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/linux-3.10.36/arch/mips/ath79/dev-m25p80.o
rm -rf build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/linux-3.10.36/vmlinux*

=================================================================================================
MIPS_MACHINE(ATH79_MACH_MHK_ALPHA, "MHK_Alpha", "Microhard Alpha board", mhk_alpha_setup);	// For ar9341 Alpha boards
MIPS_MACHINE(ATH79_MACH_MHS_344, "MHS_344", "Microhard MHS_344", mhs_344_setup);		// For ar9344 boards.

#define MIPS_MACHINE(_type, _id, _name, _setup)			\
static const char machine_name_##_type[] __initconst		\
			__aligned(1) = _name;			\
static const char machine_id_##_type[] __initconst		\
			__aligned(1) = _id;			\
static struct mips_machine machine_##_type			\
		__used __section(.mips.machines.init) =		\
{								\
	.mach_type	= _type,				\	// defined in arch/mips/ath79/machtypes.h. 
	.mach_id	= machine_id_##_type,			\	// shown in tmp/sysinfo/board_name
	.mach_name	= machine_name_##_type,			\	// shown in /proc/cpuinfo : machine.
	.mach_setup	= _setup,				\
};

Both 2 machs (_MHK_ and _MHS_) are compiled. The advantage of this maybe, machines can be selected by cmdline "board=MHK_Alpha".(To be verified) with exactly the SAME kernel. The machine can be identified by:

extern int mhx_board				// Defined in arch/mips/ath79/microhard-init.c as a global var seen in whole kernel space.
if (ATH79_MACH_MHK_ALPHA == mhx_board) {			// or ATH79_MACH_MHS_344. Both are defined in arch/mips/ath79/machtypes.h.
                dprintk("Alpha board is not supported\n");
                return -EPERM;
        }


pMDDL2350 : AlphaE based on AR9341
pMDDL2450 : AlphaD based on AR9341
pMDDL2450 : AlphaD based on AR9341 with PV default settings
pMDDL2550 : AlphaF based on AR9341
pMDDL2458 : 3Pi based on AR9344

Oct 31, 2017
mpath->next_hop is the key point in mesh. Kernel will panic (null pointer access) when next_hop is updated by one thread while other thread is trying to access it. next_hop is rcu protected, so replace all direct access by rcu APIs. 

IDT8V97051 Linux driver reference : 
drivers/hwmon/ad7314.c, static struct spi_driver ad7314_driver = {..}.
drivers/iio/frequency/adf4350.c, static struct spi_driver adf4350_driver = {...}

arch/mips/ath79/mach-alfa-ap96.c : in openwrt-cc. This board has a SPI RTC chip "rtc-pcf2123" in SPI CS2. This is where to set up the SPI bus#, CS#, and register this SPI slave device. .modalias       = "rtc-pcf2123"
drivers/rtc/rtc-pcf2123.c :      
	.driver = {
                        .name   = "rtc-pcf2123",	// This is the connection to the modalias in mach-alfa-ap96.c.???
                        .owner  = THIS_MODULE,
        },

ath79_register_spi()--->spi_register_board_info().

module_spi_driver(idt8v97051_driver) : #define module_spi_driver(__spi_driver) \
	module_driver(__spi_driver, spi_register_driver, \
			spi_unregister_driver)			// Call spi_register_driver().

Oct 26, 2017
1. 	setup_timer(&ifmsh->housekeeping_timer,		    ieee80211_mesh_housekeeping_timer,		    (unsigned long) sdata);
ieee80211_mesh_housekeeping_timer() : 
	set_bit(MESH_WORK_HOUSEKEEPING, &ifmsh->wrkq_flags);
	ieee80211_queue_work(&local->hw, &sdata->work);

ieee80211_mesh_work()--->ieee80211_mesh_housekeeping()----> ieee80211_sta_expire(sdata, ifmsh->mshcfg.plink_timeout * HZ); //Deassociate peer MP. plink_timeout default 1800sec
							\-> mesh_path_expire(sdata); //	if ((!(mpath->flags & MESH_PATH_RESOLVING)) &&(!(mpath->flags & MESH_PATH_FIXED)) && time_after(jiffies, mpath->exp_time + MESH_PATH_EXPIRE))
										     //      mesh_path_del(mpath->sdata, mpath->dst) ---> mpath->flags |= MESH_PATH_RESOLVING;   // MESH_PATH_EXPIRE default 600sec.
							\->	mod_timer(&ifmsh->housekeeping_timer, round_jiffies(jiffies +IEEE80211_MESH_HOUSEKEEPING_INTERVAL))	// ieee80211_mesh_housekeeping_timer() runs every 60*HZ.

2.	setup_timer(&ifmsh->mesh_path_timer,		    ieee80211_mesh_path_timer,		    (unsigned long) sdata);
Every mpath has a timer "new_mpath->timer.function = mesh_path_timer". In mesh_queue_preq():
	if (time_after(jiffies, ifmsh->last_preq + min_preq_int_jiff(sdata)))		// dot11MeshHWMPpreqMinInterval=10mS default.
		ieee80211_queue_work(&sdata->local->hw, &sdata->work);			// If last PREQ has passed 10mS, then can send the next PREQ by calling workqueue--->mesh_path_start_discovery() to launch a path discovery from 												// the PREQ queue. Send PREQ and mod_timer(&mpath->timer, jiffies + mpath->discovery_timeout(=mesh_min_discovery_timeout = 100mS)). Discovery timer 												// expire timer function is also mesh_path_timer(). Here after dot11MeshHWMPmaxPREQretries=4 times un-successful PREQ may call 
											// mesh_path_flush_pending() to discard mpath->frame_queue cause packet drop.
So:
IEEE80211_MESH_HOUSEKEEPING_INTERVAL = 60 sec : Time to do MP plink expire and mpath expire. Every 60 sec.
MESH_PATH_EXPIRE = 600 seconds : After (mpath->exp_time + MESH_PATH_EXPIRE), delete this mpath. (changed to 90 sec)
mesh_plink_timeout = 1800 seconds : After 1800sec since  sta->last_rx from this MP, disassociate this MP peer link.
mesh_min_discovery_timeout = 100 milliseconds : Should be bigger than SnedingPREQ--->ReceivingPREP time. This will be doubled every other retry automatically. Defined by .min_discovery_timeout = MESH_MIN_DISCOVERY_TIMEOUT.
mesh_hwmp_max_preq_retries = 4 : Max PREQ can be sent. After each try, mpath->discovery_timeout *= 2. After max tries, the mpath->frame_queue[] pending data are discarded. Defined by .dot11MeshHWMPmaxPREQretries = MESH_MAX_PREQ_RETRIES.
mesh_hwmp_preq_min_interval = 10 TUs (mS) : After sending a PREQ, wait at least 10mS to send another. Defined by .dot11MeshHWMPpreqMinInterval = MESH_PREQ_MIN_INT.
mesh_hwmp_active_path_timeout = 5000 TUs (ms) : lifetime = default_lifetime(sdata). This is the lifetime in PREQ IE. Just like TTL. The Lifetime field is coded as an unsigned integer and is set to the time for which mesh STAs receiving the PREQ/P consider the forwarding information to be valid. The path lifetime defines an upper bound for the path duration; whenever it expires, the path is reset and a new path discover procedure is initiated. It goes to orig_lifetime = PREQ_IE_LIFETIME(hwmp_ie)--->exp_time = TU_TO_EXP_TIME(orig_lifetime). Defined by .dot11MeshHWMPactivePathTimeout = MESH_PATH_TIMEOUT (1000 ms).
MESH_PATH_REFRESH_TIME = 1000 ms :  In mesh_nexthop_lookup(): 	if (time_after(jiffies,   mpath->exp_time - msecs_to_jiffies(sdata->u.mesh.mshcfg.path_refresh_time)) && ether_addr_equal(sdata->vif.addr, hdr->addr4) &&
	    !(mpath->flags & MESH_PATH_RESOLVING) &&
	    !(mpath->flags & MESH_PATH_FIXED))
		mesh_queue_preq(mpath, PREQ_Q_F_START | PREQ_Q_F_REFRESH);		// Queue PREP to send. 1000mS before the expire time to start a PREP.
This is defined by .path_refresh_time = MESH_PATH_REFRESH_TIME (chnged to 500 ms).
mesh_hwmp_net_diameter_traversal_time = 50 TUs : Specifies the estimate of the interval of time (in TUs) that it takes for an HWMP element to propagate across the mesh BSS. This is about mpath SN (Local Mesh Sequence No.). IN 							 hwmp_preq_frame_process() and mesh_path_start_discovery():
						if (time_after(jiffies, ifmsh->last_sn_update +	net_traversal_jiffies(sdata)) ||	// mesh_hwmp_net_diameter_traversal_time=50mS
		    					time_before(jiffies, ifmsh->last_sn_update)) {
								++ifmsh->sn;
								ifmsh->last_sn_update = jiffies;
						}	
This is defined by .dot11MeshHWMPnetDiameterTraversalTime = MESH_DIAM_TRAVERSAL_TIME(500mS).		

==========================================================================================================================

Only 2 MPs with good link quality. Iperf MP1--->MP2 TCP T/P is about 18Mbps. But, sometimes the T/P drops to 0Mbps. The kmsg of MP1 is like:

// MESH_FRAME_QUEUE_LEN increased to 256

<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.1(mesh_nexthop_resolve) err=-2				// This path expired???
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.220000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=0
<0>[ 1022.220000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=1
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.220000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32		// MESH_PATH_REQ_QUEUED
<0>[ 1022.220000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=2
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.220000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.220000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=3
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.220000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.220000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=4
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.220000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.220000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=5
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.220000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.220000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=6
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.220000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.220000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=7
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.220000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.220000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=8
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.220000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.220000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=9
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.220000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.220000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=10
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.220000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.220000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=11
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.220000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.220000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=12
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.220000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.220000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=13
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.220000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.220000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=14
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.220000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.220000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=15
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.220000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.220000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=16
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.220000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.220000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=17
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.220000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.220000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=18
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.220000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.220000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=19
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.220000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.220000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=20
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.220000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.220000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=21
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.220000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.220000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=22
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.220000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.220000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=23
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.220000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.220000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=24
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.220000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.220000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=25
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.220000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.220000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=26
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.220000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.220000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=27
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.220000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.220000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=28
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.220000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.220000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=29
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.220000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.220000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=30
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.220000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.220000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=31
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.220000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.220000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=32
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.220000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.220000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=33
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.220000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.220000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=34
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.220000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.220000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=35
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.220000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.220000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=36
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.220000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.220000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=37
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.220000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.220000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=38
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.220000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.220000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=39
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.220000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.220000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=40
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.220000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.220000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=41
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.220000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.220000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=42
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.220000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.220000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=43
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.220000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.220000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=44
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.220000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.220000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.220000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.220000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=45
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.230000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.230000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=46
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.230000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.230000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=47
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.230000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.230000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=48
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.230000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.230000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=49
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.230000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.230000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=50
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.230000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.230000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=51
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.230000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.230000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=52
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.230000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.230000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=53
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.230000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.230000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=54
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.230000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.230000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=55
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.230000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.230000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=56
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.230000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.230000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=57
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.230000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.230000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=58
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.230000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.230000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=59
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.230000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.230000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=60
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.230000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.230000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=61
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.230000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.230000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=62
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.230000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.230000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=63
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.230000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.230000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=64
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.230000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.230000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=65
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.230000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.230000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=66
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.230000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.230000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=67
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.230000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.230000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=68
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.230000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.230000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=69
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.230000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.230000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=70
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.230000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.230000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=71
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.230000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.230000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=72
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.230000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.230000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=73
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.230000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.230000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=74
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.230000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.230000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=75
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.230000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.230000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=76
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.230000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.230000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=77
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.230000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.230000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=78
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.230000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.230000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=79
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.230000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.230000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=80
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.230000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.230000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=81
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.230000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.230000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=82
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.230000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.230000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=83
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.230000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.230000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=84
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.230000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.230000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=85
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.230000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.230000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=86
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.230000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.230000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=87
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.230000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.230000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=88
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.230000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.230000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=89
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.230000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.230000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.240000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.240000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.240000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=32
<0>[ 1022.240000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=90
<0>[ 1022.240000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<7>[ 1022.240000] wlan0: sending PREQ to 00:0f:92:fa:6c:83					// Finally got chance to send PREQ to air.
<0>[ 1022.250000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.250000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.250000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.250000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.250000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.250000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.250000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.250000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.250000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=2
<0>[ 1022.250000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=91
<0>[ 1022.250000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.250000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.250000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.250000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.250000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.250000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.250000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.250000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=2
<0>[ 1022.250000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=92
<0>[ 1022.250000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.250000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.250000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.250000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.250000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.250000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.250000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.250000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=2
<0>[ 1022.250000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=93
<0>[ 1022.250000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.250000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.250000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.250000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.250000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.250000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.250000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.250000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=2
<0>[ 1022.250000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=94
<0>[ 1022.340000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<7>[ 1022.340000] wlan0: sending PREQ to 00:0f:92:fa:6c:83
<0>[ 1022.500000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.500000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1022.500000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1022.500000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.500000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1022.500000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1022.500000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1022.500000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=2
<0>[ 1022.500000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=95
<0>[ 1022.540000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<7>[ 1022.540000] wlan0: sending PREQ to 00:0f:92:fa:6c:83
<0>[ 1022.940000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<7>[ 1022.940000] wlan0: sending PREQ to 00:0f:92:fa:6c:83
<0>[ 1023.020000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1023.020000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1023.020000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1023.020000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1023.020000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1023.020000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1023.020000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1023.020000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=2
<0>[ 1023.020000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=96
<0>[ 1023.740000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<7>[ 1023.740000] wlan0: sending PREQ to 00:0f:92:fa:6c:83
<0>[ 1024.040000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1024.040000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1024.040000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1024.040000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1024.040000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1024.040000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1024.040000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1024.040000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=2
<0>[ 1024.040000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=97
<0>[ 1026.090000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1026.090000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1026.090000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1026.090000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1026.090000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1026.090000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1026.090000] ==MHX3.2(mesh_nexthop_resolve) mpath=82d34300
<0>[ 1026.090000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=0
<0>[ 1026.090000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=1
<0>[ 1026.090000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<7>[ 1026.090000] wlan0: sending PREQ to 00:0f:92:fa:6c:83					// Have tried 6 times to send PREQ.


<0>[ 1026.090000] ==MHX1.1(airtime_link_metric_get) Calculate STA[fa:6c:83].rate=650		// Get PREP from MP2
<0>[ 1026.090000] ==MHX1.2(airtime_link_metric_get) tx_time=32519, err=0, estimated_retx=256,result=127
<0>[ 1026.090000] ==MHX4.1(hwmp_route_info_get) action=1, from STA=[fa:6c:83], whose last_hop_metric=127
<0>[ 1026.090000] ==MHX4.2.1(hwmp_route_info_get) orig_addr=[fa:6c:83], IE dump : orig_sn=556, orig_lifetime=4882, orig_metric=0.And new_metric=127.
<0>[ 1026.090000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1026.090000] ==MHX4.2.2(hwmp_route_info_get) mpath to orig_addr exists : flags=0x00000002, sn=555, metric=127 .	// Flags=MESH_PATH_RESOLVING
<0>[ 1026.090000] ==MHX4.2.4(hwmp_route_info_get) fresh_info=1.
<0>[ 1026.090000] ==MHX4.2.5(hwmp_route_info_get) Updating orig_addr's mpath next_hop and other info and TX pending mpath Q.
<0>[ 1026.090000] ==MHX5.1(mesh_path_assign_nexthop) Change next_hop of the Q-ed mpath frames : addr1(DA)=[fa:6c:83], addr2(SA)=[fa:80:82]
<0>[ 1026.090000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[fa:6c:83], next_hop=[fa:6c:83],flag=0x00000017,sn=556, new_metric=127,exp_time=73109
<0>[ 1026.090000] ==MHX4.5(hwmp_route_info_get) mpath to SA=[fa:6c:83], next_hop=[fa:6c:83],flag=0x00000017,sn=556, metric=127,exp_time=73109
<7>[ 1026.090000] wlan0: received PREP from 00:0f:92:fa:6c:83



<0>[ 1026.090000] ==MHX1.1(airtime_link_metric_get) Calculate STA[fa:6c:45].rate=650
<0>[ 1026.090000] ==MHX1.2(airtime_link_metric_get) tx_time=32519, err=0, estimated_retx=256,result=127
<0>[ 1026.090000] ==MHX4.1(hwmp_route_info_get) action=0, from STA=[fa:6c:45], whose last_hop_metric=127
<0>[ 1026.090000] ==MHX4.2.1(hwmp_route_info_get) orig_addr=[fa:80:82], IE dump : orig_sn=595, orig_lifetime=4882, orig_metric=127.And new_metric=254.
<0>[ 1026.090000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[fa:80:82], next_hop=[00:00:00],flag=0x000f0f00,sn=595, new_metric=254,exp_time=0
<0>[ 1026.090000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:45]
<0>[ 1026.090000] ==MHX4.4.0(hwmp_route_info_get) mpath to SA exists : flags=0x00000010, sn=0, metric=127 .
<0>[ 1026.090000] ==MHX4.4.2(hwmp_route_info_get) fresh_info=1.
<0>[ 1026.090000] ==MHX4.4.3(hwmp_route_info_get) Updating SA's mpath next_hop and other info and TX pending mpath Q.
<0>[ 1026.090000] ==MHX4.5(hwmp_route_info_get) mpath to SA=[fa:6c:45], next_hop=[fa:6c:45],flag=0x00000011,sn=0, metric=127,exp_time=73109
<0>[ 1026.090000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:83].failed=0,sta->fail_avg=0
<0>[ 1026.090000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1026.350000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]

<0>[ 1026.350000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1026.350000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1026.350000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1026.350000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[ 1026.350000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:83].failed=0,sta->fail_avg=0
<0>[ 1026.350000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1026.350000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1026.350000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1026.350000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1026.350000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1026.350000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[ 1026.350000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1026.350000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1026.350000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1026.350000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1026.350000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[ 1026.350000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:83].failed=0,sta->fail_avg=0
<0>[ 1026.350000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:83].failed=0,sta->fail_avg=0
<0>[ 1026.350000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1026.350000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1026.350000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1026.350000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1026.350000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1026.350000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1026.350000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[ 1026.350000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1026.350000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1026.350000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1026.350000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1026.350000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[ 1026.350000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1026.350000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1026.350000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1026.350000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1026.350000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[ 1026.360000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:83].failed=0,sta->fail_avg=0
<0>[ 1026.360000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:83].failed=0,sta->fail_avg=0
<0>[ 1026.360000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1026.360000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1026.360000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1026.360000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1026.360000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1026.360000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[ 1026.360000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:83].failed=0,sta->fail_avg=0
<0>[ 1026.360000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1026.360000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1026.360000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1026.360000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1026.360000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1026.360000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1026.360000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[ 1026.360000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1026.360000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 1026.360000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 1026.360000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 1026.360000] ==MHX3.1(mesh_nexthop_resolve) err=0

THis breaks the iperf about 5 seconds with 0Mbps. This is a rather static mpath. Why it becomes MESH_PATH_RESOLVING status suddenly??? 
The conclusion is : The path discovery mechanism affects the connection.


==============================================================================================
Captured 2 mpath change below. The 1st one seems because the direct talk MP1-MP3's rate info is outdated and the metric is calculated too good. The 2nd one means, if SN is higher, it ALWAYS update the mpath metric even if it is higher than the origional mpath->metric. Why???

                                                SN      METRIC  QLEN    EXPTIME         DTIM    DRETF
LAGS
00:0f:92:fa:6c:83 00:0f:92:fa:6c:45 wlan0       14834   282     0       2810    100     0       0x5
00:0f:92:fa:6c:45 00:0f:92:fa:6c:45 wlan0       0       141     0       2810    0       0       0x11
-------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRETF
LAGS
00:0f:92:fa:6c:83 00:0f:92:fa:6c:45 wlan0       14834   282     0       1790    100     0       0x5
00:0f:92:fa:6c:45 00:0f:92:fa:6c:45 wlan0       0       141     0       1790    0       0       0x11
-------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRETF
LAGS
00:0f:92:fa:6c:83 00:0f:92:fa:6c:45 wlan0       14835   282     0       4770    100     0       0x15
00:0f:92:fa:6c:45 00:0f:92:fa:6c:45 wlan0       0       141     0       4770    0       0       0x11
-------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRETF
LAGS
00:0f:92:fa:6c:83 00:0f:92:fa:6c:45 wlan0       14835   282     0       3710    100     0       0x15
00:0f:92:fa:6c:45 00:0f:92:fa:6c:45 wlan0       0       141     0       3710    0       0       0x11
-------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRETF
LAGS
00:0f:92:fa:6c:83 00:0f:92:fa:6c:45 wlan0       14835   282     0       2700    100     0       0x15
00:0f:92:fa:6c:45 00:0f:92:fa:6c:45 wlan0       0       141     0       2700    0       0       0x11
-------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRETF
LAGS
00:0f:92:fa:6c:83 00:0f:92:fa:6c:45 wlan0       14835   282     0       1680    100     0       0x15
00:0f:92:fa:6c:45 00:0f:92:fa:6c:45 wlan0       0       141     0       1680    0       0       0x11
-------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRETF
LAGS
00:0f:92:fa:6c:83 00:0f:92:fa:6c:45 wlan0       14835   282     0       650     100     0       0x15
00:0f:92:fa:6c:45 00:0f:92:fa:6c:45 wlan0       0       141     0       650     0       0       0x11
-------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRETF
LAGS
00:0f:92:fa:6c:83 00:0f:92:fa:6c:45 wlan0       14836   282     0       4630    100     0       0x5
00:0f:92:fa:6c:45 00:0f:92:fa:6c:45 wlan0       0       141     0       4630    0       0       0x11
-------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRETF
LAGS
00:0f:92:fa:6c:83 00:0f:92:fa:6c:45 wlan0       14836   282     0       3570    100     0       0x5
00:0f:92:fa:6c:45 00:0f:92:fa:6c:45 wlan0       0       141     0       3570    0       0       0x11
-------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRETF
LAGS
00:0f:92:fa:6c:83 00:0f:92:fa:6c:45 wlan0       14836   282     0       2550    100     0       0x5
00:0f:92:fa:6c:45 00:0f:92:fa:6c:45 wlan0       0       141     0       2550    0       0       0x11
-------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRETF
LAGS
00:0f:92:fa:6c:83 00:0f:92:fa:6c:45 wlan0       14836   282     0       1530    100     0       0x5
00:0f:92:fa:6c:45 00:0f:92:fa:6c:45 wlan0       0       141     0       1530    0       0       0x11
-------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRETF
LAGS
00:0f:92:fa:6c:83 00:0f:92:fa:6c:45 wlan0       14836   282     0       510     100     0       0x5
00:0f:92:fa:6c:45 00:0f:92:fa:6c:45 wlan0       0       141     0       510     0       0       0x11
-------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRETF
LAGS
00:0f:92:fa:6c:83 00:0f:92:fa:6c:45 wlan0       14837   282     0       4500    100     0       0x5
00:0f:92:fa:6c:45 00:0f:92:fa:6c:45 wlan0       0       141     0       4500    0       0       0x11
-------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRETF
LAGS
00:0f:92:fa:6c:83 00:0f:92:fa:6c:45 wlan0       14837   282     0       3480    100     0       0x5
00:0f:92:fa:6c:45 00:0f:92:fa:6c:45 wlan0       0       141     0       3480    0       0       0x11
-------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRETF
LAGS
00:0f:92:fa:6c:83 00:0f:92:fa:6c:45 wlan0       14837   282     0       2470    100     0       0x5
00:0f:92:fa:6c:45 00:0f:92:fa:6c:45 wlan0       0       141     0       2470    0       0       0x11
-------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRETF
LAGS
00:0f:92:fa:6c:83 00:0f:92:fa:6c:45 wlan0       14837   282     0       1450    100     0       0x5
00:0f:92:fa:6c:45 00:0f:92:fa:6c:45 wlan0       0       141     0       1450    0       0       0x11
-------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRETF
LAGS
00:0f:92:fa:6c:83 00:0f:92:fa:6c:45 wlan0       14839   282     0       4530    100     0       0x15
00:0f:92:fa:6c:45 00:0f:92:fa:6c:45 wlan0       0       141     0       4530    0       0       0x11
-------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRETF
LAGS
00:0f:92:fa:6c:83 00:0f:92:fa:6c:45 wlan0       14839   282     0       3510    100     0       0x15
00:0f:92:fa:6c:45 00:0f:92:fa:6c:45 wlan0       0       141     0       3510    0       0       0x11
-------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRETF
LAGS
00:0f:92:fa:6c:83 00:0f:92:fa:6c:45 wlan0       14839   282     0       2490    100     0       0x15
00:0f:92:fa:6c:45 00:0f:92:fa:6c:45 wlan0       0       141     0       2490    0       0       0x11
-------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRETF
LAGS
00:0f:92:fa:6c:83 00:0f:92:fa:6c:45 wlan0       14839   282     0       1470    100     0       0x15
00:0f:92:fa:6c:45 00:0f:92:fa:6c:45 wlan0       0       141     0       1470    0       0       0x11
-------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRETF
LAGS
00:0f:92:fa:6c:83 00:0f:92:fa:6c:45 wlan0       14839   282     0       450     100     0       0x15
00:0f:92:fa:6c:45 00:0f:92:fa:6c:45 wlan0       0       141     0       450     0       0       0x11
-------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRETF
LAGS
00:0f:92:fa:6c:83 00:0f:92:fa:6c:45 wlan0       14840   1402    0       4340    100     0       0x5
00:0f:92:fa:6c:45 00:0f:92:fa:6c:45 wlan0       0       141     0       4340    0       0       0x11
-------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRETF
LAGS
00:0f:92:fa:6c:83 00:0f:92:fa:6c:45 wlan0       14840   1402    0       3320    100     0       0x5
00:0f:92:fa:6c:45 00:0f:92:fa:6c:45 wlan0       0       141     0       3320    0       0       0x11
-------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRETF
LAGS
00:0f:92:fa:6c:83 00:0f:92:fa:6c:45 wlan0       14840   1402    0       2310    100     0       0x5
00:0f:92:fa:6c:45 00:0f:92:fa:6c:45 wlan0       0       141     0       2310    0       0       0x11
-------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRETF
LAGS
00:0f:92:fa:6c:83 00:0f:92:fa:6c:45 wlan0       14840   1402    0       1290    100     0       0x5
00:0f:92:fa:6c:45 00:0f:92:fa:6c:45 wlan0       0       141     0       1290    0       0       0x11
-------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRETF
LAGS
00:0f:92:fa:6c:83 00:0f:92:fa:6c:45 wlan0       14841   432     0       4380    100     0       0x15
00:0f:92:fa:6c:45 00:0f:92:fa:6c:45 wlan0       0       141     0       4380    0       0       0x11
-------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRETF
LAGS
00:0f:92:fa:6c:83 00:0f:92:fa:6c:45 wlan0       14841   432     0       3350    100     0       0x15
00:0f:92:fa:6c:45 00:0f:92:fa:6c:45 wlan0       0       141     0       3350    0       0       0x11
-------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRETF
LAGS
00:0f:92:fa:6c:83 00:0f:92:fa:6c:45 wlan0       14841   432     0       2330    100     0       0x15
00:0f:92:fa:6c:45 00:0f:92:fa:6c:45 wlan0       0       141     0       2330    0       0       0x11
-------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRETF
LAGS
00:0f:92:fa:6c:83 00:0f:92:fa:6c:45 wlan0       14841   432     0       1310    100     0       0x15
00:0f:92:fa:6c:45 00:0f:92:fa:6c:45 wlan0       0       141     0       1310    0       0       0x11
-------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRETF
LAGS
00:0f:92:fa:6c:83 00:0f:92:fa:6c:45 wlan0       14841   432     0       290     100     0       0x15
00:0f:92:fa:6c:45 00:0f:92:fa:6c:45 wlan0       0       141     0       290     0       0       0x11
-------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRETF
LAGS
00:0f:92:fa:6c:83 00:0f:92:fa:6c:45 wlan0       14842   1505    0       4180    100     0       0x5
00:0f:92:fa:6c:45 00:0f:92:fa:6c:45 wlan0       0       141     0       4180    0       0       0x11
-------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRETF
LAGS
00:0f:92:fa:6c:83 00:0f:92:fa:6c:45 wlan0       14842   1505    0       3160    100     0       0x5
00:0f:92:fa:6c:45 00:0f:92:fa:6c:45 wlan0       0       141     0       3160    0       0       0x11
-------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRETF
LAGS
00:0f:92:fa:6c:83 00:0f:92:fa:6c:45 wlan0       14842   1505    0       2140    100     0       0x5
00:0f:92:fa:6c:45 00:0f:92:fa:6c:45 wlan0       0       141     0       2140    0       0       0x11
-------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRETF
LAGS
00:0f:92:fa:6c:83 00:0f:92:fa:6c:45 wlan0       14842   1505    0       1120    100     0       0x5
00:0f:92:fa:6c:45 00:0f:92:fa:6c:45 wlan0       0       141     0       1120    0       0       0x11
-------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRETF
LAGS
00:0f:92:fa:6c:83 00:0f:92:fa:6c:45 wlan0       14842   1505    0       100     100     0       0x5
00:0f:92:fa:6c:45 00:0f:92:fa:6c:45 wlan0       0       141     0       100     0       0       0x11
-------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRETF
LAGS
00:0f:92:fa:6c:83 00:0f:92:fa:6c:45 wlan0       14844   321     0       4180    200     1       0x5
00:0f:92:fa:6c:45 00:0f:92:fa:6c:45 wlan0       0       141     0       4180    0       0       0x11
-------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRETF
LAGS
00:0f:92:fa:6c:83 00:0f:92:fa:6c:45 wlan0       14844   321     0       3160    200     1       0x5
00:0f:92:fa:6c:45 00:0f:92:fa:6c:45 wlan0       0       141     0       3160    0       0       0x11
-------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRETF
LAGS
00:0f:92:fa:6c:83 00:0f:92:fa:6c:45 wlan0       14844   321     0       2140    200     1       0x5
00:0f:92:fa:6c:45 00:0f:92:fa:6c:45 wlan0       0       141     0       2140    0       0       0x11
-------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRETF
LAGS
00:0f:92:fa:6c:83 00:0f:92:fa:6c:45 wlan0       14844   321     0       1120    200     1       0x5
00:0f:92:fa:6c:45 00:0f:92:fa:6c:45 wlan0       0       141     0       1120    0       0       0x11
-------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRETF
LAGS
00:0f:92:fa:6c:83 00:0f:92:fa:6c:45 wlan0       14844   321     0       100     200     1       0x5
00:0f:92:fa:6c:45 00:0f:92:fa:6c:45 wlan0       0       141     0       100     0       0       0x11
-------------------------




DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRETF
LAGS
00:0f:92:fa:6c:83 00:0f:92:fa:6c:83 wlan0       14846   141     0       4070    200     1       0x5	// Too good calculation to MP3 direct link.
00:0f:92:fa:6c:45 00:0f:92:fa:6c:45 wlan0       0       141     0       4070    0       0       0x11
-------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRETF
LAGS
00:0f:92:fa:6c:83 00:0f:92:fa:6c:83 wlan0       14846   141     0       3040    200     1       0x5
00:0f:92:fa:6c:45 00:0f:92:fa:6c:45 wlan0       0       141     0       3040    0       0       0x11
-------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRETF
LAGS
00:0f:92:fa:6c:83 00:0f:92:fa:6c:83 wlan0       14846   141     0       2020    200     1       0x5
00:0f:92:fa:6c:45 00:0f:92:fa:6c:45 wlan0       0       141     0       2020    0       0       0x11
-------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRETF
LAGS
00:0f:92:fa:6c:83 00:0f:92:fa:6c:83 wlan0       14846   141     0       1000    200     1       0x5
00:0f:92:fa:6c:45 00:0f:92:fa:6c:45 wlan0       0       141     0       1000    0       0       0x11
-------------------------




DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRETF
LAGS
00:0f:92:fa:6c:83 00:0f:92:fa:6c:45 wlan0       14847   290     0       4000    200     1       0x15	// SN14847's metric=290 always update old SN's metric 141. 
00:0f:92:fa:6c:45 00:0f:92:fa:6c:45 wlan0       0       141     0       4000    0       0       0x11
-------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRETF
LAGS
00:0f:92:fa:6c:83 00:0f:92:fa:6c:45 wlan0       14847   290     0       2980    200     1       0x15
00:0f:92:fa:6c:45 00:0f:92:fa:6c:45 wlan0       0       141     0       2980    0       0       0x11
-------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRETF
LAGS
00:0f:92:fa:6c:83 00:0f:92:fa:6c:45 wlan0       14847   290     0       1970    200     1       0x15
00:0f:92:fa:6c:45 00:0f:92:fa:6c:45 wlan0       0       141     0       1970    0       0       0x11
-------------------------
DEST ADDR         NEXT HOP          IFACE       SN      METRIC  QLEN    EXPTIME         DTIM    DRETF
LAGS
00:0f:92:fa:6c:83 00:0f:92:fa:6c:45 wlan0       14847   290     0       950     200     1       0x15
00:0f:92:fa:6c:45 00:0f:92:fa:6c:45 wlan0       0       141     0       950     0       0       0x11
-------------------------

root@UserDevice:~# 
DEST ADDR         NEXT HOP          IFACE










<0>[  852.730000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  852.730000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  852.730000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  852.730000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  852.730000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  852.740000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0
<0>[  852.740000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]

<7>[  853.000000] wlan0: peer 00:0f:92:fa:6c:83 in state LISTEN got event OPN_ACPT
<7>[  853.100000] wlan0: Mesh plink timer for 00:0f:92:fa:6c:83 fired on state OPN-RCVD
<7>[  853.100000] wlan0: Mesh plink for 00:0f:92:fa:6c:83 (retry, timeout): 0 100

<7>[  853.270000] wlan0: Mesh plink timer for 00:0f:92:fa:6c:83 fired on state OPN-RCVD
<7>[  853.270000] wlan0: Mesh plink for 00:0f:92:fa:6c:83 (retry, timeout): 1 174

<7>[  853.500000] wlan0: Mesh plink timer for 00:0f:92:fa:6c:83 fired on state OPN-RCVD
<7>[  853.500000] wlan0: Mesh plink for 00:0f:92:fa:6c:83 (retry, timeout): 2 233
<0>[  853.740000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  853.740000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  853.740000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  853.740000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  853.740000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  853.740000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0
<0>[  853.740000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  853.740000] ==MHX1.1(airtime_link_metric_get) Calculate STA[fa:6c:45].rate=585
<0>[  853.740000] ==MHX1.2(airtime_link_metric_get) tx_time=36104, err=0, estimated_retx=256,result=141
<0>[  853.740000] ==MHX4.1(hwmp_route_info_get) action=0, from STA=[fa:6c:45], whose last_hop_metric=141
<0>[  853.740000] ==MHX4.2.1(hwmp_route_info_get) orig_addr=[fa:6c:83], IE dump : orig_sn=14835, orig_lifetime=4882, orig_metric=141.And new_metric=282.
<0>[  853.740000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  853.740000] ==MHX4.2.2(hwmp_route_info_get) mpath to orig_addr exists : flags=0x00000005, sn=14834, metric=282 .
<0>[  853.740000] ==MHX4.2.4(hwmp_route_info_get) fresh_info=1.
<0>[  853.740000] ==MHX4.2.5(hwmp_route_info_get) Updating orig_addr's mpath next_hop and other info and TX pending mpath Q.
<0>[  853.740000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[fa:6c:83], next_hop=[fa:6c:45],flag=0x00000015,sn=14835, metric=282,exp_time=55874
<0>[  853.740000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:45]
<0>[  853.740000] ==MHX4.4.0(hwmp_route_info_get) mpath to SA exists : flags=0x00000011, sn=0, metric=141 .
<0>[  853.740000] ==MHX4.4.2(hwmp_route_info_get) fresh_info=1.
<0>[  853.740000] ==MHX4.4.3(hwmp_route_info_get) Updating SA's mpath next_hop and other info and TX pending mpath Q.
<0>[  853.740000] ==MHX4.5(hwmp_route_info_get) mpath to SA=[fa:6c:45], next_hop=[fa:6c:45],flag=0x00000011,sn=0, metric=141,exp_time=55874
<7>[  853.740000] wlan0: received PREQ from 00:0f:92:fa:6c:83
<7>[  853.740000] wlan0: PREQ is for us
<7>[  853.740000] wlan0: replying to the PREQ
<7>[  853.740000] wlan0: sending PREP to 00:0f:92:fa:6c:83
<7>[  853.790000] wlan0: Mesh plink timer for 00:0f:92:fa:6c:83 fired on state OPN-RCVD
<7>[  853.890000] wlan0: Mesh plink timer for 00:0f:92:fa:6c:83 fired on state HOLDING
<0>[  854.740000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  854.740000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  854.740000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  854.740000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  854.740000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  854.740000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0
<0>[  854.740000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  855.740000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  855.740000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  855.740000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  855.740000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  855.740000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  855.740000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0
<0>[  855.740000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  856.740000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  856.740000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  856.740000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  856.740000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  856.740000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  856.740000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0
<0>[  856.750000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  857.740000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  857.740000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  857.740000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  857.740000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  857.740000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  857.740000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0
<0>[  857.750000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  858.740000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  858.740000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  858.740000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  858.740000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  858.740000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  858.740000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<7>[  858.740000] wlan0: sending PREQ to 00:0f:92:fa:6c:83
<0>[  858.740000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0
<0>[  858.750000] ==MHX1.1(airtime_link_metric_get) Calculate STA[fa:6c:45].rate=585
<0>[  858.750000] ==MHX1.2(airtime_link_metric_get) tx_time=36104, err=0, estimated_retx=256,result=141
<0>[  858.750000] ==MHX4.1(hwmp_route_info_get) action=0, from STA=[fa:6c:45], whose last_hop_metric=141
<0>[  858.750000] ==MHX4.2.1(hwmp_route_info_get) orig_addr=[fa:80:82], IE dump : orig_sn=128, orig_lifetime=4882, orig_metric=141.And new_metric=282.
<0>[  858.750000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[fa:80:82], next_hop=[00:00:00],flag=0x000f0f00,sn=128, metric=282,exp_time=0
<0>[  858.750000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:45]
<0>[  858.750000] ==MHX4.4.0(hwmp_route_info_get) mpath to SA exists : flags=0x00000010, sn=0, metric=141 .
<0>[  858.750000] ==MHX4.4.2(hwmp_route_info_get) fresh_info=1.
<0>[  858.750000] ==MHX4.4.3(hwmp_route_info_get) Updating SA's mpath next_hop and other info and TX pending mpath Q.
<0>[  858.750000] ==MHX4.5(hwmp_route_info_get) mpath to SA=[fa:6c:45], next_hop=[fa:6c:45],flag=0x00000011,sn=0, metric=141,exp_time=56375
<0>[  858.750000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  858.750000] ==MHX1.1(airtime_link_metric_get) Calculate STA[fa:6c:45].rate=585
<0>[  858.750000] ==MHX1.2(airtime_link_metric_get) tx_time=36104, err=0, estimated_retx=256,result=141
<0>[  858.750000] ==MHX4.1(hwmp_route_info_get) action=1, from STA=[fa:6c:45], whose last_hop_metric=141
<0>[  858.750000] ==MHX4.2.1(hwmp_route_info_get) orig_addr=[fa:6c:83], IE dump : orig_sn=14836, orig_lifetime=4882, orig_metric=141.And new_metric=282.
<0>[  858.750000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  858.750000] ==MHX4.2.2(hwmp_route_info_get) mpath to orig_addr exists : flags=0x00000006, sn=14835, metric=282 .
<0>[  858.750000] ==MHX4.2.4(hwmp_route_info_get) fresh_info=1.
<0>[  858.750000] ==MHX4.2.5(hwmp_route_info_get) Updating orig_addr's mpath next_hop and other info and TX pending mpath Q.
<0>[  858.750000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[fa:6c:83], next_hop=[fa:6c:45],flag=0x00000017,sn=14836, metric=282,exp_time=56375
<0>[  858.750000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:45]
<0>[  858.750000] ==MHX4.4.0(hwmp_route_info_get) mpath to SA exists : flags=0x00000011, sn=0, metric=141 .
<0>[  858.750000] ==MHX4.4.2(hwmp_route_info_get) fresh_info=1.
<0>[  858.750000] ==MHX4.4.3(hwmp_route_info_get) Updating SA's mpath next_hop and other info and TX pending mpath Q.
<0>[  858.750000] ==MHX4.5(hwmp_route_info_get) mpath to SA=[fa:6c:45], next_hop=[fa:6c:45],flag=0x00000011,sn=0, metric=141,exp_time=56375
<7>[  858.750000] wlan0: received PREP from 00:0f:92:fa:6c:83
<0>[  859.750000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  859.750000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  859.750000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  859.750000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  859.750000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  859.750000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0
<0>[  859.750000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  860.750000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  860.750000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  860.750000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  860.750000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  860.750000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  860.750000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0
<0>[  860.750000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  861.750000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  861.750000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  861.750000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  861.750000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  861.750000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  861.750000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0
<0>[  861.750000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  862.750000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  862.750000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  862.750000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  862.750000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  862.750000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  862.750000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0
<0>[  862.760000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  863.750000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  863.750000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  863.750000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  863.750000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  863.750000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  863.750000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<7>[  863.750000] wlan0: sending PREQ to 00:0f:92:fa:6c:83
<0>[  863.750000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0
<0>[  863.750000] ==MHX1.1(airtime_link_metric_get) Calculate STA[fa:6c:45].rate=585
<0>[  863.750000] ==MHX1.2(airtime_link_metric_get) tx_time=36104, err=0, estimated_retx=256,result=141
<0>[  863.750000] ==MHX4.1(hwmp_route_info_get) action=0, from STA=[fa:6c:45], whose last_hop_metric=141
<0>[  863.750000] ==MHX4.2.1(hwmp_route_info_get) orig_addr=[fa:80:82], IE dump : orig_sn=129, orig_lifetime=4882, orig_metric=141.And new_metric=282.
<0>[  863.750000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[fa:80:82], next_hop=[00:00:00],flag=0x000f0f00,sn=129, metric=282,exp_time=0
<0>[  863.750000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:45]
<0>[  863.750000] ==MHX4.4.0(hwmp_route_info_get) mpath to SA exists : flags=0x00000011, sn=0, metric=141 .
<0>[  863.750000] ==MHX4.4.2(hwmp_route_info_get) fresh_info=1.
<0>[  863.750000] ==MHX4.4.3(hwmp_route_info_get) Updating SA's mpath next_hop and other info and TX pending mpath Q.
<0>[  863.750000] ==MHX4.5(hwmp_route_info_get) mpath to SA=[fa:6c:45], next_hop=[fa:6c:45],flag=0x00000011,sn=0, metric=141,exp_time=56875
<0>[  863.750000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  863.760000] ==MHX1.1(airtime_link_metric_get) Calculate STA[fa:6c:45].rate=585
<0>[  863.760000] ==MHX1.2(airtime_link_metric_get) tx_time=36104, err=0, estimated_retx=256,result=141
<0>[  863.760000] ==MHX4.1(hwmp_route_info_get) action=1, from STA=[fa:6c:45], whose last_hop_metric=141
<0>[  863.760000] ==MHX4.2.1(hwmp_route_info_get) orig_addr=[fa:6c:83], IE dump : orig_sn=14837, orig_lifetime=4882, orig_metric=141.And new_metric=282.
<0>[  863.760000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  863.760000] ==MHX4.2.2(hwmp_route_info_get) mpath to orig_addr exists : flags=0x00000006, sn=14836, metric=282 .
<0>[  863.760000] ==MHX4.2.4(hwmp_route_info_get) fresh_info=1.
<0>[  863.760000] ==MHX4.2.5(hwmp_route_info_get) Updating orig_addr's mpath next_hop and other info and TX pending mpath Q.
<0>[  863.760000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[fa:6c:83], next_hop=[fa:6c:45],flag=0x00000017,sn=14837, metric=282,exp_time=56876
<0>[  863.760000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:45]
<0>[  863.760000] ==MHX4.4.0(hwmp_route_info_get) mpath to SA exists : flags=0x00000011, sn=0, metric=141 .
<0>[  863.760000] ==MHX4.4.2(hwmp_route_info_get) fresh_info=1.

<0>[  863.760000] ==MHX4.4.3(hwmp_route_info_get) Updating SA's mpath next_hop and other info and TX pending mpath Q.
<0>[  863.760000] ==MHX4.5(hwmp_route_info_get) mpath to SA=[fa:6c:45], next_hop=[fa:6c:45],flag=0x00000011,sn=0, metric=141,exp_time=56876
<7>[  863.760000] wlan0: received PREP from 00:0f:92:fa:6c:83
<0>[  864.750000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  864.750000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  864.750000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  864.750000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  864.750000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  864.750000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  864.750000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0
<0>[  864.750000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  864.750000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  864.750000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  864.750000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  864.750000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  864.750000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0
<0>[  864.760000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  865.750000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  865.750000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  865.750000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  865.750000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  865.750000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  865.750000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0
<0>[  865.760000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  866.750000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  866.750000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  866.750000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  866.750000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  866.750000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  866.750000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0
<0>[  866.760000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  867.760000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  867.760000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  867.760000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  867.760000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  867.760000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  867.760000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0
<0>[  867.760000] ==MHX1.1(airtime_link_metric_get) Calculate STA[fa:6c:45].rate=585
<0>[  867.760000] ==MHX1.2(airtime_link_metric_get) tx_time=36104, err=0, estimated_retx=256,result=141
<0>[  867.760000] ==MHX4.1(hwmp_route_info_get) action=0, from STA=[fa:6c:45], whose last_hop_metric=141
<0>[  867.760000] ==MHX4.2.1(hwmp_route_info_get) orig_addr=[fa:6c:83], IE dump : orig_sn=14838, orig_lifetime=4882, orig_metric=141.And new_metric=282.
<0>[  867.760000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  867.760000] ==MHX4.2.2(hwmp_route_info_get) mpath to orig_addr exists : flags=0x00000005, sn=14837, metric=282 .
<0>[  867.760000] ==MHX4.2.4(hwmp_route_info_get) fresh_info=1.
<0>[  867.760000] ==MHX4.2.5(hwmp_route_info_get) Updating orig_addr's mpath next_hop and other info and TX pending mpath Q.
<0>[  867.760000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[fa:6c:83], next_hop=[fa:6c:45],flag=0x00000015,sn=14838, metric=282,exp_time=57276
<0>[  867.760000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:45]
<0>[  867.760000] ==MHX4.4.0(hwmp_route_info_get) mpath to SA exists : flags=0x00000011, sn=0, metric=141 .
<0>[  867.760000] ==MHX4.4.2(hwmp_route_info_get) fresh_info=1.
<0>[  867.760000] ==MHX4.4.3(hwmp_route_info_get) Updating SA's mpath next_hop and other info and TX pending mpath Q.
<0>[  867.760000] ==MHX4.5(hwmp_route_info_get) mpath to SA=[fa:6c:45], next_hop=[fa:6c:45],flag=0x00000011,sn=0, metric=141,exp_time=57276
<7>[  867.760000] wlan0: received PREQ from 00:0f:92:fa:6c:83
<7>[  867.760000] wlan0: PREQ is for us
<7>[  867.760000] wlan0: replying to the PREQ
<7>[  867.760000] wlan0: sending PREP to 00:0f:92:fa:6c:83
<0>[  867.760000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  867.860000] ==MHX1.1(airtime_link_metric_get) Calculate STA[fa:6c:45].rate=585
<0>[  867.860000] ==MHX1.2(airtime_link_metric_get) tx_time=36104, err=0, estimated_retx=256,result=141
<0>[  867.860000] ==MHX4.1(hwmp_route_info_get) action=0, from STA=[fa:6c:45], whose last_hop_metric=141
<0>[  867.860000] ==MHX4.2.1(hwmp_route_info_get) orig_addr=[fa:6c:83], IE dump : orig_sn=14839, orig_lifetime=4882, orig_metric=141.And new_metric=282.
<0>[  867.860000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  867.860000] ==MHX4.2.2(hwmp_route_info_get) mpath to orig_addr exists : flags=0x00000015, sn=14838, metric=282 .
<0>[  867.860000] ==MHX4.2.4(hwmp_route_info_get) fresh_info=1.
<0>[  867.860000] ==MHX4.2.5(hwmp_route_info_get) Updating orig_addr's mpath next_hop and other info and TX pending mpath Q.
<0>[  867.860000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[fa:6c:83], next_hop=[fa:6c:45],flag=0x00000015,sn=14839, metric=282,exp_time=57286
<0>[  867.860000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:45]
<0>[  867.860000] ==MHX4.4.0(hwmp_route_info_get) mpath to SA exists : flags=0x00000011, sn=0, metric=141 .
<0>[  867.860000] ==MHX4.4.2(hwmp_route_info_get) fresh_info=1.
<0>[  867.860000] ==MHX4.4.3(hwmp_route_info_get) Updating SA's mpath next_hop and other info and TX pending mpath Q.
<0>[  867.860000] ==MHX4.5(hwmp_route_info_get) mpath to SA=[fa:6c:45], next_hop=[fa:6c:45],flag=0x00000011,sn=0, metric=141,exp_time=57286
<7>[  867.860000] wlan0: received PREQ from 00:0f:92:fa:6c:83
<7>[  867.860000] wlan0: PREQ is for us
<7>[  867.860000] wlan0: replying to the PREQ
<7>[  867.860000] wlan0: sending PREP to 00:0f:92:fa:6c:83
<0>[  868.760000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  868.760000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  868.760000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  868.760000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  868.760000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  868.760000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0
<0>[  868.760000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  869.760000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  869.760000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  869.760000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  869.760000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  869.760000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  869.760000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0
<0>[  869.760000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  870.760000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  870.760000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  870.760000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  870.760000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  870.760000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  870.760000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0
<0>[  870.770000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  871.760000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  871.760000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  871.760000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  871.760000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  871.760000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  871.760000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0
<0>[  871.770000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  872.760000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  872.760000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  872.760000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  872.760000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  872.760000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  872.760000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<7>[  872.760000] wlan0: sending PREQ to 00:0f:92:fa:6c:83
<0>[  872.760000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0
<0>[  872.770000] ==MHX1.1(airtime_link_metric_get) Calculate STA[fa:6c:45].rate=585
<0>[  872.770000] ==MHX1.2(airtime_link_metric_get) tx_time=36104, err=0, estimated_retx=256,result=141
<0>[  872.770000] ==MHX4.1(hwmp_route_info_get) action=0, from STA=[fa:6c:45], whose last_hop_metric=141
<0>[  872.770000] ==MHX4.2.1(hwmp_route_info_get) orig_addr=[fa:80:82], IE dump : orig_sn=132, orig_lifetime=4882, orig_metric=141.And new_metric=282.
<0>[  872.770000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[fa:80:82], next_hop=[00:00:00],flag=0x000f0f00,sn=132, metric=282,exp_time=0
<0>[  872.770000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:45]
<0>[  872.770000] ==MHX4.4.0(hwmp_route_info_get) mpath to SA exists : flags=0x00000011, sn=0, metric=141 .
<0>[  872.770000] ==MHX4.4.2(hwmp_route_info_get) fresh_info=1.
<0>[  872.770000] ==MHX4.4.3(hwmp_route_info_get) Updating SA's mpath next_hop and other info and TX pending mpath Q.
<0>[  872.770000] ==MHX4.5(hwmp_route_info_get) mpath to SA=[fa:6c:45], next_hop=[fa:6c:45],flag=0x00000011,sn=0, metric=141,exp_time=57777
<0>[  872.770000] ==MHX1.1(airtime_link_metric_get) Calculate STA[fa:6c:45].rate=585
<0>[  872.770000] ==MHX1.2(airtime_link_metric_get) tx_time=36104, err=0, estimated_retx=256,result=141
<0>[  872.770000] ==MHX4.1(hwmp_route_info_get) action=0, from STA=[fa:6c:45], whose last_hop_metric=141
<0>[  872.770000] ==MHX4.2.1(hwmp_route_info_get) orig_addr=[fa:6c:83], IE dump : orig_sn=14840, orig_lifetime=4882, orig_metric=1261.And new_metric=1402.
<0>[  872.770000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  872.770000] ==MHX4.2.2(hwmp_route_info_get) mpath to orig_addr exists : flags=0x00000007, sn=14839, metric=282 .
<0>[  872.770000] ==MHX4.2.4(hwmp_route_info_get) fresh_info=1.
<0>[  872.770000] ==MHX4.2.5(hwmp_route_info_get) Updating orig_addr's mpath next_hop and other info and TX pending mpath Q.
<0>[  872.770000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[fa:6c:83], next_hop=[fa:6c:45],flag=0x00000017,sn=14840, metric=1402,exp_time=57777
<0>[  872.770000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:45]
<0>[  872.770000] ==MHX4.4.0(hwmp_route_info_get) mpath to SA exists : flags=0x00000011, sn=0, metric=141 .
<0>[  872.770000] ==MHX4.4.2(hwmp_route_info_get) fresh_info=1.
<0>[  872.770000] ==MHX4.4.3(hwmp_route_info_get) Updating SA's mpath next_hop and other info and TX pending mpath Q.
<0>[  872.770000] ==MHX4.5(hwmp_route_info_get) mpath to SA=[fa:6c:45], next_hop=[fa:6c:45],flag=0x00000011,sn=0, metric=141,exp_time=57777
<7>[  872.770000] wlan0: received PREQ from 00:0f:92:fa:6c:83
<7>[  872.770000] wlan0: PREQ is for us
<7>[  872.770000] wlan0: replying to the PREQ
<7>[  872.770000] wlan0: sending PREP to 00:0f:92:fa:6c:83
<0>[  872.770000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  873.770000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  873.770000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  873.770000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  873.770000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  873.770000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  873.770000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0
<0>[  873.770000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<7>[  874.510000] wlan0: peer 00:0f:92:fa:6c:83 in state LISTEN got event OPN_ACPT
<7>[  874.610000] wlan0: Mesh plink timer for 00:0f:92:fa:6c:83 fired on state OPN-RCVD
<7>[  874.610000] wlan0: Mesh plink for 00:0f:92:fa:6c:83 (retry, timeout): 0 100
<7>[  874.610000] wlan0: peer 00:0f:92:fa:6c:83 in state OPN-RCVD got event CNF_ACPT
<7>[  874.610000] wlan0: HT20 sta (00:0f:92:fa:6c:83) is present
<7>[  874.610000] wlan0: HT20 sta (00:0f:92:fa:6c:45) is present
<7>[  874.610000] wlan0: Mesh plink with 00:0f:92:fa:6c:83 ESTABLISHED
<0>[  874.610000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:83].failed=0,sta->fail_avg=0
<0>[  874.770000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  874.770000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  874.770000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  874.770000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  874.770000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  874.770000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0
<0>[  875.770000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  875.770000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  875.770000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  875.770000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  875.770000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  875.770000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0
<0>[  876.770000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  876.770000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  876.770000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  876.770000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  876.770000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  876.770000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0
<0>[  876.880000] ==MHX1.1(airtime_link_metric_get) Calculate STA[fa:6c:45].rate=585
<0>[  876.880000] ==MHX1.2(airtime_link_metric_get) tx_time=36104, err=0, estimated_retx=256,result=141
<0>[  876.880000] ==MHX4.1(hwmp_route_info_get) action=0, from STA=[fa:6c:45], whose last_hop_metric=141
<0>[  876.880000] ==MHX4.2.1(hwmp_route_info_get) orig_addr=[fa:6c:83], IE dump : orig_sn=14841, orig_lifetime=4882, orig_metric=291.And new_metric=432.
<0>[  876.880000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  876.880000] ==MHX4.2.2(hwmp_route_info_get) mpath to orig_addr exists : flags=0x00000005, sn=14840, metric=1402 .
<0>[  876.880000] ==MHX4.2.4(hwmp_route_info_get) fresh_info=1.
<0>[  876.880000] ==MHX4.2.5(hwmp_route_info_get) Updating orig_addr's mpath next_hop and other info and TX pending mpath Q.
<0>[  876.880000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[fa:6c:83], next_hop=[fa:6c:45],flag=0x00000015,sn=14841, metric=432,exp_time=58188
<0>[  876.880000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:45]
<0>[  876.880000] ==MHX4.4.0(hwmp_route_info_get) mpath to SA exists : flags=0x00000011, sn=0, metric=141 .
<0>[  876.880000] ==MHX4.4.2(hwmp_route_info_get) fresh_info=1.
<0>[  876.880000] ==MHX4.4.3(hwmp_route_info_get) Updating SA's mpath next_hop and other info and TX pending mpath Q.
<0>[  876.880000] ==MHX4.5(hwmp_route_info_get) mpath to SA=[fa:6c:45], next_hop=[fa:6c:45],flag=0x00000011,sn=0, metric=141,exp_time=58188
<7>[  876.880000] wlan0: received PREQ from 00:0f:92:fa:6c:83
<7>[  876.880000] wlan0: PREQ is for us
<7>[  876.880000] wlan0: replying to the PREQ
<7>[  876.880000] wlan0: sending PREP to 00:0f:92:fa:6c:83
<0>[  876.880000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  877.770000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  877.770000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  877.770000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  877.770000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  877.770000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  877.770000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0
<0>[  877.770000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  878.770000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  878.770000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  878.770000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  878.770000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  878.770000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  878.770000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0
<0>[  878.780000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  879.770000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  879.770000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  879.770000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  879.770000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  879.770000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  879.770000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0
<0>[  879.790000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  880.770000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  880.770000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  880.770000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  880.770000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  880.770000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  880.770000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0
<0>[  880.790000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  881.770000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  881.770000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  881.770000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  881.770000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  881.770000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  881.770000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<7>[  881.770000] wlan0: sending PREQ to 00:0f:92:fa:6c:83
<0>[  881.770000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0
<0>[  881.780000] ==MHX1.1(airtime_link_metric_get) Calculate STA[fa:6c:45].rate=585
<0>[  881.780000] ==MHX1.2(airtime_link_metric_get) tx_time=36104, err=0, estimated_retx=256,result=141
<0>[  881.780000] ==MHX4.1(hwmp_route_info_get) action=0, from STA=[fa:6c:45], whose last_hop_metric=141
<0>[  881.780000] ==MHX4.2.1(hwmp_route_info_get) orig_addr=[fa:80:82], IE dump : orig_sn=134, orig_lifetime=4882, orig_metric=141.And new_metric=282.
<0>[  881.780000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[fa:80:82], next_hop=[00:00:00],flag=0x000f0f00,sn=134, metric=282,exp_time=0
<0>[  881.780000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:45]
<0>[  881.780000] ==MHX4.4.0(hwmp_route_info_get) mpath to SA exists : flags=0x00000011, sn=0, metric=141 .
<0>[  881.780000] ==MHX4.4.2(hwmp_route_info_get) fresh_info=1.
<0>[  881.780000] ==MHX4.4.3(hwmp_route_info_get) Updating SA's mpath next_hop and other info and TX pending mpath Q.
<0>[  881.780000] ==MHX4.5(hwmp_route_info_get) mpath to SA=[fa:6c:45], next_hop=[fa:6c:45],flag=0x00000011,sn=0, metric=141,exp_time=58678
<0>[  881.780000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  881.780000] ==MHX1.1(airtime_link_metric_get) Calculate STA[fa:6c:45].rate=585
<0>[  881.780000] ==MHX1.2(airtime_link_metric_get) tx_time=36104, err=0, estimated_retx=256,result=141
<0>[  881.780000] ==MHX4.1(hwmp_route_info_get) action=1, from STA=[fa:6c:45], whose last_hop_metric=141
<0>[  881.780000] ==MHX4.2.1(hwmp_route_info_get) orig_addr=[fa:6c:83], IE dump : orig_sn=14842, orig_lifetime=4882, orig_metric=1364.And new_metric=1505.
<0>[  881.780000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  881.780000] ==MHX4.2.2(hwmp_route_info_get) mpath to orig_addr exists : flags=0x00000007, sn=14841, metric=432 .
<0>[  881.780000] ==MHX4.2.4(hwmp_route_info_get) fresh_info=1.
<0>[  881.780000] ==MHX4.2.5(hwmp_route_info_get) Updating orig_addr's mpath next_hop and other info and TX pending mpath Q.
<0>[  881.780000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[fa:6c:83], next_hop=[fa:6c:45],flag=0x00000017,sn=14842, metric=1505,exp_time=58678
<0>[  881.780000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:45]
<0>[  881.780000] ==MHX4.4.0(hwmp_route_info_get) mpath to SA exists : flags=0x00000011, sn=0, metric=141 .
<0>[  881.780000] ==MHX4.4.2(hwmp_route_info_get) fresh_info=1.
<0>[  881.780000] ==MHX4.4.3(hwmp_route_info_get) Updating SA's mpath next_hop and other info and TX pending mpath Q.
<0>[  881.780000] ==MHX4.5(hwmp_route_info_get) mpath to SA=[fa:6c:45], next_hop=[fa:6c:45],flag=0x00000011,sn=0, metric=141,exp_time=58678
<7>[  881.780000] wlan0: received PREP from 00:0f:92:fa:6c:83
<0>[  882.780000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  882.780000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  882.780000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  882.780000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  882.780000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  882.780000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0
<0>[  882.780000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  883.780000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  883.780000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  883.780000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  883.780000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  883.780000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  883.780000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0
<0>[  883.780000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  884.780000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  884.780000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  884.780000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  884.780000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  884.780000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  884.780000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0
<0>[  884.780000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  885.780000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  885.780000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  885.780000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  885.780000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  885.780000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  885.780000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0
<0>[  886.780000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  886.780000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  886.780000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  886.780000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  886.780000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  886.780000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<7>[  886.780000] wlan0: sending PREQ to 00:0f:92:fa:6c:83
<0>[  886.780000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0
<0>[  886.780000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  886.780000] ==MHX1.1(airtime_link_metric_get) Calculate STA[fa:6c:45].rate=585
<0>[  886.780000] ==MHX1.2(airtime_link_metric_get) tx_time=36104, err=0, estimated_retx=256,result=141
<0>[  886.780000] ==MHX4.1(hwmp_route_info_get) action=0, from STA=[fa:6c:45], whose last_hop_metric=141
<0>[  886.780000] ==MHX4.2.1(hwmp_route_info_get) orig_addr=[fa:80:82], IE dump : orig_sn=135, orig_lifetime=4882, orig_metric=141.And new_metric=282.
<0>[  886.780000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[fa:80:82], next_hop=[00:00:00],flag=0x000f0f00,sn=135, metric=282,exp_time=0
<0>[  886.780000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:45]
<0>[  886.780000] ==MHX4.4.0(hwmp_route_info_get) mpath to SA exists : flags=0x00000011, sn=0, metric=141 .
<0>[  886.780000] ==MHX4.4.2(hwmp_route_info_get) fresh_info=1.
<0>[  886.780000] ==MHX4.4.3(hwmp_route_info_get) Updating SA's mpath next_hop and other info and TX pending mpath Q.
<0>[  886.780000] ==MHX4.5(hwmp_route_info_get) mpath to SA=[fa:6c:45], next_hop=[fa:6c:45],flag=0x00000011,sn=0, metric=141,exp_time=59178
<0>[  886.880000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<7>[  886.880000] wlan0: sending PREQ to 00:0f:92:fa:6c:83
<0>[  886.880000] ==MHX1.1(airtime_link_metric_get) Calculate STA[fa:6c:45].rate=585
<0>[  886.880000] ==MHX1.2(airtime_link_metric_get) tx_time=36104, err=0, estimated_retx=256,result=141
<0>[  886.880000] ==MHX4.1(hwmp_route_info_get) action=0, from STA=[fa:6c:45], whose last_hop_metric=141
<0>[  886.880000] ==MHX4.2.1(hwmp_route_info_get) orig_addr=[fa:80:82], IE dump : orig_sn=136, orig_lifetime=4882, orig_metric=141.And new_metric=282.
<0>[  886.880000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[fa:80:82], next_hop=[00:00:00],flag=0x000f0f00,sn=136, metric=282,exp_time=0
<0>[  886.880000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:45]
<0>[  886.880000] ==MHX4.4.0(hwmp_route_info_get) mpath to SA exists : flags=0x00000011, sn=0, metric=141 .
<0>[  886.880000] ==MHX4.4.2(hwmp_route_info_get) fresh_info=1.
<0>[  886.880000] ==MHX4.4.3(hwmp_route_info_get) Updating SA's mpath next_hop and other info and TX pending mpath Q.
<0>[  886.880000] ==MHX4.5(hwmp_route_info_get) mpath to SA=[fa:6c:45], next_hop=[fa:6c:45],flag=0x00000011,sn=0, metric=141,exp_time=59188
<0>[  886.880000] ==MHX1.1(airtime_link_metric_get) Calculate STA[fa:6c:45].rate=585
<0>[  886.880000] ==MHX1.2(airtime_link_metric_get) tx_time=36104, err=0, estimated_retx=256,result=141
<0>[  886.880000] ==MHX4.1(hwmp_route_info_get) action=1, from STA=[fa:6c:45], whose last_hop_metric=141
<0>[  886.880000] ==MHX4.2.1(hwmp_route_info_get) orig_addr=[fa:6c:83], IE dump : orig_sn=14844, orig_lifetime=4882, orig_metric=180.And new_metric=321.
<0>[  886.880000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  886.880000] ==MHX4.2.2(hwmp_route_info_get) mpath to orig_addr exists : flags=0x00000006, sn=14842, metric=1505 .
<0>[  886.880000] ==MHX4.2.4(hwmp_route_info_get) fresh_info=1.
<0>[  886.880000] ==MHX4.2.5(hwmp_route_info_get) Updating orig_addr's mpath next_hop and other info and TX pending mpath Q.
<0>[  886.880000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[fa:6c:83], next_hop=[fa:6c:45],flag=0x00000017,sn=14844, metric=321,exp_time=59188
<0>[  886.880000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:45]
<0>[  886.880000] ==MHX4.4.0(hwmp_route_info_get) mpath to SA exists : flags=0x00000011, sn=0, metric=141 .
<0>[  886.880000] ==MHX4.4.2(hwmp_route_info_get) fresh_info=1.
<0>[  886.880000] ==MHX4.4.3(hwmp_route_info_get) Updating SA's mpath next_hop and other info and TX pending mpath Q.
<0>[  886.880000] ==MHX4.5(hwmp_route_info_get) mpath to SA=[fa:6c:45], next_hop=[fa:6c:45],flag=0x00000011,sn=0, metric=141,exp_time=59188
<7>[  886.880000] wlan0: received PREP from 00:0f:92:fa:6c:83
<0>[  887.780000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  887.780000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  887.780000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  887.780000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  887.780000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  887.780000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0
<0>[  887.890000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  888.780000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  888.780000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  888.780000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  888.780000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  888.780000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  888.780000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0
<0>[  888.790000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  889.780000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  889.780000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  889.780000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  889.780000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  889.780000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  889.780000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0
<0>[  889.780000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  890.780000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  890.780000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  890.780000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  890.780000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  890.780000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  890.780000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0
<0>[  890.790000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  891.780000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  891.780000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  891.780000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  891.780000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  891.780000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  891.780000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<7>[  891.780000] wlan0: sending PREQ to 00:0f:92:fa:6c:83
<0>[  891.780000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0
<0>[  891.780000] ==MHX1.1(airtime_link_metric_get) Calculate STA[fa:6c:45].rate=585
<0>[  891.780000] ==MHX1.2(airtime_link_metric_get) tx_time=36104, err=0, estimated_retx=256,result=141
<0>[  891.780000] ==MHX4.1(hwmp_route_info_get) action=0, from STA=[fa:6c:45], whose last_hop_metric=141
<0>[  891.780000] ==MHX4.2.1(hwmp_route_info_get) orig_addr=[fa:80:82], IE dump : orig_sn=137, orig_lifetime=4882, orig_metric=1261.And new_metric=1402.
<0>[  891.780000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[fa:80:82], next_hop=[00:00:00],flag=0x000f0f00,sn=137, metric=1402,exp_time=0
<0>[  891.780000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:45]
<0>[  891.780000] ==MHX4.4.0(hwmp_route_info_get) mpath to SA exists : flags=0x00000011, sn=0, metric=141 .
<0>[  891.780000] ==MHX4.4.2(hwmp_route_info_get) fresh_info=1.
<0>[  891.780000] ==MHX4.4.3(hwmp_route_info_get) Updating SA's mpath next_hop and other info and TX pending mpath Q.
<0>[  891.780000] ==MHX4.5(hwmp_route_info_get) mpath to SA=[fa:6c:45], next_hop=[fa:6c:45],flag=0x00000011,sn=0, metric=141,exp_time=59678
<0>[  891.790000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  891.880000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<7>[  891.880000] wlan0: sending PREQ to 00:0f:92:fa:6c:83





<0>[  891.880000] ==MHX1.1(airtime_link_metric_get) Calculate STA[fa:6c:83].rate=585
<0>[  891.880000] ==MHX1.2(airtime_link_metric_get) tx_time=36104, err=0, estimated_retx=256,result=141
<0>[  891.880000] ==MHX4.1(hwmp_route_info_get) action=1, from STA=[fa:6c:83], whose last_hop_metric=141	// The 1st direct PREP from MP3. The last_hop_metric should be wrong because MP1 has never sent packets directly to MP3.
<0>[  891.880000] ==MHX4.2.1(hwmp_route_info_get) orig_addr=[fa:6c:83], IE dump : orig_sn=14846, orig_lifetime=4882, orig_metric=0.And new_metric=141.
<0>[  891.880000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  891.880000] ==MHX4.2.2(hwmp_route_info_get) mpath to orig_addr exists : flags=0x00000007, sn=14844, metric=321 .
<0>[  891.880000] ==MHX4.2.4(hwmp_route_info_get) fresh_info=1.
<0>[  891.880000] ==MHX4.2.5(hwmp_route_info_get) Updating orig_addr's mpath next_hop and other info and TX pending mpath Q.
<0>[  891.880000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[fa:6c:83], next_hop=[fa:6c:83],flag=0x00000017,sn=14846, metric=141,exp_time=59688
<0>[  891.880000] ==MHX4.5(hwmp_route_info_get) mpath to SA=[fa:6c:83], next_hop=[fa:6c:83],flag=0x00000017,sn=14846, metric=141,exp_time=59688
<7>[  891.880000] wlan0: received PREP from 00:0f:92:fa:6c:83



<0>[  891.880000] ==MHX1.1(airtime_link_metric_get) Calculate STA[fa:6c:45].rate=585
<0>[  891.880000] ==MHX1.2(airtime_link_metric_get) tx_time=36104, err=0, estimated_retx=256,result=141
<0>[  891.880000] ==MHX4.1(hwmp_route_info_get) action=1, from STA=[fa:6c:45], whose last_hop_metric=141	// MP3's PREP fwded by MP2
<0>[  891.880000] ==MHX4.2.1(hwmp_route_info_get) orig_addr=[fa:6c:83], IE dump : orig_sn=14844, orig_lifetime=4882, orig_metric=180.And new_metric=321.
<0>[  891.880000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  891.880000] ==MHX4.2.2(hwmp_route_info_get) mpath to orig_addr exists : flags=0x00000017, sn=14846, metric=141 .
<0>[  891.880000] ==MHX4.2.4(hwmp_route_info_get) fresh_info=0.		// 141(MP1-MP3) < 141(MP1-MP2) + 180(MP2-MP3) = 321. No change next_hop
<0>[  891.880000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[fa:6c:83], next_hop=[fa:6c:83],flag=0x00000017,sn=14844, metric=321(new metric),exp_time=59688
<0>[  891.880000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:45]
<0>[  891.880000] ==MHX4.4.0(hwmp_route_info_get) mpath to SA exists : flags=0x00000011, sn=0, metric=141 .
<0>[  891.880000] ==MHX4.4.2(hwmp_route_info_get) fresh_info=1.
<0>[  891.880000] ==MHX4.4.3(hwmp_route_info_get) Updating SA's mpath next_hop and other info and TX pending mpath Q.
<0>[  891.880000] ==MHX4.5(hwmp_route_info_get) mpath to SA=[fa:6c:45], next_hop=[fa:6c:45],flag=0x00000011,sn=0, metric=141,exp_time=59688





<0>[  891.880000] ==MHX1.1(airtime_link_metric_get) Calculate STA[fa:6c:45].rate=585
<0>[  891.880000] ==MHX1.2(airtime_link_metric_get) tx_time=36104, err=0, estimated_retx=256,result=141
<0>[  891.880000] ==MHX4.1(hwmp_route_info_get) action=0, from STA=[fa:6c:45], whose last_hop_metric=141	// MP1 self's PREQ fwded by MP2
<0>[  891.880000] ==MHX4.2.1(hwmp_route_info_get) orig_addr=[fa:80:82], IE dump : orig_sn=138, orig_lifetime=4882, orig_metric=180.And new_metric=321.
<0>[  891.880000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[fa:80:82], next_hop=[00:00:00],flag=0x000f0f00,sn=138, metric=321,exp_time=0	// NO process
<0>[  891.880000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:45]
<0>[  891.880000] ==MHX4.4.0(hwmp_route_info_get) mpath to SA exists : flags=0x00000011, sn=0, metric=141 .
<0>[  891.880000] ==MHX4.4.2(hwmp_route_info_get) fresh_info=1.
<0>[  891.880000] ==MHX4.4.3(hwmp_route_info_get) Updating SA's mpath next_hop and other info and TX pending mpath Q.
<0>[  891.880000] ==MHX4.5(hwmp_route_info_get) mpath to SA=[fa:6c:45], next_hop=[fa:6c:45],flag=0x00000011,sn=0, metric=141,exp_time=59688




<0>[  891.880000] ==MHX1.1(airtime_link_metric_get) Calculate STA[fa:6c:45].rate=585
<0>[  891.880000] ==MHX1.2(airtime_link_metric_get) tx_time=36104, err=0, estimated_retx=256,result=141
<0>[  891.880000] ==MHX4.1(hwmp_route_info_get) action=1, from STA=[fa:6c:45], whose last_hop_metric=141	//MP3's PREP fwded by MP2
<0>[  891.880000] ==MHX4.2.1(hwmp_route_info_get) orig_addr=[fa:6c:83], IE dump : orig_sn=14846, orig_lifetime=4882, orig_metric=149.And new_metric=290. // 149 is MP2-MP3 metric. 141+149=290.
<0>[  891.880000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  891.880000] ==MHX4.2.2(hwmp_route_info_get) mpath to orig_addr exists : flags=0x00000017, sn=14846, metric=141 .
<0>[  891.880000] ==MHX4.2.4(hwmp_route_info_get) fresh_info=0.
<0>[  891.880000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[fa:6c:83], next_hop=[fa:6c:83],flag=0x00000017,sn=14846, metric=290,exp_time=59688
<0>[  891.880000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:45]
<0>[  891.880000] ==MHX4.4.0(hwmp_route_info_get) mpath to SA exists : flags=0x00000011, sn=0, metric=141 .
<0>[  891.880000] ==MHX4.4.2(hwmp_route_info_get) fresh_info=1.
<0>[  891.880000] ==MHX4.4.3(hwmp_route_info_get) Updating SA's mpath next_hop and other info and TX pending mpath Q.
<0>[  891.880000] ==MHX4.5(hwmp_route_info_get) mpath to SA=[fa:6c:45], next_hop=[fa:6c:45],flag=0x00000011,sn=0, metric=141,exp_time=59688
<0>[  892.780000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  892.780000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  892.780000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  892.780000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  892.780000] ==MHX3.1(mesh_nexthop_resolve) err=0
<7>[  892.790000] wlan0: Open BA session requested for 00:0f:92:fa:6c:83 tid 0
<0>[  892.790000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:83].failed=0,sta->fail_avg=0
<7>[  892.790000] wlan0: activated addBA response timer on 00:0f:92:fa:6c:83 tid 0
<0>[  892.790000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<7>[  892.790000] wlan0: switched off addBA timer for 00:0f:92:fa:6c:83 tid 0
<7>[  892.790000] wlan0: Aggregation is on for 00:0f:92:fa:6c:83 tid 0
<0>[  893.790000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  893.790000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  893.790000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  893.790000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  893.790000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  893.790000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:83].failed=0,sta->fail_avg=0
<0>[  893.790000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  894.790000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  894.790000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  894.790000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  894.790000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  894.790000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  894.800000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:83].failed=0,sta->fail_avg=0
<0>[  894.800000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  895.780000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  895.780000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  895.780000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  895.780000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  895.780000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  895.780000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  895.790000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  895.790000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  895.790000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  895.790000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  895.790000] ==MHX3.1(mesh_nexthop_resolve) err=0






<0>[  895.830000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:83].failed=1,sta->fail_avg=20	// Jus start to know that MP1-MP3 is not a good link
<0>[  895.830000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:83].failed=1,sta->fail_avg=36



<0>[  895.910000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  895.910000] ==MHX1.1(airtime_link_metric_get) Calculate STA[fa:6c:45].rate=585
<0>[  895.910000] ==MHX1.2(airtime_link_metric_get) tx_time=36104, err=0, estimated_retx=256,result=141
<0>[  895.910000] ==MHX4.1(hwmp_route_info_get) action=0, from STA=[fa:6c:45], whose last_hop_metric=141	//MP3's PREQ fwded by MP2
<0>[  895.910000] ==MHX4.2.1(hwmp_route_info_get) orig_addr=[fa:6c:83], IE dump : orig_sn=14847, orig_lifetime=4882, orig_metric=149.And new_metric=290.
<0>[  895.910000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  895.910000] ==MHX4.2.2(hwmp_route_info_get) mpath to orig_addr exists : flags=0x00000005, sn=14846, metric=141 .
<0>[  895.910000] ==MHX4.2.4(hwmp_route_info_get) fresh_info=1.
<0>[  895.910000] ==MHX4.2.5(hwmp_route_info_get) Updating orig_addr's mpath next_hop and other info and TX pending mpath Q.
<0>[  895.910000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[fa:6c:83], next_hop=[fa:6c:45],flag=0x00000015,sn=14847, metric=290,exp_time=60091	// Why mpath->metric updated from 141 to 290??????? Always use newer SN???



<0>[  895.910000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:45]
<0>[  895.910000] ==MHX4.4.0(hwmp_route_info_get) mpath to SA exists : flags=0x00000011, sn=0, metric=141 .
<0>[  895.910000] ==MHX4.4.2(hwmp_route_info_get) fresh_info=1.
<0>[  895.910000] ==MHX4.4.3(hwmp_route_info_get) Updating SA's mpath next_hop and other info and TX pending mpath Q.
<0>[  895.910000] ==MHX4.5(hwmp_route_info_get) mpath to SA=[fa:6c:45], next_hop=[fa:6c:45],flag=0x00000011,sn=0, metric=141,exp_time=60091
<7>[  895.910000] wlan0: received PREQ from 00:0f:92:fa:6c:83
<7>[  895.910000] wlan0: PREQ is for us
<7>[  895.910000] wlan0: replying to the PREQ
<7>[  895.910000] wlan0: sending PREP to 00:0f:92:fa:6c:83





<0>[  896.780000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  896.780000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  896.780000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  896.780000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  896.780000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  896.780000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  896.780000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0
<0>[  896.790000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  896.790000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  896.790000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  896.790000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  896.790000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  896.790000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0
<0>[  896.790000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  897.790000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  897.790000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  897.790000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  897.790000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  897.790000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  897.790000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0
<0>[  897.790000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  898.790000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  898.790000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  898.790000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  898.790000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  898.790000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  898.790000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0
<0>[  898.790000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  899.790000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  899.790000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  899.790000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  899.790000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  899.790000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  899.790000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0
<0>[  899.800000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  900.790000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  900.790000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[  900.790000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  900.790000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  900.790000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[  900.790000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<7>[  900.790000] wlan0: sending PREQ to 00:0f:92:fa:6c:83
<0>[  900.790000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0
<0>[  900.800000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[  900.890000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<7>[  900.890000] wlan0: sending PREQ to 00:0f:92:fa:6c:83
<0>[  900.890000] ==MHX1.1(airtime_link_metric_get) Calculate STA[fa:6c:45].rate=585
<0>[  900.890000] ==MHX1.2(airtime_link_metric_get) tx_time=36104, err=0, estimated_retx=256,result=141
<0>[  900.890000] ==MHX4.1(hwmp_route_info_get) action=1, from STA=[fa:6c:45], whose last_hop_metric=141
<0>[  900.890000] ==MHX4.2.1(hwmp_route_info_get) orig_addr=[fa:6c:83], IE dump : orig_sn=14847, orig_lifetime=4882, orig_metric=149.And new_metric=290.
<0>[  900.890000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  900.890000] ==MHX4.2.2(hwmp_route_info_get) mpath to orig_addr exists : flags=0x00000007, sn=14847, metric=290 .
<0>[  900.890000] ==MHX4.2.4(hwmp_route_info_get) fresh_info=0.
<0>[  900.890000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[fa:6c:83], next_hop=[fa:6c:45],flag=0x00000007,sn=14847, metric=290,exp_time=60091
<0>[  900.890000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:45]
<0>[  900.890000] ==MHX4.4.0(hwmp_route_info_get) mpath to SA exists : flags=0x00000011, sn=0, metric=141 .
<0>[  900.890000] ==MHX4.4.2(hwmp_route_info_get) fresh_info=1.
<0>[  900.890000] ==MHX4.4.3(hwmp_route_info_get) Updating SA's mpath next_hop and other info and TX pending mpath Q.
<0>[  900.890000] ==MHX4.5(hwmp_route_info_get) mpath to SA=[fa:6c:45], next_hop=[fa:6c:45],flag=0x00000011,sn=0, metric=141,exp_time=60589
<0>[  900.890000] ==MHX1.1(airtime_link_metric_get) Calculate STA[fa:6c:45].rate=585
<0>[  900.890000] ==MHX1.2(airtime_link_metric_get) tx_time=36104, err=0, estimated_retx=256,result=141
<0>[  900.890000] ==MHX4.1(hwmp_route_info_get) action=0, from STA=[fa:6c:45], whose last_hop_metric=141
<0>[  900.890000] ==MHX4.2.1(hwmp_route_info_get) orig_addr=[fa:80:82], IE dump : orig_sn=141, orig_lifetime=4882, orig_metric=149.And new_metric=290.
<0>[  900.890000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[fa:80:82], next_hop=[00:00:00],flag=0x000f0f00,sn=141, metric=290,exp_time=0
<0>[  900.890000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:45]
<0>[  900.890000] ==MHX4.4.0(hwmp_route_info_get) mpath to SA exists : flags=0x00000011, sn=0, metric=141 .
<0>[  900.890000] ==MHX4.4.2(hwmp_route_info_get) fresh_info=1.
<0>[  900.890000] ==MHX4.4.3(hwmp_route_info_get) Updating SA's mpath next_hop and other info and TX pending mpath Q.
<0>[  900.890000] ==MHX4.5(hwmp_route_info_get) mpath to SA=[fa:6c:45], next_hop=[fa:6c:45],flag=0x00000011,sn=0, metric=141,exp_time=60589
<0>[  900.890000] ==MHX1.1(airtime_link_metric_get) Calculate STA[fa:6c:45].rate=585
<0>[  900.890000] ==MHX1.2(airtime_link_metric_get) tx_time=36104, err=0, estimated_retx=256,result=141
<0>[  900.890000] ==MHX4.1(hwmp_route_info_get) action=1, from STA=[fa:6c:45], whose last_hop_metric=141
<0>[  900.890000] ==MHX4.2.1(hwmp_route_info_get) orig_addr=[fa:6c:83], IE dump : orig_sn=14849, orig_lifetime=4882, orig_metric=141.And new_metric=282.
<0>[  900.890000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[  900.890000] ==MHX4.2.2(hwmp_route_info_get) mpath to orig_addr exists : flags=0x00000007, sn=14847, metric=290 .
<0>[  900.890000] ==MHX4.2.4(hwmp_route_info_get) fresh_info=1.
<0>[  900.890000] ==MHX4.2.5(hwmp_route_info_get) Updating orig_addr's mpath next_hop and other info and TX pending mpath Q.
<0>[  900.890000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[fa:6c:83], next_hop=[fa:6c:45],flag=0x00000017,sn=14849, metric=282,exp_time=60589
<0>[  900.890000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:45]
<0>[  900.890000] ==MHX4.4.0(hwmp_route_info_get) mpath to SA exists : flags=0x00000011, sn=0, metric=141 .
<0>[  900.890000] ==MHX4.4.2(hwmp_route_info_get) fresh_info=1.
<0>[  900.890000] ==MHX4.4.3(hwmp_route_info_get) Updating SA's mpath next_hop and other info and TX pending mpath Q.
<0>[  900.890000] ==MHX4.5(hwmp_route_info_get) mpath to SA=[fa:6c:45], next_hop=[fa:6c:45],flag=0x00000011,sn=0, metric=141,exp_time=60589
<7>[  900.890000] wlan0: received PREP from 00:0f:92:fa:6c:83
^C
root@UserDevice:~# 



Oct 25, 2017
About TU: TU = 1.024mS
#define MESH_DEFAULT_BEACON_INTERVAL	1000	/* in 1024 us units (=TUs) */

Our default:
*
 * Minimum interval between two consecutive PREQs originated by the same
 * interface
 */
#define MESH_PREQ_MIN_INT	10		// 10 mS. Used by ifmsh->preq_queue
#define MESH_PERR_MIN_INT	100
#define MESH_DIAM_TRAVERSAL_TIME 50		// 50 mS

#define MESH_RSSI_THRESHOLD	0
/*
 * A path will be refreshed if it is used PATH_REFRESH_TIME milliseconds
 * before timing out.  This way it will remain ACTIVE and no data frames
 * will be unnecessarily held in the pending queue.
 */
#define MESH_PATH_REFRESH_TIME			1000
#define MESH_MIN_DISCOVERY_TIMEOUT (2 * MESH_DIAM_TRAVERSAL_TIME)

#define IEEE80211_MESH_HOUSEKEEPING_INTERVAL (60 * HZ)

#define MESH_PATH_EXPIRE (600 * HZ)


Do same test as Oct 24:

MP1:
root@UserDevice:~# tcpdump -i wlan0 -env
tcpdump: WARNING: wlan0: no IPv4 address assigned
tcpdump: listening on wlan0, link-type EN10MB (Ethernet), capture size 65535 bytes
15:04:07.444448 00:0e:c6:89:41:be > ff:ff:ff:ff:ff:ff, ethertype ARP (0x0806), length 60: Ethernet (len 6), IPv4 (len 4), Request who-has 192.168.168.105 tell 192.168.168.100, length 46
15:04:07.451461 00:22:15:8e:a0:44 > 00:0e:c6:89:41:be, ethertype ARP (0x0806), length 60: Ethernet (len 6), IPv4 (len 4), Reply 192.168.168.105 is-at 00:22:15:8e:a0:44, length 46
15:04:07.452128 00:0e:c6:89:41:be > 00:22:15:8e:a0:44, ethertype IPv4 (0x0800), length 98: (tos 0x0, ttl 64, id 0, offset 0, flags [DF], proto ICMP (1), length 84)
    192.168.168.100 > 192.168.168.105: ICMP echo request, id 20348, seq 1, length 64
15:04:07.460401 00:22:15:8e:a0:44 > 00:0e:c6:89:41:be, ethertype IPv4 (0x0800), length 98: (tos 0x0, ttl 64, id 3843, offset 0, flags [none], proto ICMP (1), length 84)
    192.168.168.105 > 192.168.168.100: ICMP echo reply, id 20348, seq 1, length 64


// 5 secnods later...
15:04:13.456466 00:22:15:8e:a0:44 > 00:0e:c6:89:41:be, ethertype ARP (0x0806), length 60: Ethernet (len 6), IPv4 (len 4), Request who-has 192.168.168.100 tell 192.168.168.105, length 46
15:04:13.456969 00:0e:c6:89:41:be > 00:22:15:8e:a0:44, ethertype ARP (0x0806), length 60: Ethernet (len 6), IPv4 (len 4), Reply 192.168.168.100 is-at 00:0e:c6:89:41:be, length 46
15:04:13.496523 00:0f:92:02:f8:2e > 01:00:5e:00:00:01, ethertype IPv4 (0x0800), length 46: (tos 0xc0, ttl 1, id 0, offset 0, flags [DF], proto IGMP (2), length 32, options (RA))
    0.0.0.0 > 224.0.0.1: igmp query v2
15:04:15.929704 00:0f:92:02:f7:f0 > 01:00:5e:00:00:01, ethertype IPv4 (0x0800), length 46: (tos 0xc0, ttl 1, id 0, offset 0, flags [DF], proto IGMP (2), length 32, options (RA))
    0.0.0.0 > 224.0.0.1: igmp query v2
15:04:19.708673 00:0f:92:04:0f:59 > 01:00:5e:00:00:01, ethertype IPv4 (0x0800), length 46: (tos 0xc0, ttl 1, id 0, offset 0, flags [DF], proto IGMP (2), length 32, options (RA))
    0.0.0.0 > 224.0.0.1: igmp query v2
15:04:19.759108 00:0e:c6:89:41:be > 01:00:5e:00:00:fb, ethertype IPv4 (0x0800), length 60: (tos 0xc0, ttl 1, id 0, offset 0, flags [DF], proto IGMP (2), length 32, options (RA))
    192.168.168.100 > 224.0.0.251: igmp v2 report 224.0.0.251

<0>[ 2001.010000] ==MHX1.1(airtime_link_metric_get) Calculate STA[fa:6c:45].rate=390
<0>[ 2001.010000] ==MHX1.2(airtime_link_metric_get) tx_time=54029, err=0, estimated_retx=256,result=211
<0>[ 2001.010000] ==MHX4.1(hwmp_route_info_get) action=0, from STA=[fa:6c:45], whose last_hop_metric=211	// Received PREQ from MP2
<0>[ 2001.010000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]						// Process routing info of orig_addr=MP3
<0>[ 2001.010000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 2001.010000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[fa:6c:83], next_hop=[fa:6c:45],flag=0x00000015,sn=1, metric=352,exp_time=170601  //metric=orig_metric(from MP2's IE, MP2-MP3 metric=141 see below) + last_hop_metric(211).
<0>[ 2001.010000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:45]						// Process routing info of SA=MP2.
<0>[ 2001.010000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 2001.010000] ==MHX4.4(hwmp_route_info_get) mpath to SA=[fa:6c:45], next_hop=[fa:6c:45],flag=0x00000011,sn=0, metric=211,exp_time=170601		//metric=last_hop_metric(211) of MP2
<7>[ 2001.010000] wlan0: received PREQ from 00:0f:92:fa:6c:83		// The orig_addr is MP3 , actually this PREQ frame is from MP2
<7>[ 2001.010000] wlan0: PREQ is for us
<7>[ 2001.010000] wlan0: replying to the PREQ
<7>[ 2001.010000] wlan0: sending PREP to 00:0f:92:fa:6c:83




<0>[ 2001.020000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<7>[ 2001.020000] wlan0: Rx A-MPDU request on 00:0f:92:fa:6c:45 tid 0 result 0
<0>[ 2001.020000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 2001.020000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 2001.020000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]



<0>[ 2001.020000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]		// ICMP to MP3
<0>[ 2001.020000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[ 2001.020000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0		// Actually sent to MP2 and get MP2's tx_status.


<0>[ 2001.030000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]


MP2:
root@UserDevice:~# tcpdump -i wlan0 -env
tcpdump: WARNING: wlan0: no IPv4 address assigned
tcpdump: listening on wlan0, link-type EN10MB (Ethernet), capture size 65535 bytes
15:04:13.499366 00:0e:c6:89:41:be > ff:ff:ff:ff:ff:ff, ethertype ARP (0x0806), length 60: Ethernet (len 6), IPv4 (len 4), Request who-has 192.168.168.105 tell 192.168.168.100, length 46
15:04:13.504837 00:22:15:8e:a0:44 > 00:0e:c6:89:41:be, ethertype ARP (0x0806), length 60: Ethernet (len 6), IPv4 (len 4), Reply 192.168.168.105 is-at 00:22:15:8e:a0:44, length 46
15:04:13.507102 00:0e:c6:89:41:be > 00:22:15:8e:a0:44, ethertype IPv4 (0x0800), length 98: (tos 0x0, ttl 64, id 0, offset 0, flags [DF], proto ICMP (1), length 84)
    192.168.168.100 > 192.168.168.105: ICMP echo request, id 20348, seq 1, length 64
15:04:13.513481 00:22:15:8e:a0:44 > 00:0e:c6:89:41:be, ethertype IPv4 (0x0800), length 98: (tos 0x0, ttl 64, id 3843, offset 0, flags [none], proto ICMP (1), length 84)
    192.168.168.105 > 192.168.168.100: ICMP echo reply, id 20348, seq 1, length 64


<0>[ 2007.990000] ===MHX6.1(mpath_lookup) Looking for dst=[89:41:be]
<0>[ 2007.990000] ==MHX1.1(airtime_link_metric_get) Calculate STA[fa:6c:83].rate=585
<0>[ 2007.990000] ==MHX1.2(airtime_link_metric_get) tx_time=36104, err=0, estimated_retx=256,result=141
<0>[ 2007.990000] ==MHX4.1(hwmp_route_info_get) action=0, from STA=[fa:6c:83], whose last_hop_metric=141
<0>[ 2007.990000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 2007.990000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 2007.990000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[fa:6c:83], next_hop=[fa:6c:83],flag=0x00000015,sn=1, metric=141,exp_time=171299
<0>[ 2007.990000] ==MHX4.4(hwmp_route_info_get) mpath to SA=[fa:6c:83], next_hop=[fa:6c:83],flag=0x00000015,sn=1, metric=141,exp_time=171299
<7>[ 2007.990000] wlan0: received PREQ from 00:0f:92:fa:6c:83






<0>[ 2007.990000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:80:82]
<0>[ 2007.990000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<7>[ 2007.990000] wlan0: forwarding the PREQ from 00:0f:92:fa:6c:83
<7>[ 2007.990000] wlan0: sending PREQ to 00:0f:92:fa:80:82




<0>[ 2007.990000] ==MHX1.1(airtime_link_metric_get) Calculate STA[fa:80:82].rate=585
<0>[ 2007.990000] ==MHX1.2(airtime_link_metric_get) tx_time=36104, err=0, estimated_retx=256,result=141
<0>[ 2007.990000] ==MHX4.1(hwmp_route_info_get) action=1, from STA=[fa:80:82], whose last_hop_metric=141
<0>[ 2007.990000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:80:82]
<0>[ 2007.990000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 2007.990000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[fa:80:82], next_hop=[fa:80:82],flag=0x00000015,sn=1, metric=141,exp_time=171299
<0>[ 2007.990000] ==MHX4.4(hwmp_route_info_get) mpath to SA=[fa:80:82], next_hop=[fa:80:82],flag=0x00000015,sn=1, metric=141,exp_time=171299
<7>[ 2007.990000] wlan0: received PREP from 00:0f:92:fa:80:82







<0>[ 2007.990000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<7>[ 2007.990000] wlan0: sending PREP to 00:0f:92:fa:6c:83
<0>[ 2008.000000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 2008.000000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:80:82]
<7>[ 2008.000000] wlan0: Open BA session requested for 00:0f:92:fa:80:82 tid 0
<0>[ 2008.000000] ==MHX2.1(ieee80211s_update_metric) STA[fa:80:82].failed=0,sta->fail_avg=0		// Sent ARP rep to MP1 and get tx_status
<7>[ 2008.000000] wlan0: activated addBA response timer on 00:0f:92:fa:80:82 tid 0
<7>[ 2008.000000] wlan0: switched off addBA timer for 00:0f:92:fa:80:82 tid 0
<7>[ 2008.000000] wlan0: Aggregation is on for 00:0f:92:fa:80:82 tid 0
<0>[ 2008.000000] ===MHX6.1(mpath_lookup) Looking for dst=[89:41:be]
<0>[ 2008.000000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:83]
<0>[ 2008.000000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:83].failed=0,sta->fail_avg=0		// Sent ICMP req to MP3 and get tx_status
<0>[ 2008.010000] ===MHX6.1(mpath_lookup) Looking for dst=[8e:a0:44]
<0>[ 2008.010000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:80:82]




<0>[ 2008.010000] ==MHX2.1(ieee80211s_update_metric) STA[fa:80:82].failed=0,sta->fail_avg=0		// Sent ICMP rep to MP1 and get tx_status


MP3:

root@UserDevice:~# tcpdump -i wlan0 -env
tcpdump: WARNING: wlan0: no IPv4 address assigned
tcpdump: listening on wlan0, link-type EN10MB (Ethernet), capture size 65535 bytes
15:04:12.661392 00:0e:c6:89:41:be > ff:ff:ff:ff:ff:ff, ethertype ARP (0x0806), length 60: Ethernet (len 6), IPv4 (len 4), Request who-has 192.168.168.105 tell 192.168.168.100, length 46
15:04:12.661611 00:22:15:8e:a0:44 > 00:0e:c6:89:41:be, ethertype ARP (0x0806), length 60: Ethernet (len 6), IPv4 (len 4), Reply 192.168.168.105 is-at 00:22:15:8e:a0:44, length 46
15:04:12.670666 00:0e:c6:89:41:be > 00:22:15:8e:a0:44, ethertype IPv4 (0x0800), length 98: (tos 0x0, ttl 64, id 0, offset 0, flags [DF], proto ICMP (1), length 84)
    192.168.168.100 > 192.168.168.105: ICMP echo request, id 20348, seq 1, length 64
15:04:12.670841 00:22:15:8e:a0:44 > 00:0e:c6:89:41:be, ethertype IPv4 (0x0800), length 98: (tos 0x0, ttl 64, id 3843, offset 0, flags [none], proto ICMP (1), length 84)
    192.168.168.105 > 192.168.168.100: ICMP echo reply, id 20348, seq 1, length 64


<0>[ 2005.950000] ===MHX6.1(mpath_lookup) Looking for dst=[89:41:be]
<0>[ 2005.950000] ===MHX6.1(mpath_lookup) Looking for dst=[89:41:be]
<0>[ 2005.950000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 2005.950000] ===MHX6.1(mpath_lookup) Looking for dst=[89:41:be]



<0>[ 2005.950000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:80:82]
<0>[ 2005.950000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 2005.950000] ==MHX3.1(mesh_nexthop_resolve) err=-2			// skb's addr3(Mesh dest addr) is not found

<0>[ 2005.950000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:80:82]	// 2nd search ,seems redundant.
<0>[ 2005.950000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...

<0>[ 2005.950000] ==MHX3.2(mesh_nexthop_resolve) mpath=  (null)		// call mpath = mesh_path_add(sdata, target_addr) to create a mpath to dst=[fa:80:82].
<0>[ 2005.950000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=0		// call mesh_queue_preq(mpath, PREQ_Q_F_START) to start a PREQ. Enqueue this PREQ to ifmsh->preq_queue.++ifmsh->preq_queue_len.
<0>[ 2005.950000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=1		// Very 1st ARP  rep is queued by mpath frame_queue.
<0>[ 2005.950000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:80:82]
<7>[ 2005.950000] wlan0: sending PREQ to 00:0f:92:fa:80:82		// Path not known, need to find mpath.





<0>[ 2005.950000] ==MHX1.1(airtime_link_metric_get) Calculate STA[fa:6c:45].rate=65
<0>[ 2005.950000] ==MHX1.2(airtime_link_metric_get) tx_time=322894, err=0, estimated_retx=256,result=1261
<0>[ 2005.950000] ==MHX4.1(hwmp_route_info_get) action=0, from STA=[fa:6c:45], whose last_hop_metric=1261		// Get PREQ from MP2??? Yes, MP2 is fwding MP3's PREQ and MP3 can hear it.
<0>[ 2005.950000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[fa:6c:83], next_hop=[00:00:00],flag=0x000f0f00,sn=1, metric=1402,exp_time=0
<0>[ 2005.950000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:45]
<0>[ 2005.950000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 2005.950000] ==MHX4.4(hwmp_route_info_get) mpath to SA=[fa:6c:45], next_hop=[fa:6c:45],flag=0x00000011,sn=0, metric=1261,exp_time=171095





<0>[ 2005.950000] ==MHX1.1(airtime_link_metric_get) Calculate STA[fa:6c:45].rate=65		// Received PREP from MP2. This is fwded from MP1 by MP2.
<0>[ 2005.950000] ==MHX1.2(airtime_link_metric_get) tx_time=322894, err=0, estimated_retx=256,result=1261
<0>[ 2005.950000] ==MHX4.1(hwmp_route_info_get) action=1, from STA=[fa:6c:45], whose last_hop_metric=1261
<0>[ 2005.950000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:80:82]				// Process the orig_addr=MP1 routing info first.

<0>[ 2005.950000] ==MHX5.1(mesh_path_assign_nexthop) Change next_hop of the Q-ed mpath frames : addr1(DA)=[fa:6c:45], addr2(SA)=[fa:6c:83]	// Change the queued ARP rep DA to MP2 instead of MP1.

<0>[ 2005.950000] ==MHX4.3(hwmp_route_info_get) mpath to orig_addr=[fa:80:82], next_hop=[fa:6c:45],flag=0x00000017,sn=1, metric=1402,exp_time=171095
<0>[ 2005.950000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:6c:45]				// Process the routing info of SA=MP2. 
<0>[ 2005.950000] ==MHX4.4(hwmp_route_info_get) mpath to SA=[fa:6c:45], next_hop=[fa:6c:45],flag=0x00000011,sn=0, metric=1261,exp_time=171095
<7>[ 2005.950000] wlan0: received PREP from 00:0f:92:fa:80:82




<0>[ 2005.950000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0	// Sent ARP rep via MP2.
<0>[ 2005.950000] ===MHX6.1(mpath_lookup) Looking for dst=[89:41:be]
<0>[ 2005.950000] ===MHX6.1(mpath_lookup) Looking for dst=[89:41:be]
<0>[ 2005.960000] ==MHX6.2(mpath_lookup) no mpath found returning NULL...
<0>[ 2005.960000] ===MHX6.1(mpath_lookup) Looking for dst=[89:41:be]




<0>[ 2005.960000] ===MHX6.1(mpath_lookup) Looking for dst=[fa:80:82]
<0>[ 2005.960000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[ 2005.960000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0	// Sent ICMP rep via MP2.


Oct 24, 2017
PC----------MP1~~~~MP2~~~~~MP3 ping 1 time. When PC ping MP3, MP1 broadcast ARP first.

MP1:
16:36:44.448070 ARP, Request who-has 192.168.168.3 tell 192.168.168.100, length 46			//MP1 broadcasts ARP req
16:36:44.455222 ARP, Reply 192.168.168.3 is-at 00:0f:92:02:f8:2e (oui Unknown), length 28		//MP3 unicasts ARP rep
16:36:44.455619 IP 192.168.168.100 > 192.168.168.3: ICMP echo request, id 14202, seq 1, length 64
16:36:44.461149 IP 192.168.168.3 > 192.168.168.100: ICMP echo reply, id 14202, seq 1, length 64
16:36:46.340786 IP 192.168.168.105.netbios-dgm > 192.168.168.255.netbios-dgm: NBT UDP PACKET(138)
16:36:46.341895 IP 192.168.168.105.netbios-dgm > 192.168.168.255.netbios-dgm: NBT UDP PACKET(138)
16:36:49.472346 ARP, Request who-has 192.168.168.100 tell 192.168.168.3, length 28			//5 seconds later, MP3 sent ARP req
16:36:49.472725 ARP, Reply 192.168.168.100 is-at 00:0e:c6:89:41:be (oui Unknown), length 46
16:37:07.272962 IP 0.0.0.0 > 224.0.0.1: igmp query v2

<0>[ 7557.810000] ==MHX1.1(airtime_link_metric_get) Calculate STA[fa:6c:45].rate=60			//Received PREQ from MP3, fwded by MP2
<0>[ 7557.810000] ==MHX1.2(airtime_link_metric_get) tx_time=349781, err=0, estimated_retx=256,result=1366
<7>[ 7557.810000] wlan0: received PREQ from 00:0f:92:fa:6c:83
<7>[ 7557.810000] wlan0: PREQ is for us
<7>[ 7557.810000] wlan0: replying to the PREQ
<7>[ 7557.810000] wlan0: sending PREP to 00:0f:92:fa:6c:83
<0>[ 7557.820000] ==MHX3.1(mesh_nexthop_resolve) err=0							//This is ICMP req. PREP is not data but mgmt so doesn't call mesh_nexthop_resolve.
<0>[ 7557.820000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0		//ICMP sent ok to MP2.


<0>[ 7562.830000] ==MHX1.1(airtime_link_metric_get) Calculate STA[fa:6c:45].rate=520			//PREQ from MP3 fwded by MP2
<0>[ 7562.830000] ==MHX1.2(airtime_link_metric_get) tx_time=40585, err=0, estimated_retx=256,result=158
<7>[ 7562.830000] wlan0: received PREQ from 00:0f:92:fa:6c:83
<7>[ 7562.830000] wlan0: PREQ is for us
<7>[ 7562.830000] wlan0: replying to the PREQ
<7>[ 7562.830000] wlan0: sending PREP to 00:0f:92:fa:6c:83
<0>[ 7562.830000] ==MHX3.1(mesh_nexthop_resolve) err=0							//PC unicasts to MP3 ARP rep.
<0>[ 7562.840000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0		//ARP rep to MP2 and then to MP3


MP2:
14:55:47.862173 ARP, Request who-has 192.168.168.3 tell 192.168.168.100, length 46
14:55:47.867628 ARP, Reply 192.168.168.3 is-at 00:0f:92:02:f8:2e (oui Unknown), length 28
14:55:47.869866 IP 192.168.168.100 > 192.168.168.3: ICMP echo request, id 14202, seq 1, length 64
14:55:47.873285 IP 192.168.168.3 > 192.168.168.100: ICMP echo reply, id 14202, seq 1, length 64
14:55:49.751751 IP 192.168.168.105.netbios-dgm > 192.168.168.255.netbios-dgm: NBT UDP PACKET(138)
14:55:49.752721 IP 192.168.168.105.netbios-dgm > 192.168.168.255.netbios-dgm: NBT UDP PACKET(138)
14:55:52.884752 ARP, Request who-has 192.168.168.100 tell 192.168.168.3, length 28
14:55:52.887194 ARP, Reply 192.168.168.100 is-at 00:0e:c6:89:41:be (oui Unknown), length 46

<0>[ 1501.160000] ==MHX1.1(airtime_link_metric_get) Calculate STA[fa:6c:83].rate=520			//Received PREQ from MP3.
<0>[ 1501.160000] ==MHX1.2(airtime_link_metric_get) tx_time=40585, err=0, estimated_retx=256,result=158
<7>[ 1501.160000] wlan0: received PREQ from 00:0f:92:fa:6c:83
<7>[ 1501.160000] wlan0: forwarding the PREQ from 00:0f:92:fa:6c:83
<7>[ 1501.160000] wlan0: sending PREQ to 00:0f:92:fa:80:82						//Fwd this PREQ to MP1
<0>[ 1501.160000] ==MHX1.1(airtime_link_metric_get) Calculate STA[fa:80:82].rate=520			//MP1 replied with PREP
<0>[ 1501.160000] ==MHX1.2(airtime_link_metric_get) tx_time=40585, err=0, estimated_retx=256,result=158
<7>[ 1501.160000] wlan0: received PREP from 00:0f:92:fa:80:82
<7>[ 1501.160000] wlan0: sending PREP to 00:0f:92:fa:6c:83						// Fwd this PREP to MP3
<0>[ 1501.160000] ==MHX2.1(ieee80211s_update_metric) STA[fa:80:82].failed=0,sta->fail_avg=0		// Fwd MP3's ARP rep to MP1
<0>[ 1501.160000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:83].failed=0,sta->fail_avg=0		// Fwd MP1's ICMP req to MP3
<0>[ 1501.170000] ==MHX2.1(ieee80211s_update_metric) STA[fa:80:82].failed=0,sta->fail_avg=0		// Fwd MP3's ICMP rep to MP1


<0>[ 1506.170000] ==MHX1.1(airtime_link_metric_get) Calculate STA[fa:6c:83].rate=520
<0>[ 1506.170000] ==MHX1.2(airtime_link_metric_get) tx_time=40585, err=0, estimated_retx=256,result=158
<7>[ 1506.170000] wlan0: received PREQ from 00:0f:92:fa:6c:83
<7>[ 1506.170000] wlan0: forwarding the PREQ from 00:0f:92:fa:6c:83
<7>[ 1506.170000] wlan0: sending PREQ to 00:0f:92:fa:80:82
<0>[ 1506.180000] ==MHX1.1(airtime_link_metric_get) Calculate STA[fa:80:82].rate=520
<0>[ 1506.180000] ==MHX1.2(airtime_link_metric_get) tx_time=40585, err=0, estimated_retx=256,result=158
<7>[ 1506.180000] wlan0: received PREP from 00:0f:92:fa:80:82
<7>[ 1506.180000] wlan0: sending PREP to 00:0f:92:fa:6c:83
<0>[ 1506.180000] ==MHX2.1(ieee80211s_update_metric) STA[fa:80:82].failed=0,sta->fail_avg=0		// MP3's ARP req is transformed to unicast to MP1??????
<0>[ 1506.180000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:83].failed=0,sta->fail_avg=0		// MP1's ARP rep to MP3


MP3:
14:55:45.317322 ARP, Request who-has UserDevice tell 192.168.168.100, length 46
14:55:45.317479 ARP, Reply UserDevice is-at 00:0f:92:02:f8:2e (oui Unknown), length 28
14:55:45.325994 IP 192.168.168.100 > UserDevice: ICMP echo request, id 14202, seq 1, length 64
14:55:45.326299 IP UserDevice > 192.168.168.100: ICMP echo reply, id 14202, seq 1, length 64
14:55:47.204655 IP 192.168.168.105.netbios-dgm > 192.168.168.255.netbios-dgm: NBT UDP PACKET(138)
14:55:47.204965 IP 192.168.168.105.netbios-dgm > 192.168.168.255.netbios-dgm: NBT UDP PACKET(138)
14:55:50.333293 ARP, Request who-has 192.168.168.100 tell UserDevice, length 28
14:55:50.343125 ARP, Reply 192.168.168.100 is-at 00:0e:c6:89:41:be (oui Unknown), length 46

<0>[ 1498.580000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1498.580000] ==MHX3.2(mesh_nexthop_resolve) mpath=82acc100
<0>[ 1498.580000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=4
<0>[ 1498.580000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=0
<7>[ 1498.580000] wlan0: sending PREQ to 00:0f:92:fa:80:82
<0>[ 1498.580000] ==MHX1.1(airtime_link_metric_get) Calculate STA[fa:6c:45].rate=60
<0>[ 1498.580000] ==MHX1.2(airtime_link_metric_get) tx_time=349781, err=0, estimated_retx=256,result=1366
<0>[ 1498.580000] ==MHX1.1(airtime_link_metric_get) Calculate STA[fa:6c:45].rate=60
<0>[ 1498.580000] ==MHX1.2(airtime_link_metric_get) tx_time=349781, err=0, estimated_retx=256,result=1366
<7>[ 1498.580000] wlan0: received PREP from 00:0f:92:fa:80:82
<0>[ 1498.580000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0		// MP3's ARP rep to PC
<0>[ 1498.590000] ==MHX3.1(mesh_nexthop_resolve) err=0
<0>[ 1498.590000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0		// MP3's ICMP reply to PC


<0>[ 1503.600000] ==MHX3.1(mesh_nexthop_resolve) err=-2
<0>[ 1503.600000] ==MHX3.2(mesh_nexthop_resolve) mpath=82acc100
<0>[ 1503.600000] ==MHX3.3(mesh_nexthop_resolve) mpath->flags=4
<0>[ 1503.600000] ==MHX3.5(mesh_nexthop_resolve) skb_queue_len(&mpath->frame_queue)=0
<7>[ 1503.600000] wlan0: sending PREQ to 00:0f:92:fa:80:82
<0>[ 1503.600000] ==MHX1.1(airtime_link_metric_get) Calculate STA[fa:6c:45].rate=60
<0>[ 1503.600000] ==MHX1.2(airtime_link_metric_get) tx_time=349781, err=0, estimated_retx=256,result=1366
<0>[ 1503.600000] ==MHX1.1(airtime_link_metric_get) Calculate STA[fa:6c:45].rate=60
<0>[ 1503.600000] ==MHX1.2(airtime_link_metric_get) tx_time=349781, err=0, estimated_retx=256,result=1366
<7>[ 1503.600000] wlan0: received PREP from 00:0f:92:fa:80:82
<0>[ 1503.600000] ==MHX2.1(ieee80211s_update_metric) STA[fa:6c:45].failed=0,sta->fail_avg=0		// MP3's ARP req changed to unicast ????????????


Oct 20,2017
About mesh "mesh_fwding = 1" set by "iw mesh0 set mesh_param mesh_forwarding 0 or 1".
My purpose of this patch is to save power in the smart devices or mobile phones that would like to join the mesh network but not to participate in forwarding the traffic, creating a selfish node.

Oct 18,2017
        dev <devname> mpath set <destination MAC address> next_hop <next hop MAC address>
        dev <devname> mpath new <destination MAC address> next_hop <next hop MAC address>
These 2 commands will break the link eventhough it is counter intuition. To block or open a plink, use this command:
	iw dev $MESH_IFACE station set $HW_ADDR plink_action [open|block]: trigers a specific peer link establishment process or blocks a specific peer link.

This is from:https://github.com/o11s/open80211s/wiki/HOWTO

You can modify the mesh path table with these commands:			// It changes the "Mesh Path Table". It doesn't work including the "mpath set" command.After chaning, the "iw wlan0 mpath dump" shows an expected path but "iw 										// wlan0 station dump" shows the plink to that node is still in "mesh plink:     ESTAB" status.
    iw dev $MESH_IFACE mpath del $DST_ADDR: to delete a mesh path entry.
    iw dev $MESH_IFACE mpath new $DST_ADDR next_hop $NEXTHOP_ADDR to force a specific network topology.

You can modify the mesh peer links table with these commands:		// It changes the "Peer Links Table". "iw wlan0 station set 00:0f:92:fa:80:82 plink_action block" will make "iw wlan0 station dump" show "mesh plink: BLOCKED"
									// and "iw wlan0 mpath dump" automatically changes after one peer link is blocked.
    iw dev $MESH_IFACE station dump: list all the plinks.
    iw dev $MESH_IFACE station set $HW_ADDR plink_action [open|block]: trigers a specific peer link stablishment process or blocks a specific peer link.
    iw dev $MESH_IFACE station del $HW_ADDR: deletes a peer link from the peer table.

Oct 17,2017
IEEE 802.11s draft defining mesh networking includes two channel access methods: mandatory EDCA and optional MCCA. Many papers, show that the performance of EDCA degrades dramatically in multihop networks because of the hidden stations (STAs) effect. One may say that IEEE 802.11 introduces the RTS/CTS mechanism to avoid this effect. Un-fortunately, this mechanism works effectively in infrastructure mode only as all STAs hear CTS frames transmitted by the AP and collisions of data frames are completely avoided. In multihop networks, due to their nature, there is no guarantee that all STAs hear CTS frames, so the RTS/CTS exchange is not enough to protect transmission

Test the mcast in mesh. MP1 mcast data and MP2 & MP3 receive. Signal on MP2 shows -75dbm and -80dbm. "iw wlan0 set mcast_rate 36" on MP1. The mcast T/P to MP2 & MP3 are 2.7Mbps & 1.8Mbps. If turn off MP3, the mcast T/P of MP1---MP2 jumps to 3.4Mbps from 2.7Mbps (26% jump). Just turn on MP3 and let join the mesh network, even it doesn't receive the mcast data by the PC behind it, the MP1---MP2 T/P still drops back to 2.7Mbps. 

Multicast dissemination in o11s is implemented via controlled
flooding.  This means that each mesh node will retransmit each
multicast frame exactly once.  Hence, an increase in the number of devices
in the network will result in an increase of retransmissions.

Oct 16, 2017
Manually set the mpath doesn't work. It wil break the link dont know why.
802.11s defines a mechanism called Neighbor Offset Synchronizaiton. This uses the TimeStamp in Beacon and ProbeResp frames. The clock synchronization can be used for many purposes, one of which is to avoid beacon collisions, called MeshBeaconCollisionAvoidance. This likes to occur in Mesh network because all MPs broadcast beacons.

MBCA is only for Beacon collision. 802.11s means MCCA for other traffics. Looks like the 802.11s uses enhanced distributed channel access (EDCA) as the mandatory MAC scheme. This is 4 ACs having different CW and DIFS to compete media for TXOP. This is the standard 802.11 method. Mesh Coordination Function (MCF) also defines an optional MAC scheme called MCF controlled channel access (MCCA). This is optional and I didn't see any code about it in mac80211 source code. So EDCA is mandatory and MCCA is optional. 

Why the RTS/CTS doesn't help the mesh T/P, like in Repeater mode? The answer:http://www.sciencedirect.com/science/article/pii/S1570870503000155?via%3Dihub. So 802.11s uses the NAV as a CSMA/CA method( CCA is disabled in pDDL ). All MPs receives NAV and backoff. In Repeater mode, the NAV doesn't work well maybe because hostapd+wpa_supplicant running on a same single STA. So one NAV on a virtyal interface may not restrict the other NAV in the other virtual interface that causes collisions. But RTS/CTS runs in PCU level and removes this conflicts. 


The TSF is based on a 1-MHz clock and "ticks" in microseconds. Beacon and ProbeResp frames have TSF.The "now" in a timestamp is when the first bit of the timestamp hits the PHY for transmission.

Oct 13, 2017
pDDL Mesh. Use default mesh parameters. RTS is defaluted to 64.

MP1								MP2						MP3
        signal:         -67 [-67] dBm						-67
        signal avg:     -68 [-68] dBm						-67
        noise floor:    -97 dBm							-97
	
	TCP T/P=22Mbps		<-----						---->	22Mbps
	UDP T/P=22.9Mbps(3.2%)	<-----						---->	23.7Mbps(0.5%)
|--------------------------------------	TCP T/P=7.5Mbps. ------------------------------------------------------->|	//Sometimes MP1 and MP3 direct talk with lower t/p.
|--------------------------------------	UDP T/P=10.6Mbps (0.8ms, 1%). ------------------------------------------>|	//IN best case MP3 always take to MP2.Sometimes MP1 and MP3 direct talk with lower t/p.

Set all 3 RTS to 0 and -1, doesn't seem have significant change. That means the MESH has a built-in collision free mechanism.

Considering all MPs sending beacons, and background HWMP protocol, this maybe the ideal number already.

Oct 12, 2017
WiKi about mac802.11s:
Wireless mesh networks is a relatively "stable-topology" network except for the occasional failure of nodes or addition of new nodes. The path of traffic, being aggregated from a large number of end users, changes infrequently. Practically all the traffic in an infrastructure mesh network is either forwarded to or from a gateway, while in wireless ad hoc networks or client mesh networks the traffic flows between arbitrary pairs of nodes.[2]

If rate of mobility among nodes are high, i.e., link breaks happen frequently, wireless mesh networks will start to break down and have low communication performance.

Oct 11, 2017
In REP "iw dev wlan0 set mcast_rate 36", In package/kernel/mac80211/src/drivers/net/wireless/ath/ath9k/ar9003_mac.c, ar9003_set_txdesc(),         (i->flags) &= ~ATH9K_TXDESC_RTSENA;    (i->flags) |= ATH9K_TXDESC_CTSENA; Set up a monitor interface on STA and see this when ping through REP to PC2:

18:55:36.185414 456066260us tsft 3.0 Mb/s 2477 MHz 11g/10Mhz -60dB signal [bit 29] 0us RA:00:0f:92:fa:80:82 Acknowledgment
18:55:36.185938 456066717us tsft 3.0 Mb/s 2477 MHz 11g/10Mhz -60dB signal [bit 29] 132us RA:02:0f:92:fa:6c:45 Clear-To-Send
18:55:36.186844 456067749us tsft 3.0 Mb/s 2477 MHz 11g/10Mhz -59dB signal [bit 29] 132us RA:00:0f:92:fa:6c:83 Clear-To-Send
18:55:36.186878 456068024us tsft 3.0 Mb/s 2477 MHz 11g/10Mhz -59dB signal [bit 29] 0us RA:00:0f:92:fa:6c:83 Acknowledgment
18:55:36.187736 456068421us tsft 3.0 Mb/s 2477 MHz 11g/10Mhz -60dB signal [bit 29] 136us RA:02:0f:92:fa:6c:45 Clear-To-Send	//CTS-self. REP Tx does not use RTS only CTS.
18:55:36.187802 456068704us tsft 3.0 Mb/s 2477 MHz 11g/10Mhz -61dB signal [bit 29] 0us RA:02:0f:92:fa:6c:45 Acknowledgment


18:55:37.187107 457067971us tsft 3.0 Mb/s 2477 MHz 11g/10Mhz -60dB signal [bit 29] 0us RA:00:0f:92:fa:80:82 Acknowledgment
18:55:37.187649 457068428us tsft 3.0 Mb/s 2477 MHz 11g/10Mhz -59dB signal [bit 29] 132us RA:02:0f:92:fa:6c:45 Clear-To-Send
18:55:37.188566 457069470us tsft 3.0 Mb/s 2477 MHz 11g/10Mhz -59dB signal [bit 29] 144us RA:00:0f:92:fa:6c:83 Clear-To-Send
18:55:37.188603 457069766us tsft 3.0 Mb/s 2477 MHz 11g/10Mhz -60dB signal [bit 29] 0us RA:00:0f:92:fa:6c:83 Acknowledgment
18:55:37.189483 457070170us tsft 3.0 Mb/s 2477 MHz 11g/10Mhz -59dB signal [bit 29] 136us RA:02:0f:92:fa:6c:45 Clear-To-Send	//CTS-self
18:55:37.189564 457070452us tsft 3.0 Mb/s 2477 MHz 11g/10Mhz -61dB signal [bit 29] 0us RA:02:0f:92:fa:6c:45 Acknowledgment



18:55:38.188824 458069704us tsft 3.0 Mb/s 2477 MHz 11g/10Mhz -59dB signal [bit 29] 0us RA:00:0f:92:fa:80:82 Acknowledgment
18:55:38.189376 458070158us tsft 3.0 Mb/s 2477 MHz 11g/10Mhz -59dB signal [bit 29] 132us RA:02:0f:92:fa:6c:45 Clear-To-Send
18:55:38.190281 458071184us tsft 3.0 Mb/s 2477 MHz 11g/10Mhz -59dB signal [bit 29] 132us RA:00:0f:92:fa:6c:83 Clear-To-Send
18:55:38.190331 458071459us tsft 3.0 Mb/s 2477 MHz 11g/10Mhz -60dB signal [bit 29] 0us RA:00:0f:92:fa:6c:83 Acknowledgment
18:55:38.191170 458071856us tsft 3.0 Mb/s 2477 MHz 11g/10Mhz -60dB signal [bit 29] 136us RA:02:0f:92:fa:6c:45 Clear-To-Send	//CTS-self
18:55:38.191237 458072138us tsft 3.0 Mb/s 2477 MHz 11g/10Mhz -61dB signal [bit 29] 0us RA:02:0f:92:fa:6c:45 Acknowledgment

But during the mcast T/P test, this CTS-self can not be seen in the dump. Looks like REP has no chance to send this CTS-self, or CTS-self doesn't apply to mcast packets even if the ATH9K_TXDESC_CTSENA flag is set. T/P is about 4.6Mbps a little bit better than normal 4Mbps@36Mbps mcast_rate. But when use unicast to do TCP and UDP t/p test, this CTS-self can always be seen in the monitor interface on STA. This means it is not no chanse the REP sends CTS-self, it is because the mcast packet doesn't send CTS-self. Double checked : even the flag is set, the mcast packets don't send any CTS-self. Don't know why????

Another way of thinking is that : The PCU h/w processes RTS/CTS. If AP-REP uses RTS/CTS, then REP-STA doesn't need to use RTS/CTS??? Because in REP, when a RTS is received, the PHY--->PCU will backoff. This is transparent to MAC layer. During this time, the VIF may still try to send data to STA, but the PCU will hold that because PCU knows the RTS. So REP will not "shoot down" AP's packets. Reverse direction is the same. AP receives REP's RTS and mute to not to shoot down REP's packets to STA.

In REP "iw phy0 set rts -1" to disable REP's RTS, AP's RTS is still on, and the TCP T/P drops to 6.7Mbps from 10Mbps, and the tx_retry count on AP jumps to 100 from 30. Do a reverse test AP turns off RTS and only REP sends RTS. The TCP T/P drops to 7.5Mbps from 19.6Mbps, and the tx_retry count on AP jumps to 60 from 15. This test shows, both AP and STA need to send RTS to avoid collision to get maximum T/P. Only one sending RTS is not enough. 

Oct 10,2017
In ar9003_set_txdesc(), (i->flags) |= ATH9K_TXDESC_CTSENA; to force self-cts. For WDS=1,1,0 settings, mcast T/P still as low as 2Mbps, no improvement. The test shows it doesn't affect unicast T/P. --------Can not capture the REP's self CTS frame on monitor interface of STA.

Force RTS like "(i->flags) |= ATH9K_TXDESC_RTSENA;" doesn't actually work for multicast traffic. The sys/kernel/debug/ieee80211/phy0/statistics/dot11RTS* don'y increment when transmitting multicast packets. At the same time, the monitor interface on STA can not see any RTS sent from REP.

Oct 6, 2017
http://www.revolutionwifi.net/revolutionwifi/2011/03/understanding-wi-fi-carrier-sense.html. My understanding is:
				/--------->Carrier Sense : detect and decode an incoming Wi-Fi signal preamble.PLCP Length field. PLCP header is ALWAYS 6Mbps@OFDM.
		/----->CCA------\--------->Energy Detection: ability of the receiver to detect the non-Wi-Fi energy level.
		\----->NAV : in the 802.11 MAC header Duration field which is part of the MPDU payload
DDL products disables CCA EnergyDetection ( set sensitivity to 255? ). NAV is active otherwise pDDLs can not talk. CS is active I believe.
Jason said if CCA is not disabled, a regular WiFi will make pDDL back off.

Oct 3,2017
Test multicast in Repeater mode. multicast from PC1--->AP--->REP--->STA--->PC2. 
1. Default with WDS=1,1,1,RTS=-1,-1,64 : Multicast T/P is about 5.1Mbps. tx_retry_count Delta(1 second) of AP--->REP is about 300; tx_retry_count Delta(1 second) of REP--->STA is about 140/second. [NOTE:] Do NOT overload by pushing too high mcast UDP data. Otherwise the T/P drops so low.

2. WDS=1,1,1,RTS=0,0,64. mcast T/P=11Mbps. AP--->REP tx_retry_count delta=10/second. REP--->STA  tx_retry_count Delta(1 second) of is about 5/second. The retry drops down significantly.

3. WDS=1,1,0, RTS=-1,-1,64. Mcast T/P is 2Mbps. When pushing 2.5Mbps UDP traffic, AP--->REP tx_retry_count delta=200/second, REP--->STA tx_retry_count Delta=0/second because this side is real Multicast packets. The collision is high with mcast traffic.

4. WDS=1,1,0, RTS=0,0,64. Mcast T/P still the same 2Mbps. When pushing 2.5Mbps UDP traffic, AP--->REP tx_retry_count delta=150/second. This RTS helped a little bit but not a solution.

Print the MAC addresses in AP's ath_tx_fill_desc() function.

#define MAC_FMT "%02x:%02x:%02x:%02x:%02x:%02x"
#define MAC_ADDR(addr) \
  ((unsigned char *)(addr)) [0], \
  ((unsigned char *)(addr)) [1], \
  ((unsigned char *)(addr)) [2], \
  ((unsigned char *)(addr)) [3], \
  ((unsigned char *)(addr)) [4], \
  ((unsigned char *)(addr)) [5]

        if ((hdr->frame_control & cpu_to_le16(IEEE80211_FCTL_FROMDS)) && (hdr->frame_control &cpu_to_le16(IEEE80211_FCTL_TODS))) {
            printk("4Address found "MAC_FMT","  MAC_FMT","  MAC_FMT","  MAC_FMT"\n", MAC_ADDR(hdr->addr1),MAC_ADDR(hdr->addr2),MAC_ADDR(hdr->addr3),MAC_ADDR(hdr->addr4));
            
        } else
            printk("3Address found "MAC_FMT","  MAC_FMT","  MAC_FMT"\n", MAC_ADDR(hdr->addr1),MAC_ADDR(hdr->addr2),MAC_ADDR(hdr->addr3));

        printk("===MHX(%s)1.1.aggr=%d,bf_first=%p, info.type=%d.\n", __func__, aggr,bf_first,info.type);

1. PC(00:0e:c6:89:41:be)---->AP(00:0f:92:fa:80:82)--->STA(00:0f:92:fa:6c:83), WDS=0,0. UDP from PC to STA b=15m.
<0>[  664.390000] ===MHX(ath_tx_fill_desc)
<0>[  664.390000] 3Address found 00:0f:92:fa:6c:83,00:0f:92:fa:80:82,00:0e:c6:89:41:be	//addr1=DA, addr2=TA, addr3=SA.
<0>[  664.390000] ===MHX(ath_tx_fill_desc)
<0>[  664.390000] 3Address found 00:0f:92:fa:6c:83,00:0f:92:fa:80:82,00:0e:c6:89:41:be	// while (bf) loop has 4 subframes(?) in it.
<0>[  664.390000] 3Address found 00:0f:92:fa:6c:83,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[  664.390000] 3Address found 00:0f:92:fa:6c:83,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[  664.390000] 3Address found 00:0f:92:fa:6c:83,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[  664.390000] ===MHX(ath_tx_fill_desc)
<0>[  664.390000] 3Address found 00:0f:92:fa:6c:83,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[  664.390000] ===MHX(ath_tx_fill_desc)
<0>[  664.390000] 3Address found 00:0f:92:fa:6c:83,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[  664.390000] 3Address found 00:0f:92:fa:6c:83,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[  664.390000] 3Address found 00:0f:92:fa:6c:83,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[  664.390000] 3Address found 00:0f:92:fa:6c:83,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[  664.390000] 3Address found 00:0f:92:fa:6c:83,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[  664.390000] ===MHX(ath_tx_fill_desc)
<0>[  664.390000] 3Address found 00:0f:92:fa:6c:83,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[  664.390000] ===MHX(ath_tx_fill_desc)
<0>[  664.390000] 3Address found 00:0f:92:fa:6c:83,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[  664.390000] 3Address found 00:0f:92:fa:6c:83,00:0f:92:fa:80:82,00:0e:c6:89:41:be

2. PC(00:0e:c6:89:41:be)---->AP(00:0f:92:fa:80:82)--->STA(00:0f:92:fa:6c:83), WDS=1,0. UDP from PC to STA b=15m.
<0>[ 1343.570000] ===MHX(ath_tx_fill_desc)
<0>[ 1343.570000] 3Address found 00:0f:92:fa:6c:83,00:0f:92:fa:80:82,00:0e:c6:89:41:be	//addr1=DA, addr2=TA, addr3=SA.
<0>[ 1343.570000] ===MHX(ath_tx_fill_desc)
<0>[ 1343.570000] 3Address found 00:0f:92:fa:6c:83,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[ 1343.570000] ===MHX(ath_tx_fill_desc)
<0>[ 1343.570000] 3Address found 00:0f:92:fa:6c:83,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[ 1343.570000] 3Address found 00:0f:92:fa:6c:83,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[ 1343.570000] 3Address found 00:0f:92:fa:6c:83,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[ 1343.570000] 3Address found 00:0f:92:fa:6c:83,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[ 1343.570000] ===MHX(ath_tx_fill_desc)
<0>[ 1343.570000] 3Address found 00:0f:92:fa:6c:83,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[ 1343.580000] ===MHX(ath_tx_fill_desc)
<0>[ 1343.580000] 3Address found 00:0f:92:fa:6c:83,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[ 1343.580000] 3Address found 00:0f:92:fa:6c:83,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[ 1343.580000] 3Address found 00:0f:92:fa:6c:83,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[ 1343.580000] 3Address found 00:0f:92:fa:6c:83,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[ 1343.580000] 3Address found 00:0f:92:fa:6c:83,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[ 1343.580000] 3Address found 00:0f:92:fa:6c:83,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[ 1343.580000] 3Address found 00:0f:92:fa:6c:83,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[ 1343.580000] 3Address found 00:0f:92:fa:6c:83,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[ 1343.580000] 3Address found 00:0f:92:fa:6c:83,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[ 1343.580000] ===MHX(ath_tx_fill_desc)
<0>[ 1343.580000] 3Address found 00:0f:92:fa:6c:83,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[ 1343.580000] ===MHX(ath_tx_fill_desc)
<0>[ 1343.580000] 3Address found 00:0f:92:fa:6c:83,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[ 1343.580000] 3Address found 00:0f:92:fa:6c:83,00:0f:92:fa:80:82,00:0e:c6:89:41:be

3. PC(00:0e:c6:89:41:be)---->AP(00:0f:92:fa:80:82)--->STA(00:0f:92:fa:6c:83), WDS=1,1. UDP from PC to STA b=15m.
<0>[  332.530000] ===MHX(ath_tx_fill_desc)1.0 Entering.
<0>[  332.530000] 4Address found 00:0f:92:fa:6c:83,00:0f:92:fa:80:82,00:0f:92:02:f8:2e,00:0e:c6:89:41:be	//addr1=RA, addr2=TA, addr3=DA(STA bridge MAC), addr4=SA
<0>[  332.530000] ===MHX(ath_tx_fill_desc)1.1.aggr=0,bf_first=  (null), info.type=0.

<0>[  332.530000] ===MHX(ath_tx_fill_desc)1.0 Entering.
<0>[  332.530000] 4Address found 00:0f:92:fa:6c:83,00:0f:92:fa:80:82,00:0f:92:02:f8:2e,00:0e:c6:89:41:be
<0>[  332.530000] ===MHX(ath_tx_fill_desc)1.1.aggr=0,bf_first=  (null), info.type=0.

<0>[  332.540000] ===MHX(ath_tx_fill_desc)1.0 Entering.
<0>[  332.540000] 4Address found 00:0f:92:fa:6c:83,00:0f:92:fa:80:82,00:0f:92:02:f8:2e,00:0e:c6:89:41:be
<0>[  332.540000] ===MHX(ath_tx_fill_desc)1.1.aggr=1,bf_first=  (null), info.type=0.
<0>[  332.540000] 4Address found 00:0f:92:fa:6c:83,00:0f:92:fa:80:82,00:0f:92:02:f8:2e,00:0e:c6:89:41:be
<0>[  332.540000] ===MHX(ath_tx_fill_desc)1.1.aggr=1,bf_first=831dd2c0, info.type=0.
<0>[  332.540000] 4Address found 00:0f:92:fa:6c:83,00:0f:92:fa:80:82,00:0f:92:02:f8:2e,00:0e:c6:89:41:be
<0>[  332.540000] ===MHX(ath_tx_fill_desc)1.1.aggr=1,bf_first=831dd2c0, info.type=0.
<0>[  332.540000] 4Address found 00:0f:92:fa:6c:83,00:0f:92:fa:80:82,00:0f:92:02:f8:2e,00:0e:c6:89:41:be
<0>[  332.540000] ===MHX(ath_tx_fill_desc)1.1.aggr=1,bf_first=831dd2c0, info.type=0.
<0>[  332.540000] 4Address found 00:0f:92:fa:6c:83,00:0f:92:fa:80:82,00:0f:92:02:f8:2e,00:0e:c6:89:41:be
<0>[  332.540000] ===MHX(ath_tx_fill_desc)1.1.aggr=1,bf_first=831dd2c0, info.type=0.
<0>[  332.540000] 4Address found 00:0f:92:fa:6c:83,00:0f:92:fa:80:82,00:0f:92:02:f8:2e,00:0e:c6:89:41:be
<0>[  332.540000] ===MHX(ath_tx_fill_desc)1.1.aggr=1,bf_first=831dd2c0, info.type=0.


<0>[  332.540000] ===MHX(ath_tx_fill_desc)1.0 Entering.
<0>[  332.540000] 4Address found 00:0f:92:fa:6c:83,00:0f:92:fa:80:82,00:0f:92:02:f8:2e,00:0e:c6:89:41:be
<0>[  332.540000] ===MHX(ath_tx_fill_desc)1.1.aggr=0,bf_first=  (null), info.type=0.


<0>[  332.540000] ===MHX(ath_tx_fill_desc)1.0 Entering.
<0>[  332.540000] 4Address found 00:0f:92:fa:6c:83,00:0f:92:fa:80:82,00:0f:92:02:f8:2e,00:0e:c6:89:41:be
<0>[  332.540000] ===MHX(ath_tx_fill_desc)1.1.aggr=1,bf_first=  (null), info.type=0.
<0>[  332.540000] 4Address found 00:0f:92:fa:6c:83,00:0f:92:fa:80:82,00:0f:92:02:f8:2e,00:0e:c6:89:41:be
<0>[  332.540000] ===MHX(ath_tx_fill_desc)1.1.aggr=1,bf_first=831dbd18, info.type=0.
<0>[  332.540000] 4Address found 00:0f:92:fa:6c:83,00:0f:92:fa:80:82,00:0f:92:02:f8:2e,00:0e:c6:89:41:be
<0>[  332.540000] ===MHX(ath_tx_fill_desc)1.1.aggr=1,bf_first=831dbd18, info.type=0.
<0>[  332.540000] 4Address found 00:0f:92:fa:6c:83,00:0f:92:fa:80:82,00:0f:92:02:f8:2e,00:0e:c6:89:41:be
<0>[  332.540000] ===MHX(ath_tx_fill_desc)1.1.aggr=1,bf_first=831dbd18, info.type=0.
<0>[  332.540000] 4Address found 00:0f:92:fa:6c:83,00:0f:92:fa:80:82,00:0f:92:02:f8:2e,00:0e:c6:89:41:be
<0>[  332.540000] ===MHX(ath_tx_fill_desc)1.1.aggr=1,bf_first=831dbd18, info.type=0.


Test in the AP--->REP--->STA scenario.
1. PC(00:0e:c6:89:41:be)---->AP(00:0f:92:fa:80:82)--->(02:0F:92:FA:6C:45)REP(00:0F:92:FA:6C:45)--->STA(00:0f:92:fa:6c:83), WDS=0,0,0 UDP from PC to STA b=15m.
<0>[ 4896.400000] ===MHX(ath_tx_fill_desc)1.0 Entering.
<0>[ 4896.400000] 3Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,00:0e:c6:89:41:be	//addr1=RA, addr2=TA, addr3=SA.
<0>[ 4896.400000] ===MHX(ath_tx_fill_desc)1.1.aggr=0,bf_first=  (null), info.type=0.

<0>[ 4896.400000] ===MHX(ath_tx_fill_desc)1.0 Entering.
<0>[ 4896.400000] 3Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[ 4896.400000] ===MHX(ath_tx_fill_desc)1.1.aggr=1,bf_first=  (null), info.type=0.
<0>[ 4896.400000] 3Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[ 4896.400000] ===MHX(ath_tx_fill_desc)1.1.aggr=1,bf_first=831da620, info.type=0.
<0>[ 4896.400000] 3Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[ 4896.400000] ===MHX(ath_tx_fill_desc)1.1.aggr=1,bf_first=831da620, info.type=0.

<0>[ 4896.400000] ===MHX(ath_tx_fill_desc)1.0 Entering.
<0>[ 4896.400000] 3Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[ 4896.400000] ===MHX(ath_tx_fill_desc)1.1.aggr=1,bf_first=  (null), info.type=0.
<0>[ 4896.400000] 3Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[ 4896.400000] ===MHX(ath_tx_fill_desc)1.1.aggr=1,bf_first=831da770, info.type=0.

<0>[ 4896.410000] ===MHX(ath_tx_fill_desc)1.0 Entering.
<0>[ 4896.410000] 3Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[ 4896.410000] ===MHX(ath_tx_fill_desc)1.1.aggr=1,bf_first=  (null), info.type=0.
<0>[ 4896.410000] 3Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[ 4896.410000] ===MHX(ath_tx_fill_desc)1.1.aggr=1,bf_first=831da620, info.type=0.
<0>[ 4896.410000] 3Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[ 4896.410000] ===MHX(ath_tx_fill_desc)1.1.aggr=1,bf_first=831da620, info.type=0.
<0>[ 4896.410000] 3Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[ 4896.410000] ===MHX(ath_tx_fill_desc)1.1.aggr=1,bf_first=831da620, info.type=0.
<0>[ 4896.410000] 3Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[ 4896.410000] ===MHX(ath_tx_fill_desc)1.1.aggr=1,bf_first=831da620, info.type=0.
<0>[ 4896.410000] 3Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[ 4896.410000] ===MHX(ath_tx_fill_desc)1.1.aggr=1,bf_first=831da620, info.type=0.
<0>[ 4896.410000] 3Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[ 4896.410000] ===MHX(ath_tx_fill_desc)1.1.aggr=1,bf_first=831da620, info.type=0.
<0>[ 4896.410000] 3Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[ 4896.410000] ===MHX(ath_tx_fill_desc)1.1.aggr=1,bf_first=831da620, info.type=0.
<0>[ 4896.410000] 3Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[ 4896.410000] ===MHX(ath_tx_fill_desc)1.1.aggr=1,bf_first=831da620, info.type=0.
<0>[ 4896.410000] 3Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[ 4896.410000] ===MHX(ath_tx_fill_desc)1.1.aggr=1,bf_first=831da620, info.type=0.
<0>[ 4896.410000] 3Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[ 4896.410000] ===MHX(ath_tx_fill_desc)1.1.aggr=1,bf_first=831da620, info.type=0.
<0>[ 4896.410000] 3Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[ 4896.410000] ===MHX(ath_tx_fill_desc)1.1.aggr=1,bf_first=831da620, info.type=0.
<0>[ 4896.410000] 3Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[ 4896.410000] ===MHX(ath_tx_fill_desc)1.1.aggr=1,bf_first=831da620, info.type=0.
<0>[ 4896.410000] 3Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[ 4896.410000] ===MHX(ath_tx_fill_desc)1.1.aggr=1,bf_first=831da620, info.type=0.
<0>[ 4896.410000] 3Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[ 4896.410000] ===MHX(ath_tx_fill_desc)1.1.aggr=1,bf_first=831da620, info.type=0.
<0>[ 4896.410000] 3Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[ 4896.410000] ===MHX(ath_tx_fill_desc)1.1.aggr=1,bf_first=831da620, info.type=0.
<0>[ 4896.410000] 3Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,00:0e:c6:89:41:be
<0>[ 4896.410000] ===MHX(ath_tx_fill_desc)1.1.aggr=1,bf_first=831da620, info.type=0.

2. PC(00:0e:c6:89:41:be)---->AP(00:0f:92:fa:80:82)--->(02:0F:92:FA:6C:45)REP(00:0F:92:FA:6C:45)--->STA(00:0f:92:fa:6c:83), WDS=1,1,1 UDP from PC to STA b=15m.
<0>[ 5418.390000] ===MHX(ath_tx_fill_desc)1.0 Entering.
<0>[ 5418.390000] 4Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,00:0f:92:02:f8:2e,00:0e:c6:89:41:be	//addr1=RA, addr2=TA, addr3=DA(STA's bridge MAC=STA Eth0 MAC), addr4=SA.
<0>[ 5418.390000] ===MHX(ath_tx_fill_desc)1.1.aggr=0,bf_first=  (null), info.type=0.

<0>[ 5418.390000] ===MHX(ath_tx_fill_desc)1.0 Entering.
<0>[ 5418.390000] 4Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,00:0f:92:02:f8:2e,00:0e:c6:89:41:be
<0>[ 5418.390000] ===MHX(ath_tx_fill_desc)1.1.aggr=1,bf_first=  (null), info.type=0.
<0>[ 5418.390000] 4Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,00:0f:92:02:f8:2e,00:0e:c6:89:41:be
<0>[ 5418.390000] ===MHX(ath_tx_fill_desc)1.1.aggr=1,bf_first=831dd170, info.type=0.

<0>[ 5418.390000] ===MHX(ath_tx_fill_desc)1.0 Entering.
<0>[ 5418.390000] 4Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,00:0f:92:02:f8:2e,00:0e:c6:89:41:be
<0>[ 5418.390000] ===MHX(ath_tx_fill_desc)1.1.aggr=1,bf_first=  (null), info.type=0.
<0>[ 5418.390000] 4Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,00:0f:92:02:f8:2e,00:0e:c6:89:41:be
<0>[ 5418.390000] ===MHX(ath_tx_fill_desc)1.1.aggr=1,bf_first=831dac40, info.type=0.

<0>[ 5418.400000] ===MHX(ath_tx_fill_desc)1.0 Entering.
<0>[ 5418.400000] 4Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,00:0f:92:02:f8:2e,00:0e:c6:89:41:be
<0>[ 5418.400000] ===MHX(ath_tx_fill_desc)1.1.aggr=1,bf_first=  (null), info.type=0.
<0>[ 5418.400000] 4Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,00:0f:92:02:f8:2e,00:0e:c6:89:41:be
<0>[ 5418.400000] ===MHX(ath_tx_fill_desc)1.1.aggr=1,bf_first=831dd170, info.type=0.
<0>[ 5418.400000] 4Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,00:0f:92:02:f8:2e,00:0e:c6:89:41:be
<0>[ 5418.400000] ===MHX(ath_tx_fill_desc)1.1.aggr=1,bf_first=831dd170, info.type=0.
<0>[ 5418.400000] 4Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,00:0f:92:02:f8:2e,00:0e:c6:89:41:be
<0>[ 5418.400000] ===MHX(ath_tx_fill_desc)1.1.aggr=1,bf_first=831dd170, info.type=0.
<0>[ 5418.400000] 4Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,00:0f:92:02:f8:2e,00:0e:c6:89:41:be
<0>[ 5418.400000] ===MHX(ath_tx_fill_desc)1.1.aggr=1,bf_first=831dd170, info.type=0.
<0>[ 5418.400000] 4Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,00:0f:92:02:f8:2e,00:0e:c6:89:41:be
<0>[ 5418.400000] ===MHX(ath_tx_fill_desc)1.1.aggr=1,bf_first=831dd170, info.type=0.
<0>[ 5418.400000] 4Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,00:0f:92:02:f8:2e,00:0e:c6:89:41:be
<0>[ 5418.400000] ===MHX(ath_tx_fill_desc)1.1.aggr=1,bf_first=831dd170, info.type=0.

3. PC(00:0e:c6:89:41:be)---->AP(00:0f:92:fa:80:82)--->(02:0F:92:FA:6C:45)REP(00:0F:92:FA:6C:45)--->STA(00:0f:92:fa:6c:83), WDS=1,1,0 UDP from PC to STA b=15m.
<7>[ 6017.000000] wlan0.sta2: Rx A-MPDU request on 02:0f:92:fa:6c:45 tid 6 result 0

<0>[ 6017.000000] ===MHX(ath_tx_fill_desc)1.0 Entering.
<0>[ 6017.000000] 3Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,00:0f:92:fa:80:82
<0>[ 6017.000000] ===MHX(ath_tx_fill_desc)1.1.aggr=0,bf_first=  (null), info.type=0.

<0>[ 6020.460000] ===MHX(ath_tx_fill_desc)1.0 Entering.
<0>[ 6020.460000] 4Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,01:00:5e:00:00:fb,00:0e:c6:89:41:be
<0>[ 6020.460000] ===MHX(ath_tx_fill_desc)1.1.aggr=0,bf_first=  (null), info.type=0.

<0>[ 6024.800000] ===MHX(ath_tx_fill_desc)1.0 Entering.
<0>[ 6024.800000] 4Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,01:00:5e:00:00:01,00:0f:92:04:0f:59
<0>[ 6024.800000] ===MHX(ath_tx_fill_desc)1.1.aggr=0,bf_first=  (null), info.type=0.

<0>[ 6036.470000] ===MHX(ath_tx_fill_desc)1.0 Entering.
<0>[ 6036.470000] 4Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,01:00:5e:00:00:fb,00:0e:c6:89:41:be
<0>[ 6036.470000] ===MHX(ath_tx_fill_desc)1.1.aggr=0,bf_first=  (null), info.type=0.

<0>[ 6045.820000] ===MHX(ath_tx_fill_desc)1.0 Entering.
<0>[ 6045.820000] 4Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,ff:ff:ff:ff:ff:ff,00:0e:c6:89:41:be	// ARP from PC
<0>[ 6045.820000] ===MHX(ath_tx_fill_desc)1.1.aggr=0,bf_first=  (null), info.type=0.
<7>[ 6045.820000] wlan0.sta2: Open BA session requested for 02:0f:92:fa:6c:45 tid 0
<7>[ 6045.820000] wlan0.sta2: activated addBA response timer on 02:0f:92:fa:6c:45 tid 0

<0>[ 6045.820000] ===MHX(ath_tx_fill_desc)1.0 Entering.
<0>[ 6045.820000] 3Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,00:0f:92:fa:80:82
<0>[ 6045.820000] ===MHX(ath_tx_fill_desc)1.1.aggr=0,bf_first=  (null), info.type=0.
<7>[ 6045.820000] wlan0.sta2: switched off addBA timer for 02:0f:92:fa:6c:45 tid 0
<7>[ 6045.820000] wlan0.sta2: Aggregation is on for 02:0f:92:fa:6c:45 tid 0

<0>[ 6045.830000] ===MHX(ath_tx_fill_desc)1.0 Entering.
<0>[ 6045.830000] 4Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,00:0f:92:fa:6c:83,00:0e:c6:89:41:be	//addr1=RA, addr2=TA, addr3=DA(STA's bridge MAC=STA WLAN MAC), addr4=SA.
<0>[ 6045.830000] ===MHX(ath_tx_fill_desc)1.1.aggr=0,bf_first=  (null), info.type=0.

<0>[ 6045.830000] ===MHX(ath_tx_fill_desc)1.0 Entering.
<0>[ 6045.830000] 4Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,00:0f:92:fa:6c:83,00:0e:c6:89:41:be
<0>[ 6045.830000] ===MHX(ath_tx_fill_desc)1.1.aggr=0,bf_first=  (null), info.type=0.

<0>[ 6045.830000] ===MHX(ath_tx_fill_desc)1.0 Entering.
<0>[ 6045.830000] 4Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,00:0f:92:fa:6c:83,00:0e:c6:89:41:be
<0>[ 6045.830000] ===MHX(ath_tx_fill_desc)1.1.aggr=0,bf_first=  (null), info.type=0.

<0>[ 6045.830000] ===MHX(ath_tx_fill_desc)1.0 Entering.
<0>[ 6045.830000] 4Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,00:0f:92:fa:6c:83,00:0e:c6:89:41:be
<0>[ 6045.830000] ===MHX(ath_tx_fill_desc)1.1.aggr=0,bf_first=  (null), info.type=0.
<0>[ 6045.830000] ===MHX(ath_tx_fill_desc)1.0 Entering.
<0>[ 6045.830000] 4Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,00:0f:92:fa:6c:83,00:0e:c6:89:41:be
<0>[ 6045.830000] ===MHX(ath_tx_fill_desc)1.1.aggr=0,bf_first=  (null), info.type=0.

<0>[ 6045.830000] ===MHX(ath_tx_fill_desc)1.0 Entering.
<0>[ 6045.830000] 4Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,00:0f:92:fa:6c:83,00:0e:c6:89:41:be
<0>[ 6045.830000] ===MHX(ath_tx_fill_desc)1.1.aggr=1,bf_first=  (null), info.type=0.
<0>[ 6045.830000] 4Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,00:0f:92:fa:6c:83,00:0e:c6:89:41:be
<0>[ 6045.830000] ===MHX(ath_tx_fill_desc)1.1.aggr=1,bf_first=831de8d8, info.type=0.
<0>[ 6045.830000] 4Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,00:0f:92:fa:6c:83,00:0e:c6:89:41:be
<0>[ 6045.830000] ===MHX(ath_tx_fill_desc)1.1.aggr=1,bf_first=831de8d8, info.type=0.
<0>[ 6045.830000] 4Address found 02:0f:92:fa:6c:45,00:0f:92:fa:80:82,00:0f:92:fa:6c:83,00:0e:c6:89:41:be
<0>[ 6045.830000] ===MHX(ath_tx_fill_desc)1.1.aggr=1,bf_first=831de8d8, info.type=0.


Sept 29,2017
Test the roaming with encryption=on, WDS=1,1,0. Roaming works.
"iw phy0 set rts 0" on both AP and REP, the TCP T/P from PC--->AP--->REP--->STA can reach half of single hop T/P, testified.

Sept 28, 2017
Read some articles, the Openwrt repeater uses WP+STA mode, the same as our current implementation. 

Repeater roaming, All WDS=1. On the STA set wireless.radio0.beacon_loss_count=100 that means 10 seconds loss time out. Ping from PC--->AP--->(REP)--->STA. When STA roams to AP, it takes about 12 sec to resume the ping. But when roam from AP to REP, it takes about 50-60 seconds to resume ping. 

NOTE: when roam from AP to REP, the AP antenna should be connected well to talk to REP. 

And found the AP send ARP too late. On AP change proc/sys/net/ipv4/neigh/wlan0.sta1/gc_stale_time=5. wlan0.sta1 is connected to REP. And then the ping resumes faster. It takes 13 sec(STA disconnects with AP) + 13 sec(AP sends the 1st ARP) = 26 seconds. 

Further notice that the ARP is not from AP but from PC : 

"16:55:15.524158 00:0e:c6:89:41:be > ff:ff:ff:ff:ff:ff, ethertype ARP (0x0806), lengt
h 60: Ethernet (len 6), IPv4 (len 4), Request who-has 192.168.168.3 tell 192.168.168
.100, length 46
". 

So this time mainly affected by PC ARP refresh too. 

Test the generic pDDL STA side time-out mechanism:
1. 	wireless.radio0.beacon_int=100		// 100mS
	wireless.radio0.beacon_loss_count=100.  // This make a STA connection timeout of 10 seconds.
	This works.
2. 	wireless.radio0.beacon_loss_count=90000	// disable beacon loss disconnect.
	wireless.radio0.connection_idle_time=50	// 50 seconds.
	wireless.radio0.max_nullfunc_tries=3
	wireless.radio0.probe_wait_time=30
	This works too. The total disconnect time is measured about 54 seconds.

Bothe 1&2 can trigger STA roaming.

Test with all WDS=0, RTS=4, roaming functionality is ok. Roaming time needs fine-tune. Test with WDS=1,1,0(STA), the roaming functionality is OK.

Roaming from REP to AP time is affected by the "wireless.radio0.connection_idle_time=10" or "wireless.radio0.beacon_loss_count=50000" on the REP too. In above experiment, the idle_time is 10 seconds so that when unplug REP antenna, STA disconnects with RTP at the same time as the REP(wlan0.rep, slave mode) disconnects with AP. This makes the roaming from REP to AP faster (13 sec). When set "wireless.radio0.connection_idle_time=100 (seconds)", the roaming from REP to AP becomes about 54 seconds just like roaming from AP to REP. And ping resumes resumes after the ARP packet just like the roaming from AP to REP.

[Conclusion] In non-encryption mode, the roaming functionality is working. The time-out can be fine tuned (on STA and REP's wlan0.rep interface)to reduce the roaming time. Adjust connection_idle_time and beacon_loss_count. The ARP refresh time depends on the PC and we can not control. 

Sept 26, 2017
Test pDDL version:
 Welcome to "v1.3.0" build "1034"
 Built time: 2017-08-21 14:51:45
After association, power off STA and the AP "iw wlan0 station dump" still shows STA associated for over an hour. The "inactive time:" never goes more than 90 seconds. The kernel message of AP shows:
<3>[ 2873.040000] ath: phy0: reset PLL RTC due to AP inactivity!
<3>[ 2963.040000] ath: phy0: reset PLL RTC due to AP inactivity!
<3>[ 3053.040000] ath: phy0: reset PLL RTC due to AP inactivity!
<3>[ 3143.040000] ath: phy0: reset PLL RTC due to AP inactivity!
<3>[ 3233.040000] ath: phy0: reset PLL RTC due to AP inactivity!
Every 90 seconds the PLL RTC is reset but the connection is not disconnected. 

This 90sec is set by (2 * sdata->vif.bss_conf.ap_inactive_sec + 1 more)<----params->inactivity_timeout <------- NL80211_ATTR_INACTIVITY_TIMEOUT. But failed to find where to set this number. According to the kernel message it is set to 30 seconds. By the test, this time-out is (3 * ap_max_inactivity) seconds.

Because the CONFIG_MHX_AP_INACT_MONITOR takes over the hostapd mechanism, where the STA is disassociated when timeout, so the STA is always shown connected.

Do some T/P test on repeater mode. Open air, AP--->Rep--->STA, All WDS=1. AP is 40cm away from REP, very close(AP no antenna).
AP:
          Tx-Power: 7 dBm  Link Quality: 50/70
          Signal: -60 dBm  Noise(raw): -102 dBm
	  Encryption: none
Rep:

          Tx-Power: 7 dBm  Link Quality: 49/70
          Signal: -61 dBm  Noise(raw): -101 dBm

          Tx-Power: 7 dBm  Link Quality: 47/70
          Signal: -63 dBm  Noise(raw): -101 dBm
	  Encryption: none

TCP T/P:
	AP-------------->REP--------->STA
		13M		11M
			3M
UDP T/P
	AP-------------->REP--------->STA
		19M		19M
			4M-5M

800Kbps from AP--->STA has 90% QoE.Based on the VLC codec info, the Frame drop rate is about 12% (24fps).

Set all RTS threshold to 8 by "iw phy0 set rts 8". And test:
TCP T/P:
	AP-------------->REP--------->STA
		17.4M		13.6M
			5.8M-6.5M
UDP T/P
	AP-------------->REP--------->STA
		18.5M		12.2M
			6.5M
800Kbps from AP--->STA has 90% QoE.Based on the VLC codec info, the Frame drop rate is about 11.2% (24fps).

This indicates a interesting thing, even with AP-STA connection, rts=8 has 10% higher TCP T/P than rts=-1. UDP T/P almost the same. Maybe this is because a lower retry (eliminating collisions) improves the performance and offset the RTS/CTS packets overhead??? Check the sys/kernel/debug/ieee80211/phy0/netdev\:wlan0/stations/00\:0f\:92\:fa\:6c\:83/tx_retry_count/failed in these two scenarios. When rts=8, run tcp iperf, the tx_retry_count in AP and REP increment 20-50 per second. When rts=-1(STA rts=64 is default), the increment of tx_retry_count increment in AP and REP is about 90-120 per second, which is obviously higher than rts=8. This means RTS introduces overhead but reduces retry and then increase the T/P and performance. The overall performance is good.

Sept 25, 2017
Compare T/P of M/S mode and Mesh mode. PC to PC traffic. Open air. 
M/S mode:
          Mode: Master (VLAN)  Channel: 58 (2.448 GHz)
          Tx-Power: 7 dBm  Link Quality: 39/70
          Signal: -71 dBm  Noise(raw): -102 dBm
          Bit Rate: 52.0 MBit/s
          Encryption: none
TCP T/P : 4.97Mbps; 6.6Mbps; 5.45M; 5.52M; 6.57M. Average TCP T/P is 5.82Mbps.
UDP T/P (-b 6m) : 3.91Mbps/5.04mS/34%; 5.34M/3.5mS/11%; 1.53M/193.4mS/73%; 3.01M/217.8mS/47%; 3.75M/3.72mS/37%. Average is 3.51Mbps/84.7mS/40.4%. 

Mesh mode, it is a direct traffic but there is a by-standing meshpoint:
          Mode: Mesh Point  Channel: 58 (2.448 GHz)
          Tx-Power: 7 dBm  Link Quality: 43/70
          Signal: -67 dBm  Noise(raw): -102 dBm
          Bit Rate: 65.0 MBit/s
          Encryption: unknown
TCP T/P : 5.66M; 7.38M; 3.25M; 7.31M; 6.48M. Average TCP T/P is 6.02Mbps.

UDP T/P (-b 6m) : 4.95Mbps/2.5mS/17%; 3.82M/32.6mS/35%; 4.43M/4.9/24%; 4.35M/9.3mS/27%; 2.11M/28.4mS/64%; Average is 3.92Mbps/15.54mS/33.4%.

Conclusion: For directio connection, Mesh mode is not inferior to M/S mode.



Sept 21,,2017
OpenMesh default setting:
const struct mesh_config default_mesh_config{} and const struct mesh_setup default_mesh_setup().

Sept 14, 2017
wpa_scan_result_compar() is used to sort the scaned BSSID.

Sept 13, 2017
Good link Adaptive pair, push high traffic of 26Mbps. The AP side script shows the Q is in 246/247 and stays over 10sec and not hopping. Wonder why it doesn't hop in this high Q status. The debug print on AP:
<7>[  396.150000] ath: phy0: (ath_tx_start): Q[236], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.150000] ath: phy0: (ath_tx_start): Q[237], jf=9615, cnt=0, high_q_maintain_time=6, txq->stopped=0	// reaches 247-10, starting counting and timing.
<7>[  396.150000] ath: phy0: (ath_tx_start): Q[238], jf=9615, cnt=1, high_q_maintain_time=6, txq->stopped=0
<7>[  396.150000] ath: phy0: (ath_tx_start): Q[239], jf=9615, cnt=2, high_q_maintain_time=6, txq->stopped=0
<7>[  396.150000] ath: phy0: (ath_tx_start): Q[240], jf=9615, cnt=3, high_q_maintain_time=6, txq->stopped=0
<7>[  396.150000] ath: phy0: (ath_tx_start): Q[241], jf=9615, cnt=4, high_q_maintain_time=6, txq->stopped=0
<7>[  396.150000] ath: phy0: (ath_tx_start): Q[242], jf=9615, cnt=5, high_q_maintain_time=6, txq->stopped=0
<7>[  396.150000] ath: phy0: (ath_tx_start): Q[243], jf=9615, cnt=6, high_q_maintain_time=6, txq->stopped=0
<7>[  396.150000] ath: phy0: (ath_tx_start): Q[244], jf=9615, cnt=7, high_q_maintain_time=6, txq->stopped=0
<7>[  396.150000] ath: phy0: (ath_tx_start): Q[245], jf=9615, cnt=8, high_q_maintain_time=6, txq->stopped=0
<7>[  396.150000] ath: phy0: (ath_tx_start): Q[246], jf=9615, cnt=9, high_q_maintain_time=6, txq->stopped=0
<7>[  396.150000] ath: phy0: (ath_tx_start): Q[247], jf=9615, cnt=10, high_q_maintain_time=6, txq->stopped=1
<7>[  396.150000] ath: phy0: (ath_tx_start): Q[239], jf=9615, cnt=11, high_q_maintain_time=6, txq->stopped=0
<7>[  396.150000] ath: phy0: (ath_tx_start): Q[240], jf=9615, cnt=12, high_q_maintain_time=6, txq->stopped=0
<7>[  396.150000] ath: phy0: (ath_tx_start): Q[241], jf=9615, cnt=13, high_q_maintain_time=6, txq->stopped=0
<7>[  396.150000] ath: phy0: (ath_tx_start): Q[242], jf=9615, cnt=14, high_q_maintain_time=6, txq->stopped=0
<7>[  396.150000] ath: phy0: (ath_tx_start): Q[243], jf=9615, cnt=15, high_q_maintain_time=6, txq->stopped=0
<7>[  396.150000] ath: phy0: (ath_tx_start): Q[244], jf=9615, cnt=16, high_q_maintain_time=6, txq->stopped=0
<7>[  396.150000] ath: phy0: (ath_tx_start): Q[245], jf=9615, cnt=17, high_q_maintain_time=6, txq->stopped=0
<7>[  396.150000] ath: phy0: (ath_tx_start): Q[246], jf=9615, cnt=18, high_q_maintain_time=6, txq->stopped=0
<7>[  396.150000] ath: phy0: (ath_tx_start): Q[247], jf=9615, cnt=19, high_q_maintain_time=6, txq->stopped=1
<7>[  396.160000] ath: phy0: (ath_tx_start): Q[246], jf=9615, cnt=20, high_q_maintain_time=6, txq->stopped=0
<7>[  396.160000] ath: phy0: (ath_tx_start): Q[247], jf=9615, cnt=21, high_q_maintain_time=6, txq->stopped=1
<7>[  396.160000] ath: phy0: (ath_tx_start): Q[217], jf=9615, cnt=22, high_q_maintain_time=6, txq->stopped=0	// when overflow in a good link, 30 Q items are transmitted once and Q drops soon.
<7>[  396.160000] ath: phy0: (ath_tx_start): Q[218], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.160000] ath: phy0: (ath_tx_start): Q[219], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.160000] ath: phy0: (ath_tx_start): Q[220], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.160000] ath: phy0: (ath_tx_start): Q[221], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.160000] ath: phy0: (ath_tx_start): Q[222], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.160000] ath: phy0: (ath_tx_start): Q[223], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.160000] ath: phy0: (ath_tx_start): Q[224], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.160000] ath: phy0: (ath_tx_start): Q[225], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.160000] ath: phy0: (ath_tx_start): Q[226], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.160000] ath: phy0: (ath_tx_start): Q[227], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.160000] ath: phy0: (ath_tx_start): Q[228], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.160000] ath: phy0: (ath_tx_start): Q[229], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.160000] ath: phy0: (ath_tx_start): Q[230], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.160000] ath: phy0: (ath_tx_start): Q[231], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.160000] ath: phy0: (ath_tx_start): Q[232], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.160000] ath: phy0: (ath_tx_start): Q[233], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.160000] ath: phy0: (ath_tx_start): Q[234], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.160000] ath: phy0: (ath_tx_start): Q[235], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.160000] ath: phy0: (ath_tx_start): Q[236], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.160000] ath: phy0: (ath_tx_start): Q[237], jf=9616, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.160000] ath: phy0: (ath_tx_start): Q[238], jf=9616, cnt=1, high_q_maintain_time=6, txq->stopped=0
<7>[  396.160000] ath: phy0: (ath_tx_start): Q[239], jf=9616, cnt=2, high_q_maintain_time=6, txq->stopped=0
<7>[  396.160000] ath: phy0: (ath_tx_start): Q[240], jf=9616, cnt=3, high_q_maintain_time=6, txq->stopped=0
<7>[  396.160000] ath: phy0: (ath_tx_start): Q[241], jf=9616, cnt=4, high_q_maintain_time=6, txq->stopped=0
<7>[  396.160000] ath: phy0: (ath_tx_start): Q[242], jf=9616, cnt=5, high_q_maintain_time=6, txq->stopped=0
<7>[  396.160000] ath: phy0: (ath_tx_start): Q[243], jf=9616, cnt=6, high_q_maintain_time=6, txq->stopped=0
<7>[  396.160000] ath: phy0: (ath_tx_start): Q[244], jf=9616, cnt=7, high_q_maintain_time=6, txq->stopped=0
<7>[  396.160000] ath: phy0: (ath_tx_start): Q[245], jf=9616, cnt=8, high_q_maintain_time=6, txq->stopped=0
<7>[  396.160000] ath: phy0: (ath_tx_start): Q[246], jf=9616, cnt=9, high_q_maintain_time=6, txq->stopped=0
<7>[  396.160000] ath: phy0: (ath_tx_start): Q[247], jf=9616, cnt=10, high_q_maintain_time=6, txq->stopped=1
<7>[  396.170000] ath: phy0: (ath_tx_start): Q[227], jf=9616, cnt=11, high_q_maintain_time=6, txq->stopped=0	// 20 Q items sent at one time, Q drops lower than 247-10 pretty quickly.
<7>[  396.170000] ath: phy0: (ath_tx_start): Q[228], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.170000] ath: phy0: (ath_tx_start): Q[229], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.170000] ath: phy0: (ath_tx_start): Q[230], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.170000] ath: phy0: (ath_tx_start): Q[231], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.170000] ath: phy0: (ath_tx_start): Q[232], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.170000] ath: phy0: (ath_tx_start): Q[233], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.170000] ath: phy0: (ath_tx_start): Q[234], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.170000] ath: phy0: (ath_tx_start): Q[235], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.170000] ath: phy0: (ath_tx_start): Q[236], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.170000] ath: phy0: (ath_tx_start): Q[237], jf=9617, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.170000] ath: phy0: (ath_tx_start): Q[238], jf=9617, cnt=1, high_q_maintain_time=6, txq->stopped=0
<7>[  396.170000] ath: phy0: (ath_tx_start): Q[239], jf=9617, cnt=2, high_q_maintain_time=6, txq->stopped=0
<7>[  396.170000] ath: phy0: (ath_tx_start): Q[240], jf=9617, cnt=3, high_q_maintain_time=6, txq->stopped=0
<7>[  396.170000] ath: phy0: (ath_tx_start): Q[241], jf=9617, cnt=4, high_q_maintain_time=6, txq->stopped=0
<7>[  396.170000] ath: phy0: (ath_tx_start): Q[242], jf=9617, cnt=5, high_q_maintain_time=6, txq->stopped=0
<7>[  396.170000] ath: phy0: (ath_tx_start): Q[243], jf=9617, cnt=6, high_q_maintain_time=6, txq->stopped=0
<7>[  396.170000] ath: phy0: (ath_tx_start): Q[244], jf=9617, cnt=7, high_q_maintain_time=6, txq->stopped=0
<7>[  396.170000] ath: phy0: (ath_tx_start): Q[245], jf=9617, cnt=8, high_q_maintain_time=6, txq->stopped=0
<7>[  396.170000] ath: phy0: (ath_tx_start): Q[246], jf=9617, cnt=9, high_q_maintain_time=6, txq->stopped=0
<7>[  396.170000] ath: phy0: (ath_tx_start): Q[247], jf=9617, cnt=10, high_q_maintain_time=6, txq->stopped=1
<7>[  396.170000] ath: phy0: (ath_tx_start): Q[243], jf=9617, cnt=11, high_q_maintain_time=6, txq->stopped=0
<7>[  396.170000] ath: phy0: (ath_tx_start): Q[244], jf=9617, cnt=12, high_q_maintain_time=6, txq->stopped=0
<7>[  396.170000] ath: phy0: (ath_tx_start): Q[245], jf=9617, cnt=13, high_q_maintain_time=6, txq->stopped=0
<7>[  396.170000] ath: phy0: (ath_tx_start): Q[246], jf=9617, cnt=14, high_q_maintain_time=6, txq->stopped=0
<7>[  396.170000] ath: phy0: (ath_tx_start): Q[247], jf=9617, cnt=15, high_q_maintain_time=6, txq->stopped=1
<7>[  396.180000] ath: phy0: (ath_tx_start): Q[238], jf=9617, cnt=16, high_q_maintain_time=6, txq->stopped=0
<7>[  396.180000] ath: phy0: (ath_tx_start): Q[239], jf=9617, cnt=17, high_q_maintain_time=6, txq->stopped=0
<7>[  396.180000] ath: phy0: (ath_tx_start): Q[240], jf=9617, cnt=18, high_q_maintain_time=6, txq->stopped=0
<7>[  396.180000] ath: phy0: (ath_tx_start): Q[241], jf=9617, cnt=19, high_q_maintain_time=6, txq->stopped=0
<7>[  396.180000] ath: phy0: (ath_tx_start): Q[242], jf=9617, cnt=20, high_q_maintain_time=6, txq->stopped=0
<7>[  396.180000] ath: phy0: (ath_tx_start): Q[243], jf=9617, cnt=21, high_q_maintain_time=6, txq->stopped=0
<7>[  396.180000] ath: phy0: (ath_tx_start): Q[244], jf=9617, cnt=22, high_q_maintain_time=6, txq->stopped=0
<7>[  396.180000] ath: phy0: (ath_tx_start): Q[245], jf=9617, cnt=23, high_q_maintain_time=6, txq->stopped=0
<7>[  396.180000] ath: phy0: (ath_tx_start): Q[246], jf=9617, cnt=24, high_q_maintain_time=6, txq->stopped=0
<7>[  396.180000] ath: phy0: (ath_tx_start): Q[247], jf=9617, cnt=25, high_q_maintain_time=6, txq->stopped=1
<7>[  396.180000] ath: phy0: (ath_tx_start): Q[240], jf=9617, cnt=26, high_q_maintain_time=6, txq->stopped=0
<7>[  396.180000] ath: phy0: (ath_tx_start): Q[241], jf=9617, cnt=27, high_q_maintain_time=6, txq->stopped=0
<7>[  396.180000] ath: phy0: (ath_tx_start): Q[242], jf=9617, cnt=28, high_q_maintain_time=6, txq->stopped=0
<7>[  396.180000] ath: phy0: (ath_tx_start): Q[243], jf=9617, cnt=29, high_q_maintain_time=6, txq->stopped=0
<7>[  396.180000] ath: phy0: (ath_tx_start): Q[244], jf=9617, cnt=30, high_q_maintain_time=6, txq->stopped=0
<7>[  396.180000] ath: phy0: (ath_tx_start): Q[245], jf=9617, cnt=31, high_q_maintain_time=6, txq->stopped=0
<7>[  396.180000] ath: phy0: (ath_tx_start): Q[246], jf=9617, cnt=32, high_q_maintain_time=6, txq->stopped=0
<7>[  396.180000] ath: phy0: (ath_tx_start): Q[247], jf=9617, cnt=33, high_q_maintain_time=6, txq->stopped=1
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[215], jf=9617, cnt=34, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[216], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[217], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[218], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[219], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[220], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[221], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[222], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[223], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[224], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[225], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[226], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[227], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[228], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[229], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[230], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[231], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[232], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[233], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[234], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[235], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[236], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[237], jf=9619, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[238], jf=9619, cnt=1, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[239], jf=9619, cnt=2, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[240], jf=9619, cnt=3, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[241], jf=9619, cnt=4, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[242], jf=9619, cnt=5, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[243], jf=9619, cnt=6, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[244], jf=9619, cnt=7, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[245], jf=9619, cnt=8, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[246], jf=9619, cnt=9, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[247], jf=9619, cnt=10, high_q_maintain_time=6, txq->stopped=1
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[217], jf=9619, cnt=11, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[218], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[219], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[220], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[221], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[222], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[223], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[224], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[225], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[226], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[227], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[228], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[229], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[230], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[231], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[232], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[233], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[234], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[235], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[236], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[237], jf=9619, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[238], jf=9619, cnt=1, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[239], jf=9619, cnt=2, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[240], jf=9619, cnt=3, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[241], jf=9619, cnt=4, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[242], jf=9619, cnt=5, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[243], jf=9619, cnt=6, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[244], jf=9619, cnt=7, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[245], jf=9619, cnt=8, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[246], jf=9619, cnt=9, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[247], jf=9619, cnt=10, high_q_maintain_time=6, txq->stopped=1
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[243], jf=9619, cnt=11, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[244], jf=9619, cnt=12, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[245], jf=9619, cnt=13, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[246], jf=9619, cnt=14, high_q_maintain_time=6, txq->stopped=0
<7>[  396.190000] ath: phy0: (ath_tx_start): Q[247], jf=9619, cnt=15, high_q_maintain_time=6, txq->stopped=1
<7>[  396.200000] ath: phy0: (ath_tx_start): Q[218], jf=9619, cnt=16, high_q_maintain_time=6, txq->stopped=0
<7>[  396.200000] ath: phy0: (ath_tx_start): Q[219], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.200000] ath: phy0: (ath_tx_start): Q[220], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.200000] ath: phy0: (ath_tx_start): Q[221], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.200000] ath: phy0: (ath_tx_start): Q[222], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.200000] ath: phy0: (ath_tx_start): Q[223], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.200000] ath: phy0: (ath_tx_start): Q[224], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.200000] ath: phy0: (ath_tx_start): Q[225], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.200000] ath: phy0: (ath_tx_start): Q[226], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.200000] ath: phy0: (ath_tx_start): Q[227], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.200000] ath: phy0: (ath_tx_start): Q[228], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.200000] ath: phy0: (ath_tx_start): Q[229], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.200000] ath: phy0: (ath_tx_start): Q[230], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.200000] ath: phy0: (ath_tx_start): Q[231], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.200000] ath: phy0: (ath_tx_start): Q[232], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.200000] ath: phy0: (ath_tx_start): Q[233], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.200000] ath: phy0: (ath_tx_start): Q[234], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.200000] ath: phy0: (ath_tx_start): Q[235], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.200000] ath: phy0: (ath_tx_start): Q[236], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.200000] ath: phy0: (ath_tx_start): Q[237], jf=9620, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.200000] ath: phy0: (ath_tx_start): Q[238], jf=9620, cnt=1, high_q_maintain_time=6, txq->stopped=0
<7>[  396.200000] ath: phy0: (ath_tx_start): Q[239], jf=9620, cnt=2, high_q_maintain_time=6, txq->stopped=0
<7>[  396.200000] ath: phy0: (ath_tx_start): Q[240], jf=9620, cnt=3, high_q_maintain_time=6, txq->stopped=0
<7>[  396.200000] ath: phy0: (ath_tx_start): Q[241], jf=9620, cnt=4, high_q_maintain_time=6, txq->stopped=0
<7>[  396.200000] ath: phy0: (ath_tx_start): Q[242], jf=9620, cnt=5, high_q_maintain_time=6, txq->stopped=0
<7>[  396.200000] ath: phy0: (ath_tx_start): Q[243], jf=9620, cnt=6, high_q_maintain_time=6, txq->stopped=0
<7>[  396.200000] ath: phy0: (ath_tx_start): Q[244], jf=9620, cnt=7, high_q_maintain_time=6, txq->stopped=0
<7>[  396.200000] ath: phy0: (ath_tx_start): Q[245], jf=9620, cnt=8, high_q_maintain_time=6, txq->stopped=0
<7>[  396.200000] ath: phy0: (ath_tx_start): Q[246], jf=9620, cnt=9, high_q_maintain_time=6, txq->stopped=0
<7>[  396.200000] ath: phy0: (ath_tx_start): Q[247], jf=9620, cnt=10, high_q_maintain_time=6, txq->stopped=1
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[221], jf=9620, cnt=11, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[222], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[223], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[224], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[225], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[226], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[227], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[228], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[229], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[230], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[231], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[232], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[233], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[234], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[235], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[236], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[237], jf=9621, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[238], jf=9621, cnt=1, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[239], jf=9621, cnt=2, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[240], jf=9621, cnt=3, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[241], jf=9621, cnt=4, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[242], jf=9621, cnt=5, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[243], jf=9621, cnt=6, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[244], jf=9621, cnt=7, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[245], jf=9621, cnt=8, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[246], jf=9621, cnt=9, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[247], jf=9621, cnt=10, high_q_maintain_time=6, txq->stopped=1
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[217], jf=9621, cnt=11, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[218], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[219], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[220], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[221], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[222], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[223], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[224], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[225], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[226], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[227], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[228], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[229], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[230], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[231], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[232], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[233], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[234], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[235], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[236], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[237], jf=9621, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[238], jf=9621, cnt=1, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[239], jf=9621, cnt=2, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[240], jf=9621, cnt=3, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[241], jf=9621, cnt=4, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[242], jf=9621, cnt=5, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[243], jf=9621, cnt=6, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[244], jf=9621, cnt=7, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[245], jf=9621, cnt=8, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[246], jf=9621, cnt=9, high_q_maintain_time=6, txq->stopped=0
<7>[  396.210000] ath: phy0: (ath_tx_start): Q[247], jf=9621, cnt=10, high_q_maintain_time=6, txq->stopped=1
<7>[  396.220000] ath: phy0: (ath_tx_start): Q[226], jf=9621, cnt=11, high_q_maintain_time=6, txq->stopped=0
<7>[  396.220000] ath: phy0: (ath_tx_start): Q[227], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.220000] ath: phy0: (ath_tx_start): Q[228], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.220000] ath: phy0: (ath_tx_start): Q[229], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.220000] ath: phy0: (ath_tx_start): Q[230], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.220000] ath: phy0: (ath_tx_start): Q[231], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.220000] ath: phy0: (ath_tx_start): Q[232], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.220000] ath: phy0: (ath_tx_start): Q[233], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.220000] ath: phy0: (ath_tx_start): Q[234], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.220000] ath: phy0: (ath_tx_start): Q[235], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.220000] ath: phy0: (ath_tx_start): Q[236], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.220000] ath: phy0: (ath_tx_start): Q[237], jf=9622, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.220000] ath: phy0: (ath_tx_start): Q[238], jf=9622, cnt=1, high_q_maintain_time=6, txq->stopped=0
<7>[  396.220000] ath: phy0: (ath_tx_start): Q[239], jf=9622, cnt=2, high_q_maintain_time=6, txq->stopped=0
<7>[  396.220000] ath: phy0: (ath_tx_start): Q[240], jf=9622, cnt=3, high_q_maintain_time=6, txq->stopped=0
<7>[  396.220000] ath: phy0: (ath_tx_start): Q[241], jf=9622, cnt=4, high_q_maintain_time=6, txq->stopped=0
<7>[  396.220000] ath: phy0: (ath_tx_start): Q[242], jf=9622, cnt=5, high_q_maintain_time=6, txq->stopped=0
<7>[  396.220000] ath: phy0: (ath_tx_start): Q[243], jf=9622, cnt=6, high_q_maintain_time=6, txq->stopped=0
<7>[  396.220000] ath: phy0: (ath_tx_start): Q[244], jf=9622, cnt=7, high_q_maintain_time=6, txq->stopped=0
<7>[  396.220000] ath: phy0: (ath_tx_start): Q[245], jf=9622, cnt=8, high_q_maintain_time=6, txq->stopped=0
<7>[  396.220000] ath: phy0: (ath_tx_start): Q[246], jf=9622, cnt=9, high_q_maintain_time=6, txq->stopped=0
<7>[  396.220000] ath: phy0: (ath_tx_start): Q[247], jf=9622, cnt=10, high_q_maintain_time=6, txq->stopped=1
<7>[  396.220000] ath: phy0: (ath_tx_start): Q[244], jf=9622, cnt=11, high_q_maintain_time=6, txq->stopped=0
<7>[  396.220000] ath: phy0: (ath_tx_start): Q[245], jf=9622, cnt=12, high_q_maintain_time=6, txq->stopped=0
<7>[  396.220000] ath: phy0: (ath_tx_start): Q[246], jf=9622, cnt=13, high_q_maintain_time=6, txq->stopped=0
<7>[  396.220000] ath: phy0: (ath_tx_start): Q[247], jf=9622, cnt=14, high_q_maintain_time=6, txq->stopped=1
<7>[  396.220000] ath: phy0: (ath_tx_start): Q[238], jf=9622, cnt=15, high_q_maintain_time=6, txq->stopped=0
<7>[  396.220000] ath: phy0: (ath_tx_start): Q[239], jf=9622, cnt=16, high_q_maintain_time=6, txq->stopped=0
<7>[  396.220000] ath: phy0: (ath_tx_start): Q[240], jf=9622, cnt=17, high_q_maintain_time=6, txq->stopped=0
<7>[  396.220000] ath: phy0: (ath_tx_start): Q[241], jf=9622, cnt=18, high_q_maintain_time=6, txq->stopped=0
<7>[  396.220000] ath: phy0: (ath_tx_start): Q[242], jf=9622, cnt=19, high_q_maintain_time=6, txq->stopped=0
<7>[  396.220000] ath: phy0: (ath_tx_start): Q[243], jf=9622, cnt=20, high_q_maintain_time=6, txq->stopped=0
<7>[  396.220000] ath: phy0: (ath_tx_start): Q[244], jf=9622, cnt=21, high_q_maintain_time=6, txq->stopped=0
<7>[  396.220000] ath: phy0: (ath_tx_start): Q[245], jf=9622, cnt=22, high_q_maintain_time=6, txq->stopped=0
<7>[  396.220000] ath: phy0: (ath_tx_start): Q[246], jf=9622, cnt=23, high_q_maintain_time=6, txq->stopped=0
<7>[  396.220000] ath: phy0: (ath_tx_start): Q[247], jf=9622, cnt=24, high_q_maintain_time=6, txq->stopped=1
<7>[  396.230000] ath: phy0: (ath_tx_start): Q[215], jf=9622, cnt=25, high_q_maintain_time=6, txq->stopped=0
<7>[  396.230000] ath: phy0: (ath_tx_start): Q[216], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.230000] ath: phy0: (ath_tx_start): Q[217], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0
<7>[  396.230000] ath: phy0: (ath_tx_start): Q[218], jf=0, cnt=0, high_q_maintain_time=6, txq->stopped=0

Conclusion:
1. Adaptive is not for overflodding in a GOOD link, which is not a common scenario.
2. The shell script can not show all the details.

Sept 12, 2017
ieee80211_flush_queues()--->drv_flush(local, sdata, queues, false), drop is always "false"--->ath9k_flush().

In ieee80211_start_sw_scan():
	/* ensure nullfunc is transmitted before leaving operating channel */
	ieee80211_flush_queues(local, NULL);
Looks like this flush is just to make sure ALL packets are actually sent instead of discarding them. Another indicator is in ieee80211_dynamic_ps_enable_work():

			ieee80211_send_nullfunc(local, sdata, 1);
			/* Flush to get the tx status of nullfunc frame */
			ieee80211_flush_queues(local, sdata);
This means ieee80211_flush_queues() doesn't drop packets instead it tries to send them.

Add ieee80211_flush_queues(local, NULL); in  ieee80211_channel_switch() . The AP never do a hopping eventhough Q is pending high and all other conditions are met. But hostapd_cli chan_switch 5 2471 ht command works.


About wpa_supplicant blacklist, wpa_blacklist_add():

This function adds the specified BSSID to the blacklist or increases the blacklist count if the BSSID was already listed. It should be called when an association attempt fails either due to the selected BSS rejecting association or due to timeout.

This blacklist is used to force wpa_supplicant to go through all available BSSes before retrying to associate with an BSS that rejected or timed out association. It does not prevent the listed BSS from being used; it only changes the order in which they are tried. 

Sept 11, 2017
Currently, AP WDS=1 and STA WDS=0 can associate but no traffic.
pDDL, In ieee802_11.c, revert the hapd->conf->wds_sta stuff. And test:
AP WDS	STA WDS		Assoc		Ping
0	    0		OK		OK
0	    1		OK		NOK	// not sure if the original mac80211 is like this
1	    0		OK		OK
1	    1		OK		OK

hostapd_set_wds_sta()--->hapd->driver->set_wds_sta() [ Bind a station into a 4-address WDS (AP only) ]--->i802_set_wds_sta()--->1. val=1(wds=1), NL80211_IFTYPE_AP_VLAN, 

Sept 6, 2017
Adaptive field test. 2405, 2435, 2465, 2477 have different levels of interference. They have UDP iperf T/P of 1.5Mbps, 240Kbps, 1Mbps and 4.5Mbps respectively at 4MHz b/w mode. Even without man made interference, the hopping triggers very frequently. In fixed channel mode, the T/P measured above is not ideal. 

Aug 29, 2017
Same channel hopping, if cfg80211_chandef_identical() will return -EINVAL(-22). This will cause problems in "Fixed" hopping mode.

Aug 15,2017
ieee80211_crypto_ccmp_decrypt()--->ieee80211_aes_ccm_decrypt()--->crypto_cipher_encrypt_one(). So that crypto_mhx_decrypt() function in crypto_mhx.ko will NEVER be called.

For failure mcast@aes256, RX_FLAG_DECRYPTED is wrongly set to 1 in ath9k_cmn_rx_skb_postprocess().

Aug 10,2017
On pDDL AP,
		S/W Encryption		H/W Encryption
CPU Idle		35%			80%
SIRQ			55%			6%

Aug 9, 2017
Remove the 
#ifdef CONFIG_MHX_AES256_XXXXXX
	if (common->encryptlvl & MHX_ENCRYPT_SW) {
        ath9k_ps_restore(sc);
        mutex_unlock(&sc->mutex);
		return -ENOSPC;
    }
#endif in ath9k_set_key() so that the encryption level doesn't affect driver. Test on pDDL924@906MHz@8MHzBW@AES256 F/W. 

[NOTE: Heat sink fan is needed.]

Encryption			None			AES128			AES256
---------------------------------------------------------------------------------------
TCP T/P(A->S)/CPU Idle		11.8Mbps/80%		11.2Mbps/75%		7Mbps/40%
---------------------------------------------------------------------------------------
UDP T/P(A->S)/CPU Idle
	b=8m						8M/30%-80%		8M/5%-30%
	b=10m						10M/30%-80%		3M/0%-20%
	b=12m						12M/40%-80%		3.5M/0%-20%
	b=15m						15M/30%-75%		300K/0%-20%
	b=20m			19.2M/50-80%		20M/30%-70%		3.4M/0%-20%
	b=25M			20M/40%-70%		18.2M/30%-75%
---------------------------------------------------------------------------------------

In AES256, the print during ping, AP print:
<0>[  619.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[  620.010000] ==MHX2.1(ieee80211_tx_h_select_key)skip_hw=1. hw_key=  (null).
<0>[  620.010000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[  620.010000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[  620.010000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[  620.010000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[  620.010000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[  620.010000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[  620.010000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[  620.010000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[  620.010000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[  620.010000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[  620.010000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[  620.010000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[  620.810000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[  620.810000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[  620.810000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[  620.810000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[  620.810000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[  620.810000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[  620.810000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[  620.810000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[  620.810000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[  620.810000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[  620.810000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[  620.810000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[  620.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[  620.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[  620.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[  620.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[  620.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[  620.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[  620.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[  620.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[  620.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[  620.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[  620.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[  620.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[  620.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[  620.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[  620.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[  620.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[  620.920000] ==MHX2.1(ieee80211_tx_h_select_key)skip_hw=1. hw_key=  (null).

With AES128, the AP print:
<0>[  741.350000] ==MHX2.1(ieee80211_tx_h_select_key)skip_hw=0. hw_key=829883c8.
<0>[  742.350000] ==MHX2.1(ieee80211_tx_h_select_key)skip_hw=0. hw_key=829883c8.
<0>[  743.350000] ==MHX2.1(ieee80211_tx_h_select_key)skip_hw=0. hw_key=829883c8.
<0>[  744.350000] ==MHX2.1(ieee80211_tx_h_select_key)skip_hw=0. hw_key=829883c8.
<0>[  745.350000] ==MHX2.1(ieee80211_tx_h_select_key)skip_hw=0. hw_key=829883c8.
<0>[  745.760000] ==MHX2.1(ieee80211_tx_h_select_key)skip_hw=0. hw_key=829883c8.
<0>[  745.760000] ==MHX2.1(ieee80211_tx_h_select_key)skip_hw=0. hw_key=  (null).

<0>[  745.820000] ==MHX2.1(ieee80211_tx_h_select_key)skip_hw=0. hw_key=  (null).
<0>[  746.350000] ==MHX2.1(ieee80211_tx_h_select_key)skip_hw=0. hw_key=829883c8.
<0>[  747.350000] ==MHX2.1(ieee80211_tx_h_select_key)skip_hw=0. hw_key=829883c8.

===========================================================================================
encryption=none, AP print:
<6>[   31.470000] br-lan: port 2(wlan0) entered forwarding state
<6>[   33.470000] br-lan: port 2(wlan0) entered forwarding state
<0>[   44.140000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=  (null)
<0>[   44.340000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=  (null)
<0>[   44.370000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=  (null)
<0>[   44.380000] ==MHX5.1(ath_key_config) key->cipher=0x       0
<0>[   44.380000] ==MHX5.2(ath_key_config) hk.kv_type=5, hk.kv_len=0
<6>[   44.390000] device wlan0.sta1 entered promiscuous mode
<6>[   44.390000] br-lan: port 3(wlan0.sta1) entered forwarding state
<6>[   44.390000] br-lan: port 3(wlan0.sta1) entered forwarding state
<0>[   44.400000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=  (null)
<7>[   44.400000] rate control rssi check type changed: 0 -> 2
<7>[   44.400000] rate control rssi check margin changed: 0 -> 5
<7>[   44.400000] rate control rssi check values changed:
<7>[   44.400000]  0  3 
<7>[   44.400000]  0  5 
<7>[   44.400000]  0  8 
<7>[   44.400000]  0  11 
<7>[   44.400000]  0  15 
<7>[   44.400000]  0  21 
<7>[   44.400000]  0  24 
<7>[   44.400000]  0  0 
<0>[   44.480000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=  (null)
<0>[   45.980000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=  (null)
<0>[   45.980000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=  (null)
<6>[   46.390000] br-lan: port 3(wlan0.sta1) entered forwarding state
<0>[   66.490000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=  (null)
<0>[   75.680000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=  (null)
<0>[   75.720000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=  (null)
<0>[   79.910000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=  (null)
<0>[  185.550000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=  (null)
<0>[  200.800000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=  (null)
<0>[  209.220000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=  (null)
<0>[  242.080000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=  (null)
<0>[  310.780000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=  (null)
<0>[  326.240000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=  (null)
<0>[  328.250000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=  (null)

// ping 3 times.
<0>[  414.590000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=  (null)
<0>[  414.590000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=  (null)
<0>[  414.590000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=  (null)
<0>[  415.590000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=  (null)
<0>[  416.590000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=  (null)


encryption=aes128, AP print:
<0>[   33.340000] ===MHX3.1(crypto_mhx_set_key) Microhard AES
<0>[   33.340000] ==MHX4.1(ieee80211_key_link) local->wowlan =   (null)
<0>[   33.340000] ==MHX5.1(ath_key_config) key->cipher=0x000fac04
<0>[   33.340000] ==MHX5.2(ath_key_config) hk.kv_type=2, hk.kv_len=16
<0>[   33.340000] ==MHX4.2(ieee80211_key_link) ieee80211_key_enable_hw_accel() returned 0
<6>[   35.330000] br-lan: port 2(wlan0) entered forwarding state
<0>[   35.580000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=  (null)
<0>[   35.780000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=  (null)
<0>[   35.970000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=  (null)
<0>[   35.990000] ==MHX5.1(ath_key_config) key->cipher=0x00000000
<0>[   35.990000] ==MHX5.2(ath_key_config) hk.kv_type=5, hk.kv_len=0
<6>[   36.020000] device wlan0.sta1 entered promiscuous mode
<6>[   36.020000] br-lan: port 3(wlan0.sta1) entered forwarding state
<6>[   36.020000] br-lan: port 3(wlan0.sta1) entered forwarding state
<0>[   36.130000] ===MHX3.1(crypto_mhx_set_key) Microhard AES
<0>[   36.130000] ==MHX4.1(ieee80211_key_link) local->wowlan =   (null)
<0>[   36.130000] ==MHX5.1(ath_key_config) key->cipher=0x000fac04
<0>[   36.130000] ==MHX5.2(ath_key_config) hk.kv_type=2, hk.kv_len=16
<0>[   36.130000] ==MHX4.2(ieee80211_key_link) ieee80211_key_enable_hw_accel() returned 0
<0>[   36.130000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=  (null)
<7>[   36.130000] rate control rssi check type changed: 0 -> 2
<7>[   36.130000] rate control rssi check margin changed: 0 -> 5
<7>[   36.130000] rate control rssi check values changed:
<7>[   36.130000]  0  3 
<7>[   36.130000]  0  5 
<7>[   36.130000]  0  8 
<7>[   36.130000]  0  11 
<7>[   36.130000]  0  15 
<7>[   36.130000]  0  21 
<7>[   36.130000]  0  24 
<7>[   36.130000]  0  0 
<0>[   36.240000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=  (null)
<0>[   36.240000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=  (null)
<0>[   36.240000] ===MHX3.1(crypto_mhx_set_key) Microhard AES
<0>[   36.240000] ==MHX4.1(ieee80211_key_link) local->wowlan =   (null)
<0>[   36.240000] ==MHX5.1(ath_key_config) key->cipher=0x000fac04
<0>[   36.240000] ==MHX5.2(ath_key_config) hk.kv_type=2, hk.kv_len=16
<0>[   36.240000] ==MHX4.2(ieee80211_key_link) ieee80211_key_enable_hw_accel() returned 0
<0>[   37.200000] ==MHX2.1(ieee80211_tx_h_select_key)skip_hw=0. hw_key=  (null).
<0>[   37.200000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=  (null)
<6>[   38.020000] br-lan: port 3(wlan0.sta1) entered forwarding state
<0>[   43.160000] ==MHX2.1(ieee80211_tx_h_select_key)skip_hw=0. hw_key=829ea3c8.
<0>[   43.160000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=829ea200
<0>[   43.160000] ==MHX6.2(ieee80211_tx_h_encrypt) tx->key->conf.cipher = 0x000fac04
<0>[   43.160000] ==MHX8.1(ccmp_encrypt_skb) info->control.hw_key=829ea3c8
<0>[   43.160000] ==MHX8.2(ccmp_encrypt_skb) info->control.hw_key->flags=0xa
<0>[   43.160000] ==MHX2.1(ieee80211_tx_h_select_key)skip_hw=0. hw_key=  (null).
<0>[   43.160000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=  (null)
<0>[   64.210000] ==MHX2.1(ieee80211_tx_h_select_key)skip_hw=0. hw_key=829ea3c8.
<0>[   64.210000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=829ea200
<0>[   64.210000] ==MHX6.2(ieee80211_tx_h_encrypt) tx->key->conf.cipher = 0x000fac04
<0>[   64.210000] ==MHX8.1(ccmp_encrypt_skb) info->control.hw_key=829ea3c8
<0>[   64.210000] ==MHX8.2(ccmp_encrypt_skb) info->control.hw_key->flags=0xa
<0>[   67.360000] ==MHX2.1(ieee80211_tx_h_select_key)skip_hw=0. hw_key=829ea3c8.
<0>[   67.360000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=829ea200
<0>[   67.360000] ==MHX6.2(ieee80211_tx_h_encrypt) tx->key->conf.cipher = 0x000fac04
<0>[   67.360000] ==MHX8.1(ccmp_encrypt_skb) info->control.hw_key=829ea3c8
<0>[   67.360000] ==MHX8.2(ccmp_encrypt_skb) info->control.hw_key->flags=0xa
<0>[   67.620000] ==MHX2.1(ieee80211_tx_h_select_key)skip_hw=0. hw_key=  (null).
<0>[   67.620000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=  (null)
<0>[   70.820000] ==MHX2.1(ieee80211_tx_h_select_key)skip_hw=0. hw_key=829ea3c8.
<0>[   70.820000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=829ea200
<0>[   70.820000] ==MHX6.2(ieee80211_tx_h_encrypt) tx->key->conf.cipher = 0x000fac04
<0>[   70.820000] ==MHX8.1(ccmp_encrypt_skb) info->control.hw_key=829ea3c8
<0>[   70.820000] ==MHX8.2(ccmp_encrypt_skb) info->control.hw_key->flags=0xa
<0>[  143.420000] ==MHX2.1(ieee80211_tx_h_select_key)skip_hw=0. hw_key=829ea3c8.
<0>[  143.420000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=829ea200
<0>[  143.420000] ==MHX6.2(ieee80211_tx_h_encrypt) tx->key->conf.cipher = 0x000fac04
<0>[  143.420000] ==MHX8.1(ccmp_encrypt_skb) info->control.hw_key=829ea3c8
<0>[  143.420000] ==MHX8.2(ccmp_encrypt_skb) info->control.hw_key->flags=0xa
<0>[  143.420000] ==MHX2.1(ieee80211_tx_h_select_key)skip_hw=0. hw_key=  (null).
<0>[  143.420000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=  (null)


// ping 3 times
<0>[  166.750000] ==MHX2.1(ieee80211_tx_h_select_key)skip_hw=0. hw_key=829ea3c8.
<0>[  166.750000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=829ea200
<0>[  166.750000] ==MHX6.2(ieee80211_tx_h_encrypt) tx->key->conf.cipher = 0x000fac04
<0>[  166.750000] ==MHX8.1(ccmp_encrypt_skb) info->control.hw_key=829ea3c8
<0>[  166.750000] ==MHX8.2(ccmp_encrypt_skb) info->control.hw_key->flags=0xa
<0>[  166.750000] ==MHX2.1(ieee80211_tx_h_select_key)skip_hw=0. hw_key=829ea3c8.
<0>[  166.750000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=829ea200
<0>[  166.750000] ==MHX6.2(ieee80211_tx_h_encrypt) tx->key->conf.cipher = 0x000fac04
<0>[  166.750000] ==MHX8.1(ccmp_encrypt_skb) info->control.hw_key=829ea3c8
<0>[  166.750000] ==MHX8.2(ccmp_encrypt_skb) info->control.hw_key->flags=0xa
<0>[  167.750000] ==MHX2.1(ieee80211_tx_h_select_key)skip_hw=0. hw_key=829ea3c8.
<0>[  167.750000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=829ea200
<0>[  167.750000] ==MHX6.2(ieee80211_tx_h_encrypt) tx->key->conf.cipher = 0x000fac04
<0>[  167.750000] ==MHX8.1(ccmp_encrypt_skb) info->control.hw_key=829ea3c8
<0>[  167.750000] ==MHX8.2(ccmp_encrypt_skb) info->control.hw_key->flags=0xa
<0>[  168.750000] ==MHX2.1(ieee80211_tx_h_select_key)skip_hw=0. hw_key=829ea3c8.
<0>[  168.750000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=829ea200
<0>[  168.750000] ==MHX6.2(ieee80211_tx_h_encrypt) tx->key->conf.cipher = 0x000fac04
<0>[  168.750000] ==MHX8.1(ccmp_encrypt_skb) info->control.hw_key=829ea3c8
<0>[  168.750000] ==MHX8.2(ccmp_encrypt_skb) info->control.hw_key->flags=0xa


encryption=aes256, AP print:
<0>[   33.700000] ===MHX3.1(crypto_mhx_set_key) Microhard AES
<0>[   33.700000] ==MHX4.1(ieee80211_key_link) local->wowlan =   (null)
<0>[   33.700000] ==MHX5.1(ath_key_config) key->cipher=0x000fac0a
<0>[   33.700000] ==MHX4.2(ieee80211_key_link) ieee80211_key_enable_hw_accel() returned 0
<0>[   35.350000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=  (null)
<0>[   35.550000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=  (null)
<0>[   35.560000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=  (null)
<0>[   35.570000] ==MHX5.1(ath_key_config) key->cipher=0x00000000
<0>[   35.570000] ==MHX5.2(ath_key_config) hk.kv_type=5, hk.kv_len=0
<6>[   35.610000] device wlan0.sta1 entered promiscuous mode
<6>[   35.610000] br-lan: port 3(wlan0.sta1) entered forwarding state
<6>[   35.610000] br-lan: port 3(wlan0.sta1) entered forwarding state
<0>[   35.670000] ===MHX3.1(crypto_mhx_set_key) Microhard AES
<0>[   35.670000] ==MHX4.1(ieee80211_key_link) local->wowlan =   (null)
<0>[   35.670000] ==MHX5.1(ath_key_config) key->cipher=0x000fac0a
<0>[   35.670000] ==MHX4.2(ieee80211_key_link) ieee80211_key_enable_hw_accel() returned 0
<0>[   35.670000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=  (null)
<7>[   35.670000] rate control rssi check type changed: 0 -> 2
<7>[   35.670000] rate control rssi check margin changed: 0 -> 5
<7>[   35.670000] rate control rssi check values changed:
<7>[   35.670000]  0  3 
<7>[   35.670000]  0  5 
<7>[   35.670000]  0  8 
<7>[   35.670000]  0  11 
<7>[   35.670000]  0  15 
<7>[   35.670000]  0  21 
<7>[   35.670000]  0  24 
<7>[   35.670000]  0  0 
<6>[   35.690000] br-lan: port 2(wlan0) entered forwarding state
<0>[   35.740000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=  (null)
<0>[   35.740000] ===MHX3.1(crypto_mhx_set_key) Microhard AES
<0>[   35.740000] ==MHX4.1(ieee80211_key_link) local->wowlan =   (null)
<0>[   35.740000] ==MHX5.1(ath_key_config) key->cipher=0x000fac0a
<0>[   35.740000] ==MHX4.2(ieee80211_key_link) ieee80211_key_enable_hw_accel() returned 0
<0>[   35.760000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.760000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.760000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.760000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.760000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.760000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.760000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.760000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.760000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.760000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ==MHX2.1(ieee80211_tx_h_select_key)skip_hw=1. hw_key=  (null).
<0>[   35.940000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=  (null)
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.950000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.950000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.950000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.950000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.950000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.950000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.950000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.950000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.950000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.950000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.950000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.950000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.950000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.950000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.950000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.950000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.950000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.950000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.950000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.950000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.950000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.950000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.950000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.950000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.950000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.950000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.950000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.950000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.950000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.950000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.950000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   35.950000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.190000] ==MHX2.1(ieee80211_tx_h_select_key)skip_hw=1. hw_key=  (null).
<0>[   36.190000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=828fde00
<0>[   36.190000] ==MHX6.2(ieee80211_tx_h_encrypt) tx->key->conf.cipher = 0x000fac0a
<0>[   36.190000] ==MHX8.1(ccmp_encrypt_skb) info->control.hw_key=  (null)
<0>[   36.190000] ==MHX8.3(ccmp_encrypt_skb) info->control.hw_key is NULL, going to ieee80211_aes_ccm_encrypt()...
<0>[   36.190000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.190000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.190000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.190000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.190000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.190000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.190000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.190000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.190000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.190000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.190000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.190000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.700000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.700000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.700000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.700000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.700000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.700000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.700000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.700000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.700000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.700000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.700000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.700000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.700000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.700000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.700000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.700000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.700000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.700000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.700000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.700000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.700000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.700000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.700000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.700000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.700000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.700000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.700000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.700000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.700000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.700000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.700000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.700000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.710000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.750000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.750000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.750000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.750000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.750000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.750000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.750000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.750000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.750000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.750000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.750000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.750000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.750000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.750000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.750000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.750000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.750000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.750000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   36.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.110000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.110000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.110000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.110000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.110000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.110000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.110000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.110000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.110000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.110000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.110000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.110000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.110000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.110000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.110000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.110000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.110000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.110000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.110000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.110000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.110000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.110000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.110000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.110000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.110000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.110000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.110000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.110000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.110000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.110000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.110000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.110000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.120000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.130000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.150000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.150000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.150000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.150000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.150000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.150000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.160000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.160000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.160000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.160000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.160000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.160000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.160000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.160000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.160000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.160000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.160000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.160000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.160000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.160000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.160000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.160000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.160000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.160000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.160000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.160000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.160000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.160000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.180000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.180000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.180000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.180000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.180000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.180000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.180000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.180000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.180000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.180000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.180000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.180000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.180000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.180000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.180000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.180000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.180000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.180000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.180000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.180000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.180000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.180000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.180000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.180000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.180000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.180000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.180000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.180000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.200000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.210000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.210000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.210000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.210000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.210000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.210000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.210000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.210000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.210000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.210000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.210000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.210000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.210000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.210000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.210000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.210000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.210000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.210000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.210000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.210000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.210000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.210000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.210000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.210000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.210000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.210000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.210000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.230000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.230000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.230000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.230000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.230000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.230000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.230000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.230000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.230000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.230000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.230000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.230000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.230000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.230000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.230000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.230000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.230000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.230000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.230000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.230000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.230000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.230000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.230000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.230000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.230000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.230000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.230000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.230000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.450000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.450000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.450000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.450000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.450000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.450000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.450000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.450000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.450000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.450000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.450000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.450000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.450000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.450000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.450000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.450000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.450000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.450000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.450000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.450000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.450000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.450000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.450000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.450000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.450000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.450000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.450000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.450000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.450000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.450000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.450000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.450000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.450000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.450000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.450000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.450000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.450000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.450000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.450000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.450000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.450000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.450000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.450000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.450000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.450000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.450000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.450000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.450000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.510000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.510000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.510000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.510000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.510000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.510000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.510000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.510000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.510000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.510000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.510000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.510000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.510000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.510000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.510000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.510000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.510000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.510000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.510000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.510000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.510000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.510000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.510000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.510000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.510000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.510000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.510000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.510000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.510000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.510000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.510000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.510000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.510000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   37.510000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<6>[   37.610000] br-lan: port 3(wlan0.sta1) entered forwarding state
<0>[   38.200000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.200000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.200000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.200000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.200000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.200000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.200000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.200000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.200000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.200000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.200000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.200000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.200000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.200000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.200000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.200000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.200000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.200000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.200000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.200000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.200000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.200000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.200000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.200000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.200000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.200000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.200000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.200000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.200000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.200000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.200000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.200000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.200000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.200000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.200000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.200000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.200000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.200000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.200000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.200000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.200000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.200000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.200000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.200000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.200000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.200000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.200000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.200000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   38.940000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   39.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   39.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   39.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   39.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   39.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   39.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   39.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   39.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   39.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   39.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   39.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   39.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   39.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   39.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   39.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   39.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   39.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   39.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   39.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   39.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   39.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   39.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   39.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   39.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   39.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   39.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   39.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   39.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   39.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   39.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   39.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   39.000000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   40.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   40.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   40.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   40.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   40.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   40.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   40.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   40.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   40.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   40.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   40.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   40.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   40.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   40.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   40.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   40.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   40.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   40.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   40.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   40.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   40.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   40.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   40.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   40.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   40.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   40.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   40.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   40.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   40.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   40.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   40.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   40.500000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   41.280000] ==MHX2.1(ieee80211_tx_h_select_key)skip_hw=1. hw_key=  (null).
<0>[   41.280000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=828fde00
<0>[   41.280000] ==MHX6.2(ieee80211_tx_h_encrypt) tx->key->conf.cipher = 0x000fac0a
<0>[   41.280000] ==MHX8.1(ccmp_encrypt_skb) info->control.hw_key=  (null)
<0>[   41.280000] ==MHX8.3(ccmp_encrypt_skb) info->control.hw_key is NULL, going to ieee80211_aes_ccm_encrypt()...
<0>[   41.280000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   41.280000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   41.280000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   41.280000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   41.280000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES

......................................................

<0>[   59.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   59.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   59.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   59.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   59.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   59.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   59.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   59.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   59.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   59.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   59.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   59.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES








<0>[   64.330000] ==MHX2.1(ieee80211_tx_h_select_key)skip_hw=1. hw_key=  (null).
<0>[   64.330000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=828fde00
<0>[   64.330000] ==MHX6.2(ieee80211_tx_h_encrypt) tx->key->conf.cipher = 0x000fac0a
<0>[   64.330000] ==MHX8.1(ccmp_encrypt_skb) info->control.hw_key=  (null)
<0>[   64.330000] ==MHX8.3(ccmp_encrypt_skb) info->control.hw_key is NULL, going to ieee80211_aes_ccm_encrypt()...
<0>[   64.330000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   64.330000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   64.330000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   64.330000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   64.330000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   64.330000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   64.330000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   64.330000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   64.330000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   64.330000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   64.330000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   64.330000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   66.880000] ==MHX2.1(ieee80211_tx_h_select_key)skip_hw=1. hw_key=  (null).
<0>[   66.880000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=828fde00
<0>[   66.880000] ==MHX6.2(ieee80211_tx_h_encrypt) tx->key->conf.cipher = 0x000fac0a
<0>[   66.880000] ==MHX8.1(ccmp_encrypt_skb) info->control.hw_key=  (null)
<0>[   66.880000] ==MHX8.3(ccmp_encrypt_skb) info->control.hw_key is NULL, going to ieee80211_aes_ccm_encrypt()...
<0>[   66.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   66.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   66.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   66.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   66.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   66.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   66.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   66.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   66.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   66.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   66.880000] ==MHX2.1(ieee80211_tx_h_select_key)skip_hw=1. hw_key=  (null).
<0>[   66.880000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=  (null)
<0>[   67.060000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.060000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.060000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.060000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.060000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.060000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.060000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.060000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.060000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.060000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.060000] ==MHX2.1(ieee80211_tx_h_select_key)skip_hw=1. hw_key=  (null).
<0>[   67.060000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=  (null)
<0>[   67.630000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.630000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.630000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.630000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.630000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.630000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.630000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.630000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.630000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.630000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.630000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.630000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.630000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.630000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.630000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.630000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.630000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.630000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.630000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.630000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.630000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.630000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.630000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.630000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.630000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.630000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.630000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.630000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.630000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.630000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.630000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.630000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.630000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.630000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.690000] ==MHX2.1(ieee80211_tx_h_select_key)skip_hw=1. hw_key=  (null).
<0>[   67.690000] ==MHX6.1(ieee80211_tx_h_encrypt) tx->key=828fde00
<0>[   67.690000] ==MHX6.2(ieee80211_tx_h_encrypt) tx->key->conf.cipher = 0x000fac0a
<0>[   67.690000] ==MHX8.1(ccmp_encrypt_skb) info->control.hw_key=  (null)
<0>[   67.690000] ==MHX8.3(ccmp_encrypt_skb) info->control.hw_key is NULL, going to ieee80211_aes_ccm_encrypt()...
<0>[   67.690000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.690000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.690000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.690000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.690000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.690000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.690000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.690000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.690000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.690000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.690000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.690000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   67.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   68.460000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   68.460000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   68.460000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   68.460000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   68.460000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   68.460000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   68.460000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   68.460000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   68.460000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   68.460000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   68.460000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   68.460000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   69.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   69.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   69.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   69.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   69.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   69.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   69.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   69.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   69.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   69.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   69.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   69.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   69.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   69.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   69.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   69.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   69.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   69.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   69.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   69.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   69.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   69.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   69.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   69.920000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   70.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   70.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   70.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   70.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   70.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   70.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   70.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   70.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   70.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   70.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   70.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   70.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES


// ping 3 times
<0>[   75.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   75.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   75.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   75.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   75.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   75.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   75.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   75.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   75.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   75.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   75.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   75.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   78.460000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   78.460000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   78.460000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   78.460000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   78.460000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   78.460000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   78.460000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   78.460000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   78.460000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   78.460000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   78.460000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   78.460000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.470000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   79.880000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   80.220000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   80.220000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   80.220000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   80.220000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   80.220000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   80.220000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   80.220000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   80.220000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   80.220000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   80.220000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   80.220000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   80.220000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   80.220000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   80.220000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   80.220000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   80.220000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   80.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   80.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   80.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   80.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   80.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   80.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   80.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   80.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   80.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   80.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   80.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   80.420000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   80.970000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   80.970000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   80.970000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   80.970000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   80.970000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   80.970000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   80.970000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   80.970000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   80.970000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   80.970000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   80.970000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   80.970000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   80.970000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   80.970000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   80.970000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES
<0>[   80.970000] ===MHX3.2(crypto_mhx_encrypt) Microhard AES





Aug 8, 2017
On pDDL board, use AES256 branch code the AES128 TCP t/p can reach upto 23Mbps. AES256 TCP t/p about 7Mbps.

Aug 4, 2017
Compatibility test for aes256. Restore the units (ENCRYPTIONLEVEL=127) back to old pddl924 f/w without aes256 support.
1. Upgrade with a non-aes256 f/w (CONFIG_PACKAGE_kmod-crypto-mhx not set) and keep config. After upgrade units connect as aes128 successfully even the config file hase "encryption=psk2". Go to WebGUI and Submit and connection is ok.

2. Restore the old f/w w/o aes256 compilation options. Units connects with encrypt=none. But the webui shows as AES128. Then restore to factory default (encryption=psk2).

3. Upgrade with new f/w compiled with "CONFIG_PACKAGE_kmod-crypto-mhx=y". Keep config. After upgrade units connected successfully at aes128.

Jul 28, 2017
Use 2 pDDL2458 and 1 pDDL3Pi as a repeater. AP,Repeater are WDS=1 and STA with WDS=0. VLC server connects to AP and VLC player to STA.

Make a proper connection between AP-REPEATER. The AP tx rate about MCS4-7. Fix the REPEATER-STA rate to MCS0(6.5Mbps). 

1. Unicast stream Matrix(average rate is 1.2Mbps) video. QoE is very acceptable for some fast scenarios.

2. Mcast, set REPEATER mcast_rate=9. Gets worse but still acceptable. When testing this, the STA unexpectedly connects to AP directly. In this case, the QoE is very bad. On the monitor interface of STA, can see the AP is Unicasting to REPEATER as well as Munticasting. "wifi down" on REPEATER and then the QoE became acceptable.

Following is a test between AP-STA direct connection. Signal is abou -70dBm. Matrix bitrate avg.=1.2Mbps.

1. UDP Unicast @ Auto rate. AP tx rate MCS3-7. QoE is very good.
2. UDP Unicast @ MCS2(19.5M). QoE is good.
3. UDP MCast. mcast_rate 18. Bad QoE. 24/36/54, Bad QoE. mcast_rate=9 QoE turned better. 6Mbps is even better.

So basically MCAST higher than 6/9 is not for video. It is not a repeater problem. 

Jul 27, 2017
On pDDL2458 repeater: Force scan_cur_freq=2471 in var/run/wpa_supplicant-wlan0.rep.conf while the hostapd(wlan0) stays in 2451. Set AP to 2471 and the REPEATER's wlan0.rep connects to AP successfully. But, the hostapd sends the Beacon at 2471, not the expected 2451. So that STA can not connect tot REPEATER. Looks like the wpa_supplicant takes priority. 

Jul 26, 2017
pDDL2458 AP WDS=1, STA WDS=0, still connects and has data traffic. When AP connects to a STA w/ WDS=0, it will not create the ".sta1" interface and still works well.
But in pDDL/924/1800, this doesn't work.When a STA w/ WDS=0 associates with an AP w/ WDS=1, the AP still creates ".sta1" interface and no data traffic goes through. This looks not correct.

Jul 25, 2017
pDDL2458 repeater mode, set mcast_rate to 54Mbps on both AP and Repeater, the mcast rate from AP---STA can reach up to 8Mbps. But, when transmitting a 1Mbps TS H264 video using mcast, still very glitchy. 

Maybe because of the colission of on same frequency of HOstapd and Wpa_supplicant. But why the mcast T/P can reach very high of 8.5Mbps? Maybe just because of the nature of video. 

Jul 21, 2017
IW command "iw wlan0 set freq" ---> handle_freqchan ---> ieee80211_channel_to_frequency(). This is the ONLY place using ieee80211_channel_to_frequency().



Jul 20, 2017
Test the pDDL mcast repeater again, see table below.
1. Max relay t/p jumps to 12.8Mbps from 3.5Mbps with 13M push mcast UDP. This means mcast is affected by the open air significantly. Today's air looks much cleaner than Jul 19 so that the non-ack mcast can transmit much better. The test should not be in open air otherwise inaccurate.

2. Overflooding UDP will reduce t/p. There is a optiminal push t/p. Dont overflood UDP. 

Use a 3Pi(ar9344) as a repeater, same settings, the max mcast t/p can reach up to Max 5.3Mbps for multicast UDP. This is about 1Mbps higher than a pDDL(ar9331) repeater.  When the mcast_rate of the Repeater(pDDL2458) is set higher to 54Mbps, the max T/P can reach up to 6.2Mbps.

Basically, the mcast rate is about 1/3 of the mcast pipe width. After a repeater, it drops to 1/9 of pipe width.

Jul 19,2017
pDDL add repeater functionality
1. pDDL doesn't accept non 00:f:92 MAC, so ifconfig "$ifname.rep" hw ether "$rep_mac" should use Microhard MAC instead of 02:xx:xx
2. start_disabled=1 in hostapd.conf. This may require to connect a remote Master first and then a remote Slave.

8MHz b/w, WDS=0, all signals are about -50 to -60dBm. 
PC1(101) -------- AP(1, wlan0=00:0F:92:FA:90:B2)  ~~~~~ (wlan0.rep=00:0F:92:FA:80:88) Repeater(2) (wlan0=00:0F:92:FA:80:82) ~~~~~ STA(3,wlan0=00:0F:92:FA:5A:D4) ------------ PC2(105)

iw dev wlan0 set mcast_rate 12, set mcast rate on AP to 12Mbps. STA loses connection randomly when high mcast traffic.
mcast push rate can NOT be too high, overflood may cause a lower t/p.

1. PC2 is connected to Repeater, 
AP iw dev wlan0 set mcast_rate		PC1 push mcast t/p	PC2 read t/p
	12M					8M		Max 6.4M
	24M					8M		Max 7.9
	24M					10M		Max 9.9M
	24M					13M		Max 9.7M
	36M					13M		Max 12.9M

2. PC2 is connected to STA, "iw dev wlan0 set mcast_rate 36" on Repeater.
AP iw dev wlan0 set mcast_rate		PC1 push mcast t/p	PC2 read t/p
	12M					8M		Max 2.4M, Repeater is about 70% idle
	24M					8M		Max 4.3M, Repeater is about 60% idle. Better than UDP overflooding
	24M					10M		Max 3.6M, Repeater is about 60% idle.Is a bit better than 13M overflooding.
	24M					13M		Max 3M, Repeater is about 60% idle.
	36M					13M		Max 3.5M, Repeater is about 60% idle.


	36M					8M		Max 7.8M, Repeater is about 65% idle.(Jul 20,2017. turns out to be a direct of AP and STA.)
	36M					10M		Max 9.5M, Repeater is about 60% idle.(Jul 20,2017,turns out to be a direct of AP and STA.)
	36M					13M		Max 12.8M, Repeater is about 60% idle.(Jul 20,2017,turns out to be a direct of AP and STA.)
	36M					15M		Max 11.6M, Repeater is about 50% idle.(Jul 20,2017,turns out to be a direct of AP and STA.)
	36M					18M		Max 9.8M, Repeater is about 50% idle.(Jul 20,2017,turns out to be a direct of AP and STA.)


[Note: STA loses connection frequently. Set probe_wait_time=100,max_nullfunc_tries=200 , connection_idle_time=1000 solved that loss problem]

3. Turn down Repeater so that AP directly connects to STA.
AP iw dev wlan0 set mcast_rate		PC1 push mcast t/p	PC2 read t/p
	12M					8M		Max 6.2M
	24M					8M		Max 7.9M
	24M					10M		Max 9.8M
	24M					13M		Max 10.2M
	36M					13M		Max 12.6M
	36M					15M		Max 11.8M. Overflooding is not good.

Looks like the in mcast, the T/P  is about 1/3 of the mcast rate.

Jul 18, 2017
When #define NO_CONNECTION_HOPPING_TIMEOUT 6, the pddl900-adaptive AP can not send PROB_RESP:

1500334303.742484: STA 00:0f:92:13:23:75 sent probe request for our SSID
1500334304.078982: nl80211: Event message available
1500334304.079148: nl80211: BSS Event 59 (NL80211_CMD_FRAME) received for wlan0
1500334304.079209: nl80211: MLME event 59 (NL80211_CMD_FRAME) on wlan0(00:0f:92:fa:4f:d2) A1=ff:ff:ff:ff:ff:ff A2=00:0f:92:13:23:75
1500334304.079357: nl80211: MLME event frame - hexdump(len=78): 40 00 00 00 ff ff ff ff ff ff 00 0f 92 13 23 75 ff ff ff ff ff ff 80 34 00 10 70 44 44 4c 39 32 34 2d 61 64 61 70 74 69 76 65 01 06 0c 12 18 24 30 48 2d 1a 00 01 1b ff 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00
1500334304.079905: nl80211: Frame event
1500334304.079936: nl80211: RX frame freq=2420 ssi_signal=-76 stype=4 len=78
1500334304.080034: wlan0: Event RX_MGMT (20) received
1500334304.080127: hostapd_eid_mhqos: mhqos eid: eid=221, len=7, OUI=000f92, Type=02, SubType=01, Ver=01, mhqos_enabled=01

1500334304.080231: nl80211: send_mlme - noack=0 freq=0 no_cck=0 offchanok=0 wait_time=0 fc=0x50 nlmode=3
1500334304.080304: nl80211: send_mlme -> send_frame
1500334304.080338: nl80211: send_frame - Use bss->freq=2420
1500334304.080378: nl80211: send_frame -> send_frame_cmd
1500334304.080419: nl80211: CMD_FRAME freq=2420 wait=0 no_cck=0 no_ack=0 offchanok=0
1500334304.080481: CMD_FRAME - hexdump(len=187): 50 00 00 00 00 0f 92 13 23 75 00 0f 92 fa 4f d2 00 0f 92 fa 4f d2 00 00 00 00 00 00 00 00 00 00 1e 00 31 04 00 10 70 44 44 4c 39 32 34 2d 61 64 61 70 74 69 76 65 01 06 8c 12 98 24 b0 48 03 01 1e 2a 01 00 30 14 01 00 00 0f ac 04 01 00 00 0f ac 04 01 00 00 0f ac 02 0c 00 2d 1a 0c 01 1b ff 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 3d 16 1e 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 7f 08 00 00 00 00 00 00 00 40 dd 18 00 50 f2 02 01 01 00 00 03 31 00 00 24 41 00 00 42 31 5e 00 62 21 2f 00 dd 07 00 0f 92 02 01 01 01
1500334304.082036: nl80211: Frame command failed: ret=-16 (Device or resource busy) (freq=2420 wait=0)
1500334304.082119: handle_probe_req: send failed
1500334304.082154: STA 00:0f:92:13:23:75 sent probe request for our SSID
1500334304.419051: nl80211: Event message available
1500334304.419217: nl80211: BSS Event 59 (NL80211_CMD_FRAME) received for wlan0
1500334304.419278: nl80211: MLME event 59 (NL80211_CMD_FRAME) on wlan0(00:0f:92:fa:4f:d2) A1=ff:ff:ff:ff:ff:ff A2=00:0f:92:13:23:75
1500334304.419427: nl80211: MLME event frame - hexdump(len=78): 40 00 00 00 ff ff ff ff ff ff 00 0f 92 13 23 75 ff ff ff ff ff ff 90 34 00 10 70 44 44 4c 39 32 34 2d 61 64 61 70 74 69 76 65 01 06 0c 12 18 24 30 48 2d 1a 00 01 1b ff 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00
1500334304.419974: nl80211: Frame event
1500334304.420006: nl80211: RX frame freq=2420 ssi_signal=-75 stype=4 len=78
1500334304.420101: wlan0: Event RX_MGMT (20) received
1500334304.420193: hostapd_eid_mhqos: mhqos eid: eid=221, len=7, OUI=000f92, Type=02, SubType=01, Ver=01, mhqos_enabled=01

1500334304.420300: nl80211: send_mlme - noack=0 freq=0 no_cck=0 offchanok=0 wait_time=0 fc=0x50 nlmode=3
1500334304.420373: nl80211: send_mlme -> send_frame
1500334304.420407: nl80211: send_frame - Use bss->freq=2420
1500334304.420446: nl80211: send_frame -> send_frame_cmd
1500334304.420488: nl80211: CMD_FRAME freq=2420 wait=0 no_cck=0 no_ack=0 offchanok=0
1500334304.420628: CMD_FRAME - hexdump(len=187): 50 00 00 00 00 0f 92 13 23 75 00 0f 92 fa 4f d2 00 0f 92 fa 4f d2 00 00 00 00 00 00 00 00 00 00 1e 00 31 04 00 10 70 44 44 4c 39 32 34 2d 61 64 61 70 74 69 76 65 01 06 8c 12 98 24 b0 48 03 01 1e 2a 01 00 30 14 01 00 00 0f ac 04 01 00 00 0f ac 04 01 00 00 0f ac 02 0c 00 2d 1a 0c 01 1b ff 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 3d 16 1e 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 7f 08 00 00 00 00 00 00 00 40 dd 18 00 50 f2 02 01 01 00 00 03 31 00 00 24 41 00 00 42 31 5e 00 62 21 2f 00 dd 07 00 0f 92 02 01 01 01
1500334304.422192: nl80211: Frame command failed: ret=-16 (Device or resource busy) (freq=2420 wait=0)
1500334304.422274: handle_probe_req: send failed
1500334304.422308: STA 00:0f:92:13:23:75 sent probe request for our SSID
1500334304.758999: nl80211: Event message available

When it is enlarged to 6 * 5=30Seconds, it works ok. This time should be longer than STA scanning ALL channels. In this case 3 channels, each taking about 3 sec totally 10 sec.

Tried IEEE80211_PASSIVE_CHANNEL_TIME can be 1 second with NO_CONNECTION_HOPPING_TIMEOUT 6 * 3, OK.

Jul 17, 2017
How to prevent a real hopping on hostapd:
1. In mac80211:
static int __ieee80211_csa_finalize(struct ieee80211_sub_if_data *sdata)
{
	struct ieee80211_local *local = sdata->local;
	u32 changed = 0;
	int err;

	sdata_assert_lock(sdata);
	lockdep_assert_held(&local->mtx);

	sdata->radar_required = sdata->csa_radar_required;
	err = ieee80211_vif_change_channel(sdata, &changed);
	if (err < 0)
		return err;

	///if (!local->use_chanctx) {
		///local->_oper_chandef = sdata->csa_chandef;
    ///    printk("==MHX(%s) calling ieee80211_hw_config()...\n", __func__);
	///	ieee80211_hw_config(local, 0);
	///}

This prevents a physical change of phy freq by ieee80211_hw_config();

2. In hostapd:
void hostapd_event_ch_switch(struct hostapd_data *hapd, int freq, int ht,
			     int offset, int width, int cf1, int cf2)
{
#ifdef NEED_AP_MLME
	int channel, chwidth, seg0_idx = 0, seg1_idx = 0;

	hostapd_logger(hapd, NULL, HOSTAPD_MODULE_IEEE80211,
		       HOSTAPD_LEVEL_INFO, "driver had channel switch: "
		       "freq=%d, ht=%d, offset=%d, width=%d, cf1=%d, cf2=%d",
		       freq, ht, offset, width, cf1, cf2);

#if defined(MHX_ADAPTIVE_FREQ_HOPPING) && (defined(MHX_NICOLE) || defined(MHX_PDDL1800))
    if (hapd->iface->csa_in_progress) {
        hostapd_cleanup_cs_params(hapd);
    }
    wpa_msg(hapd->msg_ctx, MSG_INFO, AP_CSA_FINISHED "MHX: Fail a CSA for 900/1800.");
    return;    // no use here. the AP freq is already changed. after the CH_SWITCH_NOTIFY, looks too late.
#endif

This prevents hostapd real hopping.


Another solution is to cheat all upper layers from the very low PLL setting:
1. ar9003_hw_set_channel(), chan->channel = 2391;
2. ar9003_hw_compute_pll_control(), chan->channel = 2391;
After setting, restore the original chan->channel value.

JUl 14,2017
When ieee80211_csa_finalize() is called, the beacon is already configured for CSA, but the freq is not changed until the beacons has been all sent.

<0>[  183.780000] ==MHX(ieee80211_csa_finalize)                                                            
<7>[  185.160000] ath: phy0: ===MHX(ath9k_config) center_freq1=2410,center_freq=2410.                      
<7>[  185.160000] ath: phy0: (ath_set_channel): Set channel: 2410 MHz width: 1                             
<7>[  185.160000] ath: phy0: Set channel: 2410 MHz width: 1                                                
<7>[  185.160000] ath: phy0: Reset to 2410 MHz, HT40: 0 fastcc: 0                                          
<0>[  191.150000] ==MHX(ieee80211_csa_finalize)                                                            
<7>[  192.530000] ath: phy0: ===MHX(ath9k_config) center_freq1=2400,center_freq=2400.                      
<7>[  192.530000] ath: phy0: (ath_set_channel): Set channel: 2400 MHz width: 1                             
<7>[  192.530000] ath: phy0: Set channel: 2400 MHz width: 1                                                
<7>[  192.530000] ath: phy0: Reset to 2400 MHz, HT40: 0 fastcc: 0 
															/-->ieee80211_vif_change_channel() --->__ieee80211_vif_change_channel.
														       |

PHY frequency is changed after ieee80211_csa_finalize(). ieee80211_csa_finalize()----> __ieee80211_csa_finalize()------+---> if (!local->use_chanctx) ieee80211_hw_config(local, 0); calls ath9k_config() to change phy freq.
														       |
															\--> cfg80211_ch_switch_notify(), NL80211_CMD_CH_SWITCH_NOTIFY to hostapd.

Jul 13, 2017
Scenarios the STA(or wpa_supplicant) need to do freq mapping in 900MHz mode:
1. Received a CSA from AP; 2. Scanning
Both call into ieee80211_hw_config()----->ath9k_config().

Use a Microhard sig generator or a standard sig generator, oper_freq=2470. When inject 2433M, 2453MHz, the ANI@2470 are very low as 0-1. But when injecting 2421 ~ 2423MHz, the ANI@2470 are as high as 5-6. WHY????	Reposition the antenna and it disappeared. The ANI reading is accountable.

Jul 11,2017
At the STA side, Jason injects a interference 20MHz away the center frequency. The T/P drops from 6Mbps to 5Mbps but the ANI stays at 0 and OFDM error rate is very low. In this case it can not trigger a hopping. AP hops away after 6 + 3x1 = 9 seconds behaves correctly.

Found another operator priority issue. In dfs.c:
chImmuLevel[freq_idx] = chImmuLevel[freq_idx] + iface->drvData & 0xff - chImmuLevel[freq_idx] >> MA_N_SHIFT; can NOT get correct result. You must use:

chImmuLevel[freq_idx] = chImmuLevel[freq_idx] + (iface->drvData & 0xff) - (chImmuLevel[freq_idx] >> MA_N_SHIFT).

WHY!!!!!

Jul 7, 2017
Not the C compiler of ar9331 looks weird:
if((iface->drvData & 0xf00) == 0) is different with if(iface->drvData & 0xf00 == 0) as we usually expect. Maybe because of opt level???

Jul 6, 2017
Looks like CSA can not hop to same channel otherwise in nl80211_switch_channel()-->send_and_recv_msgs()--->send_and_recv(), after:
	while (err > 0) {
		int res = nl_recvmsgs(nl_handle, cb);
        printf("==MHX2.5. res=%d\n", res);
		if (res < 0) {
			wpa_printf(MSG_INFO,
				   "nl80211: %s->nl_recvmsgs failed: %d",
				   __func__, res);
		}
	}
ther err turns to -22(not valid parameter). So that the hostapd disable and then enable.

Jun 30, 2017
In pddl branch, found a potential issue:
package/network/utils/iw/src/nl80211.h,
package/kernel/mac80211/src/include/uapi/linux/nl80211.h,
package/network/services/hostapd/src/src/drivers/nl80211_copy.h

The 3 files should be kept exactly the same on the NL layer. But the kernel and hostapd are not synchronized. 

Jun 29, 2017
Temporarily disable the AP probe client hopping trigger. And find, when interference comes in, the ImmuLevel hangs around 2 and 3 even though the link is down and STA gets into fast probing AP mode. So remove "aniState->ofdmNoiseImmunityLevel >= ATH9K_ANI_OFDM_DEF_LEVEL". This will unblock the hopping.

Jun 28, 2017
How to use the frequency hopping product as a interference generator:
1. When red LED is on, push button;
2. at&x, to enter factory mode, input password(old pwd)
3. at&v, help menu
4. ats109=xxx	// hopping interval in mS
   ats108=xxx	// power, 20 - 30
5. at&w, save config
6. ato, start to transmit.

Interfere with this "sig-gen":
1. With interference, on AP: ImmuLevel goes up to 9 and NF not changed.
<7>[10614.090000] ath: phy0: Calibration @1031409 finished: long  ani, caldone: true
<7>[10614.390000] ath: phy0: listenTime=590 OFDM:9 errs=2884/s CCK:2 errs=0/s ofdm_turn=0
<7>[10614.390000] ath: phy0: ath9k_hw_getchan_noise: nf=-115, delta=-3, noise=-101
<7>[10614.390000] ath: phy0: Calibration @1031439 finished:   ani, caldone: true
<7>[10614.690000] ath: phy0: listenTime=295 OFDM:9 errs=3206/s CCK:2 errs=0/s ofdm_turn=0
<7>[10614.690000] ath: phy0: ath9k_hw_getchan_noise: nf=-115, delta=-3, noise=-101
<7>[10614.690000] ath: phy0: Calibration @1031469 finished:   ani, caldone: true
<7>[10614.990000] ath: phy0: listenTime=590 OFDM:9 errs=3122/s CCK:2 errs=0/s ofdm_turn=0
<7>[10614.990000] ath: phy0: ath9k_hw_getchan_noise: nf=-115, delta=-3, noise=-101
<7>[10614.990000] ath: phy0: Calibration @1031499 finished:   ani, caldone: true
<7>[10615.290000] ath: phy0: listenTime=295 OFDM:9 errs=3132/s CCK:2 errs=0/s ofdm_turn=0
<7>[10615.290000] ath: phy0: ath9k_hw_getchan_noise: nf=-115, delta=-3, noise=-101
<7>[10615.290000] ath: phy0: Calibration @1031529 finished:   ani, caldone: true
<7>[10615.590000] ath: phy0: listenTime=590 OFDM:9 errs=3142/s CCK:2 errs=0/s ofdm_turn=0
<7>[10615.590000] ath: phy0: ath9k_hw_getchan_noise: nf=-115, delta=-3, noise=-101
<7>[10615.590000] ath: phy0: Calibration @1031559 finished:   ani, caldone: true
<7>[10615.890000] ath: phy0: listenTime=295 OFDM:9 errs=2945/s CCK:2 errs=0/s ofdm_turn=0
<7>[10615.890000] ath: phy0: ath9k_hw_getchan_noise: nf=-115, delta=-3, noise=-101
<7>[10615.890000] ath: phy0: Calibration @1031589 finished:   ani, caldone: true
<7>[10616.190000] ath: phy0: listenTime=591 OFDM:9 errs=2906/s CCK:2 errs=0/s ofdm_turn=0
<7>[10616.190000] ath: phy0: ath9k_hw_getchan_noise: nf=-115, delta=-3, noise=-101
<7>[10616.190000] ath: phy0: Calibration @1031619 finished:   ani, caldone: true
<7>[10616.490000] ath: phy0: listenTime=295 OFDM:9 errs=3033/s CCK:2 errs=0/s ofdm_turn=0
<7>[10616.490000] ath: phy0: ath9k_hw_getchan_noise: nf=-115, delta=-3, noise=-101
<7>[10616.490000] ath: phy0: Calibration @1031649 finished:   ani, caldone: true
<7>[10616.790000] ath: phy0: listenTime=590 OFDM:9 errs=3001/s CCK:2 errs=0/s ofdm_turn=0
<7>[10616.790000] ath: phy0: ath9k_hw_getchan_noise: nf=-115, delta=-3, noise=-101
<7>[10616.790000] ath: phy0: Calibration @1031679 finished:   ani, caldone: true
<7>[10617.090000] ath: phy0: listenTime=295 OFDM:9 errs=3352/s CCK:2 errs=0/s ofdm_turn=0
<7>[10617.090000] ath: phy0: ath9k_hw_getchan_noise: nf=-115, delta=-3, noise=-101
<7>[10617.090000] ath: phy0: ar9003_hw_do_getnf: i=0, nf=396 (0x18c), nfarray[0]=-116 
<7>[10617.090000] ath: phy0: NF calibrated [ctl] [chain 0] is -116
<7>[10617.090000] ath: phy0: ath9k_hw_getchan_noise: nf=-115, delta=-3, noise=-101
<7>[10617.090000] ath: phy0: Calibration @1031709 finished: long  ani, caldone: true

2. Remove interference, on AP. ImmuLevel drops to 0, NF=-115 not changed. ErrRate drops to below 100/s.
<7>[10630.010000] ath: phy0: Calibration @1033001 finished: long  ani, caldone: false
<7>[10630.110000] ath: phy0: Calibration @1033011 finished:  short , caldone: false
<7>[10630.210000] ath: phy0: Calibration @1033021 finished:  short , caldone: false
<7>[10630.310000] ath: phy0: listenTime=596 OFDM:0 errs=18/s CCK:0 errs=0/s ofdm_turn=1
<7>[10630.310000] ath: phy0: ath9k_hw_getchan_noise: nf=-115, delta=-3, noise=-101
<7>[10630.310000] ath: phy0: Calibration @1033031 finished:  short ani, caldone: false
<7>[10630.410000] ath: phy0: Calibration @1033041 finished:  short , caldone: false
<7>[10630.510000] ath: phy0: Calibration @1033051 finished:  short , caldone: false
<7>[10630.610000] ath: phy0: listenTime=298 OFDM:0 errs=20/s CCK:0 errs=0/s ofdm_turn=0
<7>[10630.610000] ath: phy0: ath9k_hw_getchan_noise: nf=-115, delta=-3, noise=-101
<7>[10630.610000] ath: phy0: Calibration @1033061 finished:  short ani, caldone: false
<7>[10630.710000] ath: phy0: Calibration @1033071 finished:  short , caldone: false
<7>[10630.810000] ath: phy0: Calibration @1033081 finished:  short , caldone: false
<7>[10630.910000] ath: phy0: listenTime=593 OFDM:0 errs=16/s CCK:0 errs=0/s ofdm_turn=0
<7>[10630.910000] ath: phy0: ath9k_hw_getchan_noise: nf=-115, delta=-3, noise=-101
<7>[10630.910000] ath: phy0: 0: Chn 0 pmi=0x00338ffe;pmq=0x00320c80;iqcm=0x00035176;
<7>[10630.910000] ath: phy0: Starting IQ Cal and Correction for Chain 0
<7>[10630.910000] ath: phy0: Original: Chn 0 iq_corr_meas = 0x00035176
<7>[10630.910000] ath: phy0: Chn 0 pwr_meas_i = 0x00338ffe
<7>[10630.910000] ath: phy0: Chn 0 pwr_meas_q = 0x00320c80
<7>[10630.910000] ath: phy0: iqCorrNeg is 0x00000000
<7>[10630.910000] ath: phy0: Chn 0 iCoff = 0x00000010
<7>[10630.910000] ath: phy0: Chn 0 qCoff = 0x00000001
<7>[10630.910000] ath: phy0: Chn 0 : iCoff = 0x70  qCoff = 0x1
<7>[10630.910000] ath: phy0: Register offset (0x98dc) before update = 0x0
<7>[10630.910000] ath: phy0: Register offset (0x98dc) QI COFF (bitfields 0x00003f80) after update = 0x3801
<7>[10630.910000] ath: phy0: Register offset (0x98dc) QQ COFF (bitfields 0x0000007f) after update = 0x3801
<7>[10630.910000] ath: phy0: IQ Cal and Correction done for Chain 0
<7>[10630.910000] ath: phy0: IQ Cal and Correction (offset 0x98dc) enabled (bit position 0x00004000). New Value 0x00007801
<7>[10630.910000] ath: phy0: Calibration @1033091 finished:  short ani, caldone: true
<7>[10631.210000] ath: phy0: listenTime=290 OFDM:0 errs=44/s CCK:0 errs=0/s ofdm_turn=1
<7>[10631.210000] ath: phy0: ath9k_hw_getchan_noise: nf=-115, delta=-3, noise=-101
<7>[10631.210000] ath: phy0: Calibration @1033121 finished:   ani, caldone: true
<7>[10631.510000] ath: phy0: listenTime=588 OFDM:0 errs=47/s CCK:0 errs=0/s ofdm_turn=1
<7>[10631.510000] ath: phy0: ath9k_hw_getchan_noise: nf=-115, delta=-3, noise=-101
<7>[10631.510000] ath: phy0: Calibration @1033151 finished:   ani, caldone: true
<7>[10631.810000] ath: phy0: listenTime=298 OFDM:0 errs=23/s CCK:0 errs=0/s ofdm_turn=0
<7>[10631.810000] ath: phy0: ath9k_hw_getchan_noise: nf=-115, delta=-3, noise=-101
<7>[10631.810000] ath: phy0: Calibration @1033181 finished:   ani, caldone: true
<7>[10632.110000] ath: phy0: listenTime=596 OFDM:0 errs=23/s CCK:0 errs=0/s ofdm_turn=0
<7>[10632.110000] ath: phy0: ath9k_hw_getchan_noise: nf=-115, delta=-3, noise=-101
<7>[10632.110000] ath: phy0: Calibration @1033211 finished:   ani, caldone: true
<7>[10632.410000] ath: phy0: listenTime=298 OFDM:0 errs=20/s CCK:0 errs=0/s ofdm_turn=1
<7>[10632.410000] ath: phy0: ath9k_hw_getchan_noise: nf=-115, delta=-3, noise=-101
<7>[10632.410000] ath: phy0: Calibration @1033241 finished:   ani, caldone: true
<7>[10632.710000] ath: phy0: listenTime=596 OFDM:0 errs=23/s CCK:0 errs=0/s ofdm_turn=1
<7>[10632.710000] ath: phy0: ath9k_hw_getchan_noise: nf=-115, delta=-3, noise=-101
<7>[10632.710000] ath: phy0: Calibration @1033271 finished:   ani, caldone: true
<7>[10633.010000] ath: phy0: listenTime=289 OFDM:0 errs=41/s CCK:0 errs=0/s ofdm_turn=0
<7>[10633.010000] ath: phy0: ath9k_hw_getchan_noise: nf=-115, delta=-3, noise=-101
<7>[10633.010000] ath: phy0: ar9003_hw_do_getnf: i=0, nf=397 (0x18d), nfarray[0]=-115 
<7>[10633.010000] ath: phy0: NF calibrated [ctl] [chain 0] is -115
<7>[10633.010000] ath: phy0: ath9k_hw_getchan_noise: nf=-115, delta=-3, noise=-101
<7>[10633.010000] ath: phy0: Calibration @1033301 finished: long  ani, caldone: true

3. The test shows, the errrate or ImmuLevel change has nothing to do with traffic.

Jun 27, 2017
IPnDDL5800-v2_0_0-r1040.bin. mac80211, frequency below 5100MHz max txpower can only reach 22dBm. Greater than 5100MHz frequencies (5100 to 5800) txpower can be as high as 29dBm. But with ART, 5015 can tx 30dBm txpower no problem.

But a issue is noticed, when set the txpower several times(>6 times), the txpower starts to be wrong. Restart (reboot or powercycle) the uint and then get the correct txpower.

Jun 23, 2017
Check if some other PHY settings have this timing issue. iw phy "$phy" set antenna $txantenna $rxantenna ---> NL80211_ATTR_WIPHY_ANTENNA_TX ---> cfg80211_ops ops.set_antenna = ieee80211_set_antenna(), if (local->started) then ------>drv_set_antenna(), ieee80211_ops ops.set_antenna=ath5k_set_antenna(). Along this route, the open_count is not checked so that the kinds of settings like ANTENNA_TX should be ok in earlier stage. The settings affected by open_count are:
enum ieee80211_conf_changed {
	IEEE80211_CONF_CHANGE_SMPS		= BIT(1),
	IEEE80211_CONF_CHANGE_LISTEN_INTERVAL	= BIT(2),
	IEEE80211_CONF_CHANGE_MONITOR		= BIT(3),
	IEEE80211_CONF_CHANGE_PS		= BIT(4),
	IEEE80211_CONF_CHANGE_POWER		= BIT(5),
	IEEE80211_CONF_CHANGE_CHANNEL		= BIT(6),
	IEEE80211_CONF_CHANGE_RETRY_LIMITS	= BIT(7),
	IEEE80211_CONF_CHANGE_IDLE		= BIT(8),
};

A full log of when local->open_count is no-zero so that tx fixed power can be set:

Warning: eth0 MAC addresses don't match:
Address in SROM is         00:03:7F:09:0B:AD
Address in environment is  00:0F:92:04:BE:EB

## Booting image at bf080000 ...
   Image Name:   MIPS OpenWrt Linux-2.6.32.9
   Created:      2016-03-03   0:18:36 UTC
   Image Type:   MIPS Linux Kernel Image (gzip compressed)
   Data Size:    1341133 Bytes =  1.3 MB
   Load Address: 80060000
   Entry Point:  80060000
   Verifying Checksum ... OK
   Uncompressing Kernel Image ... OK

Starting kernel ...

Initrd not found or empty - disabling initrd
Zone PFN ranges:
  Normal   0x00000000 -> 0x00004000
Movable zone start PFN for each node
early_node_map[1] active PFN ranges
    0: 0x00000000 -> 0x00004000
Built 1 zonelists in Zone order, mobility grouping on.  Total pages: 16256
Kernel command line:  rootfstype=squashfs,jffs2 console=ttyS0,115200 board=PB42 console_quiet=0
PID hash table entries: 256 (order: -2, 1024 bytes)
Dentry cache hash table entries: 8192 (order: 3, 32768 bytes)
Inode-cache hash table entries: 4096 (order: 2, 16384 bytes)
Primary instruction cache 64kB, VIPT, 4-way, linesize 32 bytes.
Primary data cache 32kB, 4-way, VIPT, cache aliases, linesize 32 bytes
Writing ErrCtl register=00000000
Readback ErrCtl register=00000000
Memory: 61424k/65536k available (2336k kernel code, 4036k reserved, 451k data, 168k init, 0k highmem)
SLUB: Genslabs=7, HWalign=32, Order=0-3, MinObjects=0, CPUs=1, Nodes=1
Hierarchical RCU implementation.
NR_IRQS:56
Calibrating delay loop... 239.20 BogoMIPS (lpj=1196032)
Mount-cache hash table entries: 512
NET: Registered protocol family 16
MIPS: machine is Atheros PB42
===MHX ar71xx_add_device_eth reset PHY
registering PCI controller with io_map_base unset
bio: create slab <bio-0> at 0
i2c-gpio i2c-gpio.0: using pins 4 (SDA) and 5 (SCL, no clock stretching)
pci 0000:00:00.0: PME# supported from D0 D1 D2 D3hot
pci 0000:00:00.0: PME# disabled
PCI: mapping irq 48 to pin1@0000:00:13.0
Switching to clocksource MIPS
NET: Registered protocol family 2
IP route cache hash table entries: 1024 (order: 0, 4096 bytes)
TCP established hash table entries: 2048 (order: 2, 16384 bytes)
TCP bind hash table entries: 2048 (order: 1, 8192 bytes)
TCP: Hash tables configured (established 2048 bind 2048)
TCP reno registered
NET: Registered protocol family 1
squashfs: version 4.0 (2009/01/31) Phillip Lougher
Registering mini_fo version $Id: 209-mini_fo.patch,v 1.1 2010/04/01 22:08:58 Bob Exp $
JFFS2 version 2.2. (NAND) (SUMMARY)  © 2001-2006 Red Hat, Inc.
yaffs Mar  2 2016 17:15:58 Installing. 
msgmni has been set to 120
io scheduler noop registered
io scheduler deadline registered (default)
Serial: 8250/16550 driver, 1 ports, IRQ sharing disabled
serial8250.0: ttyS0 at MMIO 0x18020000 (irq = 11) is a 16550A
console [ttyS0] enabled, bootconsole disabled
console [ttyS0] enabled, bootconsole disabled
Atheros AR71xx SPI Controller driver version 0.2.4
m25p80 spi0.0: s25fl129p1 (16384 Kbytes)
Searching for RedBoot partition table in spi0.0 at offset 0xfe0000
Searching for RedBoot partition table in spi0.0 at offset 0xff0000
No RedBoot partition table detected in spi0.0
spi0.0: no WRT160NL signature found
Creating 4 MTD partitions on "spi0.0":
0x000000000000-0x000000040000 : "u-boot"
0x000000040000-0x000000080000 : "params"
0x000000080000-0x000000280000 : "kernel"
0x000000280000-0x000001000000 : "rootfs"
mtd: partition "rootfs" set to be root filesystem
mtd: partition "rootfs_data" created automatically, ofs=820000, len=7E0000 
0x000000820000-0x000001000000 : "rootfs_data"
ag71xx_mdio: probed
eth0: Atheros AG71xx at 0xb9000000, irq 4
IMQ driver loaded successfully.
        Hooking IMQ before NAT on PREROUTING.
        Hooking IMQ after NAT on POSTROUTING.
Atheros AR71xx hardware watchdog driver version 0.1.0
GACT probability on
netem: version 1.2
u32 classifier
    Performance counters on
    input device check on 
    Actions configured 
Netfilter messages via NETLINK v0.30.
nf_conntrack version 0.5.0 (960 buckets, 3840 max)
CONFIG_NF_CT_ACCT is deprecated and will be removed soon. Please use
nf_conntrack.acct=1 kernel parameter, acct=1 nf_conntrack module option or
sysctl net.netfilter.nf_conntrack_acct=1 to enable it.
ctnetlink v0.93: registering with nfnetlink.
nf_conntrack_rtsp v0.6.21 loading
NF_TPROXY: Transparent proxy support initialized, version 4.1.0
NF_TPROXY: Copyright (c) 2006-2007 BalaBit IT Ltd.
xt_time: kernel timezone is -0000
IPVS: Registered protocols ()
IPVS: Connection hash table configured (size=4096, memory=32Kbytes)
IPVS: ipvs loaded.
IPVS: [rr] scheduler registered.
IPVS: [wrr] scheduler registered.
IPVS: [lc] scheduler registered.
IPVS: [wlc] scheduler registered.
IPVS: [lblc] scheduler registered.
IPVS: [lblcr] scheduler registered.
IPVS: [dh] scheduler registered.
IPVS: [sh] scheduler registered.
IPVS: [sed] scheduler registered.
IPVS: [nq] scheduler registered.
IPv4 over IPv4 tunneling driver
GRE over IPv4 tunneling driver
ip_tables: (C) 2000-2006 Netfilter Core Team
TCP westwood registered
NET: Registered protocol family 17
Bridge firewalling registered
802.1Q VLAN Support v1.8 Ben Greear <greearb@candelatech.com>
All bugs added by David S. Miller <davem@redhat.com>
VFS: Mounted root (squashfs filesystem) readonly on device 31:3.
Freeing unused kernel memory: 168k freed
System Loading ...


IPnDDL login: root
Password: 


BusyBox v1.15.3 (2016-03-02 17:01:03 MST) built-in shell (ash)
Enter 'help' for a list of built-in commands.

==============================================================
   
                                  ______ ______ _______ 
        .-----.---.-.-----.-----.|   __ \      |_     _|
        |     |  _  |     |  _  ||    __/   ---|_|   |_ 
        |__|__|___._|__|__|_____||___|  |______|_______|

                                                                                          
     Leaders in Wireless Communication
 Robust Design|Excellent Sensitivity|Maximum Power                
 --------------------------------------------------------------
  * 
  * 802.11 series products
  *
  * Microhard Systems Inc              www.microhardcorp.com 
 --------------------------------------------------------------

 Welcome to "v2.0.0" build "1038-8"
 Built time: 2016-03-02 17:00:55
==============================================================
root@IPnDDL:~# tail /var/log/messages -f
Dec 31 17:00:13 root: ifup loopback
Dec 31 17:00:13 : <7>ar71xx: pll_reg 0xb8050010: 0x1099
Dec 31 17:00:13 : <6>device eth0 entered promiscuous mode
Dec 31 17:00:13 : <6>br-lan: port 1(eth0) entering forwarding state
Dec 31 17:00:13 : <6>br-lan: starting userspace STP failed, starting kernel STP
Dec 31 17:00:13 login[348]: root login on 'ttyS0'
Dec 31 17:00:15 root: ifup lan
Dec 31 17:00:17 : <6>Compat-wireless backport release: compat-wireless-2011-01-31-4-g86702b3
Dec 31 17:00:17 : <6>Backport based on wireless-testing.git master-2011-02-07
Dec 31 17:00:17 : <6>cfg80211: Calling CRDA to update world regulatory domain
Dec 31 17:00:18 : <6>usbcore: registered new interface driver usbfs
Dec 31 17:00:18 : <6>usbcore: registered new interface driver hub
Dec 31 17:00:18 : <6>usbcore: registered new device driver usb


Dec 31 17:00:20 : <0>PCI: Enabling device 0000:00:13.0 (0000 -> 0002)
Dec 31 17:00:20 : <6>ath5k 0000:00:13.0: registered as 'phy0'
Dec 31 17:00:20 : <7>ath: EEPROM regdomain: 0x0
Dec 31 17:00:20 : <7>ath: EEPROM indicates default country code should be used
Dec 31 17:00:20 : <7>ath: doing EEPROM country->regdmn map search
Dec 31 17:00:20 : <7>ath: country maps to regdmn code: 0x3a
Dec 31 17:00:20 : <7>ath: Country alpha2 being used: US
Dec 31 17:00:20 : <7>ath: Regpair used: 0x3a
Dec 31 17:00:20 : <7>ieee80211 phy0: Selected rate control algorithm 'minstrel_ht'
Dec 31 17:00:20 : <6>ath5k phy0: Atheros AR5414 chip found (MAC: 0xa5, PHY: 0x61)
Dec 31 17:00:20 : <7>ath5k_hw_commit_eeprom_settings: ah->nf_thresh=0, ee->ee_noise_floor_thr[ee_mode=0]=-54
Dec 31 17:00:20 : <7>ath5k_hw_commit_eeprom_settings: ah->cca_thresh62=0x7f, ee->ee_thr_62[ee_mode=0]=0xf
Dec 31 17:00:20 : <6>ath5k_hw_rfregs_init: Mode:0, freq=5000
Dec 31 17:00:21 : <6>PPP generic driver version 2.4.2
Dec 31 17:00:21 : <6>NET: Registered protocol family 24
Dec 31 17:00:21 : <6>ehci_hcd: USB 2.0 'Enhanced' Host Controller (EHCI) Driver
Dec 31 17:00:21 : <6>ar71xx-ehci ar71xx-ehci: Atheros AR71xx built-in EHCI controller
Dec 31 17:00:21 : <6>ar71xx-ehci ar71xx-ehci: new USB bus registered, assigned bus number 1
Dec 31 17:00:21 : <6>ar71xx-ehci ar71xx-ehci: irq 3, io mem 0x1b000000
Dec 31 17:00:21 : <6>ar71xx-ehci ar71xx-ehci: USB 2.0 started, EHCI 1.00
Dec 31 17:00:21 : <6>usb usb1: configuration #1 chosen from 1 choice
Dec 31 17:00:21 : <6>hub 1-0:1.0: USB hub found
Dec 31 17:00:21 : <6>hub 1-0:1.0: 2 ports detected
Dec 31 17:00:22 : <6>Ebtables v2.0 registered
Dec 31 17:00:22 : <6>ohci_hcd: USB 1.1 'Open' Host Controller (OHCI) Driver
Dec 31 17:00:22 : <6>ar71xx-ohci ar71xx-ohci: Atheros AR71xx built-in OHCI controller
Dec 31 17:00:22 : <6>ar71xx-ohci ar71xx-ohci: new USB bus registered, assigned bus number 2
Dec 31 17:00:22 : <6>ar71xx-ohci ar71xx-ohci: irq 14, io mem 0x1c000000
Dec 31 17:00:22 : <6>usb usb2: configuration #1 chosen from 1 choice
Dec 31 17:00:22 : <6>hub 2-0:1.0: USB hub found
Dec 31 17:00:22 : <6>hub 2-0:1.0: 2 ports detected
Dec 31 17:00:22 root: usb is adding in hotplug running 
Dec 31 17:00:22 : <6>i2c /dev entries driver
Dec 31 17:00:22 root: usb is adding in hotplug running 
Dec 31 17:00:22 : <6>usbcore: registered new interface driver cdc_acm
Dec 31 17:00:22 : <6>cdc_acm: v0.26:USB Abstract Control Model driver for USB modems and ISDN adapters
Dec 31 17:00:22 : <6>usb 2-2: new full speed USB device using ar71xx-ohci and address 2
Dec 31 17:00:23 root: usb is adding in hotplug running 
Dec 31 17:00:23 : <6>usbcore: registered new interface driver usbserial
Dec 31 17:00:23 : <6>USB Serial support registered for generic
Dec 31 17:00:23 root: usb is adding in hotplug running 
Dec 31 17:00:23 : <6>usb 2-2: configuration #1 chosen from 1 choice
Dec 31 17:00:23 : <6>usbcore: registered new interface driver usbserial_generic
Dec 31 17:00:23 : <6>usbserial: USB Serial Driver core
Dec 31 17:00:23 root: usb is adding in hotplug running 
Dec 31 17:00:23 : <6>USB Serial support registered for FTDI USB Serial Device
Dec 31 17:00:23 : <6>ftdi_sio 2-2:1.0: FTDI USB Serial Device converter detected
Dec 31 17:00:23 : <6>usb 2-2: Detected FT232RL
Dec 31 17:00:23 : <6>usb 2-2: Number of endpoints 2
Dec 31 17:00:23 : <6>usb 2-2: Endpoint 1 MaxPacketSize 16384
Dec 31 17:00:23 : <6>usb 2-2: Endpoint 2 MaxPacketSize 16384
Dec 31 17:00:23 : <6>usb 2-2: Setting MaxPacketSize 16384
Dec 31 17:00:23 : <6>usb 2-2: FTDI USB Serial Device converter now attached to ttyUSB0
Dec 31 17:00:23 : <6>usbcore: registered new interface driver ftdi_sio
Dec 31 17:00:23 : <6>ftdi_sio: v1.5.0:USB FTDI Serial Converters Driver
Dec 31 17:00:23 root: usb is adding in hotplug running 
Dec 31 17:00:24 : resetting the transceiver...
Dec 31 17:00:25 : killall: mpci-led: no process killed
Dec 31 17:00:25 : FOUND HARDWARE version : "v1.0.0" 
Dec 31 17:00:25 : <0>==MHX1.1(nl80211_set_wiphy)
Dec 31 17:00:25 : <0>==MHX1.1(nl80211_set_wiphy)
Dec 31 17:00:25 : setting bwmode 1
Dec 31 17:00:25 mac80211_IPnDDL5800: Get mode = 0 freq = 5470 
Dec 31 17:00:25 mac80211 thresh: user setting thresh62 = 127, nfthresh = -1, nfcalmaxcca = -50.
Dec 31 17:00:26 mac80211 txpower: user setting is 30 the max can be set is 30 .
Dec 31 17:00:26 root: ===MHX: ifconfig:
Dec 31 17:00:26 : br-lan    Link encap:Ethernet  HWaddr 00:0F:92:04:BE:EB  
Dec 31 17:00:26 :           inet addr:192.168.168.2  Bcast:192.168.168.255  Mask:255.255.255.0
Dec 31 17:00:26 :           UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
Dec 31 17:00:26 :           RX packets:0 errors:0 dropped:0 overruns:0 frame:0
Dec 31 17:00:26 :           TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
Dec 31 17:00:26 :           collisions:0 txqueuelen:0 
Dec 31 17:00:26 :           RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
Dec 31 17:00:26 : eth0      Link encap:Ethernet  HWaddr 00:0F:92:04:BE:EB  
Dec 31 17:00:26 :           UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
Dec 31 17:00:26 :           RX packets:0 errors:0 dropped:0 overruns:0 frame:0
Dec 31 17:00:26 :           TX packets:6 errors:0 dropped:0 overruns:0 carrier:0
Dec 31 17:00:26 :           inet addr:127.0.0.1  Mask:255.0.0.0
Dec 31 17:00:26 :           UP LOOPBACK RUNNING  MTU:16436  Metric:1
Dec 31 17:00:26 :           RX packets:0 errors:0 dropped:0 overruns:0 frame:0
Dec 31 17:00:26 :           TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
Dec 31 17:00:26 :           collisions:0 txqueuelen:0 
Dec 31 17:00:26 :           RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
Dec 31 17:00:26 : <6>br-lan: port 1(eth0) entering disabled state
Dec 31 17:00:26 root: ===MHX: ifconfig -a:
Dec 31 17:00:26 : br-lan    Link encap:Ethernet  HWaddr 00:0F:92:04:BE:EB  
Dec 31 17:00:26 :           inet addr:192.168.168.2  Bcast:192.168.168.255  Mask:255.255.255.0
Dec 31 17:00:26 :           UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
Dec 31 17:00:26 :           RX packets:0 errors:0 dropped:0 overruns:0 frame:0
Dec 31 17:00:26 :           TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
Dec 31 17:00:26 :           collisions:0 txqueuelen:0 
Dec 31 17:00:26 :           RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
Dec 31 17:00:26 : eth0      Link encap:Ethernet  HWaddr 00:0F:92:04:BE:EB  
Dec 31 17:00:26 :           UP BROADCAST MULTICAST  MTU:1500  Metric:1
Dec 31 17:00:26 :           RX packets:0 errors:0 dropped:0 overruns:0 frame:0
Dec 31 17:00:26 :           TX packets:6 errors:0 dropped:0 overruns:0 carrier:0
Dec 31 17:00:26 root: ===MHX: check wiphy:
Dec 31 17:00:26 :           collisions:0 txqueuelen:11000 
Dec 31 17:00:26 :           RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
Dec 31 17:00:26 : lo        Link encap:Local Loopback  
Dec 31 17:00:26 :           inet addr:127.0.0.1  Mask:255.0.0.0
Dec 31 17:00:26 :           UP LOOPBACK RUNNING  MTU:16436  Metric:1
Dec 31 17:00:26 :           RX packets:0 errors:0 dropped:0 overruns:0 frame:0
Dec 31 17:00:26 :           TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
Dec 31 17:00:26 :           collisions:0 txqueuelen:0 
Dec 31 17:00:26 :           RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
Dec 31 17:00:26 : teql0     Link encap:UNSPEC  HWaddr 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  
Dec 31 17:00:26 :           NOARP  MTU:1500  Metric:1
Dec 31 17:00:26 :           RX packets:0 errors:0 dropped:0 overruns:0 frame:0
Dec 31 17:00:26 :           TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
Dec 31 17:00:26 :           collisions:0 txqueuelen:100 
Dec 31 17:00:26 :           RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
Dec 31 17:00:26 : tunl0     Link encap:UNSPEC  HWaddr 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  
Dec 31 17:00:26 :           NOARP  MTU:1480  Metric:1
Dec 31 17:00:26 :           RX packets:0 errors:0 dropped:0 overruns:0 frame:0
Dec 31 17:00:26 :           TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
Dec 31 17:00:26 :           collisions:0 txqueuelen:0 
Dec 31 17:00:26 :           RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
Dec 31 17:00:26 : wlan0     Link encap:Ethernet  HWaddr 00:0F:92:FA:FA:72  
Dec 31 17:00:26 :           BROADCAST MULTICAST  MTU:1500  Metric:1
Dec 31 17:00:26 :           RX packets:0 errors:0 dropped:0 overruns:0 frame:0
Dec 31 17:00:26 :           TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
Dec 31 17:00:26 :           collisions:0 txqueuelen:1000 
Dec 31 17:00:26 :           RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
Dec 31 17:00:26 : drwxr-xr-x    2 root     root            0 Dec 31 17:00 .
Dec 31 17:00:26 : drwxr-xr-x   24 root     root            0 Dec 31 17:00 ..
Dec 31 17:00:26 : lrwxrwxrwx    1 root     root            0 Dec 31 17:00 phy0 -> ../../devices/pci0000:00/0000:00:13.0/
ieee80211/phy0
Dec 31 17:00:26 root: =======MHX(original set txpower place. ignore this useless set txpower!) set [wlan0] power to [200
0]
Dec 31 17:00:26 mhqos-hostapd: >>0.0.0.0 0.0.0.0 0 0.0.0.0 0.0.0.0 0 0 0
Dec 31 17:00:26 mhqos-hostapd: >>0.0.0.0 0.0.0.0 0 0.0.0.0 0.0.0.0 0 0 0
Dec 31 17:00:26 mhqos-hostapd: >>0.0.0.0 0.0.0.0 0 0.0.0.0 0.0.0.0 0 0 0
Dec 31 17:00:27 mhqos-hostapd: >>0.0.0.0 0.0.0.0 0 0.0.0.0 0.0.0.0 0 0 0
Dec 31 17:00:27 : <7>ar71xx: pll_reg 0xb8050010: 0x1099
Dec 31 17:00:27 : <6>br-lan: topology change detected, propagating
Dec 31 17:00:27 : <6>br-lan: port 1(eth0) entering forwarding state
Dec 31 17:00:27 mhqos-hostapd: >>0.0.0.0 0.0.0.0 0 0.0.0.0 0.0.0.0 0 0 0
Dec 31 17:00:27 mhqos-hostapd: >>0.0.0.0 0.0.0.0 0 0.0.0.0 0.0.0.0 0 0 0
Dec 31 17:00:27 mhqos-hostapd: >>0.0.0.0 0.0.0.0 0 0.0.0.0 0.0.0.0 0 0 0
Dec 31 17:00:27 mhqos-hostapd: >>0.0.0.0 0.0.0.0 0 0.0.0.0 0.0.0.0 0 0 0
Dec 31 17:00:28 : <7>ath5k_hw_commit_eeprom_settings: ah->nf_thresh=-1, ee->ee_noise_floor_thr[ee_mode=0]=-54
Dec 31 17:00:28 : <7>ath5k_hw_commit_eeprom_settings: ah->cca_thresh62=0x7f, ee->ee_thr_62[ee_mode=0]=0xf
Dec 31 17:00:28 : <6>ath5k_hw_rfregs_init: Mode:0, freq=5000
Dec 31 17:00:28 : <0>==MHX5.1(ieee80211_do_open) coming_up=true. local->open_count=1 			// open_count=1, fixed txpower can be set until now.
Dec 31 17:00:28 : <0>===MHX3.1(ieee80211_hw_config) changed=0xffffffff. local->open_count=1
Dec 31 17:00:28 : <0>===MHX4.1(ath5k_config) changed=0xffffffff. sc->power_level=0,conf->power_level=30 
Dec 31 17:00:28 : <7>ath5k_hw_commit_eeprom_settings: ah->nf_thresh=-1, ee->ee_noise_floor_thr[ee_mode=0]=-54
Dec 31 17:00:28 : <7>ath5k_hw_commit_eeprom_settings: ah->cca_thresh62=0x7f, ee->ee_thr_62[ee_mode=0]=0xf
Dec 31 17:00:28 : <6>ath5k_hw_rfregs_init: Mode:0, freq=5000
Dec 31 17:00:28 : <0>===MHX4.2(ath5k_config) 
Dec 31 17:00:28 : <7>ath5k_hw_commit_eeprom_settings: ah->nf_thresh=-1, ee->ee_noise_floor_thr[ee_mode=0]=-54
Dec 31 17:00:28 : <7>ath5k_hw_commit_eeprom_settings: ah->cca_thresh62=0x7f, ee->ee_thr_62[ee_mode=0]=0xf
Dec 31 17:00:28 : <6>ath5k_hw_rfregs_init: Mode:0, freq=5000
Dec 31 17:00:28 : <0>==MHX5.1(ieee80211_do_open) coming_up=true. local->open_count=1 
Dec 31 17:00:28 : <0>===MHX3.1(ieee80211_hw_config) changed=0xffffffff. local->open_count=1
Dec 31 17:00:28 : <0>===MHX4.1(ath5k_config) changed=0xffffffff. sc->power_level=30,conf->power_level=30 
Dec 31 17:00:28 : <7>ath5k_hw_commit_eeprom_settings: ah->nf_thresh=-1, ee->ee_noise_floor_thr[ee_mode=0]=-54
Dec 31 17:00:28 : <7>ath5k_hw_commit_eeprom_settings: ah->cca_thresh62=0x7f, ee->ee_thr_62[ee_mode=0]=0xf
Dec 31 17:00:28 : <6>ath5k_hw_rfregs_init: Mode:0, freq=5000
Dec 31 17:00:28 : <6>device wlan0 entered promiscuous mode
Dec 31 17:00:28 : <0>==MHX5.1(ieee80211_do_open) coming_up=true. local->open_count=2 
Dec 31 17:00:28 : <6>br-lan: topology change detected, propagating
Dec 31 17:00:28 : <6>br-lan: port 2(wlan0) entering forwarding state
Dec 31 17:00:28 : <0>===MHX3.1(ieee80211_hw_config) changed=0x00000040. local->open_count=2
Dec 31 17:00:28 : <0>===MHX4.1(ath5k_config) changed=0x00000040. sc->power_level=30,conf->power_level=30 
Dec 31 17:00:28 : <7>ath5k_hw_commit_eeprom_settings: ah->nf_thresh=-1, ee->ee_noise_floor_thr[ee_mode=0]=-54
Dec 31 17:00:28 : <7>ath5k_hw_commit_eeprom_settings: ah->cca_thresh62=0x7f, ee->ee_thr_62[ee_mode=0]=0xf
Dec 31 17:00:28 : <6>ath5k_hw_rfregs_init: Mode:0, freq=5470
Dec 31 17:00:28 : <0>==MHX1.1(nl80211_set_wiphy)
Dec 31 17:00:28 : <0>==MHX1.1(nl80211_set_wiphy)
Dec 31 17:00:28 : <0>==MHX1.1(nl80211_set_wiphy)
Dec 31 17:00:28 : <0>==MHX1.1(nl80211_set_wiphy)
Dec 31 17:00:28 : <0>==MHX1.1(nl80211_set_wiphy)
Dec 31 17:00:28 : <0>==MHX1.1(nl80211_set_wiphy)
Dec 31 17:00:28 : <0>==MHX1.1(nl80211_set_wiphy)
Dec 31 17:00:29 hostapd: wlan0: STA 00:0f:92:fa:fa:7f IEEE 802.11: authenticated
Dec 31 17:00:29 hostapd: wlan0: STA 00:0f:92:fa:fa:7f IEEE 802.11: associated (aid 1)
Dec 31 17:00:29 hostapd: wlan0: STA 00:0f:92:fa:fa:7f RADIUS: starting accounting session 0000001C-00000000
Dec 31 17:00:31 : <6>device wlan0 left promiscuous mode
Dec 31 17:00:31 : <6>br-lan: port 2(wlan0) entering disabled state
Dec 31 17:00:31 : <6>device wlan0 entered promiscuous mode
Dec 31 17:00:31 : <6>br-lan: topology change detected, propagating
Dec 31 17:00:31 : <6>br-lan: port 2(wlan0) entering forwarding state
Dec 31 17:00:31 : <0>==MHX1.1(nl80211_set_wiphy)
Dec 31 17:00:31 root: ===MHX: ifconfig:
Dec 31 17:00:31 root: ===MHX: ifconfig -a:
Dec 31 17:00:31 : br-lan    Link encap:Ethernet  HWaddr 00:0F:92:04:BE:EB  
Dec 31 17:00:31 :           inet addr:192.168.168.2  Bcast:192.168.168.255  Mask:255.255.255.0
Dec 31 17:00:31 :           UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
Dec 31 17:00:31 :           RX packets:1 errors:0 dropped:0 overruns:0 frame:0
Dec 31 17:00:31 :           TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
Dec 31 17:00:31 :           collisions:0 txqueuelen:0 
Dec 31 17:00:31 :           RX bytes:6 (6.0 B)  TX bytes:0 (0.0 B)
Dec 31 17:00:31 : eth0      Link encap:Ethernet  HWaddr 00:0F:92:04:BE:EB  
Dec 31 17:00:31 :           UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
Dec 31 17:00:31 :           RX packets:0 errors:0 dropped:0 overruns:0 frame:0
Dec 31 17:00:31 :           TX packets:9 errors:0 dropped:0 overruns:0 carrier:0
Dec 31 17:00:31 :           collisions:0 txqueuelen:1000 
Dec 31 17:00:31 :           RX bytes:0 (0.0 B)  TX bytes:436 (436.0 B)
Dec 31 17:00:31 :           Interrupt:4 
Dec 31 17:00:31 : lo        Link encap:Local Loopback  
Dec 31 17:00:31 :           inet addr:127.0.0.1  Mask:255.0.0.0
Dec 31 17:00:31 :           UP LOOPBACK RUNNING  MTU:16436  Metric:1
Dec 31 17:00:31 :           RX packets:0 errors:0 dropped:0 overruns:0 frame:0
Dec 31 17:00:31 :           TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
Dec 31 17:00:31 :           collisions:0 txqueuelen:0 
Dec 31 17:00:31 :           RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
Dec 31 17:00:31 : mon.wlan0 Link encap:UNSPEC  HWaddr 00-0F-92-FA-FA-72-00-00-00-00-00-00-00-00-00-00  
Dec 31 17:00:31 :           UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
Dec 31 17:00:31 :           RX packets:10 errors:0 dropped:0 overruns:0 frame:0
Dec 31 17:00:31 :           TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
Dec 31 17:00:31 :           collisions:0 txqueuelen:1000 
Dec 31 17:00:31 :           RX bytes:488 (488.0 B)  TX bytes:0 (0.0 B)
Dec 31 17:00:31 : wlan0     Link encap:Ethernet  HWaddr 00:0F:92:FA:FA:72  
Dec 31 17:00:31 :           UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
Dec 31 17:00:31 :           RX packets:0 errors:0 dropped:0 overruns:0 frame:0
process `snmpd' is using obsolete setsockopt SO_BSDCOMPAT
set rate=0x4e2b00



ar71xx-wdt: enabling watchdog timer


Jun 22, 2017
IPnDDL5800 channels:
                Frequencies:
                        * 5000 MHz [1] (30.0 dBm)
                        * 5001 MHz [2] (30.0 dBm)
                        * 5002 MHz [3] (30.0 dBm)
                        * 5003 MHz [4] (30.0 dBm)
                        * 5004 MHz [5] (30.0 dBm)
                        * 5005 MHz [6] (30.0 dBm)
                        * 5006 MHz [7] (30.0 dBm)
                        * 5007 MHz [8] (30.0 dBm)
                        * 5008 MHz [9] (30.0 dBm)
                        * 5009 MHz [10] (30.0 dBm)
                        * 5010 MHz [11] (30.0 dBm)
                        * 5011 MHz [12] (30.0 dBm)
                        * 5012 MHz [13] (30.0 dBm)

..........................step is 1MHz...........................................

                        * 5807 MHz [808] (30.0 dBm)
                        * 5808 MHz [809] (30.0 dBm)
                        * 5809 MHz [810] (30.0 dBm)
                        * 5810 MHz [811] (30.0 dBm)
                        * 5811 MHz [812] (30.0 dBm)
                        * 5812 MHz [813] (30.0 dBm)
                        * 5813 MHz [814] (30.0 dBm)
                        * 5814 MHz [815] (30.0 dBm)
                        * 5815 MHz [816] (30.0 dBm)
                        * 5816 MHz [817] (30.0 dBm)
                        * 5817 MHz [818] (30.0 dBm)
                        * 5818 MHz [819] (30.0 dBm)
                        * 5819 MHz [820] (30.0 dBm)
                        * 5820 MHz [821] (30.0 dBm)
                        * 5821 MHz [822] (30.0 dBm)
                        * 5822 MHz [823] (30.0 dBm)
                        * 5823 MHz [824] (30.0 dBm)
                        * 5824 MHz [825] (30.0 dBm)
                        * 5825 MHz [826] (30.0 dBm)

Test IPnDDL5800(stepone branch). 5010MHz, AP@4MHzbw: txpower=30dBm(UI),txrate=18Mbps fixed.
Power cycle (slow, make it discharged), get measured txpower=18.5dBm. "reboot -f" get measured txpower=18.5dBm. The power difference seen on IPnDDL2350 doesn't exist on step1. [ Cable not calibrated!]

Change to 5470MHz:
Power cycle (slow, make it discharged), get measured txpower=9.8dBm. "reboot -f" get measured txpower=9.8dBm. 

Change to 5825MHz:
Power cycle (slow, make it discharged), get measured txpower=1.9dBm. "reboot -f" get measured txpower=2.2dBm. 


Use ART AP and STA both can reach 30dBm txpower @5010MHz when doing continuous transmission test. The calibration table is:

=========================Calibration Information============================
|     5825     |     5805     |     5500     |     5320     |     5040     |
|==============|==============|==============|==============|==============|
|pdadc pwr(dBm)|pdadc pwr(dBm)|pdadc pwr(dBm)|pdadc pwr(dBm)|pdadc pwr(dBm)|
|              |              |              |              |              |
| PD_Gain  4   |              |              |              |              |
|  040   0.00  |  037   0.00  |  035   0.00  |  031   0.00  |  026   0.00  |
|  062   0.50  |  046   1.00  |  045   1.50  |  041   2.00  |  037   1.50  |
|  062   1.50  |  061   3.00  |  055   3.00  |  053   4.00  |  048   3.50  |
|  075   3.00  |  078   4.50  |  078   5.50  |  069   5.50  |  063   5.50  |
|              |              |              |              |              |
|              |              |              |              |              |
| PD_Gain  1   |              |              |              |              |
|  017   4.00  |  016   4.00  |  015   4.00  |  014   4.00  |  012   4.00  |
|  033   8.00  |  030   8.00  |  035  10.00  |  034  11.00  |  029  10.00  |
|  061  12.50  |  053  12.50  |  076  16.00  |  092  18.50  |  072  17.00  |
|  101  16.00  |  089  16.00  |  128  19.50  |  137  21.50  |  113  20.00  |
|  144  19.00  |  115  18.00  |  137  20.50  |  137  22.00  |  125  21.00  |
|              |              |              |              |              |
|==============|==============|==============|==============|==============|
|     0000     |     0000     |     0000     |     0000     |     0000     |
|==============|==============|==============|==============|==============|
|pdadc pwr(dBm)|pdadc pwr(dBm)|pdadc pwr(dBm)|pdadc pwr(dBm)|pdadc pwr(dBm)|
|              |              |              |              |              |
| PD_Gain  4   |              |              |              |              |
|  000   0.00  |  000   0.00  |  000   0.00  |  000   0.00  |  000   0.00  |
|  000   0.00  |  000   0.00  |  000   0.00  |  000   0.00  |  000   0.00  |
|  000   0.00  |  000   0.00  |  000   0.00  |  000   0.00  |  000   0.00  |
|  000   0.00  |  000   0.00  |  000   0.00  |  000   0.00  |  000   0.00  |
|              |              |              |              |              |
|              |              |              |              |              |
| PD_Gain  1   |              |              |              |              |
|  000   0.00  |  000   0.00  |  000   0.00  |  000   0.00  |  000   0.00  |
|  000   0.00  |  000   0.00  |  000   0.00  |  000   0.00  |  000   0.00  |
|  000   0.00  |  000   0.00  |  000   0.00  |  000   0.00  |  000   0.00  |
|  000   0.00  |  000   0.00  |  000   0.00  |  000   0.00  |  000   0.00  |
|  000   0.00  |  000   0.00  |  000   0.00  |  000   0.00  |  000   0.00  |
|              |              |              |              |              |
|==============|==============|==============|==============|==============|

Press any key to continue

============================Target Power Info===============================
|     rate     |     5100     |     5105     |     5470     |     5475     |
|==============|==============|==============|==============|==============|
|     6-24     |     10.0     |     17.0     |     17.0     |     18.0     |
|      36      |     10.0     |     15.0     |     15.0     |     16.0     |
|      48      |     10.0     |     13.0     |     13.0     |     14.0     |
|      54      |     10.0     |     11.0     |     11.0     |     12.0     |
|==============|==============|==============|==============|==============|
|     rate     |     5825     |     0000     |     0000     |     0000     |
|==============|==============|==============|==============|==============|
|     6-24     |     18.0     |      0.0     |      0.0     |      0.0     |
|      36      |     16.0     |      0.0     |      0.0     |      0.0     |
|      48      |     14.0     |      0.0     |      0.0     |      0.0     |
|      54      |     12.0     |      0.0     |      0.0     |      0.0     |
|==============|==============|==============|==============|==============|


ART ddl5800 power test: contunuous tcansmit mode, rate=6Mbps. Cable not calibrated.

Frequency			5010		5210			5410			 5610			  5810
Set TX power		10,15,20,25,30		10, 15,20,25,30		10, 15,20,25,30		 10, 15,20,25,30	  10, 15,20,25,30
Measured TX power1	6.5,13,20,24.4,25.8	1.2,6.8,13.7,19,21.6	6.8,12.5.18.8,21.8,23	 -1.4,3.6,10,15.1,17.5	  -2.7,2.5,8.7,14.5,17.3  (long cable)
Measured TX power2	12,18.3,25,28.2,29.3	9.3,15.4,22.8,28,29.8	9.9,15.9,23.1,28.3,30.3  12.4,18.6,25.6,29.1,30.3 9.8,15.4,22.7,27.8,29.4  (short cable)

Some suppliment info:

Operating in 11a at channel 5.810GHz

Power control mode:
Output power = 30.0, ext power detector = 1  xpdGain = 0, 
ob = 5, db = 5b_ob = 2, b_db = 2
ANT_A, [TX99], Rate =  6 Mbps, PN9, Normal rate
 PDADC = 138, gain = 22 dacGain = 1
 PDADC = 131, gain = 25 dacGain = 0
 PDADC = 96, gain = 24 dacGain = 0

[Conclusion:] 1. Pay attention to cables and connectors when measure power; 2. ddl5800 w/ art works perfect so that the calibration is ok.

IPnDDL5800 with mac80211 symptom: WebUI set power to 30dBm, while hard/soft reboot, the output power gets only 24dBm.
Debug: /etc/init.d/network ---> /sbin/wifi up ---> wifi_updown(), eval "${1}_$iftype '$device'" --->enable_mac80211(), iw dev "$ifname" set txpower fixed "${txpower%%.*}00".
Add log print like this:
                    logger "===MHX: ifconfig:"                                  
                    ifconfig                                           
                    logger "===MHX: ifconfig -a:"                               
                    ifconfig -a                                  
                    logger "===MHX: check wiphy:"                               
                    ls sys/class/ieee80211/ -al                                 
                    logger "=======MHX set [$ifname] power to ["${txpower%%.*}00
                    iw dev "$ifname" set txpower fixed "${txpower%%.*}00" 
The log is:
Dec 31 17:00:24 : FOUND HARDWARE version : "v1.0.0" 
Dec 31 17:00:24 : setting bwmode 1
Dec 31 17:00:24 mac80211_IPnDDL5800: Get mode = 0 freq = 5470 
Dec 31 17:00:25 mac80211 thresh: user setting thresh62 = 127, nfthresh = -1, nfcalmaxcca = -50.
Dec 31 17:00:25 mac80211 txpower: user setting is 30 the max can be set is 30 .
Dec 31 17:00:25 root: ===MHX: ifconfig:
Dec 31 17:00:25 : br-lan    Link encap:Ethernet  HWaddr 00:0F:92:04:BE:EB  
Dec 31 17:00:25 :           inet addr:192.168.168.2  Bcast:192.168.168.255  Mask:255.255.255.0
Dec 31 17:00:25 :           UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
Dec 31 17:00:25 :           RX packets:0 errors:0 dropped:0 overruns:0 frame:0
Dec 31 17:00:25 :           TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
Dec 31 17:00:25 :           collisions:0 txqueuelen:0 
Dec 31 17:00:25 :           RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
Dec 31 17:00:25 : eth0      Link encap:Ethernet  HWaddr 00:0F:92:04:BE:EB  
Dec 31 17:00:25 :           UP BROADCAST MULTICAST  MTU:1500  Metric:1
Dec 31 17:00:25 :           RX packets:0 errors:0 dropped:0 overruns:0 frame:0
Dec 31 17:00:25 :           TX packets:4 errors:0 dropped:0 overruns:0 carrier:0
Dec 31 17:00:25 root: ===MHX: ifconfig -a:
Dec 31 17:00:25 : br-lan    Link encap:Ethernet  HWaddr 00:0F:92:04:BE:EB  
Dec 31 17:00:25 :           inet addr:192.168.168.2  Bcast:192.168.168.255  Mask:255.255.255.0
Dec 31 17:00:25 :           UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
Dec 31 17:00:25 :           RX packets:0 errors:0 dropped:0 overruns:0 frame:0
Dec 31 17:00:25 :           TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
Dec 31 17:00:25 :           collisions:0 txqueuelen:0 
Dec 31 17:00:25 :           RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
Dec 31 17:00:25 : eth0      Link encap:Ethernet  HWaddr 00:0F:92:04:BE:EB  
Dec 31 17:00:25 :           UP BROADCAST MULTICAST  MTU:1500  Metric:1
Dec 31 17:00:25 :           RX packets:0 errors:0 dropped:0 overruns:0 frame:0
Dec 31 17:00:25 :           TX packets:4 errors:0 dropped:0 overruns:0 carrier:0
Dec 31 17:00:25 root: ===MHX: check wiphy:
Dec 31 17:00:25 : drwxr-xr-x    2 root     root            0 Dec 31 17:00 .
Dec 31 17:00:25 : drwxr-xr-x   24 root     root            0 Dec 31 17:00 ..
Dec 31 17:00:25 : lrwxrwxrwx    1 root     root            0 Dec 31 17:00 phy0 -> ../../devices/pci0000:00/0000:00:13.0/
ieee80211/phy0
Dec 31 17:00:25 root: =======MHX set [wlan0] power to [2000]
Dec 31 17:00:25 mhqos-hostapd: >>0.0.0.0 0.0.0.0 0 0.0.0.0 0.0.0.0 0 0 0

This means, at the time of "set dev wlan0 txpowr fixed 2000", the "wlan0" has not been created yet. At this point of time, "phy0" should be used. Change that line to: "iw phy phy0 set txpower fixed "${txpower%%.*}00"" still does not work. Still dig into the mac80211 driver. 

During the boot up time, the power setting prints:

<6>usb 2-2: Endpoint 1 MaxPacketSize 16384
<6>usb 2-2: Endpoint 2 MaxPacketSize 16384
<6>usb 2-2: Setting MaxPacketSize 16384
<6>usb 2-2: FTDI USB Serial Device converter now attached to ttyUSB0
<6>usbcore: registered new interface driver ftdi_sio
<6>ftdi_sio: v1.5.0:USB FTDI Serial Converters Driver
<0>==MHX1.1(nl80211_set_wiphy)
<0>==MHX1.1(nl80211_set_wiphy)
<0>==MHX1.1(nl80211_set_wiphy)
<0>==MHX1.2(nl80211_set_wiphy)
<0>==MHX1.3(nl80211_set_wiphy)
<0>==MHX2.1(ieee80211_set_tx_power). type=2, mbm=1000			// Purposely change to 10dBm first
<0>==MHX2.2(ieee80211_set_tx_power). type=2, mbm=1000
<0>==MHX2.3(ieee80211_set_tx_power). user_power_level=10
<0>===MHX3.1(ieee80211_hw_config) changed=0x00000020. local->open_count=0
<0>==MHX1.4(nl80211_set_wiphy). type=2, mbm=1000, res=0
<6>br-lan: port 1(eth0) entering disabled state
<0>==MHX1.1(nl80211_set_wiphy)
<0>==MHX1.2(nl80211_set_wiphy)
<0>==MHX1.3(nl80211_set_wiphy)
<0>==MHX2.1(ieee80211_set_tx_power). type=2, mbm=2000			// And then change to 20dBm
<0>==MHX2.2(ieee80211_set_tx_power). type=2, mbm=2000
<0>==MHX2.3(ieee80211_set_tx_power). user_power_level=20
<0>===MHX3.1(ieee80211_hw_config) changed=0x00000020. local->open_count=0	// NOTE: the open_count=0!!!
<0>==MHX1.4(nl80211_set_wiphy). type=2, mbm=2000, res=0
<7>ar71xx: pll_reg 0xb8050010: 0x1099
<6>br-lan: topology change detected, propagating
<6>br-lan: port 1(eth0) entering forwarding state
<7>ath5k_hw_commit_eeprom_settings: ah->nf_thresh=-1, ee->ee_noise_floor_thr[ee_mode=0]=-54
<7>ath5k_hw_commit_eeprom_settings: ah->cca_thresh62=0x7f, ee->ee_thr_62[ee_mode=0]=0xf
<6>ath5k_hw_rfregs_init: Mode:0, freq=5000
<0>===MHX3.1(ieee80211_hw_config) changed=0xffffffff. local->open_count=1
<0>===MHX4.1(ath5k_config) changed=0xffffffff. sc->power_level=0,conf->power_level=20 
<7>ath5k_hw_commit_eeprom_settings: ah->nf_thresh=-1, ee->ee_noise_floor_thr[ee_mode=0]=-54
<7>ath5k_hw_commit_eeprom_settings: ah->cca_thresh62=0x7f, ee->ee_thr_62[ee_mode=0]=0xf
<6>ath5k_hw_rfregs_init: Mode:0, freq=5000
<0>===MHX4.2(ath5k_config) 
<7>ath5k_hw_commit_eeprom_settings: ah->nf_thresh=-1, ee->ee_noise_floor_thr[ee_mode=0]=-54
<7>ath5k_hw_commit_eeprom_settings: ah->cca_thresh62=0x7f, ee->ee_thr_62[ee_mode=0]=0xf
<6>ath5k_hw_rfregs_init: Mode:0, freq=5000
<0>===MHX3.1(ieee80211_hw_config) changed=0xffffffff. local->open_count=1
<0>===MHX4.1(ath5k_config) changed=0xffffffff. sc->power_level=20,conf->power_level=20 
<7>ath5k_hw_commit_eeprom_settings: ah->nf_thresh=-1, ee->ee_noise_floor_thr[ee_mode=0]=-54
<7>ath5k_hw_commit_eeprom_settings: ah->cca_thresh62=0x7f, ee->ee_thr_62[ee_mode=0]=0xf
<6>ath5k_hw_rfregs_init: Mode:0, freq=5000
<6>device wlan0 entered promiscuous mode
<6>br-lan: topology change detected, propagating
<6>br-lan: port 2(wlan0) entering forwarding state
<0>===MHX3.1(ieee80211_hw_config) changed=0x00000040. local->open_count=2
<0>===MHX4.1(ath5k_config) changed=0x00000040. sc->power_level=20,conf->power_level=20 
<7>ath5k_hw_commit_eeprom_settings: ah->nf_thresh=-1, ee->ee_noise_floor_thr[ee_mode=0]=-54
<7>ath5k_hw_commit_eeprom_settings: ah->cca_thresh62=0x7f, ee->ee_thr_62[ee_mode=0]=0xf
<6>ath5k_hw_rfregs_init: Mode:0, freq=5470
<0>==MHX1.1(nl80211_set_wiphy)
<0>==MHX1.1(nl80211_set_wiphy)
<0>==MHX1.1(nl80211_set_wiphy)
<0>==MHX1.1(nl80211_set_wiphy)
<0>==MHX1.1(nl80211_set_wiphy)
<0>==MHX1.1(nl80211_set_wiphy)
<0>==MHX1.1(nl80211_set_wiphy)
<6>device wlan0 left promiscuous mode

After bootup and set txpower in commandline, the print is:

<0>==MHX1.1(nl80211_set_wiphy)
<0>==MHX1.2(nl80211_set_wiphy)
<0>==MHX1.3(nl80211_set_wiphy)
<0>==MHX2.1(ieee80211_set_tx_power). type=2, mbm=2000
<0>==MHX2.2(ieee80211_set_tx_power). type=2, mbm=2000
<0>==MHX2.3(ieee80211_set_tx_power). user_power_level=20
<0>===MHX3.1(ieee80211_hw_config) changed=0x00000020. local->open_count=2	// open_count!=0 so go ahead to 4.1. This really takes effects!!!
<0>===MHX4.1(ath5k_config) changed=0x00000020. sc->power_level=10,conf->power_level=20 
<0>===MHX4.2(ath5k_config) 
<0>==MHX1.4(nl80211_set_wiphy). type=2, mbm=2000, res=0

Move the "set txpower " command to the very end of enable_mac80211() solved the problem. Wait until the ieee80211_dataif_ops.ndo_open=ieee80211_open--->ieee80211_do_open(dev, true)---> local->open_count++; is finished. After moving it to last line, the log shows:

Dec 31 17:00:22 root: usb is adding in hotplug running 
Dec 31 17:00:22 root: usb is adding in hotplug running 
Dec 31 17:00:23 : resetting the transceiver...
Dec 31 17:00:24 : killall: mpci-led: no process killed
Dec 31 17:00:24 : FOUND HARDWARE version : "v1.0.0" 
Dec 31 17:00:25 : setting bwmode 1
Dec 31 17:00:25 mac80211_IPnDDL5800: Get mode = 0 freq = 5470 
Dec 31 17:00:25 mac80211 thresh: user setting thresh62 = 127, nfthresh = -1, nfcalmaxcca = -50.
Dec 31 17:00:25 mac80211 txpower: user setting is 30 the max can be set is 30 .
Dec 31 17:00:25 root: ===MHX: ifconfig:
Dec 31 17:00:25 : br-lan    Link encap:Ethernet  HWaddr 00:0F:92:04:BE:EB  
Dec 31 17:00:25 :           inet addr:192.168.168.2  Bcast:192.168.168.255  Mask:255.255.255.0
Dec 31 17:00:25 :           UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
Dec 31 17:00:25 :           RX packets:0 errors:0 dropped:0 overruns:0 frame:0
Dec 31 17:00:25 :           TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
Dec 31 17:00:25 :           collisions:0 txqueuelen:0 

Dec 31 17:00:25 :           RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
Dec 31 17:00:25 : eth0      Link encap:Ethernet  HWaddr 00:0F:92:04:BE:EB  
Dec 31 17:00:25 :           UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
Dec 31 17:00:25 :           RX packets:0 errors:0 dropped:0 overruns:0 frame:0
Dec 31 17:00:25 :           TX packets:5 errors:0 dropped:0 overruns:0 carrier:0
Dec 31 17:00:25 root: ===MHX: ifconfig -a:
Dec 31 17:00:25 :           TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
Dec 31 17:00:25 :           collisions:0 txqueuelen:0 
Dec 31 17:00:25 :           RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
Dec 31 17:00:25 : br-lan    Link encap:Ethernet  HWaddr 00:0F:92:04:BE:EB  
Dec 31 17:00:25 :           inet addr:192.168.168.2  Bcast:192.168.168.255  Mask:255.255.255.0
Dec 31 17:00:25 :           UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
Dec 31 17:00:25 :           RX packets:0 errors:0 dropped:0 overruns:0 frame:0
Dec 31 17:00:25 :           TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
Dec 31 17:00:25 :           collisions:0 txqueuelen:0 
Dec 31 17:00:25 :           RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
Dec 31 17:00:25 : eth0      Link encap:Ethernet  HWaddr 00:0F:92:04:BE:EB  
Dec 31 17:00:25 :           UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
Dec 31 17:00:25 :           RX packets:0 errors:0 dropped:0 overruns:0 frame:0
Dec 31 17:00:25 :           TX packets:5 errors:0 dropped:0 overruns:0 carrier:0
Dec 31 17:00:25 root: ===MHX: check wiphy:
Dec 31 17:00:25 :           RX packets:0 errors:0 dropped:0 overruns:0 frame:0
Dec 31 17:00:25 :           TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
Dec 31 17:00:25 :           collisions:0 txqueuelen:0 
Dec 31 17:00:25 :           RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
Dec 31 17:00:25 : imq0      Link encap:UNSPEC  HWaddr 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  
Dec 31 17:00:25 :           NOARP  MTU:16000  Metric:1
Dec 31 17:00:25 :           RX packets:0 errors:0 dropped:0 overruns:0 frame:0
Dec 31 17:00:25 :           TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
Dec 31 17:00:25 :           collisions:0 txqueuelen:11000 
Dec 31 17:00:25 :           RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
Dec 31 17:00:25 : imq1      Link encap:UNSPEC  HWaddr 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  
Dec 31 17:00:25 :           NOARP  MTU:16000  Metric:1
Dec 31 17:00:25 :           RX packets:0 errors:0 dropped:0 overruns:0 frame:0
Dec 31 17:00:25 :           TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
Dec 31 17:00:25 :           collisions:0 txqueuelen:11000 
Dec 31 17:00:25 :           RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
Dec 31 17:00:25 : lo        Link encap:Local Loopback  
Dec 31 17:00:25 :           inet addr:127.0.0.1  Mask:255.0.0.0
Dec 31 17:00:25 :           UP LOOPBACK RUNNING  MTU:16436  Metric:1
Dec 31 17:00:25 :           RX packets:0 errors:0 dropped:0 overruns:0 frame:0
Dec 31 17:00:25 :           TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
Dec 31 17:00:25 :           collisions:0 txqueuelen:0 
Dec 31 17:00:25 :           RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
Dec 31 17:00:25 : teql0     Link encap:UNSPEC  HWaddr 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  
Dec 31 17:00:25 :           NOARP  MTU:1500  Metric:1
Dec 31 17:00:25 :           RX packets:0 errors:0 dropped:0 overruns:0 frame:0
Dec 31 17:00:25 :           TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
Dec 31 17:00:25 :           collisions:0 txqueuelen:100 
Dec 31 17:00:25 :           RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
Dec 31 17:00:25 : tunl0     Link encap:UNSPEC  HWaddr 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  
Dec 31 17:00:25 :           NOARP  MTU:1480  Metric:1
Dec 31 17:00:25 :           RX packets:0 errors:0 dropped:0 overruns:0 frame:0
Dec 31 17:00:25 :           TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
Dec 31 17:00:25 :           collisions:0 txqueuelen:0 
Dec 31 17:00:25 :           RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
Dec 31 17:00:25 : wlan0     Link encap:Ethernet  HWaddr 00:0F:92:FA:FA:72  
Dec 31 17:00:25 :           BROADCAST MULTICAST  MTU:1500  Metric:1
Dec 31 17:00:25 :           RX packets:0 errors:0 dropped:0 overruns:0 frame:0
Dec 31 17:00:25 :           TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
Dec 31 17:00:25 :           collisions:0 txqueuelen:1000 
Dec 31 17:00:25 :           RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
Dec 31 17:00:25 : drwxr-xr-x    2 root     root            0 Dec 31 17:00 .
Dec 31 17:00:25 : drwxr-xr-x   24 root     root            0 Dec 31 17:00 ..
Dec 31 17:00:25 : lrwxrwxrwx    1 root     root            0 Dec 31 17:00 phy0 -> ../../devices/pci0000:00/0000:00:13.0/
ieee80211/phy0
Dec 31 17:00:25 root: =======MHX(original set txpower place. ignore this useless set txpower!) set [wlan0] power to [200
0]
Dec 31 17:00:25 mhqos-hostapd: >>0.0.0.0 0.0.0.0 0 0.0.0.0 0.0.0.0 0 0 0
Dec 31 17:00:26 mhqos-hostapd: >>0.0.0.0 0.0.0.0 0 0.0.0.0 0.0.0.0 0 0 0
Dec 31 17:00:26 mhqos-hostapd: >>0.0.0.0 0.0.0.0 0 0.0.0.0 0.0.0.0 0 0 0
Dec 31 17:00:26 mhqos-hostapd: >>0.0.0.0 0.0.0.0 0 0.0.0.0 0.0.0.0 0 0 0
Dec 31 17:00:26 mhqos-hostapd: >>0.0.0.0 0.0.0.0 0 0.0.0.0 0.0.0.0 0 0 0
Dec 31 17:00:26 mhqos-hostapd: >>0.0.0.0 0.0.0.0 0 0.0.0.0 0.0.0.0 0 0 0
Dec 31 17:00:26 mhqos-hostapd: >>0.0.0.0 0.0.0.0 0 0.0.0.0 0.0.0.0 0 0 0
Dec 31 17:00:26 mhqos-hostapd: >>0.0.0.0 0.0.0.0 0 0.0.0.0 0.0.0.0 0 0 0
Dec 31 17:00:28 hostapd: wlan0: STA 00:0f:92:fa:fa:7f IEEE 802.11: authenticated
Dec 31 17:00:28 hostapd: wlan0: STA 00:0f:92:fa:fa:7f IEEE 802.11: associated (aid 1)
Dec 31 17:00:28 hostapd: wlan0: STA 00:0f:92:fa:fa:7f RADIUS: starting accounting session 0000001C-00000000
Dec 31 17:00:30 root: ===MHX: ifconfig:
Dec 31 17:00:30 : br-lan    Link encap:Ethernet  HWaddr 00:0F:92:04:BE:EB  
Dec 31 17:00:30 root: ===MHX: ifconfig -a:
Dec 31 17:00:30 :           inet addr:192.168.168.2  Bcast:192.168.168.255  Mask:255.255.255.0
Dec 31 17:00:30 :           UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
Dec 31 17:00:30 :           RX packets:1 errors:0 dropped:0 overruns:0 frame:0
Dec 31 17:00:30 :           TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
Dec 31 17:00:30 :           collisions:0 txqueuelen:0 
Dec 31 17:00:30 :           RX bytes:6 (6.0 B)  TX bytes:0 (0.0 B)
Dec 31 17:00:30 : eth0      Link encap:Ethernet  HWaddr 00:0F:92:04:BE:EB  
Dec 31 17:00:30 :           UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
Dec 31 17:00:30 :           RX packets:0 errors:0 dropped:0 overruns:0 frame:0
Dec 31 17:00:30 :           TX packets:9 errors:0 dropped:0 overruns:0 carrier:0
Dec 31 17:00:30 :           collisions:0 txqueuelen:1000 
Dec 31 17:00:30 :           RX bytes:0 (0.0 B)  TX bytes:436 (436.0 B)
Dec 31 17:00:30 :           Interrupt:4 
Dec 31 17:00:30 : lo        Link encap:Local Loopback  
Dec 31 17:00:30 :           inet addr:127.0.0.1  Mask:255.0.0.0
Dec 31 17:00:30 :           UP LOOPBACK RUNNING  MTU:16436  Metric:1
Dec 31 17:00:30 :           RX packets:0 errors:0 dropped:0 overruns:0 frame:0
Dec 31 17:00:30 :           TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
Dec 31 17:00:30 :           collisions:0 txqueuelen:0 
Dec 31 17:00:30 :           RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
Dec 31 17:00:30 : mon.wlan0 Link encap:UNSPEC  HWaddr 00-0F-92-FA-FA-72-00-00-00-00-00-00-00-00-00-00  
Dec 31 17:00:30 :           UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
Dec 31 17:00:30 :           RX packets:9 errors:0 dropped:0 overruns:0 frame:0
Dec 31 17:00:30 :           TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
Dec 31 17:00:30 :           collisions:0 txqueuelen:1000 
Dec 31 17:00:30 :           RX bytes:438 (438.0 B)  TX bytes:0 (0.0 B)
Dec 31 17:00:30 : wlan0     Link encap:Ethernet  HWaddr 00:0F:92:FA:FA:72  
Dec 31 17:00:30 :           UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
Dec 31 17:00:30 :           RX packets:1 errors:0 dropped:0 overruns:0 frame:0
Dec 31 17:00:30 :           TX packets:1 errors:0 dropped:0 overruns:0 carrier:0
Dec 31 17:00:30 :           collisions:0 txqueuelen:1000 
Dec 31 17:00:30 :           RX bytes:52 (52.0 B)  TX bytes:62 (62.0 B)
Dec 31 17:00:30 : br-lan    Link encap:Ethernet  HWaddr 00:0F:92:04:BE:EB  
Dec 31 17:00:30 :           inet addr:192.168.168.2  Bcast:192.168.168.255  Mask:255.255.255.0
Dec 31 17:00:30 :           UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
Dec 31 17:00:30 :           RX packets:1 errors:0 dropped:0 overruns:0 frame:0
Dec 31 17:00:30 :           TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
Dec 31 17:00:30 :           collisions:0 txqueuelen:0 
Dec 31 17:00:30 :           RX bytes:6 (6.0 B)  TX bytes:0 (0.0 B)
Dec 31 17:00:30 : eth0      Link encap:Ethernet  HWaddr 00:0F:92:04:BE:EB  
Dec 31 17:00:30 :           UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
Dec 31 17:00:30 :           RX packets:0 errors:0 dropped:0 overruns:0 frame:0
Dec 31 17:00:30 :           TX packets:9 errors:0 dropped:0 overruns:0 carrier:0
Dec 31 17:00:30 root: ===MHX: check wiphy:
Dec 31 17:00:30 :           RX packets:0 errors:0 dropped:0 overruns:0 frame:0
Dec 31 17:00:30 :           TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
Dec 31 17:00:30 :           collisions:0 txqueuelen:11000 
Dec 31 17:00:30 :           RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
Dec 31 17:00:30 : imq1      Link encap:UNSPEC  HWaddr 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  
Dec 31 17:00:30 :           NOARP  MTU:16000  Metric:1
Dec 31 17:00:30 :           RX packets:0 errors:0 dropped:0 overruns:0 frame:0
Dec 31 17:00:30 :           TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
Dec 31 17:00:30 :           collisions:0 txqueuelen:11000 
Dec 31 17:00:30 :           RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
Dec 31 17:00:30 : lo        Link encap:Local Loopback  
Dec 31 17:00:30 :           inet addr:127.0.0.1  Mask:255.0.0.0
Dec 31 17:00:30 :           UP LOOPBACK RUNNING  MTU:16436  Metric:1
Dec 31 17:00:30 :           RX packets:0 errors:0 dropped:0 overruns:0 frame:0
Dec 31 17:00:30 :           TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
Dec 31 17:00:30 :           collisions:0 txqueuelen:0 
Dec 31 17:00:30 :           RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
Dec 31 17:00:30 : mon.wlan0 Link encap:UNSPEC  HWaddr 00-0F-92-FA-FA-72-00-00-00-00-00-00-00-00-00-00  
Dec 31 17:00:30 :           UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
Dec 31 17:00:30 :           RX packets:9 errors:0 dropped:0 overruns:0 frame:0
Dec 31 17:00:30 :           TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
Dec 31 17:00:30 :           collisions:0 txqueuelen:1000 
Dec 31 17:00:30 :           RX bytes:438 (438.0 B)  TX bytes:0 (0.0 B)
Dec 31 17:00:30 : teql0     Link encap:UNSPEC  HWaddr 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  
Dec 31 17:00:30 :           NOARP  MTU:1500  Metric:1
Dec 31 17:00:30 :           RX packets:0 errors:0 dropped:0 overruns:0 frame:0
Dec 31 17:00:30 :           TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
Dec 31 17:00:30 :           collisions:0 txqueuelen:100 
Dec 31 17:00:30 :           RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
Dec 31 17:00:30 : tunl0     Link encap:UNSPEC  HWaddr 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  
Dec 31 17:00:30 :           NOARP  MTU:1480  Metric:1
Dec 31 17:00:30 :           RX packets:0 errors:0 dropped:0 overruns:0 frame:0
Dec 31 17:00:30 :           TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
Dec 31 17:00:30 :           collisions:0 txqueuelen:0 
Dec 31 17:00:30 :           RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
Dec 31 17:00:30 : wlan0     Link encap:Ethernet  HWaddr 00:0F:92:FA:FA:72  
Dec 31 17:00:30 :           UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
Dec 31 17:00:30 :           RX packets:1 errors:0 dropped:0 overruns:0 frame:0
Dec 31 17:00:30 :           TX packets:1 errors:0 dropped:0 overruns:0 carrier:0
Dec 31 17:00:30 :           collisions:0 txqueuelen:1000 
Dec 31 17:00:30 :           RX bytes:52 (52.0 B)  TX bytes:62 (62.0 B)
Dec 31 17:00:30 : drwxr-xr-x    2 root     root            0 Dec 31 17:00 .
Dec 31 17:00:30 : drwxr-xr-x   24 root     root            0 Dec 31 17:00 ..
Dec 31 17:00:30 : lrwxrwxrwx    1 root     root            0 Dec 31 17:00 phy0 -> ../../devices/pci0000:00/0000:00:13.0/
ieee80211/phy0
Dec 31 17:00:30 root: =======MHX (second time)set [wlan0] power to [2000]
Dec 31 17:00:30 : Setting up multicast rate
Dec 31 17:00:31 : Setting mcast rate 3
Dec 31 17:00:31 : Loading general configuration
Dec 31 17:00:31 root: DISABLED=1 MANAGEMENT_VLAN=vlan1
Dec 31 17:00:31 : Scanning interfaces in lan
Dec 31 17:00:35 crond[1466]: crond (busybox 1.15.3) started, log level 5
Dec 31 17:00:36 dropbear[1483]: Running in background
Dec 31 17:00:38 : soipd1 starting...
Dec 31 17:00:39 dnsmasq[1586]: started, version 2.52 cachesize 150
Dec 31 17:00:39 dnsmasq[1586]: compile time options: IPv6 GNU-getopt no-DBus no-I18N DHCP TFTP
Dec 31 17:00:39 dnsmasq[1586]: using local addresses only for domain lan
Dec 31 17:00:39 dnsmasq[1586]: no servers found in /tmp/resolv.conf.auto, will retry
Dec 31 17:00:39 dnsmasq[1586]: read /etc/hosts - 1 addresses
Dec 31 17:00:40 : Setting soip port 0x4e2b to rate 0x0, prate 0x4e2b00
Dec 31 17:00:40 Serial 1 Data Rate Control [phy0]: Set on: port[20011] and rate[0]
Dec 31 17:00:40 : killall: soipdmpci2: no process killed
Dec 31 17:00:40 soip2: Disable comport2, resume original inittab
Dec 31 17:00:40 init: reloading /etc/inittab

And the printk shows:

<6>usbcore: registered new interface driver ftdi_sio
<6>ftdi_sio: v1.5.0:USB FTDI Serial Converters Driver
<0>==MHX1.1(nl80211_set_wiphy)
<0>==MHX1.1(nl80211_set_wiphy)
<7>ath5k_hw_commit_eeprom_settings: ah->nf_thresh=-1, ee->ee_noise_floor_thr[ee_mode=0]=-54
<7>ath5k_hw_commit_eeprom_settings: ah->cca_thresh62=0x7f, ee->ee_thr_62[ee_mode=0]=0xf
<6>ath5k_hw_rfregs_init: Mode:0, freq=5000
<0>===MHX3.1(ieee80211_hw_config) changed=0xffffffff. local->open_count=1
<0>===MHX4.1(ath5k_config) changed=0xffffffff. sc->power_level=0,conf->power_level=30 
<7>ath5k_hw_commit_eeprom_settings: ah->nf_thresh=-1, ee->ee_noise_floor_thr[ee_mode=0]=-54
<7>ath5k_hw_commit_eeprom_settings: ah->cca_thresh62=0x7f, ee->ee_thr_62[ee_mode=0]=0xf
<6>ath5k_hw_rfregs_init: Mode:0, freq=5000
<0>===MHX4.2(ath5k_config) 
<7>ath5k_hw_commit_eeprom_settings: ah->nf_thresh=-1, ee->ee_noise_floor_thr[ee_mode=0]=-54
<7>ath5k_hw_commit_eeprom_settings: ah->cca_thresh62=0x7f, ee->ee_thr_62[ee_mode=0]=0xf
<6>ath5k_hw_rfregs_init: Mode:0, freq=5000
<0>===MHX3.1(ieee80211_hw_config) changed=0xffffffff. local->open_count=1
<0>===MHX4.1(ath5k_config) changed=0xffffffff. sc->power_level=30,conf->power_level=30 
<7>ath5k_hw_commit_eeprom_settings: ah->nf_thresh=-1, ee->ee_noise_floor_thr[ee_mode=0]=-54
<7>ath5k_hw_commit_eeprom_settings: ah->cca_thresh62=0x7f, ee->ee_thr_62[ee_mode=0]=0xf
<6>ath5k_hw_rfregs_init: Mode:0, freq=5000
<6>device wlan0 entered promiscuous mode
<6>br-lan: topology change detected, propagating
<6>br-lan: port 2(wlan0) entering forwarding state
<0>===MHX3.1(ieee80211_hw_config) changed=0x00000040. local->open_count=2
<0>===MHX4.1(ath5k_config) changed=0x00000040. sc->power_level=30,conf->power_level=30 
<7>ath5k_hw_commit_eeprom_settings: ah->nf_thresh=-1, ee->ee_noise_floor_thr[ee_mode=0]=-54
<7>ath5k_hw_commit_eeprom_settings: ah->cca_thresh62=0x7f, ee->ee_thr_62[ee_mode=0]=0xf
<6>ath5k_hw_rfregs_init: Mode:0, freq=5470
<0>==MHX1.1(nl80211_set_wiphy)
<0>==MHX1.1(nl80211_set_wiphy)
<0>==MHX1.1(nl80211_set_wiphy)
<0>==MHX1.1(nl80211_set_wiphy)
<0>==MHX1.1(nl80211_set_wiphy)
<0>==MHX1.1(nl80211_set_wiphy)
<0>==MHX1.1(nl80211_set_wiphy)
<6>device wlan0 left promiscuous mode
<6>br-lan: port 2(wlan0) entering disabled state
<6>device wlan0 entered promiscuous mode
<6>br-lan: topology change detected, propagating
<6>br-lan: port 2(wlan0) entering forwarding state
<0>==MHX1.1(nl80211_set_wiphy)
<0>==MHX1.1(nl80211_set_wiphy)
<0>==MHX1.2(nl80211_set_wiphy)
<0>==MHX1.3(nl80211_set_wiphy)
<0>==MHX2.1(ieee80211_set_tx_power). type=2, mbm=2000
<0>==MHX2.2(ieee80211_set_tx_power). type=2, mbm=2000
<0>==MHX2.3(ieee80211_set_tx_power). user_power_level=20
<0>===MHX3.1(ieee80211_hw_config) changed=0x00000020. local->open_count=2
<0>===MHX4.1(ath5k_config) changed=0x00000020. sc->power_level=30,conf->power_level=20 
<0>===MHX4.2(ath5k_config) 
<0>==MHX1.4(nl80211_set_wiphy). type=2, mbm=2000, res=0
<4>process `snmpd' is using obsolete setsockopt SO_BSDCOMPAT
<6>set rate=0x4e2b00
<7>ar71xx-wdt: enabling watchdog timer



Jun 21, 2017
Fast powercycle the unit can make the unit output 27dBm txpower. Slow powercycle (leaving power unplugged >3 seconds), makes a 22dBm txpower, and then fast power cycle the unit, then the txpower goes up to 27dBm.

IPnDDL2350                Frequencies:
                        * 2304 MHz [1] (30.0 dBm)
                        * 2309 MHz [2] (30.0 dBm)
                        * 2314 MHz [3] (30.0 dBm)
                        * 2319 MHz [4] (30.0 dBm)
                        * 2324 MHz [5] (30.0 dBm)
                        * 2329 MHz [6] (30.0 dBm)
                        * 2334 MHz [7] (30.0 dBm)
                        * 2339 MHz [8] (30.0 dBm)
                        * 2344 MHz [9] (30.0 dBm)
                        * 2349 MHz [10] (30.0 dBm)
                        * 2354 MHz [11] (30.0 dBm)
                        * 2359 MHz [12] (30.0 dBm)
                        * 2364 MHz [13] (30.0 dBm)

Test using 2314MHz(Channel 3).

Symptom: set 24Mbps@30dBm, use mac80211 driver we get 27dBm txpower while with art, we get 29dBm. Measured the TX led duty cycle, in 2 scenarios, the duty cycle are all about 80%. This means the mac80211 has lower txpower than art. The calibration table is like:


=========================Calibration Information=============
|     2304     |     2334     |     2359     |     0000     |
===============|==============|==============|==============|
|pdadc pwr(dBm)|pdadc pwr(dBm)|pdadc pwr(dBm)|pdadc pwr(dBm)|
| PD_Gain  4   |              |              |              |
|              |              |              |              |
|  029   0.00  |  025   0.00  |  034   0.00  |  000   0.00  |
|  040   1.50  |  041   2.00  |  049   2.00  |  000   0.00  |
|  058   3.50  |  053   3.50  |  066   3.50  |  000   0.00  |
|  082   5.50  |  079   5.50  |  090   5.50  |  000   0.00  |
|              |              |              |              |
| PD_Gain  0   |              |              |              |
|              |              |              |              |
|  007   4.00  |  008   4.00  |  009   4.00  |  000   0.00  |
|  015   8.00  |  018   8.50  |  018   9.00  |  000   0.00  |
|  031  13.00  |  034  13.00  |  036  13.50  |  000   0.00  |
|  053  17.00  |  058  17.00  |  057  17.00  |  000   0.00  |
|  090  20.50  |  086  20.00  |  093  20.50  |  000   0.00  |
|              |              |              |              |
|==============|==============|==============|==============|

Press any key to continue

====================Target Power Info========================
|     rate     |     2304     |     2334     |     2364     |
|==============|==============|==============|==============|
|     6-24     |     18.0     |     18.0     |     18.0     |
|      36      |     17.0     |     17.0     |     17.0     |
|      48      |     15.0     |     15.0     |     15.0     |
|      54      |     13.0     |     13.0     |     13.0     |
|==============|==============|==============|==============|

The possible explaination is that, mac80211 takes "Target Power Info" as a limit on txpower. But the art, eventhouth it uses the same calibration interpolation curve, but it just ignore the target power info and drive the txpower to whatever you set.


Jun 20, 2017
Test older version of IPnDDL2350 f/w to check the low txpower when cold reset issue. IPnDDL-v1_1_10-r1110.bin: same issue. IPnDDL-v1_1_10-r1097.bin : same issue.

The STA doesn't have this power issue. The power measured a bit lower than AP (1dBm) but no difference with cold or soft reboot.

Jun 19,2017
Use MINI-Circuits USB power meter.
Old nDDL2350 units, txpower=30dBm.
1. Cold reboot : txpower measured=21.8 dBm
2. reboot -f : txpower measured=26.9 dBm


On new nDDL2350 rf unit(MAC:000f92:faf978),txpower=21dBm.
1. Cold reboot : txpower measured=15.7dBm
2. reboot -f : txpower measured=15.6dBm


On new nDDL2350 rf unit(MAC:000f92:faf978),txpower=24dBm.
1. Cold reboot : txpower measured=15.8dBm
2. reboot -f : txpower measured=22dBm


On new nDDL2350 rf unit(MAC:000f92:faf978),txpower=27dBm.
1. Cold reboot : txpower measured=19.1dBm
2. reboot -f : txpower measured=24.6dBm

On new nDDL2350 rf unit(MAC:000f92:faf978),txpower=30dBm, with a fan as a very good heat sink.
						TX Rate		T/P M-->S
1. Cold reboot : txpower measured=19dBm		36M		4.45M
2. reboot -f : txpower measured=25.7dBm		24M		70K[3M after remove the measurement connector]

[NOTE: new and old using same f/w "v1.1.10" build "1126-2". Difference maybe because of the different cable loss.]


Set the fix rate 24Mbps, soft reboot has txpower of 27dBm(t/p=135K) while cold reboot has 21dBm(t/p=3.52M).

Use a pair of nDDL2450, set to 30dBm, auto rate. softreboot and cold reboot both get about 23dBm, rate=24M.

Jun 15, 2017
About the OLD nDDL products:
1. IPnDDL2350:
[Jeff@DENG0080-2 nDDL]$ cat CVS/Tag 
Tar71xx_IPnDDL
[Jeff@DENG0080-2 nDDL]$ cat CVS/Repository 
network/vip-2.0/openwrt

This generates IPnDDL2350 images like below:

define Image/Build/Profile/IPnDDL
        $(call PatchKernelGzip,pb42,board=PB42)
        mkimage -A mips -O linux -T kernel -a 0x80060000 -C gzip -e \
                0x80060000 \
                -n 'MIPS OpenWrt Linux-$(LINUX_VERSION)' \
                -d $(KDIR)/vmlinux-pb42.bin.gz \
                $(KDIR)/vmlinux-pb42.uImage; \
        $(call Image/Build/Template/$(fs_256k)/$(1),Microhard,IPnDDL,0x1000000,16M)
        cp $(BIN_DIR)/$(PROFILE)$(VERSION)$(REVISION).bin $(BIN_DIR)/IPnDDL2350-128$(VERSION)$(REVISION).bin
        cp $(BIN_DIR)/$(PROFILE)$(VERSION)$(REVISION).bin $(BIN_DIR)/IPnDDL2350-256$(VERSION)$(REVISION).bin
endef

define Image/Build/Profile/IPnDDLEXP
        $(call PatchKernelGzip,pb42,board=PB42)
        mkimage -A mips -O linux -T kernel -a 0x80060000 -C gzip -e \
                0x80060000 \
                -n 'MIPS OpenWrt Linux-$(LINUX_VERSION)' \
                -d $(KDIR)/vmlinux-pb42.bin.gz \
                $(KDIR)/vmlinux-pb42.uImage; \
        $(call Image/Build/Template/$(fs_256k)/$(1),Microhard,IPnDDL,0x1000000,16M)
        cp $(BIN_DIR)/$(PROFILE)$(VERSION)$(REVISION).bin $(BIN_DIR)/IPnDDL2350EXP$(VERSION)$(REVISION).bin
endef

2. IPnDDL2300M:
[Jeff@DENG0080-2 nDDL_step1]$ cat CVS/Tag 
Tar71xx_step1
[Jeff@DENG0080-2 nDDL_step1]$ cat CVS/Repository 
network/vip-2.0/openwrt

define Image/Build/Profile/IPnDDL
        $(call PatchKernelGzip,pb42,board=PB42)
        mkimage -A mips -O linux -T kernel -a 0x80060000 -C gzip -e \
                0x80060000 \
                -n 'MIPS OpenWrt Linux-$(LINUX_VERSION)' \
                -d $(KDIR)/vmlinux-pb42.bin.gz \
                $(KDIR)/vmlinux-pb42.uImage; \
        $(call Image/Build/Template/$(fs_256k)/$(1),Microhard,IPnDDL,0x1000000,16M)
endef

define Image/Build/Profile/IPnDDL2400M
        $(call PatchKernelGzip,pb42,board=PB42)
        mkimage -A mips -O linux -T kernel -a 0x80060000 -C gzip -e \
                0x80060000 \
                -n 'MIPS OpenWrt Linux-$(LINUX_VERSION)' \
                -d $(KDIR)/vmlinux-pb42.bin.gz \
                $(KDIR)/vmlinux-pb42.uImage; \
        $(call Image/Build/Template/$(fs_256k)/$(1),Microhard,IPnDDL,0x1000000,16M)
        cp $(BIN_DIR)/$(PROFILE)$(VERSION)$(REVISION).bin $(BIN_DIR)/IPnDDL2450-128$(VERSION)$(REVISION).bin
        cp $(BIN_DIR)/$(PROFILE)$(VERSION)$(REVISION).bin $(BIN_DIR)/IPnDDL2450-256$(VERSION)$(REVISION).bin
endef

define Image/Build/Profile/IPnDDL2450EXP
        $(call PatchKernelGzip,pb42,board=PB42)
        mkimage -A mips -O linux -T kernel -a 0x80060000 -C gzip -e \
                0x80060000 \
                -n 'MIPS OpenWrt Linux-$(LINUX_VERSION)' \
                -d $(KDIR)/vmlinux-pb42.bin.gz \
                $(KDIR)/vmlinux-pb42.uImage; \
        $(call Image/Build/Template/$(fs_256k)/$(1),Microhard,IPnDDL,0x1000000,16M)
endef

define Image/Build/Profile/IPnDDL2350F1
        $(call PatchKernelGzip,pb42,board=PB42)
        mkimage -A mips -O linux -T kernel -a 0x80060000 -C gzip -e \
                0x80060000 \
                -n 'MIPS OpenWrt Linux-$(LINUX_VERSION)' \
                -d $(KDIR)/vmlinux-pb42.bin.gz \
                $(KDIR)/vmlinux-pb42.uImage; \
        $(call Image/Build/Template/$(fs_256k)/$(1),Microhard,IPnDDL,0x1000000,16M)
        cp $(BIN_DIR)/$(PROFILE)$(VERSION)$(REVISION).bin $(BIN_DIR)/IPnDDL2350F1-128$(VERSION)$(REVISION).bin
        cp $(BIN_DIR)/$(PROFILE)$(VERSION)$(REVISION).bin $(BIN_DIR)/IPnDDL2350F1-256$(VERSION)$(REVISION).bin

define Image/Build/Profile/IPnDDL5800
        $(call PatchKernelGzip,pb42,board=PB42)
        mkimage -A mips -O linux -T kernel -a 0x80060000 -C gzip -e \
                0x80060000 \
                -n 'MIPS OpenWrt Linux-$(LINUX_VERSION)' \
                -d $(KDIR)/vmlinux-pb42.bin.gz \
                $(KDIR)/vmlinux-pb42.uImage; \
        $(call Image/Build/Template/$(fs_256k)/$(1),Microhard,IPnDDL,0x1000000,16M)
        cp $(BIN_DIR)/$(PROFILE)$(VERSION)$(REVISION).bin $(BIN_DIR)/IPnDDL5800-128$(VERSION)$(REVISION).bin
        cp $(BIN_DIR)/$(PROFILE)$(VERSION)$(REVISION).bin $(BIN_DIR)/IPnDDL5800-256$(VERSION)$(REVISION).bin
endef

define Image/Build/Profile/IPnDDL5800EXP
        $(call PatchKernelGzip,pb42,board=PB42)
        mkimage -A mips -O linux -T kernel -a 0x80060000 -C gzip -e \
                0x80060000 \
                -n 'MIPS OpenWrt Linux-$(LINUX_VERSION)' \
                -d $(KDIR)/vmlinux-pb42.bin.gz \
                $(KDIR)/vmlinux-pb42.uImage; \
        $(call Image/Build/Template/$(fs_256k)/$(1),Microhard,IPnDDL,0x1000000,16M)
endef

define Image/Build/Profile/IPnDDL2300M
        $(call PatchKernelGzip,pb42,board=PB42)
        mkimage -A mips -O linux -T kernel -a 0x80060000 -C gzip -e \
                0x80060000 \
                -n 'MIPS OpenWrt Linux-$(LINUX_VERSION)' \
                -d $(KDIR)/vmlinux-pb42.bin.gz \
                $(KDIR)/vmlinux-pb42.uImage; \
        $(call Image/Build/Template/$(fs_256k)/$(1),Microhard,IPnDDL,0x1000000,16M)
endef

Where can I find radio type?
root@IPnDDL:~# cat sys/class/ieee80211/phy0/device/subsystem_device 	Product		Source code branch	SKU
			0x3016						DDL2350F1	ar71xx_step1		MHS116020
			0x3015						DDL5800		ar71xx_step1		MHS116300,MHS116350,MHS116310,MHS116360
			0x3014						DDL2450		ar71xx_step1		MHS116100,MHS116150,MHS116110,MHS116160
			0x3012						DDL2350		ar71xx_IPnDDL		MHS116000,MHS116050,MHS116010,MHS116060


Jun 14, 2017

How to use the R&D FSL spectrum analyzer to measure power: 
1. Button "MEAS", then unselect "Full Size Diagram". This will show all info on the screen
2. Buttom "AMTP", then "Ref Level Offset" to set the "Offs" to the cable loss value. Just ignore the "Att" and "Ref" settings. 
3. Button "MEAS", then "CP, ACP MC-ACP" ---> "CP/ACP Standard" to select "WLAN 802.11A"
4. On the screen, the "Power" in the table shows the real power level of transmission. Sometimes, need to use button "TRACE" ---> "Clear White" and then "Max Hold" to refresh the "Power display"

Jun 12, 2017
Hany wants to change the synthesizer and keep the 2.4G band frequency to 2391MHz. 

For Nicole it is needed  to create 2 channel list in ath9k_init_device()--->ath9k_init_softc()--->ath9k_cmn_init_channels_rates_stepOne()--->ath9k_stepOne_init_channels()--->ieee80211_channel_to_frequency(). How to maintain 2 channel lists for 2.4G and 900M simultaneously? Because user switch between 2.4G and 900M. Looks impossible.

Another thought is keep driver 2.4GHz channel list. Add rf_band flag and frequency flag. In ath_set_channel(), keep 2.4GHz to 2391M untouched and reprogram the synthesizer.

struct ieee80211_channel {
        enum ieee80211_band band;
        u16 center_freq;
        u16 hw_value;
        u32 flags;
        int max_antenna_gain;
        int max_power;
        int max_reg_power;
        bool beacon_found;
        u32 orig_flags;
        int orig_mag, orig_mpwr;
        enum nl80211_dfs_state dfs_state;
        unsigned long dfs_state_entered;
        unsigned int dfs_cac_ms;
};

struct ath9k_channel {
	struct ieee80211_channel *chan;
	u16 channel;
	u16 channelFlags;
	s16 noisefloor;
};

/**
 * struct cfg80211_chan_def - channel definition
 * @chan: the (control) channel
 * @width: channel width
 * @center_freq1: center frequency of first segment
 * @center_freq2: center frequency of second segment
 *	(only with 80+80 MHz)
 */
struct cfg80211_chan_def {
	struct ieee80211_channel *chan;
	enum nl80211_chan_width width;
	u32 center_freq1;
	u32 center_freq2;
};

Jun 9, 2017
SYNTH_SETTING_900 - max(900 frequency) must be greater than 2390(channel0). SYNTH_SETTING_900 - 927 > 2390, SYNTH_SETTING_900>3317. Define SYNTH_SETTING_900=3330.

SYNTH_SETTING_1800 - max(1800 frequency) must be greater than 2390(channel0). SYNTH_SETTING_1800 - 1869 > 2390, SYNTH_SETTING_1800>4259. Define SYNTH_SETTING_900=4270.

Jun 7, 2017
Plan to add 900/1800 on pDDL_adaptive branch.
1. AP side, auto-adaptive
wireless.radio0.adaptive=1

dfs_get_valid_channel() in hostapd dfs.c generates the frequency list.

2. AP side, frequency list
wireless.radio0.adaptive=2
wireless.radio0.adap_list=2455 2460 2477

This will generate:
beacon_int=100
adap_list=2455 2460 2477
channel=1

In var/run/hostapd-phy0.conf by hostapd_prepare_device_config() in  lib/netifd/hostapd.sh [network/services/hostapd/files/netifd.sh.ddl2].

3. STA side, auto-adaptive
wireless.radio0.adaptive=1

Generates:
        beacon_int=100
        scan_freq=2477 2414 2422 2430 2438 2446 2454 2462 2470
by hostapd_add_scan_freq() in lib/netifd/hostapd.sh [network/services/hostapd/files/netifd.sh.ddl2].

4. STA side, frequency list
wireless.radio0.adaptive=2
wireless.radio0.adap_list=2455 2460 2400

Generates var/run/wpa_supplicant-wlan0.conf of
        beacon_int=100
        scan_freq=2477 2455 2460 2400
by hostapd_add_scan_freq() in lib/netifd/hostapd.sh [network/services/hostapd/files/netifd.sh.ddl2].

Jun 6, 2017
root@UserDevice:~# cat sys/module/ath9k/parameters/min_expected_tp 
5000
Add this setting on adaptive AP side to prevent hopping when the reported remote T/P is already higher than min_expected_tp. 
The STA reports every 1 second by default. But, when high traffic like 40Mbps is pusing from AP to STA, the delay of report can be as much as 6 to 8 seconds as observed. 

Start to use 900/1800 on adaptive branch.

May 31, 2017
One symbol, no batter it is on carrier 900M, 1.8G or 2.4G, the rate is always 250K symbols per second. Each symbol takes constant 4uS to transfer. 

const struct mcs_group minstrel_mcs_groups[] = {
	MCS_GROUP(1, 0, 0),
	MCS_GROUP(2, 0, 0),
#if MINSTREL_MAX_STREAMS >= 3
	MCS_GROUP(3, 0, 0),
#endif

	MCS_GROUP(1, 1, 0),
	MCS_GROUP(2, 1, 0),
#if MINSTREL_MAX_STREAMS >= 3
	MCS_GROUP(3, 1, 0),
#endif

	MCS_GROUP(1, 0, 1),
	MCS_GROUP(2, 0, 1),
#if MINSTREL_MAX_STREAMS >= 3
	MCS_GROUP(3, 0, 1),
#endif

	MCS_GROUP(1, 1, 1),
	MCS_GROUP(2, 1, 1),
#if MINSTREL_MAX_STREAMS >= 3
	MCS_GROUP(3, 1, 1),
#endif

	/* must be last */
	CCK_GROUP
};

Only group 0 (MCS_GROUP(1, 0, 0), which means 1 stream, long GI, and ht20) and CCK_GROUP are supported on ar9331 pDDL, which are shown in debugfs rc_stats.  mi->groups[i].supported 

On pDDL, iw wlan0 set bitrates ht-mcs-2.4 0 1 6 command can limit the rates by setting the rate mask. On the reciver side, it is really observed that the packets are received MCS1 and MCS6 rates. NOTE: After setting this rate mask on a sation, the rc_stats always fixed to MCS7 and iw station dump always shows TX rate of MCS7, which are not usable any more.

May 30, 2017
In minstrel rate control, mp->update_interval = 100 defines the default update time of 100mS. Unit is mS. But the highest resolution of this is Jiffy [ time_after() ], which means the fastest update rate is 10mS.

May 29,2017
In package/network/services/hostapd/src/src/drivers/driver_nl80211.c, wpa_driver_nl80211_get_hw_feature_data(). So the rate info comes from inside the mac80211 driver.
How to enable 802.11b mode in pDDL:
1. ath9k_cmn_init_channels_rates_stepOne(): enable all ath9k_legacy_rates.
2. set_mandatory_flags_band()
After modifiying these, the AP side can set "option hwmode '11b'" and start ok. But the wpa_supplicant side can not use "11b", only "11ng" works [ sometimes 11b works too !]. However, one side forced to 11b is good enough. STA will follow AP to work in 11b mode.

Jason had a field distance test on 11b mode with ART program. The result is that, with same interference, the OFDM is much better than CCK(11b mode). So the 11b mode doesn't help at all. Don't even bothering the wifi driver to add that support.

May 26, 2017
In pDDL1800, in ath9k_hw_init_global_settings(). 

	BW(MHz)			chan->channelFlags		Comments
	8			0x00000002			CHANNEL_HALF
	4			0x00000004			CHANNEL_QUARTER
	2			0x00000044			CHANNEL_PHY_HALF | CHANNEL_QUARTER
	1			0x00000084			CHANNEL_PHY_QUARTER | CHANNEL_QUARTER

Field test of Nicole. 2.4GHz reached 9Mbps both directions with auto rate control. 920MHz with Auto rate control got 1.5MHz and not stable. With a fixed rate it got stable 4Mbps.

Shift the working freq to 899MHz and we can get 4Mbps with auto rate control and about 5Mbps with fixed rate. This channel is clean but still much lower than 2.4GHz

50000meter distance in 900MHz broke the radio link. Distance setting,5000m and 12000m makes difference in T/P so it works. 5000m got better T/P than 12000m. But 3000 got a horrible t/p.

Another symtom is that, when using Multicast or Broadcast, th T/P is as good as 4Mbps, far better than unicast with Auto rate control. Looks like the retry makes some difference. Reduce "sys/module/ath9k/parameters/ATH_MAX_SW_RETRIES" from 30 to 3 and I expect to see a better T/P because it is even closer with retry=0 in broadcast. But actually it got worse T/P than 30. This points to a defect rate control too. In broadcast, it uses a fixed rate. In unicast, it uses auto rate control. This is the key difference. With a bad rate control, the more retries, the better. I imagine that in Multi or Broad cast, eventhough the retry=0, but if they use AUTO rate, they still get bad t/p like unicast. So the key point is the rate control.

But if it blames to the rate control algorithm, it's weird that on 1800MHz and 2.4GHz Minstrel works very well. Why? Maybe because of the symbol length is different, 900MHz has a longer symbol length than 1.8G & 2.4GHz. Some code related to the symbol rate:
1. rc80211_minstrel_ht.c : 
/* Transmission time (nanoseconds) for a packet containing (syms) symbols */
#define MCS_SYMBOL_TIME(sgi, syms)					\
	(sgi ?								\
	  ((syms) * 18000 + 4000) / 5 :	/* syms * 3.6 us */		\
	  ((syms) * 1000) << 2		/* syms * 4 us */		\
	)

/* Transmit duration for the raw data part of an average sized packet */
#define MCS_DURATION(streams, sgi, bps) MCS_SYMBOL_TIME(sgi, MCS_NSYMS((streams) * (bps)))

2. ath9k/xmit.c:
#define SYMBOL_TIME(_ns)        ((_ns) << 2) /* ns * 4 us */
#define SYMBOL_TIME_HALFGI(_ns) (((_ns) * 18 + 4) / 5)  /* ns * 3.6 us */
#define TIME_SYMBOLS(t)         ((t) >> 2)
#define TIME_SYMBOLS_HALFGI(t)  (((t) * 5 - 4) / 18)
#define NUM_SYMBOLS_PER_USEC(_usec) (_usec >> 2)
#define NUM_SYMBOLS_PER_USEC_HALFGI(_usec) (((_usec*5)-4)/18)

ath_pkt_duration()

3. ath/ath9k/hw.c: ath9k_hw_computetxtime()

4. util.c : ieee80211_frame_duration().

But Hany said the symbol duration stuff are all the same for 900MHz and 2.4GHz. Only shifted frequency. The symbol duration only relates to SGI/LGI and bandwidth(8,4,2,1) and modulation. So there should be no timing issue.

Frame			Type		Subtype
BlockAckReq		Ctrl		8
BlockAck		Ctrl		9
AddBARequest		Mgmt		Action
AddBAResopnse		Mgmt		Action


May 25, 2017
Use pDDL924 F/W on a pDDL1800 H/W, set it to 900MHz mode and manually "echo 4231 > sys/module/rffc5071/parameters/lo_frequency". WiFi works well. This means the addon of pDDL1800 doesn't harm the pDDL924.

phy <phyname> set distance <distance>---> NL80211_ATTR_WIPHY_COVERAGE_CLASS---->drv_set_coverage_class()--->ath9k_set_coverage_class()----> ath_hw *ah->coverage_class = coverage_class--->        
	/* As defined by IEEE 802.11-2007 17.3.8.6 */
        slottime += 3 * ah->coverage_class;
        acktimeout = slottime + sifstime + ack_offset;
        ctstimeout = acktimeout;
ath9k_hw_set_sifs_time(),ath9k_hw_setslottime(),ath9k_hw_set_ack_timeout(),ath9k_hw_set_cts_timeout().

May 24,2017
Tweak pDDL1800. The bandwidth control in both ART and WiFi are wrong. When set to 8MHz@1840MHz, the output is 90MHz wide @1840MHz.

Inside u-boot, there're special code for different PRODUCTMODE. We add a new PRODUCTMODE=4 so that we need to change u-boot code. Especially the I2C and SPI GPIO lines direcion initialization is done in uboot. Not all in kernel.

When the rffc5071 is not programmed, the output of it is a 100MHz wide signal. 

May 5, 2017
"iw phy <phyname> set ccathresh <is2GHz 0|1> <CCA sensitivity value>" command use ath9k_set_ccapwr_thresh() to set AR_CCA_B0 registers.
While:
sys/kernel/debug/ieee80211/phy0/ath9k/cca_ctrl
sys/kernel/debug/ieee80211/phy0/ath9k/cca_phy
set AR_PHY_CCA_0 and AR_PHY_CCA_CTRL_0 registers.

May 4, 2017
When apply high interference to AP, the AP can't finish the CSA. Normal CSL finish is like:
1493236794.309252: DFS waiting channel switch event

1493236795.187707: nl80211: Event message available
1493236795.187878: nl80211: Drv Event 88 (NL80211_CMD_CH_SWITCH_NOTIFY) received for wlan0
1493236795.187940: nl80211: Channel switch event
1493236795.188015: wlan0: Event CH_SWITCH (41) received
1493236795.188149: 1493236795.188165: wlan0: IEEE 802.11 driver had channel switch: freq=2430, ht=1, offset=0, width=1, cf1=2430, cf2=0
1493236795.188485: wlan0: AP-CSA-FINISHED freq=2430

But when high interference on AP, after "DFS waiting channel switch event", the NL80211_CMD_CH_SWITCH_NOTIFY can not be received even after 6 seconds.

April 28,2017
In normal condition without -d debug flag with hostapd command line, the connection is very fast.
2/4 and 4/4 received from STA on hostapd side are seen on the br-lan. tcpdump -i br-lan -env on AP side can see the 2/4 and 4/4 as below:
13:45:14.618957 00:0f:92:fa:80:82 > 00:0f:92:fa:98:b8, ethertype EAPOL (0x888e), length 135: EAPOL key (3) v1, len 117
13:45:14.630147 00:0f:92:fa:80:82 > 00:0f:92:fa:98:b8, ethertype EAPOL (0x888e), length 113: EAPOL key (3) v1, len 95
The interval of them is about 12mS to 22mS.

On the STA side:
root@UserDevice:~# tcpdump -i wlan0 -env
tcpdump: WARNING: wlan0: no IPv4 address assigned
tcpdump: listening on wlan0, link-type EN10MB (Ethernet), capture size 65535 bytes
13:48:28.632933 00:0f:92:fa:98:b8 > 00:0f:92:fa:80:82, ethertype EAPOL (0x888e), length 113: EAPOL key (3) v2, len 95	// 1/4
13:48:28.634331 00:0f:92:fa:80:82 > 00:0f:92:fa:98:b8, ethertype EAPOL (0x888e), length 135: EAPOL key (3) v1, len 117	// 2/4
13:48:28.643435 00:0f:92:fa:98:b8 > 00:0f:92:fa:80:82, ethertype EAPOL (0x888e), length 169: EAPOL key (3) v2, len 151	// 3/4
13:48:28.644731 00:0f:92:fa:80:82 > 00:0f:92:fa:98:b8, ethertype EAPOL (0x888e), length 113: EAPOL key (3) v1, len 95	// 4/4
13:48:28.649680 00:0f:92:04:0f:59 > 01:00:5e:00:00:01, ethertype IPv4 (0x0800), length 46: (tos 0xc0, ttl 1, id 0, offset 
0, flags [DF], proto IGMP (2), length 32, options (RA))    0.0.0.0 > 224.0.0.1: igmp query v2

On STA's br-lan, we can only see the 1/4 and 3/4.
root@UserDevice:~# tcpdump -i br-lan -env | grep EAPOL
tcpdump: listening on br-lan, link-type EN10MB (Ethernet), capture size 65535 bytes
13:55:03.429681 00:0f:92:fa:98:b8 > 00:0f:92:fa:80:82, ethertype EAPOL (0x888e), length 113: EAPOL key (3) v2, len 95
13:55:03.459171 00:0f:92:fa:98:b8 > 00:0f:92:fa:80:82, ethertype EAPOL (0x888e), length 169: EAPOL key (3) v2, len 151


An important notice is that, the same command line ""/usr/sbin/hostapd -P /var/run/wifi-phy0.pid /var/run/hostapd-phy0.conf -t -dd". If this command line is started on the serial console, it is very hard to connect because the 4-way handshake is very hard to finish. But, exactly the same command line, if started in a telnet console, the connection starts 100% successfully. This means 1.the hostapd is very sensitive to timing. In this test the wpa_supplicant is in normal background run; 2.The serial driver print wpa debug info takes too much time. If in debug mode, use telnet console. That debug print will be much faster so that the hostapd timing is not harmed.

April 24, 2017
hostapd EAPOL 1/4 timer looks not accurate: timeout should be 948mS but actually much shorter:

1492639808.434823: 1492639808.434839: wlan0: STA 00:0f:92:fa:80:82 WPA: sending 1/4 msg of 4-Way Handshake
1492639808.434882: WPA: Send EAPOL(version=2 secure=0 mic=0 ack=1 install=0 pairwise=1 kde_len=0 keyidx=0 encr=0)
1492639808.435249: WPA: Use EAPOL-Key timeout of 948 ms (retry counter 4)
1492639808.435452: wlan0: Event EAPOL_TX_STATUS (40) received
1492639808.435504: IEEE 802.1X: 00:0f:92:fa:80:82 TX status - version=2 type=3 length=95 - ack=0
1492639808.435591: WPA: EAPOL-Key TX status for STA 00:0f:92:fa:80:82 ack=0
1492639808.435745: 1492639808.435761: wlan0: STA 00:0f:92:fa:80:82 IEEE 802.1X: did not Ack EAPOL-Key frame (broadcas
t index=104)
1492639808.785763: 1492639808.785781: wlan0: STA 00:0f:92:fa:80:82 WPA: EAPOL-Key timeout	//about 350mS
1492639808.785884: WPA: 00:0f:92:fa:80:82 WPA_PTK entering state PTKSTART


1492639808.786015: 1492639808.786030: wlan0: STA 00:0f:92:fa:80:82 WPA: sending 1/4 msg of 4-Way Handshake
1492639808.786073: WPA: Send EAPOL(version=2 secure=0 mic=0 ack=1 install=0 pairwise=1 kde_len=0 keyidx=0 encr=0)
1492639808.786323: WPA: Use EAPOL-Key timeout of 948 ms (retry counter 5)
1492639808.788380: wlan0: Event EAPOL_TX_STATUS (40) received
1492639808.788446: IEEE 802.1X: 00:0f:92:fa:80:82 TX status - version=2 type=3 length=95 - ack=0
1492639808.788563: WPA: EAPOL-Key TX status for STA 00:0f:92:fa:80:82 ack=0
1492639808.788719: 1492639808.788734: wlan0: STA 00:0f:92:fa:80:82 IEEE 802.1X: did not Ack EAPOL-Key frame (broadcas
t index=104)
1492639809.384110: 1492639809.384132: wlan0: STA 00:0f:92:fa:80:82 WPA: EAPOL-Key timeout	//about 600mS
1492639809.384243: WPA: 00:0f:92:fa:80:82 WPA_PTK entering state PTKSTART


1492639809.384375: 1492639809.384389: wlan0: STA 00:0f:92:fa:80:82 WPA: sending 1/4 msg of 4-Way Handshake
1492639809.384432: WPA: Send EAPOL(version=2 secure=0 mic=0 ack=1 install=0 pairwise=1 kde_len=0 keyidx=0 encr=0)
1492639809.384771: WPA: Use EAPOL-Key timeout of 948 ms (retry counter 6)
1492639809.386200: wlan0: Event EAPOL_TX_STATUS (40) received
1492639809.386266: IEEE 802.1X: 00:0f:92:fa:80:82 TX status - version=2 type=3 length=95 - ack=0
1492639809.386355: WPA: EAPOL-Key TX status for STA 00:0f:92:fa:80:82 ack=0
1492639809.386508: 1492639809.386525: wlan0: STA 00:0f:92:fa:80:82 IEEE 802.1X: did not Ack EAPOL-Key frame (broadcas
t index=104)
1492639809.734719: 1492639809.734736: wlan0: STA 00:0f:92:fa:80:82 WPA: EAPOL-Key timeout	//about 350mS

Increase eapol_key_timeout_first and eapol_key_timeout_subseq can make the timeout longer but this is not the root cause. In debug mode, it is still hard to connect.

Dig into this issue, wpa_driver_nl80211_handle_eapol_tx_status() prints the acked=0;


1492644212.885026: WPA: 00:0f:92:fa:80:82 WPA_PTK entering state PTKSTART
1492644212.885160: 1492644212.885175: wlan0: STA 00:0f:92:fa:80:82 WPA: sending 1/4 msg of 4-Way Handshake
1492644212.885220: WPA: Send EAPOL(version=2 secure=0 mic=0 ack=1 install=0 pairwise=1 kde_len=0 keyidx=0 encr=0)
1492644212.885738: WPA: Use EAPOL-Key timeout of 1948 ms (retry counter 2)
==MHX(wpa_driver_nl80211_handle_eapol_tx_status)1.0
==MHX(wpa_driver_nl80211_handle_eapol_tx_status)1.0.1
==MHX(wpa_driver_nl80211_handle_eapol_tx_status)1.0.2
==MHX(wpa_driver_nl80211_handle_eapol_tx_status)1.0.1
==MHX(wpa_driver_nl80211_handle_eapol_tx_status)1.0.3
==MHX(wpa_driver_nl80211_handle_eapol_tx_status)1.1 acked = 0
1492644212.886090: wlan0: Event EAPOL_TX_STATUS (40) received
1492644212.886139: IEEE 802.1X: 00:0f:92:fa:80:82 TX status - version=2 type=3 length=95 - ack=0
1492644212.886227: WPA: EAPOL-Key TX status for STA 00:0f:92:fa:80:82 ack=0
1492644212.886412: 1492644212.886427: wlan0: STA 00:0f:92:fa:80:82 IEEE 802.1X: did not Ack EAPOL-Key frame (broadcas
t index=3)
1492644213.235461: 1492644213.235482: wlan0: STA 00:0f:92:fa:80:82 WPA: EAPOL-Key timeout
1492644213.235591: WPA: 00:0f:92:fa:80:82 WPA_PTK entering state PTKSTART
1492644213.235725: 1492644213.235740: wlan0: STA 00:0f:92:fa:80:82 WPA: sending 1/4 msg of 4-Way Handshake
1492644213.235784: WPA: Send EAPOL(version=2 secure=0 mic=0 ack=1 install=0 pairwise=1 kde_len=0 keyidx=0 encr=0)
1492644213.236309: WPA: Use EAPOL-Key timeout of 1948 ms (retry counter 3)
==MHX(wpa_driver_nl80211_handle_eapol_tx_status)1.0
==MHX(wpa_driver_nl80211_handle_eapol_tx_status)1.0.1
==MHX(wpa_driver_nl80211_handle_eapol_tx_status)1.0.2
==MHX(wpa_driver_nl80211_handle_eapol_tx_status)1.0.1
==MHX(wpa_driver_nl80211_handle_eapol_tx_status)1.0.3
==MHX(wpa_driver_nl80211_handle_eapol_tx_status)1.1 acked = 0
1492644213.236662: wlan0: Event EAPOL_TX_STATUS (40) received
1492644213.236710: IEEE 802.1X: 00:0f:92:fa:80:82 TX status - version=2 type=3 length=95 - ack=0
1492644213.236799: WPA: EAPOL-Key TX status for STA 00:0f:92:fa:80:82 ack=0
1492644213.236983: 1492644213.236999: wlan0: STA 00:0f:92:fa:80:82 IEEE 802.1X: did not Ack EAPOL-Key frame (broadcas
t index=3)
1492644214.834759: 1492644214.834780: wlan0: STA 00:0f:92:fa:80:82 WPA: EAPOL-Key timeout
1492644214.834893: WPA: 00:0f:92:fa:80:82 WPA_PTK entering state PTKSTART
1492644214.835027: 1492644214.835042: wlan0: STA 00:0f:92:fa:80:82 WPA: sending 1/4 msg of 4-Way Handshake
1492644214.835086: WPA: Send EAPOL(version=2 secure=0 mic=0 ack=1 install=0 pairwise=1 kde_len=0 keyidx=0 encr=0)
1492644214.835476: WPA: Use EAPOL-Key timeout of 1948 ms (retry counter 4)
==MHX(wpa_driver_nl80211_handle_eapol_tx_status)1.0
==MHX(wpa_driver_nl80211_handle_eapol_tx_status)1.0.1
==MHX(wpa_driver_nl80211_handle_eapol_tx_status)1.0.2
==MHX(wpa_driver_nl80211_handle_eapol_tx_status)1.0.1
==MHX(wpa_driver_nl80211_handle_eapol_tx_status)1.0.3
==MHX(wpa_driver_nl80211_handle_eapol_tx_status)1.1 acked = 0
1492644214.837390: wlan0: Event EAPOL_TX_STATUS (40) received
1492644214.837440: IEEE 802.1X: 00:0f:92:fa:80:82 TX status - version=2 type=3 length=95 - ack=0
1492644214.837561: WPA: EAPOL-Key TX status for STA 00:0f:92:fa:80:82 ack=0
1492644214.837714: 1492644214.837728: wlan0: STA 00:0f:92:fa:80:82 IEEE 802.1X: did not Ack EAPOL-Key frame (broadcas
t index=3)
1492644215.184749: 1492644215.184770: wlan0: STA 00:0f:92:fa:80:82 WPA: EAPOL-Key timeout

Add debug print in ieee80211_subif_start_xmit() in if (unlikely(!multicast && skb->sk && skb_shinfo(skb)->tx_flags & SKBTX_WIFI_STATUS)) section. This section treats the socket packets with SO_WIFI_STATUS flag set by the hostapd. Start the wpa_supplicant from console without -d and start hostapd from console without -d. The connection is super fast and kmsg is like:

<6>[  130.740000] br-lan: port 3(wlan0) entered forwarding state
<7>[  131.340000] wlan0: Allocated STA 00:0f:92:fa:80:82
<7>[  131.340000] wlan0: moving STA 00:0f:92:fa:80:82 to state 2
<7>[  131.340000] wlan0: moving STA 00:0f:92:fa:80:82 to state 3
<7>[  131.340000] wlan0: Inserted STA 00:0f:92:fa:80:82
<6>[  131.350000] device wlan0.sta1 entered promiscuous mode
<6>[  131.350000] br-lan: port 4(wlan0.sta1) entered forwarding state
<6>[  131.350000] br-lan: port 4(wlan0.sta1) entered forwarding state
<0>[  131.380000] MHX(ieee80211_subif_start_xmit) 2.0 Socket SO_WIFI_STATUS [SKBTX_WIFI_STATUS] is set !!!!	//EAPOL 1/4
<0>[  131.380000] MHX2.1(ieee80211_subif_start_xmit) Socket SO_WIFI_STATUS is set. id=1. Set IEEE80211_TX_CTL_REQ_TX_STATUS flag.
<0>[  131.410000] MHX(ieee80211_subif_start_xmit) 2.0 Socket SO_WIFI_STATUS [SKBTX_WIFI_STATUS] is set !!!!	//EAPOL 3/4
<0>[  131.410000] MHX2.1(ieee80211_subif_start_xmit) Socket SO_WIFI_STATUS is set. id=1. Set IEEE80211_TX_CTL_REQ_TX_STATUS flag.
<7>[  131.410000] wlan0.sta1: moving STA 00:0f:92:fa:80:82 to state 4
<6>[  132.740000] br-lan: port 3(wlan0) entered forwarding state
<6>[  133.350000] br-lan: port 4(wlan0.sta1) entered forwarding state
<7>[  139.120000] wlan0.sta1: Open BA session requested for 00:0f:92:fa:80:82 tid 6
<7>[  139.120000] wlan0.sta1: activated addBA response timer on 00:0f:92:fa:80:82 tid 6
<7>[  139.120000] wlan0.sta1: switched off addBA timer for 00:0f:92:fa:80:82 tid 6
<7>[  139.120000] wlan0.sta1: Aggregation is on for 00:0f:92:fa:80:82 tid 6
<7>[  146.450000] wlan0.sta1: Open BA session requested for 00:0f:92:fa:80:82 tid 0
<7>[  146.450000] wlan0.sta1: activated addBA response timer on 00:0f:92:fa:80:82 tid 0
<7>[  146.450000] wlan0.sta1: switched off addBA timer for 00:0f:92:fa:80:82 tid 0

[Note] The kmsg on STA side doesn't show the "MHX(ieee80211_subif_start_xmit)" message, which means 2/4 and 4/4 are not sent the same path as 1/4 and 3/4. They are not sent by SO_WIFI_STATUS socket flag.

When a "-d" is added in hostapd command line, the kmsg of hostapd side is like:

<6>[  566.240000] br-lan: port 3(wlan0) entered forwarding state
<6>[  566.240000] br-lan: port 3(wlan0) entered forwarding state
<7>[  567.830000] wlan0: Allocated STA 00:0f:92:fa:80:82
<7>[  567.830000] wlan0: moving STA 00:0f:92:fa:80:82 to state 2
<7>[  567.830000] wlan0: moving STA 00:0f:92:fa:80:82 to state 3
<7>[  567.830000] wlan0: Inserted STA 00:0f:92:fa:80:82
<6>[  567.840000] device wlan0.sta1 entered promiscuous mode
<6>[  567.840000] br-lan: port 4(wlan0.sta1) entered forwarding state
<6>[  567.840000] br-lan: port 4(wlan0.sta1) entered forwarding state
<0>[  568.200000] MHX(ieee80211_subif_start_xmit) 2.0 Socket SO_WIFI_STATUS [SKBTX_WIFI_STATUS] is set !!!!
<0>[  568.200000] MHX2.1(ieee80211_subif_start_xmit) Socket SO_WIFI_STATUS is set. id=1. Set IEEE80211_TX_CTL_REQ_TX_STATUS flag.
<6>[  568.240000] br-lan: port 3(wlan0) entered forwarding state
<7>[  568.540000] wlan0.sta1: moving STA 00:0f:92:fa:80:82 to state 2
<7>[  568.540000] wlan0.sta1: moving STA 00:0f:92:fa:80:82 to state 1
<7>[  568.540000] wlan0.sta1: Removed STA 00:0f:92:fa:80:82
<7>[  568.540000] wlan0.sta1: Destroyed STA 00:0f:92:fa:80:82
<7>[  568.540000] wlan0: Allocated STA 00:0f:92:fa:80:82
<7>[  568.540000] wlan0: moving STA 00:0f:92:fa:80:82 to state 2
<7>[  568.540000] wlan0: moving STA 00:0f:92:fa:80:82 to state 3
<7>[  568.540000] wlan0: Inserted STA 00:0f:92:fa:80:82
<0>[  568.550000] MHX(ieee80211_subif_start_xmit) 2.0 Socket SO_WIFI_STATUS [SKBTX_WIFI_STATUS] is set !!!!
<0>[  568.550000] MHX2.1(ieee80211_subif_start_xmit) Socket SO_WIFI_STATUS is set. id=1. Set IEEE80211_TX_CTL_REQ_TX_STATUS flag.
<0>[  568.890000] MHX(ieee80211_subif_start_xmit) 2.0 Socket SO_WIFI_STATUS [SKBTX_WIFI_STATUS] is set !!!!
<0>[  568.890000] MHX2.1(ieee80211_subif_start_xmit) Socket SO_WIFI_STATUS is set. id=1. Set IEEE80211_TX_CTL_REQ_TX_STATUS flag.
<6>[  569.840000] br-lan: port 4(wlan0.sta1) entered forwarding state
<0>[  570.780000] MHX(ieee80211_subif_start_xmit) 2.0 Socket SO_WIFI_STATUS [SKBTX_WIFI_STATUS] is set !!!!
<0>[  570.780000] MHX2.1(ieee80211_subif_start_xmit) Socket SO_WIFI_STATUS is set. id=1. Set IEEE80211_TX_CTL_REQ_TX_STATUS flag.
<7>[  571.640000] wlan0.sta1: moving STA 00:0f:92:fa:80:82 to state 2
<7>[  571.640000] wlan0.sta1: moving STA 00:0f:92:fa:80:82 to state 1
<7>[  571.640000] wlan0.sta1: Removed STA 00:0f:92:fa:80:82
<7>[  571.640000] wlan0.sta1: Destroyed STA 00:0f:92:fa:80:82
<7>[  571.970000] wlan0: Allocated STA 00:0f:92:fa:80:82
<7>[  571.970000] wlan0: moving STA 00:0f:92:fa:80:82 to state 2
<7>[  571.970000] wlan0: moving STA 00:0f:92:fa:80:82 to state 3
<7>[  571.970000] wlan0: Inserted STA 00:0f:92:fa:80:82
<0>[  571.980000] MHX(ieee80211_subif_start_xmit) 2.0 Socket SO_WIFI_STATUS [SKBTX_WIFI_STATUS] is set !!!!
<0>[  571.980000] MHX2.1(ieee80211_subif_start_xmit) Socket SO_WIFI_STATUS is set. id=1. Set IEEE80211_TX_CTL_REQ_TX_STATUS flag.
<0>[  572.730000] MHX(ieee80211_subif_start_xmit) 2.0 Socket SO_WIFI_STATUS [SKBTX_WIFI_STATUS] is set !!!!
<0>[  572.730000] MHX2.1(ieee80211_subif_start_xmit) Socket SO_WIFI_STATUS is set. id=1. Set IEEE80211_TX_CTL_REQ_TX_STATUS flag.
<0>[  573.870000] MHX(ieee80211_subif_start_xmit) 2.0 Socket SO_WIFI_STATUS [SKBTX_WIFI_STATUS] is set !!!!
<0>[  573.870000] MHX2.1(ieee80211_subif_start_xmit) Socket SO_WIFI_STATUS is set. id=1. Set IEEE80211_TX_CTL_REQ_TX_STATUS flag.
<0>[  574.680000] MHX(ieee80211_subif_start_xmit) 2.0 Socket SO_WIFI_STATUS [SKBTX_WIFI_STATUS] is set !!!!
<0>[  574.680000] MHX2.1(ieee80211_subif_start_xmit) Socket SO_WIFI_STATUS is set. id=1. Set IEEE80211_TX_CTL_REQ_TX_STATUS flag.
<0>[  575.820000] MHX(ieee80211_subif_start_xmit) 2.0 Socket SO_WIFI_STATUS [SKBTX_WIFI_STATUS] is set !!!!
<0>[  575.820000] MHX2.1(ieee80211_subif_start_xmit) Socket SO_WIFI_STATUS is set. id=1. Set IEEE80211_TX_CTL_REQ_TX_STATUS flag.
<0>[  576.630000] MHX(ieee80211_subif_start_xmit) 2.0 Socket SO_WIFI_STATUS [SKBTX_WIFI_STATUS] is set !!!!
<0>[  576.630000] MHX2.1(ieee80211_subif_start_xmit) Socket SO_WIFI_STATUS is set. id=1. Set IEEE80211_TX_CTL_REQ_TX_STATUS flag.
<7>[  577.780000] wlan0.sta1: moving STA 00:0f:92:fa:80:82 to state 2
<7>[  577.780000] wlan0.sta1: moving STA 00:0f:92:fa:80:82 to state 1
<7>[  577.780000] wlan0.sta1: Removed STA 00:0f:92:fa:80:82
<7>[  577.780000] wlan0.sta1: Destroyed STA 00:0f:92:fa:80:82
<7>[  579.240000] wlan0: Allocated STA 00:0f:92:fa:80:82
<7>[  579.240000] wlan0: moving STA 00:0f:92:fa:80:82 to state 2
<7>[  579.240000] wlan0: moving STA 00:0f:92:fa:80:82 to state 3
<7>[  579.240000] wlan0: Inserted STA 00:0f:92:fa:80:82
<0>[  579.250000] MHX(ieee80211_subif_start_xmit) 2.0 Socket SO_WIFI_STATUS [SKBTX_WIFI_STATUS] is set !!!!
<0>[  579.250000] MHX2.1(ieee80211_subif_start_xmit) Socket SO_WIFI_STATUS is set. id=1. Set IEEE80211_TX_CTL_REQ_TX_STATUS flag.
<0>[  581.140000] MHX(ieee80211_subif_start_xmit) 2.0 Socket SO_WIFI_STATUS [SKBTX_WIFI_STATUS] is set !!!!
<0>[  581.140000] MHX2.1(ieee80211_subif_start_xmit) Socket SO_WIFI_STATUS is set. id=1. Set IEEE80211_TX_CTL_REQ_TX_STATUS flag.
<0>[  583.090000] MHX(ieee80211_subif_start_xmit) 2.0 Socket SO_WIFI_STATUS [SKBTX_WIFI_STATUS] is set !!!!
<0>[  583.090000] MHX2.1(ieee80211_subif_start_xmit) Socket SO_WIFI_STATUS is set. id=1. Set IEEE80211_TX_CTL_REQ_TX_STATUS flag.


This kmsg shows a STA state transition between 1/4 and 3/4, which is abnormal. But this is not caused by the insid driver but from hostapd, see the log below:

<0>[  304.460000] ==MHX5.0(ieee80211_del_station)
<6>[  305.440000] br-lan: port 3(wlan0) entered forwarding state
<6>[  305.440000] br-lan: port 3(wlan0) entered forwarding state
<0>[  307.350000] =MHX9.0(sta_info_destroy_addr_bss)
<7>[  307.350000] wlan0: Allocated STA 00:0f:92:fa:80:82
<7>[  307.350000] wlan0: moving STA 00:0f:92:fa:80:82 to state 2
<7>[  307.350000] wlan0: moving STA 00:0f:92:fa:80:82 to state 3
<7>[  307.350000] wlan0: Inserted STA 00:0f:92:fa:80:82
<6>[  307.370000] device wlan0.sta1 entered promiscuous mode
<6>[  307.370000] br-lan: port 4(wlan0.sta1) entered forwarding state
<6>[  307.370000] br-lan: port 4(wlan0.sta1) entered forwarding state
<6>[  307.440000] br-lan: port 3(wlan0) entered forwarding state
<0>[  307.730000] MHX 2.0(ieee80211_subif_start_xmit),skb: len=113,protocol=0x888e,priority=0, queue_mapping=2, pkt_type=0
<0>[  307.730000] MHX(ieee80211_subif_start_xmit) 2.0 Socket SO_WIFI_STATUS [SKBTX_WIFI_STATUS] is set !!!!
<0>[  307.730000] MHX2.1(ieee80211_subif_start_xmit) Socket SO_WIFI_STATUS is set. id=1. Set IEEE80211_TX_CTL_REQ_TX_STATUS flag.

<0>[  308.080000] =MHX9.0(sta_info_destroy_addr_bss)	//From hostapd ---> nl80211_del_station--->ieee80211_del_station--->sta_info_destroy_addr_bss.

<0>[  308.080000] ==MHX(__sta_info_destroy_part2)3.0
<7>[  308.080000] wlan0.sta1: moving STA 00:0f:92:fa:80:82 to state 2
<0>[  308.080000] ==MHX(__sta_info_destroy_part2)3.1. state=2
<7>[  308.080000] wlan0.sta1: moving STA 00:0f:92:fa:80:82 to state 1
<0>[  308.080000] ==MHX(__sta_info_destroy_part2)3.1. state=1
<7>[  308.080000] wlan0.sta1: Removed STA 00:0f:92:fa:80:82
<7>[  308.080000] wlan0.sta1: Destroyed STA 00:0f:92:fa:80:82
<7>[  308.080000] wlan0: Allocated STA 00:0f:92:fa:80:82
<7>[  308.080000] wlan0: moving STA 00:0f:92:fa:80:82 to state 2
<7>[  308.080000] wlan0: moving STA 00:0f:92:fa:80:82 to state 3
<7>[  308.080000] wlan0: Inserted STA 00:0f:92:fa:80:82
<0>[  308.090000] MHX 2.0(ieee80211_subif_start_xmit),skb: len=113,protocol=0x888e,priority=0, queue_mapping=2, pkt_type=0
<0>[  308.090000] MHX(ieee80211_subif_start_xmit) 2.0 Socket SO_WIFI_STATUS [SKBTX_WIFI_STATUS] is set !!!!
<0>[  308.090000] MHX2.1(ieee80211_subif_start_xmit) Socket SO_WIFI_STATUS is set. id=1. Set IEEE80211_TX_CTL_REQ_TX_STATUS flag.
<6>[  309.370000] br-lan: port 4(wlan0.sta1) entered forwarding state
<0>[  309.620000] MHX 2.0(ieee80211_subif_start_xmit),skb: len=113,protocol=0x888e,priority=0, queue_mapping=2, pkt_type=0
<0>[  309.620000] MHX(ieee80211_subif_start_xmit) 2.0 Socket SO_WIFI_STATUS [SKBTX_WIFI_STATUS] is set !!!!
<0>[  309.620000] MHX2.1(ieee80211_subif_start_xmit) Socket SO_WIFI_STATUS is set. id=1. Set IEEE80211_TX_CTL_REQ_TX_STATUS flag.
<0>[  310.060000] =MHX9.0(sta_info_destroy_addr_bss)
<0>[  310.060000] ==MHX(__sta_info_destroy_part2)3.0
<7>[  310.060000] wlan0.sta1: moving STA 00:0f:92:fa:80:82 to state 2
<0>[  310.060000] ==MHX(__sta_info_destroy_part2)3.1. state=2
<7>[  310.060000] wlan0.sta1: moving STA 00:0f:92:fa:80:82 to state 1

So the root cause is still in "==MHX(wpa_driver_nl80211_handle_eapol_tx_status)1.1 acked = 0", i.e., the STA doesn't ACK the 1/4.

April 21,2017
MySQL root password:mhardcorp;Ubuntu Vm root:qazwsx; espocrm administrator:admin/microhard.


April 20,2017
"inactive time" in "iw station dump" is not countable when monitoring the connection. When the connection is not symetric, STA senses a connection loss [not receiving data] but AP may be able to receive data sent from the STA. In this case, AP doesn't realize the connection is lost because the "inactive time" is refreshed by the incoming packets. Only nullfunc poll is a secure way to detect connection loss.

April 12,2017
wireless.radio0.connection_idle_time=10, this should be bigger than beacon interval. 
During normal work. STA ieee80211_sta_rx_notify() triggers ieee80211_sta_reset_conn_monitor() for every received packet. If the STA can not receive a packet in (wireless.radio0.connection_idle_time), then the poll is started. So (wireless.radio0.connection_idle_time) should be longer to not to initiate a poll in normal mode.

Aprl 11 log has wrong comments. the normal probe is 1S just because ieee80211_reset_ap_probe() uses round_jiffies_up(jiffies + IEEE80211_CONNECTION_IDLE_TIME) and round the 50mS to 1S, not 50*20. This is a log with:
wireless.radio0.probe_wait_time=1
wireless.radio0.beacon_loss_count=50000
wireless.radio0.connection_idle_time=15
wireless.radio0.max_nullfunc_tries=2


<0>[  329.020000] =MHX1.6(ieee80211_sta_conn_mon_timer)
<0>[  329.020000] =MHX1.6.1(ieee80211_sta_conn_mon_timer)
<0>[  329.020000] =MHX1.4(ieee80211_send_nullfunc)						// normal probe is 150ms * 50 = 7.5S, round up to 8S
<0>[  329.020000] ==MHX1.5(ieee80211_sta_tx_notify) sdata->u.mgd.probe_send_count=1. ack=1
<0>[  329.020000] ==MHX1.2(ieee80211_sta_reset_conn_monitor) sdata->u.mgd.probe_send_count=0
<0>[  329.020000] ==MHX1.2.2(ieee80211_sta_reset_conn_monitor) Short expire[IEEE80211_CONNECTION_IDLE_TIME=15]
<0>[  329.020000] =MHX1.7(ieee80211_reset_ap_probe), reseting beacon timer and re-mod conn timer to seconds.


<0>[  337.020000] =MHX1.6(ieee80211_sta_conn_mon_timer)
<0>[  337.020000] =MHX1.6.1(ieee80211_sta_conn_mon_timer)
<0>[  337.020000] =MHX1.4(ieee80211_send_nullfunc)						// normal probe is 150ms * 50 = 7.5S, round up to 8S
<0>[  337.020000] ==MHX1.5(ieee80211_sta_tx_notify) sdata->u.mgd.probe_send_count=1. ack=1
<0>[  337.020000] ==MHX1.2(ieee80211_sta_reset_conn_monitor) sdata->u.mgd.probe_send_count=0
<0>[  337.020000] ==MHX1.2.2(ieee80211_sta_reset_conn_monitor) Short expire[IEEE80211_CONNECTION_IDLE_TIME=15]
<0>[  337.020000] =MHX1.7(ieee80211_reset_ap_probe), reseting beacon timer and re-mod conn timer to seconds.



<0>[  345.020000] =MHX1.6(ieee80211_sta_conn_mon_timer)
<0>[  345.020000] =MHX1.6.1(ieee80211_sta_conn_mon_timer)
<0>[  345.020000] =MHX1.4(ieee80211_send_nullfunc)						// normal probe is 150ms * 50 = 7.5S, round up to 8S
<0>[  345.020000] ==MHX1.5(ieee80211_sta_tx_notify) sdata->u.mgd.probe_send_count=1. ack=1
<0>[  345.020000] ==MHX1.2(ieee80211_sta_reset_conn_monitor) sdata->u.mgd.probe_send_count=0
<0>[  345.020000] ==MHX1.2.2(ieee80211_sta_reset_conn_monitor) Short expire[IEEE80211_CONNECTION_IDLE_TIME=15]
<0>[  345.020000] =MHX1.7(ieee80211_reset_ap_probe), reseting beacon timer and re-mod conn timer to seconds.



<0>[  353.020000] =MHX1.6(ieee80211_sta_conn_mon_timer)
<0>[  353.020000] =MHX1.6.1(ieee80211_sta_conn_mon_timer)
<0>[  353.020000] =MHX1.4(ieee80211_send_nullfunc)						// Fast mode, probe every 150mS.
<0>[  353.020000] ==MHX1.5(ieee80211_sta_tx_notify) sdata->u.mgd.probe_send_count=1. ack=0
<7>[  353.020000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 1/2
<0>[  353.020000] =MHX1.4(ieee80211_send_nullfunc)						
<0>[  353.020000] ==MHX1.5(ieee80211_sta_tx_notify) sdata->u.mgd.probe_send_count=2. ack=0
<7>[  353.020000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[  353.020000] (ieee80211_sta_connection_lost) Connection lost reason=4. Do STA side CSA.
<0>[  353.020000] (ieee80211_sta_connection_lost) Hopping to 2414. Total:19
<0>[  353.020000] =MHX1.7(ieee80211_reset_ap_probe), reseting beacon timer and re-mod conn timer to seconds.
<0>[  353.030000] ==MHX1.2(ieee80211_sta_reset_conn_monitor) sdata->u.mgd.probe_send_count=0
<0>[  353.030000] ==MHX1.2.2(ieee80211_sta_reset_conn_monitor) Short expire[IEEE80211_CONNECTION_IDLE_TIME=15]
<0>[  353.180000] =MHX1.6(ieee80211_sta_conn_mon_timer)
<0>[  353.180000] =MHX1.6.1(ieee80211_sta_conn_mon_timer)
<0>[  353.180000] =MHX1.4(ieee80211_send_nullfunc)						// Fast mode, probe every 150mS.
<0>[  353.180000] ==MHX1.5(ieee80211_sta_tx_notify) sdata->u.mgd.probe_send_count=1. ack=0
<7>[  353.180000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 1/2
<0>[  353.180000] =MHX1.4(ieee80211_send_nullfunc)
<0>[  353.180000] ==MHX1.5(ieee80211_sta_tx_notify) sdata->u.mgd.probe_send_count=2. ack=0
<7>[  353.180000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[  353.180000] (ieee80211_sta_connection_lost) Connection lost reason=4. Do STA side CSA.
<0>[  353.180000] (ieee80211_sta_connection_lost) Hopping to 2418. Total:19
<0>[  353.180000] =MHX1.7(ieee80211_reset_ap_probe), reseting beacon timer and re-mod conn timer to seconds.
<0>[  353.190000] ==MHX1.2(ieee80211_sta_reset_conn_monitor) sdata->u.mgd.probe_send_count=0
<0>[  353.190000] ==MHX1.2.2(ieee80211_sta_reset_conn_monitor) Short expire[IEEE80211_CONNECTION_IDLE_TIME=15]
<0>[  353.340000] =MHX1.6(ieee80211_sta_conn_mon_timer)
<0>[  353.340000] =MHX1.6.1(ieee80211_sta_conn_mon_timer)
<0>[  353.340000] =MHX1.4(ieee80211_send_nullfunc)						// Fast mode, probe every 150mS.
<0>[  353.340000] ==MHX1.5(ieee80211_sta_tx_notify) sdata->u.mgd.probe_send_count=1. ack=0
<7>[  353.340000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 1/2
<0>[  353.340000] =MHX1.4(ieee80211_send_nullfunc)
<0>[  353.340000] ==MHX1.5(ieee80211_sta_tx_notify) sdata->u.mgd.probe_send_count=2. ack=0
<7>[  353.340000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[  353.340000] (ieee80211_sta_connection_lost) Connection lost reason=4. Do STA side CSA.
<0>[  353.340000] (ieee80211_sta_connection_lost) Hopping to 2421. Total:19
<0>[  353.340000] =MHX1.7(ieee80211_reset_ap_probe), reseting beacon timer and re-mod conn timer to seconds.
<0>[  353.350000] ==MHX1.2(ieee80211_sta_reset_conn_monitor) sdata->u.mgd.probe_send_count=0
<0>[  353.350000] ==MHX1.2.2(ieee80211_sta_reset_conn_monitor) Short expire[IEEE80211_CONNECTION_IDLE_TIME=15]
<0>[  353.500000] =MHX1.6(ieee80211_sta_conn_mon_timer)
<0>[  353.500000] =MHX1.6.1(ieee80211_sta_conn_mon_timer)
<0>[  353.500000] =MHX1.4(ieee80211_send_nullfunc)
<0>[  353.500000] ==MHX1.5(ieee80211_sta_tx_notify) sdata->u.mgd.probe_send_count=1. ack=0
<7>[  353.500000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 1/2
<0>[  353.500000] =MHX1.4(ieee80211_send_nullfunc)
<0>[  353.500000] ==MHX1.5(ieee80211_sta_tx_notify) sdata->u.mgd.probe_send_count=2. ack=0
<7>[  353.500000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[  353.500000] (ieee80211_sta_connection_lost) Connection lost reason=4. Do STA side CSA.
<0>[  353.500000] (ieee80211_sta_connection_lost) Hopping to 2425. Total:19
<0>[  353.500000] =MHX1.7(ieee80211_reset_ap_probe), reseting beacon timer and re-mod conn timer to seconds.
<0>[  353.510000] ==MHX1.2(ieee80211_sta_reset_conn_monitor) sdata->u.mgd.probe_send_count=0
<0>[  353.510000] ==MHX1.2.2(ieee80211_sta_reset_conn_monitor) Short expire[IEEE80211_CONNECTION_IDLE_TIME=15]
<0>[  353.660000] =MHX1.6(ieee80211_sta_conn_mon_timer)
<0>[  353.660000] =MHX1.6.1(ieee80211_sta_conn_mon_timer)
<0>[  353.660000] =MHX1.4(ieee80211_send_nullfunc)
<0>[  353.660000] ==MHX1.5(ieee80211_sta_tx_notify) sdata->u.mgd.probe_send_count=1. ack=0
<7>[  353.660000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 1/2
<0>[  353.660000] =MHX1.4(ieee80211_send_nullfunc)
<0>[  353.660000] ==MHX1.5(ieee80211_sta_tx_notify) sdata->u.mgd.probe_send_count=2. ack=0
<7>[  353.660000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[  353.660000] (ieee80211_sta_connection_lost) Connection lost reason=4. Do STA side CSA.
<0>[  353.660000] (ieee80211_sta_connection_lost) Hopping to 2429. Total:19
<0>[  353.660000] =MHX1.7(ieee80211_reset_ap_probe), reseting beacon timer and re-mod conn timer to seconds.
<0>[  353.670000] ==MHX1.2(ieee80211_sta_reset_conn_monitor) sdata->u.mgd.probe_send_count=0
<0>[  353.670000] ==MHX1.2.2(ieee80211_sta_reset_conn_monitor) Short expire[IEEE80211_CONNECTION_IDLE_TIME=15]
<0>[  353.820000] =MHX1.6(ieee80211_sta_conn_mon_timer)
<0>[  353.820000] =MHX1.6.1(ieee80211_sta_conn_mon_timer)
<0>[  353.820000] =MHX1.4(ieee80211_send_nullfunc)
<0>[  353.820000] ==MHX1.5(ieee80211_sta_tx_notify) sdata->u.mgd.probe_send_count=1. ack=0
<7>[  353.820000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 1/2
<0>[  353.820000] =MHX1.4(ieee80211_send_nullfunc)
<0>[  353.820000] ==MHX1.5(ieee80211_sta_tx_notify) sdata->u.mgd.probe_send_count=2. ack=0
<7>[  353.820000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[  353.820000] (ieee80211_sta_connection_lost) Connection lost reason=4. Do STA side CSA.
<0>[  353.820000] (ieee80211_sta_connection_lost) Hopping to 2433. Total:19
<0>[  353.820000] =MHX1.7(ieee80211_reset_ap_probe), reseting beacon timer and re-mod conn timer to seconds.
<0>[  353.830000] ==MHX1.2(ieee80211_sta_reset_conn_monitor) sdata->u.mgd.probe_send_count=0
<0>[  353.830000] ==MHX1.2.2(ieee80211_sta_reset_conn_monitor) Short expire[IEEE80211_CONNECTION_IDLE_TIME=15]
<0>[  353.980000] =MHX1.6(ieee80211_sta_conn_mon_timer)
<0>[  353.980000] =MHX1.6.1(ieee80211_sta_conn_mon_timer)
<0>[  353.980000] =MHX1.4(ieee80211_send_nullfunc)
<0>[  353.980000] ==MHX1.5(ieee80211_sta_tx_notify) sdata->u.mgd.probe_send_count=1. ack=0
<7>[  353.980000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 1/2
<0>[  353.980000] =MHX1.4(ieee80211_send_nullfunc)
<0>[  353.980000] ==MHX1.5(ieee80211_sta_tx_notify) sdata->u.mgd.probe_send_count=2. ack=0
<7>[  353.980000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[  353.980000] (ieee80211_sta_connection_lost) Connection lost reason=4. Do STA side CSA.
<0>[  353.980000] (ieee80211_sta_connection_lost) Hopping to 2437. Total:19
<0>[  353.980000] =MHX1.7(ieee80211_reset_ap_probe), reseting beacon timer and re-mod conn timer to seconds.
<0>[  353.990000] ==MHX1.2(ieee80211_sta_reset_conn_monitor) sdata->u.mgd.probe_send_count=0
<0>[  353.990000] ==MHX1.2.2(ieee80211_sta_reset_conn_monitor) Short expire[IEEE80211_CONNECTION_IDLE_TIME=15]
<0>[  354.140000] =MHX1.6(ieee80211_sta_conn_mon_timer)
<0>[  354.140000] =MHX1.6.1(ieee80211_sta_conn_mon_timer)
<0>[  354.140000] =MHX1.4(ieee80211_send_nullfunc)
<0>[  354.140000] ==MHX1.5(ieee80211_sta_tx_notify) sdata->u.mgd.probe_send_count=1. ack=0
<7>[  354.140000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 1/2
<0>[  354.140000] =MHX1.4(ieee80211_send_nullfunc)
<0>[  354.140000] ==MHX1.5(ieee80211_sta_tx_notify) sdata->u.mgd.probe_send_count=2. ack=0
<7>[  354.140000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[  354.140000] (ieee80211_sta_connection_lost) Connection lost reason=4. Do STA side CSA.
<0>[  354.140000] (ieee80211_sta_connection_lost) Hopping to 2441. Total:19
<0>[  354.140000] =MHX1.7(ieee80211_reset_ap_probe), reseting beacon timer and re-mod conn timer to seconds.
<0>[  354.150000] ==MHX1.2(ieee80211_sta_reset_conn_monitor) sdata->u.mgd.probe_send_count=0
<0>[  354.150000] ==MHX1.2.2(ieee80211_sta_reset_conn_monitor) Short expire[IEEE80211_CONNECTION_IDLE_TIME=15]
<0>[  354.300000] =MHX1.6(ieee80211_sta_conn_mon_timer)
<0>[  354.300000] =MHX1.6.1(ieee80211_sta_conn_mon_timer)
<0>[  354.300000] =MHX1.4(ieee80211_send_nullfunc)
<0>[  354.300000] ==MHX1.5(ieee80211_sta_tx_notify) sdata->u.mgd.probe_send_count=1. ack=0
<7>[  354.300000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 1/2
<0>[  354.300000] =MHX1.4(ieee80211_send_nullfunc)
<0>[  354.300000] ==MHX1.5(ieee80211_sta_tx_notify) sdata->u.mgd.probe_send_count=2. ack=0
<7>[  354.300000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[  354.300000] (ieee80211_sta_connection_lost) Connection lost reason=4. Do STA side CSA.
<0>[  354.300000] (ieee80211_sta_connection_lost) Hopping to 2445. Total:19
<0>[  354.300000] =MHX1.7(ieee80211_reset_ap_probe), reseting beacon timer and re-mod conn timer to seconds.
<0>[  354.310000] ==MHX1.2(ieee80211_sta_reset_conn_monitor) sdata->u.mgd.probe_send_count=0
<0>[  354.310000] ==MHX1.2.2(ieee80211_sta_reset_conn_monitor) Short expire[IEEE80211_CONNECTION_IDLE_TIME=15]
<0>[  354.460000] =MHX1.6(ieee80211_sta_conn_mon_timer)
<0>[  354.460000] =MHX1.6.1(ieee80211_sta_conn_mon_timer)
<0>[  354.460000] =MHX1.4(ieee80211_send_nullfunc)
<0>[  354.460000] ==MHX1.5(ieee80211_sta_tx_notify) sdata->u.mgd.probe_send_count=1. ack=0
<7>[  354.460000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 1/2
<0>[  354.460000] =MHX1.4(ieee80211_send_nullfunc)
<0>[  354.460000] ==MHX1.5(ieee80211_sta_tx_notify) sdata->u.mgd.probe_send_count=2. ack=0
<7>[  354.460000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[  354.460000] (ieee80211_sta_connection_lost) Connection lost reason=4. Do STA side CSA.
<0>[  354.460000] (ieee80211_sta_connection_lost) Hopping to 2449. Total:19
<0>[  354.460000] =MHX1.7(ieee80211_reset_ap_probe), reseting beacon timer and re-mod conn timer to seconds.
<0>[  354.470000] ==MHX1.2(ieee80211_sta_reset_conn_monitor) sdata->u.mgd.probe_send_count=0
<0>[  354.470000] ==MHX1.2.2(ieee80211_sta_reset_conn_monitor) Short expire[IEEE80211_CONNECTION_IDLE_TIME=15]
<0>[  354.620000] =MHX1.6(ieee80211_sta_conn_mon_timer)
<0>[  354.620000] =MHX1.6.1(ieee80211_sta_conn_mon_timer)
<0>[  354.620000] =MHX1.4(ieee80211_send_nullfunc)
<0>[  354.620000] ==MHX1.5(ieee80211_sta_tx_notify) sdata->u.mgd.probe_send_count=1. ack=0
<7>[  354.620000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 1/2
<0>[  354.620000] =MHX1.4(ieee80211_send_nullfunc)
<0>[  354.620000] ==MHX1.5(ieee80211_sta_tx_notify) sdata->u.mgd.probe_send_count=2. ack=0
<7>[  354.620000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[  354.620000] (ieee80211_sta_connection_lost) Connection lost reason=4. Do STA side CSA.
<0>[  354.620000] (ieee80211_sta_connection_lost) Hopping to 2453. Total:19
<0>[  354.620000] =MHX1.7(ieee80211_reset_ap_probe), reseting beacon timer and re-mod conn timer to seconds.
<0>[  354.630000] ==MHX1.2(ieee80211_sta_reset_conn_monitor) sdata->u.mgd.probe_send_count=0
<0>[  354.630000] ==MHX1.2.2(ieee80211_sta_reset_conn_monitor) Short expire[IEEE80211_CONNECTION_IDLE_TIME=15]
<0>[  354.780000] =MHX1.6(ieee80211_sta_conn_mon_timer)
<0>[  354.780000] =MHX1.6.1(ieee80211_sta_conn_mon_timer)
<0>[  354.780000] =MHX1.4(ieee80211_send_nullfunc)
<0>[  354.780000] ==MHX1.5(ieee80211_sta_tx_notify) sdata->u.mgd.probe_send_count=1. ack=0
<7>[  354.780000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 1/2
<0>[  354.780000] =MHX1.4(ieee80211_send_nullfunc)
<0>[  354.780000] ==MHX1.5(ieee80211_sta_tx_notify) sdata->u.mgd.probe_send_count=2. ack=0
<7>[  354.780000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[  354.780000] (ieee80211_sta_connection_lost) Connection lost reason=4. Do STA side CSA.
<0>[  354.780000] (ieee80211_sta_connection_lost) Hopping to 2457. Total:19
<0>[  354.780000] =MHX1.7(ieee80211_reset_ap_probe), reseting beacon timer and re-mod conn timer to seconds.
<0>[  354.790000] ==MHX1.2(ieee80211_sta_reset_conn_monitor) sdata->u.mgd.probe_send_count=0
<0>[  354.790000] ==MHX1.2.2(ieee80211_sta_reset_conn_monitor) Short expire[IEEE80211_CONNECTION_IDLE_TIME=15]
<0>[  354.940000] =MHX1.6(ieee80211_sta_conn_mon_timer)
<0>[  354.940000] =MHX1.6.1(ieee80211_sta_conn_mon_timer)
<0>[  354.940000] =MHX1.4(ieee80211_send_nullfunc)
<0>[  354.940000] ==MHX1.5(ieee80211_sta_tx_notify) sdata->u.mgd.probe_send_count=1. ack=0
<7>[  354.940000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 1/2
<0>[  354.940000] =MHX1.4(ieee80211_send_nullfunc)

<0>[  354.940000] ==MHX1.5(ieee80211_sta_tx_notify) sdata->u.mgd.probe_send_count=2. ack=0
<7>[  354.940000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[  354.940000] (ieee80211_sta_connection_lost) Connection lost reason=4. Do STA side CSA.
<0>[  354.940000] (ieee80211_sta_connection_lost) Hopping to 2461. Total:19
<0>[  354.940000] =MHX1.7(ieee80211_reset_ap_probe), reseting beacon timer and re-mod conn timer to seconds.
<0>[  354.950000] ==MHX1.2(ieee80211_sta_reset_conn_monitor) sdata->u.mgd.probe_send_count=0
<0>[  354.950000] ==MHX1.2.2(ieee80211_sta_reset_conn_monitor) Short expire[IEEE80211_CONNECTION_IDLE_TIME=15]
<0>[  355.100000] =MHX1.6(ieee80211_sta_conn_mon_timer)
<0>[  355.100000] =MHX1.6.1(ieee80211_sta_conn_mon_timer)
<0>[  355.100000] =MHX1.4(ieee80211_send_nullfunc)
<0>[  355.100000] ==MHX1.5(ieee80211_sta_tx_notify) sdata->u.mgd.probe_send_count=1. ack=0
<7>[  355.100000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 1/2
<0>[  355.100000] =MHX1.4(ieee80211_send_nullfunc)
<0>[  355.100000] ==MHX1.5(ieee80211_sta_tx_notify) sdata->u.mgd.probe_send_count=2. ack=0
<7>[  355.100000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[  355.100000] (ieee80211_sta_connection_lost) Connection lost reason=4. Do STA side CSA.
<0>[  355.100000] (ieee80211_sta_connection_lost) Hopping to 2465. Total:19
<0>[  355.100000] =MHX1.7(ieee80211_reset_ap_probe), reseting beacon timer and re-mod conn timer to seconds.
<0>[  355.110000] ==MHX1.2(ieee80211_sta_reset_conn_monitor) sdata->u.mgd.probe_send_count=0
<0>[  355.110000] ==MHX1.2.2(ieee80211_sta_reset_conn_monitor) Short expire[IEEE80211_CONNECTION_IDLE_TIME=15]
<0>[  355.260000] =MHX1.6(ieee80211_sta_conn_mon_timer)
<0>[  355.260000] =MHX1.6.1(ieee80211_sta_conn_mon_timer)
<0>[  355.260000] =MHX1.4(ieee80211_send_nullfunc)
<0>[  355.260000] ==MHX1.5(ieee80211_sta_tx_notify) sdata->u.mgd.probe_send_count=1. ack=0
<7>[  355.260000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 1/2
<0>[  355.260000] =MHX1.4(ieee80211_send_nullfunc)
<0>[  355.260000] ==MHX1.5(ieee80211_sta_tx_notify) sdata->u.mgd.probe_send_count=2. ack=0
<7>[  355.260000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[  355.260000] (ieee80211_sta_connection_lost) Connection lost reason=4. Do STA side CSA.
<0>[  355.260000] (ieee80211_sta_connection_lost) Hopping to 2469. Total:19
<0>[  355.260000] =MHX1.7(ieee80211_reset_ap_probe), reseting beacon timer and re-mod conn timer to seconds.
<0>[  355.270000] ==MHX1.2(ieee80211_sta_reset_conn_monitor) sdata->u.mgd.probe_send_count=0
<0>[  355.270000] ==MHX1.2.2(ieee80211_sta_reset_conn_monitor) Short expire[IEEE80211_CONNECTION_IDLE_TIME=15]
<0>[  355.420000] =MHX1.6(ieee80211_sta_conn_mon_timer)
<0>[  355.420000] =MHX1.6.1(ieee80211_sta_conn_mon_timer)
<0>[  355.420000] =MHX1.4(ieee80211_send_nullfunc)
<0>[  355.420000] ==MHX1.5(ieee80211_sta_tx_notify) sdata->u.mgd.probe_send_count=1. ack=0
<7>[  355.420000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 1/2
<0>[  355.420000] =MHX1.4(ieee80211_send_nullfunc)
<0>[  355.420000] ==MHX1.5(ieee80211_sta_tx_notify) sdata->u.mgd.probe_send_count=2. ack=0
<7>[  355.420000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[  355.420000] (ieee80211_sta_connection_lost) Connection lost reason=4. Do STA side CSA.
<0>[  355.420000] (ieee80211_sta_connection_lost) Hopping to 2473. Total:19
<0>[  355.420000] =MHX1.7(ieee80211_reset_ap_probe), reseting beacon timer and re-mod conn timer to seconds.
<0>[  355.430000] ==MHX1.2(ieee80211_sta_reset_conn_monitor) sdata->u.mgd.probe_send_count=0
<0>[  355.430000] ==MHX1.2.2(ieee80211_sta_reset_conn_monitor) Short expire[IEEE80211_CONNECTION_IDLE_TIME=15]
<0>[  355.580000] =MHX1.6(ieee80211_sta_conn_mon_timer)
<0>[  355.580000] =MHX1.6.1(ieee80211_sta_conn_mon_timer)
<0>[  355.580000] =MHX1.4(ieee80211_send_nullfunc)
<0>[  355.580000] ==MHX1.5(ieee80211_sta_tx_notify) sdata->u.mgd.probe_send_count=1. ack=0
<7>[  355.580000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 1/2
<0>[  355.580000] =MHX1.4(ieee80211_send_nullfunc)
<0>[  355.580000] ==MHX1.5(ieee80211_sta_tx_notify) sdata->u.mgd.probe_send_count=2. ack=0
<7>[  355.580000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[  355.580000] (ieee80211_sta_connection_lost) Connection lost reason=4. Do STA side CSA.
<0>[  355.580000] (ieee80211_sta_connection_lost) Hopping to 2477. Total:19
<0>[  355.580000] =MHX1.7(ieee80211_reset_ap_probe), reseting beacon timer and re-mod conn timer to seconds.
<0>[  355.590000] ==MHX1.2(ieee80211_sta_reset_conn_monitor) sdata->u.mgd.probe_send_count=0
<0>[  355.590000] ==MHX1.2.2(ieee80211_sta_reset_conn_monitor) Short expire[IEEE80211_CONNECTION_IDLE_TIME=15]
<0>[  355.740000] =MHX1.6(ieee80211_sta_conn_mon_timer)
<0>[  355.740000] =MHX1.6.1(ieee80211_sta_conn_mon_timer)
<0>[  355.740000] =MHX1.4(ieee80211_send_nullfunc)
<0>[  355.740000] ==MHX1.5(ieee80211_sta_tx_notify) sdata->u.mgd.probe_send_count=1. ack=0
<7>[  355.740000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 1/2
<0>[  355.740000] =MHX1.4(ieee80211_send_nullfunc)
<0>[  355.740000] ==MHX1.5(ieee80211_sta_tx_notify) sdata->u.mgd.probe_send_count=2. ack=0
<7>[  355.740000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[  355.740000] (ieee80211_sta_connection_lost) Connection lost reason=4. Do STA side CSA.
<0>[  355.740000] (ieee80211_sta_connection_lost) Hopping to 2406. Total:19
<0>[  355.740000] =MHX1.7(ieee80211_reset_ap_probe), reseting beacon timer and re-mod conn timer to seconds.
<0>[  355.750000] ==MHX1.2(ieee80211_sta_reset_conn_monitor) sdata->u.mgd.probe_send_count=0
<0>[  355.750000] ==MHX1.2.2(ieee80211_sta_reset_conn_monitor) Short expire[IEEE80211_CONNECTION_IDLE_TIME=15]
<0>[  355.900000] =MHX1.6(ieee80211_sta_conn_mon_timer)
<0>[  355.900000] =MHX1.6.1(ieee80211_sta_conn_mon_timer)
<0>[  355.900000] =MHX1.4(ieee80211_send_nullfunc)
<0>[  355.900000] ==MHX1.5(ieee80211_sta_tx_notify) sdata->u.mgd.probe_send_count=1. ack=0
<7>[  355.900000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 1/2
<0>[  355.900000] =MHX1.4(ieee80211_send_nullfunc)
<0>[  355.900000] ==MHX1.5(ieee80211_sta_tx_notify) sdata->u.mgd.probe_send_count=2. ack=0
<7>[  355.900000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[  355.900000] (ieee80211_sta_connection_lost) Connection lost reason=4. Do STA side CSA.
<0>[  355.900000] (ieee80211_sta_connection_lost) Hopping to 2410. Total:19
<0>[  355.900000] =MHX1.7(ieee80211_reset_ap_probe), reseting beacon timer and re-mod conn timer to seconds.
<0>[  355.910000] ==MHX1.2(ieee80211_sta_reset_conn_monitor) sdata->u.mgd.probe_send_count=0
<0>[  355.910000] ==MHX1.2.2(ieee80211_sta_reset_conn_monitor) Short expire[IEEE80211_CONNECTION_IDLE_TIME=15]
<0>[  356.060000] =MHX1.6(ieee80211_sta_conn_mon_timer)
<0>[  356.060000] =MHX1.6.1(ieee80211_sta_conn_mon_timer)
<0>[  356.060000] =MHX1.4(ieee80211_send_nullfunc)
<0>[  356.060000] ==MHX1.5(ieee80211_sta_tx_notify) sdata->u.mgd.probe_send_count=1. ack=1
<0>[  356.060000] ==MHX1.2(ieee80211_sta_reset_conn_monitor) sdata->u.mgd.probe_send_count=0
<0>[  356.060000] ==MHX1.2.2(ieee80211_sta_reset_conn_monitor) Short expire[IEEE80211_CONNECTION_IDLE_TIME=15]
<0>[  356.060000] =MHX1.7(ieee80211_reset_ap_probe), reseting beacon timer and re-mod conn timer to seconds.



<0>[  364.020000] =MHX1.6(ieee80211_sta_conn_mon_timer)
<0>[  364.020000] =MHX1.6.1(ieee80211_sta_conn_mon_timer)
<0>[  364.020000] =MHX1.4(ieee80211_send_nullfunc)					// normal probe is 150ms * 50 = 7.5S, round up to 8S
<0>[  364.020000] ==MHX1.5(ieee80211_sta_tx_notify) sdata->u.mgd.probe_send_count=1. ack=1
<0>[  364.020000] ==MHX1.2(ieee80211_sta_reset_conn_monitor) sdata->u.mgd.probe_send_count=0
<0>[  364.020000] ==MHX1.2.2(ieee80211_sta_reset_conn_monitor) Short expire[IEEE80211_CONNECTION_IDLE_TIME=15]
<0>[  364.020000] =MHX1.7(ieee80211_reset_ap_probe), reseting beacon timer and re-mod conn timer to seconds.




<0>[  372.020000] =MHX1.6(ieee80211_sta_conn_mon_timer)
<0>[  372.020000] =MHX1.6.1(ieee80211_sta_conn_mon_timer)
<0>[  372.020000] =MHX1.4(ieee80211_send_nullfunc)					// normal probe is 150ms * 50 = 7.5S, round up to 8S
<0>[  372.020000] ==MHX1.5(ieee80211_sta_tx_notify) sdata->u.mgd.probe_send_count=1. ack=1
<0>[  372.020000] ==MHX1.2(ieee80211_sta_reset_conn_monitor) sdata->u.mgd.probe_send_count=0
<0>[  372.020000] ==MHX1.2.2(ieee80211_sta_reset_conn_monitor) Short expire[IEEE80211_CONNECTION_IDLE_TIME=15]
<0>[  372.020000] =MHX1.7(ieee80211_reset_ap_probe), reseting beacon timer and re-mod conn timer to seconds.




<0>[  380.020000] =MHX1.6(ieee80211_sta_conn_mon_timer)
<0>[  380.020000] =MHX1.6.1(ieee80211_sta_conn_mon_timer)
<0>[  380.020000] =MHX1.4(ieee80211_send_nullfunc)					// normal probe is 150ms * 50 = 7.5S, round up to 8S
<0>[  380.020000] ==MHX1.5(ieee80211_sta_tx_notify) sdata->u.mgd.probe_send_count=1. ack=1
<0>[  380.020000] ==MHX1.2(ieee80211_sta_reset_conn_monitor) sdata->u.mgd.probe_send_count=0
<0>[  380.020000] ==MHX1.2.2(ieee80211_sta_reset_conn_monitor) Short expire[IEEE80211_CONNECTION_IDLE_TIME=15]
<0>[  380.020000] =MHX1.7(ieee80211_reset_ap_probe), reseting beacon timer and re-mod conn timer to seconds.


April 11, 2017
STA Log,
wireless.radio0.beacon_loss_count=10000
wireless.radio0.probe_wait_time=1
wireless.radio0.connection_idle_time=5
wireless.radio0.max_nullfunc_tries=1

<0>[ 1094.520000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1094.620000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1094.720000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 181872, u.mgd.beacon_timeout = 102400
<0>[ 1094.720000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1094.820000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 181882, u.mgd.beacon_timeout = 102400
<0>[ 1094.820000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1094.930000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 181893, u.mgd.beacon_timeout = 102400
<0>[ 1094.930000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1095.000000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 1095.000000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..			// normal probe is 50ms * 20 = 1S.	(wrong comment!!!)
<0>[ 1095.000000] ==MHX1.3(ieee80211_sta_tx_notify) ack=1
<0>[ 1095.000000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 79505, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 1095.000000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<0>[ 1095.000000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 181900, u.mgd.beacon_timeout = 102400
<0>[ 1095.010000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1095.030000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 181903, u.mgd.beacon_timeout = 102400
<0>[ 1095.030000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1095.130000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 181913, u.mgd.beacon_timeout = 102400
<0>[ 1095.130000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1095.230000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 181923, u.mgd.beacon_timeout = 102400
<0>[ 1095.230000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1095.340000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 181934, u.mgd.beacon_timeout = 102400
<0>[ 1095.340000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1095.440000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 181944, u.mgd.beacon_timeout = 102400
<0>[ 1095.440000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1095.540000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 181954, u.mgd.beacon_timeout = 102400
<0>[ 1095.540000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1095.640000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 181964, u.mgd.beacon_timeout = 102400
<0>[ 1095.640000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1095.750000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 181975, u.mgd.beacon_timeout = 102400
<0>[ 1095.750000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1095.850000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 181985, u.mgd.beacon_timeout = 102400
<0>[ 1095.850000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1095.950000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 181995, u.mgd.beacon_timeout = 102400
<0>[ 1095.950000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1096.000000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 1096.000000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..			// normal probe is 50ms * 20 = 1S
<0>[ 1096.000000] ==MHX1.3(ieee80211_sta_tx_notify) ack=1
<0>[ 1096.000000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 79605, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 1096.000000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<0>[ 1096.000000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182000, u.mgd.beacon_timeout = 102400
<0>[ 1096.010000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1096.050000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182005, u.mgd.beacon_timeout = 102400
<0>[ 1096.050000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1096.150000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182015, u.mgd.beacon_timeout = 102400
<0>[ 1096.150000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1096.260000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182026, u.mgd.beacon_timeout = 102400
<0>[ 1096.260000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1096.360000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182036, u.mgd.beacon_timeout = 102400
<0>[ 1096.360000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1096.460000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182046, u.mgd.beacon_timeout = 102400
<0>[ 1096.460000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1096.560000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182056, u.mgd.beacon_timeout = 102400
<0>[ 1096.560000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1096.670000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182067, u.mgd.beacon_timeout = 102400
<0>[ 1096.670000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1096.770000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182077, u.mgd.beacon_timeout = 102400
<0>[ 1096.770000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1096.870000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182087, u.mgd.beacon_timeout = 102400
<0>[ 1096.870000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1096.970000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182097, u.mgd.beacon_timeout = 102400
<0>[ 1096.970000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1097.000000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 1097.000000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..			// normal probe is 50ms * 20 = 1S
<0>[ 1097.000000] ==MHX1.3(ieee80211_sta_tx_notify) ack=1
<0>[ 1097.000000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 79705, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 1097.000000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<0>[ 1097.000000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182100, u.mgd.beacon_timeout = 102400
<0>[ 1097.010000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1097.080000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182108, u.mgd.beacon_timeout = 102400
<0>[ 1097.080000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1097.180000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182118, u.mgd.beacon_timeout = 102400
<0>[ 1097.180000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1097.280000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182128, u.mgd.beacon_timeout = 102400
<0>[ 1097.280000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1097.380000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182138, u.mgd.beacon_timeout = 102400
<0>[ 1097.380000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1097.490000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182149, u.mgd.beacon_timeout = 102400
<0>[ 1097.490000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1097.590000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182159, u.mgd.beacon_timeout = 102400
<0>[ 1097.590000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1097.690000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182169, u.mgd.beacon_timeout = 102400
<0>[ 1097.690000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1097.790000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182179, u.mgd.beacon_timeout = 102400
<0>[ 1097.790000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1097.900000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182190, u.mgd.beacon_timeout = 102400
<0>[ 1097.900000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1098.000000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 1098.000000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..			// normal probe is 50ms * 20 = 1S
<0>[ 1098.000000] ==MHX1.3(ieee80211_sta_tx_notify) ack=1
<0>[ 1098.000000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 79805, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 1098.000000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<0>[ 1098.000000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182200, u.mgd.beacon_timeout = 102400
<0>[ 1098.000000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182200, u.mgd.beacon_timeout = 102400
<0>[ 1098.000000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1098.010000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1098.920000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182292, u.mgd.beacon_timeout = 102400
<0>[ 1098.920000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1099.000000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 1099.000000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 1099.000000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 1099.000000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 1099.000000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[ 1099.000000] ==MHX(ieee80211_sta_connection_lost) Lost reason=4. Generating CSA skb. scan_req=  (null)
<0>[ 1099.000000] ==MHX(ieee80211_sta_connection_lost) Total hop channels=19
<0>[ 1099.000000] ==MHX(ieee80211_sta_connection_lost) Channel[0]=2406
<0>[ 1099.000000] ==MHX(ieee80211_sta_connection_lost) Channel[1]=2410
<0>[ 1099.000000] ==MHX(ieee80211_sta_connection_lost) Channel[2]=2414
<0>[ 1099.000000] ==MHX(ieee80211_sta_connection_lost) Channel[3]=2418
<0>[ 1099.000000] ==MHX(ieee80211_sta_connection_lost) Channel[4]=2421
<0>[ 1099.000000] ==MHX(ieee80211_sta_connection_lost) Channel[5]=2425
<0>[ 1099.000000] ==MHX(ieee80211_sta_connection_lost) Channel[6]=2429
<0>[ 1099.000000] ==MHX(ieee80211_sta_connection_lost) Channel[7]=2433
<0>[ 1099.000000] ==MHX(ieee80211_sta_connection_lost) Channel[8]=2437
<0>[ 1099.000000] ==MHX(ieee80211_sta_connection_lost) Channel[9]=2441
<0>[ 1099.000000] ==MHX(ieee80211_sta_connection_lost) Channel[10]=2445
<0>[ 1099.000000] ==MHX(ieee80211_sta_connection_lost) Channel[11]=2449
<0>[ 1099.000000] ==MHX(ieee80211_sta_connection_lost) Channel[12]=2453*********
<0>[ 1099.000000] ==MHX(ieee80211_sta_connection_lost) Channel[13]=2457
<0>[ 1099.000000] ==MHX(ieee80211_sta_connection_lost) Channel[14]=2461
<0>[ 1099.000000] ==MHX(ieee80211_sta_connection_lost) Channel[15]=2465
<0>[ 1099.000000] ==MHX(ieee80211_sta_connection_lost) Channel[16]=2469
<0>[ 1099.000000] ==MHX(ieee80211_sta_connection_lost) Channel[17]=2473
<0>[ 1099.000000] ==MHX(ieee80211_sta_connection_lost) Channel[18]=2477
<0>[ 1099.000000] ==MHX(ieee80211_sta_connection_lost) Channel[19]=0
<0>[ 1099.000000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182300, u.mgd.beacon_timeout = 102400
<0>[ 1099.000000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c24
<0>[ 1099.010000] ==MHX1.4(ieee80211_chswitch_work) Reseting beacon and conn monitor timers.
<0>[ 1099.010000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182301, u.mgd.beacon_timeout = 102400
<0>[ 1099.010000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 79906, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 1099.010000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1099.060000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 1099.060000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..			// Fast mode probe is 50ms
<0>[ 1099.060000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 1099.060000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 1099.060000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[ 1099.060000] ==MHX(ieee80211_sta_connection_lost) Lost reason=4. Generating CSA skb. scan_req=  (null)
<0>[ 1099.060000] ==MHX(ieee80211_sta_connection_lost) Total hop channels=19
<0>[ 1099.060000] ==MHX(ieee80211_sta_connection_lost) Channel[0]=2406
<0>[ 1099.060000] ==MHX(ieee80211_sta_connection_lost) Channel[1]=2410
<0>[ 1099.060000] ==MHX(ieee80211_sta_connection_lost) Channel[2]=2414
<0>[ 1099.060000] ==MHX(ieee80211_sta_connection_lost) Channel[3]=2418
<0>[ 1099.060000] ==MHX(ieee80211_sta_connection_lost) Channel[4]=2421
<0>[ 1099.060000] ==MHX(ieee80211_sta_connection_lost) Channel[5]=2425
<0>[ 1099.060000] ==MHX(ieee80211_sta_connection_lost) Channel[6]=2429
<0>[ 1099.060000] ==MHX(ieee80211_sta_connection_lost) Channel[7]=2433
<0>[ 1099.060000] ==MHX(ieee80211_sta_connection_lost) Channel[8]=2437
<0>[ 1099.060000] ==MHX(ieee80211_sta_connection_lost) Channel[9]=2441
<0>[ 1099.060000] ==MHX(ieee80211_sta_connection_lost) Channel[10]=2445
<0>[ 1099.060000] ==MHX(ieee80211_sta_connection_lost) Channel[11]=2449
<0>[ 1099.060000] ==MHX(ieee80211_sta_connection_lost) Channel[12]=2453
<0>[ 1099.060000] ==MHX(ieee80211_sta_connection_lost) Channel[13]=2457*********
<0>[ 1099.060000] ==MHX(ieee80211_sta_connection_lost) Channel[14]=2461
<0>[ 1099.060000] ==MHX(ieee80211_sta_connection_lost) Channel[15]=2465
<0>[ 1099.060000] ==MHX(ieee80211_sta_connection_lost) Channel[16]=2469
<0>[ 1099.060000] ==MHX(ieee80211_sta_connection_lost) Channel[17]=2473
<0>[ 1099.060000] ==MHX(ieee80211_sta_connection_lost) Channel[18]=2477
<0>[ 1099.060000] ==MHX(ieee80211_sta_connection_lost) Channel[19]=0
<0>[ 1099.060000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182306, u.mgd.beacon_timeout = 102400
<0>[ 1099.060000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c24
<0>[ 1099.070000] ==MHX1.4(ieee80211_chswitch_work) Reseting beacon and conn monitor timers.
<0>[ 1099.070000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182307, u.mgd.beacon_timeout = 102400
<0>[ 1099.070000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 79912, IEEE80211_CONNECTION_IDLE_TIME=
5
<0>[ 1099.070000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1099.120000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 1099.120000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..			// Fast mode probe is 50ms
<0>[ 1099.120000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 1099.120000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 1099.120000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[ 1099.120000] ==MHX(ieee80211_sta_connection_lost) Lost reason=4. Generating CSA skb. scan_req=  (null)
<0>[ 1099.120000] ==MHX(ieee80211_sta_connection_lost) Total hop channels=19
<0>[ 1099.120000] ==MHX(ieee80211_sta_connection_lost) Channel[0]=2406
<0>[ 1099.120000] ==MHX(ieee80211_sta_connection_lost) Channel[1]=2410
<0>[ 1099.120000] ==MHX(ieee80211_sta_connection_lost) Channel[2]=2414
<0>[ 1099.120000] ==MHX(ieee80211_sta_connection_lost) Channel[3]=2418
<0>[ 1099.120000] ==MHX(ieee80211_sta_connection_lost) Channel[4]=2421
<0>[ 1099.120000] ==MHX(ieee80211_sta_connection_lost) Channel[5]=2425
<0>[ 1099.120000] ==MHX(ieee80211_sta_connection_lost) Channel[6]=2429
<0>[ 1099.120000] ==MHX(ieee80211_sta_connection_lost) Channel[7]=2433
<0>[ 1099.120000] ==MHX(ieee80211_sta_connection_lost) Channel[8]=2437
<0>[ 1099.120000] ==MHX(ieee80211_sta_connection_lost) Channel[9]=2441
<0>[ 1099.120000] ==MHX(ieee80211_sta_connection_lost) Channel[10]=2445
<0>[ 1099.120000] ==MHX(ieee80211_sta_connection_lost) Channel[11]=2449
<0>[ 1099.120000] ==MHX(ieee80211_sta_connection_lost) Channel[12]=2453
<0>[ 1099.120000] ==MHX(ieee80211_sta_connection_lost) Channel[13]=2457
<0>[ 1099.120000] ==MHX(ieee80211_sta_connection_lost) Channel[14]=2461*********
<0>[ 1099.120000] ==MHX(ieee80211_sta_connection_lost) Channel[15]=2465
<0>[ 1099.120000] ==MHX(ieee80211_sta_connection_lost) Channel[16]=2469
<0>[ 1099.120000] ==MHX(ieee80211_sta_connection_lost) Channel[17]=2473
<0>[ 1099.120000] ==MHX(ieee80211_sta_connection_lost) Channel[18]=2477
<0>[ 1099.120000] ==MHX(ieee80211_sta_connection_lost) Channel[19]=0
<0>[ 1099.120000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182312, u.mgd.beacon_timeout = 102400
<0>[ 1099.120000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c24
<0>[ 1099.130000] ==MHX1.4(ieee80211_chswitch_work) Reseting beacon and conn monitor timers.
<0>[ 1099.130000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182313, u.mgd.beacon_timeout = 102400
<0>[ 1099.130000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 79918, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 1099.150000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1099.180000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 1099.180000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..			// Fast mode probe is 50ms
<0>[ 1099.180000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 1099.180000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 1099.180000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[ 1099.180000] ==MHX(ieee80211_sta_connection_lost) Lost reason=4. Generating CSA skb. scan_req=  (null)
<0>[ 1099.180000] ==MHX(ieee80211_sta_connection_lost) Total hop channels=19
<0>[ 1099.180000] ==MHX(ieee80211_sta_connection_lost) Channel[0]=2406
<0>[ 1099.180000] ==MHX(ieee80211_sta_connection_lost) Channel[1]=2410
<0>[ 1099.180000] ==MHX(ieee80211_sta_connection_lost) Channel[2]=2414
<0>[ 1099.180000] ==MHX(ieee80211_sta_connection_lost) Channel[3]=2418
<0>[ 1099.180000] ==MHX(ieee80211_sta_connection_lost) Channel[4]=2421
<0>[ 1099.180000] ==MHX(ieee80211_sta_connection_lost) Channel[5]=2425
<0>[ 1099.180000] ==MHX(ieee80211_sta_connection_lost) Channel[6]=2429
<0>[ 1099.180000] ==MHX(ieee80211_sta_connection_lost) Channel[7]=2433
<0>[ 1099.180000] ==MHX(ieee80211_sta_connection_lost) Channel[8]=2437
<0>[ 1099.180000] ==MHX(ieee80211_sta_connection_lost) Channel[9]=2441
<0>[ 1099.180000] ==MHX(ieee80211_sta_connection_lost) Channel[10]=2445
<0>[ 1099.180000] ==MHX(ieee80211_sta_connection_lost) Channel[11]=2449
<0>[ 1099.180000] ==MHX(ieee80211_sta_connection_lost) Channel[12]=2453
<0>[ 1099.180000] ==MHX(ieee80211_sta_connection_lost) Channel[13]=2457
<0>[ 1099.180000] ==MHX(ieee80211_sta_connection_lost) Channel[14]=2461
<0>[ 1099.180000] ==MHX(ieee80211_sta_connection_lost) Channel[15]=2465*********
<0>[ 1099.180000] ==MHX(ieee80211_sta_connection_lost) Channel[16]=2469
<0>[ 1099.180000] ==MHX(ieee80211_sta_connection_lost) Channel[17]=2473
<0>[ 1099.180000] ==MHX(ieee80211_sta_connection_lost) Channel[18]=2477
<0>[ 1099.180000] ==MHX(ieee80211_sta_connection_lost) Channel[19]=0
<0>[ 1099.180000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182318, u.mgd.beacon_timeout = 102400
<0>[ 1099.180000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c24
<0>[ 1099.190000] ==MHX1.4(ieee80211_chswitch_work) Reseting beacon and conn monitor timers.
<0>[ 1099.190000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182319, u.mgd.beacon_timeout = 102400
<0>[ 1099.190000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 79924, IEEE80211_CONNECTION_IDLE_TIME=
5
<0>[ 1099.190000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1099.240000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 1099.240000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..			// Fast mode probe is 50ms
<0>[ 1099.240000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 1099.240000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 1099.240000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[ 1099.240000] ==MHX(ieee80211_sta_connection_lost) Lost reason=4. Generating CSA skb. scan_req=  (null)
<0>[ 1099.240000] ==MHX(ieee80211_sta_connection_lost) Total hop channels=19
<0>[ 1099.240000] ==MHX(ieee80211_sta_connection_lost) Channel[0]=2406
<0>[ 1099.240000] ==MHX(ieee80211_sta_connection_lost) Channel[1]=2410
<0>[ 1099.240000] ==MHX(ieee80211_sta_connection_lost) Channel[2]=2414
<0>[ 1099.240000] ==MHX(ieee80211_sta_connection_lost) Channel[3]=2418
<0>[ 1099.240000] ==MHX(ieee80211_sta_connection_lost) Channel[4]=2421
<0>[ 1099.240000] ==MHX(ieee80211_sta_connection_lost) Channel[5]=2425
<0>[ 1099.240000] ==MHX(ieee80211_sta_connection_lost) Channel[6]=2429
<0>[ 1099.240000] ==MHX(ieee80211_sta_connection_lost) Channel[7]=2433
<0>[ 1099.240000] ==MHX(ieee80211_sta_connection_lost) Channel[8]=2437
<0>[ 1099.240000] ==MHX(ieee80211_sta_connection_lost) Channel[9]=2441
<0>[ 1099.240000] ==MHX(ieee80211_sta_connection_lost) Channel[10]=2445
<0>[ 1099.240000] ==MHX(ieee80211_sta_connection_lost) Channel[11]=2449
<0>[ 1099.240000] ==MHX(ieee80211_sta_connection_lost) Channel[12]=2453
<0>[ 1099.240000] ==MHX(ieee80211_sta_connection_lost) Channel[13]=2457
<0>[ 1099.240000] ==MHX(ieee80211_sta_connection_lost) Channel[14]=2461
<0>[ 1099.240000] ==MHX(ieee80211_sta_connection_lost) Channel[15]=2465
<0>[ 1099.240000] ==MHX(ieee80211_sta_connection_lost) Channel[16]=2469*********
<0>[ 1099.240000] ==MHX(ieee80211_sta_connection_lost) Channel[17]=2473
<0>[ 1099.240000] ==MHX(ieee80211_sta_connection_lost) Channel[18]=2477
<0>[ 1099.240000] ==MHX(ieee80211_sta_connection_lost) Channel[19]=0
<0>[ 1099.240000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182324, u.mgd.beacon_timeout = 102400
<0>[ 1099.240000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c24
<0>[ 1099.250000] ==MHX1.4(ieee80211_chswitch_work) Reseting beacon and conn monitor timers.
<0>[ 1099.250000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182325, u.mgd.beacon_timeout = 102400
<0>[ 1099.250000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 79930, IEEE80211_CONNECTION_IDLE_TIME=
5
<0>[ 1099.250000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1099.300000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 1099.300000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..			// Fast mode probe is 50ms
<0>[ 1099.300000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 1099.300000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 1099.300000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[ 1099.300000] ==MHX(ieee80211_sta_connection_lost) Lost reason=4. Generating CSA skb. scan_req=  (null)
<0>[ 1099.300000] ==MHX(ieee80211_sta_connection_lost) Total hop channels=19
<0>[ 1099.300000] ==MHX(ieee80211_sta_connection_lost) Channel[0]=2406
<0>[ 1099.300000] ==MHX(ieee80211_sta_connection_lost) Channel[1]=2410
<0>[ 1099.300000] ==MHX(ieee80211_sta_connection_lost) Channel[2]=2414
<0>[ 1099.300000] ==MHX(ieee80211_sta_connection_lost) Channel[3]=2418
<0>[ 1099.300000] ==MHX(ieee80211_sta_connection_lost) Channel[4]=2421
<0>[ 1099.300000] ==MHX(ieee80211_sta_connection_lost) Channel[5]=2425
<0>[ 1099.300000] ==MHX(ieee80211_sta_connection_lost) Channel[6]=2429
<0>[ 1099.300000] ==MHX(ieee80211_sta_connection_lost) Channel[7]=2433
<0>[ 1099.300000] ==MHX(ieee80211_sta_connection_lost) Channel[8]=2437
<0>[ 1099.300000] ==MHX(ieee80211_sta_connection_lost) Channel[9]=2441
<0>[ 1099.300000] ==MHX(ieee80211_sta_connection_lost) Channel[10]=2445
<0>[ 1099.300000] ==MHX(ieee80211_sta_connection_lost) Channel[11]=2449
<0>[ 1099.300000] ==MHX(ieee80211_sta_connection_lost) Channel[12]=2453
<0>[ 1099.300000] ==MHX(ieee80211_sta_connection_lost) Channel[13]=2457
<0>[ 1099.300000] ==MHX(ieee80211_sta_connection_lost) Channel[14]=2461
<0>[ 1099.300000] ==MHX(ieee80211_sta_connection_lost) Channel[15]=2465
<0>[ 1099.300000] ==MHX(ieee80211_sta_connection_lost) Channel[16]=2469
<0>[ 1099.300000] ==MHX(ieee80211_sta_connection_lost) Channel[17]=2473*********
<0>[ 1099.300000] ==MHX(ieee80211_sta_connection_lost) Channel[18]=2477
<0>[ 1099.300000] ==MHX(ieee80211_sta_connection_lost) Channel[19]=0
<0>[ 1099.300000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182330, u.mgd.beacon_timeout = 102400
<0>[ 1099.300000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c24
<0>[ 1099.310000] ==MHX1.4(ieee80211_chswitch_work) Reseting beacon and conn monitor timers.
<0>[ 1099.310000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182331, u.mgd.beacon_timeout = 102400
<0>[ 1099.310000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 79936, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 1099.310000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1099.360000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 1099.360000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..			// Fast mode probe is 50ms
<0>[ 1099.360000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 1099.360000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 1099.360000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[ 1099.360000] ==MHX(ieee80211_sta_connection_lost) Lost reason=4. Generating CSA skb. scan_req=  (null)
<0>[ 1099.360000] ==MHX(ieee80211_sta_connection_lost) Total hop channels=19
<0>[ 1099.360000] ==MHX(ieee80211_sta_connection_lost) Channel[0]=2406
<0>[ 1099.360000] ==MHX(ieee80211_sta_connection_lost) Channel[1]=2410
<0>[ 1099.360000] ==MHX(ieee80211_sta_connection_lost) Channel[2]=2414
<0>[ 1099.360000] ==MHX(ieee80211_sta_connection_lost) Channel[3]=2418
<0>[ 1099.360000] ==MHX(ieee80211_sta_connection_lost) Channel[4]=2421
<0>[ 1099.360000] ==MHX(ieee80211_sta_connection_lost) Channel[5]=2425
<0>[ 1099.360000] ==MHX(ieee80211_sta_connection_lost) Channel[6]=2429
<0>[ 1099.360000] ==MHX(ieee80211_sta_connection_lost) Channel[7]=2433
<0>[ 1099.360000] ==MHX(ieee80211_sta_connection_lost) Channel[8]=2437
<0>[ 1099.360000] ==MHX(ieee80211_sta_connection_lost) Channel[9]=2441
<0>[ 1099.360000] ==MHX(ieee80211_sta_connection_lost) Channel[10]=2445
<0>[ 1099.360000] ==MHX(ieee80211_sta_connection_lost) Channel[11]=2449
<0>[ 1099.360000] ==MHX(ieee80211_sta_connection_lost) Channel[12]=2453
<0>[ 1099.360000] ==MHX(ieee80211_sta_connection_lost) Channel[13]=2457
<0>[ 1099.360000] ==MHX(ieee80211_sta_connection_lost) Channel[14]=2461
<0>[ 1099.360000] ==MHX(ieee80211_sta_connection_lost) Channel[15]=2465
<0>[ 1099.360000] ==MHX(ieee80211_sta_connection_lost) Channel[16]=2469
<0>[ 1099.360000] ==MHX(ieee80211_sta_connection_lost) Channel[17]=2473
<0>[ 1099.360000] ==MHX(ieee80211_sta_connection_lost) Channel[18]=2477*********
<0>[ 1099.360000] ==MHX(ieee80211_sta_connection_lost) Channel[19]=0
<0>[ 1099.360000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182336, u.mgd.beacon_timeout = 102400
<0>[ 1099.360000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c24
<0>[ 1099.370000] ==MHX1.4(ieee80211_chswitch_work) Reseting beacon and conn monitor timers.
<0>[ 1099.370000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182337, u.mgd.beacon_timeout = 102400
<0>[ 1099.370000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 79942, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 1099.370000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1099.420000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 1099.420000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..			// Fast mode probe is 50ms
<0>[ 1099.420000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 1099.420000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 1099.420000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[ 1099.420000] ==MHX(ieee80211_sta_connection_lost) Lost reason=4. Generating CSA skb. scan_req=  (null)
<0>[ 1099.420000] ==MHX(ieee80211_sta_connection_lost) Total hop channels=19
<0>[ 1099.420000] ==MHX(ieee80211_sta_connection_lost) Channel[0]=2406*********
<0>[ 1099.420000] ==MHX(ieee80211_sta_connection_lost) Channel[1]=2410
<0>[ 1099.420000] ==MHX(ieee80211_sta_connection_lost) Channel[2]=2414
<0>[ 1099.420000] ==MHX(ieee80211_sta_connection_lost) Channel[3]=2418
<0>[ 1099.420000] ==MHX(ieee80211_sta_connection_lost) Channel[4]=2421
<0>[ 1099.420000] ==MHX(ieee80211_sta_connection_lost) Channel[5]=2425
<0>[ 1099.420000] ==MHX(ieee80211_sta_connection_lost) Channel[6]=2429
<0>[ 1099.420000] ==MHX(ieee80211_sta_connection_lost) Channel[7]=2433
<0>[ 1099.420000] ==MHX(ieee80211_sta_connection_lost) Channel[8]=2437
<0>[ 1099.420000] ==MHX(ieee80211_sta_connection_lost) Channel[9]=2441
<0>[ 1099.420000] ==MHX(ieee80211_sta_connection_lost) Channel[10]=2445
<0>[ 1099.420000] ==MHX(ieee80211_sta_connection_lost) Channel[11]=2449
<0>[ 1099.420000] ==MHX(ieee80211_sta_connection_lost) Channel[12]=2453
<0>[ 1099.420000] ==MHX(ieee80211_sta_connection_lost) Channel[13]=2457
<0>[ 1099.420000] ==MHX(ieee80211_sta_connection_lost) Channel[14]=2461
<0>[ 1099.420000] ==MHX(ieee80211_sta_connection_lost) Channel[15]=2465
<0>[ 1099.420000] ==MHX(ieee80211_sta_connection_lost) Channel[16]=2469
<0>[ 1099.420000] ==MHX(ieee80211_sta_connection_lost) Channel[17]=2473
<0>[ 1099.420000] ==MHX(ieee80211_sta_connection_lost) Channel[18]=2477
<0>[ 1099.420000] ==MHX(ieee80211_sta_connection_lost) Channel[19]=0
<0>[ 1099.420000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182342, u.mgd.beacon_timeout = 102400
<0>[ 1099.420000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c24
<0>[ 1099.430000] ==MHX1.4(ieee80211_chswitch_work) Reseting beacon and conn monitor timers.
<0>[ 1099.430000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182343, u.mgd.beacon_timeout = 102400
<0>[ 1099.430000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 79948, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 1099.430000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1099.480000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 1099.480000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..			// Fast mode probe is 50ms
<0>[ 1099.480000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 1099.480000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 1099.480000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[ 1099.480000] ==MHX(ieee80211_sta_connection_lost) Lost reason=4. Generating CSA skb. scan_req=  (null)
<0>[ 1099.480000] ==MHX(ieee80211_sta_connection_lost) Total hop channels=19
<0>[ 1099.480000] ==MHX(ieee80211_sta_connection_lost) Channel[0]=2406
<0>[ 1099.480000] ==MHX(ieee80211_sta_connection_lost) Channel[1]=2410*********
<0>[ 1099.480000] ==MHX(ieee80211_sta_connection_lost) Channel[2]=2414
<0>[ 1099.480000] ==MHX(ieee80211_sta_connection_lost) Channel[3]=2418
<0>[ 1099.480000] ==MHX(ieee80211_sta_connection_lost) Channel[4]=2421
<0>[ 1099.480000] ==MHX(ieee80211_sta_connection_lost) Channel[5]=2425
<0>[ 1099.480000] ==MHX(ieee80211_sta_connection_lost) Channel[6]=2429
<0>[ 1099.480000] ==MHX(ieee80211_sta_connection_lost) Channel[7]=2433
<0>[ 1099.480000] ==MHX(ieee80211_sta_connection_lost) Channel[8]=2437
<0>[ 1099.480000] ==MHX(ieee80211_sta_connection_lost) Channel[9]=2441
<0>[ 1099.480000] ==MHX(ieee80211_sta_connection_lost) Channel[10]=2445
<0>[ 1099.480000] ==MHX(ieee80211_sta_connection_lost) Channel[11]=2449
<0>[ 1099.480000] ==MHX(ieee80211_sta_connection_lost) Channel[12]=2453
<0>[ 1099.480000] ==MHX(ieee80211_sta_connection_lost) Channel[13]=2457
<0>[ 1099.480000] ==MHX(ieee80211_sta_connection_lost) Channel[14]=2461
<0>[ 1099.480000] ==MHX(ieee80211_sta_connection_lost) Channel[15]=2465
<0>[ 1099.480000] ==MHX(ieee80211_sta_connection_lost) Channel[16]=2469
<0>[ 1099.480000] ==MHX(ieee80211_sta_connection_lost) Channel[17]=2473
<0>[ 1099.480000] ==MHX(ieee80211_sta_connection_lost) Channel[18]=2477
<0>[ 1099.480000] ==MHX(ieee80211_sta_connection_lost) Channel[19]=0
<0>[ 1099.480000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182348, u.mgd.beacon_timeout = 102400
<0>[ 1099.480000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c24
<0>[ 1099.490000] ==MHX1.4(ieee80211_chswitch_work) Reseting beacon and conn monitor timers.
<0>[ 1099.490000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182349, u.mgd.beacon_timeout = 102400
<0>[ 1099.490000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 79954, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 1099.490000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1099.540000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 1099.540000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..			// Fast mode probe is 50ms
<0>[ 1099.540000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 1099.540000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 1099.540000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[ 1099.540000] ==MHX(ieee80211_sta_connection_lost) Lost reason=4. Generating CSA skb. scan_req=  (null)
<0>[ 1099.540000] ==MHX(ieee80211_sta_connection_lost) Total hop channels=19
<0>[ 1099.540000] ==MHX(ieee80211_sta_connection_lost) Channel[0]=2406
<0>[ 1099.540000] ==MHX(ieee80211_sta_connection_lost) Channel[1]=2410
<0>[ 1099.540000] ==MHX(ieee80211_sta_connection_lost) Channel[2]=2414*********
<0>[ 1099.540000] ==MHX(ieee80211_sta_connection_lost) Channel[3]=2418
<0>[ 1099.540000] ==MHX(ieee80211_sta_connection_lost) Channel[4]=2421
<0>[ 1099.540000] ==MHX(ieee80211_sta_connection_lost) Channel[5]=2425
<0>[ 1099.540000] ==MHX(ieee80211_sta_connection_lost) Channel[6]=2429
<0>[ 1099.540000] ==MHX(ieee80211_sta_connection_lost) Channel[7]=2433
<0>[ 1099.540000] ==MHX(ieee80211_sta_connection_lost) Channel[8]=2437
<0>[ 1099.540000] ==MHX(ieee80211_sta_connection_lost) Channel[9]=2441
<0>[ 1099.540000] ==MHX(ieee80211_sta_connection_lost) Channel[10]=2445
<0>[ 1099.540000] ==MHX(ieee80211_sta_connection_lost) Channel[11]=2449
<0>[ 1099.540000] ==MHX(ieee80211_sta_connection_lost) Channel[12]=2453
<0>[ 1099.540000] ==MHX(ieee80211_sta_connection_lost) Channel[13]=2457
<0>[ 1099.540000] ==MHX(ieee80211_sta_connection_lost) Channel[14]=2461
<0>[ 1099.540000] ==MHX(ieee80211_sta_connection_lost) Channel[15]=2465
<0>[ 1099.540000] ==MHX(ieee80211_sta_connection_lost) Channel[16]=2469
<0>[ 1099.540000] ==MHX(ieee80211_sta_connection_lost) Channel[17]=2473
<0>[ 1099.540000] ==MHX(ieee80211_sta_connection_lost) Channel[18]=2477
<0>[ 1099.540000] ==MHX(ieee80211_sta_connection_lost) Channel[19]=0
<0>[ 1099.540000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182354, u.mgd.beacon_timeout = 102400
<0>[ 1099.540000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c24
<0>[ 1099.550000] ==MHX1.4(ieee80211_chswitch_work) Reseting beacon and conn monitor timers.
<0>[ 1099.550000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182355, u.mgd.beacon_timeout = 102400
<0>[ 1099.550000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 79960, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 1099.550000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1099.600000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 1099.600000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..			// Fast mode probe is 50ms
<0>[ 1099.600000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 1099.600000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 1099.600000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[ 1099.600000] ==MHX(ieee80211_sta_connection_lost) Lost reason=4. Generating CSA skb. scan_req=  (null)
<0>[ 1099.600000] ==MHX(ieee80211_sta_connection_lost) Total hop channels=19
<0>[ 1099.600000] ==MHX(ieee80211_sta_connection_lost) Channel[0]=2406
<0>[ 1099.600000] ==MHX(ieee80211_sta_connection_lost) Channel[1]=2410
<0>[ 1099.600000] ==MHX(ieee80211_sta_connection_lost) Channel[2]=2414
<0>[ 1099.600000] ==MHX(ieee80211_sta_connection_lost) Channel[3]=2418*********
<0>[ 1099.600000] ==MHX(ieee80211_sta_connection_lost) Channel[4]=2421
<0>[ 1099.600000] ==MHX(ieee80211_sta_connection_lost) Channel[5]=2425
<0>[ 1099.600000] ==MHX(ieee80211_sta_connection_lost) Channel[6]=2429
<0>[ 1099.600000] ==MHX(ieee80211_sta_connection_lost) Channel[7]=2433
<0>[ 1099.600000] ==MHX(ieee80211_sta_connection_lost) Channel[8]=2437
<0>[ 1099.600000] ==MHX(ieee80211_sta_connection_lost) Channel[9]=2441
<0>[ 1099.600000] ==MHX(ieee80211_sta_connection_lost) Channel[10]=2445
<0>[ 1099.600000] ==MHX(ieee80211_sta_connection_lost) Channel[11]=2449
<0>[ 1099.600000] ==MHX(ieee80211_sta_connection_lost) Channel[12]=2453
<0>[ 1099.600000] ==MHX(ieee80211_sta_connection_lost) Channel[13]=2457
<0>[ 1099.600000] ==MHX(ieee80211_sta_connection_lost) Channel[14]=2461
<0>[ 1099.600000] ==MHX(ieee80211_sta_connection_lost) Channel[15]=2465
<0>[ 1099.600000] ==MHX(ieee80211_sta_connection_lost) Channel[16]=2469
<0>[ 1099.600000] ==MHX(ieee80211_sta_connection_lost) Channel[17]=2473
<0>[ 1099.600000] ==MHX(ieee80211_sta_connection_lost) Channel[18]=2477
<0>[ 1099.600000] ==MHX(ieee80211_sta_connection_lost) Channel[19]=0
<0>[ 1099.600000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182360, u.mgd.beacon_timeout = 102400
<0>[ 1099.600000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c24
<0>[ 1099.610000] ==MHX1.4(ieee80211_chswitch_work) Reseting beacon and conn monitor timers.
<0>[ 1099.610000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182361, u.mgd.beacon_timeout = 102400
<0>[ 1099.610000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 79966, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 1099.610000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1099.660000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 1099.660000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..			// Fast mode probe is 50ms
<0>[ 1099.660000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 1099.660000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 1099.660000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[ 1099.660000] ==MHX(ieee80211_sta_connection_lost) Lost reason=4. Generating CSA skb. scan_req=  (null)
<0>[ 1099.660000] ==MHX(ieee80211_sta_connection_lost) Total hop channels=19
<0>[ 1099.660000] ==MHX(ieee80211_sta_connection_lost) Channel[0]=2406
<0>[ 1099.660000] ==MHX(ieee80211_sta_connection_lost) Channel[1]=2410
<0>[ 1099.660000] ==MHX(ieee80211_sta_connection_lost) Channel[2]=2414
<0>[ 1099.660000] ==MHX(ieee80211_sta_connection_lost) Channel[3]=2418
<0>[ 1099.660000] ==MHX(ieee80211_sta_connection_lost) Channel[4]=2421*********
<0>[ 1099.660000] ==MHX(ieee80211_sta_connection_lost) Channel[5]=2425
<0>[ 1099.660000] ==MHX(ieee80211_sta_connection_lost) Channel[6]=2429
<0>[ 1099.660000] ==MHX(ieee80211_sta_connection_lost) Channel[7]=2433
<0>[ 1099.660000] ==MHX(ieee80211_sta_connection_lost) Channel[8]=2437
<0>[ 1099.660000] ==MHX(ieee80211_sta_connection_lost) Channel[9]=2441
<0>[ 1099.660000] ==MHX(ieee80211_sta_connection_lost) Channel[10]=2445
<0>[ 1099.660000] ==MHX(ieee80211_sta_connection_lost) Channel[11]=2449
<0>[ 1099.660000] ==MHX(ieee80211_sta_connection_lost) Channel[12]=2453
<0>[ 1099.660000] ==MHX(ieee80211_sta_connection_lost) Channel[13]=2457
<0>[ 1099.660000] ==MHX(ieee80211_sta_connection_lost) Channel[14]=2461
<0>[ 1099.660000] ==MHX(ieee80211_sta_connection_lost) Channel[15]=2465
<0>[ 1099.660000] ==MHX(ieee80211_sta_connection_lost) Channel[16]=2469
<0>[ 1099.660000] ==MHX(ieee80211_sta_connection_lost) Channel[17]=2473
<0>[ 1099.660000] ==MHX(ieee80211_sta_connection_lost) Channel[18]=2477
<0>[ 1099.660000] ==MHX(ieee80211_sta_connection_lost) Channel[19]=0
<0>[ 1099.660000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182366, u.mgd.beacon_timeout = 102400
<0>[ 1099.660000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c24
<0>[ 1099.670000] ==MHX1.4(ieee80211_chswitch_work) Reseting beacon and conn monitor timers.
<0>[ 1099.670000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182367, u.mgd.beacon_timeout = 102400
<0>[ 1099.670000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 79972, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 1099.670000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1099.720000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 1099.720000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 1099.720000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 1099.720000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 1099.720000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[ 1099.720000] ==MHX(ieee80211_sta_connection_lost) Lost reason=4. Generating CSA skb. scan_req=  (null)
<0>[ 1099.720000] ==MHX(ieee80211_sta_connection_lost) Total hop channels=19
<0>[ 1099.720000] ==MHX(ieee80211_sta_connection_lost) Channel[0]=2406
<0>[ 1099.720000] ==MHX(ieee80211_sta_connection_lost) Channel[1]=2410
<0>[ 1099.720000] ==MHX(ieee80211_sta_connection_lost) Channel[2]=2414
<0>[ 1099.720000] ==MHX(ieee80211_sta_connection_lost) Channel[3]=2418
<0>[ 1099.720000] ==MHX(ieee80211_sta_connection_lost) Channel[4]=2421
<0>[ 1099.720000] ==MHX(ieee80211_sta_connection_lost) Channel[5]=2425*********
<0>[ 1099.720000] ==MHX(ieee80211_sta_connection_lost) Channel[6]=2429
<0>[ 1099.720000] ==MHX(ieee80211_sta_connection_lost) Channel[7]=2433
<0>[ 1099.720000] ==MHX(ieee80211_sta_connection_lost) Channel[8]=2437
<0>[ 1099.720000] ==MHX(ieee80211_sta_connection_lost) Channel[9]=2441
<0>[ 1099.720000] ==MHX(ieee80211_sta_connection_lost) Channel[10]=2445
<0>[ 1099.720000] ==MHX(ieee80211_sta_connection_lost) Channel[11]=2449
<0>[ 1099.720000] ==MHX(ieee80211_sta_connection_lost) Channel[12]=2453
<0>[ 1099.720000] ==MHX(ieee80211_sta_connection_lost) Channel[13]=2457
<0>[ 1099.720000] ==MHX(ieee80211_sta_connection_lost) Channel[14]=2461
<0>[ 1099.720000] ==MHX(ieee80211_sta_connection_lost) Channel[15]=2465
<0>[ 1099.720000] ==MHX(ieee80211_sta_connection_lost) Channel[16]=2469
<0>[ 1099.720000] ==MHX(ieee80211_sta_connection_lost) Channel[17]=2473
<0>[ 1099.720000] ==MHX(ieee80211_sta_connection_lost) Channel[18]=2477
<0>[ 1099.720000] ==MHX(ieee80211_sta_connection_lost) Channel[19]=0
<0>[ 1099.720000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182372, u.mgd.beacon_timeout = 102400
<0>[ 1099.720000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c24
<0>[ 1099.730000] ==MHX1.4(ieee80211_chswitch_work) Reseting beacon and conn monitor timers.
<0>[ 1099.730000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182373, u.mgd.beacon_timeout = 102400
<0>[ 1099.730000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 79978, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 1099.730000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1099.780000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 1099.780000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 1099.780000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 1099.780000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 1099.780000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[ 1099.780000] ==MHX(ieee80211_sta_connection_lost) Lost reason=4. Generating CSA skb. scan_req=  (null)
<0>[ 1099.780000] ==MHX(ieee80211_sta_connection_lost) Total hop channels=19
<0>[ 1099.780000] ==MHX(ieee80211_sta_connection_lost) Channel[0]=2406
<0>[ 1099.780000] ==MHX(ieee80211_sta_connection_lost) Channel[1]=2410
<0>[ 1099.780000] ==MHX(ieee80211_sta_connection_lost) Channel[2]=2414
<0>[ 1099.780000] ==MHX(ieee80211_sta_connection_lost) Channel[3]=2418
<0>[ 1099.780000] ==MHX(ieee80211_sta_connection_lost) Channel[4]=2421
<0>[ 1099.780000] ==MHX(ieee80211_sta_connection_lost) Channel[5]=2425
<0>[ 1099.780000] ==MHX(ieee80211_sta_connection_lost) Channel[6]=2429*********
<0>[ 1099.780000] ==MHX(ieee80211_sta_connection_lost) Channel[7]=2433
<0>[ 1099.780000] ==MHX(ieee80211_sta_connection_lost) Channel[8]=2437
<0>[ 1099.780000] ==MHX(ieee80211_sta_connection_lost) Channel[9]=2441
<0>[ 1099.780000] ==MHX(ieee80211_sta_connection_lost) Channel[10]=2445
<0>[ 1099.780000] ==MHX(ieee80211_sta_connection_lost) Channel[11]=2449
<0>[ 1099.780000] ==MHX(ieee80211_sta_connection_lost) Channel[12]=2453
<0>[ 1099.780000] ==MHX(ieee80211_sta_connection_lost) Channel[13]=2457
<0>[ 1099.780000] ==MHX(ieee80211_sta_connection_lost) Channel[14]=2461
<0>[ 1099.780000] ==MHX(ieee80211_sta_connection_lost) Channel[15]=2465
<0>[ 1099.780000] ==MHX(ieee80211_sta_connection_lost) Channel[16]=2469
<0>[ 1099.780000] ==MHX(ieee80211_sta_connection_lost) Channel[17]=2473
<0>[ 1099.780000] ==MHX(ieee80211_sta_connection_lost) Channel[18]=2477
<0>[ 1099.780000] ==MHX(ieee80211_sta_connection_lost) Channel[19]=0
<0>[ 1099.780000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182378, u.mgd.beacon_timeout = 102400
<0>[ 1099.780000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c24
<0>[ 1099.790000] ==MHX1.4(ieee80211_chswitch_work) Reseting beacon and conn monitor timers.
<0>[ 1099.790000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182379, u.mgd.beacon_timeout = 102400
<0>[ 1099.790000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 79984, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 1099.790000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1099.840000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 1099.840000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 1099.840000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 1099.840000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 1099.840000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[ 1099.840000] ==MHX(ieee80211_sta_connection_lost) Lost reason=4. Generating CSA skb. scan_req=  (null)
<0>[ 1099.840000] ==MHX(ieee80211_sta_connection_lost) Total hop channels=19
<0>[ 1099.840000] ==MHX(ieee80211_sta_connection_lost) Channel[0]=2406
<0>[ 1099.840000] ==MHX(ieee80211_sta_connection_lost) Channel[1]=2410
<0>[ 1099.840000] ==MHX(ieee80211_sta_connection_lost) Channel[2]=2414
<0>[ 1099.840000] ==MHX(ieee80211_sta_connection_lost) Channel[3]=2418
<0>[ 1099.840000] ==MHX(ieee80211_sta_connection_lost) Channel[4]=2421
<0>[ 1099.840000] ==MHX(ieee80211_sta_connection_lost) Channel[5]=2425
<0>[ 1099.840000] ==MHX(ieee80211_sta_connection_lost) Channel[6]=2429
<0>[ 1099.840000] ==MHX(ieee80211_sta_connection_lost) Channel[7]=2433*********
<0>[ 1099.840000] ==MHX(ieee80211_sta_connection_lost) Channel[8]=2437
<0>[ 1099.840000] ==MHX(ieee80211_sta_connection_lost) Channel[9]=2441
<0>[ 1099.840000] ==MHX(ieee80211_sta_connection_lost) Channel[10]=2445
<0>[ 1099.840000] ==MHX(ieee80211_sta_connection_lost) Channel[11]=2449
<0>[ 1099.840000] ==MHX(ieee80211_sta_connection_lost) Channel[12]=2453
<0>[ 1099.840000] ==MHX(ieee80211_sta_connection_lost) Channel[13]=2457
<0>[ 1099.840000] ==MHX(ieee80211_sta_connection_lost) Channel[14]=2461
<0>[ 1099.840000] ==MHX(ieee80211_sta_connection_lost) Channel[15]=2465
<0>[ 1099.840000] ==MHX(ieee80211_sta_connection_lost) Channel[16]=2469
<0>[ 1099.840000] ==MHX(ieee80211_sta_connection_lost) Channel[17]=2473
<0>[ 1099.840000] ==MHX(ieee80211_sta_connection_lost) Channel[18]=2477
<0>[ 1099.840000] ==MHX(ieee80211_sta_connection_lost) Channel[19]=0
<0>[ 1099.840000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182384, u.mgd.beacon_timeout = 102400
<0>[ 1099.840000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c24
<0>[ 1099.850000] ==MHX1.4(ieee80211_chswitch_work) Reseting beacon and conn monitor timers.
<0>[ 1099.850000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182385, u.mgd.beacon_timeout = 102400
<0>[ 1099.850000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 79990, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 1099.850000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1099.900000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 1099.900000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 1099.900000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 1099.900000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 1099.900000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[ 1099.900000] ==MHX(ieee80211_sta_connection_lost) Lost reason=4. Generating CSA skb. scan_req=  (null)
<0>[ 1099.900000] ==MHX(ieee80211_sta_connection_lost) Total hop channels=19
<0>[ 1099.900000] ==MHX(ieee80211_sta_connection_lost) Channel[0]=2406
<0>[ 1099.900000] ==MHX(ieee80211_sta_connection_lost) Channel[1]=2410
<0>[ 1099.900000] ==MHX(ieee80211_sta_connection_lost) Channel[2]=2414
<0>[ 1099.900000] ==MHX(ieee80211_sta_connection_lost) Channel[3]=2418
<0>[ 1099.900000] ==MHX(ieee80211_sta_connection_lost) Channel[4]=2421
<0>[ 1099.900000] ==MHX(ieee80211_sta_connection_lost) Channel[5]=2425
<0>[ 1099.900000] ==MHX(ieee80211_sta_connection_lost) Channel[6]=2429
<0>[ 1099.900000] ==MHX(ieee80211_sta_connection_lost) Channel[7]=2433
<0>[ 1099.900000] ==MHX(ieee80211_sta_connection_lost) Channel[8]=2437*********
<0>[ 1099.900000] ==MHX(ieee80211_sta_connection_lost) Channel[9]=2441
<0>[ 1099.900000] ==MHX(ieee80211_sta_connection_lost) Channel[10]=2445
<0>[ 1099.900000] ==MHX(ieee80211_sta_connection_lost) Channel[11]=2449
<0>[ 1099.900000] ==MHX(ieee80211_sta_connection_lost) Channel[12]=2453
<0>[ 1099.900000] ==MHX(ieee80211_sta_connection_lost) Channel[13]=2457
<0>[ 1099.900000] ==MHX(ieee80211_sta_connection_lost) Channel[14]=2461
<0>[ 1099.900000] ==MHX(ieee80211_sta_connection_lost) Channel[15]=2465
<0>[ 1099.900000] ==MHX(ieee80211_sta_connection_lost) Channel[16]=2469
<0>[ 1099.900000] ==MHX(ieee80211_sta_connection_lost) Channel[17]=2473
<0>[ 1099.900000] ==MHX(ieee80211_sta_connection_lost) Channel[18]=2477
<0>[ 1099.900000] ==MHX(ieee80211_sta_connection_lost) Channel[19]=0
<0>[ 1099.900000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182390, u.mgd.beacon_timeout = 102400
<0>[ 1099.900000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c24
<0>[ 1099.910000] ==MHX1.4(ieee80211_chswitch_work) Reseting beacon and conn monitor timers.
<0>[ 1099.910000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182391, u.mgd.beacon_timeout = 102400
<0>[ 1099.910000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 79996, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 1099.910000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1099.960000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 1099.960000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 1099.960000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 1099.960000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 1099.960000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[ 1099.960000] ==MHX(ieee80211_sta_connection_lost) Lost reason=4. Generating CSA skb. scan_req=  (null)
<0>[ 1099.960000] ==MHX(ieee80211_sta_connection_lost) Total hop channels=19
<0>[ 1099.960000] ==MHX(ieee80211_sta_connection_lost) Channel[0]=2406
<0>[ 1099.960000] ==MHX(ieee80211_sta_connection_lost) Channel[1]=2410
<0>[ 1099.960000] ==MHX(ieee80211_sta_connection_lost) Channel[2]=2414
<0>[ 1099.960000] ==MHX(ieee80211_sta_connection_lost) Channel[3]=2418
<0>[ 1099.960000] ==MHX(ieee80211_sta_connection_lost) Channel[4]=2421
<0>[ 1099.960000] ==MHX(ieee80211_sta_connection_lost) Channel[5]=2425
<0>[ 1099.960000] ==MHX(ieee80211_sta_connection_lost) Channel[6]=2429
<0>[ 1099.960000] ==MHX(ieee80211_sta_connection_lost) Channel[7]=2433
<0>[ 1099.960000] ==MHX(ieee80211_sta_connection_lost) Channel[8]=2437
<0>[ 1099.960000] ==MHX(ieee80211_sta_connection_lost) Channel[9]=2441*********
<0>[ 1099.960000] ==MHX(ieee80211_sta_connection_lost) Channel[10]=2445
<0>[ 1099.960000] ==MHX(ieee80211_sta_connection_lost) Channel[11]=2449
<0>[ 1099.960000] ==MHX(ieee80211_sta_connection_lost) Channel[12]=2453
<0>[ 1099.960000] ==MHX(ieee80211_sta_connection_lost) Channel[13]=2457
<0>[ 1099.960000] ==MHX(ieee80211_sta_connection_lost) Channel[14]=2461
<0>[ 1099.960000] ==MHX(ieee80211_sta_connection_lost) Channel[15]=2465
<0>[ 1099.960000] ==MHX(ieee80211_sta_connection_lost) Channel[16]=2469
<0>[ 1099.960000] ==MHX(ieee80211_sta_connection_lost) Channel[17]=2473
<0>[ 1099.960000] ==MHX(ieee80211_sta_connection_lost) Channel[18]=2477
<0>[ 1099.960000] ==MHX(ieee80211_sta_connection_lost) Channel[19]=0
<0>[ 1099.960000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182396, u.mgd.beacon_timeout = 102400
<0>[ 1099.960000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c24
<0>[ 1099.970000] ==MHX1.4(ieee80211_chswitch_work) Reseting beacon and conn monitor timers.
<0>[ 1099.970000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182397, u.mgd.beacon_timeout = 102400
<0>[ 1099.970000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 80002, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 1099.970000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1100.020000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 1100.020000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..			// Fast mode probe is 50ms
<0>[ 1100.020000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 1100.020000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 1100.020000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[ 1100.020000] ==MHX(ieee80211_sta_connection_lost) Lost reason=4. Generating CSA skb. scan_req=  (null)
<0>[ 1100.020000] ==MHX(ieee80211_sta_connection_lost) Total hop channels=19
<0>[ 1100.020000] ==MHX(ieee80211_sta_connection_lost) Channel[0]=2406
<0>[ 1100.020000] ==MHX(ieee80211_sta_connection_lost) Channel[1]=2410
<0>[ 1100.020000] ==MHX(ieee80211_sta_connection_lost) Channel[2]=2414
<0>[ 1100.020000] ==MHX(ieee80211_sta_connection_lost) Channel[3]=2418
<0>[ 1100.020000] ==MHX(ieee80211_sta_connection_lost) Channel[4]=2421
<0>[ 1100.020000] ==MHX(ieee80211_sta_connection_lost) Channel[5]=2425
<0>[ 1100.020000] ==MHX(ieee80211_sta_connection_lost) Channel[6]=2429
<0>[ 1100.020000] ==MHX(ieee80211_sta_connection_lost) Channel[7]=2433
<0>[ 1100.020000] ==MHX(ieee80211_sta_connection_lost) Channel[8]=2437
<0>[ 1100.020000] ==MHX(ieee80211_sta_connection_lost) Channel[9]=2441
<0>[ 1100.020000] ==MHX(ieee80211_sta_connection_lost) Channel[10]=2445*********
<0>[ 1100.020000] ==MHX(ieee80211_sta_connection_lost) Channel[11]=2449
<0>[ 1100.020000] ==MHX(ieee80211_sta_connection_lost) Channel[12]=2453
<0>[ 1100.020000] ==MHX(ieee80211_sta_connection_lost) Channel[13]=2457
<0>[ 1100.020000] ==MHX(ieee80211_sta_connection_lost) Channel[14]=2461
<0>[ 1100.020000] ==MHX(ieee80211_sta_connection_lost) Channel[15]=2465
<0>[ 1100.020000] ==MHX(ieee80211_sta_connection_lost) Channel[16]=2469
<0>[ 1100.020000] ==MHX(ieee80211_sta_connection_lost) Channel[17]=2473
<0>[ 1100.020000] ==MHX(ieee80211_sta_connection_lost) Channel[18]=2477
<0>[ 1100.020000] ==MHX(ieee80211_sta_connection_lost) Channel[19]=0
<0>[ 1100.020000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182402, u.mgd.beacon_timeout = 102400
<0>[ 1100.020000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c24
<0>[ 1100.030000] ==MHX1.4(ieee80211_chswitch_work) Reseting beacon and conn monitor timers.
<0>[ 1100.030000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182403, u.mgd.beacon_timeout = 102400
<0>[ 1100.030000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 80008, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 1100.030000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1100.080000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 1100.080000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..			// Fast mode probe is 50ms
<0>[ 1100.080000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 1100.080000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 1100.080000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[ 1100.080000] ==MHX(ieee80211_sta_connection_lost) Lost reason=4. Generating CSA skb. scan_req=  (null)
<0>[ 1100.080000] ==MHX(ieee80211_sta_connection_lost) Total hop channels=19
<0>[ 1100.080000] ==MHX(ieee80211_sta_connection_lost) Channel[0]=2406
<0>[ 1100.080000] ==MHX(ieee80211_sta_connection_lost) Channel[1]=2410
<0>[ 1100.080000] ==MHX(ieee80211_sta_connection_lost) Channel[2]=2414
<0>[ 1100.080000] ==MHX(ieee80211_sta_connection_lost) Channel[3]=2418
<0>[ 1100.080000] ==MHX(ieee80211_sta_connection_lost) Channel[4]=2421
<0>[ 1100.080000] ==MHX(ieee80211_sta_connection_lost) Channel[5]=2425
<0>[ 1100.080000] ==MHX(ieee80211_sta_connection_lost) Channel[6]=2429
<0>[ 1100.080000] ==MHX(ieee80211_sta_connection_lost) Channel[7]=2433
<0>[ 1100.080000] ==MHX(ieee80211_sta_connection_lost) Channel[8]=2437
<0>[ 1100.080000] ==MHX(ieee80211_sta_connection_lost) Channel[9]=2441
<0>[ 1100.080000] ==MHX(ieee80211_sta_connection_lost) Channel[10]=2445
<0>[ 1100.080000] ==MHX(ieee80211_sta_connection_lost) Channel[11]=2449*********
<0>[ 1100.080000] ==MHX(ieee80211_sta_connection_lost) Channel[12]=2453
<0>[ 1100.080000] ==MHX(ieee80211_sta_connection_lost) Channel[13]=2457
<0>[ 1100.080000] ==MHX(ieee80211_sta_connection_lost) Channel[14]=2461
<0>[ 1100.080000] ==MHX(ieee80211_sta_connection_lost) Channel[15]=2465
<0>[ 1100.080000] ==MHX(ieee80211_sta_connection_lost) Channel[16]=2469
<0>[ 1100.080000] ==MHX(ieee80211_sta_connection_lost) Channel[17]=2473
<0>[ 1100.080000] ==MHX(ieee80211_sta_connection_lost) Channel[18]=2477
<0>[ 1100.080000] ==MHX(ieee80211_sta_connection_lost) Channel[19]=0
<0>[ 1100.080000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182408, u.mgd.beacon_timeout = 102400
<0>[ 1100.080000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c24
<0>[ 1100.090000] ==MHX1.4(ieee80211_chswitch_work) Reseting beacon and conn monitor timers.
<0>[ 1100.090000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182409, u.mgd.beacon_timeout = 102400
<0>[ 1100.090000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 80014, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 1100.090000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1100.140000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 1100.140000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..			// Change back to normal probe is 50ms * 20 = 1S
<0>[ 1100.140000] ==MHX1.3(ieee80211_sta_tx_notify) ack=1
<0>[ 1100.140000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 80019, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 1100.140000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<0>[ 1100.140000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182414, u.mgd.beacon_timeout = 102400
<0>[ 1100.150000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1100.150000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182415, u.mgd.beacon_timeout = 102400
<0>[ 1100.150000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1100.250000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182425, u.mgd.beacon_timeout = 102400
<0>[ 1100.250000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1100.350000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182435, u.mgd.beacon_timeout = 102400
<0>[ 1100.350000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1100.460000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182446, u.mgd.beacon_timeout = 102400
<0>[ 1100.460000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1100.560000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182456, u.mgd.beacon_timeout = 102400
<0>[ 1100.560000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1100.660000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182466, u.mgd.beacon_timeout = 102400
<0>[ 1100.660000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1100.760000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182476, u.mgd.beacon_timeout = 102400
<0>[ 1100.760000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1100.870000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182487, u.mgd.beacon_timeout = 102400
<0>[ 1100.870000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1100.970000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182497, u.mgd.beacon_timeout = 102400
<0>[ 1100.970000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1101.000000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 1101.000000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..			// Change back to normal probe is 50ms * 20 = 1S
<0>[ 1101.000000] ==MHX1.3(ieee80211_sta_tx_notify) ack=1
<0>[ 1101.000000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 80105, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 1101.000000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<0>[ 1101.000000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182500, u.mgd.beacon_timeout = 102400
<0>[ 1101.010000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1101.070000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182507, u.mgd.beacon_timeout = 102400
<0>[ 1101.070000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1101.170000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182517, u.mgd.beacon_timeout = 102400
<0>[ 1101.170000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1101.270000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182527, u.mgd.beacon_timeout = 102400
<0>[ 1101.270000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1101.380000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182538, u.mgd.beacon_timeout = 102400
<0>[ 1101.380000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1101.480000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182548, u.mgd.beacon_timeout = 102400
<0>[ 1101.480000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1101.580000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182558, u.mgd.beacon_timeout = 102400
<0>[ 1101.580000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1101.680000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182568, u.mgd.beacon_timeout = 102400
<0>[ 1101.680000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1101.790000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182579, u.mgd.beacon_timeout = 102400
<0>[ 1101.790000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1101.990000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182599, u.mgd.beacon_timeout = 102400
<0>[ 1101.990000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1102.000000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 1102.000000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..			// Change back to normal probe is 50ms * 20 = 1S
<0>[ 1102.000000] ==MHX1.3(ieee80211_sta_tx_notify) ack=1
<0>[ 1102.000000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 80205, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 1102.000000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<0>[ 1102.000000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182600, u.mgd.beacon_timeout = 102400
<0>[ 1102.010000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1102.090000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182609, u.mgd.beacon_timeout = 102400
<0>[ 1102.090000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1102.200000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182620, u.mgd.beacon_timeout = 102400
<0>[ 1102.200000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1102.300000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182630, u.mgd.beacon_timeout = 102400
<0>[ 1102.300000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1102.400000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182640, u.mgd.beacon_timeout = 102400
<0>[ 1102.400000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1102.610000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182661, u.mgd.beacon_timeout = 102400
<0>[ 1102.610000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1102.710000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182671, u.mgd.beacon_timeout = 102400
<0>[ 1102.710000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1102.810000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182681, u.mgd.beacon_timeout = 102400
<0>[ 1102.810000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1102.910000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182691, u.mgd.beacon_timeout = 102400
<0>[ 1102.910000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1103.000000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 1103.000000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..			// Change back to normal probe is 50ms * 20 = 1S
<0>[ 1103.000000] ==MHX1.3(ieee80211_sta_tx_notify) ack=1
<0>[ 1103.000000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 80305, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 1103.000000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<0>[ 1103.000000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182700, u.mgd.beacon_timeout = 102400
<0>[ 1103.010000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1103.020000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182702, u.mgd.beacon_timeout = 102400
<0>[ 1103.020000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1103.120000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182712, u.mgd.beacon_timeout = 102400
<0>[ 1103.120000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1103.220000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182722, u.mgd.beacon_timeout = 102400
<0>[ 1103.220000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1103.320000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182732, u.mgd.beacon_timeout = 102400
<0>[ 1103.320000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1103.430000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182743, u.mgd.beacon_timeout = 102400
<0>[ 1103.430000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1103.530000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182753, u.mgd.beacon_timeout = 102400
<0>[ 1103.530000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1103.630000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182763, u.mgd.beacon_timeout = 102400
<0>[ 1103.630000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1103.730000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182773, u.mgd.beacon_timeout = 102400
<0>[ 1103.730000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1103.830000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182783, u.mgd.beacon_timeout = 102400
<0>[ 1103.830000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1104.000000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 1104.000000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..			// Change back to normal probe is 50ms * 20 = 1S
<0>[ 1104.000000] ==MHX1.3(ieee80211_sta_tx_notify) ack=1
<0>[ 1104.000000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 80405, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 1104.000000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<0>[ 1104.000000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182800, u.mgd.beacon_timeout = 102400
<0>[ 1104.010000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1104.140000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182814, u.mgd.beacon_timeout = 102400
<0>[ 1104.140000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1104.240000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182824, u.mgd.beacon_timeout = 102400
<0>[ 1104.240000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1104.350000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182835, u.mgd.beacon_timeout = 102400
<0>[ 1104.350000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1104.650000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182865, u.mgd.beacon_timeout = 102400
<0>[ 1104.650000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1104.760000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182876, u.mgd.beacon_timeout = 102400
<0>[ 1104.760000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1104.860000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182886, u.mgd.beacon_timeout = 102400
<0>[ 1104.860000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1104.930000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 80498, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 1104.960000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182896, u.mgd.beacon_timeout = 102400
<0>[ 1104.960000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1104.980000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 1104.980000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..			// Change back to normal probe is 50ms * 20 = 1S
<0>[ 1104.980000] ==MHX1.3(ieee80211_sta_tx_notify) ack=1
<0>[ 1104.980000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 80503, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 1104.980000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<0>[ 1104.980000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182898, u.mgd.beacon_timeout = 102400
<0>[ 1104.990000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1105.060000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182906, u.mgd.beacon_timeout = 102400
<0>[ 1105.060000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1105.120000] ==MHX1.3(ieee80211_sta_tx_notify) ack=1
<0>[ 1105.120000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 80517, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 1105.170000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 1105.170000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 1105.170000] ==MHX1.3(ieee80211_sta_tx_notify) ack=1
<0>[ 1105.170000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 80522, IEEE80211_CONNECTION_IDLE_TIME=5
<7>[ 1105.170000] wlan0: cancelling AP probe due to a received beacon
<0>[ 1105.170000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182917, u.mgd.beacon_timeout = 102400
<0>[ 1105.170000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182917, u.mgd.beacon_timeout = 102400
<0>[ 1105.170000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1105.180000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1105.680000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182968, u.mgd.beacon_timeout = 102400
<0>[ 1105.680000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1105.780000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182978, u.mgd.beacon_timeout = 102400
<0>[ 1105.780000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1105.880000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182988, u.mgd.beacon_timeout = 102400
<0>[ 1105.880000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1105.990000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 182999, u.mgd.beacon_timeout = 102400
<0>[ 1105.990000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1106.000000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 1106.000000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..			// Change back to normal probe is 50ms * 20 = 1S
<0>[ 1106.000000] ==MHX1.3(ieee80211_sta_tx_notify) ack=1
<0>[ 1106.000000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 80605, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 1106.000000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<0>[ 1106.000000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 183000, u.mgd.beacon_timeout = 102400
<0>[ 1106.010000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1106.090000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 183009, u.mgd.beacon_timeout = 102400
<0>[ 1106.090000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1106.190000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 183019, u.mgd.beacon_timeout = 102400
<0>[ 1106.190000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1106.290000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 183029, u.mgd.beacon_timeout = 102400
<0>[ 1106.290000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1106.390000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 183039, u.mgd.beacon_timeout = 102400
<0>[ 1106.390000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1106.500000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 183050, u.mgd.beacon_timeout = 102400
<0>[ 1106.500000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1106.600000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 183060, u.mgd.beacon_timeout = 102400
<0>[ 1106.600000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1106.700000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 183070, u.mgd.beacon_timeout = 102400
<0>[ 1106.700000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1106.800000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 183080, u.mgd.beacon_timeout = 102400
<0>[ 1106.800000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1106.910000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 183091, u.mgd.beacon_timeout = 102400
<0>[ 1106.910000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1107.000000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 1107.000000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..			// Change back to normal probe is 50ms * 20 = 1S
<0>[ 1107.000000] ==MHX1.3(ieee80211_sta_tx_notify) ack=1
<0>[ 1107.000000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 80705, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 1107.000000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<0>[ 1107.000000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 183100, u.mgd.beacon_timeout = 102400
<0>[ 1107.010000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1107.010000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 183101, u.mgd.beacon_timeout = 102400
<0>[ 1107.010000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1107.210000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 183121, u.mgd.beacon_timeout = 102400
<0>[ 1107.210000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1107.320000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 183132, u.mgd.beacon_timeout = 102400
<0>[ 1107.320000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1107.420000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 183142, u.mgd.beacon_timeout = 102400
<0>[ 1107.420000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1107.520000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 183152, u.mgd.beacon_timeout = 102400
<0>[ 1107.520000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1107.620000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 183162, u.mgd.beacon_timeout = 102400
<0>[ 1107.620000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1107.730000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 183173, u.mgd.beacon_timeout = 102400
<0>[ 1107.730000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1107.830000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 183183, u.mgd.beacon_timeout = 102400
<0>[ 1107.830000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1107.930000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 183193, u.mgd.beacon_timeout = 102400
<0>[ 1107.930000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1108.000000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 1108.000000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..			// Change back to normal probe is 50ms * 20 = 1S
<0>[ 1108.000000] ==MHX1.3(ieee80211_sta_tx_notify) ack=1
<0>[ 1108.000000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 80805, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 1108.000000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<0>[ 1108.000000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 183200, u.mgd.beacon_timeout = 102400
<0>[ 1108.010000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1108.030000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 183203, u.mgd.beacon_timeout = 102400
<0>[ 1108.030000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1108.140000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 183214, u.mgd.beacon_timeout = 102400
<0>[ 1108.140000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1108.240000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 183224, u.mgd.beacon_timeout = 102400
<0>[ 1108.240000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1108.340000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 183234, u.mgd.beacon_timeout = 102400
<0>[ 1108.340000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 1108.440000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 183244, u.mgd.beacon_timeout = 102400


Increase the nullfunc tries to 3:
wireless.radio0.beacon_loss_count=10000
wireless.radio0.probe_wait_time=1
wireless.radio0.connection_idle_time=5
wireless.radio0.max_nullfunc_tries=3


<0>[ 2283.000000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2283.000000] ==MHX1.3(ieee80211_sta_tx_notify) ack=1
<0>[ 2283.000000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 198305, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 2283.000000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<0>[ 2283.000000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 300700, u.mgd.beacon_timeout = 102400
<0>[ 2283.010000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2283.170000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 300717, u.mgd.beacon_timeout = 102400
<0>[ 2283.170000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2283.270000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 300727, u.mgd.beacon_timeout = 102400
<0>[ 2283.270000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2283.380000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 300738, u.mgd.beacon_timeout = 102400
<0>[ 2283.380000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2283.480000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 300748, u.mgd.beacon_timeout = 102400
<0>[ 2283.480000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2283.790000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 300779, u.mgd.beacon_timeout = 102400
<0>[ 2283.790000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2283.890000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 300789, u.mgd.beacon_timeout = 102400
<0>[ 2283.890000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2283.990000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 300799, u.mgd.beacon_timeout = 102400
<0>[ 2283.990000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2284.000000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 2284.000000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2284.000000] ==MHX1.3(ieee80211_sta_tx_notify) ack=1
<0>[ 2284.000000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 198405, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 2284.000000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<0>[ 2284.000000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 300800, u.mgd.beacon_timeout = 102400
<0>[ 2284.010000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2284.090000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 300809, u.mgd.beacon_timeout = 102400
<0>[ 2284.090000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2284.190000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 300819, u.mgd.beacon_timeout = 102400
<0>[ 2284.190000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2284.300000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 300830, u.mgd.beacon_timeout = 102400
<0>[ 2284.300000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2284.400000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 300840, u.mgd.beacon_timeout = 102400
<0>[ 2284.400000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2284.500000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 300850, u.mgd.beacon_timeout = 102400
<0>[ 2284.500000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2284.600000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 300860, u.mgd.beacon_timeout = 102400
<0>[ 2284.600000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2284.710000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 300871, u.mgd.beacon_timeout = 102400
<0>[ 2284.710000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2284.810000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 300881, u.mgd.beacon_timeout = 102400
<0>[ 2284.810000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2284.910000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 300891, u.mgd.beacon_timeout = 102400
<0>[ 2284.910000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2285.000000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 2285.000000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2285.000000] ==MHX1.3(ieee80211_sta_tx_notify) ack=1
<0>[ 2285.000000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 198505, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 2285.000000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<0>[ 2285.000000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 300900, u.mgd.beacon_timeout = 102400
<0>[ 2285.010000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2285.010000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 300901, u.mgd.beacon_timeout = 102400
<0>[ 2285.010000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2285.120000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 300912, u.mgd.beacon_timeout = 102400
<0>[ 2285.120000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2285.320000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 300932, u.mgd.beacon_timeout = 102400
<0>[ 2285.320000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2285.420000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 300942, u.mgd.beacon_timeout = 102400
<0>[ 2285.420000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2285.530000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 300953, u.mgd.beacon_timeout = 102400
<0>[ 2285.530000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2285.630000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 300963, u.mgd.beacon_timeout = 102400
<0>[ 2285.630000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2285.830000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 300983, u.mgd.beacon_timeout = 102400
<0>[ 2285.830000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2285.940000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 300994, u.mgd.beacon_timeout = 102400
<0>[ 2285.940000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2286.000000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 2286.000000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2286.000000] ==MHX1.3(ieee80211_sta_tx_notify) ack=1
<0>[ 2286.000000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 198605, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 2286.000000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<0>[ 2286.000000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301000, u.mgd.beacon_timeout = 102400
<0>[ 2286.010000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2287.000000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 2287.000000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.000000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.000000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.000000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 1/3
<0>[ 2287.000000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.000000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.000000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.000000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 2/3
<0>[ 2287.000000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.000000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.000000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.000000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[ 2287.000000] ==MHX(ieee80211_sta_connection_lost) Lost reason=4. Generating CSA skb. scan_req=  (null)
<0>[ 2287.000000] ==MHX(ieee80211_sta_connection_lost) Total hop channels=19
<0>[ 2287.000000] ==MHX(ieee80211_sta_connection_lost) Channel[0]=2406
<0>[ 2287.000000] ==MHX(ieee80211_sta_connection_lost) Channel[1]=2410
<0>[ 2287.000000] ==MHX(ieee80211_sta_connection_lost) Channel[2]=2414
<0>[ 2287.000000] ==MHX(ieee80211_sta_connection_lost) Channel[3]=2418
<0>[ 2287.000000] ==MHX(ieee80211_sta_connection_lost) Channel[4]=2421

<0>[ 2287.000000] ==MHX(ieee80211_sta_connection_lost) Channel[5]=2425
<0>[ 2287.000000] ==MHX(ieee80211_sta_connection_lost) Channel[6]=2429
<0>[ 2287.000000] ==MHX(ieee80211_sta_connection_lost) Channel[7]=2433
<0>[ 2287.000000] ==MHX(ieee80211_sta_connection_lost) Channel[8]=2437
<0>[ 2287.000000] ==MHX(ieee80211_sta_connection_lost) Channel[9]=2441
<0>[ 2287.000000] ==MHX(ieee80211_sta_connection_lost) Channel[10]=2445
<0>[ 2287.000000] ==MHX(ieee80211_sta_connection_lost) Channel[11]=2449
<0>[ 2287.000000] ==MHX(ieee80211_sta_connection_lost) Channel[12]=2453
<0>[ 2287.000000] ==MHX(ieee80211_sta_connection_lost) Channel[13]=2457
<0>[ 2287.000000] ==MHX(ieee80211_sta_connection_lost) Channel[14]=2461*********
<0>[ 2287.000000] ==MHX(ieee80211_sta_connection_lost) Channel[15]=2465
<0>[ 2287.000000] ==MHX(ieee80211_sta_connection_lost) Channel[16]=2469
<0>[ 2287.000000] ==MHX(ieee80211_sta_connection_lost) Channel[17]=2473
<0>[ 2287.000000] ==MHX(ieee80211_sta_connection_lost) Channel[18]=2477
<0>[ 2287.000000] ==MHX(ieee80211_sta_connection_lost) Channel[19]=0
<0>[ 2287.000000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301100, u.mgd.beacon_timeout = 102400
<0>[ 2287.000000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c24
<0>[ 2287.010000] ==MHX1.4(ieee80211_chswitch_work) Reseting beacon and conn monitor timers.
<0>[ 2287.010000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301101, u.mgd.beacon_timeout = 102400
<0>[ 2287.010000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 198706, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 2287.010000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2287.060000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 2287.060000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.060000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.060000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.060000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 1/3
<0>[ 2287.060000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.060000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.060000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.060000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 2/3
<0>[ 2287.060000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.060000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.060000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.060000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[ 2287.060000] ==MHX(ieee80211_sta_connection_lost) Lost reason=4. Generating CSA skb. scan_req=  (null)
<0>[ 2287.060000] ==MHX(ieee80211_sta_connection_lost) Total hop channels=19
<0>[ 2287.060000] ==MHX(ieee80211_sta_connection_lost) Channel[0]=2406
<0>[ 2287.060000] ==MHX(ieee80211_sta_connection_lost) Channel[1]=2410
<0>[ 2287.060000] ==MHX(ieee80211_sta_connection_lost) Channel[2]=2414
<0>[ 2287.060000] ==MHX(ieee80211_sta_connection_lost) Channel[3]=2418
<0>[ 2287.060000] ==MHX(ieee80211_sta_connection_lost) Channel[4]=2421
<0>[ 2287.060000] ==MHX(ieee80211_sta_connection_lost) Channel[5]=2425
<0>[ 2287.060000] ==MHX(ieee80211_sta_connection_lost) Channel[6]=2429
<0>[ 2287.060000] ==MHX(ieee80211_sta_connection_lost) Channel[7]=2433
<0>[ 2287.060000] ==MHX(ieee80211_sta_connection_lost) Channel[8]=2437
<0>[ 2287.060000] ==MHX(ieee80211_sta_connection_lost) Channel[9]=2441
<0>[ 2287.060000] ==MHX(ieee80211_sta_connection_lost) Channel[10]=2445
<0>[ 2287.060000] ==MHX(ieee80211_sta_connection_lost) Channel[11]=2449
<0>[ 2287.060000] ==MHX(ieee80211_sta_connection_lost) Channel[12]=2453
<0>[ 2287.060000] ==MHX(ieee80211_sta_connection_lost) Channel[13]=2457
<0>[ 2287.060000] ==MHX(ieee80211_sta_connection_lost) Channel[14]=2461
<0>[ 2287.060000] ==MHX(ieee80211_sta_connection_lost) Channel[15]=2465*********
<0>[ 2287.060000] ==MHX(ieee80211_sta_connection_lost) Channel[16]=2469
<0>[ 2287.060000] ==MHX(ieee80211_sta_connection_lost) Channel[17]=2473
<0>[ 2287.060000] ==MHX(ieee80211_sta_connection_lost) Channel[18]=2477
<0>[ 2287.060000] ==MHX(ieee80211_sta_connection_lost) Channel[19]=0
<0>[ 2287.060000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301106, u.mgd.beacon_timeout = 102400
<0>[ 2287.060000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c24
<0>[ 2287.070000] ==MHX1.4(ieee80211_chswitch_work) Reseting beacon and conn monitor timers.
<0>[ 2287.070000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301107, u.mgd.beacon_timeout = 102400
<0>[ 2287.070000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 198712, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 2287.070000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2287.120000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 2287.120000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.120000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.120000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.120000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 1/3
<0>[ 2287.120000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.120000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.120000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.120000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 2/3
<0>[ 2287.120000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.120000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.120000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.120000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[ 2287.120000] ==MHX(ieee80211_sta_connection_lost) Lost reason=4. Generating CSA skb. scan_req=  (null)
<0>[ 2287.120000] ==MHX(ieee80211_sta_connection_lost) Total hop channels=19
<0>[ 2287.120000] ==MHX(ieee80211_sta_connection_lost) Channel[0]=2406
<0>[ 2287.120000] ==MHX(ieee80211_sta_connection_lost) Channel[1]=2410
<0>[ 2287.120000] ==MHX(ieee80211_sta_connection_lost) Channel[2]=2414
<0>[ 2287.120000] ==MHX(ieee80211_sta_connection_lost) Channel[3]=2418
<0>[ 2287.120000] ==MHX(ieee80211_sta_connection_lost) Channel[4]=2421
<0>[ 2287.120000] ==MHX(ieee80211_sta_connection_lost) Channel[5]=2425
<0>[ 2287.120000] ==MHX(ieee80211_sta_connection_lost) Channel[6]=2429
<0>[ 2287.120000] ==MHX(ieee80211_sta_connection_lost) Channel[7]=2433
<0>[ 2287.120000] ==MHX(ieee80211_sta_connection_lost) Channel[8]=2437
<0>[ 2287.120000] ==MHX(ieee80211_sta_connection_lost) Channel[9]=2441
<0>[ 2287.120000] ==MHX(ieee80211_sta_connection_lost) Channel[10]=2445
<0>[ 2287.120000] ==MHX(ieee80211_sta_connection_lost) Channel[11]=2449
<0>[ 2287.120000] ==MHX(ieee80211_sta_connection_lost) Channel[12]=2453
<0>[ 2287.120000] ==MHX(ieee80211_sta_connection_lost) Channel[13]=2457
<0>[ 2287.120000] ==MHX(ieee80211_sta_connection_lost) Channel[14]=2461
<0>[ 2287.120000] ==MHX(ieee80211_sta_connection_lost) Channel[15]=2465
<0>[ 2287.120000] ==MHX(ieee80211_sta_connection_lost) Channel[16]=2469*********
<0>[ 2287.120000] ==MHX(ieee80211_sta_connection_lost) Channel[17]=2473
<0>[ 2287.120000] ==MHX(ieee80211_sta_connection_lost) Channel[18]=2477
<0>[ 2287.120000] ==MHX(ieee80211_sta_connection_lost) Channel[19]=0
<0>[ 2287.120000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301112, u.mgd.beacon_timeout = 102400
<0>[ 2287.120000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c24
<0>[ 2287.130000] ==MHX1.4(ieee80211_chswitch_work) Reseting beacon and conn monitor timers.
<0>[ 2287.130000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301113, u.mgd.beacon_timeout = 102400
<0>[ 2287.130000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 198718, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 2287.130000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2287.180000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 2287.180000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.180000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.180000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.180000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 1/3

<0>[ 2287.180000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.180000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.180000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.180000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 2/3
<0>[ 2287.180000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.180000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.180000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.180000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[ 2287.180000] ==MHX(ieee80211_sta_connection_lost) Lost reason=4. Generating CSA skb. scan_req=  (null)
<0>[ 2287.180000] ==MHX(ieee80211_sta_connection_lost) Total hop channels=19
<0>[ 2287.180000] ==MHX(ieee80211_sta_connection_lost) Channel[0]=2406
<0>[ 2287.180000] ==MHX(ieee80211_sta_connection_lost) Channel[1]=2410
<0>[ 2287.180000] ==MHX(ieee80211_sta_connection_lost) Channel[2]=2414
<0>[ 2287.180000] ==MHX(ieee80211_sta_connection_lost) Channel[3]=2418
<0>[ 2287.180000] ==MHX(ieee80211_sta_connection_lost) Channel[4]=2421
<0>[ 2287.180000] ==MHX(ieee80211_sta_connection_lost) Channel[5]=2425
<0>[ 2287.180000] ==MHX(ieee80211_sta_connection_lost) Channel[6]=2429
<0>[ 2287.180000] ==MHX(ieee80211_sta_connection_lost) Channel[7]=2433
<0>[ 2287.180000] ==MHX(ieee80211_sta_connection_lost) Channel[8]=2437
<0>[ 2287.180000] ==MHX(ieee80211_sta_connection_lost) Channel[9]=2441
<0>[ 2287.180000] ==MHX(ieee80211_sta_connection_lost) Channel[10]=2445
<0>[ 2287.180000] ==MHX(ieee80211_sta_connection_lost) Channel[11]=2449
<0>[ 2287.180000] ==MHX(ieee80211_sta_connection_lost) Channel[12]=2453
<0>[ 2287.180000] ==MHX(ieee80211_sta_connection_lost) Channel[13]=2457
<0>[ 2287.180000] ==MHX(ieee80211_sta_connection_lost) Channel[14]=2461
<0>[ 2287.180000] ==MHX(ieee80211_sta_connection_lost) Channel[15]=2465
<0>[ 2287.180000] ==MHX(ieee80211_sta_connection_lost) Channel[16]=2469
<0>[ 2287.180000] ==MHX(ieee80211_sta_connection_lost) Channel[17]=2473*********
<0>[ 2287.180000] ==MHX(ieee80211_sta_connection_lost) Channel[18]=2477
<0>[ 2287.180000] ==MHX(ieee80211_sta_connection_lost) Channel[19]=0
<0>[ 2287.180000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301118, u.mgd.beacon_timeout = 102400
<0>[ 2287.180000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c24
<0>[ 2287.190000] ==MHX1.4(ieee80211_chswitch_work) Reseting beacon and conn monitor timers.
<0>[ 2287.190000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301119, u.mgd.beacon_timeout = 102400
<0>[ 2287.190000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 198724, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 2287.190000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2287.240000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 2287.240000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.240000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.240000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.240000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 1/3
<0>[ 2287.240000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.240000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.240000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.240000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 2/3
<0>[ 2287.240000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.240000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.240000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.240000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[ 2287.240000] ==MHX(ieee80211_sta_connection_lost) Lost reason=4. Generating CSA skb. scan_req=  (null)
<0>[ 2287.240000] ==MHX(ieee80211_sta_connection_lost) Total hop channels=19
<0>[ 2287.240000] ==MHX(ieee80211_sta_connection_lost) Channel[0]=2406
<0>[ 2287.240000] ==MHX(ieee80211_sta_connection_lost) Channel[1]=2410
<0>[ 2287.240000] ==MHX(ieee80211_sta_connection_lost) Channel[2]=2414
<0>[ 2287.240000] ==MHX(ieee80211_sta_connection_lost) Channel[3]=2418
<0>[ 2287.240000] ==MHX(ieee80211_sta_connection_lost) Channel[4]=2421
<0>[ 2287.240000] ==MHX(ieee80211_sta_connection_lost) Channel[5]=2425
<0>[ 2287.240000] ==MHX(ieee80211_sta_connection_lost) Channel[6]=2429
<0>[ 2287.240000] ==MHX(ieee80211_sta_connection_lost) Channel[7]=2433
<0>[ 2287.240000] ==MHX(ieee80211_sta_connection_lost) Channel[8]=2437
<0>[ 2287.240000] ==MHX(ieee80211_sta_connection_lost) Channel[9]=2441
<0>[ 2287.240000] ==MHX(ieee80211_sta_connection_lost) Channel[10]=2445
<0>[ 2287.240000] ==MHX(ieee80211_sta_connection_lost) Channel[11]=2449
<0>[ 2287.240000] ==MHX(ieee80211_sta_connection_lost) Channel[12]=2453
<0>[ 2287.240000] ==MHX(ieee80211_sta_connection_lost) Channel[13]=2457
<0>[ 2287.240000] ==MHX(ieee80211_sta_connection_lost) Channel[14]=2461
<0>[ 2287.240000] ==MHX(ieee80211_sta_connection_lost) Channel[15]=2465
<0>[ 2287.240000] ==MHX(ieee80211_sta_connection_lost) Channel[16]=2469
<0>[ 2287.240000] ==MHX(ieee80211_sta_connection_lost) Channel[17]=2473
<0>[ 2287.240000] ==MHX(ieee80211_sta_connection_lost) Channel[18]=2477*********
<0>[ 2287.240000] ==MHX(ieee80211_sta_connection_lost) Channel[19]=0
<0>[ 2287.240000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301124, u.mgd.beacon_timeout = 102400
<0>[ 2287.240000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c24
<0>[ 2287.250000] ==MHX1.4(ieee80211_chswitch_work) Reseting beacon and conn monitor timers.
<0>[ 2287.250000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301125, u.mgd.beacon_timeout = 102400
<0>[ 2287.250000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 198730, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 2287.250000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2287.300000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 2287.300000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.300000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.300000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.300000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 1/3
<0>[ 2287.300000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.300000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.300000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.300000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 2/3
<0>[ 2287.300000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.300000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.300000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.300000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[ 2287.300000] ==MHX(ieee80211_sta_connection_lost) Lost reason=4. Generating CSA skb. scan_req=  (null)
<0>[ 2287.300000] ==MHX(ieee80211_sta_connection_lost) Total hop channels=19
<0>[ 2287.300000] ==MHX(ieee80211_sta_connection_lost) Channel[0]=2406*********
<0>[ 2287.300000] ==MHX(ieee80211_sta_connection_lost) Channel[1]=2410
<0>[ 2287.300000] ==MHX(ieee80211_sta_connection_lost) Channel[2]=2414
<0>[ 2287.300000] ==MHX(ieee80211_sta_connection_lost) Channel[3]=2418
<0>[ 2287.300000] ==MHX(ieee80211_sta_connection_lost) Channel[4]=2421
<0>[ 2287.300000] ==MHX(ieee80211_sta_connection_lost) Channel[5]=2425
<0>[ 2287.300000] ==MHX(ieee80211_sta_connection_lost) Channel[6]=2429
<0>[ 2287.300000] ==MHX(ieee80211_sta_connection_lost) Channel[7]=2433
<0>[ 2287.300000] ==MHX(ieee80211_sta_connection_lost) Channel[8]=2437
<0>[ 2287.300000] ==MHX(ieee80211_sta_connection_lost) Channel[9]=2441
<0>[ 2287.300000] ==MHX(ieee80211_sta_connection_lost) Channel[10]=2445
<0>[ 2287.300000] ==MHX(ieee80211_sta_connection_lost) Channel[11]=2449
<0>[ 2287.300000] ==MHX(ieee80211_sta_connection_lost) Channel[12]=2453
<0>[ 2287.300000] ==MHX(ieee80211_sta_connection_lost) Channel[13]=2457
<0>[ 2287.300000] ==MHX(ieee80211_sta_connection_lost) Channel[14]=2461
<0>[ 2287.300000] ==MHX(ieee80211_sta_connection_lost) Channel[15]=2465
<0>[ 2287.300000] ==MHX(ieee80211_sta_connection_lost) Channel[16]=2469
<0>[ 2287.300000] ==MHX(ieee80211_sta_connection_lost) Channel[17]=2473
<0>[ 2287.300000] ==MHX(ieee80211_sta_connection_lost) Channel[18]=2477
<0>[ 2287.300000] ==MHX(ieee80211_sta_connection_lost) Channel[19]=0
<0>[ 2287.300000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301130, u.mgd.beacon_timeout = 102400
<0>[ 2287.300000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c24
<0>[ 2287.310000] ==MHX1.4(ieee80211_chswitch_work) Reseting beacon and conn monitor timers.
<0>[ 2287.310000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301131, u.mgd.beacon_timeout = 102400
<0>[ 2287.310000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 198736, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 2287.320000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2287.360000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 2287.360000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.360000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.360000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.360000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 1/3
<0>[ 2287.360000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.360000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.360000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.360000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 2/3
<0>[ 2287.360000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.360000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.360000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.360000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[ 2287.360000] ==MHX(ieee80211_sta_connection_lost) Lost reason=4. Generating CSA skb. scan_req=  (null)
<0>[ 2287.360000] ==MHX(ieee80211_sta_connection_lost) Total hop channels=19
<0>[ 2287.360000] ==MHX(ieee80211_sta_connection_lost) Channel[0]=2406
<0>[ 2287.360000] ==MHX(ieee80211_sta_connection_lost) Channel[1]=2410*********
<0>[ 2287.360000] ==MHX(ieee80211_sta_connection_lost) Channel[2]=2414
<0>[ 2287.360000] ==MHX(ieee80211_sta_connection_lost) Channel[3]=2418
<0>[ 2287.360000] ==MHX(ieee80211_sta_connection_lost) Channel[4]=2421
<0>[ 2287.360000] ==MHX(ieee80211_sta_connection_lost) Channel[5]=2425
<0>[ 2287.360000] ==MHX(ieee80211_sta_connection_lost) Channel[6]=2429
<0>[ 2287.360000] ==MHX(ieee80211_sta_connection_lost) Channel[7]=2433
<0>[ 2287.360000] ==MHX(ieee80211_sta_connection_lost) Channel[8]=2437
<0>[ 2287.360000] ==MHX(ieee80211_sta_connection_lost) Channel[9]=2441
<0>[ 2287.360000] ==MHX(ieee80211_sta_connection_lost) Channel[10]=2445
<0>[ 2287.360000] ==MHX(ieee80211_sta_connection_lost) Channel[11]=2449
<0>[ 2287.360000] ==MHX(ieee80211_sta_connection_lost) Channel[12]=2453
<0>[ 2287.360000] ==MHX(ieee80211_sta_connection_lost) Channel[13]=2457
<0>[ 2287.360000] ==MHX(ieee80211_sta_connection_lost) Channel[14]=2461
<0>[ 2287.360000] ==MHX(ieee80211_sta_connection_lost) Channel[15]=2465
<0>[ 2287.360000] ==MHX(ieee80211_sta_connection_lost) Channel[16]=2469
<0>[ 2287.360000] ==MHX(ieee80211_sta_connection_lost) Channel[17]=2473
<0>[ 2287.360000] ==MHX(ieee80211_sta_connection_lost) Channel[18]=2477
<0>[ 2287.360000] ==MHX(ieee80211_sta_connection_lost) Channel[19]=0
<0>[ 2287.360000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301136, u.mgd.beacon_timeout = 102400
<0>[ 2287.360000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c24
<0>[ 2287.370000] ==MHX1.4(ieee80211_chswitch_work) Reseting beacon and conn monitor timers.
<0>[ 2287.370000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301137, u.mgd.beacon_timeout = 102400
<0>[ 2287.370000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 198742, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 2287.370000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2287.420000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 2287.420000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.420000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.420000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.420000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 1/3
<0>[ 2287.420000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.420000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.420000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.420000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 2/3
<0>[ 2287.420000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.420000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.420000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.420000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[ 2287.420000] ==MHX(ieee80211_sta_connection_lost) Lost reason=4. Generating CSA skb. scan_req=  (null)
<0>[ 2287.420000] ==MHX(ieee80211_sta_connection_lost) Total hop channels=19
<0>[ 2287.420000] ==MHX(ieee80211_sta_connection_lost) Channel[0]=2406
<0>[ 2287.420000] ==MHX(ieee80211_sta_connection_lost) Channel[1]=2410
<0>[ 2287.420000] ==MHX(ieee80211_sta_connection_lost) Channel[2]=2414*********
<0>[ 2287.420000] ==MHX(ieee80211_sta_connection_lost) Channel[3]=2418
<0>[ 2287.420000] ==MHX(ieee80211_sta_connection_lost) Channel[4]=2421
<0>[ 2287.420000] ==MHX(ieee80211_sta_connection_lost) Channel[5]=2425
<0>[ 2287.420000] ==MHX(ieee80211_sta_connection_lost) Channel[6]=2429
<0>[ 2287.420000] ==MHX(ieee80211_sta_connection_lost) Channel[7]=2433
<0>[ 2287.420000] ==MHX(ieee80211_sta_connection_lost) Channel[8]=2437
<0>[ 2287.420000] ==MHX(ieee80211_sta_connection_lost) Channel[9]=2441
<0>[ 2287.420000] ==MHX(ieee80211_sta_connection_lost) Channel[10]=2445
<0>[ 2287.420000] ==MHX(ieee80211_sta_connection_lost) Channel[11]=2449
<0>[ 2287.420000] ==MHX(ieee80211_sta_connection_lost) Channel[12]=2453
<0>[ 2287.420000] ==MHX(ieee80211_sta_connection_lost) Channel[13]=2457
<0>[ 2287.420000] ==MHX(ieee80211_sta_connection_lost) Channel[14]=2461
<0>[ 2287.420000] ==MHX(ieee80211_sta_connection_lost) Channel[15]=2465
<0>[ 2287.420000] ==MHX(ieee80211_sta_connection_lost) Channel[16]=2469
<0>[ 2287.420000] ==MHX(ieee80211_sta_connection_lost) Channel[17]=2473
<0>[ 2287.420000] ==MHX(ieee80211_sta_connection_lost) Channel[18]=2477
<0>[ 2287.420000] ==MHX(ieee80211_sta_connection_lost) Channel[19]=0
<0>[ 2287.420000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301142, u.mgd.beacon_timeout = 102400
<0>[ 2287.420000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c24
<0>[ 2287.430000] ==MHX1.4(ieee80211_chswitch_work) Reseting beacon and conn monitor timers.
<0>[ 2287.430000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301143, u.mgd.beacon_timeout = 102400
<0>[ 2287.430000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 198748, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 2287.430000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2287.480000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 2287.480000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.480000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.480000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.480000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 1/3
<0>[ 2287.480000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.480000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.480000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.480000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 2/3
<0>[ 2287.480000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.480000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.480000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.480000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[ 2287.480000] ==MHX(ieee80211_sta_connection_lost) Lost reason=4. Generating CSA skb. scan_req=  (null)
<0>[ 2287.480000] ==MHX(ieee80211_sta_connection_lost) Total hop channels=19
<0>[ 2287.480000] ==MHX(ieee80211_sta_connection_lost) Channel[0]=2406
<0>[ 2287.480000] ==MHX(ieee80211_sta_connection_lost) Channel[1]=2410
<0>[ 2287.480000] ==MHX(ieee80211_sta_connection_lost) Channel[2]=2414
<0>[ 2287.480000] ==MHX(ieee80211_sta_connection_lost) Channel[3]=2418*********
<0>[ 2287.480000] ==MHX(ieee80211_sta_connection_lost) Channel[4]=2421
<0>[ 2287.480000] ==MHX(ieee80211_sta_connection_lost) Channel[5]=2425
<0>[ 2287.480000] ==MHX(ieee80211_sta_connection_lost) Channel[6]=2429
<0>[ 2287.480000] ==MHX(ieee80211_sta_connection_lost) Channel[7]=2433
<0>[ 2287.480000] ==MHX(ieee80211_sta_connection_lost) Channel[8]=2437
<0>[ 2287.480000] ==MHX(ieee80211_sta_connection_lost) Channel[9]=2441
<0>[ 2287.480000] ==MHX(ieee80211_sta_connection_lost) Channel[10]=2445
<0>[ 2287.480000] ==MHX(ieee80211_sta_connection_lost) Channel[11]=2449
<0>[ 2287.480000] ==MHX(ieee80211_sta_connection_lost) Channel[12]=2453
<0>[ 2287.480000] ==MHX(ieee80211_sta_connection_lost) Channel[13]=2457
<0>[ 2287.480000] ==MHX(ieee80211_sta_connection_lost) Channel[14]=2461
<0>[ 2287.480000] ==MHX(ieee80211_sta_connection_lost) Channel[15]=2465
<0>[ 2287.480000] ==MHX(ieee80211_sta_connection_lost) Channel[16]=2469
<0>[ 2287.480000] ==MHX(ieee80211_sta_connection_lost) Channel[17]=2473
<0>[ 2287.480000] ==MHX(ieee80211_sta_connection_lost) Channel[18]=2477
<0>[ 2287.480000] ==MHX(ieee80211_sta_connection_lost) Channel[19]=0
<0>[ 2287.480000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301148, u.mgd.beacon_timeout = 102400
<0>[ 2287.480000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c24
<0>[ 2287.490000] ==MHX1.4(ieee80211_chswitch_work) Reseting beacon and conn monitor timers.
<0>[ 2287.490000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301149, u.mgd.beacon_timeout = 102400
<0>[ 2287.490000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 198754, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 2287.490000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2287.540000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 2287.540000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.540000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.540000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.540000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 1/3
<0>[ 2287.540000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.540000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.540000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.540000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 2/3
<0>[ 2287.540000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.540000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.540000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.540000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[ 2287.540000] ==MHX(ieee80211_sta_connection_lost) Lost reason=4. Generating CSA skb. scan_req=  (null)
<0>[ 2287.540000] ==MHX(ieee80211_sta_connection_lost) Total hop channels=19
<0>[ 2287.540000] ==MHX(ieee80211_sta_connection_lost) Channel[0]=2406
<0>[ 2287.540000] ==MHX(ieee80211_sta_connection_lost) Channel[1]=2410
<0>[ 2287.540000] ==MHX(ieee80211_sta_connection_lost) Channel[2]=2414
<0>[ 2287.540000] ==MHX(ieee80211_sta_connection_lost) Channel[3]=2418
<0>[ 2287.540000] ==MHX(ieee80211_sta_connection_lost) Channel[4]=2421*********
<0>[ 2287.540000] ==MHX(ieee80211_sta_connection_lost) Channel[5]=2425
<0>[ 2287.540000] ==MHX(ieee80211_sta_connection_lost) Channel[6]=2429
<0>[ 2287.540000] ==MHX(ieee80211_sta_connection_lost) Channel[7]=2433
<0>[ 2287.540000] ==MHX(ieee80211_sta_connection_lost) Channel[8]=2437
<0>[ 2287.540000] ==MHX(ieee80211_sta_connection_lost) Channel[9]=2441
<0>[ 2287.540000] ==MHX(ieee80211_sta_connection_lost) Channel[10]=2445
<0>[ 2287.540000] ==MHX(ieee80211_sta_connection_lost) Channel[11]=2449
<0>[ 2287.540000] ==MHX(ieee80211_sta_connection_lost) Channel[12]=2453
<0>[ 2287.540000] ==MHX(ieee80211_sta_connection_lost) Channel[13]=2457
<0>[ 2287.540000] ==MHX(ieee80211_sta_connection_lost) Channel[14]=2461
<0>[ 2287.540000] ==MHX(ieee80211_sta_connection_lost) Channel[15]=2465
<0>[ 2287.540000] ==MHX(ieee80211_sta_connection_lost) Channel[16]=2469
<0>[ 2287.540000] ==MHX(ieee80211_sta_connection_lost) Channel[17]=2473
<0>[ 2287.540000] ==MHX(ieee80211_sta_connection_lost) Channel[18]=2477
<0>[ 2287.540000] ==MHX(ieee80211_sta_connection_lost) Channel[19]=0
<0>[ 2287.540000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301154, u.mgd.beacon_timeout = 102400
<0>[ 2287.540000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c24
<0>[ 2287.550000] ==MHX1.4(ieee80211_chswitch_work) Reseting beacon and conn monitor timers.
<0>[ 2287.550000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301155, u.mgd.beacon_timeout = 102400
<0>[ 2287.550000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 198760, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 2287.550000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2287.600000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 2287.600000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.600000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.600000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.600000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 1/3
<0>[ 2287.600000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.600000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.600000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.600000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 2/3
<0>[ 2287.600000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.600000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.600000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.600000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[ 2287.600000] ==MHX(ieee80211_sta_connection_lost) Lost reason=4. Generating CSA skb. scan_req=  (null)
<0>[ 2287.600000] ==MHX(ieee80211_sta_connection_lost) Total hop channels=19
<0>[ 2287.600000] ==MHX(ieee80211_sta_connection_lost) Channel[0]=2406
<0>[ 2287.600000] ==MHX(ieee80211_sta_connection_lost) Channel[1]=2410
<0>[ 2287.600000] ==MHX(ieee80211_sta_connection_lost) Channel[2]=2414
<0>[ 2287.600000] ==MHX(ieee80211_sta_connection_lost) Channel[3]=2418
<0>[ 2287.600000] ==MHX(ieee80211_sta_connection_lost) Channel[4]=2421
<0>[ 2287.600000] ==MHX(ieee80211_sta_connection_lost) Channel[5]=2425*********
<0>[ 2287.600000] ==MHX(ieee80211_sta_connection_lost) Channel[6]=2429
<0>[ 2287.600000] ==MHX(ieee80211_sta_connection_lost) Channel[7]=2433
<0>[ 2287.600000] ==MHX(ieee80211_sta_connection_lost) Channel[8]=2437
<0>[ 2287.600000] ==MHX(ieee80211_sta_connection_lost) Channel[9]=2441
<0>[ 2287.600000] ==MHX(ieee80211_sta_connection_lost) Channel[10]=2445
<0>[ 2287.600000] ==MHX(ieee80211_sta_connection_lost) Channel[11]=2449
<0>[ 2287.600000] ==MHX(ieee80211_sta_connection_lost) Channel[12]=2453
<0>[ 2287.600000] ==MHX(ieee80211_sta_connection_lost) Channel[13]=2457
<0>[ 2287.600000] ==MHX(ieee80211_sta_connection_lost) Channel[14]=2461
<0>[ 2287.600000] ==MHX(ieee80211_sta_connection_lost) Channel[15]=2465
<0>[ 2287.600000] ==MHX(ieee80211_sta_connection_lost) Channel[16]=2469
<0>[ 2287.600000] ==MHX(ieee80211_sta_connection_lost) Channel[17]=2473
<0>[ 2287.600000] ==MHX(ieee80211_sta_connection_lost) Channel[18]=2477
<0>[ 2287.600000] ==MHX(ieee80211_sta_connection_lost) Channel[19]=0
<0>[ 2287.600000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301160, u.mgd.beacon_timeout = 102400
<0>[ 2287.600000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c24
<0>[ 2287.610000] ==MHX1.4(ieee80211_chswitch_work) Reseting beacon and conn monitor timers.
<0>[ 2287.610000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301161, u.mgd.beacon_timeout = 102400
<0>[ 2287.610000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 198766, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 2287.610000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2287.660000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 2287.660000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.660000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.660000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.660000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 1/3
<0>[ 2287.660000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.660000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.660000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.660000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 2/3
<0>[ 2287.660000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.660000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.660000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.660000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[ 2287.660000] ==MHX(ieee80211_sta_connection_lost) Lost reason=4. Generating CSA skb. scan_req=  (null)
<0>[ 2287.660000] ==MHX(ieee80211_sta_connection_lost) Total hop channels=19
<0>[ 2287.660000] ==MHX(ieee80211_sta_connection_lost) Channel[0]=2406
<0>[ 2287.660000] ==MHX(ieee80211_sta_connection_lost) Channel[1]=2410
<0>[ 2287.660000] ==MHX(ieee80211_sta_connection_lost) Channel[2]=2414
<0>[ 2287.660000] ==MHX(ieee80211_sta_connection_lost) Channel[3]=2418
<0>[ 2287.660000] ==MHX(ieee80211_sta_connection_lost) Channel[4]=2421
<0>[ 2287.660000] ==MHX(ieee80211_sta_connection_lost) Channel[5]=2425
<0>[ 2287.660000] ==MHX(ieee80211_sta_connection_lost) Channel[6]=2429*********
<0>[ 2287.660000] ==MHX(ieee80211_sta_connection_lost) Channel[7]=2433
<0>[ 2287.660000] ==MHX(ieee80211_sta_connection_lost) Channel[8]=2437
<0>[ 2287.660000] ==MHX(ieee80211_sta_connection_lost) Channel[9]=2441
<0>[ 2287.660000] ==MHX(ieee80211_sta_connection_lost) Channel[10]=2445
<0>[ 2287.660000] ==MHX(ieee80211_sta_connection_lost) Channel[11]=2449
<0>[ 2287.660000] ==MHX(ieee80211_sta_connection_lost) Channel[12]=2453
<0>[ 2287.660000] ==MHX(ieee80211_sta_connection_lost) Channel[13]=2457
<0>[ 2287.660000] ==MHX(ieee80211_sta_connection_lost) Channel[14]=2461
<0>[ 2287.660000] ==MHX(ieee80211_sta_connection_lost) Channel[15]=2465
<0>[ 2287.660000] ==MHX(ieee80211_sta_connection_lost) Channel[16]=2469
<0>[ 2287.660000] ==MHX(ieee80211_sta_connection_lost) Channel[17]=2473
<0>[ 2287.660000] ==MHX(ieee80211_sta_connection_lost) Channel[18]=2477
<0>[ 2287.660000] ==MHX(ieee80211_sta_connection_lost) Channel[19]=0
<0>[ 2287.660000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301166, u.mgd.beacon_timeout = 102400
<0>[ 2287.660000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c24
<0>[ 2287.670000] ==MHX1.4(ieee80211_chswitch_work) Reseting beacon and conn monitor timers.
<0>[ 2287.670000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301167, u.mgd.beacon_timeout = 102400
<0>[ 2287.670000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 198772, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 2287.670000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2287.720000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 2287.720000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.720000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.720000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.720000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 1/3
<0>[ 2287.720000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.720000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.720000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.720000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 2/3
<0>[ 2287.720000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.720000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.720000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.720000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[ 2287.720000] ==MHX(ieee80211_sta_connection_lost) Lost reason=4. Generating CSA skb. scan_req=  (null)
<0>[ 2287.720000] ==MHX(ieee80211_sta_connection_lost) Total hop channels=19
<0>[ 2287.720000] ==MHX(ieee80211_sta_connection_lost) Channel[0]=2406
<0>[ 2287.720000] ==MHX(ieee80211_sta_connection_lost) Channel[1]=2410
<0>[ 2287.720000] ==MHX(ieee80211_sta_connection_lost) Channel[2]=2414
<0>[ 2287.720000] ==MHX(ieee80211_sta_connection_lost) Channel[3]=2418
<0>[ 2287.720000] ==MHX(ieee80211_sta_connection_lost) Channel[4]=2421
<0>[ 2287.720000] ==MHX(ieee80211_sta_connection_lost) Channel[5]=2425
<0>[ 2287.720000] ==MHX(ieee80211_sta_connection_lost) Channel[6]=2429
<0>[ 2287.720000] ==MHX(ieee80211_sta_connection_lost) Channel[7]=2433*********
<0>[ 2287.720000] ==MHX(ieee80211_sta_connection_lost) Channel[8]=2437
<0>[ 2287.720000] ==MHX(ieee80211_sta_connection_lost) Channel[9]=2441
<0>[ 2287.720000] ==MHX(ieee80211_sta_connection_lost) Channel[10]=2445
<0>[ 2287.720000] ==MHX(ieee80211_sta_connection_lost) Channel[11]=2449
<0>[ 2287.720000] ==MHX(ieee80211_sta_connection_lost) Channel[12]=2453
<0>[ 2287.720000] ==MHX(ieee80211_sta_connection_lost) Channel[13]=2457
<0>[ 2287.720000] ==MHX(ieee80211_sta_connection_lost) Channel[14]=2461
<0>[ 2287.720000] ==MHX(ieee80211_sta_connection_lost) Channel[15]=2465
<0>[ 2287.720000] ==MHX(ieee80211_sta_connection_lost) Channel[16]=2469
<0>[ 2287.720000] ==MHX(ieee80211_sta_connection_lost) Channel[17]=2473
<0>[ 2287.720000] ==MHX(ieee80211_sta_connection_lost) Channel[18]=2477
<0>[ 2287.720000] ==MHX(ieee80211_sta_connection_lost) Channel[19]=0
<0>[ 2287.720000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301172, u.mgd.beacon_timeout = 102400
<0>[ 2287.720000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c24
<0>[ 2287.730000] ==MHX1.4(ieee80211_chswitch_work) Reseting beacon and conn monitor timers.
<0>[ 2287.730000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301173, u.mgd.beacon_timeout = 102400
<0>[ 2287.730000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 198778, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 2287.730000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2287.780000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 2287.780000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.780000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.780000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.780000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 1/3
<0>[ 2287.780000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.780000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.780000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.780000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 2/3
<0>[ 2287.780000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.780000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.780000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.780000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[ 2287.780000] ==MHX(ieee80211_sta_connection_lost) Lost reason=4. Generating CSA skb. scan_req=  (null)
<0>[ 2287.780000] ==MHX(ieee80211_sta_connection_lost) Total hop channels=19
<0>[ 2287.780000] ==MHX(ieee80211_sta_connection_lost) Channel[0]=2406
<0>[ 2287.780000] ==MHX(ieee80211_sta_connection_lost) Channel[1]=2410
<0>[ 2287.780000] ==MHX(ieee80211_sta_connection_lost) Channel[2]=2414
<0>[ 2287.780000] ==MHX(ieee80211_sta_connection_lost) Channel[3]=2418
<0>[ 2287.780000] ==MHX(ieee80211_sta_connection_lost) Channel[4]=2421
<0>[ 2287.780000] ==MHX(ieee80211_sta_connection_lost) Channel[5]=2425
<0>[ 2287.780000] ==MHX(ieee80211_sta_connection_lost) Channel[6]=2429
<0>[ 2287.780000] ==MHX(ieee80211_sta_connection_lost) Channel[7]=2433
<0>[ 2287.780000] ==MHX(ieee80211_sta_connection_lost) Channel[8]=2437*********
<0>[ 2287.780000] ==MHX(ieee80211_sta_connection_lost) Channel[9]=2441
<0>[ 2287.780000] ==MHX(ieee80211_sta_connection_lost) Channel[10]=2445
<0>[ 2287.780000] ==MHX(ieee80211_sta_connection_lost) Channel[11]=2449
<0>[ 2287.780000] ==MHX(ieee80211_sta_connection_lost) Channel[12]=2453
<0>[ 2287.780000] ==MHX(ieee80211_sta_connection_lost) Channel[13]=2457
<0>[ 2287.780000] ==MHX(ieee80211_sta_connection_lost) Channel[14]=2461
<0>[ 2287.780000] ==MHX(ieee80211_sta_connection_lost) Channel[15]=2465
<0>[ 2287.780000] ==MHX(ieee80211_sta_connection_lost) Channel[16]=2469
<0>[ 2287.780000] ==MHX(ieee80211_sta_connection_lost) Channel[17]=2473
<0>[ 2287.780000] ==MHX(ieee80211_sta_connection_lost) Channel[18]=2477
<0>[ 2287.780000] ==MHX(ieee80211_sta_connection_lost) Channel[19]=0
<0>[ 2287.780000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301178, u.mgd.beacon_timeout = 102400
<0>[ 2287.780000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c24
<0>[ 2287.790000] ==MHX1.4(ieee80211_chswitch_work) Reseting beacon and conn monitor timers.
<0>[ 2287.790000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301179, u.mgd.beacon_timeout = 102400
<0>[ 2287.790000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 198784, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 2287.790000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2287.840000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 2287.840000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.840000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.840000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.840000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 1/3
<0>[ 2287.840000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.840000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.840000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.840000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 2/3
<0>[ 2287.840000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.840000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.840000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.840000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[ 2287.840000] ==MHX(ieee80211_sta_connection_lost) Lost reason=4. Generating CSA skb. scan_req=  (null)
<0>[ 2287.840000] ==MHX(ieee80211_sta_connection_lost) Total hop channels=19
<0>[ 2287.840000] ==MHX(ieee80211_sta_connection_lost) Channel[0]=2406
<0>[ 2287.840000] ==MHX(ieee80211_sta_connection_lost) Channel[1]=2410
<0>[ 2287.840000] ==MHX(ieee80211_sta_connection_lost) Channel[2]=2414
<0>[ 2287.840000] ==MHX(ieee80211_sta_connection_lost) Channel[3]=2418
<0>[ 2287.840000] ==MHX(ieee80211_sta_connection_lost) Channel[4]=2421
<0>[ 2287.840000] ==MHX(ieee80211_sta_connection_lost) Channel[5]=2425
<0>[ 2287.840000] ==MHX(ieee80211_sta_connection_lost) Channel[6]=2429
<0>[ 2287.840000] ==MHX(ieee80211_sta_connection_lost) Channel[7]=2433
<0>[ 2287.840000] ==MHX(ieee80211_sta_connection_lost) Channel[8]=2437
<0>[ 2287.840000] ==MHX(ieee80211_sta_connection_lost) Channel[9]=2441*********
<0>[ 2287.840000] ==MHX(ieee80211_sta_connection_lost) Channel[10]=2445
<0>[ 2287.840000] ==MHX(ieee80211_sta_connection_lost) Channel[11]=2449
<0>[ 2287.840000] ==MHX(ieee80211_sta_connection_lost) Channel[12]=2453
<0>[ 2287.840000] ==MHX(ieee80211_sta_connection_lost) Channel[13]=2457
<0>[ 2287.840000] ==MHX(ieee80211_sta_connection_lost) Channel[14]=2461
<0>[ 2287.840000] ==MHX(ieee80211_sta_connection_lost) Channel[15]=2465
<0>[ 2287.840000] ==MHX(ieee80211_sta_connection_lost) Channel[16]=2469
<0>[ 2287.840000] ==MHX(ieee80211_sta_connection_lost) Channel[17]=2473
<0>[ 2287.840000] ==MHX(ieee80211_sta_connection_lost) Channel[18]=2477
<0>[ 2287.840000] ==MHX(ieee80211_sta_connection_lost) Channel[19]=0
<0>[ 2287.840000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301184, u.mgd.beacon_timeout = 102400
<0>[ 2287.840000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c24
<0>[ 2287.850000] ==MHX1.4(ieee80211_chswitch_work) Reseting beacon and conn monitor timers.
<0>[ 2287.850000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301185, u.mgd.beacon_timeout = 102400
<0>[ 2287.850000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 198790, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 2287.850000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2287.900000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 2287.900000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.900000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.900000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.900000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 1/3
<0>[ 2287.900000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.900000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.900000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.900000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 2/3
<0>[ 2287.900000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.900000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.900000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.900000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[ 2287.900000] ==MHX(ieee80211_sta_connection_lost) Lost reason=4. Generating CSA skb. scan_req=  (null)
<0>[ 2287.900000] ==MHX(ieee80211_sta_connection_lost) Total hop channels=19
<0>[ 2287.900000] ==MHX(ieee80211_sta_connection_lost) Channel[0]=2406
<0>[ 2287.900000] ==MHX(ieee80211_sta_connection_lost) Channel[1]=2410
<0>[ 2287.900000] ==MHX(ieee80211_sta_connection_lost) Channel[2]=2414
<0>[ 2287.900000] ==MHX(ieee80211_sta_connection_lost) Channel[3]=2418
<0>[ 2287.900000] ==MHX(ieee80211_sta_connection_lost) Channel[4]=2421
<0>[ 2287.900000] ==MHX(ieee80211_sta_connection_lost) Channel[5]=2425
<0>[ 2287.900000] ==MHX(ieee80211_sta_connection_lost) Channel[6]=2429
<0>[ 2287.900000] ==MHX(ieee80211_sta_connection_lost) Channel[7]=2433
<0>[ 2287.900000] ==MHX(ieee80211_sta_connection_lost) Channel[8]=2437
<0>[ 2287.900000] ==MHX(ieee80211_sta_connection_lost) Channel[9]=2441
<0>[ 2287.900000] ==MHX(ieee80211_sta_connection_lost) Channel[10]=2445*********
<0>[ 2287.900000] ==MHX(ieee80211_sta_connection_lost) Channel[11]=2449
<0>[ 2287.900000] ==MHX(ieee80211_sta_connection_lost) Channel[12]=2453
<0>[ 2287.900000] ==MHX(ieee80211_sta_connection_lost) Channel[13]=2457
<0>[ 2287.900000] ==MHX(ieee80211_sta_connection_lost) Channel[14]=2461
<0>[ 2287.900000] ==MHX(ieee80211_sta_connection_lost) Channel[15]=2465
<0>[ 2287.900000] ==MHX(ieee80211_sta_connection_lost) Channel[16]=2469
<0>[ 2287.900000] ==MHX(ieee80211_sta_connection_lost) Channel[17]=2473
<0>[ 2287.900000] ==MHX(ieee80211_sta_connection_lost) Channel[18]=2477
<0>[ 2287.900000] ==MHX(ieee80211_sta_connection_lost) Channel[19]=0
<0>[ 2287.900000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301190, u.mgd.beacon_timeout = 102400
<0>[ 2287.900000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c24
<0>[ 2287.910000] ==MHX1.4(ieee80211_chswitch_work) Reseting beacon and conn monitor timers.
<0>[ 2287.910000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301191, u.mgd.beacon_timeout = 102400
<0>[ 2287.910000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 198796, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 2287.910000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2287.960000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 2287.960000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.960000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.960000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.960000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 1/3
<0>[ 2287.960000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.960000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.960000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.960000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 2/3
<0>[ 2287.960000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2287.960000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2287.960000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2287.960000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[ 2287.960000] ==MHX(ieee80211_sta_connection_lost) Lost reason=4. Generating CSA skb. scan_req=  (null)
<0>[ 2287.960000] ==MHX(ieee80211_sta_connection_lost) Total hop channels=19
<0>[ 2287.960000] ==MHX(ieee80211_sta_connection_lost) Channel[0]=2406
<0>[ 2287.960000] ==MHX(ieee80211_sta_connection_lost) Channel[1]=2410
<0>[ 2287.960000] ==MHX(ieee80211_sta_connection_lost) Channel[2]=2414
<0>[ 2287.960000] ==MHX(ieee80211_sta_connection_lost) Channel[3]=2418
<0>[ 2287.960000] ==MHX(ieee80211_sta_connection_lost) Channel[4]=2421
<0>[ 2287.960000] ==MHX(ieee80211_sta_connection_lost) Channel[5]=2425
<0>[ 2287.960000] ==MHX(ieee80211_sta_connection_lost) Channel[6]=2429
<0>[ 2287.960000] ==MHX(ieee80211_sta_connection_lost) Channel[7]=2433
<0>[ 2287.960000] ==MHX(ieee80211_sta_connection_lost) Channel[8]=2437
<0>[ 2287.960000] ==MHX(ieee80211_sta_connection_lost) Channel[9]=2441
<0>[ 2287.960000] ==MHX(ieee80211_sta_connection_lost) Channel[10]=2445
<0>[ 2287.960000] ==MHX(ieee80211_sta_connection_lost) Channel[11]=2449*********
<0>[ 2287.960000] ==MHX(ieee80211_sta_connection_lost) Channel[12]=2453
<0>[ 2287.960000] ==MHX(ieee80211_sta_connection_lost) Channel[13]=2457
<0>[ 2287.960000] ==MHX(ieee80211_sta_connection_lost) Channel[14]=2461
<0>[ 2287.960000] ==MHX(ieee80211_sta_connection_lost) Channel[15]=2465
<0>[ 2287.960000] ==MHX(ieee80211_sta_connection_lost) Channel[16]=2469
<0>[ 2287.960000] ==MHX(ieee80211_sta_connection_lost) Channel[17]=2473
<0>[ 2287.960000] ==MHX(ieee80211_sta_connection_lost) Channel[18]=2477
<0>[ 2287.960000] ==MHX(ieee80211_sta_connection_lost) Channel[19]=0
<0>[ 2287.960000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301196, u.mgd.beacon_timeout = 102400
<0>[ 2287.960000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c24
<0>[ 2287.970000] ==MHX1.4(ieee80211_chswitch_work) Reseting beacon and conn monitor timers.
<0>[ 2287.970000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301197, u.mgd.beacon_timeout = 102400
<0>[ 2287.970000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 198802, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 2287.970000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2288.020000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 2288.020000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2288.020000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2288.020000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2288.020000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 1/3
<0>[ 2288.020000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2288.020000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2288.020000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2288.020000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 2/3
<0>[ 2288.020000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2288.020000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2288.020000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2288.020000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[ 2288.020000] ==MHX(ieee80211_sta_connection_lost) Lost reason=4. Generating CSA skb. scan_req=  (null)
<0>[ 2288.020000] ==MHX(ieee80211_sta_connection_lost) Total hop channels=19
<0>[ 2288.020000] ==MHX(ieee80211_sta_connection_lost) Channel[0]=2406
<0>[ 2288.020000] ==MHX(ieee80211_sta_connection_lost) Channel[1]=2410
<0>[ 2288.020000] ==MHX(ieee80211_sta_connection_lost) Channel[2]=2414
<0>[ 2288.020000] ==MHX(ieee80211_sta_connection_lost) Channel[3]=2418
<0>[ 2288.020000] ==MHX(ieee80211_sta_connection_lost) Channel[4]=2421
<0>[ 2288.020000] ==MHX(ieee80211_sta_connection_lost) Channel[5]=2425
<0>[ 2288.020000] ==MHX(ieee80211_sta_connection_lost) Channel[6]=2429
<0>[ 2288.020000] ==MHX(ieee80211_sta_connection_lost) Channel[7]=2433
<0>[ 2288.020000] ==MHX(ieee80211_sta_connection_lost) Channel[8]=2437
<0>[ 2288.020000] ==MHX(ieee80211_sta_connection_lost) Channel[9]=2441
<0>[ 2288.020000] ==MHX(ieee80211_sta_connection_lost) Channel[10]=2445
<0>[ 2288.020000] ==MHX(ieee80211_sta_connection_lost) Channel[11]=2449
<0>[ 2288.020000] ==MHX(ieee80211_sta_connection_lost) Channel[12]=2453*********
<0>[ 2288.020000] ==MHX(ieee80211_sta_connection_lost) Channel[13]=2457
<0>[ 2288.020000] ==MHX(ieee80211_sta_connection_lost) Channel[14]=2461
<0>[ 2288.020000] ==MHX(ieee80211_sta_connection_lost) Channel[15]=2465
<0>[ 2288.020000] ==MHX(ieee80211_sta_connection_lost) Channel[16]=2469
<0>[ 2288.020000] ==MHX(ieee80211_sta_connection_lost) Channel[17]=2473
<0>[ 2288.020000] ==MHX(ieee80211_sta_connection_lost) Channel[18]=2477
<0>[ 2288.020000] ==MHX(ieee80211_sta_connection_lost) Channel[19]=0
<0>[ 2288.020000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301202, u.mgd.beacon_timeout = 102400
<0>[ 2288.020000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c24
<0>[ 2288.030000] ==MHX1.4(ieee80211_chswitch_work) Reseting beacon and conn monitor timers.
<0>[ 2288.030000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301203, u.mgd.beacon_timeout = 102400
<0>[ 2288.030000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 198808, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 2288.030000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2288.080000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 2288.080000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2288.080000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2288.080000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2288.080000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 1/3
<0>[ 2288.080000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2288.080000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2288.080000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2288.080000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 2/3
<0>[ 2288.080000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2288.080000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2288.080000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2288.080000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, disconnecting.
<0>[ 2288.080000] ==MHX(ieee80211_sta_connection_lost) Lost reason=4. Generating CSA skb. scan_req=  (null)
<0>[ 2288.080000] ==MHX(ieee80211_sta_connection_lost) Total hop channels=19
<0>[ 2288.080000] ==MHX(ieee80211_sta_connection_lost) Channel[0]=2406
<0>[ 2288.080000] ==MHX(ieee80211_sta_connection_lost) Channel[1]=2410
<0>[ 2288.080000] ==MHX(ieee80211_sta_connection_lost) Channel[2]=2414
<0>[ 2288.080000] ==MHX(ieee80211_sta_connection_lost) Channel[3]=2418
<0>[ 2288.080000] ==MHX(ieee80211_sta_connection_lost) Channel[4]=2421
<0>[ 2288.080000] ==MHX(ieee80211_sta_connection_lost) Channel[5]=2425
<0>[ 2288.080000] ==MHX(ieee80211_sta_connection_lost) Channel[6]=2429
<0>[ 2288.080000] ==MHX(ieee80211_sta_connection_lost) Channel[7]=2433
<0>[ 2288.080000] ==MHX(ieee80211_sta_connection_lost) Channel[8]=2437
<0>[ 2288.080000] ==MHX(ieee80211_sta_connection_lost) Channel[9]=2441
<0>[ 2288.080000] ==MHX(ieee80211_sta_connection_lost) Channel[10]=2445
<0>[ 2288.080000] ==MHX(ieee80211_sta_connection_lost) Channel[11]=2449
<0>[ 2288.080000] ==MHX(ieee80211_sta_connection_lost) Channel[12]=2453
<0>[ 2288.080000] ==MHX(ieee80211_sta_connection_lost) Channel[13]=2457*********
<0>[ 2288.080000] ==MHX(ieee80211_sta_connection_lost) Channel[14]=2461
<0>[ 2288.080000] ==MHX(ieee80211_sta_connection_lost) Channel[15]=2465
<0>[ 2288.080000] ==MHX(ieee80211_sta_connection_lost) Channel[16]=2469
<0>[ 2288.080000] ==MHX(ieee80211_sta_connection_lost) Channel[17]=2473
<0>[ 2288.080000] ==MHX(ieee80211_sta_connection_lost) Channel[18]=2477
<0>[ 2288.080000] ==MHX(ieee80211_sta_connection_lost) Channel[19]=0
<0>[ 2288.080000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301208, u.mgd.beacon_timeout = 102400
<0>[ 2288.080000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c24
<0>[ 2288.090000] ==MHX1.4(ieee80211_chswitch_work) Reseting beacon and conn monitor timers.
<0>[ 2288.090000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301209, u.mgd.beacon_timeout = 102400
<0>[ 2288.090000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 198814, IEEE80211_CONNECTION_IDLE_TIME=5
<0>[ 2288.090000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2288.140000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 2288.140000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2288.140000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2288.140000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2288.140000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 1/3
<0>[ 2288.140000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2288.140000] ==MHX1.3(ieee80211_sta_tx_notify) ack=0
<0>[ 2288.140000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<7>[ 2288.140000] wlan0: No ack for nullfunc frame to AP 00:0f:92:fa:98:b8, try 2/3
<0>[ 2288.140000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2288.140000] ==MHX1.3(ieee80211_sta_tx_notify) ack=1
<0>[ 2288.140000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 198819, IEEE80211_CONNECTION_IDLE_TIME
=5
<0>[ 2288.140000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<0>[ 2288.140000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301214, u.mgd.beacon_timeout = 102400
<0>[ 2288.150000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2288.190000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301219, u.mgd.beacon_timeout = 102400
<0>[ 2288.190000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2288.290000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301229, u.mgd.beacon_timeout = 102400
<0>[ 2288.290000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2288.390000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301239, u.mgd.beacon_timeout = 102400
<0>[ 2288.390000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2288.600000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301260, u.mgd.beacon_timeout = 102400
<0>[ 2288.600000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2288.700000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301270, u.mgd.beacon_timeout = 102400
<0>[ 2288.700000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2288.800000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301280, u.mgd.beacon_timeout = 102400
<0>[ 2288.800000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2288.900000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301290, u.mgd.beacon_timeout = 102400
<0>[ 2288.910000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2289.000000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 2289.000000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2289.000000] ==MHX1.3(ieee80211_sta_tx_notify) ack=1
<0>[ 2289.000000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 198905, IEEE80211_CONNECTION_IDLE_TIME
=5
<0>[ 2289.000000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<0>[ 2289.000000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301300, u.mgd.beacon_timeout = 102400
<0>[ 2289.010000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2289.010000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301301, u.mgd.beacon_timeout = 102400
<0>[ 2289.010000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2289.210000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301321, u.mgd.beacon_timeout = 102400
<0>[ 2289.210000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2289.310000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301331, u.mgd.beacon_timeout = 102400
<0>[ 2289.310000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2289.420000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301342, u.mgd.beacon_timeout = 102400
<0>[ 2289.420000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2289.520000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301352, u.mgd.beacon_timeout = 102400
<0>[ 2289.520000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2289.620000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301362, u.mgd.beacon_timeout = 102400
<0>[ 2289.620000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2289.720000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301372, u.mgd.beacon_timeout = 102400
<0>[ 2289.720000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2289.830000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301383, u.mgd.beacon_timeout = 102400
<0>[ 2289.830000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2289.930000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301393, u.mgd.beacon_timeout = 102400
<0>[ 2289.930000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2290.000000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 2290.000000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2290.000000] ==MHX1.3(ieee80211_sta_tx_notify) ack=1
<0>[ 2290.000000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 199005, IEEE80211_CONNECTION_IDLE_TIME
=5
<0>[ 2290.000000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<0>[ 2290.000000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301400, u.mgd.beacon_timeout = 102400
<0>[ 2290.010000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2290.030000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301403, u.mgd.beacon_timeout = 102400
<0>[ 2290.030000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2290.130000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301413, u.mgd.beacon_timeout = 102400
<0>[ 2290.130000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2290.240000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301424, u.mgd.beacon_timeout = 102400
<0>[ 2290.240000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2290.340000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301434, u.mgd.beacon_timeout = 102400
<0>[ 2290.340000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2290.440000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301444, u.mgd.beacon_timeout = 102400
<0>[ 2290.440000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2290.540000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301454, u.mgd.beacon_timeout = 102400
<0>[ 2290.540000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2290.650000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301465, u.mgd.beacon_timeout = 102400
<0>[ 2290.650000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2290.750000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301475, u.mgd.beacon_timeout = 102400
<0>[ 2290.750000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2290.850000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301485, u.mgd.beacon_timeout = 102400
<0>[ 2290.850000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2290.950000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301495, u.mgd.beacon_timeout = 102400
<0>[ 2290.950000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2291.000000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 2291.000000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2291.000000] ==MHX1.3(ieee80211_sta_tx_notify) ack=1
<0>[ 2291.000000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 199105, IEEE80211_CONNECTION_IDLE_TIME
=5
<0>[ 2291.000000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<0>[ 2291.000000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301500, u.mgd.beacon_timeout = 102400
<0>[ 2291.010000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2291.160000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301516, u.mgd.beacon_timeout = 102400
<0>[ 2291.160000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2291.260000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301526, u.mgd.beacon_timeout = 102400
<0>[ 2291.260000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2291.360000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301536, u.mgd.beacon_timeout = 102400
<0>[ 2291.360000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2291.460000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301546, u.mgd.beacon_timeout = 102400
<0>[ 2291.470000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2291.570000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301557, u.mgd.beacon_timeout = 102400
<0>[ 2291.570000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2291.670000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301567, u.mgd.beacon_timeout = 102400
<0>[ 2291.670000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2291.770000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301577, u.mgd.beacon_timeout = 102400
<0>[ 2291.770000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2291.870000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301587, u.mgd.beacon_timeout = 102400
<0>[ 2291.870000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2291.980000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301598, u.mgd.beacon_timeout = 102400
<0>[ 2291.980000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2292.000000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 2292.000000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..
<0>[ 2292.000000] ==MHX1.3(ieee80211_sta_tx_notify) ack=1
<0>[ 2292.000000] =MHX1.5(ieee80211_sta_reset_conn_monitor) conn monitor time out = 199205, IEEE80211_CONNECTION_IDLE_TIME
=5
<0>[ 2292.000000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c06
<0>[ 2292.000000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301600, u.mgd.beacon_timeout = 102400
<0>[ 2292.010000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2292.080000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301608, u.mgd.beacon_timeout = 102400
<0>[ 2292.080000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2292.180000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301618, u.mgd.beacon_timeout = 102400
<0>[ 2292.180000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2292.280000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301628, u.mgd.beacon_timeout = 102400
<0>[ 2292.280000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2292.390000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301639, u.mgd.beacon_timeout = 102400
<0>[ 2292.390000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2292.490000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301649, u.mgd.beacon_timeout = 102400
<0>[ 2292.490000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2292.590000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301659, u.mgd.beacon_timeout = 102400
<0>[ 2292.590000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2292.690000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301669, u.mgd.beacon_timeout = 102400
<0>[ 2292.690000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2292.800000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301680, u.mgd.beacon_timeout = 102400
<0>[ 2292.800000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2292.900000] =MHX1.6(ieee80211_sta_reset_beacon_monitor) beacon loss time out = 301690, u.mgd.beacon_timeout = 102400
<0>[ 2292.900000] ==MHX1.0(ieee80211_sta_work) ifmgd->flags=0x00000c04
<0>[ 2293.000000] =MHX(ieee80211_sta_conn_mon_timer)
<0>[ 2293.000000] =MHX1.2(ieee80211_send_nullfunc)Sending nullfunc..

April 10,2017
wireless.radio0.max_nullfunc_tries=1, open air, signal -80dBm, STA idle and see if it will lose connection with AP by adjusting the wait time of the nullfunc packet.
radio0.probe_wait_time=100 : Connection loss happens.
radio0.probe_wait_time=200 : Connection loss happens occasionally.
radio0.probe_wait_time=300 : Connection loss happens occasionally.
radio0.probe_wait_time=400 : Connection loss happens occasionally.
radio0.probe_wait_time=500 : Connection loss happens occasionally.
radio0.probe_wait_time=900 : Connection loss happens occasionally.

Looks like no matter how long the STA waits for a nullfunc ACK, it has chance to miss this ACK.

wireless.radio0.max_nullfunc_tries=2, open air, signal -80dBm, STA idle and see if it will lose connection with AP by adjusting the wait time of the nullfunc packet.
radio0.probe_wait_time=900 : Connection loss happens occasionally.

wireless.radio0.max_nullfunc_tries=5, open air, signal -80dBm, STA idle and see if it will lose connection with AP by adjusting the wait time of the nullfunc packet.
radio0.probe_wait_time=900 : Connection is stable. Very rarely see a connection loss.

max_nullfunc_tries	probe_wait_time(ms)		OpenAir Signal(dBm)		Results
	5			100				-85			Connection stable
	5			50				-84			Connection stable
	5			10				-79			Connection stable
	5			1				-77			Connection stable. Why this short 1mS waiting for AP's ACK is still ok? ifmgd->probe_timeout = jiffies + msecs_to_jiffies(probe_wait_ms); so min=10mS
	2			1				-75			Connection stable. This verified the probe_wait_time can be as short as 1mS[ actually round up to jiffy=10mS ].
	1			1				-76			Connection loss. Can not stay on a frequency stablely.


round_jiffies_up() in ieee80211_sta_reset_conn_monitor() makes the timer expire at least 1 second. Remove this restriction and test with 
wireless.radio0.probe_wait_time=1	// Driver round up to 1 jiffy, 10mS
wireless.radio0.max_nullfunc_tries=2	
wireless.radio0.connection_idle_time=5	// 5*jiffy=50mS dwell on each frequency.
Works well. BUT, this makes ieee80211_sta_conn_mon_timer() happens every 50mS and overhead is high. 77% idle when no traffic. Using this setting, STA no antenna, STA hopped overnight, no memory leak, immediate connected when plug antenna in the morning.

APRIL 7, 2017
On STA wireless.radio0.beacon_loss_count=100000, which means STA keep the link on almost forever. Power cycle AP. And then STA receives a DEAUTH from AP in ieee80211_rx_mgmt_deauth() and then restart a full connection cycle. STA printk log:

<6>[  987.530000] wlan0: deauthenticated from 00:0f:92:fa:98:b8 (Reason: 7=CLASS3_FRAME_FROM_NONASSOC_STA)	//98:b8 is AP
<6>[  987.540000] br-lan: port 3(wlan0) entered disabled state
<6>[  987.550000] wlan0: authenticate with 00:0f:92:fa:98:b8
<6>[  987.560000] wlan0: send auth to 00:0f:92:fa:98:b8 (try 1/10)
<6>[  987.560000] wlan0: authenticated
<6>[  987.570000] wlan0: associate with 00:0f:92:fa:98:b8 (try 1/10)
<6>[  987.570000] wlan0: RX AssocResp from 00:0f:92:fa:98:b8 (capab=0x431 status=0 aid=1)
<6>[  987.570000] wlan0: associated

Both monitor_work[ieee80211_sta_monitor_work] and beacon_connection_loss_work[ieee80211_beacon_connection_loss_work] disconnection mechanism end up with ieee80211_sta_connection_lost() to disconnect with AP.

April 6,2017
STA hop every 10second overnight. STA no memory leak no crash.

April 5,2017
STA hops atonomously creating a fake CSA frame and tail it by skb_queue_tail(&sdata->skb_queue, skb_csa); Overnight run shows free memory changed from 32888 to 32796. This means the skb_csa didn't cause leakage and doable.

struct ieee80211_local.(struct cfg80211_scan_request) *scan_req.n_channels and .(ieee80211_channel) *channels[0] have info about all scan frequencies.

April 3, 2017
/* Driver provides separate commands for authentication and association (SME in wpa_supplicant). */
#define WPA_DRIVER_FLAGS_SME            0x00000020
This is true/defined in supplicant.

Mar 30, 2017
Import mt7621 in GitLab to Eclipse: [First upload the SSK key to GitLab website]
1. Protocol = SSH:
URI : ssh://git@192.168.22.89/microhard/mt7621.git
Host : 192.168.22.89
Repository path : microhard/mt7621.git
Authentication User: git
Authentication Password : blank empty

When click "Next", a SSK passphrase was asked. This passphrase was set when creating the SSH key: "microhard"

2. Protocol = HTTP
URI : http://192.168.22.89/microhard/mt7621.git
Host : 192.168.22.89
Repository path : /microhard/mt7621.git
Authentication User: jli			// This is the Windows LDAP username and password
Authentication Password : mhardcorpMicroh@rd


Mar 27, 2017
In ieee80211_sta_work(), if the AUTH_REQ and ASSO_REQ frames are ACKed, then the IEEE80211_AUTH_TIMEOUT_SHORT and IEEE80211_ASSOC_TIMEOUT_SHORT are used to wait for the other part sending back AUTH_RESP and ASSO_RESP. 

If the frames are not even ACKed, there's no point to wait and time out right away by:
ifmgd->auth_data->timeout = jiffies - 1

This is why we see "send auth to" and "associate with" prints have very short time interval. But, note: "direct probe to " that uses ieee80211_send_probe_req() doesn't use that scheme. It strictly follows the IEEE80211_AUTH_TIMEOUT timeout between probes. Because of this, IEEE80211_AUTH_MAX_TRIES should not be too high to save probe time.

Mar 24, 2017
1. wpa_supplicant_rx_eapol() : wpa_supplicant_req_auth_timeout() set Timeout for completing IEEE 802.1X and WPA authentication. This time must be longer than 1.1 second. Considering a room set it to 1.613s.

2. #define IEEE80211_AUTH_MAX_TRIES 2 and IEEE80211_ASSOC_MAX_TRIES: 1 doesn't work, maybe a bug in mac80211. At least 2. Do not use too many retries because that will affect the 4-way H/S. After proceeding to sending 1/4, the AP maybe forced back to ASSOCIATED state by the following assoc_req and has to re-start the 1/4. Basically 2 is ok and more retries do not help.

why at least 2 times IEEE80211_AUTH_MAX_TRIES?
By looking into ieee80211_probe_auth(), the first time is not AUTH_REQ, but a ieee80211_send_probe_req(). This PROBE_REQ accounts 1 time. And then the following AUTH_REQ accounts 1 time. So at least 2 retries.

ap_handle_timer(): this may not be started every hotapd startup. In some conditions this timer starts up. How to make the ap_handle_timer start? Just stop STA and start AP to let AP's LED scrolling. And then start STA. When they're connected, the hostapd log will show like:
"wlan0: Station 00:0f:92:fa:80:82 has been active 0s ago"

Mar 23, 2017
The original 
#define IEEE80211_AUTH_TIMEOUT          (HZ / 5)
Frequently causes the STA side complains:
"
wlan0: authentication with xxxxx
wlan0: direct probe to xxxxx(try1/1)
wlan0: authentication with xxxx timed out
"

I set IEEE80211_AUTH_MAX_TRIES 1 and the signal is very good condition. Very hard to connect.

When change #define IEEE80211_AUTH_TIMEOUT          (HZ / 3) and IEEE80211_AUTH_MAX_TRIES 2, connection is fast. The AUTH_TIMEOUT must not be less than 330mS on this platform. The ASSO_TIMEOUT must be more than 360mS.

The original ap_max_timeout mechanism uses ieee80211_probe_client() function to poll a station from AP.
ieee80211_report_used_skb() -----> cfg80211_probe_status() sends NL80211_CMD_PROBE_CLIENT flag to userspace [not a command here, userspace will check NL80211_CMD_PROBE_CLIENT flag].

hostapd:
ap_handle_timer() -----> hostapd_drv_poll_client() -----> hapd->driver->poll_client = nl80211_poll_client() send NL80211_CMD_PROBE_CLIENT command -------->
{.cmd = NL80211_CMD_PROBE_CLIENT,
.doit = nl80211_probe_client,} -----> nl80211_probe_client ------> rdev->ops->probe_client=ieee80211_probe_client(), send IEEE80211_STYPE_NULLFUNC or IEEE80211_STYPE_QOS_NULLFUNC null function data to STA by VO Queue. 


Test pDDL f/w, max_inactivity is absent in wireless config file. Verified that the original am_max_inactivity mechanism still effective. See the hostapd log:

1487279092.933822: ap_handle_timer: 00:0f:92:fa:80:82 flags=0x408aa3 timeout_next=0
1487279092.934915: wlan0: Station 00:0f:92:fa:80:82 has been inactive too long: 36 sec, max allowed: 30
1487279092.935000:   Polling STA
1487279092.935030:   Polling STA
===MHX(ap_handle_timer) Polling STA......
1487279092.935329: nl80211: Drv Event 84 (NL80211_CMD_PROBE_CLIENT) received for wlan0
1487279092.935409: nl80211: Probe client event
1487279092.935471: ap_handle_timer: register ap_handle_timer timeout for 00:0f:92:fa:80:82 (1 seconds - AP_DISASSOC_D
ELAY)
1487279092.936054: nl80211: Drv Event 84 (NL80211_CMD_PROBE_CLIENT) received for wlan0
1487279092.936150: nl80211: Probe client event
1487279092.936223: wlan0: Event DRIVER_CLIENT_POLL_OK (39) received
1487279092.936272: STA 00:0f:92:fa:80:82 ACKed pending activity poll
1487279093.936640: ap_handle_timer: 00:0f:92:fa:80:82 flags=0x408aa3 timeout_next=1
1487279093.937704: wlan0: Station 00:0f:92:fa:80:82 has been active 1s ago
1487279093.937784: ap_handle_timer: register ap_handle_timer timeout for 00:0f:92:fa:80:82 (38 seconds)
1487279131.943821: ap_handle_timer: 00:0f:92:fa:80:82 flags=0x408aa3 timeout_next=0
1487279131.944913: wlan0: Station 00:0f:92:fa:80:82 has been inactive too long: 39 sec, max allowed: 30
1487279131.944997:   Polling STA
1487279131.945027:   Polling STA
===MHX(ap_handle_timer) Polling STA......
1487279131.945317: nl80211: Drv Event 84 (NL80211_CMD_PROBE_CLIENT) received for wlan0
1487279131.945398: nl80211: Probe client event
1487279131.945460: ap_handle_timer: register ap_handle_timer timeout for 00:0f:92:fa:80:82 (1 seconds - AP_DISASSOC_D
ELAY)
1487279131.945884: nl80211: Drv Event 84 (NL80211_CMD_PROBE_CLIENT) received for wlan0
1487279131.945965: nl80211: Probe client event
1487279131.946038: wlan0: Event DRIVER_CLIENT_POLL_OK (39) received
1487279131.946087: STA 00:0f:92:fa:80:82 ACKed pending activity poll
1487279132.946634: ap_handle_timer: 00:0f:92:fa:80:82 flags=0x408aa3 timeout_next=1
1487279132.947724: wlan0: Station 00:0f:92:fa:80:82 has been active 1s ago
1487279132.947805: ap_handle_timer: register ap_handle_timer timeout for 00:0f:92:fa:80:82 (31 seconds)
1487279163.953882: ap_handle_timer: 00:0f:92:fa:80:82 flags=0x408aa3 timeout_next=0
1487279163.955023: wlan0: Station 00:0f:92:fa:80:82 has been active 14s ago
1487279163.955106: ap_handle_timer: register ap_handle_timer timeout for 00:0f:92:fa:80:82 (23 seconds)

1487279186.957687: ap_handle_timer: 00:0f:92:fa:80:82 flags=0x408aa3 timeout_next=0
1487279186.958778: wlan0: Station 00:0f:92:fa:80:82 has been active 4s ago
1487279186.958859: ap_handle_timer: register ap_handle_timer timeout for 00:0f:92:fa:80:82 (36 seconds)

1487279222.963827: ap_handle_timer: 00:0f:92:fa:80:82 flags=0x408aa3 timeout_next=0
1487279222.964910: wlan0: Station 00:0f:92:fa:80:82 has been inactive too long: 40 sec, max allowed: 30
1487279222.964994:   Polling STA
1487279222.965023:   Polling STA
===MHX(ap_handle_timer) Polling STA......
1487279222.965267: nl80211: Drv Event 84 (NL80211_CMD_PROBE_CLIENT) received for wlan0
1487279222.965386: nl80211: Probe client event
1487279222.965450: ap_handle_timer: register ap_handle_timer timeout for 00:0f:92:fa:80:82 (1 seconds - AP_DISASSOC_D
ELAY)
1487279222.965883: nl80211: Drv Event 84 (NL80211_CMD_PROBE_CLIENT) received for wlan0
1487279222.965962: nl80211: Probe client event
1487279222.966036: wlan0: Event DRIVER_CLIENT_POLL_OK (39) received
1487279222.966085: STA 00:0f:92:fa:80:82 ACKed pending activity poll
1487279223.966626: ap_handle_timer: 00:0f:92:fa:80:82 flags=0x408aa3 timeout_next=1
1487279223.967715: wlan0: Station 00:0f:92:fa:80:82 has been active 1s ago
1487279223.967796: ap_handle_timer: register ap_handle_timer timeout for 00:0f:92:fa:80:82 (32 seconds)
1487279255.969188: ap_handle_timer: 00:0f:92:fa:80:82 flags=0x408aa3 timeout_next=0
1487279255.970260: wlan0: Station 00:0f:92:fa:80:82 has been active 0s ago
1487279255.970342: ap_handle_timer: register ap_handle_timer timeout for 00:0f:92:fa:80:82 (36 seconds)
1487279291.974938: ap_handle_timer: 00:0f:92:fa:80:82 flags=0x408aa3 timeout_next=0
1487279291.976006: wlan0: Station 00:0f:92:fa:80:82 has been active 8s ago
1487279291.976087: ap_handle_timer: register ap_handle_timer timeout for 00:0f:92:fa:80:82 (22 seconds)
1487279313.983825: ap_handle_timer: 00:0f:92:fa:80:82 flags=0x408aa3 timeout_next=0
1487279313.984900: wlan0: Station 00:0f:92:fa:80:82 has been active 4s ago
1487279313.984982: ap_handle_timer: register ap_handle_timer timeout for 00:0f:92:fa:80:82 (32 seconds)
1487279345.986334: ap_handle_timer: 00:0f:92:fa:80:82 flags=0x408aa3 timeout_next=0
1487279345.987414: wlan0: Station 00:0f:92:fa:80:82 has been active 0s ago
1487279345.987494: ap_handle_timer: register ap_handle_timer timeout for 00:0f:92:fa:80:82 (42 seconds)
1487279387.990820: ap_handle_timer: 00:0f:92:fa:80:82 flags=0x408aa3 timeout_next=0
1487279387.991905: wlan0: Station 00:0f:92:fa:80:82 has been inactive too long: 42 sec, max allowed: 30
1487279387.991990:   Polling STA
1487279387.992020:   Polling STA
===MHX(ap_handle_timer) Polling STA......
1487279387.992267: nl80211: Drv Event 84 (NL80211_CMD_PROBE_CLIENT) received for wlan0
1487279387.992387: nl80211: Probe client event
1487279387.992449: ap_handle_timer: register ap_handle_timer timeout for 00:0f:92:fa:80:82 (1 seconds - AP_DISASSOC_D
ELAY)
1487279387.992903: nl80211: Drv Event 84 (NL80211_CMD_PROBE_CLIENT) received for wlan0
1487279387.992983: nl80211: Probe client event
1487279387.993057: wlan0: Event DRIVER_CLIENT_POLL_OK (39) received
1487279387.993104: STA 00:0f:92:fa:80:82 ACKed pending activity poll
1487279388.993625: ap_handle_timer: 00:0f:92:fa:80:82 flags=0x408aa3 timeout_next=1
1487279388.994725: wlan0: Station 00:0f:92:fa:80:82 has been active 1s ago
1487279388.994807: ap_handle_timer: register ap_handle_timer timeout for 00:0f:92:fa:80:82 (40 seconds)


Then remove the antennas of AP and STA, AP will disassociate and LED shows "scanning":


1487279446.002799:   Polling STA
===MHX(ap_handle_timer) Polling STA......
1487279446.003094: nl80211: Drv Event 84 (NL80211_CMD_PROBE_CLIENT) received for wlan0
1487279446.003174: nl80211: Probe client event
1487279446.003237: ap_handle_timer: register ap_handle_timer timeout for 00:0f:92:fa:80:82 (1 seconds - AP_DISASSOC_D
ELAY)
1487279446.007933: nl80211: Drv Event 84 (NL80211_CMD_PROBE_CLIENT) received for wlan0
1487279446.008018: nl80211: Probe client event
1487279447.003828: ap_handle_timer: 00:0f:92:fa:80:82 flags=0x408ae3 timeout_next=1
1487279447.004905: wlan0: Station 00:0f:92:fa:80:82 has been inactive too long: 39 sec, max allowed: 30
1487279447.005073: wlan0: Timeout, sending disassociation info to STA 00:0f:92:fa:80:82
1487279447.005126: nl80211: send_mlme - noack=0 freq=0 no_cck=0 offchanok=0 wait_time=0 fc=0xa0 nlmode=3
1487279447.005198: nl80211: send_mlme -> send_frame
1487279447.005231: nl80211: send_frame - Use bss->freq=2421
1487279447.005270: nl80211: send_frame -> send_frame_cmd
1487279447.005661: wlan0: AP-STA-DISCONNECTED 00:0f:92:fa:80:82
1487279447.005786: 1487279447.005802: wlan0: STA 00:0f:92:fa:80:82 IEEE 802.11: disassociated due to inactivity
1487279447.006195: ap_handle_timer: register ap_handle_timer timeout for 00:0f:92:fa:80:82 (1 seconds - AP_DEAUTH_DEL
AY)
1487279447.006440: 1487279447.006455: wlan0: STA 00:0f:92:fa:80:82 MLME: MLME-DISASSOCIATE.indication(00:0f:92:fa:80:
82, 4)
1487279447.006650: 1487279447.006665: wlan0: STA 00:0f:92:fa:80:82 MLME: MLME-DELETEKEYS.request(00:0f:92:fa:80:82)
1487279447.008008: wpa_driver_nl80211_set_key: ifindex=17 (wlan0) alg=0 addr=0x4e79d8 key_idx=0 set_tx=1 seq_len=0 ke
y_len=0
1487279447.008172:    addr=00:0f:92:fa:80:82
1487279447.008606: nl80211: Drv Event 60 (NL80211_CMD_FRAME_TX_STATUS) received for wlan0
1487279447.008688: nl80211: Frame TX status event
1487279447.008762: wlan0: Event TX_STATUS (18) received
1487279447.008812: mgmt::disassoc cb
1487279447.008843: STA 00:0f:92:fa:80:82 did not acknowledge disassoc
1487279447.008909: Ignore disassoc cb for test frame
1487279448.007390: ap_handle_timer: 00:0f:92:fa:80:82 flags=0x408ac1 timeout_next=2
1487279448.007664: wlan0: Timeout, sending deauthentication info to STA 00:0f:92:fa:80:82
1487279448.007718: nl80211: send_mlme - noack=0 freq=0 no_cck=0 offchanok=0 wait_time=0 fc=0xc0 nlmode=3
1487279448.007790: nl80211: send_mlme -> send_frame
1487279448.007823: nl80211: send_frame - Use bss->freq=2421
1487279448.007860: nl80211: send_frame -> send_frame_cmd
1487279448.008278: 1487279448.008296: wlan0: STA 00:0f:92:fa:80:82 IEEE 802.11: deauthenticated due to inactivity (ti
mer DEAUTH/REMOVE)
1487279448.008832: 1487279448.008880: wlan0: STA 00:0f:92:fa:80:82 MLME: MLME-DEAUTHENTICATE.indication(00:0f:92:fa:8
0:82, 2)
1487279448.009060: 1487279448.009075: wlan0: STA 00:0f:92:fa:80:82 MLME: MLME-DELETEKEYS.request(00:0f:92:fa:80:82)
1487279448.010440: wpa_driver_nl80211_set_key: ifindex=17 (wlan0) alg=0 addr=0x4e79d8 key_idx=0 set_tx=1 seq_len=0 ke
y_len=0
1487279448.010604:    addr=00:0f:92:fa:80:82
1487279448.010838: nl80211: Set WDS STA addr=00:0f:92:fa:80:82 aid=1 val=0 name=wlan0.sta1
1487279448.012929: nl80211: wlan0[17]: set_sta_vlan(00:0f:92:fa:80:82, ifname=wlan0[17], vlan_id=0)
1487279448.015547: nl80211: Remove interface ifindex=19
1487279448.015662: nl80211: if_indices[16]: 5 17
1487279448.025186: nl80211: sta_remove -> DEL_STATION wlan0 00:0f:92:fa:80:82 --> 0 (Success)
1487279448.025338: hostapd_ht_operation_update current operation mode=0x4
1487279448.025382: hostapd_ht_operation_update new operation mode=0x0 changes=1
1487279448.025469: hostapd_eid_mhqos: mhqos eid: eid=221, len=7, OUI=000f92, Type=02, SubType=01, Ver=01, mhqos_enabl
ed=01




Mar 22,2017
"hostapd_cli  chan_switch 5 2455 ht" command execution:
 wpa_ctrl_request() send socket ---> hostapd_ctrl_iface_receive() --->hostapd_ctrl_iface_chan_switch() ----> hostapd_parse_csa_settings() and hostapd_switch_channel().

How does hostapd know the driver supports channel switch? It is similar to the NL80211_FEATURE_INACTIVITY_TIMER feature supported inside driver :
1. In ath9k_set_hw_capab() : hw->wiphy->flags |= WIPHY_FLAG_HAS_CHANNEL_SWITCH;
2. wiphy_register() : If drive doesn't support CSA then wiphy->flags &= ~WIPHY_FLAG_HAS_CHANNEL_SWITCH;
3. nl80211_send_wiphy() will return this flag to upper layer
4.              .cmd = NL80211_CMD_GET_WIPHY,
                .doit = nl80211_get_wiphy,
5. Add NL80211_CMD_CHANNEL_SWITCH command to NL80211_ATTR_SUPPORTED_COMMANDS table. Note NL80211_CMD is changed to NL80211_CMD_CHANNEL_SWITCH by CMD() macro. NL80211_CMD_CHANNEL_SWITCH defination is common between driver and hostapd/supplicant.

Hostapd:
6. wpa_driver_nl80211_get_info() ---> send_and_recv_msgs(drv, msg, wiphy_info_handler, info) ---> wiphy_info_handler(). ----> wiphy_info_supp_cmds(info, tb[NL80211_ATTR_SUPPORTED_COMMANDS])
7. In wiphy_info_supp_cmds(), parse tb[NL80211_ATTR_SUPPORTED_COMMANDS]:
                case NL80211_CMD_CHANNEL_SWITCH:

                        info->channel_switch_supported = 1;
8. In wpa_driver_nl80211_get_info():
        if (info->channel_switch_supported)
                drv->capa.flags |= WPA_DRIVER_FLAGS_AP_CSA;
	This flag WPA_DRIVER_FLAGS_AP_CSA will be used by hostapd to indicate this CSA capability in code.

Mar 21,2017
About  CONFIG_MHX_AP_INACT_MONITOR:
1. ieee80211_ap_inactive_timer(): The mail work function. Use  sta_info *sta->last_rx [original mac80211] as reference.
2. ap_inactive_sec [Microhard]<------cfg80211_ap_settings.inactivity_timeout [original mac80211]<--------NL80211_ATTR_INACTIVITY_TIMEOUT[original mac80211] <----------wpa_driver_ap_params *params->ap_max_inactivity[original mac80211].

ap_max_inactivity is shared with original hostapd_drv_poll_client() mechanism.

Mar 17, 2017
"IEEE 802.1X: Ignore STA - 802.1X not enabled or forced for WPS" of hostapd is not a concern.
"WPA: drop TX EAPOL in non-IEEE 802.1X mode (type=1 len=0)" of wpa_supplicant is not a concern.

Mar 16,2017
hostapd EAPOL timeout control:
These are for both 1/4 and 3/4 message
static const u32 eapol_key_timeout_first = 100; /* ms */
static const u32 eapol_key_timeout_subseq = 1000; /* ms */
static const u32 eapol_key_timeout_first_group = 500; /* ms */

hostapd EAPOL retry control:
static const u32 dot11RSNAConfigGroupUpdateCount = 4;
static const u32 dot11RSNAConfigPairwiseUpdateCount = 4;


wpa_supplicant EAPOL timeout control:
wpa_supplicant_event_assoc() ---> wpa_supplicant_req_auth_timeout()
wpa_supplicant_rx_eapol() ---> wpa_supplicant_req_auth_timeout()

wpa_supplicant EAPOL retry control:
Not found.

Doesn't make sense to make too many retries in 4-way handshake. For example. If AP sends 1/4 and times out when waiting for 2/4 from STA, AP doesn't know what exactly happened ------ if the STA doesn't receive 1/4 or STA already received 1/4 and sent out 2/4 but AP couldn't get 2/4. In the 1st case, retry make sense. In the 2nd case, STA is expecting 3/4 now but AP retries sending 1/4 many times is just waste of time.

Mar 15, 2017
Only on Jason's site, we see the STA Auth and Asso many times, and then the STA send a Deauth(reason 3) to AP and let AP scan and AP's LED scrolling. Asso times out many times and Auth looks ok may be Auth packet is 58Bytes long and Asso packet is 158 bytes long and is easier to be shot down by noise because this is an open air test.

Change encryption from AES128 to None. This time the connection is ok, the STA never kicks out AP by Deauth. But still see many timeouts in Asso stage. 

Increase the timeout IEEE80211_AUTH_TIMEOUT, IEEE80211_ASSOC_TIMEOUT and eapol_key_timeout_first doesn't help. The root cause is the air collision makes the packets lost. Just passively waiting longer time just a waste of time because the packets are already lost and surely we will not wait for a success no mater how long we wait. In this noisy environment, the way should be small timeout number and big retry number. RETRY and send more packets. 


AP side 4-way handshake retry times control : pairwise : sm->TimeoutCtr > (int) dot11RSNAConfigPairwiseUpdateCount; Group : sm->GTimeoutCtr > (int) dot11RSNAConfigGroupUpdateCount. The defaults are 4.


Mar 9,2017
PWii and pDDL with WDS=0,PC1 on eth0 can not ping PC2 on eth1 i.e. STA's eth0 and eht1 can not communicate when wlan0 is active. Because on STA, this rule:
Bridge chain: POSTROUTING, entries: 1, policy: ACCEPT
-o wlan0 -j arpnat  --arpnat-target ACCEPT
Has changed the source PC's MAC to wlan0's MAC[=br-lan's MAC] when the packet goes to eth1 and PC2 returns ARP to wlan0's MAC addr instead of PC1's addr. 

The skb looks is modified by that POSTROUTING rule for wlan prior to this packet being forwarded to eth1, which is wrong. Only the ARP packet out from wlan0 should be changed src MAC to wlan0's MAC. The ARP packet out from eth1 should have the original src MAC address which is the PC1's MAC addr. 

 brctl showstp br-lan shows eth1 port id is 8002 and wlan0 8003. Adjust their order of joining the bridge to make port id of wlan0(8002) lower than eth1(8003) so that the ARP is sent from eth1 prior to wlan0 so that the ARP packet is not wrongly changed by the wlan arpnat rule. The bridge sends the bigger port id first.

Solution : Make traffic to wlan0 processed last by changing br_if list a queue instead of stack style. See #0003698. wlan0 must be the last one added into the bridge.

Mar 8,2017
BulletPlus WPA Enterprise doesn't support CHAPV2, MD5 works but unstable. WPA2 Enterprise doesn't work at all. Maybe because of the Radius Server(TekRadius). Need to try FreeRadius.

Mar 6,2017
The units last Fri were not restart and "TX Path Hang : 225" is still there. When wifi on STA, the connection resumed!!!!????. Looks like the AP TX path is not actually hung. But why the scope couldn't capture the ARP sent by AP?

AP doesn't decrease the RTS threshold to 64 so that it will not block the STA--->AP serial data.  AP's RTS threshold (dot11RTSThreshold); -1 = RTS/CTS disabled. But in a test iperf from AP--->STA, on the STA monitor interface still see a lot of RTS from AP and dot11RTSFailureCount  dot11RTSSuccessCount of AP increased. AP's RTS may block STA's RTS of serial data, right???? With non-hopping fixed channel and 5Mbps low traffic this RTS counter doesn't increment. But with 30Mbps flooding, we see the RTS counter incremented a lot.

By looking into code, (dot11RTSThreshold)=-1 doesn't disable RTS completely. It is controled in rate-control algorithm. If length > rts_threshold ---> control.use_rts--->rates[i].flags|=IEEE80211_TX_RC_USE_RTS_CTS--->ATH9K_RATESERIES_RTS_CTS--->ATH9K_TXDESC_RTSENA---> AR_RTSEnable[TX Descriptor word 11 bit 22.]. The minstreal overrides the user set of disabling RTS and smartly enables the RTS in 2 slot of retry to increase reliability.

Mar 3,2017
pDDLAdaptive. STA reports its signal/nf/tp to AP. WHen AP pushes 8Mbps(4MHz bw), if there is no RTS protection on the report packet, the report received on AP can has a gap up to 9S. 

                struct {
                        s8 signal;
                        s8 noisefloor;
                        u32 tp;
                        u8 varible[30];	// 10 doesn't have RTS
                } __packed mhx_conninfo;

Pad the report packet >64(current RTS threshold), the gap can be up to 4S.

Create a monitor interface on STA and tcpdump it. We can see the STA doesn't send the packet in time and the gap is high when high traffic AP-->STA. It is not because the receiver side (AP) can not receive it in time.
15:11:37.435187 6.0 Mb/s [bit 15] Action (00:0f:92:fa:80:82 (oui Unknown)): Vendor Act#199
15:11:41.732364 6.0 Mb/s [bit 15] Action (00:0f:92:fa:80:82 (oui Unknown)): Vendor Act#199
15:11:52.342831 6.0 Mb/s [bit 15] Action (00:0f:92:fa:80:82 (oui Unknown)): Vendor Act#204
15:11:53.350568 6.0 Mb/s [bit 15] Action (00:0f:92:fa:80:82 (oui Unknown)): Vendor Act#204
15:11:55.332689 6.0 Mb/s [bit 15] Action (00:0f:92:fa:80:82 (oui Unknown)): Vendor Act#204
At the same time dot11RTSFailureCount sees jump.


When test with a through traffic PC1-->AP-->STA-->PC2, 80Mbps UDP flood, STA sees a normal mgmt-action(report) tx:
root@UserDevice:~# tcpdump -i mon  | grep Action
16:02:14.254266 6.0 Mb/s [bit 15] Action (00:0f:92:fa:80:82 (oui Unknown)): Vendor Act#194
16:02:15.498422 6.0 Mb/s [bit 15] Action (00:0f:92:fa:80:82 (oui Unknown)): Vendor Act#194
16:02:16.276511 6.0 Mb/s [bit 15] Action (00:0f:92:fa:80:82 (oui Unknown)): Vendor Act#193
16:02:17.248901 6.0 Mb/s [bit 15] Action (00:0f:92:fa:80:82 (oui Unknown)): Vendor Act#194
16:02:18.260254 6.0 Mb/s [bit 15] Action (00:0f:92:fa:80:82 (oui Unknown)): Vendor Act#195
16:02:19.252779 6.0 Mb/s [bit 15] Action (00:0f:92:fa:80:82 (oui Unknown)): Vendor Act#193
16:02:20.309038 6.0 Mb/s [bit 15] Action (00:0f:92:fa:80:82 (oui Unknown)): Vendor Act#195
16:02:21.643042 6.0 Mb/s [bit 15] Action (00:0f:92:fa:80:82 (oui Unknown)): Vendor Act#193
16:02:22.258317 6.0 Mb/s [bit 15] Action (00:0f:92:fa:80:82 (oui Unknown)): Vendor Act#194
16:02:23.250238 6.0 Mb/s [bit 15] Action (00:0f:92:fa:80:82 (oui Unknown)): Vendor Act#192
16:02:24.252474 6.0 Mb/s [bit 15] Action (00:0f:92:fa:80:82 (oui Unknown)): Vendor Act#194

But the RTS TX is abnormal:
root@UserDevice:~# while true; do cat sys/kernel/debug/ieee80211/phy0/statistics
/dot11RTS*;sleep 1;echo --------;done
--------
66839
17866
--------
66839
17867	//dot11RTSSuccessCount
--------
66843	//dot11RTSFailureCount jumps
17867	//dot11RTSSuccessCount still not successful
--------
66847	//dot11RTSFailureCount jumps
17867	//dot11RTSSuccessCount still not successful
--------
66847
17868
--------
66851
17868
--------
66855
17868
--------
66855
17869
--------
66859
17869
--------
The AP sees lost Action frames:
root@UserDevice:~# tcpdump -i mon | grep Action 	//On AP
16:07:34.035923 6001274122us tsft 1.5 Mb/s 2410 MHz 11g/5Mhz -59dB signal [bit 29] Action (00:0f:92:fa:80:82 (oui Unknown)): Vendor Act#206
16:07:35.165637 6002402918us tsft 1.5 Mb/s 2414 MHz 11g/5Mhz -59dB signal [bit 29] Action (00:0f:92:fa:80:82 (oui Unknown)): Vendor Act#204
16:07:37.065982 6004303533us tsft 1.5 Mb/s 2418 MHz 11g/5Mhz -59dB signal [bit 29] Action (00:0f:92:fa:80:82 (oui Unknown)): Vendor Act#203
16:07:42.040141 6009274329us tsft 1.5 Mb/s 2429 MHz 11g/5Mhz -60dB signal [bit 29] Action (00:0f:92:fa:80:82 (oui Unknown)): Vendor Act#198
16:07:43.071006 6010304973us tsft 1.5 Mb/s 2433 MHz 11g/5Mhz -60dB signal [bit 29] Action (00:0f:92:fa:80:82 (oui Unknown)): Vendor Act#197
16:07:46.042820 6013276900us tsft 1.5 Mb/s 2441 MHz 11g/5Mhz -59dB signal [bit 29] Action (00:0f:92:fa:80:82 (oui Unknown)): Vendor Act#198

And AP sees lost RTS from STA for the report:
root@UserDevice:~# tcpdump -i mon type ctl subtype rts
tcpdump: WARNING: mon: no IPv4 address assigned
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on mon, link-type IEEE802_11_RADIO (802.11 plus radiotap header), capture size 65535 bytes
16:14:55.980101 6443200813us tsft 1.5 Mb/s 2469 MHz 11g/5Mhz -65dB signal [bit 29] Request-To-Send TA:00:0f:92:fa:80:82 (oui Unknown) 
16:14:56.037902 6443258769us tsft 1.5 Mb/s 2469 MHz 11g/5Mhz -65dB signal [bit 29] Request-To-Send TA:00:0f:92:fa:80:82 (oui Unknown) 
16:14:59.047123 6446266383us tsft 1.5 Mb/s 2477 MHz 11g/5Mhz -67dB signal [bit 29] Request-To-Send TA:00:0f:92:fa:80:82 (oui Unknown) 
16:15:01.327085 6448545676us tsft 1.5 Mb/s 2410 MHz 11g/5Mhz -59dB signal [bit 29] Request-To-Send TA:00:0f:92:fa:80:82 (oui Unknown) 

16:15:02.041903 6449260516us tsft 1.5 Mb/s 2410 MHz 11g/5Mhz -59dB signal [bit 29] Request-To-Send TA:00:0f:92:fa:80:82 (oui Unknown) 
16:15:04.395769 6451615146us tsft 1.5 Mb/s 2418 MHz 11g/5Mhz -44dB signal [bit 29] Request-To-Send TA:00:0f:92:fa:80:82 (oui Unknown) 
16:15:06.036617 6453255278us tsft 1.5 Mb/s 2421 MHz 11g/5Mhz -57dB signal [bit 29] Request-To-Send TA:00:0f:92:fa:80:82 (oui Unknown) 
16:15:10.038214 6457255684us tsft 1.5 Mb/s 2433 MHz 11g/5Mhz -60dB signal [bit 29] Request-To-Send TA:00:0f:92:fa:80:82 (oui Unknown) 
16:15:11.271363 6458488101us tsft 1.5 Mb/s 2437 MHz 11g/5Mhz -58dB signal [bit 29] Request-To-Send TA:00:0f:92:fa:80:82 (oui Unknown) 
16:15:11.436927 6458653559us tsft 1.5 Mb/s 2437 MHz 11g/5Mhz -60dB signal [bit 29] Request-To-Send TA:00:0f:92:fa:80:82 (oui Unknown) 
16:15:12.052661 6459268867us tsft 1.5 Mb/s 2437 MHz 11g/5Mhz -60dB signal [bit 29] Request-To-Send TA:00:0f:92:fa:80:82 (oui Unknown) 
16:15:16.066809 6463283269us tsft 1.5 Mb/s 2449 MHz 11g/5Mhz -59dB signal [bit 29] Request-To-Send TA:00:0f:92:fa:80:82 (oui Unknown) 

This shows even the RTS doesn't guarantee a successful backforth TX under heavy traffic. Because in the flood, even the RTS can not be received by AP successfully.
[Question:] Serial data uses the RTS mechenism too. How does that guarantee the serial data real-time in the flood condition? Maybe in non-flood condition it works well not tested.

Jason played pDDLAdp, "TX Path Hang : 225" is seen in "reset" in AP. AP looks like sending packets but by the scope, it is confirmed that AP is NOT actually sending the packet. This should be caused by the "TX Path Hang" reset condition. When this happens, the serial UDP data from STA to AP is still OK but tried reverse direction didn't work. RESET_TYPE_TX_HANG

Mar 2,2017
In pDDL:
local->hw.flags & IEEE80211_HW_AMPDU_AGGREGATION=1; local->hw.flags & IEEE80211_HW_TX_AMPDU_SETUP_IN_HW=0.

Mar 1,2017
Experiment on pDDL. Conclusion: No matter what kind of noise injection [in this experiment we used a single tone just a bit offset of center frequency] we inject to the wireless path, ther reading of "Signal" and "Signal(average)" do NOT change. This "Signal" reading is actually the RSSI, the signal energy, which is irrelative with any interferences. The "Noise Floor" reading increases when interference is injected. But, the "noise floor" is updated TOO slow and doesn't have practical use. In the experiment it took 18Seconds to increase/decrease to a reasonable number when interference is injected/dis-injected. The "rssi" reading of "iw station dump" actually means "SINR[SignalInterferenceNoiseRatio]", which = signal - noise_floor. This SINR changes with the injection but of course updated very slowly.

In ath_tx_complete_aggr():
0. In ar9003_hw_proc_txdesc():
	ts->ts_longretry = MS(status, AR_DataFailCnt);
   DATA_FAIL_CNT : Data failure count. Reports the number of times the actual frame(as opposed to the RTS) was sent but no ACK was received for the final transmission series (see the FINAL_TS_INDEX field).
"iw phy0 set retry short 1 long 1" doesn't change the "retries" in 1. It still goes up to 3 when d_max_rate_retry=d_max_rates=1.

1. 	retries = ts->ts_longretry + 1;
	for (i = 0; i < ts->ts_rateindex; i++)
		retries += rates[i].count;

ts->ts_rateindex = MS(status, AR_FinalTxIdx) : FINAL_TX_INDEX---Final transmission attempt series index. Specifies the number of the Tx series that caused frame transmission to terminate.

This retries is for all sub-frames. All sub-frames are transmitted with same retries in one aggregation transmit. If retries=5, that means all sub-frames have been re-transmitted 4 times.
When sys/kernel/debug/ieee80211/phy0/rc/d_max_rates and sys/kernel/debug/ieee80211/phy0/rc/d_max_rate_retry and both set to 1, the retries seen can be up to 3. If d_max_rates and d_max_rate_retry are not set, retries can be up to 9.

The logic is strange here. ts->ts_longretry should be minimum 1, all rates[i].count should be minimum 1, and then +1 so that the minimum of retries looks be 3. But sometimes we see 1&2. Why?????

2. else if (fi->retries < ATH_MAX_SW_RETRIES) {
			if (txok || !an->sleeping)
				ath_tx_set_retry(sc, txq, bf->bf_mpdu,
						 retries);

			txpending = 1;
		}
fi->retries is specific to each sub-frame. This shows how many times a sub-frame has been scheduled in SW for re-transmission. This is incremented in ath_tx_set_retry() by the "retries" mentioned above in 1. This is controlled by ATH_MAX_SW_RETRIES. 

If retries=5 in 1 and fi->retries=20 in 2, that means this specific sub-frames has been in air 5 * 20 =100 times.

After the antenn is removed, a typical print is :

<0>[  102.980000] MH8.1(ath_tx_process_buffer)ts->ts_status=0x00000001. txok=0		// ATH9K_TXERR_XRETRY is set by descriptor status.
<0>[  102.980000] MH2.0(ath_tx_complete_aggr) ts->ts_longretry=0
<0>[  102.980000] MH2.0 rates[0].cnt=3
<0>[  102.980000] MH2.0 rates[1].cnt=3
<0>[  102.980000] MH2.0(ath_tx_complete_aggr) retries=7
<0>[  102.980000] MH2.1. ts->ts_status=1,isaggr=2,tid=82d5f40c, seq_first=2643, isba=0.txok=0.nframes=20,nbad=20

and :

<0>[  103.040000] MH8.1(ath_tx_process_buffer)ts->ts_status=0x00000002. txok=0		// ATH9K_TXERR_FILT is set by TX descriptor status.
<0>[  103.040000] MH2.0(ath_tx_complete_aggr) ts->ts_longretry=0
<0>[  103.040000] MH2.0(ath_tx_complete_aggr) retries=1
<0>[  103.040000] MH2.1. ts->ts_status=2,isaggr=2,tid=82d5f40c, seq_first=2643, isba=0.txok=0.nframes=29,nbad=29

ts->ts_longretry in major most times is 0. Rarely reaches 1 and 2.

Feb 28,2017
PX2 generic OpenWRT wifi driver mesh mode. Use iw wlan0 mpath set next_hop actually doesn't work. The path is not fixed. 

Feb 27, 2017
Use a Windows10 Iperf3 to generate traffic. Both TCP and UDP can not be tagged with correct DSCP/TOS priorities. It is said the Windows can not do it. Linux Fedora 21 with Iperf3 test OK!
PX2 with generic OpenWRT mac80211 driver has a correct Queue mapping. This is testified by "Iperf3 -S" TOS/DSCP command.

Feb 24, 2017
VLC streaming server uses DSCP default 0 as priority. Testified by UDP Legacy, RTP-TS, and RTSP. RTP is not tested yet.

Do NOT count the printk() when printing verbos info even the printk ring buffer is increased to 2MB. This is a log:
<0>[ 4430.000000] =MHX6.0.0(ath_tx_start): skb_get_queue_mapping=2, txq->pending_frames=4		// Pending 4 frames
<0>[ 4430.000000] ===MHX6.0.1(ath_tx_start): tid->tidno=0. skb=83260840.info->flags=0x40000050
<0>[ 4430.000000] ==MHX7.0.1(ath_txq_schedule)!
<0>[ 4430.000000] ==MHX7.0.2(ath_txq_schedule) ac=833638fc!
<0>[ 4430.000000] =MHX13.1(ath_tx_get_tid_subframe)skb=83260840
<0>[ 4430.000000] =MHX13.2(ath_tx_get_tid_subframe)tx_info->flags=0x40000050
<0>[ 4430.000000] =MHX13.3(ath_tx_get_tid_subframe)seqno=2186,tid->seq_start=2183
<0>[ 4430.000000] ===MHX1.0(ath_tx_sched_aggr) aggr=1. tid=8336340c,txq->axq_ampdu_depth=2,txq->axq_depth=3.tx_info->flags=0x40000050.
<0>[ 4430.000000] ==MHX7.2(ath_txq_schedule) ac=833638fc, tid=8336340c.sent=FALSE.ath_tx_sched_aggr() returned FALSE!
<0>[ 4430.000000] =MHX14.4(ieee80211_tx_frags) End out
<0>[ 4430.000000] =MHX18.2(__ieee80211_tx)ieee80211_tx_frags returned result=1
<0>[ 4430.000000] =======MHX(ieee80211_select_queue):skb->protocol=800,sdata->control_port_protocol=888e
<0>[ 4430.000000]  =MHX10.1(ieee80211_subif_start_xmit),skb: len=60,protocol=0x0800,priority=0, queue_mapping=2, pkt_type=3


//////The time is lost about 3.4 second. Where did those print info go??? Lost. This is a printk lost.

<0>[ 4433.430000] =MHX14.4(ieee80211_tx_frags) End out
<0>[ 4433.430000] =MHX18.2(__ieee80211_tx)ieee80211_tx_frags returned result=1
<0>[ 4433.430000] =======MHX(ieee80211_select_queue):skb->protocol=800,sdata->control_port_protocol=888e
<0>[ 4433.430000]  =MHX10.1(ieee80211_subif_start_xmit),skb: len=1506,protocol=0x0800,priority=0, queue_mapping=2, pkt_type=3
<0>[ 4433.430000] =MHX16.1(ieee80211_xmit)
<0>[ 4433.430000] =MHX17.1(ieee80211_tx)
<0>[ 4433.430000] =MHX17.2(ieee80211_tx) res_prepare=0
<0>[ 4433.430000] =MHX18.1(invoke_tx_handlers): info->flags=0x40000050
<0>[ 4433.430000] =MHX18.2(invoke_tx_handlers): res=0
<0>[ 4433.430000] =MHX18.1(__ieee80211_tx)
<0>[ 4433.430000] =MHX14.1(ieee80211_tx_frags) In
<7>[ 4433.430000] ieee80211_tx_frags(In spinlock): info->hw_queue=2, txpending=0, local->queue_stop_reasons[2]=0, skb_queue_len(&local->pending[2]=0
<0>[ 4433.430000] =MHX14.3(ieee80211_tx_frags) Calling driver for skb=82c50240
<7>[ 4433.430000] ath: phy0: ===MHX111
<7>[ 4433.430000] ath: phy0: ===MHX222
<7>[ 4433.430000] ath: phy0: transmitting packet, skb: 82c50240, priority=0, queue=2
<0>[ 4433.430000] =MHX6.0.0(ath_tx_start): skb_get_queue_mapping=2, txq->pending_frames=214		// Pending 214 frames. Every this var is increased the "=MHX6.0.0(%s)" should be printed. But no this print info is seen. So where 														// is var added to 214???

Use a clean checkout without verbose print. Only printk when txq->pending_frames++/--. Then all txq->pending_frames increase/decreas activities can be seen very normal. See txp-pending_frames_counter-with-latest-pddl-q-modification.log.

Feb 23,2017
4way hand shake timeout defined in hostapd/src/src/ap/wpa_auth.c:

static const u32 eapol_key_timeout_first = 100; /* ms */
static const u32 eapol_key_timeout_subseq = 1000; /* ms */
static const u32 eapol_key_timeout_first_group = 500; /* ms */

Feb 17, 2017
The wpa_supplicant sends EAPOL:
wpa_supplicant_send_2_of_4()-->wpa_eapol_key_send()--->wpa_sm_ether_send()--->wpa_sm *sm->ctx->ether_send()--->_wpa_ether_send()--->wpa_ether_send()--->
	|---> l2_packet_send()
	\---> wpa_drv_send_eapol()---->wpa_supplicant_ *wpa_s->driver->send_eapol[ This is an optional function toto override l2_packet operations. See /src/drivers/driver.h. NOT DEFINED!!!!]

Hostapd seems send EAPOL with priority=0 but wpa_supplicant uses priority=7. In STA ieee80211_select_queue() is called and packet is assigned to prio=7. This is STA log:

<0>[  300.960000] =======MHX(ieee80211_select_queue):skb->protocol=888e,sdata->control_port_protocol=888e
<0>[  300.960000]  =MHX10.1(ieee80211_subif_start_xmit),skb: len=135,protocol=0x888e,priority=7, queue_mapping=0, pkt_type=0
<0>[  300.960000] =MHX16.1(ieee80211_xmit)
<0>[  300.960000] =MHX17.1(ieee80211_tx)
<0>[  300.960000] =MHX17.2(ieee80211_tx) res_prepare=0
<0>[  300.960000] =MHX18.1(invoke_tx_handlers): info->flags=0x40000010
<0>[  300.960000] =MHX18.2(invoke_tx_handlers): res=0
<0>[  300.960000] =MHX18.1(__ieee80211_tx)
<0>[  300.960000] =MHX14.1(ieee80211_tx_frags) In
<7>[  300.960000] ieee80211_tx_frags(In spinlock): info->hw_queue=0, txpending=0, local->queue_stop_reasons[0]=0, skb_queue_len(&loc
al->pending[0]=0
<0>[  300.960000] =MHX14.3(ieee80211_tx_frags) Calling driver for skb=832decc0
<7>[  300.960000] ath: phy0: transmitting packet, skb: 832decc0, priority=7, queue=0
<0>[  300.960000] =MHX6.0.0(ath_tx_start): skb_get_queue_mapping=0, txq->pending_frames=1
<0>[  300.960000] ===MHX6.0.1(ath_tx_start): tid->tidno=7. skb=832decc0.info->flags=0x60000018
<0>[  300.960000] ==MHX7.0.1(ath_txq_schedule)!
<0>[  300.960000] ==MHX7.0.2(ath_txq_schedule) ac=833218cc!
<0>[  300.960000] =MHX13.1(ath_tx_get_tid_subframe)skb=832decc0
<0>[  300.960000] =MHX13.2(ath_tx_get_tid_subframe)tx_info->flags=0x60000010
<0>[  300.960000] ===MHX1.0(ath_tx_sched_aggr) aggr=0. tid=83321620,txq->axq_ampdu_depth=0,txq->axq_depth=0.tx_info->flags=0x6000001
0.
<0>[  300.960000] =MHX13.1(ath_tx_get_tid_subframe)skb=  (null)
<0>[  300.960000] ===MHX1.1.0(ath_tx_sched_aggr) ath_tx_form_burst() returned.
<0>[  300.960000] ===MHX1.2(ath_tx_sched_aggr) aggr_len=0
<7>[  300.960000] ath: phy0: qnum: 3, txq depth: 0
<7>[  300.960000] ath: phy0: TXDP[3] = 3160c00 (a3160c00)
<0>[  300.960000] ==MHX7.1(ath_txq_schedule) ac=833218cc, tid=83321620.sent=true. ath_tx_sched_aggr() returned TRUE!!!
<0>[  300.960000] =MHX14.4(ieee80211_tx_frags) End out
<0>[  300.960000] =MHX18.2(__ieee80211_tx)ieee80211_tx_frags returned result=1
<0>[  300.960000] ==MHX8.1(ath_tx_process_buffer)ts->ts_status=0x00000000. txok=1
<0>[  300.960000] ==MHX3.1(ath_tx_complete_buf): txok=1,  ts->ts_status=0x0
<7>[  300.960000] ath: phy0: TX complete: skb: 832decc0
<0>[  300.960000] =MHX15.1(ath_txq_skb_done): fi->txq=0,
<0>[  300.960000] =MHX15.2(ath_txq_skb_done): txq->pending_frames=1, sc->tx.txq_max_pending[0]=246 
<0>[  300.960000] ==MHX7.0.1(ath_txq_schedule)!
<0>[  300.960000] ==MHX4.1(ieee80211_tx_status) skb=832decc0.retry_count=0. fc=0x8801


<0>[  300.970000] =======MHX(ieee80211_select_queue):skb->protocol=888e,sdata->control_port_protocol=888e
<0>[  300.970000]  =MHX10.1(ieee80211_subif_start_xmit),skb: len=113,protocol=0x888e,priority=7, queue_mapping=0, pkt_type=0
<0>[  300.970000] =MHX16.1(ieee80211_xmit)
<0>[  300.970000] =MHX17.1(ieee80211_tx)
<0>[  300.970000] =MHX17.2(ieee80211_tx) res_prepare=0
<0>[  300.970000] =MHX18.1(invoke_tx_handlers): info->flags=0x40000010
<0>[  300.970000] =MHX18.2(invoke_tx_handlers): res=0
<0>[  300.970000] =MHX18.1(__ieee80211_tx)
<0>[  300.970000] =MHX14.1(ieee80211_tx_frags) In
<7>[  300.970000] ieee80211_tx_frags(In spinlock): info->hw_queue=0, txpending=0, local->queue_stop_reasons[0]=0, skb_queue_len(&loc
al->pending[0]=0
<0>[  300.970000] =MHX14.3(ieee80211_tx_frags) Calling driver for skb=830f2c00
<7>[  300.970000] ath: phy0: transmitting packet, skb: 830f2c00, priority=7, queue=0
<0>[  300.970000] =MHX6.0.0(ath_tx_start): skb_get_queue_mapping=0, txq->pending_frames=1
<0>[  300.970000] ===MHX6.0.1(ath_tx_start): tid->tidno=7. skb=830f2c00.info->flags=0x60000018
<0>[  300.970000] ==MHX7.0.1(ath_txq_schedule)!
<0>[  300.970000] ==MHX7.0.2(ath_txq_schedule) ac=833218cc!
<0>[  300.970000] =MHX13.1(ath_tx_get_tid_subframe)skb=830f2c00
<0>[  300.970000] =MHX13.2(ath_tx_get_tid_subframe)tx_info->flags=0x60000010
<0>[  300.970000] ===MHX1.0(ath_tx_sched_aggr) aggr=0. tid=83321620,txq->axq_ampdu_depth=0,txq->axq_depth=0.tx_info->flags=0x6000001
0.
<0>[  300.970000] =MHX13.1(ath_tx_get_tid_subframe)skb=  (null)
<0>[  300.970000] ===MHX1.1.0(ath_tx_sched_aggr) ath_tx_form_burst() returned.
<0>[  300.970000] ===MHX1.2(ath_tx_sched_aggr) aggr_len=0
<7>[  300.970000] ath: phy0: qnum: 3, txq depth: 0
<7>[  300.970000] ath: phy0: TXDP[3] = 3160c80 (a3160c80)
<0>[  300.970000] ==MHX7.1(ath_txq_schedule) ac=833218cc, tid=83321620.sent=true. ath_tx_sched_aggr() returned TRUE!!!
<0>[  300.970000] =MHX14.4(ieee80211_tx_frags) End out
<0>[  300.970000] =MHX18.2(__ieee80211_tx)ieee80211_tx_frags returned result=1
<7>[  300.970000] ath: phy0: Set HW Key 0
<0>[  300.970000] ==MHX8.1(ath_tx_process_buffer)ts->ts_status=0x00000000. txok=1
<0>[  300.970000] ==MHX3.1(ath_tx_complete_buf): txok=1,  ts->ts_status=0x0
<7>[  300.970000] ath: phy0: TX complete: skb: 830f2c00
<0>[  300.970000] =MHX15.1(ath_txq_skb_done): fi->txq=0,
<0>[  300.970000] =MHX15.2(ath_txq_skb_done): txq->pending_frames=1, sc->tx.txq_max_pending[0]=246 
<0>[  300.970000] ==MHX7.0.1(ath_txq_schedule)!
<0>[  300.970000] ==MHX4.1(ieee80211_tx_status) skb=830f2c00.retry_count=0. fc=0x8801


<7>[  300.970000] ath: phy0: Set HW Key 0
<6>[  300.970000] br-lan: port 2(wlan0) entered forwarding state
<6>[  300.970000] br-lan: port 2(wlan0) entered forwarding state
<7>[  300.970000] wlan0: moving STA 00:0f:92:fa:98:b8 to state 4

Hostapd forms EAPOL packet in ieee802_1x_send()--->hostapd_drv_hapd_send_eapol()--->struct wpa_driver_ops.hapd_send_eapol  --->
	|---> = hostap_send_eapol()[in src/drivers/driver_hostap.c]. [NOTE: This is not compiled!!!]
	\---> = wpa_driver_nl80211_hapd_send_eapol [in src/src/drivers/driver_nl80211.c]|------>nl80211_send_eapol_data. [ This is the real path]
											\------>wpa_driver_nl80211_send_frame.[Not reached because print log shows: drv->device_ap_sme=70,drv->use_monitor=0,flags=0x00000000]

In wpa_driver_nl80211_hapd_send_eapol(),         if (drv->device_ap_sme || !drv->use_monitor)  return nl80211_send_eapol_data(bss, addr, data, data_len); is always true because drv->device_ap_sme=70() and drv->use_monitor=0 and flags=0.

But wpa_supplicant seems directly use l2_packet_send() instead. AP EAPOL seems not a QoS packet so that ieee80211_select_queue() is not called actually. 


Feb 15, 2017
In ath_tx_edma_tasklet(), print too much like ath_dbg(common, XMIT,"==MHX9.1(%s)common->op_flags=0x%08x,status=%d\n", __func__,common->op_flags,status); will cause printk loss even thouth the printk ring buffer is increased to 2MB.

Feb 14,2017
With latest v1026, where the Q is further manipulated. Test:

Use ping ToS to test the queue:
ping -Q 			0	32		64	96	128	160	192	224	
skb->priority			0	1		2	3	4	5	6	7
skb->queue_mapping		2	3		3	2	1	1	0	0	(in ieee80211_subif_start_xmit())
TXDP[q](H/W)			1	0		0	1	2	2	3	3
/phy0/ath9k/queues	     (BE):1    (BK):0	     (BK):0   (BE):1  (VI):2  (VI):2   (VO):3  (VO):3
TID(agg_nodes)			0       1	     	2	3	4	5	6	7

The main idea is that 1) skb->queue_mapping is changed by the driver itself instead of DIRECTLY from network upper layer. It is remapped in init of ath9k driver by ".ndo_select_queue       = ieee80211_netdev_select_queue,". The mac80211 changes the upper layer queue_mapping to it's own value, ie, 80211_AC queue number. 2) skb->queue_mapping means 80211_AC queue, not the HW TXQ.

skb_get_queue_mapping(skb) : Get 80211_AC Q#
local->queue_stop_reasons[queue] : "queue" is 80211_AC Q#
local->pending[queue] :  "queue" is 80211_AC Q#
ieee80211_tx_info *info->hw_queue : This is 80211_AC Q#. This is not the HW Q# as guessed.
queue = sdata->vif.hw_queue[ieee80211_ac_from_tid(tid)] : According to Kevin : hw_queue[80211_AC_Q]=80211_AC_Q, ie, queue is AC_Q. In 								  ieee80211_set_default_queues(), this is a direct map (not reversed).AC<==>AC map.
ath_frame_info *fi->txq : 80211_AC Q#
struct ath_softc *sc->tx.txq_map[q] : This q is 80211_AC Q#.


Feb 10, 2017
In minstrel_aggr_check() 
	q_map = skb_get_queue_mapping(skb);
	printk("=MHX12.1(%s)tid=%d,skb=%p,queue_mapping=%d\n", __func__,tid,skb,q_map);
	if (q_map == IEEE80211_AC_VO){
		printk("=MHX12.2(%s) Skip VO Q Aggr.\n", __func__);
		return;
	}
Is still wrong with latest Lihong modified code. Like below, ping -Q 64 uses TXP Q=queue_mapping=0 is correct.
<0>[ 9259.350000] =MHX10.1(ieee80211_subif_start_xmit),skb: len=98,protocol=0x0800,priority=2, queue_mapping=0, pkt_type=3
<0>[ 9259.350000] =MHX14.1(ieee80211_tx_frags) In
<7>[ 9259.350000] ieee80211_tx_frags: info->hw_queue=0, q=3, txpending=0, local->queue_stop_reasons[q]=0, skb_queue_len(&local->pend
ing[q]=0
<0>[ 9259.350000] =MHX14.3(ieee80211_tx_frags) Calling driver for skb=831eb0c0
<7>[ 9259.350000] ath: phy0: (ath9k_tx):transmitting packet, skb: 831eb0c0, priority=2, tid=queue=0
<7>[ 9259.350000] ath: phy0: ath_tx_start: ath_q=0, hwq_to_acq[0](ieee)=3, txq->stopped=0 
<7>[ 9259.350000] ath: phy0: ath_tx_start: txq->pending_frames=0, sc->tx.txq_max_pending[hwq_to_acq[0]]=246 
<7>[ 9259.350000] ath: phy0: ath_tx_start: q=0, tid->tidno=2. skb=831eb0c0.info->flags=0x40000018 
<0>[ 9259.350000] ==MHX7.0.1(ath_txq_schedule)!
<0>[ 9259.350000] ==MHX7.0.2(ath_txq_schedule) ac=82d76914!
<0>[ 9259.350000] =MHX13.1(ath_tx_get_tid_subframe)skb=831eb0c0
<0>[ 9259.350000] =MHX13.2(ath_tx_get_tid_subframe)tx_info->flags=0x40000010
<0>[ 9259.350000] ===MHX1.0(ath_tx_sched_aggr) aggr=0. tid=82d764a4,txq->axq_ampdu_depth=0,txq->axq_depth=0.tx_info->flags=0x4000001
0.
<0>[ 9259.350000] =MHX13.1(ath_tx_get_tid_subframe)skb=  (null)
<0>[ 9259.350000] ===MHX1.1.0(ath_tx_sched_aggr) ath_tx_form_burst() returned.
<0>[ 9259.350000] ===MHX1.2(ath_tx_sched_aggr) aggr_len=0
<7>[ 9259.350000] ath: phy0: qnum: 0, txq depth: 0
<7>[ 9259.350000] ath: phy0: TXDP[0] = 31b6380 (a31b6380)
<0>[ 9259.350000] ==MHX7.1(ath_txq_schedule) ac=82d76914, tid=82d764a4.sent=true. ath_tx_sched_aggr() returned TRUE!!!
<0>[ 9259.350000] =MHX14.4(ieee80211_tx_frags) End out
<7>[ 9259.350000] ath: phy0: ==MHX9.1(ath_tx_edma_tasklet)common->op_flags=0x0000000e,status=0
<0>[ 9259.350000] ==MHX8.1(ath_tx_process_buffer)ts->ts_status=0x00000000. txok=1
<0>[ 9259.350000] ==MHX3.1(ath_tx_complete_buf): txok=1,  ts->ts_status=0x0
<7>[ 9259.350000] ath: phy0: TX complete: skb: 831eb0c0
<0>[ 9259.350000] ==MHX(ath_txq_skb_done): q=3
<7>[ 9259.350000] ath: phy0: ath_txq_skb_done: fi->txq(ath)=0, q(ieee)=3, txq->stopped=0 
<7>[ 9259.350000] ath: phy0: ath_txq_skb_done: txq->pending_frames=0, sc->tx.txq_max_pending[3]=246 
<0>[ 9259.350000] ==MHX7.0.1(ath_txq_schedule)!




<0>[ 9259.350000] ==MHX4.1(ieee80211_tx_status) skb=831eb0c0.retry_count=0. fc=0x8803
<0>[ 9259.350000] =MHX12.1(minstrel_aggr_check)tid=2,skb=831eb0c0,queue_mapping=0	// q_map=0 means H/W q=0, which is IEEE80211_AC_BK, not _VO.
<0>[ 9259.350000] =MHX12.2(minstrel_aggr_check) Skip VO Q Aggr.
<7>[ 9259.350000] ath: phy0: ==MHX9.1(ath_tx_edma_tasklet)common->op_flags=0x0000000e,status=-150
<7>[ 9259.350000] ath: phy0: (ath_tx_edma_tasklet)Error: In progress (EINPROGRESS)



Use ping ToS to test the queue:
ping -Q 			0	32		64	96	128	160	192	224	
skb->priority			0	1		2	3	4	5	6	7
skb->queue_mapping		1	0		0	1	2	2	3	3	(in ieee80211_subif_start_xmit())
TXDP[q](H/W)			1	0		0	1	2	2	3	3
/phy0/ath9k/queues	     (BE):1    (BK):0	     (BK):0   (BE):1  (VI):2  (VI):2   (VO):3  (VO):3
TID(agg_nodes)			0      N/A(*)	     N/A(*)	3	4	5	6	7

(*) Because the IEEE80211_AC_VO(0) is wrongly not aggregated.

By looking into mac80211@cc, the driver expects skb->queue_mapping being the AC queue number instead of HW queue. But in ieee80211_subif_start_xmit() we can see the skb->queue_mapping is directly matching the HW queue number.


Feb 9, 2017
Printk is implemented by using a ring buffer in the kernel with a size of __LOG_BUF_LEN bytes where __LOG_BUF_LEN equals (1 << CONFIG_LOG_BUF_SHIFT) (see kernel/printk.c for details).

You can specify the size of the buffer in your kernel config by setting CONFIG_LOG_BUF_SHIFT to an appropriate value (e.g. 17 for 128Kb) (make menuconfig -> General Setup -> Kernel log buffer size). 

Default is 17(128K) maximum is 21(2M). To print verbose info must increase this ring buffer size otherwise confusing print shows up.

Feb 3,2017
ubus call system watchdog
ubus call system watchdog '{ "timeout": 60 }'
 

Feb 1, 2017
EINPROGRESS is defined in build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/linux-3.10.36/arch/mips/include/uapi/asm/errno.h. #define EINPROGRESS     150     /* Operation now in progress */. It is not 115.

Jan 31,2017
During initial connection and re-connection, the Ethernet data will flood the MAC80211 very hardly. This will cause sys/kernel/debug/ieee80211/phy0/queues rockets up and eats all memory like below and then the system reboot:

0: 0x00000000/0
01: 0x00000000/0
02: 0x00000001/0
03: 0x00000000/0
             total         used         free       shared      buffers
Mem:         61304        36748        24556            0         3900
-/+ buffers:              32848        28456
Swap:            0            0            0
00: 0x00000000/0
01: 0x00000000/0
Mem:         61304        36756        24548            0         3900
02: 0x00000001/0
03: 0x00000000/0
             total         used         free       shared      buffers
-/+ buffers:              32856        28448
Swap:            0            0            0
00: 0x00000000/0
01: 0x00000000/0
02: 0x00000000/0
03: 0x00000000/0
             total         used         free       shared      buffers
Mem:         61304        36508        24796            0         3900
-/+ buffers:              32608        28696
Swap:            0            0            0
00: 0x00000000/0
01: 0x00000000/0
02: 0x00000000/3619
03: 0x00000000/0
             total         used         free       shared      buffers
Mem:         61304        51032        10272            0         3900
-/+ buffers:              47132        14172
Swap:            0            0            0

In tx.c:ieee80211_tx_frags():
                                /*
                                 * Since queue is stopped, queue up frames for
                                 * later transmission from the tx-pending
                                 * tasklet when the queue is woken again.
                                 */
                                if (txpending)
                                        skb_queue_splice_init(skbs,
                                                              &local->pending[q]);
                                else
                                        skb_queue_splice_tail_init(skbs,
                                                                   &local->pending[q]);

                                // MHXJL:
                                if (skb_queue_len(&local->pending[q]) > 1/*MAX_NUM_IEEE80211_TX_PENDING*/)
                                {
                                        printk("==MHX(%s) Purge local->pending[%d]\n", __func__, q);
                                        purge_skb = __skb_dequeue(&local->pending[q]);
                                }

                                spin_unlock_irqrestore(&local->queue_stop_reason_lock,
                                                       flags);


                                // MHXJL:
                                if (purge_skb)
                                     ieee80211_free_txskb(&local->pending[q], purge_skb);

                                return false;

This code purges the local->pending queue and prevent this issue.

Jan 27,2017
Removed the CONFIG_MHX_AP_INACT_MONITOR and then see a normal ap_max_inactivity=30 behavior. The "inactive time" never comes over 900mS. And on the hostapd debug log, we see:

1485476021.063437: ap_handle_timer: register ap_handle_timer timeout for 00:0f:92:fa:80:82 (31 seconds)
1485476052.064661: ap_handle_timer: 00:0f:92:fa:80:82 flags=0x408aa3 timeout_next=0
1485476052.065724: wlan0: Station 00:0f:92:fa:80:82 has been active 0s ago
1485476052.065806: ap_handle_timer: register ap_handle_timer timeout for 00:0f:92:fa:80:82 (32 seconds)

1485476084.069013: ap_handle_timer: 00:0f:92:fa:80:82 flags=0x408aa3 timeout_next=0
1485476084.070089: wlan0: Station 00:0f:92:fa:80:82 has been active 0s ago
1485476084.070170: ap_handle_timer: register ap_handle_timer timeout for 00:0f:92:fa:80:82 (37 seconds)

1485476121.070343: ap_handle_timer: 00:0f:92:fa:80:82 flags=0x408aa3 timeout_next=0
1485476121.071413: wlan0: Station 00:0f:92:fa:80:82 has been active 0s ago
1485476121.071493: ap_handle_timer: register ap_handle_timer timeout for 00:0f:92:fa:80:82 (40 seconds)

1485476161.072428: ap_handle_timer: 00:0f:92:fa:80:82 flags=0x408aa3 timeout_next=0
1485476161.073495: wlan0: Station 00:0f:92:fa:80:82 has been active 0s ago
1485476161.073576: ap_handle_timer: register ap_handle_timer timeout for 00:0f:92:fa:80:82 (49 seconds)

1485476210.082425: ap_handle_timer: 00:0f:92:fa:80:82 flags=0x408aa3 timeout_next=0
1485476210.083528: wlan0: Station 00:0f:92:fa:80:82 has been active 0s ago
1485476210.083609: ap_handle_timer: register ap_handle_timer timeout for 00:0f:92:fa:80:82 (33 seconds)

1485476243.085859: ap_handle_timer: 00:0f:92:fa:80:82 flags=0x408aa3 timeout_next=0
1485476243.086934: wlan0: Station 00:0f:92:fa:80:82 has been active 0s ago
1485476243.087014: ap_handle_timer: register ap_handle_timer timeout for 00:0f:92:fa:80:82 (36 seconds)

1485476279.092429: ap_handle_timer: 00:0f:92:fa:80:82 flags=0x408aa3 timeout_next=0
1485476279.093500: wlan0: Station 00:0f:92:fa:80:82 has been active 0s ago
1485476279.093583: ap_handle_timer: register ap_handle_timer timeout for 00:0f:92:fa:80:82 (30 seconds)

1485476301.122905: nl80211: BSS Event 86 (NL80211_CMD_UNEXPECTED_4ADDR_FRAME) received for wlan0
1485476301.123099: wlan0: Event RX_FROM_UNKNOWN (19) received
1485476309.102265: ap_handle_timer: 00:0f:92:fa:80:82 flags=0x408aa3 timeout_next=0
1485476309.128926: wlan0: Station 00:0f:92:fa:80:82 has been active 0s ago
1485476309.129006: ap_handle_timer: register ap_handle_timer timeout for 00:0f:92:fa:80:82 (36 seconds)

1485476345.132424: ap_handle_timer: 00:0f:92:fa:80:82 flags=0x408aa3 timeout_next=0
1485476345.133496: wlan0: Station 00:0f:92:fa:80:82 has been active 0s ago
1485476345.133577: ap_handle_timer: register ap_handle_timer timeout for 00:0f:92:fa:80:82 (42 seconds)

1485476387.139625: ap_handle_timer: 00:0f:92:fa:80:82 flags=0x408aa3 timeout_next=0
1485476387.140691: wlan0: Station 00:0f:92:fa:80:82 has been active 27s ago
1485476387.140774: ap_handle_timer: register ap_handle_timer timeout for 00:0f:92:fa:80:82 (19 seconds)	// Note the last next_time is random seconds. Not exact ap_max_inactivity.

1485476406.142428: ap_handle_timer: 00:0f:92:fa:80:82 flags=0x408aa3 timeout_next=0
1485476406.143517: wlan0: Station 00:0f:92:fa:80:82 has been inactive too long: 46 sec, max allowed: 30
1485476406.143603:   Polling STA
1485476406.143635:   Polling STA
===MHX(ap_handle_timer) Polling STA......
1485476406.143926: nl80211: Drv Event 84 (NL80211_CMD_PROBE_CLIENT) received for wlan0
1485476406.144006: nl80211: Probe client event
1485476406.144070: ap_handle_timer: register ap_handle_timer timeout for 00:0f:92:fa:80:82 (1 seconds - AP_DISASSOC_)
1485476406.148839: nl80211: Drv Event 84 (NL80211_CMD_PROBE_CLIENT) received for wlan0
1485476406.148938: nl80211: Probe client event
1485476407.145254: ap_handle_timer: 00:0f:92:fa:80:82 flags=0x408ae3 timeout_next=1
1485476407.146343: wlan0: Station 00:0f:92:fa:80:82 has been inactive too long: 47 sec, max allowed: 30
1485476407.146512: wlan0: Timeout, sending disassociation info to STA 00:0f:92:fa:80:82
1485476407.146565: nl80211: send_mlme - noack=0 freq=0 no_cck=0 offchanok=0 wait_time=0 fc=0xa0 nlmode=3
1485476407.146637: nl80211: send_mlme -> send_frame
1485476407.146670: nl80211: send_frame - Use bss->freq=2421
1485476407.146748: nl80211: send_frame -> send_frame_cmd
1485476407.147105: wlan0: AP-STA-DISCONNECTED 00:0f:92:fa:80:82
1485476407.147234: 1485476407.147249: wlan0: STA 00:0f:92:fa:80:82 IEEE 802.11: disassociated due to inactivity
1485476407.147625: ap_handle_timer: register ap_handle_timer timeout for 00:0f:92:fa:80:82 (1 seconds - AP_DEAUTH_DE)
1485476407.147866: 1485476407.147880: wlan0: STA 00:0f:92:fa:80:82 MLME: MLME-DISASSOCIATE.indication(00:0f:92:fa:80)
1485476407.148071: 1485476407.148087: wlan0: STA 00:0f:92:fa:80:82 MLME: MLME-DELETEKEYS.request(00:0f:92:fa:80:82)
1485476407.149460: wpa_driver_nl80211_set_key: ifindex=10 (wlan0) alg=0 addr=0x6ab958 key_idx=0 set_tx=1 seq_len=0 k0
1485476407.149624:    addr=00:0f:92:fa:80:82
1485476407.150071: nl80211: Drv Event 60 (NL80211_CMD_FRAME_TX_STATUS) received for wlan0
1485476407.150154: nl80211: Frame TX status event
1485476407.150231: wlan0: Event TX_STATUS (18) received
1485476407.150281: mgmt::disassoc cb
1485476407.150313: STA 00:0f:92:fa:80:82 did not acknowledge disassoc
1485476407.150378: Ignore disassoc cb for test frame
1485476408.148814: ap_handle_timer: 00:0f:92:fa:80:82 flags=0x408ac1 timeout_next=2
1485476408.149072: wlan0: Timeout, sending deauthentication info to STA 00:0f:92:fa:80:82
1485476408.149128: nl80211: send_mlme - noack=0 freq=0 no_cck=0 offchanok=0 wait_time=0 fc=0xc0 nlmode=3
1485476408.149200: nl80211: send_mlme -> send_frame
1485476408.149233: nl80211: send_frame - Use bss->freq=2421
1485476408.149272: nl80211: send_frame -> send_frame_cmd
1485476408.149697: 1485476408.149715: wlan0: STA 00:0f:92:fa:80:82 IEEE 802.11: deauthenticated due to inactivity (t)
1485476408.150340: 1485476408.150359: wlan0: STA 00:0f:92:fa:80:82 MLME: MLME-DEAUTHENTICATE.indication(00:0f:92:fa:)
1485476408.150544: 1485476408.150560: wlan0: STA 00:0f:92:fa:80:82 MLME: MLME-DELETEKEYS.request(00:0f:92:fa:80:82)
1485476408.151956: wpa_driver_nl80211_set_key: ifindex=10 (wlan0) alg=0 addr=0x6ab958 key_idx=0 set_tx=1 seq_len=0 k0
1485476408.152121:    addr=00:0f:92:fa:80:82
1485476408.152455: nl80211: Set WDS STA addr=00:0f:92:fa:80:82 aid=1 val=0 name=wlan0.sta1
1485476408.154498: nl80211: wlan0[10]: set_sta_vlan(00:0f:92:fa:80:82, ifname=wlan0[10], vlan_id=0)
1485476408.156231: nl80211: Remove interface ifindex=14
1485476408.156341: nl80211: if_indices[16]: 5 10
1485476408.163847: nl80211: sta_remove -> DEL_STATION wlan0 00:0f:92:fa:80:82 --> 0 (Success)
1485476408.163998: hostapd_ht_operation_update current operation mode=0x4
1485476408.164044: hostapd_ht_operation_update new operation mode=0x0 changes=1
1485476408.164128: hostapd_eid_mhqos: mhqos eid: eid=221, len=7, OUI=000f92, Type=02, SubType=01, Ver=01, mhqos_enab1

1485476408.164904: nl80211: Set beacon (beacon_set=1)
1485476408.164997: nl80211: Beacon head - hexdump(len=63): 80 00 00 00 ff ff ff ff ff ff 00 0f 92 fa 98 b8 00 0f 92 f
1485476408.165444: nl80211: Beacon tail - hexdump(len=122): 2a 01 00 30 14 01 00 00 0f ac 04 01 00 00 0f ac 04 01 001
1485476408.166307: nl80211: ifindex=10
1485476408.166342: nl80211: beacon_int=100
1485476408.166378: nl80211: dtim_period=2
1485476408.166415: nl80211: ssid - hexdump_ascii(len=14):
     70 44 44 4c 2d 6a 65 66 66 2d 64 65 6d 6f         pDDL-jeff-demo  
1485476408.166570: nl80211: hidden SSID not in use
1485476408.166603: nl80211: privacy=1
1485476408.166639: nl80211: auth_algs=0x1
1485476408.166674: nl80211: wpa_version=0x2
1485476408.166710: nl80211: key_mgmt_suites=0x2
1485476408.166748: nl80211: pairwise_ciphers=0x10
1485476408.166786: nl80211: group_cipher=0x10
1485476408.166823: nl80211: beacon_ies - hexdump(len=10): 7f 08 00 00 00 00 00 00 00 40
1485476408.166930: nl80211: proberesp_ies - hexdump(len=10): 7f 08 00 00 00 00 00 00 00 40
1485476408.167041: nl80211: assocresp_ies - hexdump(len=10): 7f 08 00 00 00 00 00 00 00 40
1485476408.167999: ap_free_sta: cancel ap_handle_timer for 00:0f:92:fa:80:82
1485476408.168225: nl80211: Ignore RTM_NEWLINK event for foreign ifindex 14
1485476408.168286: nl80211: Ignore RTM_DELLINK event for foreign ifindex 14
1485476408.168347: nl80211: Ignore RTM_NEWLINK event for foreign ifindex 14
1485476408.168405: nl80211: Ignore RTM_DELLINK event for foreign ifindex 14
1485476408.168533: nl80211: Drv Event 60 (NL80211_CMD_FRAME_TX_STATUS) received for wlan0
1485476408.168600: nl80211: Frame TX status event
1485476408.168676: wlan0: Event TX_STATUS (18) received
1485476408.168724: mgmt::deauth cb
1485476408.168755: handle_deauth_cb: STA 00:0f:92:fa:80:82 not found
1485476408.168844: VLAN: vlan_newlink(wlan0.sta1)
1485476408.168953: nl80211: Drv Event 20 (NL80211_CMD_DEL_STATION) received for wlan0
1485476408.169014: nl80211: Delete station 00:0f:92:fa:80:82
1485476408.169094: VLAN: vlan_dellink(wlan0.sta1)
1485476408.169184: VLAN: vlan_newlink(wlan0.sta1)
1485476408.169268: VLAN: vlan_dellink(wlan0.sta1)

Question: Why the added CONFIG_MHX_AP_INACT_MONITOR disables the original ap_max_inactivity mechanism?
Maye the CONFIG_MHX_AP_INACT_MONITOR sends a poll_client packet that has a conflict with the one sent by hostapd in the original design. The CONFIG_MHX_AP_INACT_MONITOR sends a poll_client and gets ACKs, which fools the original mechanism and makes it believet the STA is still alive. The original mechanism sends the poll_client in VO queue.
[Follow up Mar 21,2017]: 
1. In MAC80211 ieee80211_alloc_hw() function, NL80211_FEATURE_INACTIVITY_TIMER is set by:
#ifdef CONFIG_MHX_AP_INACT_MONITOR
               NL80211_FEATURE_INACTIVITY_TIMER |
#endif

2. In hostapd/supplicant, wiphy_info_feature_flags() will set :
        if (flags & NL80211_FEATURE_INACTIVITY_TIMER)
                capa->flags |= WPA_DRIVER_FLAGS_INACTIVITY_TIMER;

3. In hostapd  ap_sta_add() function, 

        if (!(hapd->iface->drv_flags & WPA_DRIVER_FLAGS_INACTIVITY_TIMER)) {
                wpa_printf(MSG_DEBUG, "%s: register ap_handle_timer timeout "
                           "for " MACSTR " (%d seconds - ap_max_inactivity)",
                           __func__, MAC2STR(addr),
                           hapd->conf->ap_max_inactivity);
                eloop_register_timeout(hapd->conf->ap_max_inactivity, 0,
                                       ap_handle_timer, hapd, sta);
        }

This means, if the driver DOES NOT support WPA_DRIVER_FLAGS_INACTIVITY_TIMER, then the hostapd will start a eloop timer in application layer to work as a inactivity timer. If the driver has that capability, the hostapd doesn't the timer. So there's no conflict between generic hostapd's application layer timer and microhard's driver level timer. It is verified that "register ap_handle_timer timeout" is not printed out when CONFIG_MHX_AP_INACT_MONITOR is defined in mac80211.


Jan 26, 2017
With Lihong's latest code,still see Q lock on AP side with multicast. Change "if (++txq->pending_frames >= sc->tx.txq_max_pending[hwq_to_acq[q]] &&" to ">" still has the same issue and easier to happen the lock:
root@UserDevice:~# cat sys/kernel/debug/ieee80211/phy0/queues 
00: 0x00000000/0
01: 0x00000000/0
02: 0x00000001/1759
03: 0x00000000/0
root@UserDevice:~# cat sys/kernel/debug/ieee80211/phy0/ath9k/queues 
(VO):  qnum: 3 qdepth:  0 ampdu-depth:  0 pending:   0 stopped: 0
(VI):  qnum: 2 qdepth:  0 ampdu-depth:  0 pending:   0 stopped: 0
(BE):  qnum: 1 qdepth:  0 ampdu-depth:  0 pending: 247 stopped: 1
(BK):  qnum: 0 qdepth:  0 ampdu-depth:  0 pending:   0 stopped: 0
(CAB): qnum: 8 qdepth:  0 ampdu-depth:  0 pending:   0 stopped: 0

Default in /etc/config/wireless			MAC80211(Under /sys/module/mac80211/parameters/)				Comments
option connection_idle_time '3600'		IEEE80211_CONNECTION_IDLE_TIME				Time the connection can be idle before we probe it to see if we can still talk to the AP. STA probes AP.
option beacon_loss_count '36000'		beacon_loss_count					Number of beacon intervals before we decide beacon was lost.
option probe_wait_time '0'			probe_wait_ms						Time we wait for a probe response after sending a probe request or nullfunc because of beacon loss or for checking the 														connection still works. Maximum time(ms) to wait for probe response before disconnecting (reason 4). STA->AP.
option max_nullfunc_tries '0'			max_nullfunc_tries					Maximum nullfunc tx tries before disconnecting (reason 4). STA->AP. IEEE80211_HW_REPORTS_TX_ACK_STATUS=1 use nullfunc.
option max_probe_tries '0'			max_probe_tries						Maximum probe tries before disconnecting (reason 4).STA->AP. IEEE80211_HW_REPORTS_TX_ACK_STATUS, prob_req is not used. Dont care 														this number.

In package/network/services/hostapd/src/src/ap/sta_info.h
/* STA flags */
#define WLAN_STA_AUTH BIT(0)
#define WLAN_STA_ASSOC BIT(1)
#define WLAN_STA_AUTHORIZED BIT(5)
#define WLAN_STA_PENDING_POLL BIT(6) /* pending activity poll not ACKed */
#define WLAN_STA_SHORT_PREAMBLE BIT(7)
#define WLAN_STA_PREAUTH BIT(8)
#define WLAN_STA_WMM BIT(9)
#define WLAN_STA_MFP BIT(10)
#define WLAN_STA_HT BIT(11)
#define WLAN_STA_WPS BIT(12)
#define WLAN_STA_MAYBE_WPS BIT(13)
#define WLAN_STA_WDS BIT(14)
#define WLAN_STA_ASSOC_REQ_OK BIT(15)
#define WLAN_STA_WPS2 BIT(16)
#define WLAN_STA_GAS BIT(17)
#define WLAN_STA_VHT BIT(18)
#define WLAN_STA_WNM_SLEEP_MODE BIT(19)
#define WLAN_STA_VHT_OPMODE_ENABLED BIT(20)
#ifdef MH_MULTICAST_SUPPORT
#define WLAN_STA_IP_MCAST_ACK BIT(21)
#endif
#ifdef MH_QOS_SUPPORT
#define WLAN_STA_MHQOS BIT(22)
#endif
#define WLAN_STA_PENDING_DISASSOC_CB BIT(29)
#define WLAN_STA_PENDING_DEAUTH_CB BIT(30)
#define WLAN_STA_NONERP BIT(31)

Test with Lihong latest code, the origional ap_max_inactivity=30 on AP still works. But, there is a big bug. Sometimes, the AP's inactive timer can reach up to 90 seconds and the ap_handle_timer() is never invoked!

Station 00:0f:92:fa:80:82 (on wlan0.sta1)
        mhqos status:   1
        inactive time:  89440 ms
        rx bytes:       1824

When this happens, hostapd_drv_poll_client() will never be called so that this funcnationality fails and AP doesn't deassociate the STA and start scan. Sometimes it works fine.

Jan 19,2017
Push data from STA to AP. After powering down the AP, STA will disconnect with AP after 30Sec. But after disconnection, the TX LED of STA is still on more than 60 seconds, busy transmitting the stalled packets. At baout 30 Sec after power down AP, the STA prints "==MHX(ieee80211_set_disassoc) tx=0" and then ieee80211_flush_queues() is called. But in ieee80211_flush_queues(), drv_flush(local, sdata, queues, false) calls into ath9k_flush with "drop" parameter equals to "false". Force the "drop" to true can flush the ath9k txq and STA TX LED is off right away after the scan is started.  During the test, the local->pending buffer in ieee80211_subif_start_xmit() is reduced to 16.

Looks like the mgmt frames are sent separately:
static inline void ieee80211_tx_skb(struct ieee80211_sub_if_data *sdata,
                                    struct sk_buff *skb)
{
        /* Send all internal mgmt frames on VO. Accordingly set TID to 7. */
        ieee80211_tx_skb_tid(sdata, skb, 7);
}

In ieee80211_subif_start_xmit(), reduce the (skb_queue_len(&local->pending[acq]) to 8 (origional is 16*MAX_NUM_IEEE80211_TX_PENDING 2k). When flooding from STA to AP and suddenly unplug the Ether cable, the STA TX LED sustains about 1sec and then off. Average A-MPDU length: 3.5.

When revert to orignal pending buffer length. Average A-MPDU length: 7.7, T/P looks higher but the STA TX LED sustains about 6 seconds to get off. 

Looks like the main buffer is this local->pending. Ath9k txq has minor effects. And looks like the ath9k txq is drained already.

Jan 17, 2017
About channel definition.width:
ieee80211_hw_config( ieee80211_local->ieee80211_hw hw->ieee80211_conf conf->cfg80211_chan_def chandef-->ieee80211_channel *chan->....
												     |->nl80211_chan_width width
												     |->u32 center_freq1 and u32 center_freq2

Jan 16,2017
struct ieee80211_hw->struct ieee80211_conf conf->struct cfg80211_chan_def chandef->width.

Jan 15, 2017

/**
 * enum nl80211_channel_type - channel type
 * @NL80211_CHAN_NO_HT: 20 MHz, non-HT channel
 * @NL80211_CHAN_HT20: 20 MHz HT channel
 * @NL80211_CHAN_HT40MINUS: HT40 channel, secondary channel
 *      below the control channel
 * @NL80211_CHAN_HT40PLUS: HT40 channel, secondary channel
 *      above the control channel
 */
enum nl80211_channel_type {
        NL80211_CHAN_NO_HT,
        NL80211_CHAN_HT20,
        NL80211_CHAN_HT40MINUS,
        NL80211_CHAN_HT40PLUS
};

/**
 * enum nl80211_chan_width - channel width definitions
 *
 * These values are used with the %NL80211_ATTR_CHANNEL_WIDTH
 * attribute.
 *
 * @NL80211_CHAN_WIDTH_20_NOHT: 20 MHz, non-HT channel
 * @NL80211_CHAN_WIDTH_20: 20 MHz HT channel
 * @NL80211_CHAN_WIDTH_40: 40 MHz channel, the %NL80211_ATTR_CENTER_FREQ1
 *      attribute must be provided as well
 * @NL80211_CHAN_WIDTH_80: 80 MHz channel, the %NL80211_ATTR_CENTER_FREQ1
 *      attribute must be provided as well
 * @NL80211_CHAN_WIDTH_80P80: 80+80 MHz channel, the %NL80211_ATTR_CENTER_FREQ1
 *      and %NL80211_ATTR_CENTER_FREQ2 attributes must be provided as well
 * @NL80211_CHAN_WIDTH_160: 160 MHz channel, the %NL80211_ATTR_CENTER_FREQ1
 *      attribute must be provided as well
 * @NL80211_CHAN_WIDTH_5: 5 MHz OFDM channel
 * @NL80211_CHAN_WIDTH_10: 10 MHz OFDM channel
 */
enum nl80211_chan_width {
        NL80211_CHAN_WIDTH_20_NOHT,
        NL80211_CHAN_WIDTH_20,
        NL80211_CHAN_WIDTH_40,
        NL80211_CHAN_WIDTH_80,
        NL80211_CHAN_WIDTH_80P80,
        NL80211_CHAN_WIDTH_160,
        NL80211_CHAN_WIDTH_5,
        NL80211_CHAN_WIDTH_10,
#ifdef CONFIG_STEP_ONEMHZ
        NL80211_CHAN_WIDTH_2,   /* 2.5 MHz */
	NL80211_CHAN_WIDTH_1,   /* 1.25 MHz*/
#endif /* CONFIG_STEP_ONEMHZ */
};

/**
 * enum nl80211_bss_scan_width - control channel width for a BSS
 *
 * These values are used with the %NL80211_BSS_CHAN_WIDTH attribute.
 *
 * @NL80211_BSS_CHAN_WIDTH_20: control channel is 20 MHz wide or compatible
 * @NL80211_BSS_CHAN_WIDTH_10: control channel is 10 MHz wide
 * @NL80211_BSS_CHAN_WIDTH_5: control channel is 5 MHz wide
 */
enum nl80211_bss_scan_width {
        NL80211_BSS_CHAN_WIDTH_20,
        NL80211_BSS_CHAN_WIDTH_10,
        NL80211_BSS_CHAN_WIDTH_5,
};

/**
 * cfg80211_get_chandef_type - return old channel type from chandef
 * @chandef: the channel definition
 *
 * Return: The old channel type (NOHT, HT20, HT40+/-) from a given
 * chandef, which must have a bandwidth allowing this conversion.
 */
static inline enum nl80211_channel_type
cfg80211_get_chandef_type(const struct cfg80211_chan_def *chandef)
{
        switch (chandef->width) {
        case NL80211_CHAN_WIDTH_20_NOHT:
                return NL80211_CHAN_NO_HT;
        case NL80211_CHAN_WIDTH_20:
                return NL80211_CHAN_HT20;
        case NL80211_CHAN_WIDTH_40:
                if (chandef->center_freq1 > chandef->chan->center_freq)
                        return NL80211_CHAN_HT40PLUS;
                return NL80211_CHAN_HT40MINUS;
        default:
                WARN_ON(1);
                return NL80211_CHAN_NO_HT;
        }
}
struct cfg80211_chan_def *chandef->width
	NL80211_CHAN_WIDTH_20_NOHT				NL80211_CHAN_NO_HT
	NL80211_CHAN_WIDTH_20					NL80211_CHAN_HT20
	NL80211_CHAN_WIDTH_40					NL80211_CHAN_HT40PLUS or NL80211_CHAN_HT40MINUS

hostapd_parse_csa_settings(), the hostapd_cli chan_switch command accepts "ht" "vht" and "blocktx" as parameters. I forgot the "ht" and use the command and then the ht_capabilities is removed from Beacon after CSA and then when the STA disconnects and reconnects, the HT cap is gone. Use "hostapd_cli chan_switch 5 2421 ht" will keep HT capabilities after CSA.

Jan 13, 2017
Generic pDDL code, when power off the AP, the STA resets itself too much and drain the STA battery. The log shows it keeps reseting the chipset:

root@UserDevice:~# echo 0x201 > sys/kernel/debug/ieee80211/phy0/ath9k/debug
root@UserDevice:~# cat /proc/kmsg
<6>[  166.150000] wlan0: deauthenticated from 00:0f:92:fa:98:b8 (Reason: 3=DEAUTH_LEAVING)

<7>[  166.150000] ath: phy0: Set HW Key 1
<7>[  166.150000] ath: phy0: BSSID 00:00:00:00:00:00 Changed ASSOC 0
<7>[  166.150000] ath: phy0: ah->misc_mode 0x10000004
<7>[  166.150000] ath: phy0: Configure tx [queue/halq] [0/3], aifs: 2, cw_min: 15, cw_max: 1023, txop: 0
<7>[  166.150000] ath: phy0: Configure tx [queue/halq] [1/2], aifs: 2, cw_min: 15, cw_max: 1023, txop: 0
<7>[  166.150000] ath: phy0: Configure tx [queue/halq] [2/1], aifs: 2, cw_min: 15, cw_max: 1023, txop: 0
<7>[  166.150000] ath: phy0: Configure tx [queue/halq] [3/0], aifs: 2, cw_min: 15, cw_max: 1023, txop: 0

<7>[  166.150000] ath: phy0: Set channel: 2421 MHz width: 0
<7>[  166.150000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 0
<7>[  166.160000] ath: phy0: ah->misc_mode 0x10000004
<7>[  166.160000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<6>[  166.160000] br-lan: port 2(wlan0) entered disabled state
<7>[  166.170000] ath: phy0: Set HW Key 1
<7>[  166.270000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  166.270000] ath: phy0: FULL-SLEEP -> AWAKE


<7>[  166.270000] ath: phy0: Set channel: 2421 MHz width: 0		// ath9k_config(), if ((changed & IEEE80211_CONF_CHANGE_CHANNEL) || reset_channel) call ath_set_channel(). 
<7>[  166.270000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 0	// ath_reset_internal()
<7>[  166.270000] ath: phy0: reset MAC via external reset
<7>[  166.280000] ath: phy0: ah->misc_mode 0x10000004
<7>[  166.290000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[  166.290000] ath: phy0: Set HW RX filter: 0x17


<7>[  166.290000] ath: phy0: Set channel: 2421 MHz width: 0
<7>[  166.290000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 0
<7>[  166.290000] ath: phy0: ah->misc_mode 0x10000004
<7>[  166.300000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[  166.300000] ath: phy0: Set power: 10
<7>[  166.330000] ath: phy0: Set HW RX filter: 0x207
<7>[  166.430000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  166.430000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  166.530000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  167.040000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  167.140000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  167.330000] ath: phy0: FULL-SLEEP -> AWAKE

<7>[  167.330000] ath: phy0: Set channel: 2421 MHz width: 0
<7>[  167.330000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 0
<7>[  167.330000] ath: phy0: reset MAC via external reset
<7>[  167.350000] ath: phy0: ah->misc_mode 0x10000004
<7>[  167.350000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[  167.350000] ath: phy0: Set HW RX filter: 0x17
<7>[  167.350000] ath: phy0: Set channel: 2421 MHz width: 0


<7>[  167.350000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 0
<7>[  167.360000] ath: phy0: ah->misc_mode 0x10000004
<7>[  167.360000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[  167.360000] ath: phy0: Set power: 10
<7>[  167.390000] ath: phy0: Set HW RX filter: 0x207
<7>[  167.490000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  167.490000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  167.590000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  168.040000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  168.140000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  168.390000] ath: phy0: FULL-SLEEP -> AWAKE


<7>[  168.390000] ath: phy0: Set channel: 2421 MHz width: 0
<7>[  168.390000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 0
<7>[  168.390000] ath: phy0: reset MAC via external reset
<7>[  168.410000] ath: phy0: ah->misc_mode 0x10000004
<7>[  168.410000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[  168.410000] ath: phy0: Set HW RX filter: 0x17
<7>[  168.410000] ath: phy0: Set channel: 2421 MHz width: 0
<7>[  168.420000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 0
<7>[  168.420000] ath: phy0: ah->misc_mode 0x10000004
<7>[  168.420000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[  168.420000] ath: phy0: Set power: 10
<7>[  168.450000] ath: phy0: Set HW RX filter: 0x207
<7>[  168.610000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  168.610000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  168.710000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  169.040000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  169.140000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  169.460000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  169.460000] ath: phy0: Set channel: 2421 MHz width: 0
<7>[  169.460000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 0
<7>[  169.460000] ath: phy0: reset MAC via external reset
<7>[  169.480000] ath: phy0: ah->misc_mode 0x10000004
<7>[  169.490000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[  169.490000] ath: phy0: Set HW RX filter: 0x17
<7>[  169.490000] ath: phy0: Set channel: 2421 MHz width: 0
<7>[  169.490000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 0
<7>[  169.490000] ath: phy0: ah->misc_mode 0x10000004
<7>[  169.500000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[  169.500000] ath: phy0: Set power: 10
<7>[  169.530000] ath: phy0: Set HW RX filter: 0x207
<7>[  169.680000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  169.680000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  169.780000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  170.040000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  170.140000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  170.530000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  170.530000] ath: phy0: Set channel: 2421 MHz width: 0
<7>[  170.530000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 0
<7>[  170.530000] ath: phy0: reset MAC via external reset
<7>[  170.550000] ath: phy0: ah->misc_mode 0x10000004
<7>[  170.550000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[  170.550000] ath: phy0: Set HW RX filter: 0x17
<7>[  170.550000] ath: phy0: Set channel: 2421 MHz width: 0
<7>[  170.550000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 0
<7>[  170.560000] ath: phy0: ah->misc_mode 0x10000004
<7>[  170.560000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[  170.560000] ath: phy0: Set power: 10
<7>[  170.590000] ath: phy0: Set HW RX filter: 0x207
<7>[  170.750000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  170.750000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  170.850000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  171.040000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  171.140000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  171.590000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  171.590000] ath: phy0: Set channel: 2421 MHz width: 0
<7>[  171.590000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 0
<7>[  171.590000] ath: phy0: reset MAC via external reset
<7>[  171.610000] ath: phy0: ah->misc_mode 0x10000004
<7>[  171.610000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[  171.610000] ath: phy0: Set HW RX filter: 0x17
<7>[  171.610000] ath: phy0: Set channel: 2421 MHz width: 0
<7>[  171.610000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 0
<7>[  171.620000] ath: phy0: ah->misc_mode 0x10000004
<7>[  171.620000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[  171.620000] ath: phy0: Set power: 10
<7>[  171.650000] ath: phy0: Set HW RX filter: 0x207
<7>[  171.810000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  171.810000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  171.910000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  172.040000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  172.140000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  172.650000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  172.650000] ath: phy0: Set channel: 2421 MHz width: 0
<7>[  172.650000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 0
<7>[  172.650000] ath: phy0: reset MAC via external reset
<7>[  172.670000] ath: phy0: ah->misc_mode 0x10000004
<7>[  172.670000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[  172.670000] ath: phy0: Set HW RX filter: 0x17
<7>[  172.670000] ath: phy0: Set channel: 2421 MHz width: 0
<7>[  172.670000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 0
<7>[  172.680000] ath: phy0: ah->misc_mode 0x10000004
<7>[  172.690000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[  172.690000] ath: phy0: Set power: 10
<7>[  172.720000] ath: phy0: Set HW RX filter: 0x207
<7>[  172.890000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  172.890000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  172.990000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  173.040000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  173.140000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  173.720000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  173.720000] ath: phy0: Set channel: 2421 MHz width: 0
<7>[  173.720000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 0
<7>[  173.720000] ath: phy0: reset MAC via external reset
<7>[  173.740000] ath: phy0: ah->misc_mode 0x10000004
<7>[  173.740000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[  173.740000] ath: phy0: Set HW RX filter: 0x17
<7>[  173.740000] ath: phy0: Set channel: 2421 MHz width: 0
<7>[  173.740000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 0
<7>[  173.750000] ath: phy0: ah->misc_mode 0x10000004
<7>[  173.750000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[  173.750000] ath: phy0: Set power: 10
<7>[  173.780000] ath: phy0: Set HW RX filter: 0x207
<7>[  173.940000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  173.940000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  174.140000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  174.780000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  174.780000] ath: phy0: Set channel: 2421 MHz width: 0
<7>[  174.780000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 0
<7>[  174.780000] ath: phy0: reset MAC via external reset
<7>[  174.800000] ath: phy0: ah->misc_mode 0x10000004
<7>[  174.800000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[  174.800000] ath: phy0: Set HW RX filter: 0x17
<7>[  174.800000] ath: phy0: Set channel: 2421 MHz width: 0
<7>[  174.800000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 0
<7>[  174.810000] ath: phy0: ah->misc_mode 0x10000004
<7>[  174.810000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[  174.810000] ath: phy0: Set power: 10
<7>[  174.840000] ath: phy0: Set HW RX filter: 0x207
<7>[  175.000000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  175.000000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  175.140000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  175.840000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  175.840000] ath: phy0: Set channel: 2421 MHz width: 0
<7>[  175.840000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 0
<7>[  175.840000] ath: phy0: reset MAC via external reset
<7>[  175.860000] ath: phy0: ah->misc_mode 0x10000004
<7>[  175.860000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[  175.860000] ath: phy0: Set HW RX filter: 0x17
<7>[  175.860000] ath: phy0: Set channel: 2421 MHz width: 0
<7>[  175.860000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 0
<7>[  175.870000] ath: phy0: ah->misc_mode 0x10000004
<7>[  175.870000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[  175.870000] ath: phy0: Set power: 10
<7>[  175.900000] ath: phy0: Set HW RX filter: 0x207
<7>[  176.140000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  176.140000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  176.240000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  176.900000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  176.900000] ath: phy0: Set channel: 2421 MHz width: 0
<7>[  176.900000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 0
<7>[  176.900000] ath: phy0: reset MAC via external reset
<7>[  176.920000] ath: phy0: ah->misc_mode 0x10000004
<7>[  176.920000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[  176.920000] ath: phy0: Set HW RX filter: 0x17
<7>[  176.920000] ath: phy0: Set channel: 2421 MHz width: 0
<7>[  176.920000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 0
<7>[  176.930000] ath: phy0: ah->misc_mode 0x10000004
<7>[  176.940000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[  176.940000] ath: phy0: Set power: 10
<7>[  176.970000] ath: phy0: Set HW RX filter: 0x207
<7>[  177.150000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  177.150000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  177.250000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  177.970000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  177.970000] ath: phy0: Set channel: 2421 MHz width: 0
<7>[  177.970000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 0
<7>[  177.970000] ath: phy0: reset MAC via external reset
<7>[  177.990000] ath: phy0: ah->misc_mode 0x10000004
<7>[  177.990000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[  177.990000] ath: phy0: Set HW RX filter: 0x17
<7>[  177.990000] ath: phy0: Set channel: 2421 MHz width: 0
<7>[  177.990000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 0
<7>[  178.000000] ath: phy0: ah->misc_mode 0x10000004
<7>[  178.000000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[  178.000000] ath: phy0: Set power: 10
<7>[  178.030000] ath: phy0: Set HW RX filter: 0x207
<7>[  178.190000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  178.190000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  178.290000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  179.030000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  179.030000] ath: phy0: Set channel: 2421 MHz width: 0
<7>[  179.030000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 0
<7>[  179.030000] ath: phy0: reset MAC via external reset
<7>[  179.050000] ath: phy0: ah->misc_mode 0x10000004
<7>[  179.050000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[  179.050000] ath: phy0: Set HW RX filter: 0x17
<7>[  179.050000] ath: phy0: Set channel: 2421 MHz width: 0
<7>[  179.050000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 0
<7>[  179.060000] ath: phy0: ah->misc_mode 0x10000004
<7>[  179.060000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[  179.060000] ath: phy0: Set power: 10
<7>[  179.090000] ath: phy0: Set HW RX filter: 0x207
<7>[  179.250000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  179.250000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  179.350000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  180.040000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  180.090000] ath: phy0: Set channel: 2421 MHz width: 0
<7>[  180.090000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 0
<7>[  180.090000] ath: phy0: reset MAC via external reset
<7>[  180.100000] ath: phy0: ah->misc_mode 0x10000004
<7>[  180.110000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[  180.110000] ath: phy0: Set HW RX filter: 0x17
<7>[  180.110000] ath: phy0: Set channel: 2421 MHz width: 0
<7>[  180.110000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 0
<7>[  180.110000] ath: phy0: ah->misc_mode 0x10000004
<7>[  180.120000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[  180.120000] ath: phy0: Set power: 10
<7>[  180.150000] ath: phy0: Set HW RX filter: 0x207
<7>[  180.310000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  180.310000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  180.410000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  181.040000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  181.140000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  181.150000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  181.150000] ath: phy0: Set channel: 2421 MHz width: 0
<7>[  181.150000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 0
<7>[  181.150000] ath: phy0: reset MAC via external reset
<7>[  181.170000] ath: phy0: ah->misc_mode 0x10000004
<7>[  181.170000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[  181.180000] ath: phy0: Set HW RX filter: 0x17
<7>[  181.180000] ath: phy0: Set channel: 2421 MHz width: 0
<7>[  181.180000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 0
<7>[  181.180000] ath: phy0: ah->misc_mode 0x10000004
<7>[  181.180000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[  181.180000] ath: phy0: Set power: 10
<7>[  181.220000] ath: phy0: Set HW RX filter: 0x207
<7>[  181.370000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  181.370000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  181.470000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  182.040000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  182.140000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  182.220000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  182.220000] ath: phy0: Set channel: 2421 MHz width: 0
<7>[  182.220000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 0
<7>[  182.220000] ath: phy0: reset MAC via external reset
<7>[  182.240000] ath: phy0: ah->misc_mode 0x10000004
<7>[  182.240000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[  182.240000] ath: phy0: Set HW RX filter: 0x17
<7>[  182.240000] ath: phy0: Set channel: 2421 MHz width: 0
<7>[  182.240000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 0
<7>[  182.250000] ath: phy0: ah->misc_mode 0x10000004
<7>[  182.250000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[  182.250000] ath: phy0: Set power: 10
<7>[  182.280000] ath: phy0: Set HW RX filter: 0x207
<7>[  182.440000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  182.440000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  182.540000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  183.040000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  183.140000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  183.280000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  183.280000] ath: phy0: Set channel: 2421 MHz width: 0
<7>[  183.280000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 0
<7>[  183.280000] ath: phy0: reset MAC via external reset
<7>[  183.300000] ath: phy0: ah->misc_mode 0x10000004
<7>[  183.300000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[  183.300000] ath: phy0: Set HW RX filter: 0x17
<7>[  183.300000] ath: phy0: Set channel: 2421 MHz width: 0
<7>[  183.300000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 0
<7>[  183.310000] ath: phy0: ah->misc_mode 0x10000004
<7>[  183.310000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[  183.310000] ath: phy0: Set power: 10
<7>[  183.340000] ath: phy0: Set HW RX filter: 0x207
<7>[  183.500000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  183.500000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  183.600000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  184.040000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  184.140000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  184.340000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  184.340000] ath: phy0: Set channel: 2421 MHz width: 0
<7>[  184.340000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 0
<7>[  184.340000] ath: phy0: reset MAC via external reset
<7>[  184.360000] ath: phy0: ah->misc_mode 0x10000004
<7>[  184.370000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[  184.370000] ath: phy0: Set HW RX filter: 0x17
<7>[  184.370000] ath: phy0: Set channel: 2421 MHz width: 0
<7>[  184.370000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 0
<7>[  184.370000] ath: phy0: ah->misc_mode 0x10000004
<7>[  184.380000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[  184.380000] ath: phy0: Set power: 10
<7>[  184.410000] ath: phy0: Set HW RX filter: 0x207
<7>[  184.560000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  184.560000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  184.660000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  185.040000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  185.140000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  185.410000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  185.410000] ath: phy0: Set channel: 2421 MHz width: 0
<7>[  185.410000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 0
<7>[  185.410000] ath: phy0: reset MAC via external reset
<7>[  185.430000] ath: phy0: ah->misc_mode 0x10000004
<7>[  185.430000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[  185.430000] ath: phy0: Set HW RX filter: 0x17

In the adaptive branch with passive scan,still the same:

0>[  382.480000] ===MHX(__ieee80211_scan_completed) 3.4
<0>[  382.480000] ===MHX(nl80211_dump_scan) 8.1. start=0
<7>[  382.580000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  382.580000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  382.680000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  383.000000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  383.100000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  383.480000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  383.480000] ath: phy0: (ath_set_channel): Set channel: 2390 MHz width: 0
<7>[  383.480000] ath: phy0: Set channel: 2390 MHz width: 0
<7>[  383.480000] ath: phy0: Reset to 2390 MHz, HT40: 0 fastcc: 0
<7>[  383.480000] ath: phy0: reset MAC via external reset
<7>[  383.500000] ath: phy0: ah->misc_mode 0x10000004
<7>[  383.510000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[  383.510000] ath: phy0: Set HW RX filter: 0x17
<7>[  383.510000] ath: phy0: (ath_set_channel): Set channel: 2421 MHz width: 0
<7>[  383.510000] ath: phy0: Set channel: 2421 MHz width: 0
<7>[  383.510000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 1
<7>[  383.510000] ath: phy0: ah->misc_mode 0x10000004
<7>[  383.520000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<0>[  383.630000] ===MHX(__ieee80211_scan_completed) 3.1
<0>[  383.630000] ===MHX(__ieee80211_scan_completed) 3.2
<0>[  383.630000] ===MHX(__ieee80211_scan_completed) 3.3
<7>[  383.630000] ath: phy0: (ath_set_channel): Set channel: 2390 MHz width: 0
<7>[  383.630000] ath: phy0: Set channel: 2390 MHz width: 0
<7>[  383.630000] ath: phy0: Reset to 2390 MHz, HT40: 0 fastcc: 0
<7>[  383.630000] ath: phy0: ah->misc_mode 0x10000004
<7>[  383.630000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[  383.640000] ath: phy0: Set HW RX filter: 0x207
<0>[  383.640000] ===MHX(__ieee80211_scan_completed) 3.4
<0>[  383.640000] ===MHX(nl80211_dump_scan) 8.1. start=0
<7>[  383.740000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  383.740000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  383.840000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  384.000000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  384.100000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  384.640000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  384.640000] ath: phy0: (ath_set_channel): Set channel: 2390 MHz width: 0
<7>[  384.640000] ath: phy0: Set channel: 2390 MHz width: 0
<7>[  384.640000] ath: phy0: Reset to 2390 MHz, HT40: 0 fastcc: 0
<7>[  384.640000] ath: phy0: reset MAC via external reset
<7>[  384.660000] ath: phy0: ah->misc_mode 0x10000004
<7>[  384.670000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[  384.670000] ath: phy0: Set HW RX filter: 0x17
<7>[  384.670000] ath: phy0: (ath_set_channel): Set channel: 2421 MHz width: 0
<7>[  384.670000] ath: phy0: Set channel: 2421 MHz width: 0
<7>[  384.670000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 1
<7>[  384.670000] ath: phy0: ah->misc_mode 0x10000004
<7>[  384.680000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<0>[  384.790000] ===MHX(__ieee80211_scan_completed) 3.1
<0>[  384.790000] ===MHX(__ieee80211_scan_completed) 3.2
<0>[  384.790000] ===MHX(__ieee80211_scan_completed) 3.3
<7>[  384.790000] ath: phy0: (ath_set_channel): Set channel: 2390 MHz width: 0
<7>[  384.790000] ath: phy0: Set channel: 2390 MHz width: 0
<7>[  384.790000] ath: phy0: Reset to 2390 MHz, HT40: 0 fastcc: 0
<7>[  384.790000] ath: phy0: ah->misc_mode 0x10000004
<7>[  384.790000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<7>[  384.800000] ath: phy0: Set HW RX filter: 0x207
<0>[  384.800000] ===MHX(__ieee80211_scan_completed) 3.4
<0>[  384.800000] ===MHX(nl80211_dump_scan) 8.1. start=0
<7>[  384.900000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  384.900000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  385.100000] ath: phy0: AWAKE -> FULL-SLEEP
<7>[  385.800000] ath: phy0: FULL-SLEEP -> AWAKE
<7>[  385.800000] ath: phy0: (ath_set_channel): Set channel: 2390 MHz width: 0
<7>[  385.800000] ath: phy0: Set channel: 2390 MHz width: 0

Note here the 2390(Channel 0) is used. Because STA is turned on without AP on. After once connection, the 2390MHz is gone. In generic pDDL with active probe this happens too. Maybe this is a bug.

But according to Jason's test, the current surge is not because of this chip reset I see here. The current is stable when this reset happens. The surge happens in the VERY FIRST packet the chip sends, no matter it is probe-response or auth-request.

Jan 11,2017
pDDL code. Push over high traffic from STA to AP to let the pipe overrun. AP complains frequently like below:

<7>[ 3147.920000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 0	//  ath_reset_internal()
<7>[ 3149.240000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 0
<7>[ 3150.160000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 0
<7>[ 3151.450000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 0
<7>[ 3156.370000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 0
<7>[ 3158.640000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 0
<7>[ 3160.390000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 0
<7>[ 3160.700000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 0
<7>[ 3160.850000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 0
<7>[ 3161.710000] ath: phy0: Reset to 2421 MHz, HT40: 0 fastcc: 0

At the same time, AP sys/kernel/debug/ieee80211/phy0/ath9k/reset shows "Stuck Beacon" increases fast. This beacon stuck will trigger  ath_reset_internal() to reset the chip and shows up the compliants above.

When push a lower UDP  traffic from STA to AP, this stuck and reset don't happen much. But occasionally, when it happens, we can see a slight packet drop, about <1%.

Push a very low UDP traffic from STA to AP, this stuck and reset almost disappear. 6 minutes test didn't see a compliant.

In the adaptive-hopping branch, the stuck beacon mechanism is bypassed so maybe can mitigate this issue.

Jan 9, 2017
Some more direct candidates about signal:
1. ./sys/kernel/debug/ieee80211/phy0/netdev:wlan0/stations/00:0f:92:fa:80:82/last_ack_signal
2. ./sys/kernel/debug/ieee80211/phy0/netdev:wlan0/stations/00:0f:92:fa:80:82/last_rssi
3. ./sys/kernel/debug/ieee80211/phy0/netdev:wlan0/stations/00:0f:92:fa:80:82/last_noisefloor
4. ./sys/kernel/debug/ieee80211/phy0/netdev:wlan0/stations/00:0f:92:fa:80:82/last_signal

Enable the Promiscuous mode on STA causes the T/P from STA to AP degraded about >30%. That is huge. Can not use this PROM mode on STA on RX filter!

Jan 6, 2016
Candidates about connection quanlity.
1. cat sys/kernel/debug/ieee80211/phy0/ath9k/xmit  | grep TX-Bytes-All
	This is tx_bytes_all, gets incremented in ath_debug_stat_tx()<---ath_tx_complete_buf(). This matches the curve the STA can really receive. This should be a RF level count.

2. cat sys/kernel/debug/ieee80211/phy0/ath9k/xmit | grep "AMPDUs Queued SW" | awk '{print $4}'.
	This is a_queued_sw and incremented in ath_tx_start(). This curve matches the "TX-Bytes-All:".

3. cat sys/kernel/debug/ieee80211/phy0/statistics/dot11ACKFailureCount
	This is a low level status:
	struct ieee80211_low_level_stats {
	        unsigned int dot11ACKFailureCount;
        	unsigned int dot11RTSFailureCount;
	        unsigned int dot11FCSErrorCount;
	        unsigned int dot11RTSSuccessCount;
	};
	It is updated in ath9k_get_stats() : stats->dot11ACKFailureCount = mib_stats->ackrcv_bad. struct ieee80211_ops ath9k_ops.get_stats = ath9k_get_stats <-----drv_get_stats().
	In ath9k_hw_update_mibstats() : stats->ackrcv_bad += REG_READ(ah, AR_ACK_FAIL); This is updated by ath9k_hw_ani_monitor().
	This is a spike when transmit hardness happens.

4. sys/kernel/debug/ieee80211/phy0/netdev:wlan0/stations/00:0f:92:fa:80:82/tx_retry_count
   sys/kernel/debug/ieee80211/phy0/netdev:wlan0/stations/00:0f:92:fa:80:82/tx_retry_failed
	These are spikes when it is hard to transmit. Updated in ieee80211_tx_status(), a transmit status callback. The driver takes care of frame aggregation, transmission and completion status.  Frames are then handed back to mac80211 via ieee80211_tx_status() which will either complete the frame, or push it back into a mac80211 queue (eg filtered frames) for a further transmission attempt.

5. cat sys/kernel/debug/ieee80211/phy0/ath9k/queues, BE Queue pending numbers.
	This is a spike when transmission hardness happens. It is ath_txq *txq ->pending_frames. It is incremented in ath_tx_start().

6. cat ./sys/kernel/debug/ieee80211/phy0/statistics/subif_dropped_skb_count:
	Tihs is a spike when wlan0.sta1 TX bytes dropped. It is from struct ieee80211_local-> dot11SubifDroppedSkbCount, which is incremented in ieee80211_subif_start_xmit() = struct net_device_ops ieee80211_dataif_ops.ndo_start_xmit.

Jan 4, 2017
root@UserDevice:~# cat sys/kernel/debug/ieee80211/phy0/hwflags 
0x9042b46
RX_INCLUDES_FCS
HOST_BCAST_PS_BUFFERING
SIGNAL_DBM
SPECTRUM_MGMT
AMPDU_AGGREGATION	// IEEE80211_HW_AMPDU_AGGREGATION = 1
PS_NULLFUNC_STACK
MFP_CAPABLE
REPORTS_TX_ACK_STATUS	// IEEE80211_HW_REPORTS_TX_ACK_STATUS = 1
This means IEEE80211_HW_HAS_RATE_CONTROL is NOT set. Rate control is not in HW but bu Minstrel.
IEEE80211_HW_TX_AMPDU_SETUP_IN_HW is NOT set.
IEEE80211_HW_CONNECTION_MONITOR is NOT set

Jan 3, 2017
In wpas_trigger_scan_cb() wpa_s->clear_driver_scan_cache = 1; can help to refresh the scan result faster and flush the cached scan result. This maybe the root cause why in 2MHz mode. the operating frequency looks like black-listed.

Dec 23, 2016
ATH_RSSI_LPF is used for ->last_rssi, which is a int. This macro doesn't work for signal and noise floor which are s8. 

Dec 21, 2016
In __ieee80211_rx_handle_packet()

        if (unlikely(ieee80211_is_probe_resp(hdr->frame_control) ||
                     ieee80211_is_beacon(hdr->frame_control))){
                printk("===MHX(%s)10.1 scan is presp or beacon.presp=%d,beacon=%d!\n", __func__, ieee80211_is_probe_resp(hdr->frame_control), ieee80211_is_beacon(hdr->frame_control));
                ieee80211_scan_rx(local, skb);
        }
Will print out "===MHX(__ieee80211_rx_handle_packet)10.1 scan is presp or beacon.presp=0,beacon=1!". What does unlikely mean?
[A:]: Those are compiler optimisation calls. Place any critical bit that you think is important and will most likely occur under a likely(). Vice versa for unlikely. If you think that a certain scenario is very unlikely to occur, but you still want to add a check just in case, this is they way to add it.

Dec 20, 2016
Remove AP antenna and the wait until connection lost and start scan. STA never sees the AP frequency beacon again. Test with 2MHz BW mode, even the ath_rx_tasklet() is not invoked at this frequency. AP at 2 adjacent frequeencies works well and can be heard by the STA. Looks like the STA black-listed the specific frequency of AP.

Test 4M and 8MHz bw looks ok.

Dec 15, 2016
When the antennas are very close, the connection can not be setup. The STA side kmsg always says "association with AP_MAC timed out" and a NL80211_CMD_DEL_STATION command is generated. Move antennas further will solve this problem.

A real authentication may take 212mS like this log from wpa_supplicant:

1481656098.236241: nl80211: Authentication request send successfully
1481656098.236380: nl80211: Event message available
1481656098.236444: nl80211: Drv Event 19 (NL80211_CMD_NEW_STATION) received for wlan0
1481656098.236501: nl80211: New station 00:0f:92:fa:6c:45
1481656098.448082: nl80211: Event message available
1481656098.448269: nl80211: Drv Event 37 (NL80211_CMD_AUTHENTICATE) received for wlan0


A real association may take as long as 354mS like this log from wpa_supplicant:
1481658869.430721: nl80211: Association request send successfully
1481658869.777358: RTM_NEWLINK: ifi_index=7 ifname=wlan0 master=5 operstate=83886080 ifi_fla)
1481658869.780807: nl80211: Add ifindex 5 for bridge br-lan
1481658869.780907: nl80211: Add own interface ifindex 5
1481658869.780946: nl80211: ifindex 5 already in the list
1481658869.781050: RTM_NEWLINK: ifi_index=7 ifname=wlan0 operstate=83886080 linkmode=1677721)
1481658869.781652: RTM_NEWLINK: ifi_index=7 ifname=wlan0 wext ifi_flags=0x11003 ([UP][LOWER_)
1481658869.782249: RTM_NEWLINK: ifi_index=7 ifname=wlan0 wext ifi_flags=0x11003 ([UP][LOWER_)
1481658869.782851: nl80211: Event message available
1481658869.783000: nl80211: Drv Event 38 (NL80211_CMD_ASSOCIATE) received for wlan0


Dec 12, 2016
Interference injected will cause "Stuck Beacon" on AP side and will never really switch frequency. The "Stuck Beacon" reset increments.

Dec 7, 2016
#define IEEE80211_PASSIVE_CHANNEL_TIME (HZ / 9) // It is used as jiffy number. printk shows IEEE80211_PASSIVE_CHANNEL_TIME=11. This means HZ=100 jiffies.

Nov 29, 2016
pDDL: doesn't support SCHED_SCAN stuff. Only normal scan NL80211_CMD_NEW_SCAN_RESULTS.

Nov 25,2015
ABout wpa_driver_ops.sched_scan :          * This operation should be used for scheduled scan offload to
         * the hardware. Every time scan results are available, the
         * driver should report scan results event for wpa_supplicant
         * which will eventually request the results with
         * wpa_driver_get_scan_results2(). This operation is optional
         * and if not provided or if it returns -1, we fall back to
         * normal host-scheduled scans.
In struct ieee80211_ops ath9k_ops{}, the hw_scan, sched_scan_start are not provided. ath9k doesn't support hardware scan. So NL80211_FEATURE_LOW_PRIORITY_SCAN, NL80211_FEATURE_AP_SCAN flags are set.-----This is proved in ieee80211_alloc_hw():
if (!ops->hw_scan)
        {
                printk("===MHX(%s) hw_scan is not supported. SW scan only\n", __func__); //printed. no hw scan support in ath9k driver.
                wiphy->features |= NL80211_FEATURE_LOW_PRIORITY_SCAN |
                                   NL80211_FEATURE_AP_SCAN;
        }


In STATION mode, ieee80211_sta_setup_sdata() sets up 5 work queues and 4 timers:

        INIT_WORK(&ifmgd->monitor_work, 					ieee80211_sta_monitor_work);
        INIT_WORK(&ifmgd->chswitch_work, 					ieee80211_chswitch_work);
        INIT_WORK(&ifmgd->beacon_connection_loss_work, 				ieee80211_beacon_connection_loss_work);
        INIT_WORK(&ifmgd->csa_connection_drop_work,				ieee80211_csa_connection_drop_work);
        INIT_WORK(&ifmgd->request_smps_work, 					ieee80211_request_smps_mgd_work);

        setup_timer(&ifmgd->timer, 						ieee80211_sta_timer,   (unsigned long) sdata);
        setup_timer(&ifmgd->bcn_mon_timer, 					ieee80211_sta_bcn_mon_timer, (unsigned long) sdata);
        setup_timer(&ifmgd->conn_mon_timer, 					ieee80211_sta_conn_mon_timer,(unsigned long) sdata);
        setup_timer(&ifmgd->chswitch_timer, 					ieee80211_chswitch_timer,(unsigned long) sdata);


Nov 23,2016
The radar/DFS channel is defined in the static const struct ieee80211_regdomain world_regdom{}, with NL80211_RRF_DFS flag. This is from the ART flash data.
NL80211_RRF_DFS ---> channel_flags |= IEEE80211_CHAN_RADAR --->nla_put_flag(msg, NL80211_FREQUENCY_ATTR_RADAR) -----------(NL)----------->chan->flag |= HOSTAPD_CHAN_RADAR.
ath_reg_apply_radar_flags() can force a channel DFS.

NL80211_RRF_NO_IR, #define NL80211_RRF_NO_IR_ALL           (NL80211_RRF_NO_IR | __NL80211_RRF_NO_IBSS) ------> channel_flags |= IEEE80211_CHAN_NO_IR ------> nla_put_flag(msg, NL80211_FREQUENCY_ATTR_NO_IR),nla_put_flag(msg, __NL80211_FREQUENCY_ATTR_NO_IBSS)-----NL------>chan->flag |= HOSTAPD_CHAN_PASSIVE_SCAN | HOSTAPD_CHAN_NO_IBSS

Nov 22,2016
CPTCFG_ATH9K_DFS_DEBUGFS can not be turned on in BUILDFLAGS otherwise the wlan0 disappeared.
On Hostapd, wpa_printf(MSG_DEBUG should print if -dddd, which means wpa_debug_level is low enough and smaller than MSG_DEBUG. But actually it doesn't work. Change it to wpa_printf(MSG_INFO) will work.

On the wpa_supplicant side, wpa_dbg(drv->ctx, MSG_DEBUG) has the same problem, wpa_dbg(drv->ctx, MSG_INFO) will work.
The debug level is defined as
enum {
        MSG_EXCESSIVE, MSG_MSGDUMP, MSG_DEBUG, MSG_INFO, MSG_WARNING, MSG_ERROR
}; which means only MSG_INFO and above can be printed.
When build hostapd, I fouond:
-DCONFIG_MSG_MIN_PRIORITY=3, this limits the debug info to be printed out. This is defaulted to 2 in package/network/services/hostapd/Config.in. But changed it to 0 still didn't work. Remove the line "$(if $(CONFIG_WPA_MSG_MIN_PRIORITY),-DCONFIG_MSG_MIN_PRIORITY=$(CONFIG_WPA_MSG_MIN_PRIORITY))" in hostapd Makefile will work.

Nov 17,2016
DFS needs specific registers settings.
ath_set_channel ---> ath9k_hw_set_radar_params ---> ar9003_hw_set_radar_params, where some radar registers like AR_PHY_RADAR_0_FFT_ENA are set. Looks like this will not work for 2GHz.

Then when Radar pulse is detected:


Nov 16,2016
ACS only relies on the information observed at the time it is triggered. Once an AP has selected a channel, it remains operating on that channel until the user changes the channel or triggers ACS. The way to make the AP always choose best channel is to enable Dynamic Channel Selection selection.

Nov 15,2016
Channel hopping log:
This PLL RX HANG error happens randomly. I recorded the Delta time as (seconds),39, 24,81,212,149,18,74,36,29,135,92. 

<0>[  242.880000] ===MHX7.1(ieee80211_chswitch_work)
<0>[  242.880000] ===MHX7.2(ieee80211_chswitch_work)
<0>[  242.880000] ===MHX7.3(ieee80211_chswitch_work)
<0>[  242.880000] ===MHX7.4(ieee80211_chswitch_work)
<0>[  242.880000] ===MHX7.5(ieee80211_chswitch_work)
<0>[  242.880000] ===MHX7.6(ieee80211_chswitch_work)
<7>[  242.880000] ath: phy0: ===MHX1.1(ath_set_channel). Set channel: 2393 MHz width: 1
<7>[  242.880000] ath: phy0: Set channel: 2393 MHz width: 1
<7>[  242.880000] ath: phy0: Reset to 2393 MHz, HT40: 0 fastcc: 0
<7>[  242.880000] ath: phy0: ah->misc_mode 0x10000004
<7>[  242.880000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<0>[  242.880000] ===MHX 9.1(ath_restart_work) starting hw_pll_work after 1000mSec
<0>[  242.880000] ===MHX7.7(ieee80211_chswitch_work)
<0>[  242.880000] ===MHX7.8(ieee80211_chswitch_work)
<0>[  242.880000] ===MHX7.9(ieee80211_chswitch_work)
<0>[  242.980000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  242.980000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  242.980000] ===MHX8.1(ieee80211_sta_process_chanswitch) IsBeacon=1
<0>[  242.980000] ===MHX8.2(ieee80211_sta_process_chanswitch)
<0>[  242.980000] ===MHX8.3(ieee80211_sta_process_chanswitch)
<0>[  242.980000] ===MHX8.4(ieee80211_sta_process_chanswitch). parse_ch_switch_ie() res=1
<0>[  243.080000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  243.080000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  243.180000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  243.180000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  243.280000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  243.280000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  243.390000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  243.390000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  243.490000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  243.490000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  243.590000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  243.590000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  243.690000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  243.690000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  243.800000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  243.800000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  243.880000] ===MHX 6.0(ath_hw_pll_rx_hang_check) pll_seqsum=1120
<0>[  243.900000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  243.900000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  243.900000] ===MHX8.1(ieee80211_sta_process_chanswitch) IsBeacon=1
<0>[  243.900000] ===MHX8.2(ieee80211_sta_process_chanswitch)
<0>[  243.900000] ===MHX8.3(ieee80211_sta_process_chanswitch)
<0>[  243.900000] ===MHX8.4(ieee80211_sta_process_chanswitch). parse_ch_switch_ie() res=0
<0>[  243.900000] ===MHX8.5(ieee80211_sta_process_chanswitch)
<0>[  243.900000] ===MHX8.6(ieee80211_sta_process_chanswitch)
<0>[  243.900000] ===MHX8.8(ieee80211_sta_process_chanswitch)
<0>[  243.900000] ===MHX8.9(ieee80211_sta_process_chanswitch)
<0>[  243.900000] ===MHX8.11(ieee80211_sta_process_chanswitch)
<0>[  243.900000] ===MHX7.1(ieee80211_chswitch_work)
<0>[  243.900000] ===MHX7.2(ieee80211_chswitch_work)
<0>[  243.900000] ===MHX7.3(ieee80211_chswitch_work)
<0>[  243.900000] ===MHX7.4(ieee80211_chswitch_work)
<0>[  243.900000] ===MHX7.5(ieee80211_chswitch_work)
<0>[  243.900000] ===MHX7.6(ieee80211_chswitch_work)
<7>[  243.900000] ath: phy0: ===MHX1.1(ath_set_channel). Set channel: 2394 MHz width: 1
<7>[  243.900000] ath: phy0: Set channel: 2394 MHz width: 1
<7>[  243.900000] ath: phy0: Reset to 2394 MHz, HT40: 0 fastcc: 0
<7>[  243.900000] ath: phy0: ah->misc_mode 0x10000004
<7>[  243.910000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<0>[  243.910000] ===MHX 9.1(ath_restart_work) starting hw_pll_work after 1000mSec
<0>[  243.910000] ===MHX7.7(ieee80211_chswitch_work)
<0>[  243.910000] ===MHX7.8(ieee80211_chswitch_work)
<0>[  243.910000] ===MHX7.9(ieee80211_chswitch_work)
<0>[  244.000000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  244.000000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  244.000000] ===MHX8.1(ieee80211_sta_process_chanswitch) IsBeacon=1
<0>[  244.000000] ===MHX8.2(ieee80211_sta_process_chanswitch)
<0>[  244.000000] ===MHX8.3(ieee80211_sta_process_chanswitch)
<0>[  244.000000] ===MHX8.4(ieee80211_sta_process_chanswitch). parse_ch_switch_ie() res=1
<0>[  244.100000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  244.100000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  244.210000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  244.210000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  244.310000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  244.310000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  244.410000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  244.410000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  244.510000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  244.510000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  244.620000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  244.620000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  244.720000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  244.720000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  244.820000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  244.820000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  244.910000] ===MHX 6.0(ath_hw_pll_rx_hang_check) pll_seqsum=704
<0>[  244.920000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  244.920000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  244.920000] ===MHX8.1(ieee80211_sta_process_chanswitch) IsBeacon=1
<0>[  244.920000] ===MHX8.2(ieee80211_sta_process_chanswitch)
<0>[  244.920000] ===MHX8.3(ieee80211_sta_process_chanswitch)
<0>[  244.920000] ===MHX8.4(ieee80211_sta_process_chanswitch). parse_ch_switch_ie() res=0
<0>[  244.920000] ===MHX8.5(ieee80211_sta_process_chanswitch)
<0>[  244.920000] ===MHX8.6(ieee80211_sta_process_chanswitch)
<0>[  244.920000] ===MHX8.8(ieee80211_sta_process_chanswitch)
<0>[  244.920000] ===MHX8.9(ieee80211_sta_process_chanswitch)
<0>[  244.920000] ===MHX8.11(ieee80211_sta_process_chanswitch)
<0>[  244.920000] ===MHX7.1(ieee80211_chswitch_work)
<0>[  244.920000] ===MHX7.2(ieee80211_chswitch_work)
<0>[  244.920000] ===MHX7.3(ieee80211_chswitch_work)
<0>[  244.920000] ===MHX7.4(ieee80211_chswitch_work)
<0>[  244.920000] ===MHX7.5(ieee80211_chswitch_work)
<0>[  244.920000] ===MHX7.6(ieee80211_chswitch_work)
<7>[  244.920000] ath: phy0: ===MHX1.1(ath_set_channel). Set channel: 2395 MHz width: 1
<7>[  244.920000] ath: phy0: Set channel: 2395 MHz width: 1
<7>[  244.920000] ath: phy0: Reset to 2395 MHz, HT40: 0 fastcc: 0
<7>[  244.930000] ath: phy0: ah->misc_mode 0x10000004
<7>[  244.930000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<0>[  244.930000] ===MHX 9.1(ath_restart_work) starting hw_pll_work after 1000mSec
<0>[  244.930000] ===MHX7.7(ieee80211_chswitch_work)
<0>[  244.930000] ===MHX7.8(ieee80211_chswitch_work)
<0>[  244.930000] ===MHX7.9(ieee80211_chswitch_work)
<0>[  245.930000] ===MHX 6.0(ath_hw_pll_rx_hang_check) pll_seqsum=747
<0>[  246.930000] ===MHX 6.0(ath_hw_pll_rx_hang_check) pll_seqsum=556
<0>[  247.930000] ===MHX 6.0(ath_hw_pll_rx_hang_check) pll_seqsum=1164
<0>[  248.930000] ===MHX 6.0(ath_hw_pll_rx_hang_check) pll_seqsum=2084
<0>[  249.930000] ===MHX 6.0(ath_hw_pll_rx_hang_check) pll_seqsum=523
<0>[  250.930000] ===MHX 6.0(ath_hw_pll_rx_hang_check) pll_seqsum=538
<0>[  251.930000] ===MHX 6.0(ath_hw_pll_rx_hang_check) pll_seqsum=980
<0>[  252.930000] ===MHX 6.0(ath_hw_pll_rx_hang_check) pll_seqsum=796
<0>[  253.930000] ===MHX 6.0(ath_hw_pll_rx_hang_check) pll_seqsum=737
<0>[  254.340000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  254.340000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  254.340000] ===MHX8.1(ieee80211_sta_process_chanswitch) IsBeacon=1
<0>[  254.340000] ===MHX8.2(ieee80211_sta_process_chanswitch)
<0>[  254.340000] ===MHX8.3(ieee80211_sta_process_chanswitch)
<0>[  254.340000] ===MHX8.4(ieee80211_sta_process_chanswitch). parse_ch_switch_ie() res=1
<0>[  254.450000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  254.450000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  254.550000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  254.550000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  254.650000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  254.650000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  254.750000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  254.750000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  254.860000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  254.860000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  254.930000] ===MHX 6.0(ath_hw_pll_rx_hang_check) pll_seqsum=1009
<0>[  254.960000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  254.960000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  255.060000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  255.060000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  255.160000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  255.160000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  255.160000] ===MHX8.1(ieee80211_sta_process_chanswitch) IsBeacon=1
<0>[  255.160000] ===MHX8.2(ieee80211_sta_process_chanswitch)
<0>[  255.160000] ===MHX8.3(ieee80211_sta_process_chanswitch)
<0>[  255.160000] ===MHX8.4(ieee80211_sta_process_chanswitch). parse_ch_switch_ie() res=0
<0>[  255.160000] ===MHX8.5(ieee80211_sta_process_chanswitch)
<0>[  255.160000] ===MHX8.6(ieee80211_sta_process_chanswitch)
<0>[  255.160000] ===MHX8.8(ieee80211_sta_process_chanswitch)
<0>[  255.160000] ===MHX8.9(ieee80211_sta_process_chanswitch)
<0>[  255.160000] ===MHX8.11(ieee80211_sta_process_chanswitch)
<0>[  255.160000] ===MHX7.1(ieee80211_chswitch_work)
<0>[  255.160000] ===MHX7.2(ieee80211_chswitch_work)
<0>[  255.160000] ===MHX7.3(ieee80211_chswitch_work)
<0>[  255.160000] ===MHX7.4(ieee80211_chswitch_work)
<0>[  255.160000] ===MHX7.5(ieee80211_chswitch_work)
<0>[  255.160000] ===MHX7.6(ieee80211_chswitch_work)
<7>[  255.160000] ath: phy0: ===MHX1.1(ath_set_channel). Set channel: 2396 MHz width: 1
<7>[  255.160000] ath: phy0: Set channel: 2396 MHz width: 1
<7>[  255.160000] ath: phy0: Reset to 2396 MHz, HT40: 0 fastcc: 0
<7>[  255.170000] ath: phy0: ah->misc_mode 0x10000004
<7>[  255.170000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<0>[  255.170000] ===MHX 9.1(ath_restart_work) starting hw_pll_work after 1000mSec
<0>[  255.170000] ===MHX7.7(ieee80211_chswitch_work)
<0>[  255.170000] ===MHX7.8(ieee80211_chswitch_work)
<0>[  255.170000] ===MHX7.9(ieee80211_chswitch_work)
<0>[  255.270000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  255.270000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  255.270000] ===MHX8.1(ieee80211_sta_process_chanswitch) IsBeacon=1
<0>[  255.270000] ===MHX8.2(ieee80211_sta_process_chanswitch)
<0>[  255.270000] ===MHX8.3(ieee80211_sta_process_chanswitch)
<0>[  255.270000] ===MHX8.4(ieee80211_sta_process_chanswitch). parse_ch_switch_ie() res=1
<0>[  255.370000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  255.370000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  255.470000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  255.470000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  255.570000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  255.570000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  255.670000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  255.670000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  255.780000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  255.780000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  255.880000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  255.880000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  255.980000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  255.980000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  256.080000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  256.080000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  256.170000] ===MHX 6.0(ath_hw_pll_rx_hang_check) pll_seqsum=2954
<0>[  256.190000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  256.190000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  256.290000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  256.290000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  256.290000] ===MHX8.1(ieee80211_sta_process_chanswitch) IsBeacon=1
<0>[  256.290000] ===MHX8.2(ieee80211_sta_process_chanswitch)
<0>[  256.290000] ===MHX8.3(ieee80211_sta_process_chanswitch)
<0>[  256.290000] ===MHX8.4(ieee80211_sta_process_chanswitch). parse_ch_switch_ie() res=0
<0>[  256.290000] ===MHX8.5(ieee80211_sta_process_chanswitch)
<0>[  256.290000] ===MHX8.6(ieee80211_sta_process_chanswitch)
<0>[  256.290000] ===MHX8.8(ieee80211_sta_process_chanswitch)
<0>[  256.290000] ===MHX8.9(ieee80211_sta_process_chanswitch)
<0>[  256.290000] ===MHX8.11(ieee80211_sta_process_chanswitch)
<0>[  256.290000] ===MHX7.1(ieee80211_chswitch_work)
<0>[  256.290000] ===MHX7.2(ieee80211_chswitch_work)
<0>[  256.290000] ===MHX7.3(ieee80211_chswitch_work)
<0>[  256.290000] ===MHX7.4(ieee80211_chswitch_work)
<0>[  256.290000] ===MHX7.5(ieee80211_chswitch_work)
<0>[  256.290000] ===MHX7.6(ieee80211_chswitch_work)
<7>[  256.290000] ath: phy0: ===MHX1.1(ath_set_channel). Set channel: 2397 MHz width: 1
<7>[  256.290000] ath: phy0: Set channel: 2397 MHz width: 1
<7>[  256.290000] ath: phy0: Reset to 2397 MHz, HT40: 0 fastcc: 0
<7>[  256.290000] ath: phy0: ah->misc_mode 0x10000004
<7>[  256.300000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<0>[  256.300000] ===MHX 9.1(ath_restart_work) starting hw_pll_work after 1000mSec
<0>[  256.300000] ===MHX7.7(ieee80211_chswitch_work)
<0>[  256.300000] ===MHX7.8(ieee80211_chswitch_work)
<0>[  256.300000] ===MHX7.9(ieee80211_chswitch_work)
<0>[  256.390000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  256.390000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  256.390000] ===MHX8.1(ieee80211_sta_process_chanswitch) IsBeacon=1
<0>[  256.390000] ===MHX8.2(ieee80211_sta_process_chanswitch)
<0>[  256.390000] ===MHX8.3(ieee80211_sta_process_chanswitch)
<0>[  256.390000] ===MHX8.4(ieee80211_sta_process_chanswitch). parse_ch_switch_ie() res=1
<0>[  256.490000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  256.490000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  256.600000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  256.600000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  256.700000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  256.700000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  256.800000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  256.800000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  256.900000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  256.900000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  257.010000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  257.010000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  257.110000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  257.110000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  257.210000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  257.210000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  257.300000] ===MHX 6.0(ath_hw_pll_rx_hang_check) pll_seqsum=574
<0>[  257.310000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  257.310000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  257.310000] ===MHX8.1(ieee80211_sta_process_chanswitch) IsBeacon=1
<0>[  257.310000] ===MHX8.2(ieee80211_sta_process_chanswitch)
<0>[  257.310000] ===MHX8.3(ieee80211_sta_process_chanswitch)
<0>[  257.310000] ===MHX8.4(ieee80211_sta_process_chanswitch). parse_ch_switch_ie() res=0
<0>[  257.310000] ===MHX8.5(ieee80211_sta_process_chanswitch)
<0>[  257.310000] ===MHX8.6(ieee80211_sta_process_chanswitch)
<0>[  257.310000] ===MHX8.8(ieee80211_sta_process_chanswitch)
<0>[  257.310000] ===MHX8.9(ieee80211_sta_process_chanswitch)
<0>[  257.310000] ===MHX8.11(ieee80211_sta_process_chanswitch)
<0>[  257.310000] ===MHX7.1(ieee80211_chswitch_work)
<0>[  257.310000] ===MHX7.2(ieee80211_chswitch_work)
<0>[  257.310000] ===MHX7.3(ieee80211_chswitch_work)
<0>[  257.310000] ===MHX7.4(ieee80211_chswitch_work)
<0>[  257.310000] ===MHX7.5(ieee80211_chswitch_work)
<0>[  257.310000] ===MHX7.6(ieee80211_chswitch_work)
<7>[  257.310000] ath: phy0: ===MHX1.1(ath_set_channel). Set channel: 2398 MHz width: 1
<7>[  257.310000] ath: phy0: Set channel: 2398 MHz width: 1
<7>[  257.310000] ath: phy0: Reset to 2398 MHz, HT40: 0 fastcc: 0
<7>[  257.320000] ath: phy0: ah->misc_mode 0x10000004
<7>[  257.320000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<0>[  257.320000] ===MHX 9.1(ath_restart_work) starting hw_pll_work after 1000mSec
<0>[  257.320000] ===MHX7.7(ieee80211_chswitch_work)
<0>[  257.320000] ===MHX7.8(ieee80211_chswitch_work)
<0>[  257.320000] ===MHX7.9(ieee80211_chswitch_work)
<0>[  258.320000] ===MHX 6.0(ath_hw_pll_rx_hang_check) pll_seqsum=873033
<0>[  258.320000] ===MHX 6.1(ath_hw_pll_rx_hang_check) pll_seqsum=873033, cnount=1
<0>[  259.320000] ===MHX 6.0(ath_hw_pll_rx_hang_check) pll_seqsum=873076
<0>[  259.320000] ===MHX 6.1(ath_hw_pll_rx_hang_check) pll_seqsum=873076, cnount=2
<0>[  260.320000] ===MHX 6.0(ath_hw_pll_rx_hang_check) pll_seqsum=838307
<0>[  260.320000] ===MHX 6.1(ath_hw_pll_rx_hang_check) pll_seqsum=838307, cnount=3
<7>[  260.320000] ath: phy0: PLL WAR, resetting the chip
<0>[  260.320000] ===MHX5.1(ath9k_queue_reset) reset type=6
<0>[  260.320000] ===MHX3.1(ath_reset_work)
<0>[  260.320000] ===MHX2.1(ath_reset)
<7>[  260.320000] ath: phy0: Reset to 2398 MHz, HT40: 0 fastcc: 0
<7>[  260.320000] ath: phy0: ah->misc_mode 0x10000004
<7>[  260.320000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<0>[  260.320000] ===MHX 9.1(ath_restart_work) starting hw_pll_work after 1000mSec
<0>[  261.320000] ===MHX 6.0(ath_hw_pll_rx_hang_check) pll_seqsum=950
<0>[  262.320000] ===MHX 6.0(ath_hw_pll_rx_hang_check) pll_seqsum=654
<0>[  263.320000] ===MHX 6.0(ath_hw_pll_rx_hang_check) pll_seqsum=1391
<0>[  264.320000] ===MHX 6.0(ath_hw_pll_rx_hang_check) pll_seqsum=3803
<0>[  265.320000] ===MHX 6.0(ath_hw_pll_rx_hang_check) pll_seqsum=1838
<0>[  266.320000] ===MHX 6.0(ath_hw_pll_rx_hang_check) pll_seqsum=744
<0>[  266.630000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  266.630000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  266.630000] ===MHX8.1(ieee80211_sta_process_chanswitch) IsBeacon=1
<0>[  266.630000] ===MHX8.2(ieee80211_sta_process_chanswitch)
<0>[  266.630000] ===MHX8.3(ieee80211_sta_process_chanswitch)
<0>[  266.630000] ===MHX8.4(ieee80211_sta_process_chanswitch). parse_ch_switch_ie() res=1
<0>[  266.730000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  266.730000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  266.840000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  266.840000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  266.940000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  266.940000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  267.040000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  267.040000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  267.140000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  267.140000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  267.250000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  267.250000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  267.320000] ===MHX 6.0(ath_hw_pll_rx_hang_check) pll_seqsum=625
<0>[  267.350000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  267.350000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  267.450000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  267.450000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  267.450000] ===MHX8.1(ieee80211_sta_process_chanswitch) IsBeacon=1
<0>[  267.450000] ===MHX8.2(ieee80211_sta_process_chanswitch)
<0>[  267.450000] ===MHX8.3(ieee80211_sta_process_chanswitch)
<0>[  267.450000] ===MHX8.4(ieee80211_sta_process_chanswitch). parse_ch_switch_ie() res=0
<0>[  267.450000] ===MHX8.5(ieee80211_sta_process_chanswitch)
<0>[  267.450000] ===MHX8.6(ieee80211_sta_process_chanswitch)
<0>[  267.450000] ===MHX8.8(ieee80211_sta_process_chanswitch)
<0>[  267.450000] ===MHX8.9(ieee80211_sta_process_chanswitch)
<0>[  267.450000] ===MHX8.11(ieee80211_sta_process_chanswitch)
<0>[  267.450000] ===MHX7.1(ieee80211_chswitch_work)
<0>[  267.450000] ===MHX7.2(ieee80211_chswitch_work)
<0>[  267.450000] ===MHX7.3(ieee80211_chswitch_work)
<0>[  267.450000] ===MHX7.4(ieee80211_chswitch_work)
<0>[  267.450000] ===MHX7.5(ieee80211_chswitch_work)
<0>[  267.450000] ===MHX7.6(ieee80211_chswitch_work)
<7>[  267.450000] ath: phy0: ===MHX1.1(ath_set_channel). Set channel: 2399 MHz width: 1
<7>[  267.450000] ath: phy0: Set channel: 2399 MHz width: 1
<7>[  267.450000] ath: phy0: Reset to 2399 MHz, HT40: 0 fastcc: 0
<7>[  267.450000] ath: phy0: ah->misc_mode 0x10000004
<7>[  267.460000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<0>[  267.460000] ===MHX 9.1(ath_restart_work) starting hw_pll_work after 1000mSec
<0>[  267.460000] ===MHX7.7(ieee80211_chswitch_work)
<0>[  267.460000] ===MHX7.8(ieee80211_chswitch_work)
<0>[  267.460000] ===MHX7.9(ieee80211_chswitch_work)
<0>[  267.550000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  267.550000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  267.550000] ===MHX8.1(ieee80211_sta_process_chanswitch) IsBeacon=1
<0>[  267.550000] ===MHX8.2(ieee80211_sta_process_chanswitch)
<0>[  267.550000] ===MHX8.3(ieee80211_sta_process_chanswitch)
<0>[  267.550000] ===MHX8.4(ieee80211_sta_process_chanswitch). parse_ch_switch_ie() res=1
<0>[  267.660000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  267.660000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  267.760000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  267.760000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  267.860000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  267.860000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  267.960000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  267.960000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  268.070000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  268.070000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  268.170000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  268.170000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  268.270000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  268.270000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  268.370000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  268.370000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  268.460000] ===MHX 6.0(ath_hw_pll_rx_hang_check) pll_seqsum=1078
<0>[  268.480000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  268.480000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  268.580000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  268.580000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  268.580000] ===MHX8.1(ieee80211_sta_process_chanswitch) IsBeacon=1
<0>[  268.580000] ===MHX8.2(ieee80211_sta_process_chanswitch)
<0>[  268.580000] ===MHX8.3(ieee80211_sta_process_chanswitch)
<0>[  268.580000] ===MHX8.4(ieee80211_sta_process_chanswitch). parse_ch_switch_ie() res=0
<0>[  268.580000] ===MHX8.5(ieee80211_sta_process_chanswitch)
<0>[  268.580000] ===MHX8.6(ieee80211_sta_process_chanswitch)
<0>[  268.580000] ===MHX8.8(ieee80211_sta_process_chanswitch)
<0>[  268.580000] ===MHX8.9(ieee80211_sta_process_chanswitch)
<0>[  268.580000] ===MHX8.11(ieee80211_sta_process_chanswitch)
<0>[  268.580000] ===MHX7.1(ieee80211_chswitch_work)
<0>[  268.580000] ===MHX7.2(ieee80211_chswitch_work)
<0>[  268.580000] ===MHX7.3(ieee80211_chswitch_work)
<0>[  268.580000] ===MHX7.4(ieee80211_chswitch_work)
<0>[  268.580000] ===MHX7.5(ieee80211_chswitch_work)
<0>[  268.580000] ===MHX7.6(ieee80211_chswitch_work)
<7>[  268.580000] ath: phy0: ===MHX1.1(ath_set_channel). Set channel: 2391 MHz width: 1
<7>[  268.580000] ath: phy0: Set channel: 2391 MHz width: 1
<7>[  268.580000] ath: phy0: Reset to 2391 MHz, HT40: 0 fastcc: 0
<7>[  268.580000] ath: phy0: ah->misc_mode 0x10000004
<7>[  268.580000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<0>[  268.590000] ===MHX 9.1(ath_restart_work) starting hw_pll_work after 1000mSec
<0>[  268.590000] ===MHX7.7(ieee80211_chswitch_work)
<0>[  268.590000] ===MHX7.8(ieee80211_chswitch_work)
<0>[  268.590000] ===MHX7.9(ieee80211_chswitch_work)
<0>[  268.680000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  268.680000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  268.680000] ===MHX8.1(ieee80211_sta_process_chanswitch) IsBeacon=1
<0>[  268.680000] ===MHX8.2(ieee80211_sta_process_chanswitch)
<0>[  268.680000] ===MHX8.3(ieee80211_sta_process_chanswitch)
<0>[  268.680000] ===MHX8.4(ieee80211_sta_process_chanswitch). parse_ch_switch_ie() res=1
<0>[  268.780000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  268.780000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  268.890000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  268.890000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  268.990000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  268.990000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  269.090000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  269.090000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  269.190000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  269.190000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  269.300000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  269.300000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  269.400000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  269.400000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  269.500000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  269.500000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  269.590000] ===MHX 6.0(ath_hw_pll_rx_hang_check) pll_seqsum=1020
<0>[  269.600000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  269.600000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  269.600000] ===MHX8.1(ieee80211_sta_process_chanswitch) IsBeacon=1
<0>[  269.600000] ===MHX8.2(ieee80211_sta_process_chanswitch)
<0>[  269.600000] ===MHX8.3(ieee80211_sta_process_chanswitch)
<0>[  269.600000] ===MHX8.4(ieee80211_sta_process_chanswitch). parse_ch_switch_ie() res=0
<0>[  269.600000] ===MHX8.5(ieee80211_sta_process_chanswitch)
<0>[  269.600000] ===MHX8.6(ieee80211_sta_process_chanswitch)
<0>[  269.600000] ===MHX8.8(ieee80211_sta_process_chanswitch)
<0>[  269.600000] ===MHX8.9(ieee80211_sta_process_chanswitch)
<0>[  269.600000] ===MHX8.11(ieee80211_sta_process_chanswitch)
<0>[  269.600000] ===MHX7.1(ieee80211_chswitch_work)
<0>[  269.600000] ===MHX7.2(ieee80211_chswitch_work)
<0>[  269.600000] ===MHX7.3(ieee80211_chswitch_work)
<0>[  269.600000] ===MHX7.4(ieee80211_chswitch_work)
<0>[  269.600000] ===MHX7.5(ieee80211_chswitch_work)
<0>[  269.600000] ===MHX7.6(ieee80211_chswitch_work)
<7>[  269.600000] ath: phy0: ===MHX1.1(ath_set_channel). Set channel: 2392 MHz width: 1
<7>[  269.600000] ath: phy0: Set channel: 2392 MHz width: 1
<7>[  269.600000] ath: phy0: Reset to 2392 MHz, HT40: 0 fastcc: 0
<7>[  269.610000] ath: phy0: ah->misc_mode 0x10000004
<7>[  269.610000] ath: phy0: Enabled BB Watchdog timeout (85 ms)
<0>[  269.610000] ===MHX 9.1(ath_restart_work) starting hw_pll_work after 1000mSec
<0>[  269.610000] ===MHX7.7(ieee80211_chswitch_work)
<0>[  269.610000] ===MHX7.8(ieee80211_chswitch_work)
<0>[  269.610000] ===MHX7.9(ieee80211_chswitch_work)
<0>[  269.710000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  269.710000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  269.710000] ===MHX8.1(ieee80211_sta_process_chanswitch) IsBeacon=1
<0>[  269.710000] ===MHX8.2(ieee80211_sta_process_chanswitch)
<0>[  269.710000] ===MHX8.3(ieee80211_sta_process_chanswitch)
<0>[  269.710000] ===MHX8.4(ieee80211_sta_process_chanswitch). parse_ch_switch_ie() res=1
<0>[  269.810000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  269.810000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  269.910000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  269.910000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  270.010000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  270.010000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  270.120000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  270.120000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  270.220000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)

<0>[  270.220000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  270.320000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  270.320000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  270.420000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)

<0>[  270.420000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  270.520000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  270.520000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  270.610000] ===MHX 6.0(ath_hw_pll_rx_hang_check) pll_seqsum=1592
<0>[  270.630000] ===MHX10.1(ieee80211_sta_rx_queued_mgmt)
<0>[  270.630000] ===MHX10.2(ieee80211_sta_rx_queued_mgmt) FC=0x80
<0>[  270.630000] ===MHX8.1(ieee80211_sta_process_chanswitch) IsBeacon=1
<0>[  270.630000] ===MHX8.2(ieee80211_sta_process_chanswitch)
<0>[  270.630000] ===MHX8.3(ieee80211_sta_process_chanswitch)
<0>[  270.630000] ===MHX8.4(ieee80211_sta_process_chanswitch). parse_ch_switch_ie() res=0
<0>[  270.630000] ===MHX8.5(ieee80211_sta_process_chanswitch)
<0>[  270.630000] ===MHX8.6(ieee80211_sta_process_chanswitch)
<0>[  270.630000] ===MHX8.8(ieee80211_sta_process_chanswitch)
<0>[  270.630000] ===MHX8.9(ieee80211_sta_process_chanswitch)
<0>[  270.630000] ===MHX8.11(ieee80211_sta_process_chanswitch)


Nov 9,2016
Channel hopping in pDDL.
In AP side, run this endlessly:
#!/bin/sh

for i in $(seq 2391 2399); do
        hostapd_cli chan_switch 2 $i
        date "+%s"
        echo "Current channel $i"
        sleep 1
done
On STA side echo 0x600 > sys/kernel/debug/ieee80211/phy0/ath9k/debug to enable the CONFIG debug prints to see:
<7>[ 1089.540000] ath: phy0: Reset to 2395 MHz, HT40: 0 fastcc: 0
<7>[ 1090.560000] ath: phy0: ===MHX. Set channel: 2396 MHz width: 1
<7>[ 1090.560000] ath: phy0: Set channel: 2396 MHz width: 1
<7>[ 1090.560000] ath: phy0: Reset to 2396 MHz, HT40: 0 fastcc: 0
<7>[ 1091.580000] ath: phy0: ===MHX. Set channel: 2397 MHz width: 1
<7>[ 1091.580000] ath: phy0: Set channel: 2397 MHz width: 1
<7>[ 1091.580000] ath: phy0: Reset to 2397 MHz, HT40: 0 fastcc: 0
<7>[ 1092.610000] ath: phy0: ===MHX. Set channel: 2398 MHz width: 1
<7>[ 1092.610000] ath: phy0: Set channel: 2398 MHz width: 1
<7>[ 1092.610000] ath: phy0: Reset to 2398 MHz, HT40: 0 fastcc: 0
root@UserDevice:~# iw wlan0 station dump
Station 00:0f:92:fa:6c:45 (on wlan0)
        mhqos status:   1
        inactive time:  0 ms
        rx bytes:       1520869
        rx packets:     20593
        tx bytes:       135229
        tx packets:     1116
        tx retries:     20
        tx failed:      4
        signal:         -35 [-35] dBm
        signal avg:     -35 [-35] dBm
        noise floor:    -98 dBm
        rssi:           63
        tx bitrate:     65.0 MBit/s MCS 7
        rx bitrate:     39.0 MBit/s MCS 4
        authorized:     yes
        authenticated:  yes
        preamble:       long
        WMM/WME:        yes
        MFP:            no
        TDLS peer:      no

There is ping from a PC--->AP--->STA. Run about overnight (15hours) and haven't seen any ping lost or time > 150ms.

Oct 27,2016
pDDL+RT572 USB WiFi dongle. Shows up as wlan1. Manually modify var/run/hostapd-phy1.conf as hostapd config file. Use a PWii and a laptop as clients all connect. Set "channel" to 1,7 and 9 confirmed on PWii the frequencies are 2412, 2442 and 2452. But Channel 12,13 don't work on PWii but work with laptop. This means with pDDL driver, RT5572 still follows the standard channel definations.
Change hw_mode in hostapd-phy1.conf and errors. Can not set to 5G mode.

Checked the big ping packets issue with the standrd WiFi. When signal streng showing on RT5582 is about -37dBm, ping packet size -l 40000, still have the same "Request timed out" issue and packet loss is about 10%.

struct hostapd_data *hapd->iface->phy is a string of radio phy name, phy0 or phy1.


Oct 26,2016
About tcpdump the 802.11 monitor interface : tcpdump -i wlan1.mon -env type mgt subtype probe-req
If the specified wlan_type is mgt, then valid wlan_subtypes are:
              assoc-req,  assoc-resp,  reassoc-req,  reassoc-resp,  probe-req,
              probe-resp, beacon, atim, disassoc, auth and deauth.

If the specified wlan_type is ctl, then valid wlan_subtypes are:
              ps-poll, rts, cts, ack, cf-end and cf-end-ack.

If  the  specified  wlan_type  is data, then valid wlan_subtypes
              are: data, data-cf-ack,  data-cf-poll,  data-cf-ack-poll,  null,
              cf-ack,  cf-poll,  cf-ack-poll,  qos-data, qos-data-cf-ack, qos-
              data-cf-poll, qos-data-cf-ack-poll, qos, qos-cf-poll and qos-cf-
              ack-poll.


Oct 25,2016
/proc/sys/net/ipv4/ipfrag_time controls the fragmentation reassemble timeout. Default is 
#define IP_FRAG_TIME    (30 * HZ)               /* fragment lifetime    */

On pDDL platform, ping with large packet like "ping 192.168.168.100 -s 2000 -c 10" will cause packet loss even with -51dBm good signal. Tried with "-s 1000" or even "-s 100", which doesn't fragment the packet still have this issue randomly but lower chance. Connect an antenna to make signal -16dBm and get much less packet loss. But still have packet loss with "-s 65000". 

Ping from STA(168.2) to a PC(168.100) via AP for a "-s 2000".
1. TCP dump on STA:
root@UserDevice:~# tcpdump -i wlan0 icmp -env
tcpdump: WARNING: wlan0: no IPv4 address assigned
tcpdump: listening on wlan0, link-type EN10MB (Ethernet), capture size 65535 bytes
12:08:43.773758 00:0f:92:04:0f:59 > 00:0e:c6:89:41:be, ethertype IPv4 (0x0800), length 1514: (tos 0x0, ttl 64, id 19189, offset 0, flags [+], proto ICMP (1), length 1500)
    192.168.168.2 > 192.168.168.100: ICMP echo request, id 6600, seq 0, length 1480
12:08:43.773934 00:0f:92:04:0f:59 > 00:0e:c6:89:41:be, ethertype IPv4 (0x0800), length 562: (tos 0x0, ttl 64, id 19189, offset 1480, flags [none], proto ICMP (1), length 548)
    192.168.168.2 > 192.168.168.100: ip-proto-1



12:08:43.786646 00:0e:c6:89:41:be > 00:0f:92:04:0f:59, ethertype IPv4 (0x0800), length 1506: (tos 0x0, ttl 64, id 57879, offset 0, flags [+], proto ICMP (1), length 1492)
    192.168.168.100 > 192.168.168.2: ICMP echo reply, id 6600, seq 0, length 1472
12:08:43.787069 00:0e:c6:89:41:be > 00:0f:92:04:0f:59, ethertype IPv4 (0x0800), length 570: (tos 0x0, ttl 64, id 57879, offset 1472, flags [none], proto ICMP (1), length 556)
    192.168.168.100 > 192.168.168.2: ip-proto-1



12:08:44.774681 00:0f:92:04:0f:59 > 00:0e:c6:89:41:be, ethertype IPv4 (0x0800), length 1514: (tos 0x0, ttl 64, id 19190, offset 0, flags [+], proto ICMP (1), length 1500)
    192.168.168.2 > 192.168.168.100: ICMP echo request, id 6600, seq 1, length 1480
12:08:44.774849 00:0f:92:04:0f:59 > 00:0e:c6:89:41:be, ethertype IPv4 (0x0800), length 562: (tos 0x0, ttl 64, id 19190, offset 1480, flags [none], proto ICMP (1), length 548)
    192.168.168.2 > 192.168.168.100: ip-proto-1



12:08:45.775580 00:0f:92:04:0f:59 > 00:0e:c6:89:41:be, ethertype IPv4 (0x0800), length 1514: (tos 0x0, ttl 64, id 19191, offset 0, flags [+], proto ICMP (1), length 1500)
    192.168.168.2 > 192.168.168.100: ICMP echo request, id 6600, seq 2, length 1480
12:08:45.775748 00:0f:92:04:0f:59 > 00:0e:c6:89:41:be, ethertype IPv4 (0x0800), length 562: (tos 0x0, ttl 64, id 19191, offset 1480, flags [none], proto ICMP (1), length 548)
    192.168.168.2 > 192.168.168.100: ip-proto-1



12:08:46.776454 00:0f:92:04:0f:59 > 00:0e:c6:89:41:be, ethertype IPv4 (0x0800), length 1514: (tos 0x0, ttl 64, id 19192, offset 0, flags [+], proto ICMP (1), length 1500)
    192.168.168.2 > 192.168.168.100: ICMP echo request, id 6600, seq 3, length 1480
12:08:46.776624 00:0f:92:04:0f:59 > 00:0e:c6:89:41:be, ethertype IPv4 (0x0800), length 562: (tos 0x0, ttl 64, id 19192, offset 1480, flags [none], proto ICMP (1), length 548)
    192.168.168.2 > 192.168.168.100: ip-proto-1



12:08:46.783451 00:0e:c6:89:41:be > 00:0f:92:04:0f:59, ethertype IPv4 (0x0800), length 1506: (tos 0x0, ttl 64, id 57880, offset 0, flags [+], proto ICMP (1), length 1492)
    192.168.168.100 > 192.168.168.2: ICMP echo reply, id 6600, seq 3, length 1472
12:08:46.783890 00:0e:c6:89:41:be > 00:0f:92:04:0f:59, ethertype IPv4 (0x0800), length 570: (tos 0x0, ttl 64, id 57880, offset 1472, flags [none], proto ICMP (1), length 556)
    192.168.168.100 > 192.168.168.2: ip-proto-1

2. TCP dump on AP:

root@UserDevice:~# tcpdump -i wlan0.sta1 icmp -env
tcpdump: WARNING: wlan0.sta1: no IPv4 address assigned
tcpdump: listening on wlan0.sta1, link-type EN10MB (Ethernet), capture size 65535 bytes
15:07:15.194515 00:0f:92:04:0f:59 > 00:0e:c6:89:41:be, ethertype IPv4 (0x0800), length 1514: (tos 0
x0, ttl 64, id 19189, offset 0, flags [+], proto ICMP (1), length 1500)
    192.168.168.2 > 192.168.168.100: ICMP echo request, id 6600, seq 0, length 1480
15:07:15.195492 00:0f:92:04:0f:59 > 00:0e:c6:89:41:be, ethertype IPv4 (0x0800), length 562: (tos 0x
0, ttl 64, id 19189, offset 1480, flags [none], proto ICMP (1), length 548)
    192.168.168.2 > 192.168.168.100: ip-proto-1



15:07:15.196273 00:0e:c6:89:41:be > 00:0f:92:04:0f:59, ethertype IPv4 (0x0800), length 1506: (tos 0
x0, ttl 64, id 57879, offset 0, flags [+], proto ICMP (1), length 1492)
    192.168.168.100 > 192.168.168.2: ICMP echo reply, id 6600, seq 0, length 1472
15:07:15.196412 00:0e:c6:89:41:be > 00:0f:92:04:0f:59, ethertype IPv4 (0x0800), length 570: (tos 0x
0, ttl 64, id 57879, offset 1472, flags [none], proto ICMP (1), length 556)
    192.168.168.100 > 192.168.168.2: ip-proto-1



15:07:16.191886 00:0f:92:04:0f:59 > 00:0e:c6:89:41:be, ethertype IPv4 (0x0800), length 562: (tos 0x
0, ttl 64, id 19190, offset 1480, flags [none], proto ICMP (1), length 548)
    192.168.168.2 > 192.168.168.100: ip-proto-1



15:07:17.197182 00:0f:92:04:0f:59 > 00:0e:c6:89:41:be, ethertype IPv4 (0x0800), length 562: (tos 0x
0, ttl 64, id 19191, offset 1480, flags [none], proto ICMP (1), length 548)
    192.168.168.2 > 192.168.168.100: ip-proto-1



15:07:18.189450 00:0f:92:04:0f:59 > 00:0e:c6:89:41:be, ethertype IPv4 (0x0800), length 1514: (tos 0
x0, ttl 64, id 19192, offset 0, flags [+], proto ICMP (1), length 1500)
    192.168.168.2 > 192.168.168.100: ICMP echo request, id 6600, seq 3, length 1480
15:07:18.190428 00:0f:92:04:0f:59 > 00:0e:c6:89:41:be, ethertype IPv4 (0x0800), length 562: (tos 0x
0, ttl 64, id 19192, offset 1480, flags [none], proto ICMP (1), length 548)
    192.168.168.2 > 192.168.168.100: ip-proto-1




15:07:18.191190 00:0e:c6:89:41:be > 00:0f:92:04:0f:59, ethertype IPv4 (0x0800), length 1506: (tos 0
x0, ttl 64, id 57880, offset 0, flags [+], proto ICMP (1), length 1492)
    192.168.168.100 > 192.168.168.2: ICMP echo reply, id 6600, seq 3, length 1472
15:07:18.191348 00:0e:c6:89:41:be > 00:0f:92:04:0f:59, ethertype IPv4 (0x0800), length 570: (tos 0x
0, ttl 64, id 57880, offset 1472, flags [none], proto ICMP (1), length 556)
    192.168.168.100 > 192.168.168.2: ip-proto-1


This shows AP has missed 19190 and 19191 two ICMP requests.

Take "-s 10000" as an example, in 11G mode, -19dBm signal, "ping 192.168.168.100 -s 10000 -c 10" has 0% packet loss and time=20mS. When remove antenna and signal is -55dBm. packet loss about 10%~50% and time about 20mS too.
With "-s 40000" bigger packet size, signal -19dBm has 0% packet loss time=75mS. Without antenna signal -55dBm packet loss >50% time about 75mS too. 

Conclusion: Even with unicast, which has a phy layer retry mechanism, it doesn't guarantee the packet transmission. This explains the BlockAck's retry takes a great part in successful transmission, more important than the phy retry.

Oct 20,2016
Set up a Live555 as a streaming server. It only supports RTSP to stream .ts or .264 ES files. So transcode a mp4 file to a .ts file to stream by Live555. VLC player plays this 2-7Mbps streaming video very well.

Go back to use VLC streaming server to stream this TS file and get much better result than before. This means, TS is easier to stream out but the files with containers need to demux and that fatigured the VLC streaming server. In high bitrate like 6Mbps, the VLC server take too much time to demux. Use TS format will be much better.

Oct 19,2016
Use VMWare + Ubuntu Mate15 as VLC client, wired connection to a laptop that runs as VLC server. UDP stream still much artifacts the same as a Window PC as a client. Video source is a 6Mbps WMV video but the link iperf t/p is about 16Mbps.

Noticed the sender's WLAN LED flashed not fluently. The VLC streaming server is a suspect. Choose RTP TS transmit on VLC server and Wireshark the Ethernet port of the sender PC. When we analyze the RTP stream, we always see about 40% packet loss on sender's ethernet port, which points to the VLC streaming server's fail to transmit RTP packets.

Another test confirmed this idea. Run Wireshark on both sender and recever PC to capture the RTP stream and analyze it. Synchronize the start-stop capture on both PCs, total capture about 20 seconds. Then analyze the RTP stream RTP sequence number. I found both side show same about 46% packet loss. When looking into the packet sequence number, I found both sides lose the same sequenc# packets. This means, the VLC streaming server doesn't transmit some RTP packets while the VLC client has reveived all packets it supposed to receive. 

The packet loss is about 1 packet loss per 60 packets on VLC server side, and the VLC client follows this pattern.

This explains why direct Ethernet wired connection for a 6Mbps stream also has much artifacts, even localhost streaming too. That is because the VLC streaming server has issues. Why the VLC server can not stream out a 6Mbps video source properly with RTP, and all other protocols as well, need to dig in.

When the VLC streaming server's local display is turned off, the packet loss on both sides drop to 37.6%, about 1 packet loss per 80 packets. Still the VLC serve loses packets.

Oct 13, 2016
On pDDL, .ko modules needed:
1. Host mode: 
root@UserDevice:~# lsmod | grep usb
usb_common              1160  1 usbcore
usbcore               109409  2 ehci_platform
root@UserDevice:~# lsmod | grep hci
ehci_hcd               30796  1 ehci_platform
ehci_platform           1872  0 
usbcore               109409  2 ehci_platform
root@UserDevice:~# lsusb
Bus 001 Device 001: ID 1d6b:0002
root@UserDevice:~# 

2. Device mode:
usb-common ---> udc-core.ko--->ci_hdrc.ko-->ci13xxx_ar933x.ko-->libcomposite.ko--->u_serial.ko-->usb_f_acm.ko--->ls -al > 1--->insmod lib/modules/3.10.36/g_multi.ko file=1.

Oct 7,2016
AP(168.1)		~~~~~~~~~~~~	STA(168.2)	---------------------------------	PC2(168.100)
AP-BR-MAC=00:0F:92:02:F7:F0		STA-BR-MAC=	00:0F:92:FA:6B:B1				PC2-MAC=00:0E:C6:89:41:BE
AP-WMAC=00:0F:92:FA:6C:45		STA-WMAC=00:0F:92:FA:6B:B1

1. Test WDS=0 but flush EBtables rules manually so that ARPNAT doesn't work. No ARP entries yet. Ping from .100 to .1 -c 2 ping 2 times.
/////////// ON .1(AP)
<7>[ 2830.720000] ath: phy0: transmitting packet, skb: 83353300
<7>[ 2830.720000] ath: phy0: A1=000ec68941be,A2=000f92fa6c45,A3=000f92fa6c45		// This packet is dropped by AP driver for its wrong TA=PC2-MAC.wlan0 interface cannt see it. Only AP-WMAC---STA-WMAC pair works in wifi driver.
<7>[ 2830.720000] ath: phy0: ath_tx_start: q=0, hwq_to_acq[0]=3, txq->stopped=0 
<7>[ 2830.720000] ath: phy0: ath_tx_start: txq->pending_frames=0, sc->tx.txq_max_pending[hwq_to_acq[0]]=123 
<7>[ 2830.720000] ath: phy0: qnum: 0, txq depth: 0
<7>[ 2830.720000] ath: phy0: TXDP[0] = 3235200 (a3235200)
<0>[ 2830.720000] ===MHX(ath_tx_process_buffer) 2.1
<0>[ 2830.720000] ===MHX(ath_tx_process_buffer) 2.2
<0>[ 2830.720000] === MHXath_tx_complete_buf: 1.1 
<0>[ 2830.720000] === MHXath_tx_complete_buf: 1.2 
<0>[ 2830.720000] === MHXath_tx_complete_buf: 1.3 
<0>[ 2830.720000] === MHXath_tx_complete_buf: 1.5 
<7>[ 2830.720000] ath: phy0: TX complete: skb: 83353300
<7>[ 2830.720000] ath: phy0: ath_txq_skb_done: fi->txq=0, q=3, txq->stopped=0 
<7>[ 2830.720000] ath: phy0: ath_txq_skb_done: txq->pending_frames=0, sc->tx.txq_max_pending[3]=123
 
<0>[ 2830.720000] === MHXath_tx_complete_buf: 1.6 
<7>[ 2831.720000] ath: phy0: transmitting packet, skb: 83353780
<7>[ 2831.720000] ath: phy0: A1=000ec68941be,A2=000f92fa6c45,A3=000f92fa6c45
<7>[ 2831.720000] ath: phy0: ath_tx_start: q=0, hwq_to_acq[0]=3, txq->stopped=0 
<7>[ 2831.720000] ath: phy0: ath_tx_start: txq->pending_frames=0, sc->tx.txq_max_pending[hwq_to_acq[0]]=123 
<7>[ 2831.720000] ath: phy0: qnum: 0, txq depth: 0
<7>[ 2831.720000] ath: phy0: TXDP[0] = 3235280 (a3235280)
<0>[ 2831.720000] ===MHX(ath_tx_process_buffer) 2.1
<0>[ 2831.720000] ===MHX(ath_tx_process_buffer) 2.2
<0>[ 2831.720000] === MHXath_tx_complete_buf: 1.1 
<0>[ 2831.720000] === MHXath_tx_complete_buf: 1.2 
<0>[ 2831.720000] === MHXath_tx_complete_buf: 1.3 
<0>[ 2831.720000] === MHXath_tx_complete_buf: 1.5 
<7>[ 2831.720000] ath: phy0: TX complete: skb: 83353780
<7>[ 2831.720000] ath: phy0: ath_txq_skb_done: fi->txq=0, q=3, txq->stopped=0 
<7>[ 2831.720000] ath: phy0: ath_txq_skb_done: txq->pending_frames=0, sc->tx.txq_max_pending[3]=123
 
<0>[ 2831.720000] === MHXath_tx_complete_buf: 1.6 
<7>[ 2832.720000] ath: phy0: transmitting packet, skb: 833530c0
<7>[ 2832.720000] ath: phy0: A1=000ec68941be,A2=000f92fa6c45,A3=000f92fa6c45
<7>[ 2832.720000] ath: phy0: ath_tx_start: q=0, hwq_to_acq[0]=3, txq->stopped=0 
<7>[ 2832.720000] ath: phy0: ath_tx_start: txq->pending_frames=0, sc->tx.txq_max_pending[hwq_to_acq[0]]=123 
<7>[ 2832.720000] ath: phy0: qnum: 0, txq depth: 0
<7>[ 2832.720000] ath: phy0: TXDP[0] = 3235300 (a3235300)
<0>[ 2832.720000] ===MHX(ath_tx_process_buffer) 2.1
<0>[ 2832.720000] ===MHX(ath_tx_process_buffer) 2.2
<0>[ 2832.720000] === MHXath_tx_complete_buf: 1.1 
<0>[ 2832.720000] === MHXath_tx_complete_buf: 1.2 
<0>[ 2832.720000] === MHXath_tx_complete_buf: 1.3 
<0>[ 2832.720000] === MHXath_tx_complete_buf: 1.5 
<7>[ 2832.720000] ath: phy0: TX complete: skb: 833530c0
<7>[ 2832.720000] ath: phy0: ath_txq_skb_done: fi->txq=0, q=3, txq->stopped=0 
<7>[ 2832.720000] ath: phy0: ath_txq_skb_done: txq->pending_frames=0, sc->tx.txq_max_pending[3]=123
 
<0>[ 2832.720000] === MHXath_tx_complete_buf: 1.6 

///////////ON 168.2(STA)
<0>[ 2827.130000] ==MHX10.2(ieee80211_subif_start_xmit)A1=000f92fa6c45,A2=000ec68941be,A3=ffffffffffff	//ARP req. RA=AP-WMAC is correct but TA=PC2-MAC.
<7>[ 2827.130000] ath: phy0: transmitting packet, skb: 83359f00
<7>[ 2827.130000] ath: phy0: A1=000f92fa6c45,A2=000ec68941be,A3=ffffffffffff
<7>[ 2827.130000] ath: phy0: ath_tx_start: q=1, hwq_to_acq[1]=2, txq->stopped=0 
<7>[ 2827.130000] ath: phy0: ath_tx_start: txq->pending_frames=0, sc->tx.txq_max_pending[hwq_to_acq[1]]=123 
<7>[ 2827.130000] ath: phy0: ath_tx_start: q=1, tid->tidno=0 
<0>[ 2827.130000] ===MHX(ath_tx_start) 6.1
<0>[ 2827.130000] ===MHX(ath_tx_sched_aggr)7.1
<0>[ 2827.130000] ===MHX(ath_tx_sched_aggr)7.2
<0>[ 2827.130000] ===MHX(ath_tx_get_tid_subframe)8.1
<0>[ 2827.130000] ===MHX(ath_tx_get_tid_subframe)8.2
<0>[ 2827.130000] ===MHX(ath_tx_get_tid_subframe)8.3
<0>[ 2827.130000] ===MHX(ath_tx_get_tid_subframe)8.4

<0>[ 2827.130000] ===MHX(ath_tx_sched_aggr)7.3
<0>[ 2827.130000] ===MHX(ath_tx_sched_aggr)7.4
<0>[ 2827.130000] ===MHX(ath_tx_get_tid_subframe)8.1
<0>[ 2827.130000] ===MHX(ath_tx_get_tid_subframe)8.9
<0>[ 2827.130000] ===MHX(ath_tx_sched_aggr)7.5
<7>[ 2827.130000] ath: phy0: qnum: 1, txq depth: 0
<7>[ 2827.130000] ath: phy0: TXDP[1] = 3264780 (a3264780)
<0>[ 2827.130000] ===MHX(ath_tx_sched_aggr)7.6
<0>[ 2827.130000] ===MHX(ath_tx_process_buffer) 2.1
<0>[ 2827.130000] ===MHX(ath_tx_process_buffer) 2.2
<0>[ 2827.130000] === MHXath_tx_complete_buf: 1.1 
<0>[ 2827.130000] === MHXath_tx_complete_buf: 1.2 
<0>[ 2827.130000] === MHXath_tx_complete_buf: 1.3 
<0>[ 2827.130000] === MHXath_tx_complete_buf: 1.5 
<7>[ 2827.130000] ath: phy0: TX complete: skb: 83359f00
<7>[ 2827.130000] ath: phy0: ath_txq_skb_done: fi->txq=1, q=2, txq->stopped=0 
<7>[ 2827.130000] ath: phy0: ath_txq_skb_done: txq->pending_frames=0, sc->tx.txq_max_pending[2]=123 
<0>[ 2827.130000] === MHXath_tx_complete_buf: 1.6 
<0>[ 2828.130000] ==MHX10.2(ieee80211_subif_start_xmit)A1=000f92fa6c45,A2=000ec68941be,A3=ffffffffffff
<7>[ 2828.130000] ath: phy0: transmitting packet, skb: 8319c3c0
<7>[ 2828.130000] ath: phy0: A1=000f92fa6c45,A2=000ec68941be,A3=ffffffffffff
<7>[ 2828.130000] ath: phy0: ath_tx_start: q=1, hwq_to_acq[1]=2, txq->stopped=0 
<7>[ 2828.130000] ath: phy0: ath_tx_start: txq->pending_frames=0, sc->tx.txq_max_pending[hwq_to_acq[1]]=123 
<7>[ 2828.130000] ath: phy0: ath_tx_start: q=1, tid->tidno=0 
<0>[ 2828.130000] ===MHX(ath_tx_start) 6.1
<0>[ 2828.130000] ===MHX(ath_tx_sched_aggr)7.1
<0>[ 2828.130000] ===MHX(ath_tx_sched_aggr)7.2
<0>[ 2828.130000] ===MHX(ath_tx_get_tid_subframe)8.1
<0>[ 2828.130000] ===MHX(ath_tx_get_tid_subframe)8.2
<0>[ 2828.130000] ===MHX(ath_tx_get_tid_subframe)8.3
<0>[ 2828.130000] ===MHX(ath_tx_get_tid_subframe)8.4
<0>[ 2828.130000] ===MHX(ath_tx_sched_aggr)7.3
<0>[ 2828.130000] ===MHX(ath_tx_sched_aggr)7.4
<0>[ 2828.130000] ===MHX(ath_tx_get_tid_subframe)8.1
<0>[ 2828.130000] ===MHX(ath_tx_get_tid_subframe)8.9
<0>[ 2828.130000] ===MHX(ath_tx_sched_aggr)7.5
<7>[ 2828.130000] ath: phy0: qnum: 1, txq depth: 0
<7>[ 2828.130000] ath: phy0: TXDP[1] = 3264800 (a3264800)
<0>[ 2828.130000] ===MHX(ath_tx_sched_aggr)7.6
<0>[ 2828.130000] ===MHX(ath_tx_process_buffer) 2.1
<0>[ 2828.130000] ===MHX(ath_tx_process_buffer) 2.2
<0>[ 2828.130000] === MHXath_tx_complete_buf: 1.1 
<0>[ 2828.130000] === MHXath_tx_complete_buf: 1.2 
<0>[ 2828.130000] === MHXath_tx_complete_buf: 1.3 
<0>[ 2828.130000] === MHXath_tx_complete_buf: 1.5 
<7>[ 2828.130000] ath: phy0: TX complete: skb: 8319c3c0
<7>[ 2828.130000] ath: phy0: ath_txq_skb_done: fi->txq=1, q=2, txq->stopped=0 
<7>[ 2828.130000] ath: phy0: ath_txq_skb_done: txq->pending_frames=0, sc->tx.txq_max_pending[2]=123 
<0>[ 2828.130000] === MHXath_tx_complete_buf: 1.6 
<0>[ 2829.130000] ==MHX10.2(ieee80211_subif_start_xmit)A1=000f92fa6c45,A2=000ec68941be,A3=ffffffffffff
<7>[ 2829.130000] ath: phy0: transmitting packet, skb: 832473c0
<7>[ 2829.130000] ath: phy0: A1=000f92fa6c45,A2=000ec68941be,A3=ffffffffffff
<7>[ 2829.130000] ath: phy0: ath_tx_start: q=1, hwq_to_acq[1]=2, txq->stopped=0 
<7>[ 2829.130000] ath: phy0: ath_tx_start: txq->pending_frames=0, sc->tx.txq_max_pending[hwq_to_acq[1]]=123 
<7>[ 2829.130000] ath: phy0: ath_tx_start: q=1, tid->tidno=0 
<0>[ 2829.130000] ===MHX(ath_tx_start) 6.1
<0>[ 2829.130000] ===MHX(ath_tx_sched_aggr)7.1
<0>[ 2829.130000] ===MHX(ath_tx_sched_aggr)7.2
<0>[ 2829.130000] ===MHX(ath_tx_get_tid_subframe)8.1
<0>[ 2829.130000] ===MHX(ath_tx_get_tid_subframe)8.2
<0>[ 2829.130000] ===MHX(ath_tx_get_tid_subframe)8.3
<0>[ 2829.130000] ===MHX(ath_tx_get_tid_subframe)8.4
<0>[ 2829.130000] ===MHX(ath_tx_sched_aggr)7.3
<0>[ 2829.130000] ===MHX(ath_tx_sched_aggr)7.4
<0>[ 2829.130000] ===MHX(ath_tx_get_tid_subframe)8.1
<0>[ 2829.130000] ===MHX(ath_tx_get_tid_subframe)8.9
<0>[ 2829.130000] ===MHX(ath_tx_sched_aggr)7.5
<7>[ 2829.130000] ath: phy0: qnum: 1, txq depth: 0
<7>[ 2829.130000] ath: phy0: TXDP[1] = 3264880 (a3264880)
<0>[ 2829.130000] ===MHX(ath_tx_sched_aggr)7.6
<0>[ 2829.130000] ===MHX(ath_tx_process_buffer) 2.1
<0>[ 2829.130000] ===MHX(ath_tx_process_buffer) 2.2
<0>[ 2829.130000] === MHXath_tx_complete_buf: 1.1 
<0>[ 2829.130000] === MHXath_tx_complete_buf: 1.2 
<0>[ 2829.130000] === MHXath_tx_complete_buf: 1.3 
<0>[ 2829.130000] === MHXath_tx_complete_buf: 1.5 
<7>[ 2829.130000] ath: phy0: TX complete: skb: 832473c0
<7>[ 2829.130000] ath: phy0: ath_txq_skb_done: fi->txq=1, q=2, txq->stopped=0 
<7>[ 2829.130000] ath: phy0: ath_txq_skb_done: txq->pending_frames=0, sc->tx.txq_max_pending[2]=123 
<0>[ 2829.130000] === MHXath_tx_complete_buf: 1.6 

root@UserDevice:~# tcpdump -i wlan0 -xen 
tcpdump: WARNING: wlan0: no IPv4 address assigned
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on wlan0, link-type EN10MB (Ethernet), capture size 65535 bytes
09:18:26.437558 00:0e:c6:89:41:be > 00:0f:92:02:f7:f0, ethertype IPv4 (0x0800), length 9	// PC2 still remembers the ARP about .100@AP-BR-MAC. Directly try it. ICMP req1
8: 192.168.168.100 > 192.168.168.1: ICMP echo request, id 59158, seq 1, length 64
        0x0000:  4500 0054 0000 4000 4001 68f2 c0a8 a864
        0x0010:  c0a8 a801 0800 abd6 e716 0001 ebe6 f757
        0x0020:  8fcf 0700 0809 0a0b 0c0d 0e0f 1011 1213
        0x0030:  1415 1617 1819 1a1b 1c1d 1e1f 2021 2223

        0x0040:  2425 2627 2829 2a2b 2c2d 2e2f 3031 3233
        0x0050:  3435 3637
09:18:27.446611 00:0e:c6:89:41:be > 00:0f:92:02:f7:f0, ethertype IPv4 (0x0800), length 9	// ICMP req2
8: 192.168.168.100 > 192.168.168.1: ICMP echo request, id 59158, seq 2, length 64
        0x0000:  4500 0054 0000 4000 4001 68f2 c0a8 a864
        0x0010:  c0a8 a801 0800 2cb2 e716 0002 ece6 f757
        0x0020:  0df3 0700 0809 0a0b 0c0d 0e0f 1011 1213
        0x0030:  1415 1617 1819 1a1b 1c1d 1e1f 2021 2223
        0x0040:  2425 2627 2829 2a2b 2c2d 2e2f 3031 3233
        0x0050:  3435 3637
09:18:31.436430 00:0e:c6:89:41:be > 00:0f:92:02:f7:f0, ethertype ARP (0x0806), length 60	// No ICMP reply. ARP req1
: Request who-has 192.168.168.1 tell 192.168.168.100, length 46
        0x0000:  0001 0800 0604 0001 000e c689 41be c0a8
        0x0010:  a864 0000 0000 0000 c0a8 a801 0000 0000
        0x0020:  0000 0000 0000 0000 0000 0000 0000
09:18:32.436413 00:0e:c6:89:41:be > 00:0f:92:02:f7:f0, ethertype ARP (0x0806), length 60
: Request who-has 192.168.168.1 tell 192.168.168.100, length 46
        0x0000:  0001 0800 0604 0001 000e c689 41be c0a8
        0x0010:  a864 0000 0000 0000 c0a8 a801 0000 0000
        0x0020:  0000 0000 0000 0000 0000 0000 0000
09:18:33.436341 00:0e:c6:89:41:be > 00:0f:92:02:f7:f0, ethertype ARP (0x0806), length 60
: Request who-has 192.168.168.1 tell 192.168.168.100, length 46
        0x0000:  0001 0800 0604 0001 000e c689 41be c0a8
        0x0010:  a864 0000 0000 0000 c0a8 a801 0000 0000
        0x0020:  0000 0000 0000 0000 0000 0000 0000

later when ARP expires:
09:18:30.811234 00:0e:c6:89:41:be > ff:ff:ff:ff:ff:ff, ethertype ARP (0x0806), length 60
: Ethernet (len 6), IPv4 (len 4), Request who-has 192.168.168.1 tell 192.168.168.100, le
ngth 46
        0x0000:  0001 0800 0604 0001 000e c689 41be c0a8
        0x0010:  a864 0000 0000 0000 c0a8 a801 0000 0000
        0x0020:  0000 0000 0000 0000 0000 0000 0000
09:18:31.811231 00:0e:c6:89:41:be > ff:ff:ff:ff:ff:ff, ethertype ARP (0x0806), length 60
: Ethernet (len 6), IPv4 (len 4), Request who-has 192.168.168.1 tell 192.168.168.100, le
ngth 46
        0x0000:  0001 0800 0604 0001 000e c689 41be c0a8
        0x0010:  a864 0000 0000 0000 c0a8 a801 0000 0000
        0x0020:  0000 0000 0000 0000 0000 0000 0000
09:18:32.811259 00:0e:c6:89:41:be > ff:ff:ff:ff:ff:ff, ethertype ARP (0x0806), length 60
: Ethernet (len 6), IPv4 (len 4), Request who-has 192.168.168.1 tell 192.168.168.100, le
ngth 46
        0x0000:  0001 0800 0604 0001 000e c689 41be c0a8
        0x0010:  a864 0000 0000 0000 c0a8 a801 0000 0000
        0x0020:  0000 0000 0000 0000 0000 0000 0000

2. Test WDS=0 in normal case. ARPNAT runs only in STA. Ping from .100 to .1 -c 2.

////////ON .1(AP)
<0>[ 4133.160000] ==MHX10.2(ieee80211_subif_start_xmit)A1=000f92fa6bb1,A2=000f92fa6c45,A3=000f9202f7f0		// RA=STA-MAC, TA=AP-WMAC. ARP reply
<7>[ 4133.160000] ath: phy0: transmitting packet, skb: 82f0a180
<7>[ 4133.160000] ath: phy0: A1=000f92fa6bb1,A2=000f92fa6c45,A3=000f9202f7f0
<7>[ 4133.160000] ath: phy0: ath_tx_start: q=1, hwq_to_acq[1]=2, txq->stopped=0 
<7>[ 4133.160000] ath: phy0: ath_tx_start: txq->pending_frames=0, sc->tx.txq_max_pending[hwq_to_acq[1]]=123 
<7>[ 4133.160000] ath: phy0: ath_tx_start: q=1, tid->tidno=0 
<0>[ 4133.160000] ===MHX(ath_tx_start) 6.1
<0>[ 4133.160000] ===MHX(ath_tx_sched_aggr)7.1
<0>[ 4133.160000] ===MHX(ath_tx_sched_aggr)7.2
<0>[ 4133.160000] ===MHX(ath_tx_get_tid_subframe)8.1
<0>[ 4133.160000] ===MHX(ath_tx_get_tid_subframe)8.2
<0>[ 4133.160000] ===MHX(ath_tx_get_tid_subframe)8.3
<0>[ 4133.160000] ===MHX(ath_tx_get_tid_subframe)8.4
<0>[ 4133.160000] ===MHX(ath_tx_sched_aggr)7.3
<0>[ 4133.160000] ===MHX(ath_tx_sched_aggr)7.4
<0>[ 4133.160000] ===MHX(ath_tx_get_tid_subframe)8.1
<0>[ 4133.160000] ===MHX(ath_tx_get_tid_subframe)8.9
<0>[ 4133.160000] ===MHX(ath_tx_sched_aggr)7.5
<7>[ 4133.160000] ath: phy0: qnum: 1, txq depth: 0
<7>[ 4133.160000] ath: phy0: TXDP[1] = 3236c00 (a3236c00)
<0>[ 4133.160000] ===MHX(ath_tx_sched_aggr)7.6
<0>[ 4133.160000] ===MHX(ath_tx_process_buffer) 2.1
<0>[ 4133.160000] ===MHX(ath_tx_process_buffer) 2.2
<0>[ 4133.160000] === MHXath_tx_complete_buf: 1.1 
<0>[ 4133.160000] === MHXath_tx_complete_buf: 1.2 
<0>[ 4133.160000] === MHXath_tx_complete_buf: 1.3 
<0>[ 4133.160000] === MHXath_tx_complete_buf: 1.5 
<7>[ 4133.160000] ath: phy0: TX complete: skb: 82f0a180
<7>[ 4133.160000] ath: phy0: ath_txq_skb_done: fi->txq=1, q=2, txq->stopped=0 
<7>[ 4133.160000] ath: phy0: ath_txq_skb_done: txq->pending_frames=0, sc->tx.txq_max_pending[2]=123
 
<0>[ 4133.160000] === MHXath_tx_complete_buf: 1.6 
<0>[ 4133.160000] ==MHX10.2(ieee80211_subif_start_xmit)A1=000f92fa6bb1,A2=000f92fa6c45,A3=000f9202f7f0		//ICMP reply 1
<7>[ 4133.160000] ath: phy0: transmitting packet, skb: 83353180
<7>[ 4133.160000] ath: phy0: A1=000f92fa6bb1,A2=000f92fa6c45,A3=000f9202f7f0
<7>[ 4133.160000] ath: phy0: ath_tx_start: q=1, hwq_to_acq[1]=2, txq->stopped=0 
<7>[ 4133.160000] ath: phy0: ath_tx_start: txq->pending_frames=0, sc->tx.txq_max_pending[hwq_to_acq[1]]=123 
<7>[ 4133.160000] ath: phy0: ath_tx_start: q=1, tid->tidno=0 
<0>[ 4133.160000] ===MHX(ath_tx_start) 6.1
<0>[ 4133.160000] ===MHX(ath_tx_sched_aggr)7.1
<0>[ 4133.160000] ===MHX(ath_tx_sched_aggr)7.2
<0>[ 4133.160000] ===MHX(ath_tx_get_tid_subframe)8.1
<0>[ 4133.160000] ===MHX(ath_tx_get_tid_subframe)8.2
<0>[ 4133.160000] ===MHX(ath_tx_get_tid_subframe)8.3
<0>[ 4133.160000] ===MHX(ath_tx_get_tid_subframe)8.4
<0>[ 4133.160000] ===MHX(ath_tx_sched_aggr)7.3
<0>[ 4133.160000] ===MHX(ath_tx_sched_aggr)7.4
<0>[ 4133.160000] ===MHX(ath_tx_get_tid_subframe)8.1
<0>[ 4133.160000] ===MHX(ath_tx_get_tid_subframe)8.9
<0>[ 4133.160000] ===MHX(ath_tx_sched_aggr)7.5
<7>[ 4133.160000] ath: phy0: qnum: 1, txq depth: 0
<7>[ 4133.160000] ath: phy0: TXDP[1] = 3236c80 (a3236c80)
<0>[ 4133.160000] ===MHX(ath_tx_sched_aggr)7.6
<0>[ 4133.160000] ===MHX(ath_tx_process_buffer) 2.1
<0>[ 4133.160000] ===MHX(ath_tx_process_buffer) 2.2
<0>[ 4133.160000] === MHXath_tx_complete_buf: 1.1 
<0>[ 4133.160000] === MHXath_tx_complete_buf: 1.2 
<0>[ 4133.160000] === MHXath_tx_complete_buf: 1.3 
<0>[ 4133.160000] === MHXath_tx_complete_buf: 1.5 
<7>[ 4133.160000] ath: phy0: TX complete: skb: 83353180
<7>[ 4133.160000] ath: phy0: ath_txq_skb_done: fi->txq=1, q=2, txq->stopped=0 
<7>[ 4133.160000] ath: phy0: ath_txq_skb_done: txq->pending_frames=0, sc->tx.txq_max_pending[2]=123
 
<0>[ 4133.160000] === MHXath_tx_complete_buf: 1.6 
<0>[ 4134.160000] ==MHX10.2(ieee80211_subif_start_xmit)A1=000f92fa6bb1,A2=000f92fa6c45,A3=000f9202f7f0		// ICMP reply2
<7>[ 4134.160000] ath: phy0: transmitting packet, skb: 833536c0
<7>[ 4134.160000] ath: phy0: A1=000f92fa6bb1,A2=000f92fa6c45,A3=000f9202f7f0
<7>[ 4134.160000] ath: phy0: ath_tx_start: q=1, hwq_to_acq[1]=2, txq->stopped=0 
<7>[ 4134.160000] ath: phy0: ath_tx_start: txq->pending_frames=0, sc->tx.txq_max_pending[hwq_to_acq[1]]=123 
<7>[ 4134.160000] ath: phy0: ath_tx_start: q=1, tid->tidno=0 
<0>[ 4134.160000] ===MHX(ath_tx_start) 6.1
<0>[ 4134.160000] ===MHX(ath_tx_sched_aggr)7.1
<0>[ 4134.160000] ===MHX(ath_tx_sched_aggr)7.2
<0>[ 4134.160000] ===MHX(ath_tx_get_tid_subframe)8.1
<0>[ 4134.160000] ===MHX(ath_tx_get_tid_subframe)8.2
<0>[ 4134.160000] ===MHX(ath_tx_get_tid_subframe)8.3
<0>[ 4134.160000] ===MHX(ath_tx_get_tid_subframe)8.4
<0>[ 4134.160000] ===MHX(ath_tx_sched_aggr)7.3
<0>[ 4134.160000] ===MHX(ath_tx_sched_aggr)7.4
<0>[ 4134.160000] ===MHX(ath_tx_get_tid_subframe)8.1
<0>[ 4134.160000] ===MHX(ath_tx_get_tid_subframe)8.9
<0>[ 4134.160000] ===MHX(ath_tx_sched_aggr)7.5
<7>[ 4134.160000] ath: phy0: qnum: 1, txq depth: 0
<7>[ 4134.160000] ath: phy0: TXDP[1] = 3236d00 (a3236d00)
<0>[ 4134.160000] ===MHX(ath_tx_sched_aggr)7.6
<0>[ 4134.160000] ===MHX(ath_tx_process_buffer) 2.1
<0>[ 4134.160000] ===MHX(ath_tx_process_buffer) 2.2
<0>[ 4134.160000] === MHXath_tx_complete_buf: 1.1 
<0>[ 4134.160000] === MHXath_tx_complete_buf: 1.2 
<0>[ 4134.160000] === MHXath_tx_complete_buf: 1.3 
<0>[ 4134.160000] === MHXath_tx_complete_buf: 1.5 
<7>[ 4134.160000] ath: phy0: TX complete: skb: 833536c0
<7>[ 4134.160000] ath: phy0: ath_txq_skb_done: fi->txq=1, q=2, txq->stopped=0 
<7>[ 4134.160000] ath: phy0: ath_txq_skb_done: txq->pending_frames=0, sc->tx.txq_max_pending[2]=123
 
<0>[ 4134.160000] === MHXath_tx_complete_buf: 1.6 
<7>[ 4134.160000] wlan0: Open BA session requested for 00:0f:92:fa:6b:b1 tid 0
<7>[ 4134.160000] wlan0: activated addBA response timer on 00:0f:92:fa:6b:b1 tid 0
<7>[ 4134.160000] ath: phy0: transmitting packet, skb: 833530c0
<7>[ 4134.160000] ath: phy0: A1=000f92fa6bb1,A2=000f92fa6c45,A3=000f92fa6c45
<7>[ 4134.160000] ath: phy0: ath_tx_start: q=0, hwq_to_acq[0]=3, txq->stopped=0 
<7>[ 4134.160000] ath: phy0: ath_tx_start: txq->pending_frames=0, sc->tx.txq_max_pending[hwq_to_acq[0]]=123 
<7>[ 4134.160000] ath: phy0: qnum: 0, txq depth: 0
<7>[ 4134.160000] ath: phy0: TXDP[0] = 3236d80 (a3236d80)
<0>[ 4134.160000] ===MHX(ath_tx_process_buffer) 2.1
<0>[ 4134.160000] ===MHX(ath_tx_process_buffer) 2.2
<0>[ 4134.160000] === MHXath_tx_complete_buf: 1.1 
<0>[ 4134.160000] === MHXath_tx_complete_buf: 1.2 
<0>[ 4134.160000] === MHXath_tx_complete_buf: 1.3 
<0>[ 4134.160000] === MHXath_tx_complete_buf: 1.5 
<7>[ 4134.160000] ath: phy0: TX complete: skb: 833530c0
<7>[ 4134.160000] ath: phy0: ath_txq_skb_done: fi->txq=0, q=3, txq->stopped=0 
<7>[ 4134.160000] ath: phy0: ath_txq_skb_done: txq->pending_frames=0, sc->tx.txq_max_pending[3]=123
 
<0>[ 4134.160000] === MHXath_tx_complete_buf: 1.6 
<7>[ 4134.160000] wlan0: Rx A-MPDU request on 00:0f:92:fa:6b:b1 tid 0 result 0
<7>[ 4134.160000] ath: phy0: transmitting packet, skb: 83353240
<7>[ 4134.160000] ath: phy0: A1=000f92fa6bb1,A2=000f92fa6c45,A3=000f92fa6c45
<7>[ 4134.160000] ath: phy0: ath_tx_start: q=0, hwq_to_acq[0]=3, txq->stopped=0 
<7>[ 4134.160000] ath: phy0: ath_tx_start: txq->pending_frames=0, sc->tx.txq_max_pending[hwq_to_acq[0]]=123 
<7>[ 4134.160000] ath: phy0: qnum: 0, txq depth: 0
<7>[ 4134.160000] ath: phy0: TXDP[0] = 3236e00 (a3236e00)
<7>[ 4134.160000] wlan0: switched off addBA timer for 00:0f:92:fa:6b:b1 tid 0
<7>[ 4134.160000] wlan0: Aggregation is on for 00:0f:92:fa:6b:b1 tid 0
<0>[ 4134.160000] ===MHX(ath_tx_process_buffer) 2.1
<0>[ 4134.160000] ===MHX(ath_tx_process_buffer) 2.2
<0>[ 4134.160000] === MHXath_tx_complete_buf: 1.1 
<0>[ 4134.160000] === MHXath_tx_complete_buf: 1.2 
<0>[ 4134.160000] === MHXath_tx_complete_buf: 1.3 
<0>[ 4134.160000] === MHXath_tx_complete_buf: 1.5 
<7>[ 4134.160000] ath: phy0: TX complete: skb: 83353240
<7>[ 4134.160000] ath: phy0: ath_txq_skb_done: fi->txq=0, q=3, txq->stopped=0 
<7>[ 4134.160000] ath: phy0: ath_txq_skb_done: txq->pending_frames=0, sc->tx.txq_max_pending[3]=123
 
<0>[ 4134.160000] === MHXath_tx_complete_buf: 1.6 
<0>[ 4138.170000] ==MHX10.2(ieee80211_subif_start_xmit)A1=000f92fa6bb1,A2=000f92fa6c45,A3=000f9202f7f0		// ICMP reply2??????
<7>[ 4138.170000] ath: phy0: transmitting packet, skb: 83353180
<7>[ 4138.170000] ath: phy0: A1=000f92fa6bb1,A2=000f92fa6c45,A3=000f9202f7f0
<7>[ 4138.170000] ath: phy0: ath_tx_start: q=1, hwq_to_acq[1]=2, txq->stopped=0 
<7>[ 4138.170000] ath: phy0: ath_tx_start: txq->pending_frames=0, sc->tx.txq_max_pending[hwq_to_acq
[1]]=123 
<7>[ 4138.170000] ath: phy0: ath_tx_start: q=1, tid->tidno=0 
<0>[ 4138.170000] ===MHX(ath_tx_start) 6.1
<0>[ 4138.170000] ===MHX(ath_tx_sched_aggr)7.1
<0>[ 4138.170000] ===MHX(ath_tx_sched_aggr)7.2
<0>[ 4138.170000] ===MHX(ath_tx_get_tid_subframe)8.1
<0>[ 4138.170000] ===MHX(ath_tx_get_tid_subframe)8.2
<0>[ 4138.170000] ===MHX(ath_tx_get_tid_subframe)8.3
<0>[ 4138.170000] ===MHX(ath_tx_get_tid_subframe)8.5. tid->seq_start=3, tid->baw_size=64, seqno=3
<0>[ 4138.170000] ===MHX(ath_tx_get_tid_subframe)8.6
<0>[ 4138.170000] ===MHX(ath_tx_get_tid_subframe)8.8
<0>[ 4138.170000] ===MHX(ath_tx_sched_aggr)7.3
<0>[ 4138.170000] ===MHX(ath_tx_sched_aggr)7.4
<0>[ 4138.170000] ===MHX(ath_tx_get_tid_subframe)8.1
<0>[ 4138.170000] ===MHX(ath_tx_get_tid_subframe)8.9
<0>[ 4138.170000] ===MHX(ath_tx_sched_aggr)7.5
<7>[ 4138.170000] ath: phy0: qnum: 1, txq depth: 0
<7>[ 4138.170000] ath: phy0: TXDP[1] = 3236e80 (a3236e80)
<0>[ 4138.170000] ===MHX(ath_tx_sched_aggr)7.6
<0>[ 4138.170000] ===MHX(ath_tx_process_buffer) 2.1
<0>[ 4138.170000] ===MHX(ath_tx_process_buffer) 2.3
<0>[ 4138.170000] ==MHX(ath_tx_complete_aggr) 3.1.addr=000f92fa6bb1,localaddr=000f92fa6c45
<0>[ 4138.170000] ==MHX(ath_tx_complete_aggr) 3.2
<0>[ 4138.170000] ==MHX(ath_tx_complete_aggr) 3.3
<0>[ 4138.170000] ==MHX(ath_tx_complete_aggr) 3.4
<0>[ 4138.170000] ==MHX(ath_tx_complete_aggr) 3.6
<0>[ 4138.170000] ===MHX(ath_tx_sched_aggr)7.1
<0>[ 4138.170000] ===MHX(ath_tx_sched_aggr)7.2
<0>[ 4138.170000] ===MHX(ath_tx_get_tid_subframe)8.1
<0>[ 4138.170000] ===MHX(ath_tx_get_tid_subframe)8.2
<0>[ 4138.170000] ===MHX(ath_tx_get_tid_subframe)8.3
<0>[ 4138.170000] ===MHX(ath_tx_get_tid_subframe)8.5. tid->seq_start=3, tid->baw_size=64, seqno=3
<0>[ 4138.170000] ===MHX(ath_tx_get_tid_subframe)8.6
<0>[ 4138.170000] ===MHX(ath_tx_get_tid_subframe)8.8
<0>[ 4138.170000] ===MHX(ath_tx_sched_aggr)7.3
<0>[ 4138.170000] ===MHX(ath_tx_sched_aggr)7.4
<0>[ 4138.170000] ===MHX(ath_tx_get_tid_subframe)8.1
<0>[ 4138.170000] ===MHX(ath_tx_get_tid_subframe)8.9
<0>[ 4138.170000] ===MHX(ath_tx_sched_aggr)7.5
<7>[ 4138.170000] ath: phy0: qnum: 1, txq depth: 0
<7>[ 4138.170000] ath: phy0: TXDP[1] = 3236e80 (a3236e80)
<0>[ 4138.170000] ===MHX(ath_tx_sched_aggr)7.6
<0>[ 4138.170000] ===MHX(ath_tx_process_buffer) 2.1
<0>[ 4138.170000] ===MHX(ath_tx_process_buffer) 2.3
<0>[ 4138.170000] ==MHX(ath_tx_complete_aggr) 3.1.addr=000f92fa6bb1,localaddr=000f92fa6c45
<0>[ 4138.170000] ==MHX(ath_tx_complete_aggr) 3.2
<0>[ 4138.170000] ==MHX(ath_tx_complete_aggr) 3.3
<0>[ 4138.170000] ==MHX(ath_tx_complete_aggr) 3.4
<0>[ 4138.170000] ==MHX(ath_tx_complete_aggr) 3.5
<0>[ 4138.170000] === MHXath_tx_complete_buf: 1.1 
<0>[ 4138.170000] === MHXath_tx_complete_buf: 1.2 
<0>[ 4138.170000] === MHXath_tx_complete_buf: 1.3 
<0>[ 4138.170000] === MHXath_tx_complete_buf: 1.5 
<7>[ 4138.170000] ath: phy0: TX complete: skb: 83353180
<7>[ 4138.170000] ath: phy0: ath_txq_skb_done: fi->txq=1, q=2, txq->stopped=0 
<7>[ 4138.170000] ath: phy0: ath_txq_skb_done: txq->pending_frames=0, sc->tx.txq_max_pending[2]=123
 
<0>[ 4138.170000] === MHXath_tx_complete_buf: 1.6 

root@UserDevice:~# tcpdump -i wlan0 -xen
tcpdump: WARNING: wlan0: no IPv4 address assigned
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on wlan0, link-type EN10MB (Ethernet), capture size 65535 bytes

9:20:05.138598 00:0f:92:fa:6b:b1 > ff:ff:ff:ff:ff:ff, ethertype ARP (0x0806), length 60: Request wh	// ARP req from STA. Requester is STA-WMAC not PC2-MAC.
o-has 192.168.168.1 tell 192.168.168.100, length 46
        0x0000:  0001 0800 0604 0001 000f 92fa 6bb1 c0a8
        0x0010:  a864 0000 0000 0000 c0a8 a801 0000 0000
        0x0020:  0000 0000 0000 0000 0000 0000 0000
09:20:05.138776 00:0f:92:02:f7:f0 > 00:0f:92:fa:6b:b1, ethertype ARP (0x0806), length 42: Reply 192
.168.168.1 is-at 00:0f:92:02:f7:f0, length 28
        0x0000:  0001 0800 0604 0002 000f 9202 f7f0 c0a8
        0x0010:  a801 000f 92fa 6bb1 c0a8 a864
09:20:05.141128 00:0f:92:fa:6b:b1 > 00:0f:92:02:f7:f0, ethertype IPv4 (0x0800), length 98: 192.168.
168.100 > 192.168.168.1: ICMP echo request, id 30742, seq 1, length 64
        0x0000:  4500 0054 0000 4000 4001 68f2 c0a8 a864
        0x0010:  c0a8 a801 0800 d709 7816 0001 d3e1 f757
        0x0020:  eda1 0500 0809 0a0b 0c0d 0e0f 1011 1213
        0x0030:  1415 1617 1819 1a1b 1c1d 1e1f 2021 2223
        0x0040:  2425 2627 2829 2a2b 2c2d 2e2f 3031 3233
        0x0050:  3435 3637
09:20:05.141712 00:0f:92:02:f7:f0 > 00:0f:92:fa:6b:b1, ethertype IPv4 (0x0800), length 98: 192.168.
168.1 > 192.168.168.100: ICMP echo reply, id 30742, seq 1, length 64
        0x0000:  4500 0054 1ef4 0000 4001 89fe c0a8 a801
        0x0010:  c0a8 a864 0000 df09 7816 0001 d3e1 f757
        0x0020:  eda1 0500 0809 0a0b 0c0d 0e0f 1011 1213
        0x0030:  1415 1617 1819 1a1b 1c1d 1e1f 2021 2223
        0x0040:  2425 2627 2829 2a2b 2c2d 2e2f 3031 3233
        0x0050:  3435 3637
09:20:06.138829 00:0f:92:fa:6b:b1 > 00:0f:92:02:f7:f0, ethertype IPv4 (0x0800), length 98: 192.168.
168.100 > 192.168.168.1: ICMP echo request, id 30742, seq 2, length 64
        0x0000:  4500 0054 0000 4000 4001 68f2 c0a8 a864
        0x0010:  c0a8 a801 0800 6304 7816 0002 d4e1 f757
        0x0020:  60a6 0500 0809 0a0b 0c0d 0e0f 1011 1213
        0x0030:  1415 1617 1819 1a1b 1c1d 1e1f 2021 2223
        0x0040:  2425 2627 2829 2a2b 2c2d 2e2f 3031 3233
        0x0050:  3435 3637
09:20:06.139088 00:0f:92:02:f7:f0 > 00:0f:92:fa:6b:b1, ethertype IPv4 (0x0800), length 98: 192.168.
168.1 > 192.168.168.100: ICMP echo reply, id 30742, seq 2, length 64
        0x0000:  4500 0054 1ef5 0000 4001 89fd c0a8 a801
        0x0010:  c0a8 a864 0000 6b04 7816 0002 d4e1 f757
        0x0020:  60a6 0500 0809 0a0b 0c0d 0e0f 1011 1213
        0x0030:  1415 1617 1819 1a1b 1c1d 1e1f 2021 2223
        0x0040:  2425 2627 2829 2a2b 2c2d 2e2f 3031 3233
        0x0050:  3435 3637
09:20:10.145853 00:0f:92:02:f7:f0 > 00:0f:92:fa:6b:b1, ethertype ARP (0x0806), length 42: Request w
ho-has 192.168.168.100 tell 192.168.168.1, length 28
        0x0000:  0001 0800 0604 0001 000f 9202 f7f0 c0a8
        0x0010:  a801 0000 0000 0000 c0a8 a864
09:20:10.149266 00:0f:92:fa:6b:b1 > 00:0f:92:02:f7:f0, ethertype ARP (0x0806), length 60: Reply 192
.168.168.100 is-at 00:0f:92:fa:6b:b1, length 46
        0x0000:  0001 0800 0604 0002 000f 92fa 6bb1 c0a8
        0x0010:  a864 000f 9202 f7f0 c0a8 a801 0000 0000
        0x0020:  0000 0000 0000 0000 0000 0000 0000

root@UserDevice:~# arp
IP address       HW type     Flags       HW address            Mask     Device
192.168.168.100  0x1         0x2         00:0f:92:fa:6b:b1     *        br-lan		//PC2-MAC is replaced by STA-WMAC=STA-BR-MAC.
root@UserDevice:~# cat proc/arpnat_info 
Debug: 0
BOOTPNAT: 1
root@UserDevice:~# cat proc/arpnat_cache


On PC2:
[Jeff@DENG0080-2 bb-1407]$ arp
Address                  HWtype  HWaddress           Flags Mask            Iface
192.168.22.1             ether   00:90:7f:a5:fa:72   C                     eth4
192.168.168.1            ether   00:0f:92:02:f7:f0   C                     eth1		//.1 is at AP-BR-MAC.


//////////////ON .2(STA)
<0>[ 4129.560000] ==MHX10.2(ieee80211_subif_start_xmit)A1=000f92fa6c45,A2=000f92fa6bb1,A3=ffffffffffff		//ARP request from PC2. TA=STA-WMAC, RA=AP-WMAC is correct.
<7>[ 4129.560000] ath: phy0: transmitting packet, skb: 83235900
<7>[ 4129.560000] ath: phy0: A1=000f92fa6c45,A2=000f92fa6bb1,A3=ffffffffffff
<7>[ 4129.560000] ath: phy0: ath_tx_start: q=1, hwq_to_acq[1]=2, txq->stopped=0 
<7>[ 4129.560000] ath: phy0: ath_tx_start: txq->pending_frames=0, sc->tx.txq_max_pending[hwq_to_acq[1]]=123 
<7>[ 4129.570000] ath: phy0: ath_tx_start: q=1, tid->tidno=0 
<0>[ 4129.570000] ===MHX(ath_tx_start) 6.1
<0>[ 4129.570000] ===MHX(ath_tx_sched_aggr)7.1
<0>[ 4129.570000] ===MHX(ath_tx_sched_aggr)7.2
<0>[ 4129.570000] ===MHX(ath_tx_get_tid_subframe)8.1
<0>[ 4129.570000] ===MHX(ath_tx_get_tid_subframe)8.2
<0>[ 4129.570000] ===MHX(ath_tx_get_tid_subframe)8.3
<0>[ 4129.570000] ===MHX(ath_tx_get_tid_subframe)8.4
<0>[ 4129.570000] ===MHX(ath_tx_sched_aggr)7.3
<0>[ 4129.570000] ===MHX(ath_tx_sched_aggr)7.4
<0>[ 4129.570000] ===MHX(ath_tx_get_tid_subframe)8.1
<0>[ 4129.570000] ===MHX(ath_tx_get_tid_subframe)8.9
<0>[ 4129.570000] ===MHX(ath_tx_sched_aggr)7.5
<7>[ 4129.570000] ath: phy0: qnum: 1, txq depth: 0
<7>[ 4129.570000] ath: phy0: TXDP[1] = 3265a80 (a3265a80)
<0>[ 4129.570000] ===MHX(ath_tx_sched_aggr)7.6
<0>[ 4129.570000] ===MHX(ath_tx_process_buffer) 2.1
<0>[ 4129.570000] ===MHX(ath_tx_process_buffer) 2.2
<0>[ 4129.570000] === MHXath_tx_complete_buf: 1.1 
<0>[ 4129.570000] === MHXath_tx_complete_buf: 1.2 
<0>[ 4129.570000] === MHXath_tx_complete_buf: 1.3 
<0>[ 4129.570000] === MHXath_tx_complete_buf: 1.5 
<7>[ 4129.570000] ath: phy0: TX complete: skb: 83235900
<7>[ 4129.570000] ath: phy0: ath_txq_skb_done: fi->txq=1, q=2, txq->stopped=0 
<7>[ 4129.570000] ath: phy0: ath_txq_skb_done: txq->pending_frames=0, sc->tx.txq_max_pending[2]=123 
<0>[ 4129.570000] === MHXath_tx_complete_buf: 1.6 



<0>[ 4129.570000] ==MHX10.2(ieee80211_subif_start_xmit)A1=000f92fa6c45,A2=000f92fa6bb1,A3=000f9202f7f0		// Got ARP reply. .100 is at AP-BR-MAC. ICMP1
<7>[ 4129.570000] ath: phy0: transmitting packet, skb: 83235480
<7>[ 4129.570000] ath: phy0: A1=000f92fa6c45,A2=000f92fa6bb1,A3=000f9202f7f0
<7>[ 4129.570000] ath: phy0: ath_tx_start: q=1, hwq_to_acq[1]=2, txq->stopped=0 
<7>[ 4129.570000] ath: phy0: ath_tx_start: txq->pending_frames=0, sc->tx.txq_max_pending[hwq_to_acq[1]]=123 
<7>[ 4129.570000] ath: phy0: ath_tx_start: q=1, tid->tidno=0 
<0>[ 4129.570000] ===MHX(ath_tx_start) 6.1
<0>[ 4129.570000] ===MHX(ath_tx_sched_aggr)7.1
<0>[ 4129.570000] ===MHX(ath_tx_sched_aggr)7.2
<0>[ 4129.570000] ===MHX(ath_tx_get_tid_subframe)8.1
<0>[ 4129.570000] ===MHX(ath_tx_get_tid_subframe)8.2
<0>[ 4129.570000] ===MHX(ath_tx_get_tid_subframe)8.3
<0>[ 4129.570000] ===MHX(ath_tx_get_tid_subframe)8.4
<0>[ 4129.570000] ===MHX(ath_tx_sched_aggr)7.3
<0>[ 4129.570000] ===MHX(ath_tx_sched_aggr)7.4
<0>[ 4129.570000] ===MHX(ath_tx_get_tid_subframe)8.1
<0>[ 4129.570000] ===MHX(ath_tx_get_tid_subframe)8.9
<0>[ 4129.570000] ===MHX(ath_tx_sched_aggr)7.5
<7>[ 4129.570000] ath: phy0: qnum: 1, txq depth: 0
<7>[ 4129.570000] ath: phy0: TXDP[1] = 3265b00 (a3265b00)
<0>[ 4129.570000] ===MHX(ath_tx_sched_aggr)7.6
<0>[ 4129.570000] ===MHX(ath_tx_process_buffer) 2.1
<0>[ 4129.570000] ===MHX(ath_tx_process_buffer) 2.2
<0>[ 4129.570000] === MHXath_tx_complete_buf: 1.1 
<0>[ 4129.570000] === MHXath_tx_complete_buf: 1.2 
<0>[ 4129.570000] === MHXath_tx_complete_buf: 1.3 
<0>[ 4129.570000] === MHXath_tx_complete_buf: 1.5 
<7>[ 4129.570000] ath: phy0: TX complete: skb: 83235480
<7>[ 4129.570000] ath: phy0: ath_txq_skb_done: fi->txq=1, q=2, txq->stopped=0 
<7>[ 4129.570000] ath: phy0: ath_txq_skb_done: txq->pending_frames=0, sc->tx.txq_max_pending[2]=123 
<0>[ 4129.570000] === MHXath_tx_complete_buf: 1.6 



<0>[ 4130.560000] ==MHX10.2(ieee80211_subif_start_xmit)A1=000f92fa6c45,A2=000f92fa6bb1,A3=000f9202f7f0		// ICMP2
<7>[ 4130.560000] ath: phy0: transmitting packet, skb: 83ae5b40
<7>[ 4130.560000] ath: phy0: A1=000f92fa6c45,A2=000f92fa6bb1,A3=000f9202f7f0
<7>[ 4130.560000] ath: phy0: ath_tx_start: q=1, hwq_to_acq[1]=2, txq->stopped=0 
<7>[ 4130.560000] ath: phy0: ath_tx_start: txq->pending_frames=0, sc->tx.txq_max_pending[hwq_to_acq[1]]=123 
<7>[ 4130.560000] ath: phy0: ath_tx_start: q=1, tid->tidno=0 
<0>[ 4130.560000] ===MHX(ath_tx_start) 6.1
<0>[ 4130.560000] ===MHX(ath_tx_sched_aggr)7.1
<0>[ 4130.560000] ===MHX(ath_tx_sched_aggr)7.2
<0>[ 4130.560000] ===MHX(ath_tx_get_tid_subframe)8.1
<0>[ 4130.560000] ===MHX(ath_tx_get_tid_subframe)8.2
<0>[ 4130.560000] ===MHX(ath_tx_get_tid_subframe)8.3
<0>[ 4130.560000] ===MHX(ath_tx_get_tid_subframe)8.4
<0>[ 4130.560000] ===MHX(ath_tx_sched_aggr)7.3
<0>[ 4130.560000] ===MHX(ath_tx_sched_aggr)7.4
<0>[ 4130.560000] ===MHX(ath_tx_get_tid_subframe)8.1
<0>[ 4130.560000] ===MHX(ath_tx_get_tid_subframe)8.9
<0>[ 4130.570000] ===MHX(ath_tx_sched_aggr)7.5
<7>[ 4130.570000] ath: phy0: qnum: 1, txq depth: 0
<7>[ 4130.570000] ath: phy0: TXDP[1] = 3265b80 (a3265b80)
<0>[ 4130.570000] ===MHX(ath_tx_sched_aggr)7.6
<0>[ 4130.570000] ===MHX(ath_tx_process_buffer) 2.1
<0>[ 4130.570000] ===MHX(ath_tx_process_buffer) 2.2
<0>[ 4130.570000] === MHXath_tx_complete_buf: 1.1 
<0>[ 4130.570000] === MHXath_tx_complete_buf: 1.2 
<0>[ 4130.570000] === MHXath_tx_complete_buf: 1.3 
<0>[ 4130.570000] === MHXath_tx_complete_buf: 1.5 
<7>[ 4130.570000] ath: phy0: TX complete: skb: 83ae5b40
<7>[ 4130.570000] ath: phy0: ath_txq_skb_done: fi->txq=1, q=2, txq->stopped=0 
<7>[ 4130.570000] ath: phy0: ath_txq_skb_done: txq->pending_frames=0, sc->tx.txq_max_pending[2]=123 
<0>[ 4130.570000] === MHXath_tx_complete_buf: 1.6 
<7>[ 4130.570000] wlan0: Open BA session requested for 00:0f:92:fa:6c:45 tid 0
<7>[ 4130.570000] wlan0: activated addBA response timer on 00:0f:92:fa:6c:45 tid 0
<7>[ 4130.570000] ath: phy0: transmitting packet, skb: 83823600
<7>[ 4130.570000] ath: phy0: A1=000f92fa6c45,A2=000f92fa6bb1,A3=000f92fa6c45
<7>[ 4130.570000] ath: phy0: ath_tx_start: q=0, hwq_to_acq[0]=3, txq->stopped=0 
<7>[ 4130.570000] ath: phy0: ath_tx_start: txq->pending_frames=0, sc->tx.txq_max_pending[hwq_to_acq[0]]=123 
<7>[ 4130.570000] ath: phy0: qnum: 0, txq depth: 0
<7>[ 4130.570000] ath: phy0: TXDP[0] = 3265c00 (a3265c00)
<7>[ 4130.570000] wlan0: Rx A-MPDU request on 00:0f:92:fa:6c:45 tid 0 result 0
<7>[ 4130.570000] ath: phy0: transmitting packet, skb: 83235e40
<7>[ 4130.570000] ath: phy0: A1=000f92fa6c45,A2=000f92fa6bb1,A3=000f92fa6c45
<7>[ 4130.570000] ath: phy0: ath_tx_start: q=0, hwq_to_acq[0]=3, txq->stopped=0 
<7>[ 4130.570000] ath: phy0: ath_tx_start: txq->pending_frames=1, sc->tx.txq_max_pending[hwq_to_acq[0]]=123 
<7>[ 4130.570000] ath: phy0: qnum: 0, txq depth: 1
<7>[ 4130.570000] ath: phy0: TXDP[0] = 3265c80 (a3265c80)
<0>[ 4130.570000] ===MHX(ath_tx_process_buffer) 2.1
<0>[ 4130.570000] ===MHX(ath_tx_process_buffer) 2.2
<0>[ 4130.570000] === MHXath_tx_complete_buf: 1.1 
<0>[ 4130.570000] === MHXath_tx_complete_buf: 1.2 
<0>[ 4130.570000] === MHXath_tx_complete_buf: 1.3 
<0>[ 4130.570000] === MHXath_tx_complete_buf: 1.5 
<7>[ 4130.570000] ath: phy0: TX complete: skb: 83823600
<7>[ 4130.570000] ath: phy0: ath_txq_skb_done: fi->txq=0, q=3, txq->stopped=0 
<7>[ 4130.570000] ath: phy0: ath_txq_skb_done: txq->pending_frames=1, sc->tx.txq_max_pending[3]=123 
<0>[ 4130.570000] === MHXath_tx_complete_buf: 1.6 
<0>[ 4130.570000] ===MHX(ath_tx_process_buffer) 2.1
<0>[ 4130.570000] ===MHX(ath_tx_process_buffer) 2.2
<0>[ 4130.570000] === MHXath_tx_complete_buf: 1.1 
<0>[ 4130.570000] === MHXath_tx_complete_buf: 1.2 
<0>[ 4130.570000] === MHXath_tx_complete_buf: 1.3 
<0>[ 4130.570000] === MHXath_tx_complete_buf: 1.5 
<7>[ 4130.570000] ath: phy0: TX complete: skb: 83235e40
<7>[ 4130.570000] ath: phy0: ath_txq_skb_done: fi->txq=0, q=3, txq->stopped=0 
<7>[ 4130.570000] ath: phy0: ath_txq_skb_done: txq->pending_frames=0, sc->tx.txq_max_pending[3]=123 
<0>[ 4130.570000] === MHXath_tx_complete_buf: 1.6 
<7>[ 4130.570000] wlan0: switched off addBA timer for 00:0f:92:fa:6c:45 tid 0
<7>[ 4130.570000] wlan0: Aggregation is on for 00:0f:92:fa:6c:45 tid 0



<0>[ 4134.580000] ==MHX10.2(ieee80211_subif_start_xmit)A1=000f92fa6c45,A2=000f92fa6bb1,A3=000f9202f7f0		//ICMP2 again?????
<7>[ 4134.580000] ath: phy0: transmitting packet, skb: 82c76540
<7>[ 4134.580000] ath: phy0: A1=000f92fa6c45,A2=000f92fa6bb1,A3=000f9202f7f0
<7>[ 4134.580000] ath: phy0: ath_tx_start: q=1, hwq_to_acq[1]=2, txq->stopped=0 
<7>[ 4134.580000] ath: phy0: ath_tx_start: txq->pending_frames=0, sc->tx.txq_max_pending[hwq_to_acq[1]]=123 
<7>[ 4134.580000] ath: phy0: ath_tx_start: q=1, tid->tidno=0 
<0>[ 4134.580000] ===MHX(ath_tx_start) 6.1
<0>[ 4134.580000] ===MHX(ath_tx_sched_aggr)7.1
<0>[ 4134.580000] ===MHX(ath_tx_sched_aggr)7.2
<0>[ 4134.580000] ===MHX(ath_tx_get_tid_subframe)8.1
<0>[ 4134.580000] ===MHX(ath_tx_get_tid_subframe)8.2
<0>[ 4134.580000] ===MHX(ath_tx_get_tid_subframe)8.3
<0>[ 4134.580000] ===MHX(ath_tx_get_tid_subframe)8.5. tid->seq_start=3, tid->baw_size=64, seqno=3
<0>[ 4134.580000] ===MHX(ath_tx_get_tid_subframe)8.6
<0>[ 4134.580000] ===MHX(ath_tx_get_tid_subframe)8.8
<0>[ 4134.580000] ===MHX(ath_tx_sched_aggr)7.3
<0>[ 4134.580000] ===MHX(ath_tx_sched_aggr)7.4
<0>[ 4134.580000] ===MHX(ath_tx_get_tid_subframe)8.1
<0>[ 4134.580000] ===MHX(ath_tx_get_tid_subframe)8.9
<0>[ 4134.580000] ===MHX(ath_tx_sched_aggr)7.5
<7>[ 4134.580000] ath: phy0: qnum: 1, txq depth: 0
<7>[ 4134.580000] ath: phy0: TXDP[1] = 3265d00 (a3265d00)
<0>[ 4134.580000] ===MHX(ath_tx_sched_aggr)7.6
<0>[ 4134.580000] ===MHX(ath_tx_process_buffer) 2.1
<0>[ 4134.580000] ===MHX(ath_tx_process_buffer) 2.3
<0>[ 4134.580000] ==MHX(ath_tx_complete_aggr) 3.1.addr=000f92fa6c45,localaddr=000f92fa6b
b1
<0>[ 4134.580000] ==MHX(ath_tx_complete_aggr) 3.2
<0>[ 4134.580000] ==MHX(ath_tx_complete_aggr) 3.3
<0>[ 4134.580000] ==MHX(ath_tx_complete_aggr) 3.4
<0>[ 4134.580000] ==MHX(ath_tx_complete_aggr) 3.5
<0>[ 4134.580000] === MHXath_tx_complete_buf: 1.1 
<0>[ 4134.580000] === MHXath_tx_complete_buf: 1.2 
<0>[ 4134.580000] === MHXath_tx_complete_buf: 1.3 
<0>[ 4134.580000] === MHXath_tx_complete_buf: 1.5 
<7>[ 4134.580000] ath: phy0: TX complete: skb: 82c76540
<7>[ 4134.580000] ath: phy0: ath_txq_skb_done: fi->txq=1, q=2, txq->stopped=0 
<7>[ 4134.580000] ath: phy0: ath_txq_skb_done: txq->pending_frames=0, sc->tx.txq_max_pen
ding[2]=123 
<0>[ 4134.580000] === MHXath_tx_complete_buf: 1.6 


root@UserDevice:~# tcpdump -i wlan0 -xen
tcpdump: WARNING: wlan0: no IPv4 address assigned
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on wlan0, link-type EN10MB (Ethernet), capture size 65535 bytes

09:20:06.738801 00:0f:92:fa:6b:b1 > ff:ff:ff:ff:ff:ff, ethertype ARP (0x0806), length 60	// STA-WMAC is the ARP requester instead of PC2-MAC thanks to ARPNAT.
: Request who-has 192.168.168.1 tell 192.168.168.100, length 46
        0x0000:  0001 0800 0604 0001 000f 92fa 6bb1 c0a8
        0x0010:  a864 0000 0000 0000 c0a8 a801 0000 0000
        0x0020:  0000 0000 0000 0000 0000 0000 0000
09:20:06.741277 00:0f:92:02:f7:f0 > 00:0f:92:fa:6b:b1, ethertype ARP (0x0806), length 42	// .1 is at AP-BR-MAC
: Reply 192.168.168.1 is-at 00:0f:92:02:f7:f0, length 28
        0x0000:  0001 0800 0604 0002 000f 9202 f7f0 c0a8
        0x0010:  a801 000f 92fa 6bb1 c0a8 a864
09:20:06.741796 00:0f:92:fa:6b:b1 > 00:0f:92:02:f7:f0, ethertype IPv4 (0x0800), length 9	// ICMP req1
8: 192.168.168.100 > 192.168.168.1: ICMP echo request, id 30742, seq 1, length 64
        0x0000:  4500 0054 0000 4000 4001 68f2 c0a8 a864
        0x0010:  c0a8 a801 0800 d709 7816 0001 d3e1 f757
        0x0020:  eda1 0500 0809 0a0b 0c0d 0e0f 1011 1213
        0x0030:  1415 1617 1819 1a1b 1c1d 1e1f 2021 2223
        0x0040:  2425 2627 2829 2a2b 2c2d 2e2f 3031 3233
        0x0050:  3435 3637
09:20:06.744080 00:0f:92:02:f7:f0 > 00:0f:92:fa:6b:b1, ethertype IPv4 (0x0800), length 9	// ICMP reply1
8: 192.168.168.1 > 192.168.168.100: ICMP echo reply, id 30742, seq 1, length 64
        0x0000:  4500 0054 1ef4 0000 4001 89fe c0a8 a801
        0x0010:  c0a8 a864 0000 df09 7816 0001 d3e1 f757
        0x0020:  eda1 0500 0809 0a0b 0c0d 0e0f 1011 1213
        0x0030:  1415 1617 1819 1a1b 1c1d 1e1f 2021 2223
        0x0040:  2425 2627 2829 2a2b 2c2d 2e2f 3031 3233
        0x0050:  3435 3637
09:20:07.738939 00:0f:92:fa:6b:b1 > 00:0f:92:02:f7:f0, ethertype IPv4 (0x0800), length 9	// ICMP req2
8: 192.168.168.100 > 192.168.168.1: ICMP echo request, id 30742, seq 2, length 64
        0x0000:  4500 0054 0000 4000 4001 68f2 c0a8 a864
        0x0010:  c0a8 a801 0800 6304 7816 0002 d4e1 f757
        0x0020:  60a6 0500 0809 0a0b 0c0d 0e0f 1011 1213
        0x0030:  1415 1617 1819 1a1b 1c1d 1e1f 2021 2223
        0x0040:  2425 2627 2829 2a2b 2c2d 2e2f 3031 3233
        0x0050:  3435 3637
09:20:07.741688 00:0f:92:02:f7:f0 > 00:0f:92:fa:6b:b1, ethertype IPv4 (0x0800), length 9	//ICMP reply2
8: 192.168.168.1 > 192.168.168.100: ICMP echo reply, id 30742, seq 2, length 64
        0x0000:  4500 0054 1ef5 0000 4001 89fd c0a8 a801
        0x0010:  c0a8 a864 0000 6b04 7816 0002 d4e1 f757
        0x0020:  60a6 0500 0809 0a0b 0c0d 0e0f 1011 1213
        0x0030:  1415 1617 1819 1a1b 1c1d 1e1f 2021 2223
        0x0040:  2425 2627 2829 2a2b 2c2d 2e2f 3031 3233
        0x0050:  3435 3637




09:20:11.749079 00:0f:92:02:f7:f0 > 00:0f:92:fa:6b:b1, ethertype ARP (0x0806), length 42	// AP's ARP req. Don't need this because communication is already done.
: Request who-has 192.168.168.100 tell 192.168.168.1, length 28
        0x0000:  0001 0800 0604 0001 000f 9202 f7f0 c0a8
        0x0010:  a801 0000 0000 0000 c0a8 a864
09:20:11.749452 00:0f:92:fa:6b:b1 > 00:0f:92:02:f7:f0, ethertype ARP (0x0806), length 60	// .100 is at STA-WMAC=STA-BR-MAC.
: Reply 192.168.168.100 is-at 00:0f:92:fa:6b:b1, length 46
        0x0000:  0001 0800 0604 0002 000f 92fa 6bb1 c0a8
        0x0010:  a864 000f 9202 f7f0 c0a8 a801 0000 0000
        0x0020:  0000 0000 0000 0000 0000 0000 0000




root@UserDevice:~# arp
IP address       HW type     Flags       HW address            Mask     Device		//No entries.
root@UserDevice:~# cat proc/arpnat_info 
Debug: 0
BOOTPNAT: 1
root@UserDevice:~# cat proc/arpnat_cache 
00:0e:c6:89:41:be       192.168.168.100


Oct 4,2016
1. ieee80211_start_tx_ba_session(pubsta, tid, 5000); timeout = tid_tx->last_tx + TU_TO_JIFFIES(tid_tx->timeout);
	WDS=1: RX side sees short show up of TID6. TX side shows TID6 about 3 seconds and then TID6 disappears.
	WDS=0: node_aggr TID=0 on both sides with 2 separate pings. Randomly see TID6 on TX side then TID6 disappears. No TID6 on RX side seen.
	Common thing is that the majority of time both sides show only TID0.
2. ieee80211_start_tx_ba_session(pubsta, tid, 65535); timeout = tid_tx->last_tx + 1000*TU_TO_JIFFIES(tid_tx->timeout);
	WDS=1: Persistent TID0 and TID6. Looks like session never expires.
	WDS=0:RX side shows TID0, TX side shows TID0&TID6. This is a mismatch.


When BUILDFLAGS:= \
        -I$(PKG_BUILD_DIR)/include \
        -DCONFIG_STEP_ONEMHZ \
        -DCONFIG_MHX_BEACON \
        -DCPTCFG_ATH_DEBUG \	//General debug of ath_dbg() printk out. The 2nd level print is controlled by mask /sys/kernel/debug/ieee80211/phy0/ath9k/debug.
The debug_mask is defined in ath.h file:

enum ATH_DEBUG {
        ATH_DBG_RESET           = 0x00000001,
        ATH_DBG_QUEUE           = 0x00000002,
        ATH_DBG_EEPROM          = 0x00000004,
        ATH_DBG_CALIBRATE       = 0x00000008,
        ATH_DBG_INTERRUPT       = 0x00000010,
        ATH_DBG_REGULATORY      = 0x00000020,
        ATH_DBG_ANI             = 0x00000040,
        ATH_DBG_XMIT            = 0x00000080,
        ATH_DBG_BEACON          = 0x00000100,
        ATH_DBG_CONFIG          = 0x00000200,
        ATH_DBG_FATAL           = 0x00000400,
        ATH_DBG_PS              = 0x00000800,
        ATH_DBG_BTCOEX          = 0x00001000,
        ATH_DBG_WMI             = 0x00002000,
        ATH_DBG_BSTUCK          = 0x00004000,
        ATH_DBG_MCI             = 0x00008000,
        ATH_DBG_DFS             = 0x00010000,
        ATH_DBG_WOW             = 0x00020000,
        ATH_DBG_ANY             = 0xffffffff
};

TID6 looks like a IGMP traffic. When IGMP Snooping is OFF, the TID6 disappears.

Oct 3,2016
The iperf server IN UNIT seems have flaws. It doesn't show the T/P value of multicast. Use a PC behind the unit the IPerf shows well.

ieee80211_start_tx_ba_session(pubsta, tid, 2000/*MHX 65535*/);/* The unit here is mS, testfied, 2 seconds.*/---> mod_timer(&tid_tx->session_timer,  TU_TO_EXP_TIME(tid_tx->timeout/*2000 here, mS*/));
#define TU_TO_JIFFIES(x)        (usecs_to_jiffies((x) * 1024))	// This confirms the 2000 has unit of mS.
#define TU_TO_EXP_TIME(x)       (jiffies + TU_TO_JIFFIES(x))

The origional value of 5000 means every 5 seconds it expires, which is a normal behavior. 

Sept 30,2016
How to turn on ht_dbg() message:
In package/kernel/mac80211/Makefile.mac80211_ddl2:
BUILDFLAGS:= \
        -I$(PKG_BUILD_DIR)/include \
        -DCONFIG_STEP_ONEMHZ \
        -DCONFIG_MHX_BEACON \
        -DCPTCFG_ATH_DEBUG \
        -DCPTCFG_MAC80211_HT_DEBUG \	// turn on ht_dbg() message.
        -DCONFIG_ATH9K_CCA_THRESH \


Sept 29,2016
roroot@UserDevice:~# which arp
/sbin/arp
root@UserDevice:~# busybox arp
? (192.168.168.100) at 00:0e:c6:89:41:be [ether]  on br-lan		//Printed by arp_disp() in busybox-1.22.1/networking/arp.c. Parse the /proc/net/arp file and generate a different format reading.
root@UserDevice:~# arp
IP AddresS       HW TypE     FlagS       HW AddresS            Mask     Device	// This is exactly the /proc/net/arp content.
192.168.168.100  0x1         0x2         00:0e:c6:89:41:be     *        br-lan

Use "strace arp", and the "busybox arp" is executed.

[Solution]: In etc/profile, there is a line:
[ -x /usr/bin/arp ] || arp() { cat /proc/net/arp; }	// If /usr/sbin/arp is NOT executable, then arp command is aliased to "cat /proc/net/arp". Actually sbin/arp -> /tmp/busybox.

And note there are some busybox builtin commands:
root@UserDevice:~# help
Built-in commands:
------------------
        . : [ [[ alias bg break cd chdir command continue echo eval exec
        exit export false fg getopts hash help history jobs kill let
        local printf pwd read readonly return set shift source test times
        trap true type ulimit umask unalias unset wait
They don't fork to execute the applet.

Sept 28, 2016
nVIP2400 test RS485 functionality: 
telnet 192.168.168.1 20001
Type in console (and enter) and see the output on the other console.
nVIP2400 uses config.IPnVT config file.


Sept 20,2016
package/network/services/wget/files/wsBoot: has something related to PRODUCTMODE. But it is only used by NMS and for now pDDL doesn't have it so just ignore it. Confirmed with Charlie and Ning.

Sept 16,2016
PWii eth0 and eth1 bridged to br-lan and assignes DHCP addresses to 2 4Gii units. The 2 units can ping the PWii but they can not ping with each other.
Solution: Add a VLAN ID2 in PWii's LAN setting.

Sept 13,2016
When OPENSSL_OPTIONS += -DHAVE_CRYPTODEV is enabled in OpenSSL in IPn4Gii:
root@UserDevice:~# openssl engine -t -c
(cryptodev) BSD cryptodev engine
 [RSA, DSA, DH, RC4, DES-CBC, DES-EDE3-CBC, AES-128-CBC, AES-192-CBC, AES-256-CBC]
     [ available ]
(dynamic) Dynamic engine loading support
     [ unavailable ]
root@UserDevice:~# openvpn --show-engines
OpenSSL Crypto Engines

BSD cryptodev engine [cryptodev]
Dynamic engine loading support [dynamic]

And openvpn supports --engine [engine-name] to specifi the engine to use.

Sept 12,2016
Step to insert gadget driver:
1. insert udc_core.ko, this will insert usb-common.ko too. 2. Insert ci_hdrc.ko; 3. Insert ci13xxx_ar933x.ko. Must remove ehci_platform.ko and ehci_hcd.ko first. 4. Insert libcomposite.ko. 5. Insert g_ether.ko.

root@UserDevice:~# lsmod | grep cdc
cdc_acm                12400  0 
cdc_ether               3548  1 rndis_host
cdc_ncm                 8275  0 
cdc_wdm                 7621  1 qmi_wwan
root@UserDevice:~# 
root@UserDevice:~# 
root@UserDevice:~# 
root@UserDevice:~# 
root@UserDevice:~# lsmod | grep ether
cdc_ether               3548  1 rndis_host
g_ether                29145  0 
libcomposite           25406  1 g_ether
root@UserDevice:~# lsmod | grep rndis
cdc_ether               3548  1 rndis_host
rndis_host              4905  0 
usbnet                 16623  4 rndis_host


After usb_f_acm.ko is inserted, the g_serial.ko can work:
root@UserDevice:~# lsmod | grep serial

qcserial                3856  0 
u_serial                8205  1 usb_f_acm
usb_f_acm.ko provides ACM function.
root@UserDevice:~# insmod lib/modules/3.10.36/g_serial.ko 
root@UserDevice:~# ls /dev/tty
tty      ttyATH0  ttyGS0   ttyS0		// ttyGS0 shows up.
But after this g_serial.ko is inserted, the g_ether.ko can not be inserted:
kmod: failed to insert lib/modules/3.10.36/g_ether.ko
root@UserDevice:~# dmesg -c
[ 1490.960000] couldn't find an available UDC
Because only one UDC is taken by serial. Maybe that is why we need a g_multi.ko to use one UDC as 2 or 3 functionalities.

For mass storage: insmod lib/modules/3.10.36/g_mass_storage.ko file=1 will insert this ko successfully.

For g_multi.ko: Afte u_serial.ko and usb_f_acm.ko are loaded:
root@UserDevice:~# insmod lib/modules/3.10.36/g_multi.ko file=1
root@UserDevice:~# dmesg 
[ 2858.190000] udc ci_hdrc.0: registering UDC driver [g_multi]
[ 2858.190000] ==MHX(udc_bind_to_driver)1.0
[ 2858.190000] ==MHX(multi_bind)2.1
[ 2858.190000] ==MHX(multi_bind)2.2
[ 2858.190000] g_multi gadget: using random self ethernet address
[ 2858.190000] g_multi gadget: using random host ethernet address
[ 2858.200000] usb0: MAC fa:ed:ba:ea:29:6c
[ 2858.200000] usb0: HOST MAC e6:35:fc:ec:48:00
[ 2858.200000] ==MHX(multi_bind)2.3
[ 2858.200000] ==MHX(multi_bind)2.4
[ 2858.200000]  lun0: open backing file: 1
[ 2858.200000] g_multi gadget: Mass Storage Function, version: 2009/09/11
[ 2858.200000] g_multi gadget: Number of LUNs=1
[ 2858.200000]  lun0: LUN: file: /1
[ 2858.200000] g_multi gadget: I/O thread pid: 5438
[ 2858.200000] ==MHX(multi_bind)2.5
[ 2858.200000] ==MHX(multi_bind)2.6
[ 2858.200000] g_multi gadget: adding config #1 'Multifunction with RNDIS'/833eb0e4
[ 2858.200000] g_multi gadget: adding 'rndis'/82026600 to config 'Multifunction with RNDIS'/833eb0e4
[ 2858.200000] rndis_register: configNr = 0
[ 2858.200000] rndis_set_param_medium: 0 0
[ 2858.200000] g_multi gadget: RNDIS: dual speed IN/ep1in OUT/ep1out NOTIFY/ep2in
[ 2858.200000] g_multi gadget: adding 'acm'/82026400 to config 'Multifunction with RNDIS'/833eb0e4
[ 2858.200000] g_multi gadget: acm ttyGS0: dual speed IN/ep3in OUT/ep2out NOTIFY/ep4in
[ 2858.200000] g_multi gadget: adding 'Mass Storage Function'/83bed200 to config 'Multifunction with RNDIS'/833eb0e4
[ 2858.200000] g_multi gadget: cfg 1/833eb0e4 speeds: high full
[ 2858.200000] g_multi gadget:   interface 0 = rndis/82026600
[ 2858.200000] g_multi gadget:   interface 1 = rndis/82026600
[ 2858.200000] g_multi gadget:   interface 2 = acm/82026400
[ 2858.200000] g_multi gadget:   interface 3 = acm/82026400
[ 2858.200000] g_multi gadget:   interface 4 = Mass Storage Function/83bed200
[ 2858.200000] ==MHX(multi_bind)2.7
[ 2858.200000] g_multi gadget: adding config #2 'Multifunction with CDC ECM'/833eb070
[ 2858.200000] g_multi gadget: adding 'cdc_ethernet'/82026800 to config 'Multifunction with CDC ECM'/833eb070
[ 2858.200000] g_multi gadget: CDC Ethernet: dual speed IN/ep1in OUT/ep1out NOTIFY/ep2in
[ 2858.200000] g_multi gadget: adding 'acm'/82026900 to config 'Multifunction with CDC ECM'/833eb070
[ 2858.200000] g_multi gadget: acm ttyGS0: dual speed IN/ep3in OUT/ep2out NOTIFY/ep4in
[ 2858.200000] g_multi gadget: adding 'Mass Storage Function'/83bb1100 to config 'Multifunction with CDC ECM'/833eb070
[ 2858.200000] g_multi gadget: cfg 2/833eb070 speeds: high full
[ 2858.200000] g_multi gadget:   interface 0 = cdc_ethernet/82026800
[ 2858.200000] g_multi gadget:   interface 1 = cdc_ethernet/82026800
[ 2858.200000] g_multi gadget:   interface 2 = acm/82026900
[ 2858.200000] g_multi gadget:   interface 3 = acm/82026900
[ 2858.200000] g_multi gadget:   interface 4 = Mass Storage Function/83bb1100
[ 2858.200000] ==MHX(multi_bind)2.8
[ 2858.200000] g_multi gadget: Multifunction Composite Gadget
[ 2858.200000] g_multi gadget: userspace failed to provide iSerialNumber
[ 2858.200000] g_multi gadget: g_multi ready
[ 2858.200000] ==MHX(udc_bind_to_driver)1.1
[ 2858.200000] ==MHX(udc_bind_to_driver)1.2
root@UserDevice:~# 
root@UserDevice:~# 
root@UserDevice:~# 
root@UserDevice:~# 
root@UserDevice:~# 
root@UserDevice:~# ls /dev/tty
tty      ttyATH0  ttyGS0   ttyS0
root@UserDevice:~# ls /dev/tty
tty      ttyATH0  ttyGS0   ttyS0
root@UserDevice:~# ls /dev/tty
root@UserDevice:~# ifconfig -a
br-lan    Link encap:Ethernet  HWaddr 00:0F:92:02:AA:C8  
          inet addr:192.168.168.1  Bcast:192.168.168.255  Mask:255.255.255.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:25543 errors:0 dropped:0 overruns:0 frame:0
          TX packets:24808 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:1971886 (1.8 MiB)  TX bytes:4038274 (3.8 MiB)

eth0      Link encap:Ethernet  HWaddr 00:0F:92:02:AA:C8  
          UP BROADCAST MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
          Interrupt:5 

eth1      Link encap:Ethernet  HWaddr 00:0F:92:03:AA:C8  
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:25568 errors:0 dropped:0 overruns:0 frame:0
          TX packets:24833 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:2330988 (2.2 MiB)  TX bytes:4039424 (3.8 MiB)
          Interrupt:4 

gre0      Link encap:UNSPEC  HWaddr 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  
          NOARP  MTU:1476  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)

gretap0   Link encap:Ethernet  HWaddr 00:00:00:00:00:00  
          BROADCAST MULTICAST  MTU:1476  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)

lo        Link encap:Local Loopback  
          inet addr:127.0.0.1  Mask:255.0.0.0
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:200 errors:0 dropped:0 overruns:0 frame:0
          TX packets:200 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:10000 (9.7 KiB)  TX bytes:10000 (9.7 KiB)

tunl0     Link encap:UNSPEC  HWaddr 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  
          NOARP  MTU:0  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)

usb0      Link encap:Ethernet  HWaddr FA:ED:BA:EA:29:6C  
          BROADCAST MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)

wlan0     Link encap:Ethernet  HWaddr 00:0F:92:FA:38:53  
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:26 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:0 (0.0 B)  TX bytes:1763 (1.7 KiB)
root@UserDevice:~# lsmod | grep g_
g_multi                48569  0 
libcomposite           25406  2 g_multi
nf_defrag_ipv4           774  1 nf_conntrack_ipv4


INsert modules with this step: udc-core.ko--->ci_hdrc.ko-->ci13xxx_ar933x.ko-->libcomposite.ko--->u_serial.ko-->usb_f_acm.ko--->ls -al > 1--->insmod lib/modules/3.10.36/g_multi.ko file=1.
A working g_multi.ko snap shot:

root@UserDevice:~# ls /dev/tty
tty      ttyATH0  ttyGS0   ttyS0
root@UserDevice:~# ls /dev/tty*
/dev/tty      /dev/ttyATH0  /dev/ttyGS0   /dev/ttyS0
root@UserDevice:~# ifconfig usb0
usb0      Link encap:Ethernet  HWaddr 0A:90:4E:78:88:D4  
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:391 errors:0 dropped:55 overruns:0 frame:0
          TX packets:117 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:40587 (39.6 KiB)  TX bytes:15083 (14.7 KiB)

root@UserDevice:~# cat /proc/interrupts 
           CPU0       
  2:     196305      MIPS  ath9k
  3:      23411      MIPS  ci13xxx_ar933x
  4:      17877      MIPS  eth1
  5:          0      MIPS  eth0
  7:     170261      MIPS  timer
 11:      34657      MISC  ar933x-uart
ERR:          0
root@UserDevice:~# cat /proc/net/dev
Inter-|   Receive                                                |  Transmit
 face |bytes    packets errs drop fifo frame compressed multicast|bytes    packets errs drop fifo colls carrier compresd
  gre0:       0       0    0    0    0     0          0         0        0       0    0    0    0     0       0        0
    lo:   10000     200    0    0    0     0          0         0    10000     200    0    0    0     0       0        0
  usb0:   40587     391    0   55    0     0          0         0    15083     117    0    0    0     0       0        0
 tunl0:       0       0    0    0    0     0          0         0        0       0    0    0    0     0       0        0
gretap0:       0       0    0    0    0     0          0         0        0       0    0    0    0     0       0       0
  eth1: 1313253   14457    0    0    0     0          0         0  2284059   14165    0    0    0     0       0        0
 wlan0:       0       0    0    0    0     0          0         0    20135     132    0    0    0     0       0        0
  eth0:       0       0    0    0    0     0          0         0        0       0    0    0    0     0       0        0
br-lan: 1132420   14654    0   37    0     0          0         0  2275927   14143    0    0    0     0       0        0
root@UserDevice:~# 
root@UserDevice:~# lsmod 
act_mirred              2480  0 
act_skbedit             1760  0 
aead                    4272  1 authenc
arc4                    1312  2 
arp_tables              8113  1 arptable_filter
arpt_mangle              864  0 
arptable_filter          576  0 
ath                    19765  3 ath9k
ath9k                  90149  0 
ath9k_common           11501  1 ath9k
ath9k_hw              315391  2 ath9k
authenc                 5216  0 
cbc                     1856  0 
cdc_acm                12400  0 
cdc_ether               3548  1 rndis_host
cdc_ncm                 8275  0 
cdc_wdm                 7621  1 qmi_wwan
cfg80211              195831  4 ath9k
chainiv                 2288  0 
ci13xxx_ar933x           880  0 
ci_hdrc                17601  1 ci13xxx_ar933x
cls_flow                4960  0 
cls_fw                  3216  0 
cls_route               5008  0 
cls_tcindex             3808  0 
cls_u32                 5648  0 
compat                  1988  4 ath9k
compat_xtables          1852  2 xt_RAWNAT
crc_ccitt               1019  1 ppp_async
crypto_blkcipher       10375  6 chainiv
crypto_hash             9514  4 sha1_generic
crypto_wq                448  1 chainiv
deflate                 1344  0 
des_generic            18185  0 
ebt_802_3                688  0 
ebt_among               2096  0 
ecb                     1328  0 
em_u32                   576  0 
eseqiv                  1952  0 
ftdi_sio               27088  0 
g_multi                48569  0 
gpio_button_hotplug     4464  0 
gre                     1874  2 pptp
hmac                    2288  0 
ip_gre                  7696  0 
ip_set                 20864 12 xt_set
ip_set_bitmap_ip        6016  0 
ip_set_bitmap_ipmac     5808  0 
ip_set_bitmap_port      5312  0 
ip_set_hash_ip         14944  0 
ip_set_hash_ipport     15424  0 
ip_set_hash_ipportip   16272  0 
ip_set_hash_ipportnet   21120  0 
ip_set_hash_net        18576  0 
ip_set_hash_netiface   20704  0 
ip_set_hash_netport    19824  0 
ip_set_list_set         6688  0 
ip_tables               9149  4 iptable_nat
ip_tunnel               9851  2 ip_gre
ipip                    3120  0 
ipt_MASQUERADE          1136  2 
ipt_REJECT              1808  2 
ipt_ah                   672  0 
iptable_filter           672  1 
iptable_mangle           960  1 
iptable_nat             1968  1 
iptable_raw              640  1 
krng                     672  0 
l2tp_core              12702  4 l2tp_ppp
l2tp_eth                2672  0 
l2tp_ip                 4720  0 
l2tp_netlink            6504  2 l2tp_ppp
l2tp_ppp               12464  0 
libcomposite           25406  2 g_multi
mac80211              348449  1 ath9k
md5                     1504  0 
mhx_bsp                 3673  0 
nf_conntrack           45406 17 iptable_nat
nf_conntrack_ftp        5120  1 nf_nat_ftp
nf_conntrack_ipv4       5188  4 
nf_conntrack_irc        2784  1 nf_nat_irc
nf_conntrack_netlink   15440  0 
nf_defrag_ipv4           774  1 nf_conntrack_ipv4
nf_nat                 10560  8 iptable_nat
nf_nat_ftp              1200  0 
nf_nat_ipv4             2654  1 iptable_nat
nf_nat_irc               976  0 
nfnetlink               2507  2 nf_conntrack_netlink
ohci_hcd               16592  0 
option                 25808  0 
pl2303                  6736  0 
ppp_async               6144  0 
ppp_generic            19794  6 pppoe
ppp_mppe                4800  0 
pppoe                   7744  0 
pppox                   1338  3 pppoe
pptp                   13328  0 
qcserial                3856  0 
qmi_wwan                9152  0 
rndis_host              4905  0 
rng                     1375  3 chainiv
sch_hfsc               13408  0 
sch_ingress              944  0 
sha1_generic            1475  0 
slhc                    4299  1 ppp_generic
soip                   22878  0 
tun                    14719  0 
tunnel4                 1326  1 ipip
u_serial                8205  1 usb_f_acm
udc_core                5325  2 libcomposite
uhci_hcd               18240  0 
usb_common              1160  3 libcomposite
usb_f_acm               4224  1 
usb_wwan                4380  2 qcserial
usbcore               109393 15 qcserial
usbnet                 16623  4 rndis_host
usbserial              18407  5 qcserial
xfrm_algo               3726  0 
xt_CT                   2272  0 
xt_IPMARK                832  0 
xt_LOG                  6336  0 
xt_NETMAP               1152  0 
xt_RAWNAT               1568  0 
xt_REDIRECT             1056  0 
xt_TCPMSS               1952  2 
xt_addrtype             1328  0 
xt_comment               480 40 
xt_condition            1808  0 
xt_connbytes            1488  0 
xt_connlimit            2480  0 
xt_connmark             1040  0 
xt_conntrack            2160  3 
xt_esp                   752  0 
xt_helper                880  0 
xt_iface                 912  0 
xt_iprange              1008  0 
xt_limit                 992  1 
xt_mac                   608  0 
xt_mark                  672  0 
xt_multiport            1184  0 
xt_nat                  1072  0 
xt_owner                 688  0 
xt_physdev              1328  0 
xt_pkttype               608  0 
xt_policy               2032  0 
xt_quota                 736  0 
xt_recent               6336  0 
xt_set                  4240  0 
xt_state                 688  0 
xt_time                 1664  0 
zlib_deflate           18440  1 deflate
zlib_inflate           12466  1 deflate




Sept 9, 2016
With Lihong's ASUS Windows 10 laptop, units uses g_ether.ko+libcomposite.ko. Win10 always recognizes the PWii g_ether as a COM port. Check the PID and VID are OK. When forcely install Microhard .inf file in Win10, it is not allowed and complains "third-party inf does not contain digital signature information".

Update the Win10 and restart it. This time the g_ether is recognized as a "USB Ethernet/RNDIS Gadget" and manufactured by Acer. PC runs iperf server and unit as client, tcp t/p is about 93Mbps. Unit as a server and the tcp t/p is about 110Mbps.

And find it works because the PID and VID are changed to NetChip's
#define RNDIS_VENDOR_NUM        0x1f94  //0x0525        /* NetChip */
#define RNDIS_PRODUCT_NUM       0x2002  //0xa4a2        /* Ethernet/RNDIS Gadget */

I reversed back to Microhard PID/VID and it is recognized as COM device again.

WHY Win10 recognizes a gadget by its VID/PID instead of its class type???

Sept 8,2016
root@UserDevice:~# lsmod  | grep g_
g_ether                29145  0 
libcomposite           25406  1 g_ether
Works. Iperf server on unit and Iperf client on PC, TCP t/p is 118Mbps via USB. On PC lsusb shows "Bus 002 Device 019: ID 0525:a4a2 Netchip Technology, Inc. Linux-USB Ethernet/RNDIS Gadget", 

Microhard USB CDC-Ether/RNDIS : VID=0x1f94, PID=2002 
Microhard USB CDC Comport : VID=0x1f94, PID=1002 
Microhard USB composite(multi) : VID=0x1f94, PID=3002 

Aug 31,2016
Regular pX2 board:
root@UserDevice:~# mhx -reg get 0xb80600ac
Register 0xb80600ac has value 0x0004220f
root@UserDevice:~# mhx -reg get 0xbb0001a8
Register 0xbb0001a8 has value 0x00000003
root@UserDevice:~# lsusb


A board with pull down GPIO13 to force USB device mode:
root@UserDevice:~# mhx -reg get 0xb80600ac
Register 0xb80600ac has value 0x00042607
root@UserDevice:~# mhx -reg get 0xbb0001a8
Register 0xbb0001a8 has value 0x00000013

Aug 30, 2016
Create pDDL branch.
cvs tag tag_pDDL_branch_start
cvs tag -r tag_pDDL_branch_start -b pDDL_branch


由内核发出 event 事件.
1.kobject_uevent() 产生 uevent 事件(lib/kobject_uevent.c 中), 产生的 uevent 先由 netlink_broadcast_filtered() 发出, 最后调用 uevent_helper[] 所指定的程序来处理.
2.uevent_helper[] 里默认指定 "/sbin/hotplug", 但可以通过 /sys/kernel/uevent_helper (kernel/ksysfs.c) 或 /proc/kernel/uevent_helper (kernel/sysctl.c) 来修改成指定的程序.
3.在 OpenWrt 并不使用 user_helper[] 指定程序来处理 uevent (/sbin/hotplug 不存在), 而是使用 PF_NETLINK 来获取来自内核的 uevent.

用户空间监听 uevent
openwrt 中, procd 作为 init 进程会处理许多事情, 其中就包括 hotplug.
procd/plug/hotplug.c 中, 创建一个 PF_NETLINK 套接字来监听内核 netlink_broadcast_filtered() 发出的 uevent.
收到 uevent 之后, 再根据 /etc/hotplug.json 里的描述来处理.
通常情况下, /etc/hotplug.json 会调用 /sbin/hotplug-call 来处理, 它根据 uevent 的 $SUBSYSTEM 变量来分别调用 /etc/hotplug.d/ 下不同目录中的脚本.


Aug 26,2016
Use a nano Second timer in kernel to measure the ath scan time in drivers/net/wireless/ath/ath9k/spectral.c. 

ktime_t kt;
    kt = ktime_get_real();
    printk("===MHX(%s) Scan data is ready to be read.[ktime_t time %unS]\n", __func__, kt.tv.nsec);


root@UserDevice:~# cat sys/kernel/debug/ieee80211/phy0/ath9k/spectral_scan0 > sample
root@UserDevice:~# ls -al sample
-rw-r--r--    1 root     root             0 Apr 22 07:46 sample				// no trigger no data.
root@UserDevice:~# iw wlan0 info
Interface wlan0
        ifindex 10
        wdev 0x2
        addr 00:0f:92:fa:37:92
        ssid PWii-jeff-hs
        type AP
        wiphy 0
        channel 11 (2462 MHz), width: 20 MHz, center1: 2462 MHz				// scan channel 2562, the scan frequency is from 2452-2472 in PWii 20MHz.
root@UserDevice:~# echo 1 > sys/kernel/debug/ieee80211/phy0/ath9k/spectral_count	// 1 scan. only 1 sample point produced in each bin(sub-carrier).
root@UserDevice:~# echo manual > sys/kernel/debug/ieee80211/phy0/ath9k/spectral_scan_ctl 
root@UserDevice:~# echo trigger > sys/kernel/debug/ieee80211/phy0/ath9k/spectral_scan_ctl // start scan
root@UserDevice:~# cat sys/kernel/debug/ieee80211/phy0/ath9k/spectral_scan0 > sample
root@UserDevice:~# ls -al sample
-rw-r--r--    1 root     root            76 Apr 22 07:46 sample					// 56 sub-carriers(bin), 76Bytes per scan = sizeof(struct fft_sample_ht20). Each scan generates 56 sample points in each bin. "spectral_count"=1 means each bin has 1 sample point. [NOTE] When spectral_scan_ctl=chanscan, each bin has 1 sample. But because the scan center freq step is 1MHz, each scan covers 20MHz bandwidth, so the next central frequency scan will produce overlap samples to the previous scan. The result will be that each bin has more than 1 point dispite of spectral_count=1. They're spilled from adjacent scan. 
root@UserDevice:~# 
root@UserDevice:~# dmesg -c
[  348.410000] ===MHX(write_file_spec_scan_ctl)Scan triggered [ktime_t time 428345145nS].
[  348.410000] ===MHX(ath_process_fft) Scan data is ready to be read.[ktime_t time 429934465nS]	//One scan takes 1589320nS=1.6mS
root@UserDevice:~# 
root@UserDevice:~# cat sys/kernel/debug/ieee80211/phy0/ath9k/spectral_scan0 > sample
root@UserDevice:~# ls -al sample
-rw-r--r--    1 root     root             0 Apr 22 07:47 sample					// spectral_scan0 is Cleaned after being read
root@UserDevice:~# 
root@UserDevice:~# echo 4 > sys/kernel/debug/ieee80211/phy0/ath9k/spectral_count
root@UserDevice:~# 
root@UserDevice:~# echo trigger > sys/kernel/debug/ieee80211/phy0/ath9k/spectral_scan_ctl 
root@UserDevice:~# dmesg -c
[  389.700000] ===MHX(write_file_spec_scan_ctl)Scan triggered [ktime_t time 714957690nS].
[  389.700000] ===MHX(ath_process_fft) Scan data is ready to be read.[ktime_t time 716539945nS]
[  389.700000] ===MHX(ath_process_fft) Scan data is ready to be read.[ktime_t time 719480010nS]
[  389.700000] ===MHX(ath_process_fft) Scan data is ready to be read.[ktime_t time 720888730nS]
[  389.700000] ===MHX(ath_process_fft) Scan data is ready to be read.[ktime_t time 722373490nS]	// 4 scans take 7415800nS=7.4mS.
root@UserDevice:~# 
root@UserDevice:~# cat sys/kernel/debug/ieee80211/phy0/ath9k/spectral_scan0 > sample
root@UserDevice:~# ls -al sample
-rw-r--r--    1 root     root           304 Apr 22 07:47 sample					// 4 scans generates 76x4=304 Bytes.
root@UserDevice:~# 
root@UserDevice:~# cat sys/kernel/debug/ieee80211/phy0/ath9k/spectral_scan0 > sample
root@UserDevice:~# ls -al sample
-rw-r--r--    1 root     root             0 Apr 22 07:47 sample					// cleaned after read
root@UserDevice:~# 

Measured with pDDL at different BW mode:
	ScanCount	1		8
BW
8MHz			3.2mS		24mS
4MHz			6.1mS		48mS
2MHz			12.1mS		95.7mS
1MHz			24mS		191.2mS


Aug 25, 2016
8:33am, all the 5 streams run well. No video quality deterioration than yesterday and direction connection playback. Receiver's WireShark still reports a statistics of 13.1Mbps. WireShark on reveiver side RTP stream statistics/analyzer show about 0% packet loss on both video and audio.

root@UserDevice:~# cat sys/kernel/debug/ieee80211/phy0/ath9k/spectral_
	 spectral_count		//register
         spectral_period	//register
        spectral_scan_ctl	// ath9k_spectral_scan_config()-->ar9003_hw_spectral_scan_config()
	spectral_fft_period     //register
	spectral_scan0          // final data
	spectral_short_repeat	//register

echo trigger > sys/kernel/debug/ieee80211/phy0/ath9k/spectral_scan_ctl   ----> ar9003_hw_spectral_scan_trigger()


static void ar9003_hw_spectral_scan_config(struct ath_hw *ah,
                                           struct ath_spec_scan *param)
{
        u8 count;

        if (!param->enabled) {
                REG_CLR_BIT(ah, AR_PHY_SPECTRAL_SCAN,
                            AR_PHY_SPECTRAL_SCAN_ENABLE);
                return;
        }

        REG_SET_BIT(ah, AR_PHY_RADAR_0, AR_PHY_RADAR_0_FFT_ENA);
        REG_SET_BIT(ah, AR_PHY_SPECTRAL_SCAN, AR_PHY_SPECTRAL_SCAN_ENABLE);

        /* on AR93xx and newer, count = 0 will make the the chip send
         * spectral samples endlessly. Check if this really was intended,
         * and fix otherwise.
         */
        count = param->count;
        if (param->endless)
                count = 0;
        else if (param->count == 0)
                count = 1;

        if (param->short_repeat)
                REG_SET_BIT(ah, AR_PHY_SPECTRAL_SCAN,
                            AR_PHY_SPECTRAL_SCAN_SHORT_REPEAT);
        else
                REG_CLR_BIT(ah, AR_PHY_SPECTRAL_SCAN,
                            AR_PHY_SPECTRAL_SCAN_SHORT_REPEAT);

        REG_RMW_FIELD(ah, AR_PHY_SPECTRAL_SCAN,
                      AR_PHY_SPECTRAL_SCAN_COUNT, count);
        REG_RMW_FIELD(ah, AR_PHY_SPECTRAL_SCAN,
                      AR_PHY_SPECTRAL_SCAN_PERIOD, param->period);
        REG_RMW_FIELD(ah, AR_PHY_SPECTRAL_SCAN,
                      AR_PHY_SPECTRAL_SCAN_FFT_PERIOD, param->fft_period);

        return;
}

During the t/p test through WiFi, I still can do:
echo chanscan > /sys/kernel/debug/ieee80211/phy0/ath9k/spectral_scan_ctl
iw dev wlan0 scan
cat /sys/kernel/debug/ieee80211/phy0/ath9k/spectral_scan0 > samples
echo disable > /sys/kernel/debug/ieee80211/phy0/ath9k/spectral_scan_ctl

And get the scan result but can witness a significant t/p value drop.

root@UserDevice:~# echo manual >  sys/kernel/debug/ieee80211/phy0/ath9k/spectral_scan_ctl 	// set to manual mode. background mode will acquare endlessly and of no use.
root@UserDevice:~# echo trigger >  sys/kernel/debug/ieee80211/phy0/ath9k/spectral_scan_ctl	// trigger a scan 
root@UserDevice:~# cat sys/kernel/debug/ieee80211/phy0/ath9k/spectral_scan0 > sample
root@UserDevice:~# ls -al sample
-rw-r--r--    1 root     root          2432 Apr 22 08:22 sample
root@UserDevice:~# scp sample Jeff@192.168.168.101://home/Jeff/tmp/.
Jeff@192.168.168.101's password: 
sample                                        100% 2432     2.4KB/s   00:00    
root@UserDevice:~# cat sys/kernel/debug/ieee80211/phy0/ath9k/spectral_scan0 > sample		
root@UserDevice:~# ls -al sample
-rw-r--r--    1 root     root             0 Apr 22 08:22 sample				// the last trigger data was already acquired, no new data without no new trigger


Aug 24, 2016
VLC stream video to 127.0.0.1 and playback locally by another instance still has packet loss problem. Not network related.
When playing back record the video to Videos directory. This recorded video has bad quality as well when played back locally.

Choose a speed-half rate video, H.264 960x546 ABR about 2~4Mbps, MPEGA 128Kbps, stream via RTSP 5 streams simultaneously, total bitrate from WireShark is about 13.1Mbps. Run from 4:00pm. 

Aug 22,2016
Test T/P with latest IPsec patch. With H/W accelerator. 4Gii as sender. -t 60. With Cisco router.
1)as for 3DES/MD5 algorithm, TCP Max. throughput is about 20.4Mbps Max, average 18.8M, UDP Max. throughput :16.4 Mbits/sec   1.058 ms  553/84261 (0.66%)
2)as for AES128/SHA algorithm, TCP Max. throughput is about 22Mbps Max, average 18.5M.UDP Max. throughput :  15.0 Mbits/sec   1.301 ms 1149/77619 (1.5%)
3)as for AES256/SHA algorithm, TCP Max. throughput is about 19.4Mbps Max, average 18M. UDP Max. throughput : 14.8 Mbits/sec   1.300 ms  855/76521 (1.1%)
4)as for AES128/MD5 algorithm, TCP Max. throughput is about 21Mbps Max, average 19.4M. UDP Max. throughput :15.8 Mbits/sec   1.212 ms 1066/81626 (1.3%)
5)as for AES256/MD5 algorithm, TCP Max. throughput is about 21Mbps Max,average 19.4M. UDP Max. 15.8 Mbits/sec   1.108 ms  801/81634 (0.98%)

Found the t/p is very sensitive to user operations. Console top command or WebGUI will degrade the t/p.

Test video with 2 laptops with VLC. Even direct connection can not play back 1Mbps and 7Mbps videoes soundly. Much mosic. One laptop uses a GbUSB3.0 USB-Ether converter. Maybe because of the latency caused by USB-Eth converter??? But tried a laptop with builtin ethernet port and got same result. RTP packet drop got almost up to 40%.

Tried VLC http streaming, http://19.168.220.200:8088/monster, this is a 5Mbps video. Video quality looks better but playback just hang up. Tried a 3Mbps planet video with HTTP. Quality is good. But still hang up in complex scenario.

To confirm the T/P, use iperf to profile the t/p of the 2 directly connected laptops. TCP t/p=253Mbps, UDP t/p=236Mbps,0% drop and jitter 0.367ms. Looks like not the packet drop but the delay(not known) or jitter(0.367ms) cause the poor video quality. 

Use RTP TS mode, on the receiver side Wireshark, "Telephony -> RTP -> Show all Streams", I can see the "Lost" is as high as 29%!!!. To confirm, acquire 300seconds RTP packets on receiver WireShark. This is a 6Mbps video and looks bad. "Telephony -> RTP -> Show all Streams" shows 5.8% packet loss. "Telephony -> RTP -> Stream Analysis" shows a Max skew of 2386.86mS. This mode only one stream is transmitted audio and video muxed together.

Tried RTSP mode rtsp://192.168.220.153:8554/speed-half-rate, on the player side, WireShark shows 2 RTP streams one is for video and 0.1% packet loss and one is for audio 0% packet loss.

Aug 19,2016
Test h/w AES IPsec 60000 seconds -b15M, IPn4Gii is sender/encryptor.
[  3]  0.0-1315.8 sec  2.25 GBytes  14.7 Mbits/sec   1.282 ms 32420/1678411 (1.9%)
Reverse the traffic direction 4Gii as a decryptor, I get about 16Mbps(0% drop).

Aug 18,2016
<0>===MHX(atmel_aes_hw_version_init) AES hw version=0x135
===MHX1.1(atmel_aes_dma_callback) dma_callback!!!		// Not using interrupt because of these code:

		if (dd->total > ATMEL_AES_DMA_THRESHOLD)
			err = atmel_aes_crypt_dma_start(dd);
		else
			err = atmel_aes_crypt_cpu_start(dd);

If #define ATMEL_AES_DMA_THRESHOLD 16 * 100, then ISR is called and you can see the increment in /proc/interrupts, but ping failed. Printk shows "===ISR. reg AES_ISR=0x5101". 

Aug 17,2016
Give up the HMAC driver on ipn4gii. The hw ver is 0x410 which doesn't have HMAC and UIHV. Won't succeed.

Aug 15,2016
2 pings kernel print:

<6>atmel_tdes f803c000.tdes: version: 0x701
<6>atmel_tdes f803c000.tdes: Atmel DES/TDES
<6>atmel_aes f8038000.aes: version: 0x135
<6>atmel_aes f8038000.aes: Atmel AES
Starting eurd...
<6>atmel_sha f8034000.sha: version: 0x410
<0>==MHX(atmel_sha_get_cap) Atmel h/w version=410. Only 0x510 has HMAC capability!!!
<6>atmel_sha f8034000.sha: Atmel SHA1/SHA256
ipsec_setup: Openswan IPsec apparently already active, start aborted

<6>klips_info:ipsec_init: KLIPS startup, Openswan KLIPS IPsec stack version: 2.6.43
<6>NET: Registered protocol family 15
<0>registered KLIPS /proc/sys/net===MHX3.1(omap_sham_cra_init_alg). alg_base=sha1, alg_name=hmac(sha1)
<0>===MHX3.2(omap_sham_cra_init_alg)
<0>===MHX3.3(omap_sham_cra_init_alg)
<0>===MHX3.1(omap_sham_cra_init_alg). alg_base=sha1, alg_name=hmac(sha1)
<0>===MHX3.2(omap_sham_cra_init_alg)
<0>===MHX3.3(omap_sham_cra_init_alg)
Jul 26 14:23:08 pluto[5752]: OCF support for IKE [disabled]
Jul 26 14:23:10 pluto[5752]: "jeffli02" #2: inbound added tunnel with ref=3 refhim=1
Jul 26 14:23:10 pluto[5752]: "jeffli02" #2: inbound recorded incoming ref=3
Jul 26 14:23:10 pluto[5752]: "jeffli02" #2: install_ipsec_sa() set up incoming SA, ref=3 refhim=1
Jul 26 14:23:10 pluto[5752]: "jeffli02" #2: sr for #2: prospective erouted
Jul 26 14:23:10 pluto[5752]: | route_and_eroute with c: jeffli02 (next: none) ero:jeffli02 esr:{(nil)} ro:jeffli02 rosr:{(nil)} and state: 2
Jul 26 14:23:10 pluto[5752]: "jeffli02" #2: mast_sag_eroute called op=2/replace
<0>===MHX3.1(omap_sham_cra_init_alg). alg_base=sha1, alg_name=hmac(sha1)
<0>===MHX3.2(omap_sham_cra_init_alg)
<0>===MHX3.3(omap_sham_cra_init_alg)
<0>===MHX3.1(omap_sham_cra_init_alg). alg_base=sha1, alg_name=hmac(sha1)
<0>===MHX3.2(omap_sham_cra_init_alg)
<0>===MHX3.3(omap_sham_cra_init_alg)
Starting defaults ...
<0>Reset app PID=6526

root@UserDevice:~# cat /proc/kmsg 
<0>===MHX3.1(omap_sham_cra_init_alg). alg_base=sha1, alg_name=hmac(sha1)
<0>===MHX3.2(omap_sham_cra_init_alg)
<0>===MHX3.3(omap_sham_cra_init_alg)
Jul 26 14:23:41 pluto[5752]: "jeffli02" #3: mast_sag_eroute_replace state #2{ref=3 refhim=1} with #3{ref=5 refhim=1}
<0>===MHX3.1(omap_sham_cra_init_alg). alg_base=sha1, alg_name=hmac(sha1)
<0>===MHX3.2(omap_sham_cra_init_alg)
<0>===MHX3.3(omap_sham_cra_init_alg)
<0>===MHX(omap_sham_setkey) 1.1. key_len=20
<0>===MHX(omap_sham_setkey) 1.2
<0>===MHX(omap_sham_setkey) 1.3
<0>==MHX(omap_sham_digest)10.1
<0>==MHX 6.1(omap_sham_init)
<0>==MHX 6.2(omap_sham_init) init: digest size: 20
<0>==MHX 6.3(omap_sham_init)
<0>==MHX 6.4(omap_sham_init)
<0>===MHX7.1(atmel_sha_update) 
<0>===MHX7.2(atmel_sha_update) 
<0>===MHX7.3(atmel_sha_update) 
<0>===MHX11.1(atmel_sha_handle_queue) 
<0>===MHX11.2(atmel_sha_handle_queue). ret=-115 
<0>===MHX11.3(atmel_sha_handle_queue) 
<0>===MHX11.4(atmel_sha_handle_queue) 
<0>===MHX11.5(atmel_sha_handle_queue) handling new req, op: 1, nbytes: 120
<0>===MHX11.6(atmel_sha_handle_queue) 
<0>===MHX14.1(atmel_sha_update_req)update_req: total: 120, digcnt: 0x0 0x0
<0>==MHX 15.1(atmel_sha_update_dma_start).ctx->total=120, ctx->bufcnt=64, ctx->offset=0
<0>==MHX 16.1(atmel_sha_xmit_start) dd->caps.has_dma=1
<0>==MHX17.1(atmel_sha_xmit_dma)xmit_dma: digcnt: 0x0 0x0, length: 256, final: 1. ctx->flags=0x10d0000
<0>==MHX 17.2(atmel_sha_xmit_dma)
<0>==MHX 17.3. (atmel_sha_xmit_dma) returning -EINPROGRESS!!!
<0>===MHX14.3(atmel_sha_update_req) err=-115
<0>===MHX14.4(atmel_sha_update_req)update: err: -115, digcnt: 0x0 0100
<0>===MHX11.7(atmel_sha_handle_queue) 
<0>===MHX11.9(atmel_sha_handle_queue) exit, err: -115, ret=-115
<0>==MHX(atmel_sha_finup)9.1. atmel_sha_update returned : -115 
<0>
<0>=ISR.reg=1. flags=5f
<0>==MHX12.1(atmel_sha_done_task) dd->flags=5f
<0>==MHX12.2(atmel_sha_done_task)
<0>==MHX 15.1(atmel_sha_update_dma_start).ctx->total=0, ctx->bufcnt=0, ctx->offset=120
<0>==MHX12.4.1(atmel_sha_done_task) returned err of atmel_sha_update_dma_start=0
<0>==MHX12.6(atmel_sha_done_task)
<0>===MHX13.1(atmel_sha_finish_req) err=0
<0>==MHX12.1(atmel_sha_done_task) dd->flags=10
<0>===MHX11.1(atmel_sha_handle_queue) 
<0>===MHX11.3(atmel_sha_handle_queue) 

<0>===MHX(omap_sham_setkey) 1.1. key_len=20
<0>===MHX(omap_sham_setkey) 1.2
<0>===MHX(omap_sham_setkey) 1.3
<0>==MHX(omap_sham_digest)10.1
<0>==MHX 6.1(omap_sham_init)
<0>==MHX 6.2(omap_sham_init) init: digest size: 20
<0>==MHX 6.3(omap_sham_init)
<0>==MHX 6.4(omap_sham_init)
<0>===MHX7.1(atmel_sha_update) 
<0>===MHX7.2(atmel_sha_update) 
<0>===MHX7.3(atmel_sha_update) 
<0>===MHX11.1(atmel_sha_handle_queue) 
<0>===MHX11.2(atmel_sha_handle_queue). ret=-115 
<0>===MHX11.3(atmel_sha_handle_queue) 
<0>===MHX11.4(atmel_sha_handle_queue) 
<0>===MHX11.5(atmel_sha_handle_queue) handling new req, op: 1, nbytes: 120
<0>===MHX11.6(atmel_sha_handle_queue) 
<0>===MHX14.1(atmel_sha_update_req)update_req: total: 120, digcnt: 0x0 0x0
<0>==MHX 15.1(atmel_sha_update_dma_start).ctx->total=120, ctx->bufcnt=64, ctx->offset=0
<0>==MHX 16.1(atmel_sha_xmit_start) dd->caps.has_dma=1
<0>==MHX17.1(atmel_sha_xmit_dma)xmit_dma: digcnt: 0x0 0x0, length: 256, final: 1. ctx->flags=0x10d0000
<0>==MHX 17.2(atmel_sha_xmit_dma)
<0>==MHX 17.3. (atmel_sha_xmit_dma) returning -EINPROGRESS!!!
<0>===MHX14.3(atmel_sha_update_req) err=-115
<0>===MHX14.4(atmel_sha_update_req)update: err: -115, digcnt: 0x0 0100
<0>===MHX11.7(atmel_sha_handle_queue) 
<0>===MHX11.9(atmel_sha_handle_queue) exit, err: -115, ret=-115
<0>==MHX(atmel_sha_finup)9.1. atmel_sha_update returned : -115 
<0>
<0>=ISR.reg=1. flags=5f
<0>==MHX12.1(atmel_sha_done_task) dd->flags=5f
<0>==MHX12.2(atmel_sha_done_task)
<0>==MHX 15.1(atmel_sha_update_dma_start).ctx->total=0, ctx->bufcnt=0, ctx->offset=120
<0>==MHX12.4.1(atmel_sha_done_task) returned err of atmel_sha_update_dma_start=0
<0>==MHX12.6(atmel_sha_done_task)
<0>===MHX13.1(atmel_sha_finish_req) err=0
<0>==MHX12.1(atmel_sha_done_task) dd->flags=10
<0>===MHX11.1(atmel_sha_handle_queue) 
<0>===MHX11.3(atmel_sha_handle_queue) 







Aug 12,2016
Tried to port LinuxAT91(Kernel V4) GIT hmac-sha code to 4Gii(KernelV3). Too much difference in crypto/authenc.c. crypto_authenc_extractkeys() missing. Can not use v4 crypto in the v3 crypto in 4Gii.

Aug 9, 2016

crypto/hmac.c only calls shash. It doesn't use ahash.

Test the profile with and without atmel accelerator. KIPS+OCF. When test without h/w accelerator, just remove the kernel module. Use -b 16m to do iperf test.
1. AES128/SHA1 without h/w crypto:
CPU: CPU with timer interrupt, speed 0 MHz (estimated)
Profiling through timer interrupt
310      13.7533  vmlinux                  aes_encrypt
214       9.4942  vmlinux                  sha_transform
123       5.4570  vmlinux                  vprintk_emit
73        3.2387  vmlinux                  memcpy
69        3.0612  vmlinux                  ipt_do_table
49        2.1739  vmlinux                  __do_softirq
45        1.9965  vmlinux                  extract_buf
36        1.5972  ld-uClibc-0.9.33.2.so    /lib/ld-uClibc-0.9.33.2.so
36        1.5972  vmlinux                  __memzero
36        1.5972  vmlinux                  ip_defrag
29        1.2866  vmlinux                  kmem_cache_alloc
29        1.2866  vmlinux                  macb_rx
25        1.1091  vmlinux                  __netif_receive_skb
24        1.0648  cryptosoft.ko            swcr_process_req
22        0.9760  vmlinux                  __kmalloc
22        0.9760  vmlinux                  csum_partial
21        0.9317  vmlinux                  br_nf_pre_routing
20        0.8873  vmlinux                  dev_queue_xmit
20        0.8873  vmlinux                  nf_conntrack_in
19        0.8429  vmlinux                  local_bh_enable
18        0.7986  vmlinux                  ip_route_input_noref
17        0.7542  ebtables.ko              ebt_do_table
17        0.7542  ipsec.ko                 ipsec_xmit_encap_init
17        0.7542  ipsec.ko                 ipsec_xmit_init2
17        0.7542  vmlinux                  crypto_xor
17        0.7542  vmlinux                  nf_iterate
16        0.7098  vmlinux                  fib_table_lookup
16        0.7098  vmlinux                  kmem_cache_free
14        0.6211  vmlinux                  kfree
13        0.5768  vmlinux                  __netdev_alloc_frag
12        0.5324  busybox                  /bin/busybox
12        0.5324  vmlinux                  br_handle_frame

2. AES128/SHA1 with hw crypto:
CPU: CPU with timer interrupt, speed 0 MHz (estimated)
Profiling through timer interrupt
samples  %        app name                 symbol name
255      11.7026  vmlinux                  sha_transform
164       7.5264  vmlinux                  vprintk_emit
101       4.6352  vmlinux                  memcpy
71        3.2584  vmlinux                  extract_buf
59        2.7077  vmlinux                  __do_softirq
58        2.6618  vmlinux                  ipt_do_table
43        1.9734  vmlinux                  __memzero
33        1.5145  cryptosoft.ko            swcr_process_req
31        1.4227  vmlinux                  ip_defrag
28        1.2850  vmlinux                  __netif_receive_skb
27        1.2391  ipsec.ko                 ipsec_xmit_init2
26        1.1932  vmlinux                  __kmalloc
26        1.1932  vmlinux                  nf_iterate
25        1.1473  vmlinux                  kmem_cache_alloc
24        1.1014  ebtables.ko              ebt_do_table
24        1.1014  vmlinux                  macb_rx
23        1.0555  ocf.ko                   crypto_proc
20        0.9179  vmlinux                  csum_partial
20        0.9179  vmlinux                  dev_queue_xmit
20        0.9179  vmlinux                  kfree
19        0.8720  atmel-aes.ko             atmel_aes_crypt_dma_start
18        0.8261  vmlinux                  fib_table_lookup
16        0.7343  ld-uClibc-0.9.33.2.so    /lib/ld-uClibc-0.9.33.2.so
16        0.7343  vmlinux                  ip_route_input_noref
15        0.6884  vmlinux                  __netdev_alloc_frag
15        0.6884  vmlinux                  br_nf_pre_routing
15        0.6884  vmlinux                  macb_start_xmit
14        0.6425  busybox                  /bin/busybox
14        0.6425  ipsec.ko                 ipsec_xmit_encap_init
14        0.6425  vmlinux                  crypto_sha1_update
14        0.6425  vmlinux                  nf_conntrack_in
13        0.5966  ipsec.ko                 ipsec_xsm
13        0.5966  vmlinux                  __ip_route_output_key
13        0.5966  vmlinux                  ip_finish_output
13        0.5966  vmlinux                  ip_rcv
12        0.5507  cryptosoft.ko            swcr_process
12        0.5507  vmlinux                  br_handle_frame_finish
11        0.5048  atmel-aes.ko             atmel_aes_handle_queue
11        0.5048  ipsec.ko                 ipsec_xmit_send
11        0.5048  vmlinux                  __nf_conntrack_find_get
11        0.5048  vmlinux                  atc_tasklet
10        0.4589  ipsec.ko                 ipsec_lifetime_check
10        0.4589  vmlinux                  __copy_skb_header
10        0.4589  vmlinux                  __netdev_alloc_skb
10        0.4589  vmlinux                  fib_rules_lookup
10        0.4589  vmlinux                  skb_release_head_state
9         0.4130  ipsec.ko                 ipsec_mast_start_xmit
9         0.4130  ipsec.ko                 ipsec_ocf_xmit
9         0.4130  vmlinux                  br_fdb_update
9         0.4130  vmlinux                  br_handle_frame
9         0.4130  vmlinux                  br_nf_pre_routing_finish
9         0.4130  vmlinux                  check_leaf.isra.9
9         0.4130  vmlinux                  do_page_fault
9         0.4130  vmlinux                  inet_frag_find
9         0.4130  vmlinux                  ip_forward
9         0.4130  vmlinux                  ip_fragment
9         0.4130  vmlinux                  kmem_cache_free
8         0.3671  ipsec.ko                 ipsec_xmit_cont
8         0.3671  vmlinux                  atc_prep_slave_sg
8         0.3671  vmlinux                  dev_hard_start_xmit
8         0.3671  vmlinux                  hmac_setkey
8         0.3671  vmlinux                  ipqhashfn
8         0.3671  vmlinux                  local_bh_enable
7         0.3212  atmel-aes.ko             atmel_aes_done_task
7         0.3212  ipsec.ko                 __ipsec_sa_put
7         0.3212  ocf.ko                   crypto_dispatch
7         0.3212  ocf.ko                   crypto_invoke.isra.4
7         0.3212  vmlinux                  eth_type_trans
7         0.3212  vmlinux                  skb_copy_bits

6         0.2754  cryptosoft.ko            swcr_process_req_complete
6         0.2754  ipsec.ko                 _365
6         0.2754  ipsec.ko                 ipsec_xmit_ipip
6         0.2754  libuClibc-0.9.33.2.so    /lib/libuClibc-0.9.33.2.so
6         0.2754  vmlinux                  ____nf_conntrack_find
6         0.2754  vmlinux                  __alloc_skb
6         0.2754  vmlinux                  __br_fdb_get
6         0.2754  vmlinux                  br_parse_ip_options
6         0.2754  vmlinux                  clk_enable
6         0.2754  vmlinux                  fib_validate_source
6         0.2754  vmlinux                  inet_getpeer
6         0.2754  vmlinux                  ip_finish_output2
6         0.2754  vmlinux                  iptable_mangle_hook
6         0.2754  vmlinux                  local_bh_disable
6         0.2754  vmlinux                  mod_timer
6         0.2754  vmlinux                  nf_hook_slow
6         0.2754  vmlinux                  skb_push
6         0.2754  vmlinux                  udp_error
5         0.2295  ipsec.ko                 ipsec_xmit_esp
5         0.2295  vmlinux                  __do_fault
5         0.2295  vmlinux                  __ip_select_ident
5         0.2295  vmlinux                  account
5         0.2295  vmlinux                  arm_dma_unmap_sg
5         0.2295  vmlinux                  br_nf_post_routing
5         0.2295  vmlinux                  build_skb
5         0.2295  vmlinux                  conntrack_mt
5         0.2295  vmlinux                  fib_get_table
5         0.2295  vmlinux                  ip4_frag_init
5         0.2295  vmlinux                  ipv4_conntrack_defrag
5         0.2295  vmlinux                  ipv4_mtu
5         0.2295  vmlinux                  neigh_resolve_output
5         0.2295  vmlinux                  netif_skb_features
5         0.2295  vmlinux                  nf_nat_out
5         0.2295  vmlinux                  setup_pre_routing
5         0.2295  vmlinux                  skb_pull_rcsum
5         0.2295  vmlinux                  skb_put
5         0.2295  vmlinux                  skb_release_data
4         0.1836  ipsec.ko                 ipsec_xmit_sanity_check_skb
4         0.1836  ipsec.ko                 ipsec_xmit_state_new
4         0.1836  ocf.ko                   crypto_done

3. 3DES/MD5 without hw crypto
CPU: CPU with timer interrupt, speed 0 MHz (estimated)
Profiling through timer interrupt
samples  %        app name                 symbol name
447      29.4855  vmlinux                  des3_ede_encrypt
347      22.8892  vmlinux                  default_idle
43        2.8364  vmlinux                  memcpy
38        2.5066  vmlinux                  ipt_do_table
30        1.9789  vmlinux                  md5_transform
29        1.9129  vmlinux                  __do_softirq
22        1.4512  ld-uClibc-0.9.33.2.so    /lib/ld-uClibc-0.9.33.2.so
18        1.1873  vmlinux                  ip_defrag
16        1.0554  vmlinux                  vprintk_emit
14        0.9235  vmlinux                  crypto_xor
13        0.8575  vmlinux                  extract_buf
13        0.8575  vmlinux                  macb_rx
12        0.7916  busybox                  /bin/busybox
12        0.7916  vmlinux                  __netif_receive_skb
12        0.7916  vmlinux                  br_nf_pre_routing
12        0.7916  vmlinux                  nf_iterate
11        0.7256  vmlinux                  __memzero
11        0.7256  vmlinux                  kmem_cache_alloc
10        0.6596  vmlinux                  __netdev_alloc_frag
8         0.5277  vmlinux                  fib_table_lookup
7         0.4617  ipsec.ko                 ipsec_xmit_init2
7         0.4617  vmlinux                  __sync_icache_dcache
7         0.4617  vmlinux                  br_handle_frame_finish
7         0.4617  vmlinux                  crypto_cbc_encrypt
7         0.4617  vmlinux                  csum_partial
7         0.4617  vmlinux                  do_page_fault
7         0.4617  vmlinux                  nf_conntrack_in
6         0.3958  vmlinux                  ip_finish_output
5         0.3298  cryptosoft.ko            swcr_process_req
5         0.3298  vmlinux                  __br_fdb_get
5         0.3298  vmlinux                  br_parse_ip_options
5         0.3298  vmlinux                  copy_page
5         0.3298  vmlinux                  dev_queue_xmit
5         0.3298  vmlinux                  filemap_fault
5         0.3298  vmlinux                  ip_forward_finish
5         0.3298  vmlinux                  ipv4_mtu
5         0.3298  vmlinux                  local_bh_enable
5         0.3298  vmlinux                  nf_ip_checksum
5         0.3298  vmlinux                  nf_nat_packet
4         0.2639  ipsec.ko                 ipsec_ocf_xmit
4         0.2639  ipsec.ko                 ipsec_xmit_cont
4         0.2639  libuClibc-0.9.33.2.so    /lib/libuClibc-0.9.33.2.so
4         0.2639  ocf.ko                   crypto_proc
4         0.2639  vmlinux                  __ip_route_output_key
4         0.2639  vmlinux                  br_fdb_update
4         0.2639  vmlinux                  br_handle_frame
4         0.2639  vmlinux                  inet_getpeer
4         0.2639  vmlinux                  macb_start_xmit
4         0.2639  vmlinux                  skb_dst_set_noref
4         0.2639  vmlinux                  skb_push
4         0.2639  vmlinux                  skb_release_data
3         0.1979  cryptosoft.ko            swcr_process_req_complete
3         0.1979  ebtables.ko              ebt_do_table
3         0.1979  ipsec.ko                 ipsec_sa_getbyref
3         0.1979  ipsec.ko                 ipsec_xmit_encap_init
3         0.1979  ipsec.ko                 ipsec_xmit_esp
3         0.1979  vmlinux                  __do_fault
3         0.1979  vmlinux                  __ip_dev_find
3         0.1979  vmlinux                  __nf_conntrack_find_get
3         0.1979  vmlinux                  br_netfilter_run_hooks
3         0.1979  vmlinux                  eth_type_trans
3         0.1979  vmlinux                  fib_rules_lookup
3         0.1979  vmlinux                  find_vma
3         0.1979  vmlinux                  hash_conntrack_raw
3         0.1979  vmlinux                  hmac_setkey


4. 3DES/MD5 with h/w crypto
CPU: CPU with timer interrupt, speed 0 MHz (estimated)
Profiling through timer interrupt
samples  %        app name                 symbol name
38        6.9597  vmlinux                  md5_transform
24        4.3956  vmlinux                  memcpy
17        3.1136  vmlinux                  ipt_do_table
14        2.5641  vmlinux                  __do_softirq
13        2.3810  vmlinux                  __memzero
13        2.3810  vmlinux                  extract_buf
12        2.1978  vmlinux                  vprintk_emit
11        2.0147  vmlinux                  macb_rx
10        1.8315  cryptosoft.ko            swcr_process_req
9         1.6484  vmlinux                  nf_iterate
8         1.4652  vmlinux                  __netif_receive_skb
8         1.4652  vmlinux                  kmem_cache_alloc
7         1.2821  atmel-tdes.ko            atmel_tdes_handle_queue
7         1.2821  ebtables.ko              ebt_do_table
7         1.2821  vmlinux                  mod_timer
6         1.0989  ld-uClibc-0.9.33.2.so    /lib/ld-uClibc-0.9.33.2.so
6         1.0989  vmlinux                  __alloc_skb
6         1.0989  vmlinux                  __kmalloc
6         1.0989  vmlinux                  atc_tasklet
6         1.0989  vmlinux                  csum_partial
6         1.0989  vmlinux                  dev_hard_start_xmit
6         1.0989  vmlinux                  local_bh_enable
5         0.9158  busybox                  /bin/busybox
5         0.9158  ipsec.ko                 ipsec_xmit_encap_init
5         0.9158  ipsec.ko                 ipsec_xmit_send
5         0.9158  vmlinux                  finish_task_switch.isra.53
5         0.9158  vmlinux                  ip_defrag
5         0.9158  vmlinux                  nf_conntrack_in
5         0.9158  vmlinux                  sha_transform
5         0.9158  vmlinux                  xfrm_lookup
4         0.7326  ipsec.ko                 __ipsec_sa_put
4         0.7326  ipsec.ko                 ipsec_ocf_xmit
4         0.7326  ipsec.ko                 ipsec_xmit_init2
4         0.7326  vmlinux                  __ip_select_ident
4         0.7326  vmlinux                  __netdev_alloc_frag
4         0.7326  vmlinux                  br_handle_frame
4         0.7326  vmlinux                  br_nf_pre_routing
4         0.7326  vmlinux                  eth_type_trans
4         0.7326  vmlinux                  inet_frag_find
4         0.7326  vmlinux                  ip_fragment
4         0.7326  vmlinux                  md5_update
3         0.5495  cryptosoft.ko            swcr_process_req_complete
3         0.5495  ipsec.ko                 _365
3         0.5495  ipsec.ko                 ipsec_lifetime_check
3         0.5495  ipsec.ko                 ipsec_xmit_esp
3         0.5495  ipsec.ko                 ipsec_xmit_state_new
3         0.5495  ipsec.ko                 prng_bytes
3         0.5495  ocf.ko                   crypto_dispatch
3         0.5495  ocf.ko                   crypto_ret_proc
3         0.5495  vmlinux                  __copy_skb_header
3         0.5495  vmlinux                  __ip_route_output_key
3         0.5495  vmlinux                  atc_control
3         0.5495  vmlinux                  atc_desc_get
3         0.5495  vmlinux                  atc_prep_slave_sg
3         0.5495  vmlinux                  br_handle_frame_finish
3         0.5495  vmlinux                  clk_disable
3         0.5495  vmlinux                  ip_finish_output
3         0.5495  vmlinux                  ip_forward
3         0.5495  vmlinux                  ip_route_input_noref
3         0.5495  vmlinux                  kfree
3         0.5495  vmlinux                  local_bh_disable
3         0.5495  vmlinux                  macb_start_xmit
3         0.5495  vmlinux                  netif_skb_features
3         0.5495  vmlinux                  sch_direct_xmit
3         0.5495  vmlinux                  skb_release_head_state
2         0.3663  atmel-tdes.ko            atmel_tdes_crypt
2         0.3663  atmel-tdes.ko            atmel_tdes_crypt_start
2         0.3663  cryptosoft.ko            swcr_process
2         0.3663  ipsec.ko                 ipsec_xmit_cont
2         0.3663  ipsec.ko                 ipsec_xsm
2         0.3663  libuClibc-0.9.33.2.so    /lib/libuClibc-0.9.33.2.so
2         0.3663  ocf.ko                   crypto_invoke.isra.4
2         0.3663  vmlinux                  __divsi3
2         0.3663  vmlinux                  __dma_page_dev_to_cpu
2         0.3663  vmlinux                  __do_fault
2         0.3663  vmlinux                  __ip_dev_find
2         0.3663  vmlinux                  __kfree_skb
2         0.3663  vmlinux                  __netdev_alloc_skb
2         0.3663  vmlinux                  __nf_conntrack_find_get
2         0.3663  vmlinux                  arm_dma_map_sg
2         0.3663  vmlinux                  br_fdb_update
2         0.3663  vmlinux                  check_leaf.isra.9
2         0.3663  vmlinux                  crypto_shash_setkey
2         0.3663  vmlinux                  dev_queue_xmit
2         0.3663  vmlinux                  dst_release
2         0.3663  vmlinux                  fib_rules_lookup
2         0.3663  vmlinux                  get_page_from_freelist
2         0.3663  vmlinux                  hmac_setkey
2         0.3663  vmlinux                  inet_frag_kill
2         0.3663  vmlinux                  ip_output
2         0.3663  vmlinux                  ipv4_get_l4proto
2         0.3663  vmlinux                  kmem_cache_free
2         0.3663  vmlinux                  nf_ct_get_tuple
2         0.3663  vmlinux                  nf_ip_checksum
2         0.3663  vmlinux                  nf_nat_out
2         0.3663  vmlinux                  sg_init_table
2         0.3663  vmlinux                  shash_finup_unaligned
2         0.3663  vmlinux                  skb_try_coalesce
2         0.3663  vmlinux                  tasklet_action
1         0.1832  atmel-tdes.ko            atmel_tdes_done_task
1         0.1832  cryptosoft.ko            swcr_process_callback

5. 3DES/SHA1 with no hw crypto
Unloading oprofile module
CPU: CPU with timer interrupt, speed 0 MHz (estimated)
Profiling through timer interrupt
samples  %        app name                 symbol name
418      30.0287  vmlinux                  des3_ede_encrypt
346      24.8563  vmlinux                  default_idle
41        2.9454  vmlinux                  sha_transform
34        2.4425  vmlinux                  ipt_do_table
31        2.2270  vmlinux                  memcpy
29        2.0833  vmlinux                  __do_softirq
20        1.4368  vmlinux                  vprintk_emit
17        1.2213  vmlinux                  macb_rx
14        1.0057  vmlinux                  ip_defrag
13        0.9339  vmlinux                  __netif_receive_skb
12        0.8621  vmlinux                  crypto_xor
11        0.7902  cryptosoft.ko            swcr_process_req
11        0.7902  vmlinux                  nf_conntrack_in
10        0.7184  vmlinux                  __kmalloc
10        0.7184  vmlinux                  br_nf_pre_routing
10        0.7184  vmlinux                  kmem_cache_alloc
9         0.6466  vmlinux                  nf_iterate
8         0.5747  ld-uClibc-0.9.33.2.so    /lib/ld-uClibc-0.9.33.2.so
7         0.5029  ebtables.ko              ebt_do_table
7         0.5029  vmlinux                  inet_getpeer
7         0.5029  vmlinux                  ip_route_input_noref
6         0.4310  vmlinux                  __memzero
6         0.4310  vmlinux                  __skb_clone
6         0.4310  vmlinux                  crypto_cbc_encrypt
5         0.3592  vmlinux                  __sync_icache_dcache
5         0.3592  vmlinux                  br_handle_frame
5         0.3592  vmlinux                  copy_page
5         0.3592  vmlinux                  csum_partial
5         0.3592  vmlinux                  find_vma
5         0.3592  vmlinux                  macb_start_xmit
4         0.2874  ipsec.ko                 ipsec_xsm
4         0.2874  vmlinux                  __alloc_skb
4         0.2874  vmlinux                  __netdev_alloc_frag
4         0.2874  vmlinux                  blkcipher_walk_next
4         0.2874  vmlinux                  dev_hard_start_xmit
4         0.2874  vmlinux                  fib_table_lookup
4         0.2874  vmlinux                  ip_finish_output
4         0.2874  vmlinux                  ip_forward
4         0.2874  vmlinux                  ip_rcv
4         0.2874  vmlinux                  ipv4_helper
4         0.2874  vmlinux                  xfrm_lookup
3         0.2155  busybox                  /bin/busybox
3         0.2155  ipsec.ko                 ipsec_lifetime_check
3         0.2155  ipsec.ko                 ipsec_xmit_encap_init
3         0.2155  ipsec.ko                 ipsec_xmit_esp
3         0.2155  ipsec.ko                 ipsec_xmit_init2
3         0.2155  ipsec.ko                 ipsec_xmit_send
3         0.2155  libuClibc-0.9.33.2.so    /lib/libuClibc-0.9.33.2.so
3         0.2155  ocf.ko                   crypto_proc
3         0.2155  vmlinux                  __br_fdb_get
3         0.2155  vmlinux                  __copy_skb_header
3         0.2155  vmlinux                  __do_fault
3         0.2155  vmlinux                  __ip_route_output_key
3         0.2155  vmlinux                  br_handle_frame_finish
3         0.2155  vmlinux                  br_nf_pre_routing_finish
3         0.2155  vmlinux                  do_page_fault
3         0.2155  vmlinux                  extract_buf
3         0.2155  vmlinux                  fib4_rule_match
3         0.2155  vmlinux                  flush_dcache_page
3         0.2155  vmlinux                  hash_conntrack_raw
3         0.2155  vmlinux                  inet_frag_kill
3         0.2155  vmlinux                  ip_output
3         0.2155  vmlinux                  ipqhashfn
3         0.2155  vmlinux                  local_bh_enable
3         0.2155  vmlinux                  mod_timer
3         0.2155  vmlinux                  netif_skb_features
3         0.2155  vmlinux                  nf_hook_slow
3         0.2155  vmlinux                  nf_nat_out
3         0.2155  vmlinux                  skb_put
3         0.2155  vmlinux                  skb_release_head_state
3         0.2155  vmlinux                  v7_flush_kern_dcache_area
2         0.1437  cryptosoft.ko            swcr_process_req_complete
2         0.1437  ipsec.ko                 _365
2         0.1437  ipsec.ko                 ipsec_ocf_xmit


6. 3DES/SHA1 with hw/crypto atmel-tdes.ko
CPU: CPU with timer interrupt, speed 0 MHz (estimated)
Profiling through timer interrupt
samples  %        app name                 symbol name
92       10.4664  vmlinux                  sha_transform
46        5.2332  vmlinux                  memcpy
33        3.7543  vmlinux                  ipt_do_table
30        3.4130  vmlinux                  vprintk_emit
21        2.3891  vmlinux                  __do_softirq
19        2.1615  ld-uClibc-0.9.33.2.so    /lib/ld-uClibc-0.9.33.2.so
19        2.1615  libuClibc-0.9.33.2.so    /lib/libuClibc-0.9.33.2.so
18        2.0478  vmlinux                  kmem_cache_alloc
17        1.9340  busybox                  /bin/busybox
17        1.9340  vmlinux                  macb_rx
15        1.7065  vmlinux                  ip_defrag
14        1.5927  cryptosoft.ko            swcr_process_req
12        1.3652  vmlinux                  __memzero
12        1.3652  vmlinux                  do_page_fault
12        1.3652  vmlinux                  extract_buf
11        1.2514  vmlinux                  fib_table_lookup
10        1.1377  atmel-tdes.ko            atmel_tdes_crypt_start
10        1.1377  vmlinux                  __kmalloc
9         1.0239  vmlinux                  copy_page
9         1.0239  vmlinux                  csum_partial
7         0.7964  ipsec.ko                 ipsec_xmit_send
7         0.7964  vmlinux                  __netif_receive_skb
7         0.7964  vmlinux                  atc_tasklet
6         0.6826  ipsec.ko                 ipsec_xmit_init2
6         0.6826  vmlinux                  __netdev_alloc_frag
6         0.6826  vmlinux                  br_handle_frame
6         0.6826  vmlinux                  dev_queue_xmit
6         0.6826  vmlinux                  inet_getpeer
6         0.6826  vmlinux                  ip_route_input_noref
6         0.6826  vmlinux                  nf_hook_slow
6         0.6826  vmlinux                  nf_iterate
5         0.5688  ipsec.ko                 ipsec_mast_start_xmit
5         0.5688  ipsec.ko                 ipsec_xmit_cont
5         0.5688  ocf.ko                   crypto_copyback
5         0.5688  vmlinux                  __ip_route_output_key
5         0.5688  vmlinux                  br_nf_pre_routing
5         0.5688  vmlinux                  check_leaf.isra.9
5         0.5688  vmlinux                  dev_hard_start_xmit
5         0.5688  vmlinux                  ip_forward
4         0.4551  ebtables.ko              ebt_do_table
4         0.4551  ipsec.ko                 ipsec_xsm
4         0.4551  vmlinux                  __copy_skb_header
4         0.4551  vmlinux                  atc_desc_get
4         0.4551  vmlinux                  br_handle_frame_finish
4         0.4551  vmlinux                  inet_frag_find
4         0.4551  vmlinux                  ip_rcv
4         0.4551  vmlinux                  kfree
4         0.4551  vmlinux                  kmem_cache_free
4         0.4551  vmlinux                  memset
4         0.4551  vmlinux                  radix_tree_lookup_element
3         0.3413  atmel-tdes.ko            atmel_tdes_crypt
3         0.3413  atmel-tdes.ko            atmel_tdes_handle_queue
3         0.3413  cryptosoft.ko            swcr_process
3         0.3413  ipsec.ko                 _333
3         0.3413  ipsec.ko                 __ipsec_sa_put
3         0.3413  ipsec.ko                 ipsec_ocf_xmit
3         0.3413  vmlinux                  __do_fault
3         0.3413  vmlinux                  __nf_conntrack_find_get
3         0.3413  vmlinux                  arm_dma_unmap_sg
3         0.3413  vmlinux                  atc_tx_submit
3         0.3413  vmlinux                  br_parse_ip_options
3         0.3413  vmlinux                  eth_type_trans
3         0.3413  vmlinux                  fib_get_table
3         0.3413  vmlinux                  fib_rules_lookup
3         0.3413  vmlinux                  ip_finish_output
3         0.3413  vmlinux                  ip_finish_output2
3         0.3413  vmlinux                  ip_fragment
3         0.3413  vmlinux                  ipv4_conntrack_defrag
3         0.3413  vmlinux                  ipv4_mtu
3         0.3413  vmlinux                  macb_start_xmit
3         0.3413  vmlinux                  mod_timer
3         0.3413  vmlinux                  napi_complete
3         0.3413  vmlinux                  net_rx_action
3         0.3413  vmlinux                  skb_copy_bits
3         0.3413  vmlinux                  skb_release_data
2         0.2275  atmel-tdes.ko            atmel_tdes_done_task
2         0.2275  ebtable_broute.ko        _11


Aug 5,2016
Check-in conde the OCF,CryptoSoft, CryptoDev,atmel-* are all built in kernel not kernel modules. 

Sender side ping -c 2 and dump debug message on sender GW:

root@UserDevice:~# cat /proc/kmsg 

<6>UDP_ENCAP_ESPINUDP_NON_IKE: len=92 0xf1f5e90b
<6>UDP_ENCAP_ESPINUDP_NON_IKE: IKE packet detected
<6>ipsec_sa_get: ipsec_sa cebf0000 SA:tun.1003@10.1.1.50, ref:5 reference count (3++) incremented by ipsec_sa_getbyref:583.
<6>klips_debug:ipsec_xmit_init2: found ipsec_sa -- SA:<IPIP>  (error)
<6>klips_debug:ipsec_xmit_init2: calling room for <IPIP>, SA:tun.1003@10.1.1.50
<6>klips_debug:ipsec_xmit_init2: Required head,tailroom: 20,0
<6>klips_debug:ipsec_xmit_init2: calling room for <ESP_AES_HMAC_SHA1>, SA:esp.27734b18@10.1.1.50
<6>klips_debug:ipsec_xmit_init2: Required head,tailroom: 24,24
<6>klips_debug:ipsec_xmit_init2: existing head,tailroom: 80,28 before applying xforms with head,tailroom: 44,24 .
<6>klips_debug:ipsec_xmit_init2: mtu:1460 physmtu:1460 tothr:44 tottr:24 mtudiff:68 ippkttotlen:84
<6>klips_info:ipsec_xmit_init2: dev mast0 mtu of 1460 decreased by 73 to 1387
<6>klips_debug:ipsec_xmit_init2: hard header already stripped.
<6>klips_debug:ipsec_xmit_init2: data fits in existing skb
<6>klips_debug:   IP: ihl:20 ver:4 tos:0 tlen:84 id:0 DF frag_off:0 ttl:63 proto:1 (ICMP) chk:13676 saddr:192.168.168.100 daddr:192.168.220.135 type:code=8:0
<6>klips_debug:ipsec_xmit_encap_init: calling output for <IPIP>, SA:tun.1003@10.1.1.50
<6>klips_debug:ipsec_xmit_encap_init: pushing 20 bytes, putting 0, proto 4.
<6>klips_debug:ipsec_xmit_encap_init: head,tailroom: 60,28 before xform.
<6>klips_debug:ipsec_xmit_cont: after <IPIP>, SA:tun.1003@10.1.1.50:
<6>klips_debug:   IP: ihl:20 ver:4 tos:0 tlen:104 id:57897 frag_off:0 ttl:64 proto:4 chk:33317 saddr:10.1.1.16 daddr:10.1.1.50
<6>ipsec_sa_put: ipsec_sa cebf0000 SA:tun.1003@10.1.1.50, ref:5 reference count (4--) decremented by ipsec_xmit_cont:1286.
<6>ipsec_sa_get: ipsec_sa cebf0800 SA:esp.27734b18@10.1.1.50, ref:6 reference count (3++) incremented by ipsec_xmit_cont:1291.
<6>klips_debug:ipsec_xmit_encap_init: calling output for <ESP_AES_HMAC_SHA1>, SA:esp.27734b18@10.1.1.50
<6>klips_debug:ipsec_xmit_encap_init: pushing 24 bytes, putting 24, proto 50.
<6>klips_debug:ipsec_xmit_encap_init: head,tailroom: 36,4 before xform.
<6>klips_debug:ipsec_ocf_xmit
<0>crypto_dispatch()
<0>crypto/ocf/crypto.c,814: Q_LOCK()
<0>crypto/ocf/crypto.c,865: Q_UNLOCK()
<0>crypto/ocf/crypto.c,1443: Q_LOCK()
<0>crypto_proc - awake
<0>crypto/ocf/crypto.c,1337: Q_UNLOCK()
<0>crypto_invoke()
<0>swcr_process()
<0>swcr_process_req()
<0>crypto/ocf/crypto.c,1341: Q_LOCK()
<0>crypto_proc - sleeping (qe=1 qb=0 kqe=1 kqb=0)
<0>crypto/ocf/crypto.c,1429: Q_UNLOCK()
<0>swcr_process_callback()
<0>swcr_process_req_complete()
<0>swcr_process_req()
<0>hash OP success 0
<0>swcr_process_req_complete()
<0>swcr_process_req_complete crypto_done cde68e40
<0>crypto_done()
<0>crypto/ocf/crypto.c,1153: Q_LOCK()
<0>crypto/ocf/crypto.c,1155: Q_UNLOCK()
<0>crypto/ocf/crypto.c,1182: RETQ_LOCK
<0>crypto/ocf/crypto.c,1185: RETQ_UNLOCK
<0>crypto/ocf/crypto.c,1523: RETQ_LOCK
<0>crypto_ret_proc - awake
<0>crypto/ocf/crypto.c,1494: RETQ_UNLOCK
<6>klips_debug:ipsec_ocf_xmit_cb
<0>crypto/ocf/crypto.c,1502: RETQ_LOCK
<0>crypto_ret_proc - sleeping
<0>crypto/ocf/crypto.c,1509: RETQ_UNLOCK
<6>klips_debug:ipsec_xmit_cont: after <ESP_AES_HMAC_SHA1>, SA:esp.27734b18@10.1.1.50:
<6>klips_debug:   IP: ihl:20 ver:4 tos:0 tlen:152 id:57897 frag_off:0 ttl:64 proto:50 (ESP) chk:33317 saddr:10.1.1.16 daddr:10.1.1.50
<6>ipsec_sa_put: ipsec_sa cebf0800 SA:esp.27734b18@10.1.1.50, ref:6 reference count (4--) decremented by ipsec_xmit_cont:1286.
<6>klips_debug:ipsec_xmit_send: ...done, calling ip_send() on device:br-wan(mast)
<6>klips_debug:   IP: ihl:20 ver:4 tos:0 tlen:152 id:57897 frag_off:0 ttl:64 proto:50 (ESP) chk:33223 saddr:10.1.1.16 daddr:10.1.1.50
<6>klips_debug: ipsec_rcv_init(st=0,nxt=1)
<6>klips_debug:ipsec_rcv_init: <<< Info -- skb->dev=br-wan 
<6>klips_debug:ipsec_rcv_init: assigning packet ownership to virtual device mast0 from physical device br-wan.
<6>klips_debug:   IP: ihl:20 ver:4 tos:0 tlen:152 id:43151 frag_off:0 ttl:64 proto:50 (ESP) chk:47969 saddr:10.1.1.50 daddr:10.1.1.16
<6>klips_debug: ipsec_rcv_decap_init(st=1,nxt=2)
<6>klips_debug: ipsec_rcv_decap_lookup(st=2,nxt=3)
<6>klips_debug: ipsec_rcv_auth_init(st=3,nxt=4)
<6>ipsec_sa_getbyid: linked entry in ipsec_sa table for hash=109 of SA:esp.bceccc9@10.1.1.16 requested.
<6>ipsec_sa_get: ipsec_sa cebf0400 SA:esp.bceccc9@10.1.1.16, ref:8 reference count (3++) incremented by ipsec_sa_getbyid:558.
<6>klips_debug:ipsec_rcv_auth_init: SA:esp.bceccc9@10.1.1.16, src=10.1.1.50 of pkt agrees with expected SA source address policy.
<6>klips_debug:ipsec_rcv_auth_init: SA:esp.bceccc9@10.1.1.16 First SA in group.
<6>klips_debug:ipsec_rcv_auth_init: natt_type=0 tdbp->ips_natt_type=0 : ok
<6>klips_debug:ipsec_rcv: packet from 10.1.1.50 received with seq=98517 (iv)=0xc37851589c3251ce iplen=132 esplen=120 sa=esp.bceccc9@10.1.1.16
<6>klips_debug: ipsec_rcv_auth_calc(st=5,nxt=6)
<6>klips_debug:ipsec_rcv_auth_calc: encalg = 12, authalg = 3.
<6>klips_debug:ipsec_ocf_rcv
<0>crypto_dispatch()
<0>crypto/ocf/crypto.c,814: Q_LOCK()
<0>crypto/ocf/crypto.c,865: Q_UNLOCK()
<0>crypto/ocf/crypto.c,1443: Q_LOCK()
<0>crypto_proc - awake
<0>crypto/ocf/crypto.c,1337: Q_UNLOCK()
<0>crypto_invoke()
<0>swcr_process()
<0>swcr_process_req()
<0>hash OP success 0
<0>swcr_process_req_complete()
<0>swcr_process_req()
<0>crypto/ocf/crypto.c,1341: Q_LOCK()
<0>crypto_proc - sleeping (qe=1 qb=0 kqe=1 kqb=0)
<0>crypto/ocf/crypto.c,1429: Q_UNLOCK()
<0>swcr_process_callback()
<0>swcr_process_req_complete()
<0>swcr_process_req_complete crypto_done cde68e40
<0>crypto_done()
<0>crypto/ocf/crypto.c,1153: Q_LOCK()
<0>crypto/ocf/crypto.c,1155: Q_UNLOCK()
<0>crypto/ocf/crypto.c,1182: RETQ_LOCK
<0>crypto/ocf/crypto.c,1185: RETQ_UNLOCK
<0>crypto/ocf/crypto.c,1523: RETQ_LOCK
<0>crypto_ret_proc - awake
<0>crypto/ocf/crypto.c,1494: RETQ_UNLOCK
<6>klips_debug:ipsec_ocf_rcv_cb
<6>klips_debug:ipsec_rcv_esp_post_decrypt: padlen=10, contents: 0x<offset>: 0x<value> 0x<value> ...
<6>klips_debug:           00: 01 02 03 04 05 06 07 08 09 0a
<6>klips_debug:ipsec_rcv_esp_post_decrypt: packet decrypted from 10.1.1.50: next_header = 4, padding = 10
<6>klips_debug:ipsec_rcv: trimming to 84.
<0>crypto/ocf/crypto.c,1502: RETQ_LOCK
<0>crypto_ret_proc - sleeping
<0>crypto/ocf/crypto.c,1509: RETQ_UNLOCK
<6>ipsec_sa_getbyid: linked entry in ipsec_sa table for hash=109 of SA:esp.bceccc9@10.1.1.16 requested.
<6>ipsec_sa_get: ipsec_sa cebf0400 SA:esp.bceccc9@10.1.1.16, ref:8 reference count (4++) incremented by ipsec_sa_getbyid:558.
<6>ipsec_sa_put: ipsec_sa cebf0400 SA:esp.bceccc9@10.1.1.16, ref:8 reference count (5--) decremented by ipsec_rsm:1983.
<6>klips_debug: ipsec_rcv_decap_cont(st=8,nxt=9)
<6>klips_debug: ipsec_rcv_auth_chk(st=8,nxt=9) - will check
<6>klips_debug:ipsec_rcv_auth_chk: authentication successful.
<6>klips_debug:ipsec_rcv_decap_cont: after <ESP_AES_HMAC_SHA1>, SA:esp.bceccc9@10.1.1.16:
<6>klips_debug:   IP: ihl:20 ver:4 tos:0 tlen:104 id:43151 frag_off:0 ttl:64 proto:4 chk:48063 saddr:10.1.1.50 daddr:10.1.1.16
<6>klips_debug:ipsec_rcv_decap_cont: SA:esp.bceccc9@10.1.1.16, Another IPSEC header to process.
<6>klips_debug: ipsec_rcv_cleanup(st=9,nxt=11)
<6>ipsec_sa_get: ipsec_sa cdd5cc00 SA:tun.1004@10.1.1.16, ref:7 reference count (3++) incremented by ipsec_rcv_cleanup:1799.
<6>klips_debug:ipsec_rcv_decap_ipip: IPIP tunnel stripped.
<6>klips_debug:   IP: ihl:20 ver:4 tos:0 tlen:84 id:4785 frag_off:0 ttl:63 proto:1 (ICMP) chk:25275 saddr:192.168.220.135 daddr:192.168.168.100 type:code=0:0
<6>klips_debug:ipsec_rcv_decap_ipip: IPIP SA sets skb->nfmark=0x80070000.
<6>klips_debug: ipsec_rcv_complete(st=11,nxt=100)
<6>klips_debug:ipsec_rcv_complete: netif_rx(mast0) called.
<6>ipsec_sa_put: ipsec_sa cebf0400 SA:esp.bceccc9@10.1.1.16, ref:8 reference count (4--) decremented by ipsec_rsm:2020.
<6>ipsec_sa_put: ipsec_sa cdd5cc00 SA:tun.1004@10.1.1.16, ref:7 reference count (4--) decremented by ipsec_rsm:2025.
<6>ipsec_sa_get: ipsec_sa cebf0000 SA:tun.1003@10.1.1.50, ref:5 reference count (3++) incremented by ipsec_sa_getbyref:583.
<6>klips_debug:ipsec_xmit_init2: found ipsec_sa -- SA:<IPIP>  (error)
<6>klips_debug:ipsec_xmit_init2: calling room for <IPIP>, SA:tun.1003@10.1.1.50
<6>klips_debug:ipsec_xmit_init2: Required head,tailroom: 20,0
<6>klips_debug:ipsec_xmit_init2: calling room for <ESP_AES_HMAC_SHA1>, SA:esp.27734b18@10.1.1.50
<6>klips_debug:ipsec_xmit_init2: Required head,tailroom: 24,24
<6>klips_debug:ipsec_xmit_init2: existing head,tailroom: 80,28 before applying xforms with head,tailroom: 44,24 .
<6>klips_debug:ipsec_xmit_init2: mtu:1460 physmtu:1460 tothr:44 tottr:24 mtudiff:68 ippkttotlen:84
<6>klips_info:ipsec_xmit_init2: dev mast0 mtu of 1460 decreased by 73 to 1387
<6>klips_debug:ipsec_xmit_init2: hard header already stripped.
<6>klips_debug:ipsec_xmit_init2: data fits in existing skb
<6>klips_debug:   IP: ihl:20 ver:4 tos:0 tlen:84 id:0 DF frag_off:0 ttl:63 proto:1 (ICMP) chk:13676 saddr:192.168.168.100 daddr:192.168.220.135 type:code=8:0
<6>klips_debug:ipsec_xmit_encap_init: calling output for <IPIP>, SA:tun.1003@10.1.1.50
<6>klips_debug:ipsec_xmit_encap_init: pushing 20 bytes, putting 0, proto 4.
<6>klips_debug:ipsec_xmit_encap_init: head,tailroom: 60,28 before xform.
<6>klips_debug:ipsec_xmit_cont: after <IPIP>, SA:tun.1003@10.1.1.50:
<6>klips_debug:   IP: ihl:20 ver:4 tos:0 tlen:104 id:57898 frag_off:0 ttl:64 proto:4 chk:33316 saddr:10.1.1.16 daddr:10.1.1.50
<6>ipsec_sa_put: ipsec_sa cebf0000 SA:tun.1003@10.1.1.50, ref:5 reference count (4--) decremented by ipsec_xmit_cont:1286.
<6>ipsec_sa_get: ipsec_sa cebf0800 SA:esp.27734b18@10.1.1.50, ref:6 reference count (3++) incremented by ipsec_xmit_cont:1291.
<6>klips_debug:ipsec_xmit_encap_init: calling output for <ESP_AES_HMAC_SHA1>, SA:esp.27734b18@10.1.1.50
<6>klips_debug:ipsec_xmit_encap_init: pushing 24 bytes, putting 24, proto 50.
<6>klips_debug:ipsec_xmit_encap_init: head,tailroom: 36,4 before xform.
<6>klips_debug:ipsec_ocf_xmit
<0>crypto_dispatch()
<0>crypto/ocf/crypto.c,814: Q_LOCK()
<0>crypto/ocf/crypto.c,865: Q_UNLOCK()
<0>crypto/ocf/crypto.c,1443: Q_LOCK()
<0>crypto_proc - awake
<0>crypto/ocf/crypto.c,1337: Q_UNLOCK()
<0>crypto_invoke()
<0>swcr_process()
<0>swcr_process_req()
<0>crypto/ocf/crypto.c,1341: Q_LOCK()
<0>crypto_proc - sleeping (qe=1 qb=0 kqe=1 kqb=0)
<0>crypto/ocf/crypto.c,1429: Q_UNLOCK()
<0>swcr_process_callback()
<0>swcr_process_req_complete()
<0>swcr_process_req()
<0>hash OP success 0
<0>swcr_process_req_complete()
<0>swcr_process_req_complete crypto_done cde68e40
<0>crypto_done()
<0>crypto/ocf/crypto.c,1153: Q_LOCK()
<0>crypto/ocf/crypto.c,1155: Q_UNLOCK()
<0>crypto/ocf/crypto.c,1182: RETQ_LOCK
<0>crypto/ocf/crypto.c,1185: RETQ_UNLOCK
<0>crypto/ocf/crypto.c,1523: RETQ_LOCK
<0>crypto_ret_proc - awake
<0>crypto/ocf/crypto.c,1494: RETQ_UNLOCK
<6>klips_debug:ipsec_ocf_xmit_cb
<0>crypto/ocf/crypto.c,1502: RETQ_LOCK
<0>crypto_ret_proc - sleeping
<0>crypto/ocf/crypto.c,1509: RETQ_UNLOCK
<6>klips_debug:ipsec_xmit_cont: after <ESP_AES_HMAC_SHA1>, SA:esp.27734b18@10.1.1.50:
<6>klips_debug:   IP: ihl:20 ver:4 tos:0 tlen:152 id:57898 frag_off:0 ttl:64 proto:50 (ESP) chk:33316 saddr:10.1.1.16 daddr:10.1.1.50
<6>ipsec_sa_put: ipsec_sa cebf0800 SA:esp.27734b18@10.1.1.50, ref:6 reference count (4--) decremented by ipsec_xmit_cont:1286.
<6>klips_debug:ipsec_xmit_send: ...done, calling ip_send() on device:br-wan(mast)
<6>klips_debug:   IP: ihl:20 ver:4 tos:0 tlen:152 id:57898 frag_off:0 ttl:64 proto:50 (ESP) chk:33222 saddr:10.1.1.16 daddr:10.1.1.50
<6>klips_debug: ipsec_rcv_init(st=0,nxt=1)
<6>klips_debug:ipsec_rcv_init: <<< Info -- skb->dev=br-wan 
<6>klips_debug:ipsec_rcv_init: assigning packet ownership to virtual device mast0 from physical device br-wan.
<6>klips_debug:   IP: ihl:20 ver:4 tos:0 tlen:152 id:43152 frag_off:0 ttl:64 proto:50 (ESP) chk:47968 saddr:10.1.1.50 daddr:10.1.1.16
<6>klips_debug: ipsec_rcv_decap_init(st=1,nxt=2)
<6>klips_debug: ipsec_rcv_decap_lookup(st=2,nxt=3)
<6>klips_debug: ipsec_rcv_auth_init(st=3,nxt=4)
<6>ipsec_sa_getbyid: linked entry in ipsec_sa table for hash=109 of SA:esp.bceccc9@10.1.1.16 requested.
<6>ipsec_sa_get: ipsec_sa cebf0400 SA:esp.bceccc9@10.1.1.16, ref:8 reference count (3++) incremented by ipsec_sa_getbyid:558.
<6>klips_debug:ipsec_rcv_auth_init: SA:esp.bceccc9@10.1.1.16, src=10.1.1.50 of pkt agrees with expected SA source address policy.
<6>klips_debug:ipsec_rcv_auth_init: SA:esp.bceccc9@10.1.1.16 First SA in group.
<6>klips_debug:ipsec_rcv_auth_init: natt_type=0 tdbp->ips_natt_type=0 : ok
<6>klips_debug:ipsec_rcv: packet from 10.1.1.50 received with seq=98518 (iv)=0x2651310debf09d24 iplen=132 esplen=120 sa=esp.bceccc9@10.1.1.16
<6>klips_debug: ipsec_rcv_auth_calc(st=5,nxt=6)
<6>klips_debug:ipsec_rcv_auth_calc: encalg = 12, authalg = 3.
<6>klips_debug:ipsec_ocf_rcv
<0>crypto_dispatch()
<0>crypto/ocf/crypto.c,814: Q_LOCK()
<0>crypto/ocf/crypto.c,865: Q_UNLOCK()
<0>crypto/ocf/crypto.c,1443: Q_LOCK()
<0>crypto_proc - awake
<0>crypto/ocf/crypto.c,1337: Q_UNLOCK()
<0>crypto_invoke()
<0>swcr_process()
<0>swcr_process_req()
<0>hash OP success 0
<0>swcr_process_req_complete()
<0>swcr_process_req()
<0>crypto/ocf/crypto.c,1341: Q_LOCK()
<0>crypto_proc - sleeping (qe=1 qb=0 kqe=1 kqb=0)
<0>crypto/ocf/crypto.c,1429: Q_UNLOCK()
<0>swcr_process_callback()
<0>swcr_process_req_complete()
<0>swcr_process_req_complete crypto_done cde68e40
<0>crypto_done()
<0>crypto/ocf/crypto.c,1153: Q_LOCK()
<0>crypto/ocf/crypto.c,1155: Q_UNLOCK()
<0>crypto/ocf/crypto.c,1182: RETQ_LOCK
<0>crypto/ocf/crypto.c,1185: RETQ_UNLOCK
<0>crypto/ocf/crypto.c,1523: RETQ_LOCK
<0>crypto_ret_proc - awake
<0>crypto/ocf/crypto.c,1494: RETQ_UNLOCK
<6>klips_debug:ipsec_ocf_rcv_cb
<6>klips_debug:ipsec_rcv_esp_post_decrypt: padlen=10, contents: 0x<offset>: 0x<value> 0x<value> ...
<6>klips_debug:           00: 01 02 03 04 05 06 07 08 09 0a
<6>klips_debug:ipsec_rcv_esp_post_decrypt: packet decrypted from 10.1.1.50: next_header = 4, padding = 10
<6>klips_debug:ipsec_rcv: trimming to 84.
<0>crypto/ocf/crypto.c,1502: RETQ_LOCK
<0>crypto_ret_proc - sleeping
<0>crypto/ocf/crypto.c,1509: RETQ_UNLOCK
<6>ipsec_sa_getbyid: linked entry in ipsec_sa table for hash=109 of SA:esp.bceccc9@10.1.1.16 requested.
<6>ipsec_sa_get: ipsec_sa cebf0400 SA:esp.bceccc9@10.1.1.16, ref:8 reference count (4++) incremented by ipsec_sa_getbyid:558.
<6>ipsec_sa_put: ipsec_sa cebf0400 SA:esp.bceccc9@10.1.1.16, ref:8 reference count (5--) decremented by ipsec_rsm:1983.
<6>klips_debug: ipsec_rcv_decap_cont(st=8,nxt=9)
<6>klips_debug: ipsec_rcv_auth_chk(st=8,nxt=9) - will check
<6>klips_debug:ipsec_rcv_auth_chk: authentication successful.
<6>klips_debug:ipsec_rcv_decap_cont: after <ESP_AES_HMAC_SHA1>, SA:esp.bceccc9@10.1.1.16:
<6>klips_debug:   IP: ihl:20 ver:4 tos:0 tlen:104 id:43152 frag_off:0 ttl:64 proto:4 chk:48062 saddr:10.1.1.50 daddr:10.1.1.16
<6>klips_debug:ipsec_rcv_decap_cont: SA:esp.bceccc9@10.1.1.16, Another IPSEC header to process.
<6>klips_debug: ipsec_rcv_cleanup(st=9,nxt=11)
<6>ipsec_sa_get: ipsec_sa cdd5cc00 SA:tun.1004@10.1.1.16, ref:7 reference count (3++) incremented by ipsec_rcv_cleanup:1799.
<6>klips_debug:ipsec_rcv_decap_ipip: IPIP tunnel stripped.
<6>klips_debug:   IP: ihl:20 ver:4 tos:0 tlen:84 id:4786 frag_off:0 ttl:63 proto:1 (ICMP) chk:25274 saddr:192.168.220.135 daddr:192.168.168.100 type:code=0:0
<6>klips_debug:ipsec_rcv_decap_ipip: IPIP SA sets skb->nfmark=0x80070000.
<6>klips_debug: ipsec_rcv_complete(st=11,nxt=100)
<6>klips_debug:ipsec_rcv_complete: netif_rx(mast0) called.
<6>ipsec_sa_put: ipsec_sa cebf0400 SA:esp.bceccc9@10.1.1.16, ref:8 reference count (4--) decremented by ipsec_rsm:2020.
<6>ipsec_sa_put: ipsec_sa cdd5cc00 SA:tun.1004@10.1.1.16, ref:7 reference count (4--) decremented by ipsec_rsm:2025.
<6>ipsec_sa_get: ipsec_sa cdd5cc00 SA:tun.1004@10.1.1.16, ref:7 reference count (3++) incremented by proc_spi_start:293.
<6>ipsec_sa_put: ipsec_sa cdd5cc00 SA:tun.1004@10.1.1.16, ref:7 reference count (4--) decremented by proc_spi_next:331.
<6>ipsec_sa_get: ipsec_sa cebf0c00 SA:tun.1002@10.1.1.16, ref:3 reference count (3++) incremented by proc_spi_start:293.
<6>ipsec_sa_put: ipsec_sa cebf0c00 SA:tun.1002@10.1.1.16, ref:3 reference count (4--) decremented by proc_spi_next:331.
<6>ipsec_sa_get: ipsec_sa cebf0400 SA:esp.bceccc9@10.1.1.16, ref:8 reference count (3++) incremented by proc_spi_start:293.
<6>ipsec_sa_put: ipsec_sa cebf0400 SA:esp.bceccc9@10.1.1.16, ref:8 reference count (4--) decremented by proc_spi_next:331.
<6>ipsec_sa_get: ipsec_sa cdd5cc00 SA:tun.1004@10.1.1.16, ref:7 reference count (3++) incremented by proc_spi_start:293.
<6>ipsec_sa_put: ipsec_sa cdd5cc00 SA:tun.1004@10.1.1.16, ref:7 reference count (4--) decremented by proc_spi_next:331.
<6>ipsec_sa_get: ipsec_sa cebf0c00 SA:tun.1002@10.1.1.16, ref:3 reference count (3++) incremented by proc_spi_start:293.
<6>ipsec_sa_put: ipsec_sa cebf0c00 SA:tun.1002@10.1.1.16, ref:3 reference count (4--) decremented by proc_spi_next:331.
<6>ipsec_sa_get: ipsec_sa cebf0400 SA:esp.bceccc9@10.1.1.16, ref:8 reference count (3++) incremented by proc_spi_start:293.
<6>ipsec_sa_put: ipsec_sa cebf0400 SA:esp.bceccc9@10.1.1.16, ref:8 reference count (4--) decremented by proc_spi_next:331.
<6>ipsec_sa_get: ipsec_sa cd689400 SA:esp.bceccc8@10.1.1.16, ref:4 reference count (3++) incremented by proc_spi_start:293.
<6>ipsec_sa_put: ipsec_sa cd689400 SA:esp.bceccc8@10.1.1.16, ref:4 reference count (4--) decremented by proc_spi_next:331.
<6>UDP_ENCAP_ESPINUDP_NON_IKE: len=92 0x1d160781
<6>UDP_ENCAP_ESPINUDP_NON_IKE: IKE packet detected


With the H/W accelerator but remove the atmel-*.ko, profile is like:
samples  %        app name                 symbol name
190      16.8889  vmlinux                  aes_encrypt
138      12.2667  vmlinux                  sha_transform
53        4.7111  vmlinux                  memcpy
34        3.0222  vmlinux                  ipt_do_table
32        2.8444  vmlinux                  extract_buf
26        2.3111  vmlinux                  __do_softirq
22        1.9556  vmlinux                  __memzero
17        1.5111  vmlinux                  __kmalloc
16        1.4222  vmlinux                  crypto_xor
14        1.2444  ebtables.ko              ebt_do_table
14        1.2444  vmlinux                  crypto_cbc_encrypt
14        1.2444  vmlinux                  kmem_cache_alloc
13        1.1556  vmlinux                  __ip_route_output_key
13        1.1556  vmlinux                  ip_defrag
13        1.1556  vmlinux                  nf_iterate
12        1.0667  ipsec.ko                 ipsec_xmit_init2
12        1.0667  vmlinux                  dev_queue_xmit
12        1.0667  vmlinux                  ip_finish_output
11        0.9778  vmlinux                  __netdev_alloc_frag
11        0.9778  vmlinux                  fib_table_lookup
10        0.8889  cryptosoft.ko            _97
9         0.8000  vmlinux                  __netif_receive_skb
9         0.8000  vmlinux                  csum_partial
9         0.8000  vmlinux                  kfree
8         0.7111  ipsec.ko                 ipsec_xmit_encap_init
8         0.7111  vmlinux                  kmem_cache_free
7         0.6222  busybox                  /bin/busybox
7         0.6222  vmlinux                  br_handle_frame_finish
7         0.6222  vmlinux                  br_parse_ip_options
7         0.6222  vmlinux                  fib_validate_source
7         0.6222  vmlinux                  hmac_setkey
7         0.6222  vmlinux                  inet_getpeer
7         0.6222  vmlinux                  nf_hook_slow
6         0.5333  vmlinux                  br_handle_frame
6         0.5333  vmlinux                  ip_forward
6         0.5333  vmlinux                  nf_conntrack_in
5         0.4444  ipsec.ko                 ipsec_xmit_ipip
5         0.4444  ocf.ko                   crypto_dispatch
5         0.4444  vmlinux                  dev_hard_start_xmit
5         0.4444  vmlinux                  inet_frag_find
5         0.4444  vmlinux                  ip_finish_output2
5         0.4444  vmlinux                  local_bh_enable
5         0.4444  vmlinux                  macb_rx
5         0.4444  vmlinux                  macb_start_xmit
5         0.4444  vmlinux                  skb_release_head_state
4         0.3556  ipsec.ko                 _333
4         0.3556  ipsec.ko                 ipsec_ocf_xmit
4         0.3556  ipsec.ko                 prng_bytes
4         0.3556  ld-uClibc-0.9.33.2.so    /lib/ld-uClibc-0.9.33.2.so
4         0.3556  ocf.ko                   crypto_done
4         0.3556  vmlinux                  __kfree_skb
4         0.3556  vmlinux                  __netdev_alloc_skb
4         0.3556  vmlinux                  br_fdb_update
4         0.3556  vmlinux                  br_nf_pre_routing
4         0.3556  vmlinux                  check_leaf.isra.9
4         0.3556  vmlinux                  fib_get_table
4         0.3556  vmlinux                  free_hot_cold_page
4         0.3556  vmlinux                  ip_copy_metadata
4         0.3556  vmlinux                  ip_rcv
4         0.3556  vmlinux                  ip_route_input_noref
4         0.3556  vmlinux                  ipv4_get_l4proto
4         0.3556  vmlinux                  ipv4_mtu
4         0.3556  vmlinux                  napi_complete
4         0.3556  vmlinux                  nf_nat_fn
4         0.3556  vmlinux                  sch_direct_xmit
3         0.2667  ipsec.ko                 ipsec_lifetime_check
3         0.2667  ipsec.ko                 ipsec_xsm
3         0.2667  ocf.ko                   _176
3         0.2667  vmlinux                  __alloc_skb
3         0.2667  vmlinux                  __br_fdb_get
3         0.2667  vmlinux                  __divsi3
3         0.2667  vmlinux                  __nf_ct_l4proto_find
3         0.2667  vmlinux                  account
3         0.2667  vmlinux                  blkcipher_walk_next
3         0.2667  vmlinux                  copy_page
3         0.2667  vmlinux                  do_page_fault
3         0.2667  vmlinux                  fib_rules_lookup
3         0.2667  vmlinux                  ip_output
3         0.2667  vmlinux                  ip_vs_out.constprop.25
3         0.2667  vmlinux                  mod_timer
3         0.2667  vmlinux                  sha_init
3         0.2667  vmlinux                  skb_put
2         0.1778  cryptosoft.ko            _98
2         0.1778  ipsec.ko                 _342
2         0.1778  ipsec.ko                 _365
2         0.1778  ipsec.ko                 ipsec_xmit_cleanup
2         0.1778  ipsec.ko                 ipsec_xmit_cont
2         0.1778  ipsec.ko                 ipsec_xmit_sanity_check_skb
2         0.1778  ipsec.ko                 ipsec_xmit_send
2         0.1778  ocf.ko                   crypto_copyback
2         0.1778  ocf.ko                   crypto_getreq
2         0.1778  vmlinux                  ____nf_conntrack_find
2         0.1778  vmlinux                  __aeabi_idivmod
2         0.1778  vmlinux                  __copy_skb_header
2         0.1778  vmlinux                  __init_waitqueue_head
2         0.1778  vmlinux                  __ip_dev_find
2         0.1778  vmlinux                  __skb_clone
2         0.1778  vmlinux                  br_nf_pre_routing_finish
2         0.1778  vmlinux                  connmark_tg
2         0.1778  vmlinux                  copy_pte_range
2         0.1778  vmlinux                  crypto_ahash_setkey
2         0.1778  vmlinux                  crypto_shash_setkey
2         0.1778  vmlinux                  crypto_shash_update
2         0.1778  vmlinux                  fib4_rule_action
2         0.1778  vmlinux                  fib4_rule_match
2         0.1778  vmlinux                  inet_frag_kill
2         0.1778  vmlinux                  ip_fragment
2         0.1778  vmlinux                  iptable_mangle_hook
2         0.1778  vmlinux                  iptable_raw_hook
2         0.1778  vmlinux                  ipv4_confirm
2         0.1778  vmlinux                  ipv4_conntrack_defrag
2         0.1778  vmlinux                  netif_skb_features
2         0.1778  vmlinux                  nf_ct_get_tuple
2         0.1778  vmlinux                  nf_nat_out
2         0.1778  vmlinux                  setup_pre_routing
2         0.1778  vmlinux                  sha1_final
2         0.1778  vmlinux                  shash_ahash_finup
2         0.1778  vmlinux                  skb_dst_set_noref
2         0.1778  vmlinux                  skb_try_coalesce
2         0.1778  vmlinux                  udp_error
2         0.1778  vmlinux                  xfrm_lookup
1         0.0889  ebtable_broute.ko        _11
1         0.0889  ipsec.ko                 __ipsec_sa_get
1         0.0889  ipsec.ko                 __ipsec_sa_put
1         0.0889  ipsec.ko                 ipsec_sa_getbyref
1         0.0889  ipsec.ko                 ipsec_xmit_encap_select
1         0.0889  ipsec.ko                 ipsec_xmit_esp
1         0.0889  ipsec.ko                 ipsec_xmit_sanity_check_mast_dev
1         0.0889  ipsec.ko                 ipsec_xmit_state_delete
1         0.0889  libuClibc-0.9.33.2.so    /lib/libuClibc-0.9.33.2.so
1         0.0889  ocf.ko                   crypto_freereq
1         0.0889  vmlinux                  __br_deliver
1         0.0889  vmlinux                  __do_fault
1         0.0889  vmlinux                  __fib_lookup
1         0.0889  vmlinux                  __fsnotify_parent
1         0.0889  vmlinux                  __nf_conntrack_find_get
1         0.0889  vmlinux                  __nf_ct_refresh_acct
1         0.0889  vmlinux                  __put_single_page
1         0.0889  vmlinux                  __qdisc_run
1         0.0889  vmlinux                  __sync_icache_dcache
1         0.0889  vmlinux                  __up_read
1         0.0889  vmlinux                  async_encrypt
1         0.0889  vmlinux                  blkcipher_walk_done
1         0.0889  vmlinux                  br_netfilter_run_hooks
1         0.0889  vmlinux                  build_skb
1         0.0889  vmlinux                  can_checksum_protocol
1         0.0889  vmlinux                  crypto_ahash_digest
1         0.0889  vmlinux                  crypto_hash_walk_done
1         0.0889  vmlinux                  crypto_sha1_update
1         0.0889  vmlinux                  del_timer
1         0.0889  vmlinux                  do_sys_open
1         0.0889  vmlinux                  dst_release

We can see the sha_transform is almost comparable to the aes_encryption so that it must be offloaded.

Aug 2,2016
Use oprofile to profile the H/W Atmel-AES256/MD5 IPsec. UDP -b 16m -t 30.
root@UserDevice:~# opcontrol --vmlinux=/lib/vmlinux 
root@UserDevice:~# opcontrol --init
root@UserDevice:~# opcontrol --start
Using 2.6+ OProfile kernel interface.
Reading module info.
Using log file /var/lib/oprofile/samples/oprofiled.log
Daemon started.
Profiler running.

// Do the UDP t/p test -b 16m -t 30

root@UserDevice:~# opcontrol --dump
root@UserDevice:~# opcontrol --stop
Stopping profiling.
root@UserDevice:~# opcontrol --shutdown
Killing daemon.
root@UserDevice:~# opcontrol --deinit
Unloading oprofile module
root@UserDevice:~# opreport -l
warning: /atmel_aes could not be found.
warning: /cryptosoft could not be found.
warning: /ebtable_broute could not be found.
warning: /ebtable_filter could not be found.
warning: /ebtable_nat could not be found.
warning: /ebtables could not be found.
warning: /ipsec could not be found.
warning: /md5 could not be found.
warning: /ocf could not be found.
CPU: CPU with timer interrupt, speed 0 MHz (estimated)
Profiling through timer interrupt
samples  %        app name                 symbol name
10255    62.9064  vmlinux                  default_idle
445       2.7297  ipsec                    /ipsec
367       2.2513  vmlinux                  md5_transform
272       1.6685  vmlinux                  memcpy
256       1.5704  vmlinux                  extract_buf
229       1.4047  vmlinux                  __do_softirq
204       1.2514  vmlinux                  ipt_do_table
162       0.9937  ocf                      /ocf
128       0.7852  cryptosoft               /cryptosoft
128       0.7852  vmlinux                  __memzero
121       0.7422  vmlinux                  sha_transform
98        0.6012  atmel_aes                /atmel_aes			// aes is offloaded to atmel driver that is 0.6% of CPU.
95        0.5828  vmlinux                  ip_defrag
77        0.4723  vmlinux                  macb_rx
75        0.4601  vmlinux                  __kmalloc


Remove the atmel-*.ko loading in the usr/lib/ipsec/_startklips and reboot and redo the profiling.

root@UserDevice:~# opcontrol --vmlinux=/lib/vmlinux 
root@UserDevice:~# opcontrol --init
root@UserDevice:~# opcontrol --start
Using 2.6+ OProfile kernel interface.
Reading module info.
Using log file /var/lib/oprofile/samples/oprofiled.log
Daemon started.
Profiler running.
root@UserDevice:~# opcontrol --dump
root@UserDevice:~# opcontrol --stop
Stopping profiling.
root@UserDevice:~# opcontrol --shutdown
Killing daemon.
root@UserDevice:~# opcontrol --deinit
Unloading oprofile module
root@UserDevice:~# opreport -l
warning: /cryptosoft could not be found.
warning: /ebtable_broute could not be found.
warning: /ebtable_filter could not be found.
warning: /ebtable_nat could not be found.
warning: /ebtables could not be found.
warning: /ipsec could not be found.
warning: /md5 could not be found.
warning: /ocf could not be found.
warning: /oprofile could not be found.
CPU: CPU with timer interrupt, speed 0 MHz (estimated)
Profiling through timer interrupt
samples  %        app name                 symbol name
2584     37.9386  vmlinux                  default_idle
833      12.2302  vmlinux                  aes_encrypt			// kernel aes takes 12% of CPU
218       3.2007  vmlinux                  md5_transform
195       2.8630  ipsec                    /ipsec
165       2.4226  vmlinux                  memcpy
133       1.9527  vmlinux                  ipt_do_table
124       1.8206  vmlinux                  extract_buf
122       1.7912  vmlinux                  __do_softirq
65        0.9543  vmlinux                  __memzero
58        0.8516  vmlinux                  ip_defrag
57        0.8369  busybox                  /bin/busybox
55        0.8075  vmlinux                  macb_rx
54        0.7928  ld-uClibc-0.9.33.2.so    /lib/ld-uClibc-0.9.33.2.so
49        0.7194  vmlinux                  __netif_receive_skb
46        0.6754  cryptosoft               /cryptosoft
46        0.6754  vmlinux                  __kmalloc
45        0.6607  ocf                      /ocf
44        0.6460  vmlinux                  crypto_xor
41        0.6020  vmlinux                  fib_table_lookup
36        0.5286  libuClibc-0.9.33.2.so    /lib/libuClibc-0.9.33.2.so
36        0.5286  vmlinux                  dev_queue_xmit
35        0.5139  vmlinux                  br_nf_pre_routing
35        0.5139  vmlinux                  nf_iterate
34        0.4992  vmlinux                  kmem_cache_alloc
34        0.4992  vmlinux                  local_bh_enable
33        0.4845  ebtables                 /ebtables
32        0.4698  vmlinux                  br_handle_frame
30        0.4405  vmlinux                  macb_start_xmit
29        0.4258  vmlinux                  __netdev_alloc_frag
28        0.4111  md5                      /md5
28        0.4111  vmlinux                  csum_partial


In the origional 1049 version, add the oprofile support, KLIPS with non-OCF:
root@UserDevice:~# opcontrol --vmlinux=/lib/vmlinux 
root@UserDevice:~# opcontrol --init
root@UserDevice:~# opcontrol --start
Using 2.6+ OProfile kernel interface.
Reading module info.
Using log file /var/lib/oprofile/samples/oprofiled.log
Daemon started.
Profiler running.

// Do the UDP t/p test -b 16m -t 30, AES256/MD5

root@UserDevice:~# opcontrol --dump
root@UserDevice:~# opcontrol --stop
Stopping profiling.
root@UserDevice:~# opcontrol --shutdown
Killing daemon.
root@UserDevice:~# opcontrol --deinit
root@UserDevice:~# opreport -l
warning: /ebtable_broute could not be found.
warning: /ebtable_filter could not be found.
warning: /ebtable_nat could not be found.
warning: /ebtables could not be found.
warning: /ipsec could not be found.
CPU: CPU with timer interrupt, speed 0 MHz (estimated)
Profiling through timer interrupt
samples  %        app name                 symbol name
3432     49.7824  vmlinux                  default_idle
930      13.4900  vmlinux                  aes_encrypt
487       7.0641  ipsec                    /ipsec
132       1.9147  vmlinux                  memcpy
95        1.3780  vmlinux                  ipt_do_table
57        0.8268  vmlinux                  macb_rx
55        0.7978  vmlinux                  crypto_xor
49        0.7108  vmlinux                  __memzero
43        0.6237  vmlinux                  __netif_receive_skb
43        0.6237  vmlinux                  ip_defrag
42        0.6092  vmlinux                  dev_queue_xmit
42        0.6092  vmlinux                  nf_iterate
37        0.5367  ebtables                 /ebtables
37        0.5367  vmlinux                  crypto_cbc_encrypt
32        0.4642  vmlinux                  csum_partial
32        0.4642  vmlinux                  macb_start_xmit
32        0.4642  vmlinux                  skb_release_head_state
29        0.4207  vmlinux                  dev_hard_start_xmit
28        0.4062  vmlinux                  nf_conntrack_in
24        0.3481  vmlinux                  __copy_skb_header
24        0.3481  vmlinux                  ip_finish_output2
24        0.3481  vmlinux                  ip_fragment
23        0.3336  vmlinux                  __do_softirq
22        0.3191  vmlinux                  __netdev_alloc_frag
22        0.3191  vmlinux                  fib_table_lookup
22        0.3191  vmlinux                  ip_finish_output
22        0.3191  vmlinux                  local_bh_enable
20        0.2901  libuClibc-0.9.33.2.so    /lib/libuClibc-0.9.33.2.so

Jul 28,2016
1. Test OCF+S/W crypto, atmel-*.ko not loaded so the OCF uses S/W crypto registered in kernel(AES128/SHA):
		T/P		SenderSide Sys/Idle/Sirq		ReceiverSide Sys/Idle/Sirq	Comment
UDP Test	11.3Mbps(39%)	32/0/66%				IN Cisco. N/A			-b 18m. Console slow.
UDP Test	11.1Mbps(31%)	47/0/56%				IN Cisco. N/A			-b 16m. Console slow.
TCP Test	16.2Mbps	46/0/53%				IN Cisco. N/A			-l 1024k -w 1024k

2. Load the atmel-aes.ko and measure (AES128/SHA):
		T/P		SenderSide Sys/Idle/Sirq		ReceiverSide Sys/Idle/Sirq	Comment
UDP Test	14.3Mbps(22%)	17/0/81%				IN Cisco. N/A			-b 18m. Console slow.
UDP Test	13.6Mbps(15%)	17/0/81%				IN Cisco. N/A			-b 16m. Console slow.
TCP Test	18Mbps		18/0/80%				IN Cisco. N/A			-l 1024k -w 1024k

This difference shows how H/W improves the T/P. But the OCF looks downgrades the T/P of non-OCF T/P.

1. Try AES256/SHA with freshly local build v1.2.0 build 1049 built in July 22, 2016. Use KLIPS
		T/P		SenderSide Sys/Idle/Sirq		ReceiverSide Sys/Idle/Sirq	Comment
UDP Test	14.8Mbps(18%)	Serial console died.N/A			IN Cisco. N/A			-b 18m.
UDP Test	14.7Mbps(7.1%)	Serial console died.N/A			IN Cisco. N/A			-b 16m. serial console extremely slow.
TCP Test	12.6Mbps	Serial console died.N/A			IN Cisco. N/A			-l 1024k -w 1024k

2. Test AES256/SHA, with h/w crypto. KLIPS+KLIPS_OCF+AtmelAccelerator 
		T/P		SenderSide Sys/Idle/Sirq		ReceiverSide Sys/Idle/Sirq	Comment
UDP Test	10.6Mbps(41%)	17/0/74%				IN Cisco. N/A			-b 18m.
UDP Test	9.4(41%%	17/0/81%				IN Cisco. N/A			-b 16m.
UDP Test	9.37(6.3%)	24/0/60%				IN Cisco. N/A			-b 10m.
TCP Test	16Mbps		39/0/46%				IN Cisco. N/A			-l 1024k -w 1024k

Download 2015 ocf-linux from https://sourceforge.net/projects/ocf-linux/?source=typ_redirect and compile kernel modules:
[Jeff@DENG0080-2 ocf]$ pwd
/home/Jeff/Documents/Network/IPSec/ocf-linux-20150303/ocf
[Jeff@DENG0080-2 ocf]$ make -C /home/Jeff/project-2/work/ipn4gii/build_dir/target-arm_v5te_uClibc-0.9.33.2_eabi/linux-sama5d35/linux-3.6.9/ M=/home/Jeff/Documents/Network/IPSec/ocf-linux-20150303/ocf modules
[Jeff@DENG0080-2 ocf]$ ls *.ko -al
-rw-rw-r-- 1 Jeff Jeff 19491 Jul 29 14:21 cryptodev.ko
-rw-rw-r-- 1 Jeff Jeff 21253 Jul 29 14:21 cryptosoft.ko
-rw-rw-r-- 1 Jeff Jeff  5973 Jul 29 14:21 ocf-bench.ko
-rw-rw-r-- 1 Jeff Jeff 32956 Jul 29 14:21 ocf.ko
[Jeff@DENG0080-2 ocf]$ file ocf.ko
ocf.ko: ELF 32-bit LSB relocatable, ARM, version 1 (SYSV), not stripped
But same results.

Jul 27, 2016
[Symptom]: Openssl: "if (ioctl(fd, CIOCASYMFEAT, &cryptodev_asymfeat) == -1)" in ENGINE_load_cryptodev() in eng_cryptodev.c always fails. Because cryptodev_ioctl() in crypto/ocf/cryptodev.c doesn't recognize the command CIOCASYMFEAT.

Solution: Openssl uses "staging_dir/target-arm_v5te_uClibc-0.9.33.2_eabi/usr/include/crypto/cryptodev.h" as the definition of CIOCASYMFEAT. But Kernel and OpenSwan uses "build_dir/target-arm_v5te_uClibc-0.9.33.2_eabi/linux-sama5d35/linux-3.6.9/crypto/ocf/cryptodev.h" and "build_dir/target-arm_v5te_uClibc-0.9.33.2_eabi/linux-sama5d35/openswan-2.6.43/include/crypto/cryptodev.h", which are the same. These 3 .h files should be the same. But I compiled cryptodev-linux package occasionally and it modified "staging_dir/target-arm_v5te_uClibc-0.9.33.2_eabi/usr/include/crypto/cryptodev.h" and made it different with the other 2. This is discrepency in IOCTL commands and made the cryptodev engine can not be installed.

OpenSSL -EVP parameter: with EVP, you benefit from the automatic selection of the improved implementation, based on the current CPU model, whereas the non-EVP code directly uses the generic software implementation, which works everywhere, but is slower.

A OpenSSL speed test on AES:
root@UserDevice:~# 
root@UserDevice:~# echo 1 > sys/module/cryptodev/parameters/cryptodev_debug 
-ash: can't create sys/module/cryptodev/parameters/cryptodev_debug: nonexistent directory
root@UserDevice:~# 
root@UserDevice:~# 
root@UserDevice:~# ls /dev/cry* -al
ls: /dev/cry*: No such file or directory
root@UserDevice:~# lsmod | grep ocf
ocf                    17912  1 cryptosoft
root@UserDevice:~# openssl engine
(dynamic) Dynamic engine loading support
root@UserDevice:~# openssl speed -evp aes-128-cbc -engine dynamic
engine "dynamic" set.
Doing aes-128-cbc for 3s on 16 size blocks: 977245 aes-128-cbc's in 2.95s
Doing aes-128-cbc for 3s on 64 size blocks: 277549 aes-128-cbc's in 2.96s
Doing aes-128-cbc for 3s on 256 size blocks: 72361 aes-128-cbc's in 2.96s
Doing aes-128-cbc for 3s on 1024 size blocks: 18223 aes-128-cbc's in 2.98s
Doing aes-128-cbc for 3s on 8192 size blocks: 1660 aes-128-cbc's in 2.20s
OpenSSL 1.0.1g 7 Apr 2014
built on: Thu Jul 28 09:06:43 MDT 2016
options:bn(64,32) rc4(ptr,char) des(idx,cisc,2,long) aes(partial) blowfish(ptr) 
compiler: arm-openwrt-linux-uclibcgnueabi-gcc -fPIC -DOPENSSL_PIC -DZLIB_SHARED -DZLIB -DOPENSSL_THREADS -D_REENTRANT -DDSO_DLFCN -DHAVE_DLFCN_H -I/home/Jeff/project-2/work/ipn4gii/st
aging_dir/target-arm_v5te_uClibc-0.9.33.2_eabi/usr/include -I/home/Jeff/project-2/work/ipn4gii/staging_dir/target-arm_v5te_uClibc-0.9.33.2_eabi/include -I/home/Jeff/project-2/work/ipn
4gii/staging_dir/toolchain-arm_v5te_gcc-4.8-linaro_uClibc-0.9.33.2_eabi/usr/include -I/home/Jeff/project-2/work/ipn4gii/staging_dir/toolchain-arm_v5te_gcc-4.8-linaro_uClibc-0.9.33.2_e
abi/include -DOPENSSL_SMALL_FOOTPRINT -DHAVE_CRYPTODEV -DOPENSSL_NO_ERR -DTERMIO -Os -pipe -march=armv5te -mtune=xscale -fno-caller-saves -fhonour-copts -Wno-error=unused-but-set-vari
able -msoft-float -fpic -fomit-frame-pointer -Wall
The 'numbers' are in 1000s of bytes per second processed.
type             16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes
aes-128-cbc       5300.31k     6001.06k     6258.25k     6261.86k     6181.24k
root@UserDevice:~# dmesg -c
root@UserDevice:~# 
root@UserDevice:~# dmesg -c
root@UserDevice:~# insmod cryptodev
root@UserDevice:~# lsmod | grep ocf
ocf                    17912  2 cryptodev,cryptosoft
root@UserDevice:~# ls /dev/crypto -al
crw-r--r--    1 root     root       10,  70 Jul 27 07:18 /dev/crypto
root@UserDevice:~# lsmod | grep atmel
atmel_sha              10840  0 
atmel_aes              10648  0 
atmel_tdes             11780  0 
des_generic            18300  1 atmel_tdes
root@UserDevice:~# openssl engine
(cryptodev) BSD cryptodev engine
(dynamic) Dynamic engine loading support
root@UserDevice:~# openssl speed -evp aes-128-cbc -engine cryptodev
engine "cryptodev" set.
Doing aes-128-cbc for 3s on 16 size blocks: 41939 aes-128-cbc's in 0.16s
Doing aes-128-cbc for 3s on 64 size blocks: 38756 aes-128-cbc's in 0.19s
Doing aes-128-cbc for 3s on 256 size blocks: 34603 aes-128-cbc's in 0.12s
Doing aes-128-cbc for 3s on 1024 size blocks: 23736 aes-128-cbc's in 0.11s
Doing aes-128-cbc for 3s on 8192 size blocks: 6799 aes-128-cbc's in 0.04s
OpenSSL 1.0.1g 7 Apr 2014
built on: Thu Jul 28 09:06:43 MDT 2016
options:bn(64,32) rc4(ptr,char) des(idx,cisc,2,long) aes(partial) blowfish(ptr) 
compiler: arm-openwrt-linux-uclibcgnueabi-gcc -fPIC -DOPENSSL_PIC -DZLIB_SHARED -DZLIB -DOPENSSL_THREADS -D_REENTRANT -DDSO_DLFCN -DHAVE_DLFCN_H -I/home/Jeff/project-2/work/ipn4gii/st
aging_dir/target-arm_v5te_uClibc-0.9.33.2_eabi/usr/include -I/home/Jeff/project-2/work/ipn4gii/staging_dir/target-arm_v5te_uClibc-0.9.33.2_eabi/include -I/home/Jeff/project-2/work/ipn
4gii/staging_dir/toolchain-arm_v5te_gcc-4.8-linaro_uClibc-0.9.33.2_eabi/usr/include -I/home/Jeff/project-2/work/ipn4gii/staging_dir/toolchain-arm_v5te_gcc-4.8-linaro_uClibc-0.9.33.2_e
abi/include -DOPENSSL_SMALL_FOOTPRINT -DHAVE_CRYPTODEV -DOPENSSL_NO_ERR -DTERMIO -Os -pipe -march=armv5te -mtune=xscale -fno-caller-saves -fhonour-copts -Wno-error=unused-but-set-vari
able -msoft-float -fpic -fomit-frame-pointer -Wall
The 'numbers' are in 1000s of bytes per second processed.
type             16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes
aes-128-cbc       4193.90k    13054.65k    73819.73k   220960.58k  1392435.20k
root@UserDevice:~# dmesg -c
===MHX: (atmel_aes_crypt)1.1..
===MHX: (atmel_aes_crypt)1.1..
===MHX: (atmel_aes_crypt)1.1..
===MHX: (atmel_aes_crypt)1.1..
.......................
root@UserDevice:~# 


VPN with Cisco router not ping is caused by the atmel-aes.ko. Remove debug prints and rebuilt this .ko, adjust priority back to 100 then AES128 VPN works. 

Jul 26, 2016
Test IPsecVPN with Cisco router instead of another Microhard device. Wired, GW2GW, AES128/SHA1/ESP/mod1024.

Iperf traffic from 4Gii to Cisco. Traffic cap removed.

1. Test with freshly local build v1.2.0 build 1049 built in July 22, 2016. Use KLIPS
		T/P		SenderSide Sys/Idle/Sirq		ReceiverSide Sys/Idle/Sirq	Comment
UDP Test	16.3Mbps(10%)	Serial console died.N/A			IN Cisco. N/A			-b 18m.
UDP Test	16Mbps(0.24%)		0/0/99%				IN Cisco. N/A			-b 16m. serial console extremely slow.
TCP Test	13Mbps		Serial console died.N/A			IN Cisco. N/A			-l 1024k -w 1024k

2. Test with h/w crypto. 
ESP AES,AES128,AES256 don't ping eventhough tunnel is established.

Test IPsecVPN with Cisco router instead of another Microhard device. Wired, GW2GW, 3des/md5/ESP/mod1024.

1. Test with freshly local build v1.2.0 build 1049 built in July 22, 2016. Use KLIPS+KLIPS_ALG
		T/P		SenderSide Sys/Idle/Sirq		ReceiverSide Sys/Idle/Sirq	Comment
UDP Test	9.17Mbps(49%)	Serial&Telnet died. N/A			IN Cisco. N/A			-b 18m.
UDP Test	9.19Mbps(43%)	Serial&Telnet died. N/A			IN Cisco. N/A			-b 16m.
UDP Test	8.99Mbps(0.18%)	0/2/95%					IN Cisco. N/A			-b 9m.serial&telnet console extremely slow.
TCP Test	8.4Mbps		Serial&Telnet died. N/A			IN Cisco. N/A			-l 1024k -w 1024k

2. Test with h/w crypto. KLIPS+KLIPS_OCF+AtmelAccelerator
		T/P		SenderSide Sys/Idle/Sirq		ReceiverSide Sys/Idle/Sirq	Comment
UDP Test	13.5Mbps(25%)	17/0/72%				IN Cisco. N/A			-b 18m.
UDP Test	13.3Mbps(17%)	13/0/82%				IN Cisco. N/A			-b 16m.
UDP Test	11.8Mbps(2%)	13/0/62%				IN Cisco. N/A			-b 12m.
TCP Test	17.5Mbps	12/0/84%				IN Cisco. N/A			-l 1024k -w 1024k

3. Test with h/w crypto. KLIPS+KLIPS_OCF (No Atmel .ko loaded)
		T/P		SenderSide Sys/Idle/Sirq		ReceiverSide Sys/Idle/Sirq	Comment
UDP Test	6.18Mbps(66%)	54/0/45%				IN Cisco. N/A			-b 18m.Console slow
UDP Test	5.45Mbps(67%)	55/0/44%				IN Cisco. N/A			-b 16m.Console slow
UDP Test	6.69Mbps(4.4%)	63/7/27%				IN Cisco. N/A			-b 6m.
TCP Test	9Mbps		76/0/22%				IN Cisco. N/A			-l 1024k -w 1024k

Compare 1 and 3, we see OCF dispatcher layer costs some speed.

Jul 25, 2016

Sender side ping -c 1 and then -c 3:

# ping -c1
root@UserDevice:~# dmesg -c
crypto_dispatch()
crypto/ocf/crypto.c,814: Q_LOCK()
crypto/ocf/crypto.c,865: Q_UNLOCK()
crypto/ocf/crypto.c,1443: Q_LOCK()
crypto_proc - awake
crypto/ocf/crypto.c,1337: Q_UNLOCK()
crypto_invoke()
===MHX: (atmel_aes_crypt)1.1..
===MHX: (atmel_aes_crypt)1.2..
===MHX: (atmel_aes_crypt)1.3..
===MHX(atmel_aes_handle_queue)6.1.
===MHX(atmel_aes_handle_queue)6.2
===MHX(atmel_aes_handle_queue)6.3.
===MHX(atmel_aes_handle_queue)6.3.1 dd->total=96.
===MHX(atmel_aes_handle_queue)6.4. OK from  atmel_aes_write_ctrl() err=0, dd->total=96.
===MHX: (atmel_aes_crypt_dma_start)7.1. fast=1
===MHX: (atmel_aes_crypt_dma_start)7.2. addr_in=2e9a7410, addr_out=2e9a7410, count=96
===MHX: (atmel_aes_crypt_dma_start)7.4.
===MHX(atmel_aes_done_task)5.1
===MHX(atmel_aes_done_task)5.2
===MHX(atmel_aes_done_task)5.3
crypto_done()
crypto/ocf/crypto.c,1153: Q_LOCK()
crypto/ocf/crypto.c,1155: Q_UNLOCK()
crypto/ocf/crypto.c,1182: RETQ_LOCK
crypto/ocf/crypto.c,1185: RETQ_UNLOCK
===MHX(atmel_aes_handle_queue)6.1.
===MHX(atmel_aes_handle_queue)6.2
===MHX(atmel_aes_done_task)5.4 
crypto/ocf/crypto.c,1341: Q_LOCK()
crypto_proc - sleeping (qe=1 qb=0 kqe=1 kqb=0)
crypto/ocf/crypto.c,1429: Q_UNLOCK()
crypto/ocf/crypto.c,1523: RETQ_LOCK
crypto_ret_proc - awake
crypto/ocf/crypto.c,1494: RETQ_UNLOCK
crypto/ocf/crypto.c,1502: RETQ_LOCK
crypto_ret_proc - sleeping
crypto/ocf/crypto.c,1509: RETQ_UNLOCK
crypto_dispatch()
crypto/ocf/crypto.c,814: Q_LOCK()
crypto/ocf/crypto.c,865: Q_UNLOCK()
crypto/ocf/crypto.c,1443: Q_LOCK()
crypto_proc - awake
crypto/ocf/crypto.c,1337: Q_UNLOCK()
crypto_invoke()
===MHX: (atmel_aes_crypt)1.1..
===MHX: (atmel_aes_crypt)1.2..
===MHX: (atmel_aes_crypt)1.3..
===MHX(atmel_aes_handle_queue)6.1.
===MHX(atmel_aes_handle_queue)6.2
===MHX(atmel_aes_handle_queue)6.3.
===MHX(atmel_aes_handle_queue)6.3.1 dd->total=96.
===MHX(atmel_aes_handle_queue)6.4. OK from  atmel_aes_write_ctrl() err=0, dd->total=96.
===MHX: (atmel_aes_crypt_dma_start)7.1. fast=1
===MHX: (atmel_aes_crypt_dma_start)7.2. addr_in=2f300114, addr_out=2f300114, count=96
===MHX: (atmel_aes_crypt_dma_start)7.4.
===MHX(atmel_aes_done_task)5.1
===MHX(atmel_aes_done_task)5.2
===MHX(atmel_aes_done_task)5.3
crypto_done()
crypto/ocf/crypto.c,1153: Q_LOCK()
crypto/ocf/crypto.c,1155: Q_UNLOCK()
crypto/ocf/crypto.c,1182: RETQ_LOCK
crypto/ocf/crypto.c,1185: RETQ_UNLOCK
===MHX(atmel_aes_handle_queue)6.1.
===MHX(atmel_aes_handle_queue)6.2
===MHX(atmel_aes_done_task)5.4 
crypto/ocf/crypto.c,1341: Q_LOCK()
crypto_proc - sleeping (qe=1 qb=0 kqe=1 kqb=0)
crypto/ocf/crypto.c,1429: Q_UNLOCK()
crypto/ocf/crypto.c,1523: RETQ_LOCK
crypto_ret_proc - awake
crypto/ocf/crypto.c,1494: RETQ_UNLOCK
crypto/ocf/crypto.c,1502: RETQ_LOCK
crypto_ret_proc - sleeping
crypto/ocf/crypto.c,1509: RETQ_UNLOCK
root@UserDevice:~# 
root@UserDevice:~# 
root@UserDevice:~# 


# ping -c 3
root@UserDevice:~# dmesg -c
crypto_dispatch()
crypto/ocf/crypto.c,814: Q_LOCK()
crypto/ocf/crypto.c,865: Q_UNLOCK()
crypto/ocf/crypto.c,1443: Q_LOCK()
crypto_proc - awake
crypto/ocf/crypto.c,1337: Q_UNLOCK()
crypto_invoke()
===MHX: (atmel_aes_crypt)1.1..
===MHX: (atmel_aes_crypt)1.2..
===MHX: (atmel_aes_crypt)1.3..
===MHX(atmel_aes_handle_queue)6.1.
===MHX(atmel_aes_handle_queue)6.2
===MHX(atmel_aes_handle_queue)6.3.
===MHX(atmel_aes_handle_queue)6.3.1 dd->total=96.
===MHX(atmel_aes_handle_queue)6.4. OK from  atmel_aes_write_ctrl() err=0, dd->total=96.
===MHX: (atmel_aes_crypt_dma_start)7.1. fast=1
===MHX: (atmel_aes_crypt_dma_start)7.2. addr_in=2e1b9c50, addr_out=2e1b9c50, count=96
===MHX: (atmel_aes_crypt_dma_start)7.4.
===MHX(atmel_aes_done_task)5.1
===MHX(atmel_aes_done_task)5.2
===MHX(atmel_aes_done_task)5.3
crypto_done()
crypto/ocf/crypto.c,1153: Q_LOCK()
crypto/ocf/crypto.c,1155: Q_UNLOCK()
crypto/ocf/crypto.c,1182: RETQ_LOCK
crypto/ocf/crypto.c,1185: RETQ_UNLOCK
===MHX(atmel_aes_handle_queue)6.1.
===MHX(atmel_aes_handle_queue)6.2
===MHX(atmel_aes_done_task)5.4 
crypto/ocf/crypto.c,1341: Q_LOCK()
crypto_proc - sleeping (qe=1 qb=0 kqe=1 kqb=0)
crypto/ocf/crypto.c,1429: Q_UNLOCK()
crypto/ocf/crypto.c,1523: RETQ_LOCK
crypto_ret_proc - awake
crypto/ocf/crypto.c,1494: RETQ_UNLOCK
crypto/ocf/crypto.c,1502: RETQ_LOCK
crypto_ret_proc - sleeping
crypto/ocf/crypto.c,1509: RETQ_UNLOCK
crypto_dispatch()
crypto/ocf/crypto.c,814: Q_LOCK()
crypto/ocf/crypto.c,865: Q_UNLOCK()
crypto/ocf/crypto.c,1443: Q_LOCK()
crypto_proc - awake
crypto/ocf/crypto.c,1337: Q_UNLOCK()
crypto_invoke()
===MHX: (atmel_aes_crypt)1.1..
===MHX: (atmel_aes_crypt)1.2..
===MHX: (atmel_aes_crypt)1.3..
===MHX(atmel_aes_handle_queue)6.1.
===MHX(atmel_aes_handle_queue)6.2
===MHX(atmel_aes_handle_queue)6.3.
===MHX(atmel_aes_handle_queue)6.3.1 dd->total=96.
===MHX(atmel_aes_handle_queue)6.4. OK from  atmel_aes_write_ctrl() err=0, dd->total=96.
===MHX: (atmel_aes_crypt_dma_start)7.1. fast=1
===MHX: (atmel_aes_crypt_dma_start)7.2. addr_in=2e28c114, addr_out=2e28c114, count=96
===MHX: (atmel_aes_crypt_dma_start)7.4.
===MHX(atmel_aes_done_task)5.1
===MHX(atmel_aes_done_task)5.2
===MHX(atmel_aes_done_task)5.3
crypto_done()

crypto/ocf/crypto.c,1153: Q_LOCK()
crypto/ocf/crypto.c,1155: Q_UNLOCK()
crypto/ocf/crypto.c,1182: RETQ_LOCK
crypto/ocf/crypto.c,1185: RETQ_UNLOCK
===MHX(atmel_aes_handle_queue)6.1.
===MHX(atmel_aes_handle_queue)6.2
===MHX(atmel_aes_done_task)5.4 
crypto/ocf/crypto.c,1341: Q_LOCK()
crypto_proc - sleeping (qe=1 qb=0 kqe=1 kqb=0)
crypto/ocf/crypto.c,1429: Q_UNLOCK()
crypto/ocf/crypto.c,1523: RETQ_LOCK
crypto_ret_proc - awake
crypto/ocf/crypto.c,1494: RETQ_UNLOCK
crypto/ocf/crypto.c,1502: RETQ_LOCK
crypto_ret_proc - sleeping
crypto/ocf/crypto.c,1509: RETQ_UNLOCK
crypto_dispatch()
crypto/ocf/crypto.c,814: Q_LOCK()
crypto/ocf/crypto.c,865: Q_UNLOCK()
crypto/ocf/crypto.c,1443: Q_LOCK()
crypto_proc - awake
crypto/ocf/crypto.c,1337: Q_UNLOCK()
crypto_invoke()
===MHX: (atmel_aes_crypt)1.1..
===MHX: (atmel_aes_crypt)1.2..
===MHX: (atmel_aes_crypt)1.3..
===MHX(atmel_aes_handle_queue)6.1.
===MHX(atmel_aes_handle_queue)6.2
===MHX(atmel_aes_handle_queue)6.3.
===MHX(atmel_aes_handle_queue)6.3.1 dd->total=96.
===MHX(atmel_aes_handle_queue)6.4. OK from  atmel_aes_write_ctrl() err=0, dd->total=96.
===MHX: (atmel_aes_crypt_dma_start)7.1. fast=1
===MHX: (atmel_aes_crypt_dma_start)7.2. addr_in=2e344990, addr_out=2e344990, count=96
===MHX: (atmel_aes_crypt_dma_start)7.4.
===MHX(atmel_aes_done_task)5.1
===MHX(atmel_aes_done_task)5.2
===MHX(atmel_aes_done_task)5.3
crypto_done()
crypto/ocf/crypto.c,1153: Q_LOCK()
crypto/ocf/crypto.c,1155: Q_UNLOCK()
crypto/ocf/crypto.c,1182: RETQ_LOCK
crypto/ocf/crypto.c,1185: RETQ_UNLOCK
===MHX(atmel_aes_handle_queue)6.1.
===MHX(atmel_aes_handle_queue)6.2
===MHX(atmel_aes_done_task)5.4 
crypto/ocf/crypto.c,1341: Q_LOCK()
crypto_proc - sleeping (qe=1 qb=0 kqe=1 kqb=0)
crypto/ocf/crypto.c,1429: Q_UNLOCK()
crypto/ocf/crypto.c,1523: RETQ_LOCK
crypto_ret_proc - awake
crypto/ocf/crypto.c,1494: RETQ_UNLOCK
crypto/ocf/crypto.c,1502: RETQ_LOCK
crypto_ret_proc - sleeping
crypto/ocf/crypto.c,1509: RETQ_UNLOCK
crypto_dispatch()
crypto/ocf/crypto.c,814: Q_LOCK()
crypto/ocf/crypto.c,865: Q_UNLOCK()
crypto/ocf/crypto.c,1443: Q_LOCK()
crypto_proc - awake
crypto/ocf/crypto.c,1337: Q_UNLOCK()
crypto_invoke()
===MHX: (atmel_aes_crypt)1.1..
===MHX: (atmel_aes_crypt)1.2..
===MHX: (atmel_aes_crypt)1.3..
===MHX(atmel_aes_handle_queue)6.1.
===MHX(atmel_aes_handle_queue)6.2
===MHX(atmel_aes_handle_queue)6.3.
===MHX(atmel_aes_handle_queue)6.3.1 dd->total=96.
===MHX(atmel_aes_handle_queue)6.4. OK from  atmel_aes_write_ctrl() err=0, dd->total=96.
===MHX: (atmel_aes_crypt_dma_start)7.1. fast=1
===MHX: (atmel_aes_crypt_dma_start)7.2. addr_in=2cde8114, addr_out=2cde8114, count=96
===MHX: (atmel_aes_crypt_dma_start)7.4.
===MHX(atmel_aes_done_task)5.1
===MHX(atmel_aes_done_task)5.2
===MHX(atmel_aes_done_task)5.3
crypto_done()
crypto/ocf/crypto.c,1153: Q_LOCK()
crypto/ocf/crypto.c,1155: Q_UNLOCK()
crypto/ocf/crypto.c,1182: RETQ_LOCK
crypto/ocf/crypto.c,1185: RETQ_UNLOCK
===MHX(atmel_aes_handle_queue)6.1.
===MHX(atmel_aes_handle_queue)6.2
===MHX(atmel_aes_done_task)5.4 
crypto/ocf/crypto.c,1341: Q_LOCK()
crypto_proc - sleeping (qe=1 qb=0 kqe=1 kqb=0)
crypto/ocf/crypto.c,1429: Q_UNLOCK()
crypto/ocf/crypto.c,1523: RETQ_LOCK
crypto_ret_proc - awake
crypto/ocf/crypto.c,1494: RETQ_UNLOCK
crypto/ocf/crypto.c,1502: RETQ_LOCK
crypto_ret_proc - sleeping
crypto/ocf/crypto.c,1509: RETQ_UNLOCK
crypto_dispatch()
crypto/ocf/crypto.c,814: Q_LOCK()
crypto/ocf/crypto.c,865: Q_UNLOCK()
crypto/ocf/crypto.c,1443: Q_LOCK()
crypto_proc - awake
crypto/ocf/crypto.c,1337: Q_UNLOCK()
crypto_invoke()
===MHX: (atmel_aes_crypt)1.1..

===MHX: (atmel_aes_crypt)1.2..
===MHX: (atmel_aes_crypt)1.3..
===MHX(atmel_aes_handle_queue)6.1.
===MHX(atmel_aes_handle_queue)6.2
===MHX(atmel_aes_handle_queue)6.3.
===MHX(atmel_aes_handle_queue)6.3.1 dd->total=96.
===MHX(atmel_aes_handle_queue)6.4. OK from  atmel_aes_write_ctrl() err=0, dd->total=96.
===MHX: (atmel_aes_crypt_dma_start)7.1. fast=1
===MHX: (atmel_aes_crypt_dma_start)7.2. addr_in=2d596c50, addr_out=2d596c50, count=96
===MHX: (atmel_aes_crypt_dma_start)7.4.
===MHX(atmel_aes_done_task)5.1
===MHX(atmel_aes_done_task)5.2
===MHX(atmel_aes_done_task)5.3
crypto_done()
crypto/ocf/crypto.c,1153: Q_LOCK()
crypto/ocf/crypto.c,1155: Q_UNLOCK()
crypto/ocf/crypto.c,1182: RETQ_LOCK
crypto/ocf/crypto.c,1185: RETQ_UNLOCK
===MHX(atmel_aes_handle_queue)6.1.
===MHX(atmel_aes_handle_queue)6.2
===MHX(atmel_aes_done_task)5.4 
crypto/ocf/crypto.c,1341: Q_LOCK()
crypto_proc - sleeping (qe=1 qb=0 kqe=1 kqb=0)
crypto/ocf/crypto.c,1429: Q_UNLOCK()
crypto/ocf/crypto.c,1523: RETQ_LOCK
crypto_ret_proc - awake
crypto/ocf/crypto.c,1494: RETQ_UNLOCK
crypto/ocf/crypto.c,1502: RETQ_LOCK
crypto_ret_proc - sleeping
crypto/ocf/crypto.c,1509: RETQ_UNLOCK
crypto_dispatch()
crypto/ocf/crypto.c,814: Q_LOCK()
crypto/ocf/crypto.c,865: Q_UNLOCK()
crypto/ocf/crypto.c,1443: Q_LOCK()
crypto_proc - awake
crypto/ocf/crypto.c,1337: Q_UNLOCK()
crypto_invoke()
===MHX: (atmel_aes_crypt)1.1..
===MHX: (atmel_aes_crypt)1.2..
===MHX: (atmel_aes_crypt)1.3..
===MHX(atmel_aes_handle_queue)6.1.
===MHX(atmel_aes_handle_queue)6.2
===MHX(atmel_aes_handle_queue)6.3.
===MHX(atmel_aes_handle_queue)6.3.1 dd->total=96.
===MHX(atmel_aes_handle_queue)6.4. OK from  atmel_aes_write_ctrl() err=0, dd->total=96.
===MHX: (atmel_aes_crypt_dma_start)7.1. fast=1
===MHX: (atmel_aes_crypt_dma_start)7.2. addr_in=2d5bf114, addr_out=2d5bf114, count=96
===MHX: (atmel_aes_crypt_dma_start)7.4.
===MHX(atmel_aes_done_task)5.1
===MHX(atmel_aes_done_task)5.2
===MHX(atmel_aes_done_task)5.3
crypto_done()
crypto/ocf/crypto.c,1153: Q_LOCK()
crypto/ocf/crypto.c,1155: Q_UNLOCK()
crypto/ocf/crypto.c,1182: RETQ_LOCK
crypto/ocf/crypto.c,1185: RETQ_UNLOCK
===MHX(atmel_aes_handle_queue)6.1.
===MHX(atmel_aes_handle_queue)6.2
===MHX(atmel_aes_done_task)5.4 
crypto/ocf/crypto.c,1341: Q_LOCK()
crypto_proc - sleeping (qe=1 qb=0 kqe=1 kqb=0)
crypto/ocf/crypto.c,1429: Q_UNLOCK()
crypto/ocf/crypto.c,1523: RETQ_LOCK
crypto_ret_proc - awake
crypto/ocf/crypto.c,1494: RETQ_UNLOCK
crypto/ocf/crypto.c,1502: RETQ_LOCK
crypto_ret_proc - sleeping
crypto/ocf/crypto.c,1509: RETQ_UNLOCK
root@UserDevice:~# 



I have checked how the cryptodev affects OpenSSL:
1. Enable the crypto engine in openssl compile in package/libs/openssl/Makefile:
#ifdef CONFIG_OPENSSL_ENGINE_CRYPTO
  OPENSSL_OPTIONS += -DHAVE_CRYPTODEV
  ifdef CONFIG_OPENSSL_ENGINE_DIGEST
    OPENSSL_OPTIONS += -DUSE_CRYPTODEV_DIGESTS
  endif
#else
#  OPENSSL_OPTIONS += no-engines
#endif

2. Compile and copy the new binary and .so files to target:
[Jeff@DENG0080-2 ipn4gii]$ scp build_dir/target-arm_v5te_uClibc-0.9.33.2_eabi/openssl-1.0.1g/ipkg-sama5d35/openssl-util/usr/bin/openssl root@192.168.168.1://usr/bin/.
root@192.168.168.1's password: 
openssl                                                                           100%  398KB 398.0KB/s   00:01 
[Jeff@DENG0080-2 ipn4gii]$ scp build_dir/target-arm_v5te_uClibc-0.9.33.2_eabi/openssl-1.0.1g/ipkg-install/usr/lib/libssl.so.1.0.0 root@192.168.168.1://usr/lib/.
root@192.168.168.1's password: 
libssl.so.1.0.0                                                                   100%  300KB 299.6KB/s   00:01    
[Jeff@DENG0080-2 ipn4gii]$ scp build_dir/target-arm_v5te_uClibc-0.9.33.2_eabi/openssl-1.0.1g/ipkg-install/usr/lib/libcrypto.so.1.0.0 root@192.168.168.1://usr/lib/.
root@192.168.168.1's password: 
libcrypto.so.1.0.0                                                                100% 1255KB 156.9KB/s   00:08

Make a engine dir and copy to it.
[Jeff@DENG0080-2 ipn4gii]$ scp build_dir/target-arm_v5te_uClibc-0.9.33.2_eabi/openssl-1.0.1g/ipkg-sama5d35/libopenssl/usr/lib/libcrypto.so.1.0.0 root@192.168.168.1://usr/lib/engines/.
root@192.168.168.1's password: 
libcrypto.so.1.0.0                                                                100%  990KB 494.8KB/s   00:02    

3. Run the OpenSSL speed test:
root@UserDevice:~# dmesg -c
root@UserDevice:~# 
root@UserDevice:~# openssl speed -evp aes-128-cbc -engine cryptodev
invalid engine "cryptodev"
3069985856:error:25066067:lib(37):func(102):reason(103):NA:0:filename(/usr/lib/engines/libcryptodev.so): File not found
3069985856:error:25070067:lib(37):func(112):reason(103):NA:0:
3069985856:error:260B6084:lib(38):func(182):reason(132):NA:0:
3069985856:error:2606A074:lib(38):func(106):reason(116):NA:0:id=cryptodev
3069985856:error:25066067:lib(37):func(102):reason(103):NA:0:filename(libcryptodev.so): File not found
3069985856:error:25070067:lib(37):func(112):reason(103):NA:0:
3069985856:error:260B6084:lib(38):func(182):reason(132):NA:0:
Doing aes-128-cbc for 3s on 16 size blocks: 793712 aes-128-cbc's in 2.55s
Doing aes-128-cbc for 3s on 64 size blocks: 271292 aes-128-cbc's in 2.96s
Doing aes-128-cbc for 3s on 256 size blocks: 71998 aes-128-cbc's in 3.01s
Doing aes-128-cbc for 3s on 1024 size blocks: 11930 aes-128-cbc's in 2.16s
Doing aes-128-cbc for 3s on 8192 size blocks: 2270 aes-128-cbc's in 3.00s
OpenSSL 1.0.1g 7 Apr 2014
built on: Mon Jul 25 11:16:19 MDT 2016
options:bn(64,32) rc4(ptr,char) des(idx,cisc,2,long) aes(partial) blowfish(ptr) 
compiler: arm-openwrt-linux-uclibcgnueabi-gcc -fPIC -DOPENSSL_PIC -DZLIB_SHARED -DZLIB -DOPENSSL_THREADS -D_REENTRANT -DDSO_DLFCN -DHAVE_DLFCN_H -I/home/Jeff/project-2/work/ipn4gii/staging_dir/target-arm_v5te_uClibc-0.9.33.2_eabi/usr/include -I/home/Jeff/project-2/work/ipn4gii/staging_dir/target-arm_v5te_uClibc-0.9.33.2_eabi/include -I/home/Jeff/project-2/work/ipn4gii/staging_dir/toolchain-arm_v5te_gcc-4.8-linaro_uClibc-0.9.33.2_eabi/usr/include -I/home/Jeff/project-2/work/ipn4gii/staging_dir/toolchain-arm_v5te_gcc-4.8-linaro_uClibc-0.9.33.2_eabi/include -DOPENSSL_SMALL_FOOTPRINT -DHAVE_CRYPTODEV -DOPENSSL_NO_ERR -DTERMIO -Os -pipe -march=armv5te -mtune=xscale -fno-caller-saves -fhonour-copts -Wno-error=unused-but-set-variable -msoft-float -fpic -fomit-frame-pointer -Wall
The 'numbers' are in 1000s of bytes per second processed.
type             16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes
aes-128-cbc       4980.15k     5865.77k     6123.42k     5655.70k     6198.61k
root@UserDevice:~# 
root@UserDevice:~# insmod lib/modules/3.6.9/cryptodev.ko 
root@UserDevice:~# ls /dev/crypto 
/dev/crypto
root@UserDevice:~# dmesg 
root@UserDevice:~# lsmod | grep crypt
cryptodev              10552  0 
cryptosoft             11928  0 
ocf                    14724  3 cryptodev,ipsec,cryptosoft
root@UserDevice:~# openssl speed -evp aes-128-cbc -engine cryptodev
engine "cryptodev" set.
Doing aes-128-cbc for 3s on 16 size blocks: 12930 aes-128-cbc's in 0.02s
Doing aes-128-cbc for 3s on 64 size blocks: 9863 aes-128-cbc's in 0.06s
Doing aes-128-cbc for 3s on 256 size blocks: 6260 aes-128-cbc's in 0.05s
Doing aes-128-cbc for 3s on 1024 size blocks: 9303 aes-128-cbc's in 0.02s
Doing aes-128-cbc for 3s on 8192 size blocks: 4491 aes-128-cbc's in 0.02s
OpenSSL 1.0.1g 7 Apr 2014
built on: Mon Jul 25 11:16:19 MDT 2016
options:bn(64,32) rc4(ptr,char) des(idx,cisc,2,long) aes(partial) blowfish(ptr) 
compiler: arm-openwrt-linux-uclibcgnueabi-gcc -fPIC -DOPENSSL_PIC -DZLIB_SHARED -DZLIB -DOPENSSL_THREADS -D_REENTRANT -DDSO_DLFCN -DHAVE_DLFCN_H -I/home/Jeff/project-2/work/ipn4gii/staging_dir/target-arm_v5te_uClibc-0.9.33.2_eabi/usr/include -I/home/Jeff/project-2/work/ipn4gii/staging_dir/target-arm_v5te_uClibc-0.9.33.2_eabi/include -I/home/Jeff/project-2/work/ipn4gii/staging_dir/toolchain-arm_v5te_gcc-4.8-linaro_uClibc-0.9.33.2_eabi/usr/include -I/home/Jeff/project-2/work/ipn4gii/staging_dir/toolchain-arm_v5te_gcc-4.8-linaro_uClibc-0.9.33.2_eabi/include -DOPENSSL_SMALL_FOOTPRINT -DHAVE_CRYPTODEV -DOPENSSL_NO_ERR -DTERMIO -Os -pipe -march=armv5te -mtune=xscale -fno-caller-saves -fhonour-copts -Wno-error=unused-but-set-variable -msoft-float -fpic -fomit-frame-pointer -Wall
The 'numbers' are in 1000s of bytes per second processed.
type             16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes
aes-128-cbc      10344.00k    10520.53k    32051.20k   476313.60k  1839513.60k
root@UserDevice:~# dmesg -c
crypto/ocf/crypto.c,814: Q_LOCK()
crypto/ocf/crypto.c,838: Q_UNLOCK()
crypto_invoke()
===MHX: (atmel_aes_crypt)1.1..
===MHX: (atmel_aes_crypt)1.2..
===MHX: (atmel_aes_crypt)1.3..
===MHX(atmel_aes_handle_queue)6.1.
===MHX(atmel_aes_handle_queue)6.2
===MHX(atmel_aes_handle_queue)6.3.
===MHX(atmel_aes_handle_queue)6.3.1 dd->total=8192.
===MHX(atmel_aes_handle_queue)6.4. OK from  atmel_aes_write_ctrl() err=0, dd->total=8192.
===MHX: (atmel_aes_crypt_dma_start)7.1. fast=1
===MHX: (atmel_aes_crypt_dma_start)7.2. addr_in=2f244000, addr_out=2f244000, count=8192
===MHX: (atmel_aes_crypt_dma_start)7.4.
crypto/ocf/crypto.c,840: Q_LOCK()
crypto/ocf/crypto.c,865: Q_UNLOCK()
===MHX(atmel_aes_done_task)5.1
===MHX(atmel_aes_done_task)5.2
===MHX(atmel_aes_done_task)5.3
crypto_done()
crypto/ocf/crypto.c,1153: Q_LOCK()
crypto/ocf/crypto.c,1155: Q_UNLOCK()
===MHX(atmel_aes_handle_queue)6.1.
===MHX(atmel_aes_handle_queue)6.2
===MHX(atmel_aes_done_task)5.4 
crypto_dispatch()
crypto/ocf/crypto.c,814: Q_LOCK()
crypto/ocf/crypto.c,838: Q_UNLOCK()
crypto_invoke()
===MHX: (atmel_aes_crypt)1.1..
===MHX: (atmel_aes_crypt)1.2..
===MHX: (atmel_aes_crypt)1.3..
===MHX(atmel_aes_handle_queue)6.1.
===MHX(atmel_aes_handle_queue)6.2
===MHX(atmel_aes_handle_queue)6.3.
===MHX(atmel_aes_handle_queue)6.3.1 dd->total=8192.
===MHX(atmel_aes_handle_queue)6.4. OK from  atmel_aes_write_ctrl() err=0, dd->total=8192.
===MHX: (atmel_aes_crypt_dma_start)7.1. fast=1
===MHX: (atmel_aes_crypt_dma_start)7.2. addr_in=2f244000, addr_out=2f244000, count=8192
===MHX: (atmel_aes_crypt_dma_start)7.4.
crypto/ocf/crypto.c,840: Q_LOCK()
crypto/ocf/crypto.c,865: Q_UNLOCK()
===MHX(atmel_aes_done_task)5.1
===MHX(atmel_aes_done_task)5.2
===MHX(atmel_aes_done_task)5.3
crypto_done()
crypto/ocf/crypto.c,1153: Q_LOCK()
crypto/ocf/crypto.c,1155: Q_UNLOCK()
===MHX(atmel_aes_handle_queue)6.1.
===MHX(atmel_aes_handle_queue)6.2
===MHX(atmel_aes_done_task)5.4 
crypto_dispatch()
crypto/ocf/crypto.c,814: Q_LOCK()
crypto/ocf/crypto.c,838: Q_UNLOCK()
crypto_invoke()
===MHX: (atmel_aes_crypt)1.1..
===MHX: (atmel_aes_crypt)1.2..
===MHX: (atmel_aes_crypt)1.3..
===MHX(atmel_aes_handle_queue)6.1.
===MHX(atmel_aes_handle_queue)6.2
===MHX(atmel_aes_handle_queue)6.3.
===MHX(atmel_aes_handle_queue)6.3.1 dd->total=8192.
===MHX(atmel_aes_handle_queue)6.4. OK from  atmel_aes_write_ctrl() err=0, dd->total=8192.
===MHX: (atmel_aes_crypt_dma_start)7.1. fast=1
===MHX: (atmel_aes_crypt_dma_start)7.2. addr_in=2f244000, addr_out=2f244000, count=8192
===MHX: (atmel_aes_crypt_dma_start)7.4.
crypto/ocf/crypto.c,840: Q_LOCK()
crypto/ocf/crypto.c,865: Q_UNLOCK()
===MHX(atmel_aes_done_task)5.1
===MHX(atmel_aes_done_task)5.2
===MHX(atmel_aes_done_task)5.3
crypto_done()
crypto/ocf/crypto.c,1153: Q_LOCK()
crypto/ocf/crypto.c,1155: Q_UNLOCK()
===MHX(atmel_aes_handle_queue)6.1.
===MHX(atmel_aes_handle_queue)6.2
===MHX(atmel_aes_done_task)5.4 
crypto_dispatch()
crypto/ocf/crypto.c,814: Q_LOCK()
crypto/ocf/crypto.c,838: Q_UNLOCK()
crypto_invoke()
===MHX: (atmel_aes_crypt)1.1..
===MHX: (atmel_aes_crypt)1.2..
===MHX: (atmel_aes_crypt)1.3..
===MHX(atmel_aes_handle_queue)6.1.
===MHX(atmel_aes_handle_queue)6.2
===MHX(atmel_aes_handle_queue)6.3.
===MHX(atmel_aes_handle_queue)6.3.1 dd->total=8192.
===MHX(atmel_aes_handle_queue)6.4. OK from  atmel_aes_write_ctrl() err=0, dd->total=8192.
===MHX: (atmel_aes_crypt_dma_start)7.1. fast=1
===MHX: (atmel_aes_crypt_dma_start)7.2. addr_in=2f244000, addr_out=2f244000, count=8192
===MHX: (atmel_aes_crypt_dma_start)7.4.
crypto/ocf/crypto.c,840: Q_LOCK()
crypto/ocf/crypto.c,865: Q_UNLOCK()
===MHX(atmel_aes_done_task)5.1
===MHX(atmel_aes_done_task)5.2
===MHX(atmel_aes_done_task)5.3
crypto_done()
crypto/ocf/crypto.c,1153: Q_LOCK()
crypto/ocf/crypto.c,1155: Q_UNLOCK()
===MHX(atmel_aes_handle_queue)6.1.
===MHX(atmel_aes_handle_queue)6.2
===MHX(atmel_aes_done_task)5.4 
crypto_dispatch()
crypto/ocf/crypto.c,814: Q_LOCK()
crypto/ocf/crypto.c,838: Q_UNLOCK()
crypto_invoke()
===MHX: (atmel_aes_crypt)1.1..
===MHX: (atmel_aes_crypt)1.2..
===MHX: (atmel_aes_crypt)1.3..
===MHX(atmel_aes_handle_queue)6.1.
===MHX(atmel_aes_handle_queue)6.2
===MHX(atmel_aes_handle_queue)6.3.
===MHX(atmel_aes_handle_queue)6.3.1 dd->total=8192.
===MHX(atmel_aes_handle_queue)6.4. OK from  atmel_aes_write_ctrl() err=0, dd->total=8192.
===MHX: (atmel_aes_crypt_dma_start)7.1. fast=1
===MHX: (atmel_aes_crypt_dma_start)7.2. addr_in=2f244000, addr_out=2f244000, count=8192
===MHX: (atmel_aes_crypt_dma_start)7.4.
crypto/ocf/crypto.c,840: Q_LOCK()
crypto/ocf/crypto.c,865: Q_UNLOCK()
===MHX(atmel_aes_done_task)5.1
===MHX(atmel_aes_done_task)5.2
===MHX(atmel_aes_done_task)5.3
crypto_done()
crypto/ocf/crypto.c,1153: Q_LOCK()
crypto/ocf/crypto.c,1155: Q_UNLOCK()
===MHX(atmel_aes_handle_queue)6.1.
===MHX(atmel_aes_handle_queue)6.2
===MHX(atmel_aes_done_task)5.4 
crypto_dispatch()
crypto/ocf/crypto.c,814: Q_LOCK()
crypto/ocf/crypto.c,838: Q_UNLOCK()
crypto_invoke()
===MHX: (atmel_aes_crypt)1.1..
===MHX: (atmel_aes_crypt)1.2..
===MHX: (atmel_aes_crypt)1.3..
===MHX(atmel_aes_handle_queue)6.1.
===MHX(atmel_aes_handle_queue)6.2
===MHX(atmel_aes_handle_queue)6.3.
===MHX(atmel_aes_handle_queue)6.3.1 dd->total=8192.
===MHX(atmel_aes_handle_queue)6.4. OK from  atmel_aes_write_ctrl() err=0, dd->total=8192.
===MHX: (atmel_aes_crypt_dma_start)7.1. fast=1
===MHX: (atmel_aes_crypt_dma_start)7.2. addr_in=2f244000, addr_out=2f244000, count=8192
===MHX: (atmel_aes_crypt_dma_start)7.4.
crypto/ocf/crypto.c,840: Q_LOCK()
crypto/ocf/crypto.c,865: Q_UNLOCK()
===MHX(atmel_aes_done_task)5.1
===MHX(atmel_aes_done_task)5.2
===MHX(atmel_aes_done_task)5.3
crypto_done()
crypto/ocf/crypto.c,1153: Q_LOCK()
crypto/ocf/crypto.c,1155: Q_UNLOCK()
===MHX(atmel_aes_handle_queue)6.1.
===MHX(atmel_aes_handle_queue)6.2
===MHX(atmel_aes_done_task)5.4 
crypto_dispatch()
crypto/ocf/crypto.c,814: Q_LOCK()
crypto/ocf/crypto.c,838: Q_UNLOCK()
crypto_invoke()
===MHX: (atmel_aes_crypt)1.1..
===MHX: (atmel_aes_crypt)1.2..
===MHX: (atmel_aes_crypt)1.3..
===MHX(atmel_aes_handle_queue)6.1.
===MHX(atmel_aes_handle_queue)6.2
===MHX(atmel_aes_handle_queue)6.3.
===MHX(atmel_aes_handle_queue)6.3.1 dd->total=8192.
===MHX(atmel_aes_handle_queue)6.4. OK from  atmel_aes_write_ctrl() err=0, dd->total=8192.
===MHX: (atmel_aes_crypt_dma_start)7.1. fast=1
===MHX: (atmel_aes_crypt_dma_start)7.2. addr_in=2f244000, addr_out=2f244000, count=8192
===MHX: (atmel_aes_crypt_dma_start)7.4.
crypto/ocf/crypto.c,840: Q_LOCK()
crypto/ocf/crypto.c,865: Q_UNLOCK()
===MHX(atmel_aes_done_task)5.1
===MHX(atmel_aes_done_task)5.2
===MHX(atmel_aes_done_task)5.3
crypto_done()
crypto/ocf/crypto.c,1153: Q_LOCK()
crypto/ocf/crypto.c,1155: Q_UNLOCK()
===MHX(atmel_aes_handle_queue)6.1.
===MHX(atmel_aes_handle_queue)6.2
===MHX(atmel_aes_done_task)5.4 
crypto_dispatch()
crypto/ocf/crypto.c,814: Q_LOCK()
crypto/ocf/crypto.c,838: Q_UNLOCK()
crypto_invoke()
===MHX: (atmel_aes_crypt)1.1..
===MHX: (atmel_aes_crypt)1.2..
===MHX: (atmel_aes_crypt)1.3..
===MHX(atmel_aes_handle_queue)6.1.
===MHX(atmel_aes_handle_queue)6.2
===MHX(atmel_aes_handle_queue)6.3.
===MHX(atmel_aes_handle_queue)6.3.1 dd->total=8192.
===MHX(atmel_aes_handle_queue)6.4. OK from  atmel_aes_write_ctrl() err=0, dd->total=8192.
===MHX: (atmel_aes_crypt_dma_start)7.1. fast=1
===MHX: (atmel_aes_crypt_dma_start)7.2. addr_in=2f244000, addr_out=2f244000, count=8192
===MHX: (atmel_aes_crypt_dma_start)7.4.
crypto/ocf/crypto.c,840: Q_LOCK()
crypto/ocf/crypto.c,865: Q_UNLOCK()
===MHX(atmel_aes_done_task)5.1
===MHX(atmel_aes_done_task)5.2
===MHX(atmel_aes_done_task)5.3
crypto_done()
crypto/ocf/crypto.c,1153: Q_LOCK()
crypto/ocf/crypto.c,1155: Q_UNLOCK()
===MHX(atmel_aes_handle_queue)6.1.
===MHX(atmel_aes_handle_queue)6.2
===MHX(atmel_aes_done_task)5.4 
crypto_dispatch()
crypto/ocf/crypto.c,814: Q_LOCK()
crypto/ocf/crypto.c,838: Q_UNLOCK()
crypto_invoke()
===MHX: (atmel_aes_crypt)1.1..
===MHX: (atmel_aes_crypt)1.2..
===MHX: (atmel_aes_crypt)1.3..
===MHX(atmel_aes_handle_queue)6.1.
===MHX(atmel_aes_handle_queue)6.2
===MHX(atmel_aes_handle_queue)6.3.
===MHX(atmel_aes_handle_queue)6.3.1 dd->total=8192.
===MHX(atmel_aes_handle_queue)6.4. OK from  atmel_aes_write_ctrl() err=0, dd->total=8192.
===MHX: (atmel_aes_crypt_dma_start)7.1. fast=1
===MHX: (atmel_aes_crypt_dma_start)7.2. addr_in=2f244000, addr_out=2f244000, count=8192
===MHX: (atmel_aes_crypt_dma_start)7.4.
crypto/ocf/crypto.c,840: Q_LOCK()
crypto/ocf/crypto.c,865: Q_UNLOCK()
===MHX(atmel_aes_done_task)5.1
===MHX(atmel_aes_done_task)5.2
===MHX(atmel_aes_done_task)5.3
crypto_done()
crypto/ocf/crypto.c,1153: Q_LOCK()
crypto/ocf/crypto.c,1155: Q_UNLOCK()
===MHX(atmel_aes_handle_queue)6.1.
===MHX(atmel_aes_handle_queue)6.2
===MHX(atmel_aes_done_task)5.4 
crypto_dispatch()
crypto/ocf/crypto.c,814: Q_LOCK()
crypto/ocf/crypto.c,838: Q_UNLOCK()
crypto_invoke()
===MHX: (atmel_aes_crypt)1.1..
===MHX: (atmel_aes_crypt)1.2..
===MHX: (atmel_aes_crypt)1.3..
===MHX(atmel_aes_handle_queue)6.1.
===MHX(atmel_aes_handle_queue)6.2
===MHX(atmel_aes_handle_queue)6.3.
===MHX(atmel_aes_handle_queue)6.3.1 dd->total=8192.
===MHX(atmel_aes_handle_queue)6.4. OK from  atmel_aes_write_ctrl() err=0, dd->total=8192.
===MHX: (atmel_aes_crypt_dma_start)7.1. fast=1
===MHX: (atmel_aes_crypt_dma_start)7.2. addr_in=2f244000, addr_out=2f244000, count=8192
===MHX: (atmel_aes_crypt_dma_start)7.4.
crypto/ocf/crypto.c,840: Q_LOCK()
crypto/ocf/crypto.c,865: Q_UNLOCK()
===MHX(atmel_aes_done_task)5.1
===MHX(atmel_aes_done_task)5.2
===MHX(atmel_aes_done_task)5.3
crypto_done()
crypto/ocf/crypto.c,1153: Q_LOCK()
crypto/ocf/crypto.c,1155: Q_UNLOCK()
===MHX(atmel_aes_handle_queue)6.1.
===MHX(atmel_aes_handle_queue)6.2
===MHX(atmel_aes_done_task)5.4 
crypto_dispatch()
crypto/ocf/crypto.c,814: Q_LOCK()
crypto/ocf/crypto.c,838: Q_UNLOCK()
crypto_invoke()
===MHX: (atmel_aes_crypt)1.1..
===MHX: (atmel_aes_crypt)1.2..
===MHX: (atmel_aes_crypt)1.3..
===MHX(atmel_aes_handle_queue)6.1.
===MHX(atmel_aes_handle_queue)6.2
===MHX(atmel_aes_handle_queue)6.3.
===MHX(atmel_aes_handle_queue)6.3.1 dd->total=8192.
===MHX(atmel_aes_handle_queue)6.4. OK from  atmel_aes_write_ctrl() err=0, dd->total=8192.
===MHX: (atmel_aes_crypt_dma_start)7.1. fast=1
===MHX: (atmel_aes_crypt_dma_start)7.2. addr_in=2f244000, addr_out=2f244000, count=8192
===MHX: (atmel_aes_crypt_dma_start)7.4.
crypto/ocf/crypto.c,840: Q_LOCK()
crypto/ocf/crypto.c,865: Q_UNLOCK()
===MHX(atmel_aes_done_task)5.1
===MHX(atmel_aes_done_task)5.2
===MHX(atmel_aes_done_task)5.3
crypto_done()
crypto/ocf/crypto.c,1153: Q_LOCK()
crypto/ocf/crypto.c,1155: Q_UNLOCK()
===MHX(atmel_aes_handle_queue)6.1.
===MHX(atmel_aes_handle_queue)6.2
===MHX(atmel_aes_done_task)5.4 
crypto_freesession()
crypto/ocf/crypto.c,450: DRIVER_LOCK()
crypto/ocf/crypto.c,468: DRIVER_UNLOCK()
crypto/ocf/crypto.c,471: DRIVER_LOCK()
crypto/ocf/crypto.c,481: DRIVER_UNLOCK()
root@UserDevice:~# 
root@UserDevice:~# 

   

Jul 22,2016
https://lists.openswan.org/pipermail/users/2011-October/021083.html:
1. You cannot accelerate NETKEY with OCF.  NETKEY uses cryptoAPI.  There is
   no cryptoAPI-->OCF driver,  only the OCF-->cryptoAPI driver (cryptosoft).

2. You can use the kernels cryptoAPI drivers (SW and HW) with OCF by using
   the OCF cryptosoft driver.  This allows OCF and NETkey to use the same
   crypto drivers (available in newish kernels).


IPSecVPN over cellular test.

1. Fresh checkout local build,v1.2.0 build 1049
IPerf sender : Rogers, auto/auto mode frequent disconnection so use auto/wcdma.Technology=UTMS
IPerf receiver : Bell, auto/auto mode frequent disconnection so use auto/wcdma. Technology=UTMS

Ping time 1200ms too big. Changed to 2 Bell LTE SIMs and the ping is 310mS.

1. Test with h/w crypto. 
		T/P		SenderSide Sys/Idle/Sirq	ReceiverSide Sys/Idle/Sirq	Comment
UDP Test	10.6M(30%)		21/0/74%			30/0/56%		-b 16m, Slow but not dead
UDP Test	11.4M(11%)		26/0/72%			34/0/54%		-b 13m, ksoftirqd/0, ocf_0, ocf_ret_0 take major part of CPU.
TCP Test	5.8M			11/50/39			18/36/61

2. Test with v1.2.0 fresh checkout build 1049 , 
		T/P			SenderSide Sys/Idle/Sirq	ReceiverSide Sys/Idle/Sirq	Comment
UDP Test	10.9Mbps(29%)		Serial console die.N/A			13/0/71%		-b 16m
UDP Test	11.6Mbps(6.3% loss)		3/0/93%				14/0/75%		-b 13m
TCP Test	6Mbps				2/35/62%			3/44/40%

Too much CPU is taken by ocf_0 and ocf_ret_0 which are kernel threads:
cryptoproc[cpu] = kthread_create(crypto_proc, (void *) cpu, "ocf_%d", (int) cpu);
cryptoretproc[cpu] = kthread_create(crypto_ret_proc, (void *) cpu, "ocf_ret_%d", (int) cpu);

Jul 21, 2016
atmel h/w crypto driver should use OCF framework, not CryptoAPI!!!
ipsec.ko--->cryptodev/cryptosoft.ko--->ocf.ko--->atmel-aes/sha/tdes.ko.
/home/Jeff/project-2/work/ipn4gii/build_dir/target-arm_v5te_uClibc-0.9.33.2_eabi/linux-sama5d35/openswan-2.6.43/packaging/linus/config-all.h must be changed to modifi IPSec compile switches.

IPSEC_ALG must be disabled and IPSEC_OCF must be enabled. IPSEC_ALG will use IPSec own software crypto library, not the kernel crypto and the h/w accelerator. When use IPSEC_OCF, IPSec will call OCF framework and OCF will decide kernel mode software crypto is called or the kernel driver of h/w accelerator will be called. So the OCF works like a dispatcher that automatically choose kernel built in s/w crypto or h/w crypto if the h/w crypto has registered itself properly into /proc/crypto.

How to remove the 5Mbps cap of IPsec VPN: in /usr/lib/ipsec/_updown.mast, comment all lines in sch_qos_check().

Test parameters: aes/sha1/modp1024/esp, WAN-WAN connection.
UDP T/P test
Sender side : iperf -c 192.168.172.135 -i 2 -u -b 15m -t 60
Receiver side : ipsec -s -i 2 -u
UDP T/P test
Sender side : iperf -c 192.168.172.135 -i 2 -u -b 15m -t 60
Receiver side : ipsec -s -i 2 -u

1. Test with h/w crypto. 
		T/P		SenderSide Sys/Idle/Sirq	ReceiverSide Sys/Idle/Sirq	Comment
UDP Test	15.4Mbps(3%)	15/0/80%			15/30/50%			-b 16m, console TOP command slow
UDP Test	13Mbps(0.41%)	20/5/72%			20/16/52%			-b 13m, console TOP command smooth
TCP Test	8.3Mbps		14/40/40%			18/40/35 %			-l 1024k -w 1024k

2. Test with v1.2.0 build 1048, 
		T/P		SenderSide Sys/Idle/Sirq	ReceiverSide Sys/Idle/Sirq	Comment
UDP Test	14.8Mbps(7.5%)	serial console died,N/A		serial console died,N/A		-b 16m, console dead
UDP Test	13Mbps(0%)	4/4/90%				2/4/92%				-b 13m
TCP Test	14.1Mbps	serial console died,N/A		2/0/96%				-l 1024k -w 1024k,rcv side slow,xmit side console dead



Jul 20,2016
root@UserDevice:~# cat /proc/interrupts 
           CPU0       
 16:         11       AIC  at91_tick
 17:     186255       AIC  f0004000.spi
 18:     348747       AIC  tc_clkevt
 19:          0       AIC  f0018000.i2c
 20:          0       AIC  ttyS1
 21:          0       AIC  ttyS2
 23:       1092       AIC  eth0
 25:          0       AIC  f8008000.spi
 27:      39780       AIC  at91_adc
 30:       2038       AIC  eth1
 31:          0       AIC  atmel-sha
 32:          0       AIC  atmel-aes
 33:          0       AIC  atmel-tdes
 34:      17974       AIC  at_hdmac

The interrupt counters of atmel crypto engine actually DON NOT reflect if this the h/w engine is called or not. Here is a test. Enable kernel OCF frame work and use the ocf-bench.ko to benchmark the performance. And some debug info is added in  build_dir/target-arm_v5te_uClibc-0.9.33.2_eabi/linux-sama5d35/linux-3.6.9/drivers/crypto/atmel-aes.c.


1. 4Gii fresh boot up: No atmel driver is added. The benchmark is about 30Mbps.
root@UserDevice:~# insmod lib/modules/3.6.9/ocf.ko 
root@UserDevice:~# insmod lib/modules/3.6.9/cryptodev.ko 
root@UserDevice:~# insmod lib/modules/3.6.9/cryptosoft.ko 
root@UserDevice:~# 
root@UserDevice:~# lsmod | grep atmel
root@UserDevice:~# cat /proc/interrupts 
           CPU0       
 16:         11       AIC  at91_tick
 17:     196330       AIC  f0004000.spi
 18:      15682       AIC  tc_clkevt
 19:          0       AIC  f0018000.i2c
 20:          0       AIC  ttyS1
 21:          0       AIC  ttyS2
 23:         83       AIC  eth0
 25:          0       AIC  f8008000.spi
 27:       1008       AIC  at91_adc
 30:        272       AIC  eth1
 34:      18050       AIC  at_hdmac
 35:          0       AIC  at_hdmac
 36:       4175       AIC  ttyS0
 42:          0       AIC  at91_rtc
 43:          0       AIC  atmel_usba_udc
 44:        378       AIC  ehci_hcd:usb1, ohci_hcd:usb2
 46:          1      GPIO  otg_irq
 47:          2      GPIO  atmel_usba_udc
 50:          1      GPIO  pb_user1
Err:          0
root@UserDevice:~# 
root@UserDevice:~# insmod lib/modules/3.6.9/ocf-bench.ko 
insmod: can't insert 'lib/modules/3.6.9/ocf-bench.ko': Invalid argument
root@UserDevice:~# dmesg -c
Crypto Speed tests
OCF: testing ...
OCF: 2746 requests of 1488 bytes in 102 jiffies (32.047 Mbps)
root@UserDevice:~# insmod lib/modules/3.6.9/ocf-bench.ko 
insmod: can't insert 'lib/modules/3.6.9/ocf-bench.ko': Invalid argument
root@UserDevice:~# dmesg -c
Crypto Speed tests
OCF: testing ...
OCF: 2632 requests of 1488 bytes in 102 jiffies (30.716 Mbps)
root@UserDevice:~# insmod lib/modules/3.6.9/ocf-bench.ko 
insmod: can't insert 'lib/modules/3.6.9/ocf-bench.ko': Invalid argument
root@UserDevice:~# dmesg -c
Crypto Speed tests
OCF: testing ...
OCF: 2704 requests of 1488 bytes in 102 jiffies (31.557 Mbps)


2. Insert atmel driver:
root@UserDevice:~# insmod lib/modules/3.6.9/atmel-aes.ko 
root@UserDevice:~# insmod lib/modules/3.6.9/atmel-tdes.ko 
root@UserDevice:~# insmod lib/modules/3.6.9/atmel-sha.ko 
root@UserDevice:~# 
root@UserDevice:~# cat /proc/interrupts 
           CPU0       
 16:         11       AIC  at91_tick
 17:     196330       AIC  f0004000.spi
 18:      28375       AIC  tc_clkevt
 19:          0       AIC  f0018000.i2c
 20:          0       AIC  ttyS1
 21:          0       AIC  ttyS2
 23:        115       AIC  eth0
 25:          0       AIC  f8008000.spi
 27:       2484       AIC  at91_adc
 30:        335       AIC  eth1
 31:          0       AIC  atmel-sha
 32:          0       AIC  atmel-aes
 33:          0       AIC  atmel-tdes
 34:      18050       AIC  at_hdmac
 35:          0       AIC  at_hdmac
 36:      23328       AIC  ttyS0
 42:          0       AIC  at91_rtc
 43:          0       AIC  atmel_usba_udc
 44:        527       AIC  ehci_hcd:usb1, ohci_hcd:usb2
 46:          1      GPIO  otg_irq
 47:          2      GPIO  atmel_usba_udc
 50:          1      GPIO  pb_user1
Err:          0
root@UserDevice:~# dmesg -c
atmel_aes f8038000.aes: version: 0x135
atmel_aes f8038000.aes: Atmel AES
atmel_tdes: `' invalid for parameter `.ko'
atmel_tdes f803c000.tdes: version: 0x701
atmel_tdes f803c000.tdes: Atmel DES/TDES
atmel_sha f8034000.sha: version: 0x410
atmel_sha f8034000.sha: Atmel SHA1/SHA256

3. Test the benchmark again:
root@UserDevice:~# insmod lib/modules/3.6.9/ocf-bench.ko 
insmod: can't insert 'lib/modules/3.6.9/ocf-bench.ko': Invalid argument
root@UserDevice:~# dmesg -c
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.

===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt)1.2. Atmel Crypt engine.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt_dma)1.1.
===MHX: (atmel_aes_crypt_dma)1.1.
OCF: 3772 requests of 1488 bytes in 101 jiffies (44.457 Mbps)
root@UserDevice:~# cat /proc/interrupts 
           CPU0       
 16:         11       AIC  at91_tick
 17:     196330       AIC  f0004000.spi
 18:      62120       AIC  tc_clkevt
 19:          0       AIC  f0018000.i2c
 20:          0       AIC  ttyS1
 21:          0       AIC  ttyS2
 23:        209       AIC  eth0
 25:          0       AIC  f8008000.spi
 27:       6420       AIC  at91_adc
 30:        505       AIC  eth1
 31:          0       AIC  atmel-sha
 32:          0       AIC  atmel-aes
 33:          0       AIC  atmel-tdes
 34:      18050       AIC  at_hdmac
 35:      11387       AIC  at_hdmac
 36:      74518       AIC  ttyS0
 42:          0       AIC  at91_rtc
 43:          0       AIC  atmel_usba_udc
 44:        887       AIC  ehci_hcd:usb1, ohci_hcd:usb2
 46:          1      GPIO  otg_irq
 47:          2      GPIO  atmel_usba_udc
 50:          1      GPIO  pb_user1
Err:          0

Tested 3 times and average benchmark is about 44Mbps. If the debug info is removed from atmel-aes.c, the benchmark is about 50Mbps, more than 60% higher than orignal number.

And the most important: I have a debug print out in static irqreturn_t atmel_aes_irq(), but it is not printed. That means no interrupt is used and only DMA is used for h/w accelsrator.



In /home/Jeff/project-2/work/ipn4gii/build_dir/target-arm_v5te_uClibc-0.9.33.2_eabi/linux-sama5d35/openswan-2.6.43/linux/net/ipsec/Kconfig, CONFIG_KLIPS_OCF( which generates ipsec_ocf.o) should be ON, and KLIPS_ALG ( which generates ipsec_alg.o)should be OFF. (To be tested). Directly modify build_dir/target-arm_v5te_uClibc-0.9.33.2_eabi/linux-sama5d35/openswan-2.6.43/linux/net/ipsec/defconfig.


root@UserDevice:~# cat proc/net/ipsec_klipsdebug 
debug_tunnel=00000000.
debug_xform=00000000.
debug_eroute=00000000.
debug_spi=00000000.
debug_radij=00000000.
debug_esp=00000000.
debug_ah=00000000.
debug_rcv=00000000.
debug_pfkey=00000000.
root@UserDevice:~# 
root@UserDevice:~# 
root@UserDevice:~# 
root@UserDevice:~# 
root@UserDevice:~# 
root@UserDevice:~# 
root@UserDevice:~# 
root@UserDevice:~#  ipsec klipsdebug --all 
root@UserDevice:~# cat proc/net/ipsec_klipsdebug 
debug_tunnel=ffffffff.
debug_xform=ffffffff.
debug_eroute=ffffffff.
debug_spi=ffffffff.
debug_radij=ffffffff.
debug_esp=ffffffff.
debug_ah=ffffffff.
debug_rcv=ffffffff.
debug_pfkey=ffffffff.


Jul 18,2016
About h/w accelerator: https://libreswan.org/wiki/OCF_Hardware_crypto_acceleration:
There are two methods for crypto hardware acceleration. The most complete one is the Open Cryptographic Framework ("OCF"), a port of the OpenBSD code. A newer more native implementation is the CryptoAPI async interface. The latter implementation is still extremely limited. It does not have many drivers yet nor a rich API for userland. It is currently recommended to use OCF for crypto acceleration. 

root@UserDevice:~# dmesg -c
klips_info:ipsec_init: KLIPS startup, Openswan KLIPS IPsec stack version: 2.6.43
NET: Registered protocol family 15
registered KLIPS /proc/sys/net
klips_info:ipsec_alg_init: KLIPS alg v=0.8.1-0 (EALG_MAX=255, AALG_MAX=255)
klips_info:ipsec_alg_init: calling ipsec_alg_static_init()
ipsec_aes_init(alg_type=15 alg_id=12 name=aes): ret=0
ipsec_aes_init(alg_type=14 alg_id=9 name=aes_mac): ret=0
ipsec_3des_init(alg_type=15 alg_id=3 name=3des): ret=0
KLIPS: lookup for ciphername=cbc(aes-atmel): not found 
KLIPS: lookup for ciphername=cbc(twofish): not found 
KLIPS: lookup for ciphername=cbc(serpent): not found 
KLIPS: lookup for ciphername=cbc(cast5): not found 
KLIPS: lookup for ciphername=cbc(blowfish): not found 
klips_debug:setup_cipher_list():ciphername=cbc(des3_ede) found
KLIPS cryptoapi interface: alg_type=15 alg_id=3 name=cbc(des3_ede) keyminbits=192 keymaxbits=192, found(0)
klips_debug:setup_cipher_list():ciphername=ecb(cipher_null) found
KLIPS cryptoapi interface: alg_type=15 alg_id=11 name=ecb(cipher_null)'+� keyminbits=0 keymaxbits=0, found(0)

In ipsec_alg.c:

#if defined(CONFIG_KLIPS_ENC_AES) && CONFIG_KLIPS_ENC_AES && !defined(CONFIG_KLIPS_ENC_AES_MODULE)
        /* register our own AES code */
        {
                extern int ipsec_aes_init(void);
                ipsec_aes_init();
        }
#endif



Jul 15, 2016
Atmel 4Gii, 
CONFIG_CRYPTO_DEV_ATMEL_AES=y
CONFIG_CRYPTO_DEV_ATMEL_SHA=y
CONFIG_CRYPTO_DEV_ATMEL_TDES=y


Jul 14, 2016
IPSec: This final packet is created using the Encapsulating Security Payload protocol (ESP), also known as IP protocol 50. ESP operates at layer 4 of the networking stack, and is therefore on the same level as protocols such as TCP and UDP. This is important to understand as packets between two endpoints don’t use TCP, UDP, ICMP, or anything like that; ESP is its own beast.

PWii-v1_3_0-r1016-48-speed-ipsec.bin build: 48Hz, not size optimized, turn IPSec Transport and Tunnel. No ipsec0 interface established but there are gre, gretap and tunl interfaces. Can not establish IPSec connection.
PWii-v1_3_0-r1016-48-speed.bin : 2.2Mbps and 4.9Mbps, no improvements seen.

Jul 11,2016
http://www.smallnetbuilder.com/other/security/security-howto/32542-setting-up-and-using-openvpn-on-netgear-routers?start=2:
Performance
I had three NETGEAR routers handy for testing. My go-to IxChariot performance test tool would not work through the OpenVPN tunnel. So I had to resort to drag-and-dropping a >1 GB Windows backup .bkf file for testing. Drag-and-drops were initiated from the remote (WAN side) machine to ensure that traffic flowed through the tunnel.
Router			CPU					Firmware			Remote > Server			Server > Remote
NETGEAR R7000	Broadcom BCM4709 dual core, 1 GHz		v1.0.3.80_1.1.38		5.4				5.4
NETGEAR R7500	QCA IPQ8064 dual-core @ 1.4 GHz			v1.0.0.52			5.2				5.2
NETGEAR R8000	Broadcom BCM4709 dual core, 1 GHz		v1.0.0.102_1.0.45		5.2				5.2
Table 1: File copy throughput - OpenVPN tunnel (MBytes/sec)

So testified IPQ8064 VPN T/P is about 41.6Mbps. From from https://wiki.openwrt.org/doc/howto/benchmark.openssl:

BogoMIPS 	OpenSSL Ver 	MD5 	  SHA-1    SHA-256   SHA-512   DES 	 3DES 	  AES-128   AES-192   AES-256 	RSA Sign  RSA Verify  	DSA Sign  DSA Verify
12.56 12.56	1.0.2a	 	97386220  38651060 31463530  12692390  14909440	 5584660  28132830  24241260  21118510  21.2	  755.7 	73.8	  60.2	

All three products use dual-core processors, so the results are very similar. The R7000 and R8000 results using a Broadcom BCM4709 processor are essentially the same as obtained with the ASUS RT-AC87U, which uses the same main CPU.


mcespi.c : https://sourceforge.net/projects/mcespi/files/mcespi-0.3/mcespi.c/download, 

Jul 8, 2016
Some SSL benchmarks from https://wiki.openwrt.org/doc/howto/benchmark.openssl:

BogoMIPS OpenSSL Ver 	MD5 		SHA-1 	  SHA-256 	SHA-512 	DES 	3DES 	AES-128 	AES-192 	AES-256 	RSA Sign RSA Verify  DSA Sign 	DSA Verify
AR9331
282.62   1.0.1e 	22632450 	14632580  6848130 	3054530 	3266220 1161570	5400650 	4685660 	4101190 	5 	 173.7 	     17.6 	14.2
266.24 	 1.0.1e 	21197480 	13745150  6514560 	2891090 	3101700 1108310 5160960 	4460390 	3923050 	4.8 	 165 	     16.6 	13.4
265.42 	 1.0.1c 	21573970 	14029820  6491480 	2862760 	2916690 1038340 5173430 	4444840 	3905190 	4.8 	 165.2 	     16.6  	13.5
AR9344:
278.93 	 1.0.1e 	34957780 	20501170  9654800 	4426250 	4904920 1718250 9812620 	8487910 	7457060 	9.5 	 336.8 	     34.3 	27.4
278.93 	 1.0.1e 	33743550 	20258770  9637390 	4421370 	4882070 1719270 9812690 	8376570 	7332550 	9.4 	 340.5 	     34.2 	28.3

AP148 board WebGUI, username/password=root/"empty", don't need to punch password. When ssh root@192.168.168.1, still don't need to input password just enter.

U-Boot 2012.07 [Enterprise IPQ806X.LN,r37990] (Nov 21 2014 - 10:58:30)

smem ram ptable found: ver: 0 len: 5
DRAM:  491 MiB
NAND:  SF: Unsupported manufacturer 00
ipq_spi: SPI Flash not found (bus/cs/speed/mode) = (0/0/48000000/0)
256 MiB
*** Warning - bad CRC, using default environment

In:    serial
Out:   serial
Err:   serial
cdp: get part failed for 0:HLOS
Net:   MAC1 addr:0:3:7f:ba:db:1
athrs17_reg_init: complete
athrs17_vlan_config ...done
S17 inits done
MAC2 addr:0:3:7f:ba:db:2
eth0, eth1
Hit any key to stop autoboot:  0 
(IPQ) # 
(IPQ) # help
?       - alias for 'help'
base    - print or set address offset
bootipq - bootipq from flash device
bootm   - boot application image from memory
bootp   - boot image via network using BOOTP/TFTP protocol
bootz   - boot Linux zImage image from memory
chpart  - change active partition
cmp     - memory compare
cp      - memory copy
crc32   - checksum calculation
dhcp    - boot image via network using DHCP/TFTP protocol
dumpipq_data- dumpipq_data crashdump collection from memory
echo    - echo args to console
env     - environment handling commands
exit    - exit script
false   - do nothing, unsuccessfully
fdt     - flattened device tree utility commands
go      - start application at address 'addr'
help    - print command description/usage
iminfo  - print header information for application image
imxtract- extract a part of a multi-image
ipq_nand- Switch between SBL and Linux kernel page layout.
loop    - infinite loop on address range
md      - memory display
mm      - memory modify (auto-incrementing address)
mtdparts- define flash/nand partitions
mtest   - simple RAM read/write test
mw      - memory write (fill)
nand    - NAND sub-system
nboot   - boot from NAND device
nm      - memory modify (constant address)
ping    - send ICMP ECHO_REQUEST to network host
printenv- print environment variables
reset   - Perform RESET of the CPU
run     - run commands in an environment variable
saveenv - save environment variables to persistent storage
setenv  - set environment variables
sf      - SPI flash sub-system
showvar - print local hushshell variables
smeminfo- print SMEM FLASH information
source  - run script from memory
test    - minimal test like /bin/sh
tftpboot- boot image via network using TFTP protocol
tftpput - TFTP put command, for uploading files to a server
true    - do nothing, successfully
ubi     - ubi commands
version - print monitor, compiler and linker version
(IPQ) # imls
Unknown command 'imls' - try 'help'
(IPQ) # iminfo

## Checking Image at 44000000 ...
   Legacy image found
   Image Name:   Linux-3.4.0
   Image Type:   ARM Linux Kernel Image (uncompressed)
   Data Size:    1732328 Bytes = 1.7 MiB
   Load Address: 41508000
   Entry Point:  41508000
   Verifying Checksum ... OK
(IPQ) # res
resetting ...

Resetting with watch dog!


U-Boot 2012.07 [Enterprise IPQ806X.LN,r37990] (Nov 21 2014 - 10:58:30)

smem ram ptable found: ver: 0 len: 5
DRAM:  491 MiB
NAND:  SF: Unsupported manufacturer 00
ipq_spi: SPI Flash not found (bus/cs/speed/mode) = (0/0/48000000/0)
256 MiB
*** Warning - bad CRC, using default environment

In:    serial
Out:   serial
Err:   serial
cdp: get part failed for 0:HLOS
Net:   MAC1 addr:0:3:7f:ba:db:1
athrs17_reg_init: complete
athrs17_vlan_config ...done
S17 inits done
MAC2 addr:0:3:7f:ba:db:2
eth0, eth1
Hit any key to stop autoboot:  0 
Creating 1 MTD partitions on "nand0":
0x000001340000-0x000005340000 : "mtd=0"
UBI: attaching mtd1 to ubi0
UBI: physical eraseblock size:   131072 bytes (128 KiB)
UBI: logical eraseblock size:    126976 bytes
UBI: smallest flash I/O unit:    2048
UBI: VID header offset:          2048 (aligned 2048)
UBI: data offset:                4096
UBI: fixable bit-flip detected at PEB 366
UBI: fixable bit-flip detected at PEB 470
UBI: fixable bit-flip detected at PEB 482
UBI: attached mtd1 to ubi0
UBI: MTD device name:            "mtd=0"
UBI: MTD device size:            64 MiB
UBI: number of good PEBs:        512
UBI: number of bad PEBs:         0
UBI: max. allowed volumes:       128
UBI: wear-leveling threshold:    4096
UBI: number of internal volumes: 1
UBI: number of user volumes:     3
UBI: available PEBs:             0
UBI: total number of reserved PEBs: 512
UBI: number of PEBs reserved for bad PEB handling: 5
UBI: max/mean erase counter: 54/1
Read 0 bytes from volume kernel to 44000000
No size specified -> Using max size (1777664)
   Image Name:   Linux-3.4.0
   Image Type:   ARM Linux Kernel Image (uncompressed)
   Data Size:    1732328 Bytes = 1.7 MiB
   Load Address: 41508000
   Entry Point:  41508000
   Verifying Checksum ... OK
   Loading Kernel Image ... OK
OK

device nand0 <nand0>, # parts = 1
 #: name                size            offset          mask_flags
 0: fs                  0x04000000      0x01340000      0

active partition: nand0,0 - (fs) 0x04000000 @ 0x01340000

defaults:
mtdids  : none
mtdparts: none
Using machid 0x1260 from environment

Starting kernel ...

[    0.000000] Booting Linux on physical CPU 0
[    0.000000] Linux version 3.4.0 (ttyaw@debian-x58) (gcc version 4.6.3 20120201 (prerelease) (Linaro GCC 4.6-2012.02) ) #1 SMP Fri Oct 17 13:43:37 SGT 2014
[    0.000000] CPU: ARMv7 Processor [512f04d0] revision 0 (ARMv7), cr=10c5387d
[    0.000000] CPU: PIPT / VIPT nonaliasing data cache, PIPT instruction cache
[    0.000000] Machine: Qualcomm Atheros AP148 reference board
[    0.000000] memory pool 3 (start 5fc00000 size 400000) initialized
[    0.000000] Memory policy: ECC disabled, Data cache writealloc
[    0.000000] smem_find(137, 80): wrong size 72
[    0.000000] socinfo_init: v6, id=202, ver=2.0, raw_id=2064, raw_ver=2064, hw_plat=0,  hw_plat_ver=65536
[    0.000000]  accessory_chip=0 hw_plat_subtype=0
[    0.000000] PERCPU: Embedded 8 pages/cpu @c0b24000 s10176 r8192 d14400 u32768
[    0.000000] Built 1 zonelists in Zone order, mobility grouping on.  Total pages: 123690
[    0.000000] Kernel command line: console=ttyHSL1,115200n8 ubi.mtd=rootfs root=mtd:ubi_rootfs
[    0.000000] PID hash table entries: 2048 (order: 1, 8192 bytes)
[    0.000000] Dentry cache hash table entries: 65536 (order: 6, 262144 bytes)
[    0.000000] Inode-cache hash table entries: 32768 (order: 5, 131072 bytes)
[    0.000000] Memory: 487MB = 487MB total
[    0.000000] Memory: 486784k/490880k available, 11904k reserved, 0K highmem
[    0.000000] Virtual kernel memory layout:
[    0.000000]     vector  : 0xffff0000 - 0xffff1000   (   4 kB)
[    0.000000]     fixmap  : 0xfff00000 - 0xfffe0000   ( 896 kB)
[    0.000000]     vmalloc : 0xdf000000 - 0xff000000   ( 512 MB)
[    0.000000]     lowmem  : 0xc0000000 - 0xdeb00000   ( 491 MB)
[    0.000000]     pkmap   : 0xbfe00000 - 0xc0000000   (   2 MB)
[    0.000000]     modules : 0xbf000000 - 0xbfe00000   (  14 MB)
[    0.000000]       .text : 0xc0008000 - 0xc04f8000   (5056 kB)
[    0.000000]       .init : 0xc0500000 - 0xc06027c0   (1034 kB)
[    0.000000]       .data : 0xc0604000 - 0xc067d6e0   ( 486 kB)
[    0.000000]        .bss : 0xc067d704 - 0xc0720998   ( 653 kB)
[    0.000000] SLUB: Genslabs=11, HWalign=64, Order=0-3, MinObjects=0, CPUs=2, Nodes=1
[    0.000000] Hierarchical RCU implementation.
[    0.000000] NR_IRQS:1689
[    0.000000] sched_clock: 32 bits at 32kHz, resolution 31240ns, wraps every 134175798ms
[    0.000000] Console: colour dummy device 80x30
[    0.150484] Calibrating delay using timer specific routine.. 12.55 BogoMIPS (lpj=62786)
[    0.150515] pid_max: default: 32768 minimum: 301
[    0.151015] Mount-cache hash table entries: 512
[    0.152546] CPU: Testing write buffer coherency: ok
[    0.152733] CPU0: thread -1, cpu 0, socket 0, mpidr 80000000
[    0.152764] Setting up static identity map for 0x418601c0 - 0x41860248
[    0.154920] CPU1: Booted secondary processor
[    0.155014] CPU1: thread -1, cpu 1, socket 0, mpidr 80000001
[    0.155107] Brought up 2 CPUs
[    0.155107] SMP: Total of 2 processors activated (25.11 BogoMIPS).
[    0.170946] dummy: 
[    0.171602] NET: Registered protocol family 16
[    0.172321] AXI: msm_bus_fabric_init_driver(): msm_bus_fabric_init_driver
[    0.174414] meminfo_init: smem ram ptable found: ver: 0 len: 5
[    0.174445] Found 1 memory banks grouped into 8 memory regions
[    0.174695] gpiochip_add: registered GPIOs 0 to 151 on device: msmgpio
[    0.175226] QFPROM TSENS calibration data not present
[    0.175413] smem_find(137, 80): wrong size 72
[    0.175413] socinfo_init: v6, id=202, ver=2.0, raw_id=2064, raw_ver=2064, hw_plat=0,  hw_plat_ver=65536
[    0.175413]  accessory_chip=0 hw_plat_subtype=0
[    0.175476] msm_rpm_init: RPM firmware 3.0.16777338
[    0.182786] clk_tbl_nss - loaded
[    0.185098] msm_rpm_get_status(): Status id 393 not defined for target
[    0.185098] msm_rpm_get_status(): Status id 393 not defined for target
[    0.185129] msm_rpm_get_status(): Status id 393 not defined for target
[    0.185129] msm_rpm_get_status(): Status id 393 not defined for target
[    0.185129] msm_rpm_get_status(): Status id 393 not defined for target
[    0.185160] msm_rpm_get_status(): Status id 393 not defined for target
[    0.208903] msm_dmov_memcpy_init: Success
[    0.215276] sps:BAM 0x12244000 enabled: ver:0x5, number of pipes:20
[    0.215307] sps:BAM 0x12244000 is registered.
[    0.215526] sps:sps is ready.
[    0.230771] msm_pcie_setup: link initialized
[    0.231115] PCI host bridge to bus 0000:00
[    0.231115] pci_bus 0000:00: root bus resource [mem 0x08000000-0x0fefffff]
[    0.231646] PCI: bus0: Fast back to back transfers disabled
[    0.232458] PCI: bus1: Fast back to back transfers disabled
[    0.351109] msm_pcie_setup: link initialization failed
[    0.471446] msm_pcie_setup: link initialization failed
[    0.471665] pci 0000:00:00.0: BAR 8: assigned [mem 0x08000000-0x081fffff]
[    0.471665] pci 0000:00:00.0: BAR 9: assigned [mem 0x08200000-0x082fffff pref]
[    0.471696] pci 0000:01:00.0: BAR 0: assigned [mem 0x08000000-0x081fffff 64bit]
[    0.471727] pci 0000:01:00.0: BAR 6: assigned [mem 0x08200000-0x0820ffff pref]
[    0.471727] pci 0000:00:00.0: PCI bridge to [bus 01-01]
[    0.471758] pci 0000:00:00.0:   bridge window [mem 0x08000000-0x081fffff]
[    0.471790] pci 0000:00:00.0:   bridge window [mem 0x08200000-0x082fffff pref]
[    0.471821] PCI: enabling device 0000:00:00.0 (0140 -> 0143)
[    0.491502] bio: create slab <bio-0> at 0
[    0.492877] SCSI subsystem initialized
[    0.494657] spi_qsd spi_qsd.5: master is unqueued, this is deprecated
[    0.496938] spi_qsd spi_qsd.6: master is unqueued, this is deprecated
[    0.499343] spi_qsd spi_qsd.2: master is unqueued, this is deprecated
[    0.503373] Switching to clocksource gp_timer
[    0.523367] NET: Registered protocol family 2
[    0.523742] IP route cache hash table entries: 4096 (order: 2, 16384 bytes)
[    0.524242] TCP established hash table entries: 16384 (order: 5, 131072 bytes)
[    0.524429] TCP bind hash table entries: 16384 (order: 5, 131072 bytes)
[    0.524617] TCP: Hash tables configured (established 16384 bind 16384)
[    0.524648] TCP: reno registered
[    0.524648] UDP hash table entries: 256 (order: 1, 8192 bytes)
[    0.524679] UDP-Lite hash table entries: 256 (order: 1, 8192 bytes)
[    0.525117] NET: Registered protocol family 1
[    0.526772] smd: register irq failed on wcnss_a11
[    0.526772] smd: deregistering IRQs
[    0.526835] SMD: smd_core_platform_init() failed
[    0.527522] Partition(from smem) SBL1 -- Offset:0 Size:2
[    0.527522] Partition(from smem) MIBIB -- Offset:2 Size:a
[    0.527522] Partition(from smem) SBL2 -- Offset:c Size:a
[    0.527553] Partition(from smem) SBL3 -- Offset:16 Size:14
[    0.527553] Partition(from smem) DDRCONFIG -- Offset:2a Size:9
[    0.527585] Partition(from smem) SSD -- Offset:33 Size:9
[    0.527585] Partition(from smem) TZ -- Offset:3c Size:14
[    0.527616] Partition(from smem) RPM -- Offset:50 Size:14
[    0.527616] Partition(from smem) APPSBL -- Offset:64 Size:28
[    0.527647] Partition(from smem) APPSBLENV -- Offset:8c Size:4
[    0.527678] Partition(from smem) ART -- Offset:90 Size:a
[    0.527678] Partition(from smem) rootfs -- Offset:9a Size:200
[    0.540299] acpuclk-ipq806x acpuclk-ipq806x: SPEED BIN: 0
[    0.540299] acpuclk-ipq806x acpuclk-ipq806x: ACPU PVS: 2
[    0.546891] acpuclk-ipq806x acpuclk-ipq806x: CPU0: 6 frequencies supported
[    0.546891] acpuclk-ipq806x acpuclk-ipq806x: CPU1: 6 frequencies supported
[    0.548391] msm_rpm_log_probe: OK
[    0.565010] squashfs: version 4.0 (2009/01/31) Phillip Lougher
[    0.565042] jffs2: version 2.2. (NAND) (SUMMARY) (LZMA) (RTIME) (CMODE_PRIORITY) �ꁩ 2001-2006 Red Hat, Inc.
[    0.566291] msgmni has been set to 950
[    0.567666] io scheduler noop registered
[    0.567666] io scheduler deadline registered (default)
[    0.569353] Serial: 8250/16550 driver, 2 ports, IRQ sharing disabled
[    0.571821] msm_serial_hs module loaded
[    0.572071] msm_serial_hsl: detected port #1
[    0.572289] msm_serial_hsl.1: ttyHSL1 at MMIO 0x16340000 (irq = 184) is a MSM
[    0.572758] msm_serial_hsl: console setup on port #1
[    1.287222] console [ttyHSL1] enabled
[    1.291315] msm_serial_hsl: driver initialized
[    1.299812] ahci ahci.0: forcing PORTS_IMPL to 0x1
[    1.303655] ahci ahci.0: AHCI 0001.0300 32 slots 1 ports 6 Gbps 0x1 impl platform mode
[    1.311465] ahci ahci.0: flags: ncq sntf pm led clo only pmp pio slum part ccc apst 
[    1.320556] scsi0 : ahci_platform
[    1.323555] ata1: SATA max UDMA/133 mmio [mem 0x29000000-0x2900017f] port 0x100 irq 241
[    1.333145] msm_nand_probe: phys addr 0x1ac00000 
[    1.336863] msm_nand_probe: dmac 0x3
[    1.340393] msm_nand_probe: allocated dma buffer at ffdfc000, dma_addr 5f670000
[    1.348922] status: 20
[    1.350234] nandid: 1590aa2c maker 2c device aa
[    1.354920] ONFI probe : Found an ONFI compliant device MT29F2G08ABBEAH4    ,
[    1.362011] Found a supported NAND device
[    1.366073] NAND Controller ID : 0x4030
[    1.369696] NAND Device ID  : 0x1590aa2c
[    1.373633] Buswidth : 8 Bits
[    1.376538] Density  : 256 MByte
[    1.379756] Pagesize : 2048 Bytes
[    1.383036] Erasesize: 131072 Bytes
[    1.386566] Oobsize  : 64 Bytes
[    1.389659] CFG0 Init  : 0xa8d408c0
[    1.393127] CFG1 Init  : 0x0004745c
[    1.396626] ECCBUFCFG  : 0x00000203
[    1.400781] Creating 12 MTD partitions on "msm_nand":
[    1.405217] 0x000000000000-0x000000040000 : "SBL1"
[    1.412808] 0x000000040000-0x000000180000 : "MIBIB"
[    1.420649] 0x000000180000-0x0000002c0000 : "SBL2"
[    1.428522] 0x0000002c0000-0x000000540000 : "SBL3"
[    1.437863] 0x000000540000-0x000000660000 : "DDRCONFIG"
[    1.446110] 0x000000660000-0x000000780000 : "SSD"
[    1.453639] 0x000000780000-0x000000a00000 : "TZ"
[    1.462574] 0x000000a00000-0x000000c80000 : "RPM"
[    1.471696] 0x000000c80000-0x000001180000 : "APPSBL"
[    1.484473] 0x000001180000-0x000001200000 : "APPSBLENV"
[    1.491377] 0x000001200000-0x000001340000 : "ART"
[    1.498812] 0x000001340000-0x000005340000 : "rootfs"
[    1.588972] mtd: partition "rootfs" set to be root filesystem
[    1.594095] split_squashfs: no squashfs found in "msm_nand"
[    1.599812] m25p80 spi5.0: found pm25lv512, expected s25fl512s
[    1.605092] m25p80 spi5.0: pm25lv512 (64 Kbytes)
[    1.613120] UBI: attaching mtd11 to ubi0
[    1.616057] UBI: physical eraseblock size:   131072 bytes (128 KiB)
[    1.622243] UBI: logical eraseblock size:    126976 bytes
[    1.627678] UBI: smallest flash I/O unit:    2048
[    1.632333] UBI: VID header offset:          2048 (aligned 2048)
[    1.638331] UBI: data offset:                4096
[    1.663448] ata1: SATA link down (SStatus 0 SControl 300)
[    2.113651] UBI: max. sequence number:       162
[    2.130490] UBI: attached mtd11 to ubi0
[    2.133270] UBI: MTD device name:            "rootfs"
[    2.138394] UBI: MTD device size:            64 MiB
[    2.143174] UBI: number of good PEBs:        512
[    2.147828] UBI: number of bad PEBs:         0
[    2.152202] UBI: number of corrupted PEBs:   0
[    2.156669] UBI: max. allowed volumes:       128
[    2.161230] UBI: wear-leveling threshold:    4096
[    2.165948] UBI: number of internal volumes: 1
[    2.170353] UBI: number of user volumes:     3
[    2.174820] UBI: available PEBs:             0
[    2.179194] UBI: total number of reserved PEBs: 512
[    2.184098] UBI: number of PEBs reserved for bad PEB handling: 5
[    2.190065] UBI: max/mean erase counter: 54/1
[    2.194439] UBI: image sequence number:  1799056177
[    2.199343] UBI: background thread "ubi_bgt0d" started, PID 607
[    2.205342] UBI error: ubi_init: cannot attach mtd11
[    2.249640] GPIO Bitbanged MDIO: probed
[    2.254889] tsens_tm_probe : TSENS early init not done.
[    2.259137] tsens8960-tm: probe of tsens8960-tm failed with error -14
[    2.267166] cpuidle: using governor ladder
[    2.270228] cpuidle: using governor menu
[    2.275788] TCP: cubic registered
[    2.278069] NET: Registered protocol family 17
[    2.282661] Bridge firewalling registered
[    2.286660] 8021q: 802.1Q VLAN Support v1.8
[    2.290815] VFP support v0.3: implementor 51 architecture 64 part 4d variant 2 rev 0
[    2.298437] Registering SWP/SWPB emulation handler
[    2.303155] clock_late_init: Removing enables held for handed-off clocks
[    2.318119] MSM Watchdog Initialized
[    2.321337] ipq_nss_get_mac_addr: MAC[0]: ff:ff:ff:ff:ff:ff
[    2.326554] ipq_nss_get_mac_addr: MAC[1]: ff:ff:ff:ff:ff:ff
[    2.332083] ipq_nss_get_mac_addr: MAC[2]: ff:ff:ff:ff:ff:ff
[    2.337644] ipq_nss_get_mac_addr: MAC[3]: ff:ff:ff:ff:ff:ff
[    2.343111] no pmic restart interrupt specified
[    2.348859] msm_cache_dump_probe: could not register L2 buffer ret = -22.
[    2.358919] VFS: Mounted root (squashfs filesystem) readonly on device 31:14.
[    2.365604] Freeing init memory: 1032K
- preinit -
Press the [f] key and hit [enter] to enter failsafe mode
- regular preinit -
[    6.856044] UBIFS: recovery needed
[    6.955388] UBIFS: recovery completed
[    6.958013] UBIFS: mounted UBI device 0, volume 2, name "ubi_rootfs_data"
[    6.964823] UBIFS: file system size:   45076480 bytes (44020 KiB, 42 MiB, 355 LEBs)
[    6.972414] UBIFS: journal size:       2285568 bytes (2232 KiB, 2 MiB, 18 LEBs)
[    6.979725] UBIFS: media format:       w4/r0 (latest is w4/r0)
[    6.985535] UBIFS: default compressor: lzo
[    6.989597] UBIFS: reserved for root:  2129073 bytes (2079 KiB)
switching to jffs2
- init -

Please press Enter to activate this console. [    7.835363] ocf: module license 'BSD' taints kernel.
[    7.839300] Disabling lock debugging due to kernel taint
[    7.974976] ssdk_plat_init start
[    7.977194] Register QCA PHY driver
[    8.820149] qca-ssdk module init succeeded!
[    8.907622] NET: Registered protocol family 10
[    8.980724] UBI: scrubbed PEB 28 (LEB 1:12), data moved to PEB 351
[    9.064979] usbcore: registered new interface driver usbfs
[    9.069572] usbcore: registered new interface driver hub
[    9.074851] usbcore: registered new device driver usb
[    9.185598] md: linear personality registered for level -1
[    9.218025] md: raid0 personality registered for level 0
[    9.230053] md: raid1 personality registered for level 1
[    9.264854] Button Hotplug driver version 0.4.1
[    9.392970] NTFS driver 2.1.30 [Flags: R/O MODULE].
[    9.538737] PPP generic driver version 2.4.2
[    9.754514] PPP MPPE Compression module registered
[    9.835551] nss_driver - fw of size 299520  bytes copied to load addr: 40000000
[    9.858762] nss_driver - Turbo Support 1
[    9.862386] bf26a970: NSS Shaping is enabled, handler id: 0
[    9.885941] nss_driver - fw of size 209408  bytes copied to load addr: 40800000
[    9.908997] Error - Duplicate Interface CB Registered for interface 51
[   10.001593] L2TP core driver, V2.0
[   10.011371] L2TP netlink interface
[   10.040081] nss_gmac: **********************************************************
[   10.046454] nss_gmac: * Driver    :NSS GMAC Driver for RTL v(3.72a)
[   10.052702] nss_gmac: * Version   :1.0
[   10.056451] nss_gmac: * Copyright :Copyright (c) 2013 The Linux Foundation. All rights reserved.
[   10.065198] nss_gmac: **********************************************************
[   10.073039] nss_gmac: GMAC1(dd325cc0) Invalid MAC@ - using 26:27:28:29:2a:2b
[   10.085473] nss_gmac: GMAC2(dd3274c0) Invalid MAC@ - using 5a:5b:5c:5d:5e:5f
[   11.142767] <NSS-CRYPTO>:module loaded (platform - IPQ806x, build - Oct 17 2014:13:28:50)
[   11.149953] <NSS-CRYPTO>:Register with NSS 
[   11.154108] <NSS-CRYPTO>: done!
[   11.158950] <NSS-CRYPTO>:probing engine - 0
[   11.162168] <NSS-CRYPTO>:init completed for Pipe Pair[0]
[   11.167447] <NSS-CRYPTO>:init completed for Pipe Pair[1]
[   11.172727] <NSS-CRYPTO>:init completed for Pipe Pair[2]
[   11.178038] <NSS-CRYPTO>:init completed for Pipe Pair[3]
[   11.183880] <NSS-CRYPTO>:probing engine - 1
[   11.184036] <NSS-CRYPTO>:engine(0) opened successfully
[   11.192627] <NSS-CRYPTO>:init completed for Pipe Pair[0]
[   11.197906] <NSS-CRYPTO>:init completed for Pipe Pair[1]
[   11.203186] <NSS-CRYPTO>:init completed for Pipe Pair[2]
[   11.208497] <NSS-CRYPTO>:init completed for Pipe Pair[3]
[   11.214370] <NSS-CRYPTO>:probing engine - 2
[   11.214557] <NSS-CRYPTO>:engine(1) opened successfully
[   11.223086] <NSS-CRYPTO>:init completed for Pipe Pair[0]
[   11.228397] <NSS-CRYPTO>:init completed for Pipe Pair[1]
[   11.233676] <NSS-CRYPTO>:init completed for Pipe Pair[2]
[   11.238956] <NSS-CRYPTO>:init completed for Pipe Pair[3]
[   11.244829] <NSS-CRYPTO>:engine(2) opened successfully
[   11.244829] <NSS-CRYPTO>:probing engine - 3
[   11.244892] <NSS-CRYPTO>:init completed for Pipe Pair[0]
[   11.244923] <NSS-CRYPTO>:init completed for Pipe Pair[1]
[   11.244954] <NSS-CRYPTO>:init completed for Pipe Pair[2]
[   11.244985] <NSS-CRYPTO>:init completed for Pipe Pair[3]
[   11.274695] <NSS-CRYPTO>:engine(3) opened successfully
[   11.284536] nss_macsec init success
[   11.355295] ****Address of trace_timer :bf2d536c 
[   11.462667] ath_hal: 0.9.17.1 (AR5416, AR9380, WRITE_EEPROM, TX_DATA_SWAP, RX_DATA_SWAP, 11D)
[   11.478537] ath_rate_atheros: Copyright (c) 2001-2005 Atheros Communications, Inc, All Rights Reserved
[   11.494689] ath_dfs: Version 2.0.0
[   11.494689] Copyright (c) 2005-2006 Atheros Communications, Inc. All Rights Reserved
[   11.535457] ath_spectral: Version 2.0.0
[   11.535488] Copyright (c) 2005-2009 Atheros Communications, Inc. All Rights Reserved
[   11.546016] SPECTRAL module built on Oct 17 2014 12:12:21
[   11.581349] ath_tx99: Version 2.0
[   11.581349] Copyright (c) 2010 Atheros Communications, Inc, All Rights Reserved
[   11.671134] ath_dev: Copyright (c) 2001-2007 Atheros Communications, Inc, All Rights Reserved
[   12.205873] ath_pci: 10.2.2.60.9 (Atheros/multi-bss)
[   12.209809] ath_pci_probe
[   12.212402] PCI device id is 003c :003c
[   12.216244] PCI: enabling device 0000:01:00.0 (0140 -> 0142)
[   12.222086] ath_pci 0000:01:00.0: ath DEBUG: sc=0xddaae600
[   12.227335] 
[   12.227335]  ol_ath_pci_configure : num_desired MSI set to 0

[   12.234489] 
[   12.234489]  Using PCI Legacy Interrupt
[   13.233801] CE_per_engine_handler_adjust, base=ddaae600 offset=57400 
[   13.239206] CE_per_engine_handler_adjust, base=ddaae600 offset=57800 
[   13.257013] __ol_ath_attach: ath_attach TODO
[   13.260231] __ol_ath_attach 1272 host_enable 1
[   13.264698] __ol_ath_attach: dev name wifi0
[   13.268853] ol_ath_set_default_tgt_config : AC Minfree buffer allocation through module param (umac.ko)
[   13.278225]  OL_ACBKMinfree : 0
[   13.281349]  OL_ACBEMinfree : 0
[   13.284473]  OL_ACVIMinfree : 0
[   13.287597]  OL_ACVOMinfree : 0
[   13.290721] ol_ath_attach() BMI inited.
[   13.294657] ol_ath_attach() BMI Get Target Info.
[   13.299156] ol_ath_attach() TARGET TYPE: 7 Vers 0x4100016c
[   13.304779] NUM_DEV=1 FWMODE=0x2 FWSUBMODE=0x0 FWBR_BUF 0
[   13.310184] ol_ath_attach() configure Target .
[   13.314589] ol_transfer_bin_file 1787: Download Board data len 2116
[   13.324960] ol_ath_download_firmware: Using 0x1234 for the remainder of init
[   13.330990] ol_transfer_bin_file 1779: Download OTP data len 7208
[   13.423336] ol_transfer_bin_file 1825: Download Firmware data len 227732
[   14.406966] ol_ath_attach() Download FW. 
[   14.409965] ol_ath_attach() HT Create .
[   14.413776] ol_ath_attach() HIF Claim.
[   14.417557] ol_ath_attach() BMI Done. 
[   14.421274] ol_ath_attach() WMI attached. wmi_handle d94b0000 
[   14.427085] +HWT
[   14.428865] SOC_RESET_CONTROL_ADDRESS : 800
[   14.433020] CPU_INTR_ADDRESS = [0]
[   14.436426] SOC_GLOBAL_RESET_ADDRESS = [0]
[   14.440487] Rx_Filter : [0]
[   14.443298] CE_per_engine_handler_adjust, base=ddaae600 offset=57400 
[   14.449796] CE_per_engine_handler_adjust, base=ddaae600 offset=57800 
[   14.456169] CE_per_engine_handler_adjust, base=ddaae600 offset=57c00 
[   14.462542] CE_per_engine_handler_adjust, base=ddaae600 offset=58000 
[   14.469009] CE_per_engine_handler_adjust, base=ddaae600 offset=58400 
[   14.475507] CE_per_engine_handler_adjust, base=ddaae600 offset=58800 
[   14.484192] CE_recv_buf_enqueue 653 Populate last entry 512 for CE 5
[   14.489534] CE_recv_buf_enqueue 662 CE 5 wi 511 dest_ptr 0x598f7040 nbytes 0 recv_ctxt 0xdd978300
[   14.498469] -HWT
[   14.500312] HTC Service:0x0300 ep:1 TX flow control disabled
[   14.507185] CE_pkt_dl_len_set CE 4 Pkt download length 64
[   14.511558] ol_txrx_pdev_attach: 1424 tx desc's allocated ; range starts from d7fe0000
[   14.519775] HTC Service:0x0100 ep:2 TX flow control disabled
[   14.525804] wmi_service_ready_event_rx:  WMI UNIFIED SERVICE READY event 
[   14.531865] num_rf_chain : 00000003
[   14.535332] ht_cap_info: : 0000085b
[   14.538800] vht_cap_info : 338001b2
[   14.542268] vht_supp_mcs : 0000ffea
[   14.545735] LARGE_AP enabled. num_peers 144, num_vdevs 16, num_tids 256
[   14.552327] idx 0 req 1  num_units 0 num_unit_info 2 unit size 444 actual units 145 
[   14.560106] chunk 0 len 64380 requested ,ptr  0x594f0000 
[   14.575320] FIRMWARE:P 145 V 16 T 443
[   14.575351]  
[   14.579537] FIRMWARE:_wlan_rtt_enable 
[   14.586254] wmi_ready_event_rx:  WMI UNIFIED READY event 
[   14.590690] ol_ath_connect_htc() WMI is ready
[   14.595001] ol_ath_set_host_app_area TODO
[   14.599000] target uses HTT version 2.1; host uses 2.1
[   14.608122] ol_ath_attach() connect HTC. 
[   14.611121] bypasswmi : 0
[   14.613745] ol_regdmn_start: reg-domain param: regdmn=0, countryName=, wModeSelect=FFFFFFFF, netBand=FFFFFFFF, extendedChanMode=0.
[   14.625492] ol_regdmn_init_channels: !avail mode 0x1ff80d (0x2) flags 0x2150
[   14.632489] ol_regdmn_init_channels: !avail mode 0x1ff80d (0x20) flags 0xd0
[   14.639425] ol_regdmn_init_channels: !avail mode 0x1ff80d (0x40) flags 0x150
[   14.646516] Add VHT80 channel: 5210
[   14.649921] Add VHT80 channel: 5290
[   14.653389] Add VHT80 channel: 5530
[   14.656857] Add VHT80 channel: 5610
[   14.660387] Add VHT80 channel: 5690
[   14.663823] Add VHT80 channel: 5775
[   14.667260] Skipping VHT80 channel 5825
[   14.671477] ol_ath_phyerr_attach: called
[   14.675101] OL Resmgr Init-ed
[   14.678038] ol_if_spectral_setup
[   14.681162] SPECTRAL : get_capability not registered
[   14.686160] HAL_CAP_PHYDIAG : Capable
[   14.689753] SPECTRAL : Need to fix the capablity check for RADAR (spectral_attach : 231)
[   14.697844] SPECTRAL : get_capability not registered
[   14.702780] HAL_CAP_RADAR   : Capable
[   14.706435] SPECTRAL : Need to fix the capablity check for SPECTRAL
[   14.706435]  (spectral_attach : 236)
[   14.716244] SPECTRAL : get_capability not registered
[   14.721180] HAL_CAP_SPECTRAL_SCAN : Capable
[   14.725398] SPECTRAL : get_tsf64 not registered
[   14.729896] spectral_init_netlink 52 NULL SKB
[   14.734239] Green-AP : Green-AP : Attached
[   14.734239] 
[   14.739768] Green-AP : Attached
[   14.742924] ol_ath_smart_ant_attach: Hardware doest not support Smart Antenna.
[   14.750109] ol_if_dfs_setup: called 
[   14.753701] ol_if_dfs_attach: called; ptr=d8081984, radar_info=d947fbd0
[   14.760543] ol_ath_rtt_meas_report_attach: called
[   14.765698] ol_ath_attach() UMAC attach . 
[   14.769040] ol_if_dfs_configure: called
[   14.772852] ol_if_dfs_configure: FCC domain
[   14.777007] ol_if_dfs_disable: called
[   14.780693] ol_ath_attach: Calling ol_if_dfs_configure
[   14.785816] __ol_ath_attach: init tx/rx TODO
[   14.790034] __ol_ath_attach: hard_header_len reservation 58
[   14.805060] Initializing Pktlogs for 11ac
[   14.836113] __sa_init_module 
[   14.896751] <NSS-CFI>:registering ALGO 1 with OCF
[   14.900437] <NSS-CFI>:registering ALGO 2 with OCF
[   14.905123] <NSS-CFI>:registering ALGO 7 with OCF
[   14.909809] <NSS-CFI>:registering ALGO 11 with OCF
[   14.944736] gre: GRE over IPv4 demultiplexor driver
[   14.956138] ip_gre: GRE over IPv4 tunneling driver
[   14.991283] bonding: Ethernet Channel Bonding Driver: v3.7.1 (April 27, 2011)
[   15.110309] ip_tables: (C) 2000-2006 Netfilter Core Team
[   15.202218] NET: Registered protocol family 24
[   15.213933] QCA Hy-Fi multicast installation successfully
[   15.218306] QCA Hy-Fi netfilter installation: OK
[   15.366416] ehci_hcd: USB 2.0 'Enhanced' Host Controller (EHCI) Driver
[   15.372008] msm_hsusb_host msm_hsusb_host: unable to find transceiver
[   15.422524] [wifi0] FWLOG: [14694] WAL_DBGID_TX_AC_BUFFER_SET ( 0x3, 0x1e, 0x460, 0x460, 0x0 )
[   15.430115] [wifi0] FWLOG: [14694] WAL_DBGID_TX_AC_BUFFER_SET ( 0x12, 0x1e, 0x460, 0x460, 0x0 )
[   15.438769] [wifi0] FWLOG: [14694] WAL_DBGID_TX_AC_BUFFER_SET ( 0x45, 0x1e, 0x460, 0x460, 0x0 )
[   15.447453] [wifi0] FWLOG: [14694] WAL_DBGID_TX_AC_BUFFER_SET ( 0x67, 0x1e, 0x460, 0x460, 0x0 )
[   15.456138] [wifi0] FWLOG: [14700] WHAL_ERROR_RECV_STOPPCU ( 0x110298a, 0x3 )
[   15.463261] [wifi0] FWLOG: [14700] WHAL_ERROR_RESET_PM (  )
[   15.475257] nf_conntrack version 0.5.0 (7622 buckets, 30488 max)
[   15.633520] PPPoL2TP kernel driver, V2.0
[   15.643986] PPTP driver version 0.8.5
[   15.898594] xt_time: kernel timezone is -0000
[   16.197000] nf_conntrack_rtsp v0.6.21 loading
[   16.207747] nf_nat_rtsp v0.6.21 loading
[   16.253639] ip6_tables: (C) 2000-2006 Netfilter Core Team
[   16.409215] ipq-dwc3 ipq-dwc3.0: unable to read platform data num of dbm eps
[   16.515651] xhci-hcd xhci-hcd.0: xHCI Host Controller
[   16.519712] xhci-hcd xhci-hcd.0: new USB bus registered, assigned bus number 1
[   16.526991] xhci-hcd xhci-hcd.0: irq 142, io mem 0x11000000
[   16.532802] hub 1-0:1.0: USB hub found
[   16.536176] hub 1-0:1.0: 1 port detected
[   16.540206] xhci-hcd xhci-hcd.0: xHCI Host Controller
[   16.545110] xhci-hcd xhci-hcd.0: new USB bus registered, assigned bus number 2
[   16.552608] hub 2-0:1.0: USB hub found
[   16.556044] hub 2-0:1.0: 1 port detected
[   16.561668] ipq-dwc3 ipq-dwc3.1: unable to read platform data num of dbm eps
[   16.668134] xhci-hcd xhci-hcd.1: xHCI Host Controller
[   16.672164] xhci-hcd xhci-hcd.1: new USB bus registered, assigned bus number 3
[   16.679475] xhci-hcd xhci-hcd.1: irq 237, io mem 0x10000000
[   16.685317] hub 3-0:1.0: USB hub found
[   16.688628] hub 3-0:1.0: 1 port detected
[   16.692689] xhci-hcd xhci-hcd.1: xHCI Host Controller
[   16.697656] xhci-hcd xhci-hcd.1: new USB bus registered, assigned bus number 4
[   16.705092] hub 4-0:1.0: USB hub found
[   16.708528] hub 4-0:1.0: 1 port detected
[   16.782068] input: gpio-keys as /devices/platform/gpio-keys/input/input0
[   16.959044] Initializing USB Mass Storage driver...
[   16.962980] usbcore: registered new interface driver usb-storage
[   16.968915] USB Mass Storage support registered.
[   17.005029] fuse init (API version 7.18)
[   19.301405] ADDRCONF(NETDEV_UP): eth1: link is not ready
[   19.306185] device eth1 entered promiscuous mode
[   19.310777] ADDRCONF(NETDEV_UP): br-lan: link is not ready
[   19.318056] ADDRCONF(NETDEV_UP): eth0: link is not ready
[   21.303467] br-lan: port 1(eth1) entered forwarding state
[   21.307872] br-lan: port 1(eth1) entered forwarding state
[   21.313433] ADDRCONF(NETDEV_CHANGE): eth1: link becomes ready
[   21.324273] ADDRCONF(NETDEV_CHANGE): br-lan: link becomes ready
[   23.303280] br-lan: port 1(eth1) entered forwarding state
[   25.892689] __sa_exit_module 
[   25.899656] Suspending Target - with disable_intr set :wifi0 (sc ddaae600)
[   25.905716] waiting for target paused event from target :wifi0 (sc ddaae600)
[   25.963355] __ol_ath_detach: init tx/rx cleanup TODO
[   25.967322] ol_if_dfs_teardown: called 
[   25.971227] ol_ath_phyerr_detach: called
[   25.975976] CE_fini 2204 Cleaning up HTT Tx CE
[   25.979443] CE_fini Cleaning up HTT MSG CE(5)
[   25.986410] ol_if_spectral_detach
[   25.988691] SPECTRAL : Module removed (spectral = d8414000)
[   25.994283] Green-AP : Green-AP : Detached
[   25.994283] 
[   25.999781] Green-AP : Detached
[   26.002936] ath_pci_warm_reset :(sc ddaae600)
[   26.007278] Target Warm Reset
[   26.010215] Host Intr Cause reg 0x900c : value : 0x4000 
[   26.015526] Target CPU Intr Cause 0x5040 
[   26.119462] addr 0x4050 :  0x4 
[   26.141549] Target CPU Intr Cause after CE reset 0x40 
[   26.145673] RESET_CONTROL after cpu warm reset 0x804 
[   26.250640] Target Warm reset complete
[   26.253545] ath_pci_remove 
[   26.256263] ath_pci: driver unloaded
[   26.262699] Removing athdebug proc file
[   26.265573] ath_dev: driver unloaded
[   26.272071] ath_tx99: driver unloaded
[   26.277288] ath_spectral: driver unloaded
[   26.282692] ath_dfs: driver unloaded
[   26.287941] ath_rate_atheros: driver unloaded
[   26.293845] ath_hal: driver unloaded
[   26.412496] ****Address of trace_timer :bf88c36c 
[   26.428616] ath_hal: 0.9.17.1 (AR5416, AR9380, WRITE_EEPROM, TX_DATA_SWAP, RX_DATA_SWAP, 11D)
[   26.446672] ath_rate_atheros: Copyright (c) 2001-2005 Atheros Communications, Inc, All Rights Reserved
[   26.464104] ath_dfs: Version 2.0.0
[   26.464104] Copyright (c) 2005-2006 Atheros Communications, Inc. All Rights Reserved
[   26.483442] ath_spectral: Version 2.0.0
[   26.483442] Copyright (c) 2005-2009 Atheros Communications, Inc. All Rights Reserved
[   26.494033] SPECTRAL module built on Oct 17 2014 12:12:21
[   26.507778] ath_tx99: Version 2.0
[   26.507778] Copyright (c) 2010 Atheros Communications, Inc, All Rights Reserved
[   26.532583] ath_dev: Copyright (c) 2001-2007 Atheros Communications, Inc, All Rights Reserved
[   26.565292] ath_pci: 10.2.2.60.9 (Atheros/multi-bss)
[   26.569259] ath_pci_probe
[   26.571852] PCI device id is 003c :003c
[   26.576007] ath_pci 0000:01:00.0: ath DEBUG: sc=0xd7b2a000
[   26.581130] 
[   26.581130]  ol_ath_pci_configure : num_desired MSI set to 0
[   26.588316] 
[   26.588316]  Using PCI Legacy Interrupt
[   27.593845] CE_per_engine_handler_adjust, base=d7b2a000 offset=57400 
[   27.599281] CE_per_engine_handler_adjust, base=d7b2a000 offset=57800 
[   27.617150] __ol_ath_attach: ath_attach TODO
[   27.620399] __ol_ath_attach 1272 host_enable 1
[   27.624867] __ol_ath_attach: dev name wifi0
[   27.628990] ol_ath_set_default_tgt_config : AC Minfree buffer allocation through module param (umac.ko)
[   27.638394]  OL_ACBKMinfree : 0
[   27.641487]  OL_ACBEMinfree : 0
[   27.644642]  OL_ACVIMinfree : 0
[   27.647735]  OL_ACVOMinfree : 0
[   27.650921] ol_ath_attach() BMI inited.
[   27.654857] ol_ath_attach() BMI Get Target Info.
[   27.659293] ol_ath_attach() TARGET TYPE: 7 Vers 0x4100016c
[   27.664917] NUM_DEV=1 FWMODE=0x2 FWSUBMODE=0x0 FWBR_BUF 0
[   27.670384] ol_ath_attach() configure Target .
[   27.674695] ol_transfer_bin_file 1787: Download Board data len 2116
[   27.685317] ol_ath_download_firmware: Using 0x1234 for the remainder of init
[   27.691346] ol_transfer_bin_file 1779: Download OTP data len 7208
[   27.842174] ol_transfer_bin_file 1825: Download Firmware data len 227732
[   28.835270] ol_ath_attach() Download FW. 
[   28.838269] ol_ath_attach() HT Create .
[   28.842080] ol_ath_attach() HIF Claim.
[   28.846141] ol_ath_attach() BMI Done. 
[   28.849578] ol_ath_attach() WMI attached. wmi_handle d8370000 
[   28.855388] +HWT
[   28.857169] SOC_RESET_CONTROL_ADDRESS : 800
[   28.861324] CPU_INTR_ADDRESS = [0]
[   28.864792] SOC_GLOBAL_RESET_ADDRESS = [0]
[   28.868853] Rx_Filter : [80200]
[   28.871946] CE_per_engine_handler_adjust, base=d7b2a000 offset=57400 
[   28.878381] CE_per_engine_handler_adjust, base=d7b2a000 offset=57800 
[   28.884817] CE_per_engine_handler_adjust, base=d7b2a000 offset=57c00 
[   28.891221] CE_per_engine_handler_adjust, base=d7b2a000 offset=58000 
[   28.897750] CE_per_engine_handler_adjust, base=d7b2a000 offset=58400 
[   28.904154] CE_per_engine_handler_adjust, base=d7b2a000 offset=58800 
[   28.912933] CE_recv_buf_enqueue 653 Populate last entry 512 for CE 5
[   28.918275] CE_recv_buf_enqueue 662 CE 5 wi 511 dest_ptr 0x59cf9040 nbytes 0 recv_ctxt 0xd8073780
[   28.927179] -HWT
[   28.929022] HTC Service:0x0300 ep:1 TX flow control disabled
[   28.935926] CE_pkt_dl_len_set CE 4 Pkt download length 64
[   28.940331] ol_txrx_pdev_attach: 1424 tx desc's allocated ; range starts from d70e0000
[   28.948516] HTC Service:0x0100 ep:2 TX flow control disabled
[   28.954576] wmi_service_ready_event_rx:  WMI UNIFIED SERVICE READY event 
[   28.960606] num_rf_chain : 00000003
[   28.964073] ht_cap_info: : 0000085b
[   28.967541] vht_cap_info : 338001b2
[   28.971009] vht_supp_mcs : 0000ffea
[   28.974476] LARGE_AP enabled. num_peers 144, num_vdevs 16, num_tids 256
[   28.981099] idx 0 req 1  num_units 0 num_unit_info 2 unit size 444 actual units 145 
[   28.988878] chunk 0 len 64380 requested ,ptr  0x585f0000 
[   29.004061] FIRMWARE:P 145 V 16 T 443
[   29.004061]  
[   29.008278] FIRMWARE:_wlan_rtt_enable 
[   29.014995] wmi_ready_event_rx:  WMI UNIFIED READY event 
[   29.019400] ol_ath_connect_htc() WMI is ready
[   29.023742] ol_ath_set_host_app_area TODO
[   29.027741] target uses HTT version 2.1; host uses 2.1
[   29.036863] ol_ath_attach() connect HTC. 
[   29.039831] bypasswmi : 0
[   29.042424] ol_regdmn_start: reg-domain param: regdmn=0, countryName=, wModeSelect=FFFFFFFF, netBand=FFFFFFFF, extendedChanMode=0.
[   29.054201] ol_regdmn_init_channels: !avail mode 0x1ff80d (0x2) flags 0x2150
[   29.061262] ol_regdmn_init_channels: !avail mode 0x1ff80d (0x20) flags 0xd0
[   29.068134] ol_regdmn_init_channels: !avail mode 0x1ff80d (0x40) flags 0x150
[   29.075257] Add VHT80 channel: 5210
[   29.078662] Add VHT80 channel: 5290
[   29.082130] Add VHT80 channel: 5530
[   29.085598] Add VHT80 channel: 5610
[   29.089065] Add VHT80 channel: 5690
[   29.092502] Add VHT80 channel: 5775
[   29.096001] Skipping VHT80 channel 5825
[   29.100218] ol_ath_phyerr_attach: called
[   29.103873] OL Resmgr Init-ed
[   29.106747] ol_if_spectral_setup
[   29.109871] SPECTRAL : get_capability not registered
[   29.114870] HAL_CAP_PHYDIAG : Capable
[   29.118462] SPECTRAL : Need to fix the capablity check for RADAR (spectral_attach : 231)
[   29.126554] SPECTRAL : get_capability not registered
[   29.131490] HAL_CAP_RADAR   : Capable
[   29.135145] SPECTRAL : Need to fix the capablity check for SPECTRAL
[   29.135145]  (spectral_attach : 236)
[   29.144954] SPECTRAL : get_capability not registered
[   29.149890] HAL_CAP_SPECTRAL_SCAN : Capable
[   29.154076] SPECTRAL : get_tsf64 not registered
[   29.158606] spectral_init_netlink 52 NULL SKB
[   29.162917] Green-AP : Green-AP : Attached
[   29.162917] 
[   29.168509] Green-AP : Attached
[   29.171696] ol_ath_smart_ant_attach: Hardware doest not support Smart Antenna.
[   29.178819] ol_if_dfs_setup: called 
[   29.182599] ol_if_dfs_attach: called; ptr=d7c79984, radar_info=d9633bd0
[   29.189253] ol_ath_rtt_meas_report_attach: called
[   29.194314] ol_ath_attach() UMAC attach . 
[   29.197719] ol_if_dfs_configure: called
[   29.201530] ol_if_dfs_configure: FCC domain
[   29.205716] ol_if_dfs_disable: called
[   29.209372] ol_ath_attach: Calling ol_if_dfs_configure
[   29.214526] __ol_ath_attach: init tx/rx TODO
[   29.218712] __ol_ath_attach: hard_header_len reservation 58
[   29.233926] Initializing Pktlogs for 11ac
[   29.245235] __sa_init_module 
[   29.263448] ath_ioctl: SIOC80211IFCREATE CALLED
[   29.266979] wmi_unified_vdev_create_send: ID = 0 VAP Addr = 04:f0:21:11:e8:59:
[   29.274383] Setting dscp for vap id: 0
[   29.278006] __ieee80211_smart_ant_init: Smart Antenna is not supported 
[   29.284598] VAP device ath0 created osifp: (d7c48cc0) os_if: (d7cc0000)
[   29.318775] Set freq vap stop send + d7cc0000
[   29.322118] OL vap_stop +
[   29.324804] wmi_unified_vdev_stop_send for vap 0 (d8370000)
[   29.330334] OL vap_stop -
[   29.332895] STOPPED EVENT for vap 0 (d8370000)
[   29.337488] Set freq vap stop send -d7cc0000
[   29.464354] Set wait done --d7cc0000
[   29.485067]  
[   29.485067]  DES SSID SET= 
[   29.490877]  
[   29.490877]  DES SSID SET=OpenWrt 
[   29.514089] OL vap_stop +
[   29.515713] wmi_unified_vdev_stop_send for vap 0 (d8370000)
[   29.521305] OL vap_stop -
[   29.523898] STOPPED EVENT for vap 0 (d8370000)
[   29.654545] wmi_unified_scan_start_send for vap 0 (d8370000)
[   29.659418] 8021q: adding VLAN 0 to HW filter on device ath0
[   29.850890] [wifi0] FWLOG: [29466] WAL_DBGID_TX_AC_BUFFER_SET ( 0x3, 0x1e, 0x460, 0x460, 0x0 )
[   29.858450] [wifi0] FWLOG: [29466] WAL_DBGID_TX_AC_BUFFER_SET ( 0x12, 0x1e, 0x460, 0x460, 0x0 )
[   29.867135] [wifi0] FWLOG: [29466] WAL_DBGID_TX_AC_BUFFER_SET ( 0x45, 0x1e, 0x460, 0x460, 0x0 )
[   29.875820] [wifi0] FWLOG: [29466] WAL_DBGID_TX_AC_BUFFER_SET ( 0x67, 0x1e, 0x460, 0x460, 0x0 )
[   29.884473] [wifi0] FWLOG: [29471] WHAL_ERROR_RECV_STOPPCU ( 0x110298a, 0x3 )
[   29.891596] [wifi0] FWLOG: [29471] WHAL_ERROR_RESET_PM (  )
[   29.974570] device ath0 entered promiscuous mode
[   29.978225] br-lan: port 2(ath0) entered forwarding state
[   29.983567] br-lan: port 2(ath0) entered forwarding state
[   31.983317] br-lan: port 2(ath0) entered forwarding state
[   36.727054] warning: `alljoyn-daemon' uses 32-bit capabilities (legacy support in use)
[   36.862667] OL vap_start +
[   36.864386] wmi_unified_vdev_start_send for vap 0 (d8370000)
[   36.866135] ECM init
[   36.867041] ECM init complete
[   36.875132] OL vap_start -
[   36.881693] ol_vdev_start_resp_ev for vap 0 (d8370000)
[   36.885816] ol_ath_vap_join: join operation is only for STA/IBSS mode
[   36.892221] ol_ath_wmm_update:
[   36.895282] ol_if_dfs_configure: called
[   36.899062] ol_if_dfs_configure: FCC domain
[   36.903217] ol_if_dfs_disable: called
[   36.906935] ol_if_dfs_enable: called
[   36.910465] cac_start chan 5260 timeout 60 sec, curr time: 4294704 sec
[   36.916963] Notification to UMAC VAP layer



BusyBox v1.19.4 (2014-10-17 11:25:22 SGT) built-in shell (ash)
Enter 'help' for a list of built-in commands.

     MM           NM                    MMMMMMM          M       M
   $MMMMM        MMMMM                MMMMMMMMMMM      MMM     MMM
  MMMMMMMM     MM MMMMM.              MMMMM:MMMMMM:   MMMM   MMMMM
MMMM= MMMMMM  MMM   MMMM       MMMMM   MMMM  MMMMMM   MMMM  MMMMM'
MMMM=  MMMMM MMMM    MM       MMMMM    MMMM    MMMM   MMMMNMMMMM
MMMM=   MMMM  MMMMM          MMMMM     MMMM    MMMM   MMMMMMMM
MMMM=   MMMM   MMMMMM       MMMMM      MMMM    MMMM   MMMMMMMMM
MMMM=   MMMM     MMMMM,    NMMMMMMMM   MMMM    MMMM   MMMMMMMMMMM
MMMM=   MMMM      MMMMMM   MMMMMMMM    MMMM    MMMM   MMMM  MMMMMM
MMMM=   MMMM   MM    MMMM    MMMM      MMMM    MMMM   MMMM    MMMM
MMMM$ ,MMMMM  MMMMM  MMMM    MMM       MMMM   MMMMM   MMMM    MMMM
  MMMMMMM:      MMMMMMM     M         MMMMMMMMMMMM  MMMMMMM MMMMMMM
    MMMMMM       MMMMN     M           MMMMMMMMM      MMMM    MMMM
     MMMM          M                    MMMMMMM        M       M
       M
 ---------------------------------------------------------------
   For those about to rock... (IPQ806X.LN, r37990)
 ---------------------------------------------------------------
root@OpenWrt:/# cat /proc/mtd 
dev:    size   erasesize  name
mtd0: 00040000 00020000 "SBL1"
mtd1: 00140000 00020000 "MIBIB"
mtd2: 00140000 00020000 "SBL2"
mtd3: 00280000 00020000 "SBL3"
mtd4: 00120000 00020000 "DDRCONFIG"
mtd5: 00120000 00020000 "SSD"
mtd6: 00280000 00020000 "TZ"
mtd7: 00280000 00020000 "RPM"
mtd8: 00500000 00020000 "APPSBL"
mtd9: 00080000 00020000 "APPSBLENV"
mtd10: 00140000 00020000 "ART"
mtd11: 04000000 00020000 "rootfs"
mtd12: 00010000 00001000 "m25p80"
mtd13: 001b2000 0001f000 "kernel"
mtd14: 00f23000 0001f000 "ubi_rootfs"
mtd15: 02c14000 0001f000 "ubi_rootfs_data"
root@OpenWrt:/# cat proc/mounts 
rootfs / rootfs rw 0 0
mtd:ubi_rootfs /rom squashfs ro,relatime 0 0
proc /proc proc rw,noatime 0 0
sysfs /sys sysfs rw,noatime 0 0
tmpfs /tmp tmpfs rw,nosuid,nodev,noatime 0 0
tmpfs /dev tmpfs rw,noatime,size=512k,mode=755 0 0
devpts /dev/pts devpts rw,noatime,mode=600 0 0
ubi0:ubi_rootfs_data /overlay ubifs rw,noatime 0 0
overlayfs:/overlay / overlayfs rw,noatime,lowerdir=/,upperdir=/overlay 0 0
debugfs /sys/kernel/debug debugfs rw,relatime 0 0
none /proc/bus/usb usbfs rw,relatime 0 0
root@OpenWrt:/# df -h
Filesystem                Size      Used Available Use% Mounted on
rootfs                   39.1M      1.9M     35.1M   5% /
mtd:ubi_rootfs           15.3M     15.3M         0 100% /rom
tmpfs                   238.2M    476.0K    237.7M   0% /tmp
tmpfs                   512.0K         0    512.0K   0% /dev
ubi0:ubi_rootfs_data     39.1M      1.9M     35.1M   5% /overlay
overlayfs:/overlay       39.1M      1.9M     35.1M   5% /
root@OpenWrt:/# cat /proc/devices 
Character devices:
  1 mem
  4 /dev/vc/0
  4 tty
  4 ttyS
  5 /dev/tty
  5 /dev/console
  5 /dev/ptmx
  7 vcs
 10 misc
 13 input
 14 sound
 90 mtd
108 ppp
116 alsa
128 ptm
136 pts
180 usb
189 usb_device
247 ecm_db
248 ubi0
249 ttyHSL
250 ttyHS
251 oncrpc
252 smdpkt
253 smd
254 msm_sps

Block devices:
259 blkext
  8 sd
  9 md
 31 mtdblock
 65 sd
 66 sd
 67 sd
 68 sd
 69 sd
 70 sd
 71 sd
128 sd
129 sd
130 sd
131 sd
132 sd
133 sd
134 sd
135 sd
179 mmc
254 mdp
root@OpenWrt:/# [   97.113308] cac_timeout cac expired, chan 5260 curr time 4294764
[   97.118369] wmi_unified_vdev_up_send for vap 0 (d8370000)
[   97.123742] __ieee80211_smart_ant_init: Smart Antenna is not supported 





Jul 5,2016
In ath9k_hw_init_pll(), there is a call ath9k_hw_init_pll(ah, NULL). Be careful thie NULL. When using struct ath9k_channel *chan, chan maybe NULL. Otherwise core dump to use a NULL pointer:

[  127.470000] ==MHX(ath9k_hw_init_pll)!!!!!!!!!!1.4
[  127.470000] ==MHX(ath9k_hw_init_pll)!!!!!!!!!!1.5
[  127.480000] ===MHX8.1(ath9k_hw_phy_disable)Calling ath9k_hw_init_pll.
[  127.490000] ==MHX5.1(ath9k_hw_init_pll). Setting AR9344. AR_PHY_PLL_MODE=16184, AR_PHY_PLL_CONTROc
[  127.500000] ==MHX5.2(ath9k_hw_init_pll). AR_PHY_PLL_MODE is set to 50c12f00 
[  127.510000] ==MHX5.3(ath9k_hw_init_pll). AR_PHY_PLL_CONTROL is set to 29600000 
[  127.520000] ==MHX5.4(ath9k_hw_init_pll). AR_PHY_PLL_MODE is set to 50c12f00 
[  127.520000] ==MHX5.5(ath9k_hw_init_pll). AR_PHY_PLL_MODE is set to 50c02f00 
[  127.530000] ==MHX5.6(ath9k_hw_init_pll). PLL3 is set to 3000000 
[  127.540000] ==MHX5.7(ath9k_hw_init_pll). PLL3 is set to 43000000 
[  127.540000] ==MHX5.8(ath9k_hw_init_pll). Waiting for measure done. [29600000, 50c02f00, 43001840,.
[  127.550000] CPU 0 Unable to handle kernel paging request at virtual address 00000006, epc == 86808
[  127.560000] Oops[#1]:
[  127.560000] CPU: 0 PID: 1403 Comm: hostapd Not tainted 3.10.36 #60
[  127.560000] task: 86a76e10 ti: 86ac4000 task.ti: 86ac4000
[  127.560000] $ 0   : 00000000 00000000 0000142c 00040000
[  127.560000] $ 4   : 8788a010 00000000 00016188 801abf3c
[  127.560000] $ 8   : 0000002e 20303232 38666565 385d2e2e
[  127.560000] $12   : 00000000 00000005 00000000 2c203032
[  127.560000] $16   : 8788a010 86850000 00000000 00010000
[  127.560000] $20   : 0001618c 00000008 50c02f00 29600000
[  127.560000] $24   : 00000001 801aaf6c                  
[  127.560000] $28   : 86ac4000 86ac5c68 43001840 868030f8
[  127.560000] Hi    : 00000000
[  127.560000] Lo    : 7848e000
[  127.560000] epc   : 868030f8 ath9k_hw_set_sta_beacon_timers+0x724/0x938 [ath9k_hw]
[  127.560000]     Not tainted
[  127.560000] ra    : 868030f8 ath9k_hw_set_sta_beacon_timers+0x724/0x938 [ath9k_hw]
[  127.560000] Status: 1100fc03 KERNEL EXL IE 
[  127.560000] Cause : 00800008
[  127.560000] BadVA : 00000006
[  127.560000] PrId  : 0001974c (MIPS 74Kc)
[  127.560000] Modules linked in: ath9k ath9k_common pppoe ppp_async iptable_nat ath9k_hw ath pppox h
[  127.560000] Process hostapd (pid: 1403, threadinfo=86ac4000, task=86a76e10, tls=77865440)
[  127.560000] Stack : 8687cac0 8684ac40 29600000 50c02f00 43001840 0228fee8 00000001 8788a010
          86850000 8788a030 8687cac0 00000001 8687d108 00000001 86978b38 86804df4
          8687dcf4 8684ac04 03e00000 00e00000 8788a010 8687d540 8687dcf4 868647e8
          86ac5cb8 873b46b0 8687cac0 8687cac0 8687d1a0 8687cac0 8687cac0 8687d1a0
          8687d114 00000000 00000001 873a8b78 86978420 8687cac0 86978420 8687cac0
          ...
[  127.560000] Call Trace:
[  127.560000] [<868030f8>] ath9k_hw_set_sta_beacon_timers+0x724/0x938 [ath9k_hw]
[  127.560000] 
[  127.560000] 
Code: 02002021  0040f809  02402821 <96460006> 3c048685  2484cd74  0c01e264  2625ac40  12400010 
[  127.850000] ---[ end trace c4b5217bf7a6cd0d ]---
[  127.850000] Kernel panic - not syncing: Fatal exception in interrupt
[  127.850000] Rebooting in 3 seconds..

1.1.4-1(May 12 2016-11:11:49)


In pDDL2458, the TCP T/P is 
BW Mode		1M		2M		4M		8M
TCP T/P		2.2M		5.6M		11.5M		20.1M

The debug info changing from 2M BW to 1M BW:
[  796.180000] ===MHX(ar9003_get_pll_sqsum_dvc) 3.1. 
[  797.180000] ===MHX(ath_hw_pll_work) 6.1. common->op_flags=0x6
[  797.180000] ===MHX(ath_hw_pll_work) 6.2.
[  797.180000] ===MHX(ath_hw_pll_work) 6.3. 
[  797.190000] ===MHX(ar9003_get_pll_sqsum_dvc) 3.1. 
[  798.190000] ===MHX(ath_hw_pll_work) 6.1. common->op_flags=0x6
[  798.190000] ===MHX(ath_hw_pll_work) 6.2.
[  798.190000] ===MHX(ath_hw_pll_work) 6.3. 
[  798.200000] ===MHX(ar9003_get_pll_sqsum_dvc) 3.1. 
[  799.200000] ===MHX(ath_hw_pll_work) 6.1. common->op_flags=0x6
[  799.200000] ===MHX(ath_hw_pll_work) 6.2.
[  799.200000] ===MHX(ath_hw_pll_work) 6.3. 
[  799.210000] ===MHX(ar9003_get_pll_sqsum_dvc) 3.1. 
[  800.210000] ===MHX(ath_hw_pll_work) 6.1. common->op_flags=0x6
[  800.210000] ===MHX(ath_hw_pll_work) 6.2.
[  800.210000] ===MHX(ath_hw_pll_work) 6.3. 
[  800.220000] ===MHX(ar9003_get_pll_sqsum_dvc) 3.1. 
[  801.220000] ===MHX(ath_hw_pll_work) 6.1. common->op_flags=0x6
[  801.220000] ===MHX(ath_hw_pll_work) 6.2.
[  801.220000] ===MHX(ath_hw_pll_work) 6.3. 
[  801.230000] ===MHX(ar9003_get_pll_sqsum_dvc) 3.1. 
[  802.230000] ===MHX(ath_hw_pll_work) 6.1. common->op_flags=0x6
[  802.230000] ===MHX(ath_hw_pll_work) 6.2.
[  802.230000] ===MHX(ath_hw_pll_work) 6.3. 
[  802.240000] ===MHX(ar9003_get_pll_sqsum_dvc) 3.1. 
[  803.240000] ===MHX(ath_hw_pll_work) 6.1. common->op_flags=0x6
[  803.240000] ===MHX(ath_hw_pll_work) 6.2.
[  803.240000] ===MHX(ath_hw_pll_work) 6.3. 
[  803.250000] ===MHX(ar9003_get_pll_sqsum_dvc) 3.1. 
[  804.250000] ===MHX(ath_hw_pll_work) 6.1. common->op_flags=0x6
[  804.250000] ===MHX(ath_hw_pll_work) 6.2.
[  804.250000] ===MHX(ath_hw_pll_work) 6.3. 
[  804.260000] ===MHX(ar9003_get_pll_sqsum_dvc) 3.1. 
[  805.260000] ===MHX(ath_hw_pll_work) 6.1. common->op_flags=0x6
[  805.260000] ===MHX(ath_hw_pll_work) 6.2.
[  805.260000] ===MHX(ath_hw_pll_work) 6.3. 
[  805.270000] ===MHX(ar9003_get_pll_sqsum_dvc) 3.1. 
[  806.270000] ===MHX(ath_hw_pll_work) 6.1. common->op_flags=0x6
[  806.270000] ===MHX(ath_hw_pll_work) 6.2.
[  806.270000] ===MHX(ath_hw_pll_work) 6.3. 
[  806.280000] ===MHX(ar9003_get_pll_sqsum_dvc) 3.1. 
[  807.280000] ===MHX(ath_hw_pll_work) 6.1. common->op_flags=0x6
[  807.280000] ===MHX(ath_hw_pll_work) 6.2.
[  807.280000] ===MHX(ath_hw_pll_work) 6.3. 
[  807.290000] ===MHX(ar9003_get_pll_sqsum_dvc) 3.1. 
[  808.290000] ===MHX(ath_hw_pll_work) 6.1. common->op_flags=0x6
[  808.290000] ===MHX(ath_hw_pll_work) 6.2.
[  808.290000] ===MHX(ath_hw_pll_work) 6.3. 
[  808.300000] ===MHX(ar9003_get_pll_sqsum_dvc) 3.1. 
[  809.140000] device wlan0 left promiscuous mode
[  809.140000] br-lan: port 2(wlan0) entered disabled state
[  809.160000] ==MHX5.1(ath9k_hw_init_pll). Setting AR9344. AR_PHY_PLL_MODE=16184, AR_PHY_PLL_CONTROL=16180, PLL3=16188, PLL4=1618c
[  809.170000] ==MHX5.2(ath9k_hw_init_pll). AR_PHY_PLL_MODE is set to 50c12f00 
[  809.180000] ==MHX5.3(ath9k_hw_init_pll). AR_PHY_PLL_CONTROL is set to 29600000 
[  809.190000] ==MHX5.4(ath9k_hw_init_pll). AR_PHY_PLL_MODE is set to 50c12f00 
[  809.190000] ==MHX5.5(ath9k_hw_init_pll). AR_PHY_PLL_MODE is set to 50c02f00 
[  809.200000] ==MHX5.6(ath9k_hw_init_pll). PLL3 is set to 37f4040 
[  809.210000] ==MHX5.7(ath9k_hw_init_pll). PLL3 is set to 43000000 
[  809.210000] ==MHX5.8(ath9k_hw_init_pll). Waiting for measure done. [29600000, 50c02f00, 43001838, fd08db28]...
[  809.220000] ==MHX(ath9k_hw_init_pll)!!!!!!!!!!1.1
[  809.230000] ==MHX(ath9k_hw_init_pll)!!!!!!!!!!1.4
[  809.230000] ==MHX(ath9k_hw_init_pll)!!!!!!!!!!1.5
[  809.260000] ==MHX5.1(ath9k_hw_init_pll). Setting AR9344. AR_PHY_PLL_MODE=16184, AR_PHY_PLL_CONTROL=16180, PLL3=16188, PLL4=1618c
[  809.270000] ==MHX5.2(ath9k_hw_init_pll). AR_PHY_PLL_MODE is set to 50c12f00 
[  809.280000] ==MHX5.3(ath9k_hw_init_pll). AR_PHY_PLL_CONTROL is set to 29600000 
[  809.280000] ==MHX5.4(ath9k_hw_init_pll). AR_PHY_PLL_MODE is set to 50c12f00 
[  809.290000] ==MHX5.5(ath9k_hw_init_pll). AR_PHY_PLL_MODE is set to 50c02f00 
[  809.300000] ==MHX5.6(ath9k_hw_init_pll). PLL3 is set to 3000000 
[  809.310000] ==MHX5.7(ath9k_hw_init_pll). PLL3 is set to 43000000 
[  809.310000] ==MHX5.8(ath9k_hw_init_pll). Waiting for measure done. [29600000, 50c02f00, 43000968, ff28d9f8]...
[  809.320000] ==MHX(ath9k_hw_init_pll)!!!!!!!!!!1.1
[  809.330000] ==MHX(ath9k_hw_init_pll)!!!!!!!!!!1.4
[  809.330000] ==MHX(ath9k_hw_init_pll)!!!!!!!!!!1.5
[  809.350000] ===MHX8.1(ath9k_hw_phy_disable)Calling ath9k_hw_init_pll.
[  809.360000] ==MHX5.1(ath9k_hw_init_pll). Setting AR9344. AR_PHY_PLL_MODE=16184, AR_PHY_PLL_CONTROL=16180, PLL3=16188, PLL4=1618c
[  809.370000] ==MHX5.2(ath9k_hw_init_pll). AR_PHY_PLL_MODE is set to 50c12f00 
[  809.370000] ==MHX5.3(ath9k_hw_init_pll). AR_PHY_PLL_CONTROL is set to 29600000 
[  809.380000] ==MHX5.4(ath9k_hw_init_pll). AR_PHY_PLL_MODE is set to 50c12f00 
[  809.390000] ==MHX5.5(ath9k_hw_init_pll). AR_PHY_PLL_MODE is set to 50c02f00 
[  809.400000] ==MHX5.6(ath9k_hw_init_pll). PLL3 is set to 3000000 
[  809.400000] ==MHX5.7(ath9k_hw_init_pll). PLL3 is set to 43000000 
[  809.410000] ==MHX5.8(ath9k_hw_init_pll). Waiting for measure done. [29600000, 50c02f00, 43000f90, 0208d9d8]...
[  809.420000] ==MHX(ath9k_hw_init_pll)!!!!!!!!!!1.1
[  809.430000] ==MHX(ath9k_hw_init_pll)!!!!!!!!!!1.4
[  809.430000] ==MHX(ath9k_hw_init_pll)!!!!!!!!!!1.5
[  809.440000] ===MHX8.2(ath9k_hw_phy_disable)Just returned from ath9k_hw_init_pll.
[  811.040000] ==MHX5.1(ath9k_hw_init_pll). Setting AR9344. AR_PHY_PLL_MODE=16184, AR_PHY_PLL_CONTROL=16180, PLL3=16188, PLL4=1618c
[  811.050000] ==MHX5.2(ath9k_hw_init_pll). AR_PHY_PLL_MODE is set to 50c12f00 
[  811.060000] ==MHX5.3(ath9k_hw_init_pll). AR_PHY_PLL_CONTROL is set to 29600000 
[  811.070000] ==MHX5.4(ath9k_hw_init_pll). AR_PHY_PLL_MODE is set to 50c12f00 
[  811.070000] ==MHX5.5(ath9k_hw_init_pll). AR_PHY_PLL_MODE is set to 50c02f00 
[  811.080000] ==MHX5.6(ath9k_hw_init_pll). PLL3 is set to 3000000 
[  811.090000] ==MHX5.7(ath9k_hw_init_pll). PLL3 is set to 43000000 
[  811.090000] ==MHX5.8(ath9k_hw_init_pll). Waiting for measure done. [29600000, 50c02f00, 43000a20, 0128de18]...
[  811.100000] ==MHX(ath9k_hw_init_pll)!!!!!!!!!!1.1
[  811.110000] ==MHX(ath9k_hw_init_pll)!!!!!!!!!!1.4
[  811.120000] ==MHX(ath9k_hw_init_pll)!!!!!!!!!!1.5
[  811.140000] ==MHX5.1(ath9k_hw_init_pll). Setting AR9344. AR_PHY_PLL_MODE=16184, AR_PHY_PLL_CONTROL=16180, PLL3=16188, PLL4=1618c
[  811.150000] ==MHX5.2(ath9k_hw_init_pll). AR_PHY_PLL_MODE is set to 50c12f00 
[  811.160000] ==MHX5.3(ath9k_hw_init_pll). AR_PHY_PLL_CONTROL is set to 29600000 
[  811.170000] ==MHX5.4(ath9k_hw_init_pll). AR_PHY_PLL_MODE is set to 50c12f00 
[  811.180000] ==MHX5.5(ath9k_hw_init_pll). AR_PHY_PLL_MODE is set to 50c02f00 
[  811.180000] ==MHX5.6(ath9k_hw_init_pll). PLL3 is set to 3000000 
[  811.190000] ==MHX5.7(ath9k_hw_init_pll). PLL3 is set to 43000000 
[  811.200000] ==MHX5.8(ath9k_hw_init_pll). Waiting for measure done. [29600000, 50c02f00, 43002920, 03e8dc38]...
[  811.210000] ==MHX(ath9k_hw_init_pll)!!!!!!!!!!1.1
[  811.210000] ==MHX(ath9k_hw_init_pll)!!!!!!!!!!1.4
[  811.220000] ==MHX(ath9k_hw_init_pll)!!!!!!!!!!1.5
[  811.240000] IPv6: ADDRCONF(NETDEV_UP): wlan0: link is not ready
[  811.340000] device wlan0 entered promiscuous mode
[  811.340000] br-lan: port 2(wlan0) entered forwarding state
[  811.350000] br-lan: port 2(wlan0) entered forwarding state
[  811.390000] br-lan: port 2(wlan0) entered disabled state
[  811.850000] ==MHX5.1(ath9k_hw_init_pll). Setting AR9344. AR_PHY_PLL_MODE=16184, AR_PHY_PLL_CONTROL=16180, PLL3=16188, PLL4=1618c
[  811.860000] ==MHX5.2(ath9k_hw_init_pll). AR_PHY_PLL_MODE is set to 50c12f00 
[  811.870000] ==MHX5.3(ath9k_hw_init_pll). AR_PHY_PLL_CONTROL is set to 29600000 
[  811.880000] ==MHX5.4(ath9k_hw_init_pll). AR_PHY_PLL_MODE is set to 50c12f00 
[  811.890000] ==MHX5.5(ath9k_hw_init_pll). AR_PHY_PLL_MODE is set to 50c02f00 
[  811.890000] ==MHX5.6(ath9k_hw_init_pll). PLL3 is set to 3000000 
[  811.900000] ==MHX5.7(ath9k_hw_init_pll). PLL3 is set to 43000000 
[  811.910000] ==MHX5.8(ath9k_hw_init_pll). Waiting for measure done. [29600000, 50c02f00, 430008b0, 0048dda8]...
[  811.920000] ==MHX(ath9k_hw_init_pll)!!!!!!!!!!1.1
[  811.920000] ==MHX(ath9k_hw_init_pll)!!!!!!!!!!1.4
[  811.930000] ==MHX(ath9k_hw_init_pll)!!!!!!!!!!1.5
[  811.950000] ==MHX5.1(ath9k_hw_init_pll). Setting AR9344. AR_PHY_PLL_MODE=16184, AR_PHY_PLL_CONTROL=16180, PLL3=16188, PLL4=1618c
[  811.960000] ==MHX5.2(ath9k_hw_init_pll). AR_PHY_PLL_MODE is set to 50c12f00 
[  811.970000] ==MHX5.3(ath9k_hw_init_pll). AR_PHY_PLL_CONTROL is set to 29600000 
[  811.980000] ==MHX5.4(ath9k_hw_init_pll). AR_PHY_PLL_MODE is set to 50c12f00 
[  811.990000] ==MHX5.5(ath9k_hw_init_pll). AR_PHY_PLL_MODE is set to 50c02f00 
[  811.990000] ==MHX5.6(ath9k_hw_init_pll). PLL3 is set to 3000000 
[  812.000000] ==MHX5.7(ath9k_hw_init_pll). PLL3 is set to 43000000 
[  812.010000] ==MHX5.8(ath9k_hw_init_pll). Waiting for measure done. [29600000, 50c02f00, 43004980, fa28e098]...
[  812.020000] ==MHX(ath9k_hw_init_pll)!!!!!!!!!!1.1
[  812.020000] ==MHX(ath9k_hw_init_pll)!!!!!!!!!!1.4
[  812.030000] ==MHX(ath9k_hw_init_pll)!!!!!!!!!!1.5
[  812.090000] br-lan: port 2(wlan0) entered forwarding state
[  812.090000] br-lan: port 2(wlan0) entered forwarding state
[  812.100000] IPv6: ADDRCONF(NETDEV_CHANGE): wlan0: link becomes ready
[  813.050000] ===MHX(ath_hw_pll_work) 6.1. common->op_flags=0x6
[  813.050000] ===MHX(ath_hw_pll_work) 6.2.
[  813.050000] ===MHX(ath_hw_pll_work) 6.3. 
[  813.060000] ===MHX(ar9003_get_pll_sqsum_dvc) 3.1. 
[  814.060000] ===MHX(ath_hw_pll_work) 6.1. common->op_flags=0x6
[  814.060000] ===MHX(ath_hw_pll_work) 6.2.
[  814.060000] ===MHX(ath_hw_pll_work) 6.3. 
[  814.070000] ===MHX(ar9003_get_pll_sqsum_dvc) 3.1. 
[  814.090000] br-lan: port 2(wlan0) entered forwarding state
[  815.070000] ===MHX(ath_hw_pll_work) 6.1. common->op_flags=0x6
[  815.070000] ===MHX(ath_hw_pll_work) 6.2.
[  815.070000] ===MHX(ath_hw_pll_work) 6.3. 
[  815.080000] ===MHX(ar9003_get_pll_sqsum_dvc) 3.1. 
[  816.080000] ===MHX(ath_hw_pll_work) 6.1. common->op_flags=0x6
[  816.080000] ===MHX(ath_hw_pll_work) 6.2.
[  816.080000] ===MHX(ath_hw_pll_work) 6.3. 
[  816.090000] ===MHX(ar9003_get_pll_sqsum_dvc) 3.1. 
[  817.090000] ===MHX(ath_hw_pll_work) 6.1. common->op_flags=0x6
[  817.090000] ===MHX(ath_hw_pll_work) 6.2.
[  817.090000] ===MHX(ath_hw_pll_work) 6.3. 
[  817.100000] ===MHX(ar9003_get_pll_sqsum_dvc) 3.1. 
[  818.100000] ===MHX(ath_hw_pll_work) 6.1. common->op_flags=0x6
[  818.100000] ===MHX(ath_hw_pll_work) 6.2.
[  818.100000] ===MHX(ath_hw_pll_work) 6.3. 
[  818.110000] ===MHX(ar9003_get_pll_sqsum_dvc) 3.1. 
[  819.110000] ===MHX(ath_hw_pll_work) 6.1. common->op_flags=0x6
[  819.120000] ===MHX(ath_hw_pll_work) 6.2.
[  819.120000] ===MHX(ath_hw_pll_work) 6.3. 
[  819.130000] ===MHX(ar9003_get_pll_sqsum_dvc) 3.1. 
[  820.130000] ===MHX(ath_hw_pll_work) 6.1. common->op_flags=0x6
[  820.130000] ===MHX(ath_hw_pll_work) 6.2.
[  820.130000] ===MHX(ath_hw_pll_work) 6.3. 
[  820.140000] ===MHX(ar9003_get_pll_sqsum_dvc) 3.1. 
[  820.640000] eth0: link up (1000Mbps/Full duplex)
[  820.650000] br-lan: port 1(eth0) entered forwarding state
[  820.660000] br-lan: port 1(eth0) entered forwarding state
[  821.140000] ===MHX(ath_hw_pll_work) 6.1. common->op_flags=0x6
[  821.140000] ===MHX(ath_hw_pll_work) 6.2.
[  821.140000] ===MHX(ath_hw_pll_work) 6.3. 
[  821.150000] ===MHX(ar9003_get_pll_sqsum_dvc) 3.1. 
[  822.160000] ===MHX(ath_hw_pll_work) 6.1. common->op_flags=0x6
[  822.160000] ===MHX(ath_hw_pll_work) 6.2.
[  822.160000] ===MHX(ath_hw_pll_work) 6.3. 
[  822.170000] ===MHX(ar9003_get_pll_sqsum_dvc) 3.1. 


Jun 28,2016
#else
	//////////REG_WRITE(ah, AR_RTC_PLL_CONTROL, pll);
    REG_WRITE(ah, AR_RTC_PLL_CONTROL, 0xd42c);	// CLK_SEL set to 11. Or 0xbc2c, REF_DIV=0x0f.
	printk("==MHX(%s)Calculated pll=%08x\n", __func__, pll);	// MHX: Printed origional values are 0x942c(5M,2M,and 1M) or 0x542c(8MHz).
#endif

Based the defination of AR_RTC_9300_PLL_REFDIV, AR_RTC_9300_PLL_CLKSEL, etc, which are field definition of AR_RTC_PLL_CONTROL register (offset 0x7014), change to 0xd42c or 0xbc2c, at 1MHz BW, the bandwidth are all measured 5MHz. This means the AR_RTC_PLL_CONTROL field definition AR_RTC_9300_PLL_REFDIV, etc are wrong. The correct definition is in DS WLAN PLL Control Settings (WLAN_PLL_CONTROL) that is a 32bit register.

In art2, ar9300InitPLL() is executed every time the BW is changed.

Jun 27, 2016
struct ath9k_channel {
        struct ieee80211_channel *chan;
        u16 channel;
        u16 channelFlags;
        s16 noisefloor;
};

#define CHANNEL_5GHZ            BIT(0)
#define CHANNEL_HALF            BIT(1)
#define CHANNEL_QUARTER         BIT(2)
#define CHANNEL_HT                  BIT(3)
#define CHANNEL_HT40PLUS        BIT(4)
#define CHANNEL_HT40MINUS       BIT(5)

#ifdef CONFIG_STEP_ONEMHZ_XXX
#define CHANNEL_PHY_HALF        BIT(6)
#define CHANNEL_PHY_QUARTER     BIT(7)
#endif /* CONFIG_STEP_ONEMHZ */

#ifdef CONFIG_STEP_ONEMHZ
    case NL80211_CHAN_WIDTH_1:
                flags |= CHANNEL_QUARTER | CHANNEL_PHY_QUARTER;
                break;
    case NL80211_CHAN_WIDTH_2:
                flags |= CHANNEL_QUARTER | CHANNEL_PHY_HALF;
                break;
#endif /* CONFIG_STEP_ONEMHZ */
        case NL80211_CHAN_WIDTH_5:
                flags |= CHANNEL_QUARTER;
                break;
        case NL80211_CHAN_WIDTH_10:
                flags |= CHANNEL_HALF;

This doesn't work:
	if(chan->channelFlags & CHANNEL_HALF){
		// only 10MHz
		REG_WRITE(ah, AR_RTC_PLL_CONTROL, 0x250002c);		// 2.2MHz(AR_PHY_MODE=0x140-Quarter,Chanbw=1MHz) ok, 4.63MHz(AR_PHY_MODE=0x120-Half,Chanbw=2MHz) ok, 9.62MHz(AR_PHY_MODE=0x100-Full,chanbw=8MHz&4MHz) ok
	}
	else {
		// 1,2,5MHz
		REG_WRITE(ah, AR_RTC_PLL_CONTROL, 0x450002c);       // 1.07MHz(AR_PHY_MODE=0x140-Quarter,Chanbw=1MHz) ok, 2.2MHz(AR_PHY_MODE=0x120-Half,Chanbw=2MHz) ok, 4.75MHz(AR_PHY_MODE=0x100-Full,chanbw=8MHz&4MHz) ok
	}
In 2MHz, STA crashes and doesn't connect.

Jun 24, 2016
pDDL2458 test on 2.4GHz. A pair of Karen boards,
root@UserDevice:~# iw phy0 info
Wiphy phy0
        max # scan SSIDs: 4
        max scan IEs length: 2261 bytes
        Retry short limit: 7
        Retry long limit: 4
        Coverage class: 3 (up to 1350m)
        Device supports AP-side u-APSD.
        Device supports T-DLS.
        Available Antennas: TX 0x3 RX 0x3
        Configured Antennas: TX 0x3 RX 0x3
        Supported interface modes:
                 * IBSS
                 * managed
                 * AP
                 * AP/VLAN
                 * WDS
                 * monitor
                 * mesh point
                 * P2P-client
                 * P2P-GO
        Band 1:
                Capabilities: 0x181
                        RX LDPC
                        HT20
                        Static SM Power Save
                        TX STBC
                        RX STBC 1-stream
                        Max AMSDU length: 3839 bytes
                        No DSSS/CCK HT40
                Maximum RX AMPDU length 65535 bytes (exponent: 0x003)
                Minimum RX AMPDU time spacing: 8 usec (0x06)
                HT TX/RX MCS rate indexes supported: 0-15
                Frequencies:
                        * 2390 MHz [0] (30.0 dBm)
                        * 2391 MHz [1] (30.0 dBm)
                        * 2392 MHz [2] (30.0 dBm)
                        * 2393 MHz [3] (30.0 dBm)
                        * 2394 MHz [4] (30.0 dBm)
                        * 2395 MHz [5] (30.0 dBm)
                        * 2396 MHz [6] (30.0 dBm)
                        * 2397 MHz [7] (30.0 dBm)
                        * 2398 MHz [8] (30.0 dBm)
                        * 2399 MHz [9] (30.0 dBm)
                        * 2400 MHz [10] (30.0 dBm)
                        * 2401 MHz [11] (30.0 dBm)
                        * 2402 MHz [12] (30.0 dBm)
                        * 2403 MHz [13] (30.0 dBm)
                        * 2404 MHz [14] (30.0 dBm)
                        * 2405 MHz [15] (30.0 dBm)
                        * 2406 MHz [16] (30.0 dBm)
                        * 2407 MHz [17] (30.0 dBm)
                        * 2408 MHz [18] (30.0 dBm)
                        * 2409 MHz [19] (30.0 dBm)
                        * 2410 MHz [20] (30.0 dBm)
                        * 2411 MHz [21] (30.0 dBm)
                        * 2412 MHz [22] (30.0 dBm)
                        * 2413 MHz [23] (30.0 dBm)
                        * 2414 MHz [24] (30.0 dBm)
                        * 2415 MHz [25] (30.0 dBm)
                        * 2416 MHz [26] (30.0 dBm)
                        * 2417 MHz [27] (30.0 dBm)
                        * 2418 MHz [28] (30.0 dBm)
                        * 2419 MHz [29] (30.0 dBm)
                        * 2420 MHz [30] (30.0 dBm)
                        * 2421 MHz [31] (30.0 dBm)
                        * 2422 MHz [32] (30.0 dBm)
                        * 2423 MHz [33] (30.0 dBm)
                        * 2424 MHz [34] (30.0 dBm)
                        * 2425 MHz [35] (30.0 dBm)
                        * 2426 MHz [36] (30.0 dBm)
                        * 2427 MHz [37] (30.0 dBm)
                        * 2428 MHz [38] (30.0 dBm)
                        * 2429 MHz [39] (30.0 dBm)
                        * 2430 MHz [40] (30.0 dBm)
                        * 2431 MHz [41] (30.0 dBm)
                        * 2432 MHz [42] (30.0 dBm)
                        * 2433 MHz [43] (30.0 dBm)
                        * 2434 MHz [44] (30.0 dBm)
                        * 2435 MHz [45] (30.0 dBm)
                        * 2436 MHz [46] (30.0 dBm)
                        * 2437 MHz [47] (30.0 dBm)
                        * 2438 MHz [48] (30.0 dBm)
                        * 2439 MHz [49] (30.0 dBm)
                        * 2440 MHz [50] (30.0 dBm)
                        * 2441 MHz [51] (30.0 dBm)
                        * 2442 MHz [52] (30.0 dBm)
                        * 2443 MHz [53] (30.0 dBm)
                        * 2444 MHz [54] (30.0 dBm)
                        * 2445 MHz [55] (30.0 dBm)
                        * 2446 MHz [56] (30.0 dBm)
                        * 2447 MHz [57] (30.0 dBm)
                        * 2448 MHz [58] (30.0 dBm)
                        * 2449 MHz [59] (30.0 dBm)
                        * 2450 MHz [60] (30.0 dBm)
                        * 2451 MHz [61] (30.0 dBm)
                        * 2452 MHz [62] (30.0 dBm)
                        * 2453 MHz [63] (30.0 dBm)
                        * 2454 MHz [64] (30.0 dBm)
                        * 2455 MHz [65] (30.0 dBm)
                        * 2456 MHz [66] (30.0 dBm)
                        * 2457 MHz [67] (30.0 dBm)
                        * 2458 MHz [68] (30.0 dBm)
                        * 2459 MHz [69] (30.0 dBm)
                        * 2460 MHz [70] (30.0 dBm)
                        * 2461 MHz [71] (30.0 dBm)
                        * 2462 MHz [72] (30.0 dBm)
                        * 2463 MHz [73] (30.0 dBm)
                        * 2464 MHz [74] (30.0 dBm)
                        * 2465 MHz [75] (30.0 dBm)
                        * 2466 MHz [76] (30.0 dBm)
                        * 2467 MHz [77] (30.0 dBm)
                        * 2468 MHz [78] (30.0 dBm)
                        * 2469 MHz [79] (30.0 dBm)
                        * 2470 MHz [80] (30.0 dBm)
                        * 2471 MHz [81] (30.0 dBm)
                        * 2472 MHz [82] (30.0 dBm)
                        * 2473 MHz [83] (30.0 dBm)
                        * 2474 MHz [84] (30.0 dBm)
                        * 2475 MHz [85] (30.0 dBm)
                        * 2476 MHz [86] (30.0 dBm)
                        * 2477 MHz [87] (30.0 dBm)
                        * 2478 MHz [88] (30.0 dBm)
                        * 2479 MHz [89] (30.0 dBm)
                        * 2480 MHz [90] (30.0 dBm)
                        * 2481 MHz [91] (30.0 dBm)
                        * 2482 MHz [92] (30.0 dBm)
                        * 2483 MHz [93] (30.0 dBm)
                        * 2484 MHz [94] (30.0 dBm)
                        * 2485 MHz [95] (30.0 dBm)
                        * 2486 MHz [96] (30.0 dBm)
                        * 2487 MHz [97] (30.0 dBm)
                        * 2488 MHz [98] (30.0 dBm)
                        * 2489 MHz [99] (30.0 dBm)
        Band 2:
                Capabilities: 0x181
                        RX LDPC
                        HT20
                        Static SM Power Save
                        TX STBC
                        RX STBC 1-stream
                        Max AMSDU length: 3839 bytes
                        No DSSS/CCK HT40
                Maximum RX AMPDU length 65535 bytes (exponent: 0x003)
                Minimum RX AMPDU time spacing: 8 usec (0x06)
                HT TX/RX MCS rate indexes supported: 0-15
                Frequencies:
                        * 2390 MHz [0] (30.0 dBm)
                        * 2391 MHz [1] (30.0 dBm)
                        * 2392 MHz [2] (30.0 dBm)
        valid interface combinations:
                 * #{ managed, WDS } <= 2048, #{ AP, mesh point } <= 8, #{ P2P-client, P2P-GO } <= 1, #{ IBSS } <= 1,
                   total <= 2048, #channels <= 1, STA/AP BI must match
        HT Capability overrides:
                 * MCS: ff ff ff ff ff ff ff ff ff ff
                 * maximum A-MSDU length
                 * supported channel width
                 * short GI for 40 MHz
                 * max A-MPDU length exponent
                 * min MPDU start spacing
root@UserDevice:~# 
[Note] There is no 5GHz on band2 here.

WiFi settings:
root@UserDevice:~# 
root@UserDevice:~# cat etc/config/wireless 

config wifi-device 'radio0'
        option type 'mac80211'
        option path 'platform/ar934x_wmac'
        option disabled '0'
        option encryptlvl '63'
        option txpower '0'
        option bwmode '20mHz'
        option distance '1000'
        option frag '2346'
        option rts '2346'
        option fragoff '1'
        option rtsoff '1'
        option hwmode '11ng'
        option htmode 'HT20'
        option channel '22'
        option rxdiv '0'
        option com1rate '0'
        option sgi '0'
        option noscan '1'
        option ht_capab 'SHORT-GI-40 TX-STBC RX-STBC1 DSSS_CCK-40'
        option chanbw '10'

config wifi-iface
        option device 'radio0'
        option network 'lan'
        option mode 'ap'
        option ssid 'BulletAC-jeff'
        option encryption 'psk2'
        option wmm '1'
        option rate 'auto'
        option key '1234567890jeff'
        option bonding '0'
        option macfilter 'none'
        option wds '0'


config UCIMHT 'CHECKTAG'
        option TM '1465417554'
        option LRC '6F'
root@UserDevice:~# iw wlan0 info
Interface wlan0
        ifindex 16
        wdev 0xb
        addr 00:0f:92:01:02:03
        type managed
        wiphy 0
        channel 22 (2412 MHz), width: 20 MHz, center1: 2412 MHz
root@UserDevice:~# iw wlan0 station dump
Station 00:0f:92:03:02:01 (on wlan0)
        mhqos status:   1
        inactive time:  5800 ms
        rx bytes:       2357927
        rx packets:     23185
        tx bytes:       46150682
        tx packets:     30544
        tx retries:     844
        tx failed:      0
        signal:         -52 [-55, -56] dBm
        signal avg:     -51 [-54, -55] dBm
        noise floor:    -95 dBm
        rssi:           43
        tx bitrate:     65.0 MBit/s MCS 7
        rx bitrate:     130.0 MBit/s MCS 15
        authorized:     yes
        authenticated:  yes
        preamble:       long
        WMM/WME:        yes
        MFP:            no
        TDLS peer:      no

Connection:
AP(168.1) with 2 antennas ~~~~~~~~~~~~~~~~~~~~~ STA(168.2), one antenna, the other antenna connected to a spectrum analyzer------------PC1(168.100)
PC1 runs as Iperf server, traffic direction AP--->STA--->PC1.

Channel Bandwidth		1MHz					2MHz					4MHz					8MHz				Comments
BW Delta(by -60dBm Line)	14M					18M					32M					33M
BW Top				3.89M					8.18M					16.57M					16.57M
TCP T/P				10M					15M					28M					25.2M				-l 1024k -w 1024k
UDP T/P				18.9 Mbits/sec(0.18%)		23.6 Mbits/sec(0.02%)			42.6 Mbits/sec(0.13%)			43.6 Mbits/sec(0.34%)


So this is wrong settinig of AR_RTC_PLL_CONTROL. 

In function static void ath9k_hw_init_pll(struct ath_hw *ah, struct ath9k_channel *chan) in hw.c:

	pll = ath9k_hw_compute_pll_control(ah, chan);
	if (AR_SREV_9565(ah))
		pll |= 0x40000;


	//REG_WRITE(ah, AR_RTC_PLL_CONTROL, pll);
	printk("==MHX(%s)Calculated pll=%08x\n", __func__, pll);	//Print 0x942c,0x542c(8MHz)
	REG_WRITE(ah, AR_RTC_PLL_CONTROL, 0x450002c); 		// 4.75MHz(AR_PHY_MODE=0x100-Full,chanbw=8MHz&4MHz) ok, 2.2MHz(AR_PHY_MODE=0x120-Half,Chanbw=2MHz) ok, 1.07MHz(AR_PHY_MODE=0x140-Quarter,Chanbw=1MHz) ok
	//REG_WRITE(ah, AR_RTC_PLL_CONTROL, 0x250002c);		// 9.62MHz(AR_PHY_MODE=0x100-Full,chanbw=8MHz&4MHz) ok, 4.63MHz(AR_PHY_MODE=0x120-Half,Chanbw=2MHz) OK, 2.2MHz(AR_PHY_MODE=0x140-Quarter,Chanbw=1MHz) ok

/*
Copied from ART-2
        if (chan && (IS_CHAN_HALF_RATE(chan) || IS_CHAN_ONE_EIGHTH_RATE(chan)))
            pll = 0x250002c;
        else if (chan && (IS_CHAN_QUARTER_RATE(chan) || IS_CHAN_ONE_SIXTEENTH_RATE(chan)))
            pll = 0x450002c;
        else
            pll = 0x50002c;
        OS_REG_WRITE(ah, AR_RTC_PLL_CONTROL, pll);       // Remove from Bypass mode
*/	

	if (AR_SREV_9485(ah) || AR_SREV_9340(ah) || AR_SREV_9330(ah) ||
	    AR_SREV_9550(ah))
		udelay(1000);



Jun 23, 2016
static void ar9003_hw_set_rfmode(struct ath_hw *ah,
				 struct ath9k_channel *chan)
{
	u32 rfMode = 0;

	if (chan == NULL)
		return;

	if (IS_CHAN_2GHZ(chan))
#ifdef CONFIG_STEP_ONEMHZ_XXX /// MHX: last round. This makes the "iw wlan0 scan" can not scan standard 2GHz channels. But still can not see the pDDL beacons.
        rfMode |= AR_PHY_MODE_OFDM | AR_PHY_MODE_DYN_CCK_DISABLE;
        if (chan->channelFlags & CHANNEL_PHY_HALF)
            rfMode |= AR_PHY_MODE_HALF;
        else if (chan->channelFlags & CHANNEL_PHY_QUARTER)
            rfMode |= AR_PHY_MODE_QUARTER;
#else
		rfMode |= AR_PHY_MODE_DYNAMIC;
#endif /* CONFIG_STEP_ONEMHZ */

* SM Register Map
*/
#define AR_SM_BASE      0xa200
 
#define AR_PHY_D2_CHIP_ID        (AR_SM_BASE + 0x0)
#define AR_PHY_GEN_CTRL          (AR_SM_BASE + 0x4)
#define AR_PHY_MODE              (AR_SM_BASE + 0x8)
#define AR_PHY_RX_CHAINMASK      (AR_SM_BASE + 0xa0)

REG_WRITE(ah, AR_PHY_MODE, rfMode); --->ath_hw->reg_ops--->In ath9k_init_softc():        
	ah->reg_ops.read = ath9k_ioread32;
        ah->reg_ops.write = ath9k_iowrite32;
        ah->reg_ops.rmw = ath9k_reg_rmw;
-----> iowrite32(val, sc->mem + reg_offset);

Another way to read AR_PHY_MODE register is to use debugfs. :
echo 0xa204 > sys/kernel/debug/ieee80211/phy0/ath9k/regidx
cat sys/kernel/debug/ieee80211/phy0/ath9k/regval.
In debugfs, struct ath_common *common = ath9k_hw_common, #define REG_READ_D(_ah, _reg) ath9k_hw_common(_ah)->ops->read((_ah), (_reg)). 
To verify this debugfs reading is correct, we read the AR_PHY_D2_CHIP_ID and AR_PHY_RX_CHAINMASK register. On a pDDL(AR93331), we get:

root@UserDevice:~# echo 0xa200 > sys/kernel/debug/ieee80211/phy0/ath9k/regidx
root@UserDevice:~# cat sys/kernel/debug/ieee80211/phy0/ath9k/regval
0x000030ff		//chip ID
root@UserDevice:~# echo 0xa2a0 > sys/kernel/debug/ieee80211/phy0/ath9k/regidx
root@UserDevice:~# cat sys/kernel/debug/ieee80211/phy0/ath9k/regval
0x00000001		// 1 antenna

On KeranAR9344:
root@UserDevice:~# echo 0xa200 > sys/kernel/debug/ieee80211/phy0/ath9k/regidx 
root@UserDevice:~# cat sys/kernel/debug/ieee80211/phy0/ath9k/regval 
0x000010ff		// chip ID
root@UserDevice:~# echo 0xa2a0 > sys/kernel/debug/ieee80211/phy0/ath9k/regidx 
root@UserDevice:~# cat sys/kernel/debug/ieee80211/phy0/ath9k/regval 
0x00000003		// 2 antennas


ieee80211 phy0: Atheros AR9340 Rev:0 mem=0xb8100000, irq=47.

On pDDL2458, use ART tested all BW mode with ThroughPut Test:
b - Toggle Bandwidth values (Automatic | 8MHz | 4MHz | 2MHz | 1MHz | OFDM)
And all BW modes work (2412MHz). Tested 5190MHz and some high rates didn't work.

Jun 21, 2016
Remove most microhard flags in mac80211:
BUILDFLAGS:= \
        -I$(PKG_BUILD_DIR)/include \
        -DCONFIG_STEP_ONEMHZ \
        -DCONFIG_MH_ATH9K_LINKRATE_XXX \
        -DCONFIG_MHX_BEACON_XXX \
        -DCPTCFG_ATH_DEBUG \
        -DCONFIG_ATH9K_CCA_THRESH_XXX \
        -DMH_QOS_SUPPORT_XXX
Keep all iw/hostapd as pDDL mode unchanged. And build a pDDL f/w.
Set DUT to AP mode, measure all 2.4G and 5.8G band and both 2 antennas have not signal transmitted, even zoom in 2412MHz. But the red led blinks. "iw wlan0 scan" makes the DUT stuck, no scan results.

Remove flag : -DCONFIG_STEP_ONEMHZ_XXX \. Build. Then one DUT "iw wlan0 scan", this DUT can see both 2 and 5 GHz generic APs. But my cell phone can not see this AP's beacon. Both antennas can be seen transmitted signals at 2412MHz.[Note: DO NOT use full bandwidth(6GHz) span otherwise you can not see the signal. Set to specific frequency and use proper span bandwidth.]

Conclusion: 1. Problem resides in mac80211; 2. In CONFIG_STEP_ONEMHZ flag; 3. Most probably in ar9003_phy.c.

Jun 20, 2016
1. pDDL2458 in STA mode measured 2 antennas by spectrum analyzer full bandwidth 6GHz not transmission is seen. AP mode, can see the red led blinking but still no output the whole bandwidth on both antennas.

2. Use a pair of pDDL2458 H/W but use BulletAC f/w (PRODUCTMODE=2 must be set to 2 otherwise kernel crash). In 11b/g@20MHzBW mode My cell can connect to AP. Ping from AP to my cell is ok. This verifies pDDL2458 H/W  + generic mac802.11 driver works. 
On the STA side, iw wlan0 scan can scan the AP. On the monitor interface can see the AP beacons. But wpa_supplicant doesn't start up. Turn WPS=1 on both sides and they connected and iperf is ok.

Change to 11n/g mode the iperf reached 30Mbps@HT20@MCS7 SGI (72.2Mbps).

Jun 15, 2016
root@UserDevice:~# cat var/run/wpa_supplicant-wlan0.conf 
scan_cur_freq=2391
mhqos_enabled=1 
network={
        scan_ssid=1
        ssid="pDDL924-jeff-1"
        key_mgmt=WPA-PSK
        psk="1234567890"
        proto=RSN
}

In this case the probeRequest monitored on the AP(ssid=pDDL924-jeff-different) side is about 1Sec interval:
05:55:40.055532 2293483003us tsft 0.5 Mb/s 2391 MHz 11g/5Mhz -46dB signal [bit 29] BSSID:Broadcast DA:Broadcast SA:00:0f:92:fa:4f:d2 (oui Unknown) Probe Request (pDDL924-jeff-1) [1.0 2.0 5.5 11.0 6.0 9.0 12.0 18.0 Mbit]
05:55:40.056323 2293484179us tsft 0.5 Mb/s 2391 MHz 11g/5Mhz -56dB signal [bit 29] BSSID:Broadcast DA:Broadcast SA:00:0f:92:fa:4f:d2 (oui Unknown) Probe Request () [1.0 2.0 5.5 11.0 6.0 9.0 12.0 18.0 Mbit]
05:55:40.057920 6.0 Mb/s [bit 15] BSSID:00:0f:92:fa:4f:d3 (oui Unknown) DA:00:0f:92:fa:4f:d2 (oui Unknown) SA:00:0f:92:fa:4f:d3 (oui Unknown) Probe Response (pDDL924-jeff-different) [1.0 2.0 5.5 11.0 6.0* 9.0 12.0* 18.0 Mbit] CH: 1, PRIVACY
05:55:41.133265 2294560729us tsft 0.5 Mb/s 2391 MHz 11g/5Mhz -44dB signal [bit 29] BSSID:Broadcast DA:Broadcast SA:00:0f:92:fa:4f:d2 (oui Unknown) Probe Request (pDDL924-jeff-1) [1.0 2.0 5.5 11.0 6.0 9.0 12.0 18.0 Mbit]
05:55:41.134247 2294562084us tsft 0.5 Mb/s 2391 MHz 11g/5Mhz -56dB signal [bit 29] BSSID:Broadcast DA:Broadcast SA:00:0f:92:fa:4f:d2 (oui Unknown) Probe Request () [1.0 2.0 5.5 11.0 6.0 9.0 12.0 18.0 Mbit]
05:55:41.135836 6.0 Mb/s [bit 15] BSSID:00:0f:92:fa:4f:d3 (oui Unknown) DA:00:0f:92:fa:4f:d2 (oui Unknown) SA:00:0f:92:fa:4f:d3 (oui Unknown) Probe Response (pDDL924-jeff-different) [1.0 2.0 5.5 11.0 6.0* 9.0 12.0* 18.0 Mbit] CH: 1, PRIVACY
05:55:42.213284 2295641154us tsft 0.5 Mb/s 2391 MHz 11g/5Mhz -48dB signal [bit 29] BSSID:Broadcast DA:Broadcast SA:00:0f:92:fa:4f:d2 (oui Unknown) Probe Request (pDDL924-jeff-1) [1.0 2.0 5.5 11.0 6.0 9.0 12.0 18.0 Mbit]
05:55:42.213925 2295642180us tsft 0.5 Mb/s 2391 MHz 11g/5Mhz -58dB signal [bit 29] BSSID:Broadcast DA:Broadcast SA:00:0f:92:fa:4f:d2 (oui Unknown) Probe Request () [1.0 2.0 5.5 11.0 6.0 9.0 12.0 18.0 Mbit]
05:55:42.215508 6.0 Mb/s [bit 15] BSSID:00:0f:92:fa:4f:d3 (oui Unknown) DA:00:0f:92:fa:4f:d2 (oui Unknown) SA:00:0f:92:fa:4f:d3 (oui Unknown) Probe Response (pDDL924-jeff-different) [1.0 2.0 5.5 11.0 6.0* 9.0 12.0* 18.0 Mbit] CH: 1, PRIVACY
05:55:43.292931 2296720928us tsft 0.5 Mb/s 2391 MHz 11g/5Mhz -47dB signal [bit 29] BSSID:Broadcast DA:Broadcast SA:00:0f:92:fa:4f:d2 (oui Unknown) Probe Request (pDDL924-jeff-1) [1.0 2.0 5.5 11.0 6.0 9.0 12.0 18.0 Mbit]
05:55:43.293690 2296721953us tsft 0.5 Mb/s 2391 MHz 11g/5Mhz -55dB signal [bit 29] BSSID:Broadcast DA:Broadcast SA:00:0f:92:fa:4f:d2 (oui Unknown) Probe Request () [1.0 2.0 5.5 11.0 6.0 9.0 12.0 18.0 Mbit]
05:55:43.295265 6.0 Mb/s [bit 15] BSSID:00:0f:92:fa:4f:d3 (oui Unknown) DA:00:0f:92:fa:4f:d2 (oui Unknown) SA:00:0f:92:fa:4f:d3 (oui Unknown) Probe Response (pDDL924-jeff-different) [1.0 2.0 5.5 11.0 6.0* 9.0 12.0* 18.0 Mbit] CH: 1, PRIVACY

The timestamp reading is accurate.

Test how this 1-second interval contributes to the overheat:
1. Bring up this pair and connect. After connection is established, just idle for 10 min. Measure temperature
		RF6886		RFFC5071
AP		51.5		60
STA		51		61

STA setting:
        option max_probe_tries '0'
        option connection_idle_time '3600'
        option rxdiv '0'
        option encryptlvl '63'
        option com1rate '0'
        option noscan '1'
        option ht_capab 'SHORT-GI-40 TX-STBC RX-STBC1 DSSS_CCK-40'
        option distance '1000'
        option txpower '0'
        option chanbw '5'
        option rf_band '0'
        option channel_900 '12'
        option probe_wait_time '5000'

2. Change AP's SSID to a different one. This will trigger STA to scan and send ProbeRequest. On AP side, start a sniffer interface:

root@UserDevice:~# iw phy0 interface add wlan0.mon type monitor
root@UserDevice:~# ifconfig wlan0.mon up
root@UserDevice:~# tcpdump -i wlan0.mon -e -s 256 type mgt subtype probe-resp or subtype probe-req
[77997.240000] device wlan0.mon entered promiscuous mode
tcpdump: WARNING: wlan0.mon: no IPv4 address assigned
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on wlan0.mon, link-type IEEE802_11_RADIO (802.11 plus radiotap header), capture size 256 bytes
09:15:27.519120 77957768us tsft 0.5 Mb/s 2391 MHz 11g/5Mhz -51dB signal [bit 29] BSSID:Broadcast DA:Broadcast SA:00:0f:92:fa:4f:d2 (oui Unknown) Probe Request (pDDL924-jeff-1) [1.0 2.0 5.5 11.0 6.0 9.0 12.0 18.0 Mbit]
09:15:27.520057 77959094us tsft 0.5 Mb/s 2391 MHz 11g/5Mhz -62dB signal [bit 29] BSSID:Broadcast DA:Broadcast SA:00:0f:92:fa:4f:d2 (oui Unknown) Probe Request () [1.0 2.0 5.5 11.0 6.0 9.0 12.0 18.0 Mbit]
09:15:27.521653 6.0 Mb/s [bit 15] BSSID:00:0f:92:fa:4f:d3 (oui Unknown) DA:00:0f:92:fa:4f:d2 (oui Unknown) SA:00:0f:92:fa:4f:d3 (oui Unknown) Probe Response (pDDL924-jeff-different) [1.0 2.0 5.5 11.0 6.0* 9.0 12.0* 18.0 Mbit] CH: 1, PRIVACY
09:15:28.559143 78997788us tsft 0.5 Mb/s 2391 MHz 11g/5Mhz -52dB signal [bit 29] BSSID:Broadcast DA:Broadcast SA:00:0f:92:fa:4f:d2 (oui Unknown) Probe Request (pDDL924-jeff-1) [1.0 2.0 5.5 11.0 6.0 9.0 12.0 18.0 Mbit]
09:15:28.559749 78998784us tsft 0.5 Mb/s 2391 MHz 11g/5Mhz -62dB signal [bit 29] BSSID:Broadcast DA:Broadcast SA:00:0f:92:fa:4f:d2 (oui Unknown) Probe Request () [1.0 2.0 5.5 11.0 6.0 9.0 12.0 18.0 Mbit]
09:15:28.561339 6.0 Mb/s [bit 15] BSSID:00:0f:92:fa:4f:d3 (oui Unknown) DA:00:0f:92:fa:4f:d2 (oui Unknown) SA:00:0f:92:fa:4f:d3 (oui Unknown) Probe Response (pDDL924-jeff-different) [1.0 2.0 5.5 11.0 6.0* 9.0 12.0* 18.0 Mbit] CH: 1, PRIVACY
09:15:29.599112 80037758us tsft 0.5 Mb/s 2391 MHz 11g/5Mhz -51dB signal [bit 29] BSSID:Broadcast DA:Broadcast SA:00:0f:92:fa:4f:d2 (oui Unknown) Probe Request (pDDL924-jeff-1) [1.0 2.0 5.5 11.0 6.0 9.0 12.0 18.0 Mbit]
09:15:29.600670 80039704us tsft 0.5 Mb/s 2391 MHz 11g/5Mhz -62dB signal [bit 29] BSSID:Broadcast DA:Broadcast SA:00:0f:92:fa:4f:d2 (oui Unknown) Probe Request () [1.0 2.0 5.5 11.0 6.0 9.0 12.0 18.0 Mbit]
09:15:29.602343 6.0 Mb/s [bit 15] BSSID:00:0f:92:fa:4f:d3 (oui Unknown) DA:00:0f:92:fa:4f:d2 (oui Unknown) SA:00:0f:92:fa:4f:d3 (oui Unknown) Probe Response (pDDL924-jeff-different) [1.0 2.0 5.5 11.0 6.0* 9.0 12.0* 18.0 Mbit] CH: 1, PRIVACY
09:15:30.639106 81077758us tsft 0.5 Mb/s 2391 MHz 11g/5Mhz -52dB signal [bit 29] BSSID:Broadcast DA:Broadcast SA:00:0f:92:fa:4f:d2 (oui Unknown) Probe Request (pDDL924-jeff-1) [1.0 2.0 5.5 11.0 6.0 9.0 12.0 18.0 Mbit]
09:15:30.640518 81079632us tsft 0.5 Mb/s 2391 MHz 11g/5Mhz -62dB signal [bit 29] BSSID:Broadcast DA:Broadcast SA:00:0f:92:fa:4f:d2 (oui Unknown) Probe Request () [1.0 2.0 5.5 11.0 6.0 9.0 12.0 18.0 Mbit]
09:15:30.642189 6.0 Mb/s [bit 15] BSSID:00:0f:92:fa:4f:d3 (oui Unknown) DA:00:0f:92:fa:4f:d2 (oui Unknown) SA:00:0f:92:fa:4f:d3 (oui Unknown) Probe Response (pDDL924-jeff-different) [1.0 2.0 5.5 11.0 6.0* 9.0 12.0* 18.0 Mbit] CH: 1, PRIVACY
09:15:31.678352 82117005us tsft 0.5 Mb/s 2391 MHz 11g/5Mhz -52dB signal [bit 29] BSSID:Broadcast DA:Broadcast SA:00:0f:92:fa:4f:d2 (oui Unknown) Probe Request (pDDL924-jeff-1) [1.0 2.0 5.5 11.0 6.0 9.0 12.0 18.0 Mbit]
09:15:31.679054 82118090us tsft 0.5 Mb/s 2391 MHz 11g/5Mhz -62dB signal [bit 29] BSSID:Broadcast DA:Broadcast SA:00:0f:92:fa:4f:d2 (oui Unknown) Probe Request () [1.0 2.0 5.5 11.0 6.0 9.0 12.0 18.0 Mbit]
09:15:31.680642 6.0 Mb/s [bit 15] BSSID:00:0f:92:fa:4f:d3 (oui Unknown) DA:00:0f:92:fa:4f:d2 (oui Unknown) SA:00:0f:92:fa:4f:d3 (oui Unknown) Probe Response (pDDL924-jeff-different) [1.0 2.0 5.5 11.0 6.0* 9.0 12.0* 18.0 Mbit] CH: 1, PRIVACY

The STA is observerd to send ProbeRequest every 1 second. Wait for 5min and measure temperature:
		RF6886		RFFC5071
AP		54.2		60.3
STA		91.2		86.5

Change AP's channel to an adjacent channel:
wireless.radio0.channel_900=13	//STA is using 12. Tried 13, 11 got the same result. Only channel12 sees ProbeRequest.
And try to sniff this channel by AP. AP can not sniff any ProbeRequest on channel 13, which means STA is only scanning channel 12(scan_cur_freq=2391).

3. On the STA side, disable sending the ProbeRequest by:
root@UserDevice:~# wpa_cli ap_scan 0
Selected interface 'wlan0'
OK
On the AP side sniffer, the ProbeRequests disappeared Wait for 15min and then measure temperature:
		RF6886		RFFC5071
AP		49.3		59.7
STA		109.2		89.7

4. Restart the scan on STA side:
root@UserDevice:~# wpa_cli ap_scan 1
Selected interface 'wlan0'
OK
root@UserDevice:~# wpa_cli scan
Selected interface 'wlan0'
OK
The AP side sniffer can observe the ProbeRequest again. Wait for 5 min and then measure temperature:
		RF6886		RFFC5071
AP		48.8		60.4
STA		93.1		87.3

5. Again, nn the STA side, disable sending the ProbeRequest by:
root@UserDevice:~# wpa_cli ap_scan 0
Selected interface 'wlan0'
OK
On the AP side sniffer, the ProbeRequests disappeared Wait for 15min and then measure temperature:
		RF6886		RFFC5071
AP		49.4		60.8
STA		104.7		92.3

The result shows the high temp happens when no ProbeRequest is sent. So the overheat should not be caused by the ProbeRequest.


Jun 13, 2016
On a Nicole STA, 900MHz mode, telnet to it and add a monitor interface:
root@UserDevice:~# iw phy phy0 interface add wlan0.mon type monitor
root@UserDevice:~# tcpdump -i wlan0.mon -e -s 256 type mgt subtype probe-resp or subtype probe-req	//Monitor the probe-request

On the serial console run:
root@UserDevice:~# wpa_cli scan passive=1
Selected interface 'wlan0'
OK

And the Telnet monitor shows:
20:37:29.918580 1.0 Mb/s [bit 15] BSSID:Broadcast DA:Broadcast SA:00:0f:92:fa:4f:d2 (oui Unknown) Probe Request (pDDL924-jeff) [1.0 2.0 5.5 11.0 6.0 9.0 12.0 18.0 Mbit]
20:37:29.919285 1.0 Mb/s [bit 15] BSSID:Broadcast DA:Broadcast SA:00:0f:92:fa:4f:d2 (oui Unknown) Probe Request () [1.0 2.0 5.5 11.0 6.0 9.0 12.0 18.0 Mbit]
20:37:29.920817 3646368052us tsft 0.5 Mb/s 2391 MHz 11g/5Mhz -38dB signal [bit 29] BSSID:00:0f:92:fa:4f:d3 (oui Unknown) DA:00:0f:92:fa:4f:d2 (oui Unknown) SA:00:0f:92:fa:4f:d3 (oui Unknown) Probe Response (pDDL924-jeff) [1.0 2.0 5.5 11.0 6.0* 9.0 12.0* 18.0 Mbit] CH: 1, PRIVACY
20:37:29.922312 3646369161us tsft 0.5 Mb/s 2391 MHz 11g/5Mhz -39dB signal [bit 29] BSSID:00:0f:92:fa:4f:d3 (oui Unknown) DA:00:0f:92:fa:4f:d2 (oui Unknown) SA:00:0f:92:fa:4f:d3 (oui Unknown) Probe Response (pDDL924-jeff) [1.0 2.0 5.5 11.0 6.0* 9.0 12.0* 18.0 Mbit] CH: 1, PRIVACY


On the serial console run:
root@UserDevice:~# wpa_cli scan
Selected interface 'wlan0'
OK
And the Telnet monitor shows:

20:38:17.230300 1.0 Mb/s [bit 15] BSSID:Broadcast DA:Broadcast SA:00:0f:92:fa:4f:d2 (oui Unknown) Probe Request (pDDL924-jeff) [1.0 2.0 5.5 11.0 6.0 9.0 12.0 18.0 Mbit]
20:38:17.231015 1.0 Mb/s [bit 15] BSSID:Broadcast DA:Broadcast SA:00:0f:92:fa:4f:d2 (oui Unknown) Probe Request () [1.0 2.0 5.5 11.0 6.0 9.0 12.0 18.0 Mbit]
20:38:17.232528 3693679688us tsft 0.5 Mb/s 2391 MHz 11g/5Mhz -38dB signal [bit 29] BSSID:00:0f:92:fa:4f:d3 (oui Unknown) DA:00:0f:92:fa:4f:d2 (oui Unknown) SA:00:0f:92:fa:4f:d3 (oui Unknown) Probe Response (pDDL924-jeff) [1.0 2.0 5.5 11.0 6.0* 9.0 12.0* 18.0 Mbit] CH: 1, PRIVACY
20:38:17.234015 3693680768us tsft 0.5 Mb/s 2391 MHz 11g/5Mhz -37dB signal [bit 29] BSSID:00:0f:92:fa:4f:d3 (oui Unknown) DA:00:0f:92:fa:4f:d2 (oui Unknown) SA:00:0f:92:fa:4f:d3 (oui Unknown) Probe Response (pDDL924-jeff) [1.0 2.0 5.5 11.0 6.0* 9.0 12.0* 18.0 Mbit] CH: 1, PRIVACY

Looks like the "passive=1" doesn't work. The PROBE_REQUEST is sent anyways.

Change Nicole to 2.4GHz mode and do the same test and get the same result as 900MHz.

Confirmed with Frank DDL still uses active probe. Passive prove was tried but too tricky to make it work.

Jun 10, 2016
WPA Modes from OWT

Besides the WPA mode, the encryption option also specifies the group and peer ciphers to use. To override the cipher, the value of encryption must be given in the form mode+cipher. See the listing below for possible combinations. If the hwmode of the interface is set to ng or na, then the CCMP cipher is always added to the list.
Value 				WPA Version 				Ciphers
psk2+tkip+ccmp
psk2+tkip+aes 			WPA2 Personal (PSK) 			TKIP, CCMP

psk2+tkip 			WPA2 Personal (PSK) 			TKIP
psk2+ccmp
psk2+aes
psk2 				WPA2 Personal (PSK) 			CCMP

psk+tkip+ccmp
psk+tkip+aes 			WPA Personal (PSK) 			TKIP, CCMP

psk+tkip 			WPA Personal (PSK) 			TKIP
psk+ccmp
psk+aes
psk 				WPA Personal (PSK) 			CCMP
psk-mixed+tkip+ccmp
psk-mixed+tkip+aes		WPA/WPA2 Personal (PSK) mixed mode 	TKIP, CCMP
psk-mixed+tkip 			WPA/WPA2 Personal (PSK) mixed mode 	TKIP

psk-mixed+ccmp
psk-mixed+aes
psk-mixed 			WPA/WPA2 Personal (PSK) mixed mode 	CCMP

wpa2+tkip+ccmp
wpa2+tkip+aes 			WPA2 Enterprise 			TKIP, CCMP

wpa2+ccmp
wpa2+aes
wpa2 				WPA2 Enterprise 			CCMP

wpa2+tkip 			WPA2 Enterprise 			TKIP

wpa+tkip+ccmp
wpa+tkip+aes 			WPA Enterprise 				TKIP, CCMP

wpa+ccmp
wpa+aes 			WPA Enterprise 				CCMP

wpa+tkip
wpa 				WPA Enterprise 				TKIP

wpa-mixed+tkip+ccmp
wpa-mixed+tkip+aes 		WPA/WPA2 Enterprise mixed mode 		TKIP, CCMP

wpa-mixed+tkip 			WPA/WPA2 Enterprise mixed mode 		TKIP

wpa-mixed+ccmp
wpa-mixed+aes
wpa-mixed 			WPA/WPA2 Enterprise mixed mode 		CCMP 

While WPA2 is supposed to use AES for optimal security, it also has the option to use TKIP for backward compatibility with legacy devices. In such a state, devices that support WPA2 will connect with WPA2 and devices that support WPA will connect with WPA. So “WPA2” doesn’t always mean WPA2-AES. However, on devices without a visible “TKIP” or “AES” option, WPA2 is generally synonymous with WPA2-AES.

WPA-PSK (TKIP): This is basically the standard WPA, or WPA1, encryption. It’s been superseded and isn’t secure.
WPA-PSK (AES): This chooses the older WPA wireless protocol with the more modern AES encryption. Devices that support AES will almost always support WPA2, while devices that require WPA1 will almost never support AES encryption. This option makes very little sense.
WPA2-PSK (TKIP): This uses the modern WPA2 standard with older TKIP encryption. This isn’t secure, and is only a good idea if you have older devices that can’t connect to a WPA2-PSK (AES) network.
WPA2-PSK (AES): This is the most secure option. It uses WPA2, the latest Wi-Fi encryption standard, and the latest AES encryption protocol. You should be using this option. On devices with less confusing interfaces, the option marked “WPA2” or “WPA2-PSK” will probably just use AES, as that’s a common-sense choice.
WPAWPA2-PSK (TKIP/AES) (recommended): Our Comcast Xfinity router recommends this free-for-all option. This enables both WPA and WPA2 with both TKIP and AES. This provides maximum compatibility with any ancient devices you might have, but also ensures an attacker can breach your network by cracking the lowest-common-denominator encryption scheme. This TKIP+AES option may also be called WPA2-PSK “mixed” mode.

Jun 9,2016
WiFi config in AP mode test with pWII pX2:
WebUI Mode		option encryption		hostapd-phy0.conf
WPA(PSK)		psk				auth_algs=1 wpa=1 wpa_pairwise=CCMP		// Should be wpa_pairwise=TKIP but Microhard changed it to avoid TKIP.
WPA2(PSK)		psk2				auth_algs=1 wpa=2 wpa_pairwise=CCMP		// rsn_pairwise is defaulted to wpa_pairwise
WPA+WPA2(PSK)		psk-mixed/tkip+aes		auth_algs=1 wpa=3 wpa_pairwise=CCMP TKIP	// According to Lihong, this should be changed to wpa_pairwise=TKIP, rsn_pairwise=CCMP. Otherwise some WPA device cannot associate.

WPA Ent(RADIUS)		wpa				auth_algs=1 wpa=1 wpa_pairwise=CCMP.ieee8021x=1 wpa_key_mgmt=WPA-EAP
WPA2 Ent(RADIUS)	wpa2				auth_algs=1 wpa=2 wpa_pairwise=CCMP.ieee8021x=1 wpa_key_mgmt=WPA-EAP
WPA+WPA2 Ent(RADIUS)	wpa+wpa2			auth_algs=1 wpa=1 wpa_pairwise=CCMP.ieee8021x=1 wpa_key_mgmt=WPA-EAP	//Should be changed accordingly??? Why wpa=1 instead of 3???

May 30, 2016

Many kernel modules boot up load is controlled by package/kernel/linux/modules/ package. 
AUTOLOAD:=$(call AutoLoad,02,crypto_hash,1) : 02 is the load order that will generate  /etc/modules.d/02-crypto-hash; crypto_hash is the .ko filename lib/modules/3.10.36/crypto_hash.ko; 1 means early load :
root@UserDevice:~# ls etc/modules-boot.d/02-crypto-hash  -al
lrwxrwxrwx    1 root     root            27 Feb 25  2016 etc/modules-boot.d/02-crypto-hash -> ../modules.d/02-crypto-hash

May 20, 2016
Unpack dm365_flash_image_2_10_01_18.tar to /home/Jeff/nfs_dir and chmod 777 -R /home/Jeff/nfs_dir. This can work as a NFS directory with the kernel Linux-2.6.18_pro500-davinci_evm which is a MVL(MontaVistaLinux), and the command line :
# cat /proc/cmdline
console=ttyS0,115200n8 noinitrd ip=dhcp root=/dev/nfs rw nfsroot=192.168.168.100:/home/Jeff/nfs_dir,nolock mem=76M video=davincifb:vid0=OFF:vid1=OFF:osd0=720x576x16,4050K dm365_imp.oper_mode=0 davinci_capture.device_type=4
But the kernel doesn't match the .ko of the demos so that the ko can not be inserted.

Use the DVSDK 3_10, arago kernel, arago demo fs, and arago demo overlay that work!!! NFS tar with root previllege.

Because DM365 "Capable of 720p 30fps H.264 processing Note: 216-MHz is only capable of D1 processing" we need at least 1080. Anandoned.
 
May 19, 2016

Use Arago kernel images but failed booting up kernel:

Loading from NAND 1GiB 3,3V 8-bit, offset 0x400000
   Image Name:   Arago/2.6.31+2.6.32-rc1-r37+gitr
   Image Type:   ARM Linux Kernel Image (uncompressed)
   Data Size:    2135636 Bytes =  2 MB
   Load Address: 80008000
   Entry Point:  80008000
## Booting kernel from Legacy Image at 80700000 ...
   Image Name:   Arago/2.6.31+2.6.32-rc1-r37+gitr
   Image Type:   ARM Linux Kernel Image (uncompressed)
   Data Size:    2135636 Bytes =  2 MB
   Load Address: 80008000
   Entry Point:  80008000
   Verifying Checksum ... Bad Data CRC
ERROR: can't get kernel image!

Maybe need MVL kernel with this u-boot? Tried the prebuilt uImage in lsp_psp_2.10 which is MV Linux the same CRC error. According to https://e2e.ti.com/support/embedded/linux/f/354/t/43146, the tftpboot in the u-boot has bug to corrupt the downloaded files. Try the loady and send the uImage-dm365-LSP-PSP to DM365 and 

EVM # nand erase 0x400000 0x220000
EVM # nand write 0x80700000 0x400000 0x220000

And kernel boots up! DO NOT USE TFTPB of the u-boot in DM365!!!

NFS host setup:
[root@dlp ~]# yum -y install nfs-utils # install
[root@dlp ~]# vi /etc/exports 
# write like below *note
/home 10.0.0.0/24(rw,sync,no_root_squash,no_all_squash) 

# *note
/home ⇒ shared directory
10.0.0.0/24 ⇒ range of networks NFS permits accesses
rw ⇒ possible to read and write
sync ⇒ synchronize
no_root_squash ⇒ enable root privilege
no_all_squash ⇒ enable users' authority 

[root@dlp ~]# /etc/rc.d/init.d/rpcbind start 
Starting rpcbind: [  OK  ]
[root@dlp ~]# /etc/rc.d/init.d/nfslock start 
Starting NFS statd: [  OK  ]
[root@dlp ~]# /etc/rc.d/init.d/nfs start 
Starting NFS services: [  OK  ]
Starting NFS daemon: [  OK  ]
Starting NFS mountd: [  OK  ]
[root@dlp ~]# chkconfig rpcbind on 
[root@dlp ~]# chkconfig nfslock on 
[root@dlp ~]# chkconfig nfs on 

host $ /usr/sbin/exportfs -av //Use exportfs -rav to re-export all directories.
host $ /sbin/service nfs restart
host $ /sbin/service nfs status


May 18, 2016
MVL, LSP, PSP and DVSDK
mvl的kernel和arogo这种完全community的kernel不兼容,TI以后只会有新的chip在arago这种完全community的kernel的支持.mvl的支持不会再有了-----Looks like MVL means MontaVistaLinux.
DaVinci LSP 1.x and DaVinci LSP2.x are all based on the MVL kernels

Linux Platform Support Package (PSP) provides support for Linux kernel, U-Boot, UBL and utilities to flash boot software on the EVM.----Looks like no FS and demo applications. PSP needs Code Sourcery tools. But looks like it contains FS "DaVinci PSP 03.xx release uses Arago filesystem. The latest filesystem images can be downloaded from DaVinci GIT Linux Kernel Releases. (http://processors.wiki.ti.com/index.php?title=DaVinci_%28ARM9%29_PSP_Releases&redirect=no) ". See http://arago-project.org/files/.

Building and running all of the PSP components requires both a Windows and a Linux machine:
The Windows machine is required for running CCStudio 5.0. CCStudio is required for building the User Boot Loader (UBL) and Flash writers. CCStudio is also used to burn the boot images (UBL, U-Boot) into the flash using the flash writers provided in the PSP package.
Linux host is required:
    for compiling UBL, Serial flash writers, U-Boot and Linux kernel.
    to host the TFTP server required for downloading kernel and file system images from U-Boot using Ethernet.
    to host the NFS server to boot the EVM with NFS as root filesystem


DM365 EVM :>res
Jumping to entry point at 0x81080000.

 LSP 2.10 BETA RELEASE 
 VERSION: 2.10.008.02 

U-Boot 1.3.4 (Mar  2 2009 - 11:50:39)

I2C:   ready
DRAM:  128 MB
NAND:  NAND device: Manufacturer ID: 0x2c, Chip ID: 0xd3 (Micron NAND 1GiB 3,3V 8-bit)
Bad block table found at page 524224, version 0x01
Bad block table found at page 524160, version 0x01
NAND device: Manufacturer ID: 0x2c, Chip ID: 0xd3 (Micron NAND 1GiB 3,3V 8-bit)
Bad block table found at page 524224, version 0x01
Bad block table found at page 524160, version 0x01
2048 MiB
In:    serial
Out:   serial
Err:   serial
Ethernet PHY: GENERIC @ 0x00
Hit any key to stop autoboot:  0 

Loading from NAND 1GiB 3,3V 8-bit, offset 0x400000
   Image Name:   Linux-2.6.18_pro500-davinci_evm-
   Image Type:   ARM Linux Kernel Image (uncompressed)
   Data Size:    2026248 Bytes =  1.9 MB
   Load Address: 80008000
   Entry Point:  80008000
## Booting kernel from Legacy Image at 80700000 ...
   Image Name:   Linux-2.6.18_pro500-davinci_evm-
   Image Type:   ARM Linux Kernel Image (uncompressed)
   Data Size:    2026248 Bytes =  1.9 MB
   Load Address: 80008000
   Entry Point:  80008000
   Verifying Checksum ... OK
   Loading Kernel Image ... OK
OK

Starting kernel ...

Uncompressing Linux....................................................................................................................................... done, booting the kernel.
Linux version 2.6.18_pro500-davinci_evm-arm_v5t_le (a0850430@gtlnxlsf02.gt.design.ti.com) (gcc version 4.2.0 20070126 (prerelease) (MontaVista 4.2.0-3.0.0.0702771 2007-03-10)) #1 PREEMPT Mo
n Mar 2 12:24:32 EST 2009
CPU: ARM926EJ-S [41069265] revision 5 (ARMv5TEJ), cr=00053177
Machine: DaVinci DM365 EVM
Memory policy: ECC disabled, Data cache writeback
DaVinci DM0365 variant 0x0
PLL0: fixedrate: 24000000, commonrate: 121500000, vpssrate: 243000000
PLL0: vencrate: 27000000, ddrrate: 243000000, mmcsdrate: 121500000
PLL1: armrate: 297000000, voicerate: 99000000, vencrate: 74250000
MUX: initialized SPI0_SCLK
MUX: initialized SPI0_SDO)
MUX: initialized SPI0_SDI
MUX: initialized SPI0_SDENA0
CPU0: D VIVT write-back cache
CPU0: I cache: 16384 bytes, associativity 4, 32 byte lines, 128 sets
CPU0: D cache: 8192 bytes, associativity 4, 32 byte lines, 64 sets
Built 1 zonelists.  Total pages: 29696
Kernel command line: mem=116M console=ttyS0,115200n8 root=/dev/mtdblock3 rw rootfstype=yaffs2 ip=off davinci_capture.device_type=4 dm365_imp.oper_mode=0
PID hash table entries: 512 (order: 9, 2048 bytes)
Clock event device timer0_0 configured with caps set: 03
Console: colour dummy device 80x30
Dentry cache hash table entries: 16384 (order: 4, 65536 bytes)
Inode-cache hash table entries: 8192 (order: 3, 32768 bytes)
Memory: 116MB = 116MB total
Memory: 113152KB available (3497K code, 712K data, 168K init)
Security Framework v1.0.0 initialized
Capability LSM initialized
Mount-cache hash table entries: 512
CPU: Testing write buffer coherency: ok
NET: Registered protocol family 16
DaVinci: 104 gpio irqs
DM365 IPIPE initialized in Continuous mode
Generic PHY: Registered new driver
ch0 default output "COMPOSITE", mode "NTSC"
VPBE Encoder Initialized
LogicPD encoder initialized
Avnetlcd encoder initialized
SCSI subsystem initialized
usbcore: registered new driver usbfs
usbcore: registered new driver hub
NET: Registered protocol family 2
IP route cache hash table entries: 1024 (order: 0, 4096 bytes)
TCP established hash table entries: 4096 (order: 2, 16384 bytes)
TCP bind hash table entries: 2048 (order: 1, 8192 bytes)
TCP: Hash tables configured (established 4096 bind 2048)
TCP reno registered
VFS: Disk quotas dquot_6.5.1
Dquot-cache hash table entries: 1024 (order 0, 4096 bytes)
squashfs: version 3.1 (2006/08/19) Phillip Lougher
JFFS2 version 2.2. (NAND) (C) 2001-2006 Red Hat, Inc.
yaffs Mar  2 2009 12:21:46 Installing. 
SGI XFS with no debug enabled
Initializing Cryptographic API
io scheduler noop registered
io scheduler anticipatory registered (default)
davincifb davincifb.0: check_fb_var: calling convert_fb_var_to_osd, var->bits_per_pixel: 16
davincifb davincifb.0: convert_fb_var_to_osd: bits per pixel: 16
davincifb davincifb.0: davincifb_set_par: calling convert_fb_info_to_osd bpp: 16
davincifb davincifb.0: convert_fb_info_to_osd: var->bits_per_pixel: 16
davincifb davincifb.0: convert_fb_var_to_osd: bits per pixel: 16
davincifb davincifb.0: dm_osd0_fb: 720x480x16@0,0 with framebuffer size 675KB
davincifb davincifb.0: dm_vid0_fb: 0x0x16@0,0 with framebuffer size 1020KB
davincifb davincifb.0: check_fb_var: calling convert_fb_var_to_osd, var->bits_per_pixel: 4
davincifb davincifb.0: convert_fb_var_to_osd: bits per pixel: 4
davincifb davincifb.0: davincifb_set_par: calling convert_fb_info_to_osd bpp: 4
davincifb davincifb.0: convert_fb_info_to_osd: var->bits_per_pixel: 4
davincifb davincifb.0: convert_fb_var_to_osd: bits per pixel: 4
davincifb davincifb.0: dm_osd1_fb: 720x480x4@0,0 with framebuffer size 675KB
davincifb davincifb.0: dm_vid1_fb: 0x0x16@0,0 with framebuffer size 1020KB
DAVINCI-WDT: DaVinci Watchdog Timer: heartbeat 60 sec
davinci_ldc initialized
imp serializer initialized
davinci_previewer initialized
davinci_resizer initialized
Serial: 8250/16550 driver $Revision: 1.90 $ 2 ports, IRQ sharing disabled
serial8250.0: ttyS0 at MMIO map 0x1c20000 mem 0xfac20000 (irq = 40) is a 16550A
serial8250.0: ttyS1 at MMIO map 0x1d06000 mem 0xfad06000 (irq = 41) is a 16550A
RAMDISK driver initialized: 1 RAM disks of 32768K size 1024 blocksize
netconsole: not configured, aborting
Davinci EMAC MII Bus: probed
MAC address is 00:0e:99:02:c9:70
TI DaVinci EMAC Linux version updated 4.0
Linux video capture interface: v2.00
starting ccdc_reset...<7>
End of ccdc_reset...<5>vpfe ccdc capture vpfe ccdc capture.1: vpif_register_decoder: decoder = MT9T001
vpfe ccdc capture vpfe ccdc capture.1: vpif_register_decoder: decoder = MT9P031
TVP514X : nummber of channels = 1
vpfe ccdc capture vpfe ccdc capture.1: vpif_register_decoder: decoder = TVP514X
Trying to register davinci display video device.
layer=c72e9400,layer->video_dev=c72e9560
Trying to register davinci display video device.
layer=c72e9200,layer->video_dev=c72e9360
davinci_init:DaVinci V4L2 Display Driver V1.0 loaded
vpfe ccdc capture vpfe ccdc capture.1: vpif_register_decoder: decoder = TVP7002
i2c /dev entries driver
nand_davinci nand_davinci.0: Using 4-bit hardware ECC
NAND device: Manufacturer ID: 0x2c, Chip ID: 0xd3 (Micron NAND 1GiB 3,3V 8-bit)
2 NAND chips detected
Creating 5 MTD partitions on "nand_davinci.0":
0x00000000-0x00360000 : "bootloader"

0x00360000-0x003a0000 : "params"
0x003a0000-0x007a0000 : "kernel"			// acacually located at 0x40_0000 offset by reading NAND flash,size 2MB
0x007a0000-0x207a0000 : "filesystem1"
0x207a0000-0x307a0000 : "filesystem2"
nand_davinci nand_davinci.0: hardware revision: 2.3
dm_spi.0: davinci SPI Controller driver at 0xc7866000 (irq = 42) use_dma=0
Initializing USB Mass Storage driver...
usbcore: registered new driver usb-storage
USB Mass Storage support registered.
usbcore: registered new driver usbhid
drivers/usb/input/hid-core.c: v2.6:USB HID core driver
musb_hdrc: version 6.0, cppi-dma, host, debug=0
MUX: initialized GPIO33
musb_hdrc musb_hdrc: No DMA interrupt line
musb_hdrc: USB Host mode controller at c7868000 using DMA, IRQ 12
musb_hdrc musb_hdrc: MUSB HDRC host driver
musb_hdrc musb_hdrc: new USB bus registered, assigned bus number 1
usb usb1: configuration #1 chosen from 1 choice
hub 1-0:1.0: USB hub found
hub 1-0:1.0: 1 port detected
mice: PS/2 mouse device common for all mice
davinci-mmc davinci-mmc.0: Supporting 4-bit mode
davinci-mmc davinci-mmc.0: Using DMA mode
davinci-mmc davinci-mmc.1: Supporting 4-bit mode
davinci-mmc davinci-mmc.1: Using DMA mode
Advanced Linux Sound Architecture Driver Version 1.0.12rc1 (Thu Jun 22 13:55:50 2006 UTC).
ASoC version 0.13.1
AIC3X Audio Codec 0.1
asoc: aic3x <-> davinci-i2s mapping ok
ALSA device list:
  #0: DaVinci DM365 EVM (aic3x)
IPv4 over IPv4 tunneling driver
TCP bic registered
NET: Registered protocol family 1
NET: Registered protocol family 17
drivers/rtc/hctosys.c: unable to open rtc device (rtc0)
Time: timer0_1 clocksource has been installed.
Clock event device timer0_0 configured with caps set: 08
Switched to high resolution mode on CPU 0
yaffs: dev is 32505859 name is "mtdblock3"
yaffs: Attempting MTD mount on 31.3, "mtdblock3"
block 2 is bad
block 3 is bad
block 108 is bad
block 112 is bad
block 157 is bad
block 204 is bad
block 227 is bad
block 314 is bad
block 341 is bad
block 408 is bad
block 417 is bad
block 448 is bad
block 519 is bad
block 563 is bad
block 622 is bad
block 669 is bad
block 692 is bad
block 725 is bad
block 775 is bad
block 797 is bad
block 798 is bad
block 823 is bad
block 824 is bad
block 828 is bad
block 871 is bad
block 875 is bad
block 876 is bad
block 877 is bad
block 878 is bad
block 879 is bad
block 932 is bad
block 966 is bad
block 1025 is bad
block 1123 is bad
block 1124 is bad
block 1125 is bad
block 1126 is bad
block 1127 is bad
block 1128 is bad
block 1129 is bad
block 1130 is bad
block 1131 is bad
block 1197 is bad
block 1234 is bad
block 1269 is bad
block 1381 is bad
block 1452 is bad
block 1479 is bad
block 1578 is bad
block 1585 is bad
block 1586 is bad
block 1587 is bad
block 1588 is bad
block 1589 is bad
block 1638 is bad
block 1640 is bad
block 1641 is bad
block 1642 is bad
block 1646 is bad
block 1651 is bad
block 1655 is bad
block 1660 is bad
block 1662 is bad
block 1691 is bad
block 1692 is bad
block 1693 is bad
block 1694 is bad
block 1698 is bad
block 1723 is bad
block 1764 is bad
block 1824 is bad
block 1863 is bad
block 1907 is bad
block 1937 is bad
block 1938 is bad
block 1943 is bad
block 1969 is bad
block 1970 is bad
block 2894 is bad
block 3007 is bad
block 3239 is bad
VFS: Mounted root (yaffs2 filesystem).
Freeing init memory: 168K
Warning: unable to open an initial console.
Kernel panic - not syncing: No init found.  Try passing init= option to kernel.

Kernel default SDRAM location - 0x80700000
Setting the bootcmd environment variable
   DVEVM# setenv bootcmd 'nboot 80700000 0 2060000; bootm'
The nboot command will copy the kernel image at 0x2060000 on device 0 to address 0x80700000 in DDR. The bootm command will then boot the image located in memory at address 0x80700000.

Tried arago-demo-image-dm365-evm.ext2.gz, arago-base-image-arago.ext2.gz and its extaction arago-base-image-glibc-ipk-2009.11-arago.rootfs.ext2, all failed. Seems the kernel issue.

May 17, 2016
G2 console cable:
Black : Pin5
White : Pin3
Red : Pin2

TMS320DM365 Eval board. 
With the DM365 EVM boards when you connect the EVM hardware, a pre-loaded example runs automatically on your video display. This example captures 720p component video and displays it as-is (i.e. without processing) to the connected HD display. The example runs automatically with no connection to a workstation in the default boot configuration. The DM365 EVM does not run the DVSDK demo out of flash out of the box. 

The Linux™ Digital Video Software Development Kits (DVSDKs) enable DaVinci™ system integrators to quickly develop Linux-based multimedia applications that can be easily ported across different devices in the DaVinci platform. Each DVSDK combines a pre-tested set of operating system, application framework, and codec libraries with example programs that demonstrate decode and encode of audio and video data streamed in real-time to and from peripheral devices. For DaVinci devices that feature DSP cores, the DVSDKs provide a complete framework for developers to easily leverage DSP-accelerated codecs without having to program the DSP. DVSDKs are free and do not require any run-time royalties. 
The latest one http://software-dl.ti.com/dsps/dsps_public_sw/sdo_sb/targetcontent/dvsdk/DVSDK_4_00/latest/index_FDS.html supports DM365.

Local installed demo is only for local encode/decode.

Streaming video/audio : https://gforge.ti.com/gf/project/gstreamer_ti/ and http://processors.wiki.ti.com/index.php/Example_GStreamer_Pipelines

There are several approaches that have been used to develop GStreamer plug-ins that utilize the DSP and accelerator modules in TI hardware.1. gst-dmai - Davinci Multimedia Application Interface based plug-in for most of the TI davinci and OMAP chips; 2.gst-openmax - Plug-in that uses the OpenMAX IL component. OpenMAX IL is an industry standard that provides an abstraction layer for computer graphics, video, and sound routines. Only OMAP3 is supported; 3. gst-dsp - dsp-bridge based plug-in. Only OMAP3 is supported.

The origional b-boot env:

DM365 EVM :>
Jumping to entry point at 0x81080000.

 LSP 2.10 BETA RELEASE 
 VERSION: 2.10.008.02 

U-Boot 1.3.4 (Mar  2 2009 - 11:50:39)

I2C:   ready
DRAM:  128 MB
NAND:  NAND device: Manufacturer ID: 0x2c, Chip ID: 0xd3 (Micron NAND 1GiB 3,3V 8-bit)
Bad block table found at page 524224, version 0x01
Bad block table found at page 524160, version 0x01
NAND device: Manufacturer ID: 0x2c, Chip ID: 0xd3 (Micron NAND 1GiB 3,3V 8-bit)
Bad block table found at page 524224, version 0x01
Bad block table found at page 524160, version 0x01
2048 MiB
In:    serial
Out:   serial
Err:   serial
Ethernet PHY: GENERIC @ 0x00
Hit any key to stop autoboot:  0 
DM365 EVM :>print
bootdelay=4
baudrate=115200
bootfile="uImage"
ethaddr=00:0e:99:02:c9:70
bootcmd=nboot 0x80700000 0 0x400000;bootm
ori-bootargs=mem=116M console=ttyS0,115200n8 root=/dev/mtdblock3 rw rootfstype=yaffs2 ip=off davinci_capture.device_type=4 dm365_imp.oper_mode=0
rootpath=/home/eng/workdir/filesys
ipaddr=192.168.1.244
bootargs=console=ttyS0,115200n8 noinitrd rw ip=dhcp root=/dev/nfs nfsroot=192.168.1.209:/home/eng/workdir/filesys,nolock mem=76M video=davincifb:vid0=OFF:vid1=OFF:osd0=720x576x16,4050K dm365_imp.oper_mode=0 davinci_capture.device_type=4
serverip=192.168.1.103
nfshost=192.168.1.210
stdin=serial
stdout=serial
stderr=serial
ver=U-Boot 1.3.4 (Mar  2 2009 - 11:50:39)

Local NAND flash FS:
setenv bootargs 'console=ttyS0,115200n8 ip=off root=/dev/mtdblock3 rw rootfstype=yaffs2 mem=76M  video=davincifb:vid0=OFF:vid1=OFF:osd0=720x576x16,4050K dm365_imp.oper_mode=0 davinci_capture.device_type=4'


May 13, 2016
In netifd/wireless.mac80211.sh, json_get_vars channel_900 always return null. Reboot the unit and then get the config option successfully. JSON constructs the param string only at each start up?
If a config option name is newly added or changed, reboot the unit.

while true; do
cat sys/kernel/debug/gpio | grep PA;
iw wlan0 info | grep channel;
cat sys/module/rffc5071/parameters/lo_frequency;
sleep 1;
echo -------------------
done

May 11, 2016
Channel mapping. In pDDL
#iw phy0 info
The channel is [0,98], [2390,2488]. Total channel 99 and available channels [1,98] 98 channels.

May 9, 2016
How to build AR71xx u-boot:
[Jeff@DENG0080-2 ar71xx-uboot]$ cat CVS/Repository 
network/ar71xx/u-boot
[Jeff@DENG0080-2 ar71xx-uboot]$ PATH=/home/Jeff/project/ar71xx_4g/staging_dir/toolchain-mips_r2_gcc-4.1.2_uClibc-0.9.30.1/usr/bin/:$PATH
[Jeff@DENG0080-2 ar71xx-uboot]$ echo $PATH
/home/Jeff/project-2/work/vip2/staging_dir/toolchain-mips_r2_gcc-4.1.2_uClibc-0.9.30.1/usr/bin/:/usr/lib/qt-3.3/bin:/usr/kerberos/sbin:/usr/kerberos/bin:/usr/lib/ccache:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/Jeff/bin:/home/Jeff/opt/slickedit/bin
[Jeff@DENG0080-2 ar71xx-uboot]$ make VIP2_config
make: mips-linux-gcc: Command not found
Configuring for VIP2 board...
[Jeff@DENG0080-2 ar71xx-uboot]$ make CROSS_COMPILE=mips-openwrt-linux- V=99

If using gcc4.8 or higher like in PWii:
[Jeff@DENG0080-2 ar71xx-uboot-2]$ vi mips_config.mk
PLATFORM_CPPFLAGS += -DCONFIG_MIPS -D__MIPS__ -fpic	//add -fpic flag

May 6, 2016
In var/run/hostapd-phy0.conf, when the channel=0, it is set to "acs_survey". 
In /ap/acs.c, ACS is defined as Automatic Channel Selection. This means channel0 is not used as a regular channel. See https://wireless.wiki.kernel.org/en/users/Documentation/acs.

May 2, 2016
In graph_spectrum.svg. In function init(evt) {}, 
alert(window.parent.document.getElementById('content')); This gets the Div element correctly. The Div element is in the parent level graph_spectrum.sh : <div id="content">, where the SVG is inserted as object.
But 
alert(window.parent.document.getElementById('waitbox')); 
always gets NULL.

I guess even though the 'waitbox' could be obtained correctly, the showLightbox_mhs(window.parent.document.getElementById('waitbox')) still will not work. Because the source code in waitbox.js of showLightbox_mhs() is like this:

    var objOverlay = document.getElementById('overlay'); 
    var objLightbox = document.getElementById('lightbox'); 

This will not get the parent Document's elements.

So the existing mechanism doesn't work.

April 28, 2016
Add Nicole baseline:
[Jeff@DENG0080-2 pddl-2]$ vi package/kernel/mac80211/Makefile.mac80211_ddl2
define KernelPackage/cfg80211/install
        $(INSTALL_DIR) $(1)/lib/wifi $(1)/lib/netifd/wireless
        $(INSTALL_DATA) ./files/lib/wifi/mac80211.sh.ddl2 $(1)/lib/wifi
        $(CP) $(1)/lib/wifi/mac80211.sh.ddl2 $(1)/lib/wifi/mac80211.sh
        rm -f $(1)/lib/wifi/mac80211.sh.ddl2
        $(INSTALL_BIN) ./files/lib/netifd/wireless/mac80211.sh.ddl2 $(1)/lib/netifd/wireless
        $(CP) $(1)/lib/netifd/wireless/mac80211.sh.ddl2 $(1)/lib/netifd/wireless/mac80211.sh
        rm -f $(1)/lib/netifd/wireless/mac80211.sh.ddl2
        $(INSTALL_DIR) $(1)/usr/local
        $(INSTALL_BIN) ./files/debug/debugfs_show.sh $(1)/usr/local
        $(INSTALL_BIN) ./files/debug/debugfs_ath_show.sh $(1)/usr/local
        $(INSTALL_DIR) $(1)/etc/hotplug.d/net
        $(INSTALL_BIN) ./files/etc/hotplug.d/net/20-client_bridge $(1)/etc/hotplug.d/net/20-client_bridge
ifdef NICOLE
        touch $(1)/usr/local/IAMpNICOLE.mark
endif
endef
[Jeff@DENG0080-2 pddl-2]$ make -f Makefile.ddl2 DDL2=1 NICOLE=1 V=99
[Jeff@DENG0080-2 pddl-2]$ ls build_dir/target-mips_34kc_uClibc-0.9.33.2/root-ar71xx/usr/local/IAMpNICOLE.mark -al
-rw-r--r-- 1 Jeff Jeff 0 Apr 28 10:59 build_dir/target-mips_34kc_uClibc-0.9.33.2/root-ar71xx/usr/local/IAMpNICOLE.mark

The top level NICOLE=1 can pass to the packeg level Makefile by the top make command line.



April 22, 2016
Scan specific frequencies in pDDL:
iw wlan0 scan freq 2390 2395 2400 2405 2410 2415 2420 2425 2430 2435 2440 2445 2450 2455 2460 2465 2470 2475 2480 2485

In Ethernet like shared media, supplicant sends EAPOL to 01:80:c2:00:00:03 multicast address. In 802.11 this address doesn't exist. Only after association the  supplicant and authenticator exchanges the MAC addresses, EAPOL can start. In 802.11 EAPOL usually uses STA's addresses. 802.1X中的“连接端口”，相当于无线设备于接入点之间的association，当链路层起作用时，associate request and associaiton response帧交换成功的信息会通知802.1X state engine (state machine?).一旦关联成功，工作站就可开始进行802.1X帧交换过程，常识取得授权。802.1X认证交换与密钥分配完成后，用户就会受到接口已经启用的信息。

Karen board:
The JenniePCIe private changes is in /home/Jeff/project/tmp/ar9344_3_10/target/linux/ar71xx/files/arch/mips/ath79/mach-vip2-ac.c. With PCIe and NAND.Done in June 2015.

April 21, 2016
	<object type="image/svg+xml" data="/cgi-bin/webif/graph_spectrum_svg.sh"
		width="700" height="600">
		<param name="src" value="/cgi-bin/webif/graph_spectrum_svg.sh" />
	</object>
HTML <object> 元素（或者称作 HTML 嵌入对象元素）表示引入一个外部资源，这个资源可能是一张图片，一个嵌入的浏览上下文，亦或是一个插件所使用的资源。允许的父级元素 Any element that accepts embedded content.
Embedded content imports another resource or inserts content from another mark-up language or namespace into the document. Elements that belong to this category include: <audio>, <canvas>, <embed>, <iframe>, <img>, <math>, <object>, <svg>, <video>.

SVGDoc = evt.target.ownerDocument; // This is a SVGDocument.
SVGParent = evt.target;		   // This is a SVGSVGElement. This is equal to SVGDoc.rootElement.

In SVG:
                alert(document);	// Shows [object SVGDocument]
                alert(parent.document); // This shows [object HTMLDocument], which is the parent HTML document of SVGDocument.

Why it takes too wide while using a single tone signal generator? The BW is fixed on 20MHz but the H/W runs in 10,5,2 and 1MHz. So the frequency resolution should increase. And the shape will shink accordingly.
float freq = fft_data->freq - bw_mhz/2 + ((bw_mhz * i) / SPECTRAL_HT20_NUM_BINS);

April 19, 2016
    <circle id='cursor' cx='0' cy='-10' r='3' fill='#ff0000' fill-opacity='0.5'/>
    <text id='cursor_lbl' x='10' y='20' fill='#ff10ff' text-anchor='start'>MHz</text>

	<path id='graph_spectrum'  d='' fill='none' stroke='#ffff00' stroke-width='1' stroke-opacity='0.8' />

This way the <path> will be on top of the cursor. So the cursor itselt is hard to be seen, underlayer of the path draw. The later, ther upper the rendering layer.

ABout the SVG NameSpace
我自己有一次要嘗試直接用 innerHTML 或 append 的方式，要在 SVG 內動態新增<path>或<rect>等元素，結果發現雖然最後的結果有產生程式碼，但在瀏覽器上就是不會顯示，一開始花了很多時間以為是自己程式寫錯，後來才知道，因為瀏覽器對於 innerHTML 或 append 等方式解析出來的都是在 HTML 的命名空間，並不是 SVG 的命名空間，換句話說，SVG 是一個 xmlns 而並非 HTML 元素，因此瀏覽器無法解析<rect>或<path>在 SVG 的命名空間，也因此使用 innerHTML 或 jQuery 所提供的 append、HTML 方式都是會失敗的。

This piece of code works in function plot_spectrum_data(obj) {}
/////////////////////////////////////////////////////////////////////////////////////////////////
// var bBox=(document.getDocumentElement().getBBox());
// alert('bBox='+bBox);
var shape = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
//alert('shape='+shape);

shape.setAttribute('cx', x);
shape.setAttribute('cy', y_rssi);
shape.setAttribute('r', 3);
shape.setAttribute('style', 'fill:#ffffee');
SVGDoc.getElementById('graph').appendChild(shape);	// 'graph' is the name of <g id="graph" /g>. These circles will be put into that group.
/////////////////////////////////////////////////////////////////////////////////////////////////

April 18, 2016
JavaScript: String to Number functions should be used to convert string to number. Sometimes it works implicitly:

        x = (parseFloat(data[i]) -2380 )* 5;		// this one works even without conversion
        y = parseFloat(data[i+1]) + 10;			// this one must use conversion function.
        if( y < -100.00) y =-100.00;
		y_rssi = Math.abs( y* scale);

April 14
athscan -s -c 4  > /dev/null. The time from click icon to plotting done:
-c 2: 11Sec
-c 4: 21Sec
-c 8: 40Sec

Compare with a real spectrum analyzer. When use a single tone (sino wafeform) the analyzer has a very wide spectrum which is wrong. A real equipment shows a single tone only. 

April 11, 2016
SVG plotting. Can get the array but not the 2D array. data=obj.content.split("\n"); may help parsing the 2D array.
pDDL frequency : 2390..2489 =99MHz
Frequency Resolution : 22M/56Subcarrier = 357.1K
Total Spectrum number: 99M / 357.1K = 227.2 Lines
Power range = [-20, -120], 100dB
Plotting freq range = [2380, 2500], 120MHz

April 8, 2016
Check the unsorted data athscan_plot against the QT print out plot dots, line by line, random line numbers.

Data is correct, but precision of some dots dont match because of floating point C library:

athscan.c generated dots	QT dots				Error rate
2430.857178,-106.920311		2430.857178,-106.920319		−0.000008693
2478.214355,-111.532127		2478.214355,-111.532120		0.000013155
2380.000000,-115.140579		2380.000000,-115.140587		−0.000056908

All the others : orders, sample counts are correct and matching.



April 7, 2016
Quick sort O(nLogn)of ath scan plot dots. Much much faster thatn bubble sort(O(n2)).

April 6, 2016
struct fft_sample_tlv {
    unsigned char type;
    unsigned short int length;
}__attribute__ ((packed));

packed: avoid the GCC optimization. With GCC optimization, the size of this struct is 4 instead of expected 3.
No concern on endian because the data format is the same as the target CPU.

It takes about 

Apr 1, 2016

struct fft_sample_tlv {
        u8 type;        /* see ath_fft_sample */
        __be16 length;
        /* type dependent data follows */
} __packed;

struct fft_sample_ht20 {
// this is the format of debugfs file, 76bytes total (0x4c). The elements are parsed from the H/W returned data format defined by https://wireless.wiki.kernel.org/en/users/drivers/ath9k/spectral_scan frame format.
        struct fft_sample_tlv tlv;

        u8 max_exp;

        __be16 freq;
        s8 rssi;
        s8 noise;

        __be16 max_magnitude;
        u8 max_index;
        u8 bitmap_weight;

        __be64 tsf;

        u8 data[SPECTRAL_HT20_NUM_BINS];	// 56 bins for HT20, 128 for HT40
} __packed;

/* The HT20 spectral data has 4 bytes of additional information at it's end.
 *
 * [7:0]: all bins {max_magnitude[1:0], bitmap_weight[5:0]}
 * [7:0]: all bins  max_magnitude[9:2]
 * [7:0]: all bins {max_index[5:0], max_magnitude[11:10]}
 * [3:0]: max_exp (shift amount to size max bin to 8-bit unsigned)
 */
struct ath_ht20_mag_info {
        u8 all_bins[3];
        u8 max_exp;
} __packed;


root@UserDevice:~# cat sys/kernel/debug/ieee80211/phy0/ath9k/recv 
          PKTS-ALL :     636688
         BYTES-ALL :  119156210
           BEACONS :     599210
             FRAGS :        143
          SPECTRAL :      12176		// ATH9K_RXERR_PHY and ath_process_fft() ok.



Mar 29, 2016
On pDDL AR9331,
ah->caps.hw_caps & ATH9K_HW_CAP_EDMA is TRUE. So we use ath_tx_edma_tasklet() instead of ath_tx_tasklet().

Mar 21, 2016
/**
 * enum buffer_type - Buffer type flags
 *
 * @BUF_AMPDU: This buffer is an ampdu, as part of an aggregate (during TX)
 * @BUF_AGGR: Indicates whether the buffer can be aggregated
 *      (used in aggregation scheduling)
 */
enum buffer_type {
        BUF_AMPDU               = BIT(0),
        BUF_AGGR                = BIT(1),
};

The aggregation size(sub frame numbers) depends. When use TCP iperf, it varies from 1 to 12. When use UDP b=5M, nframes=1; b=10M,nframes=1,2; b=15M,nframes=4 to 20; b=20M(excessive),nframes=22.

A test case:
1. Use good signal and put UDP traffic 15Mbps. Aggregation is on and nframs is about 22. The T/P is 15Mbps.
2. Remove the Sender's (AP) antenna, agg errors showed up.
3. Re-connect the antenna to normal position. But the debug info shows the ampdu is never turned on:
===MHX4.1(ath_tx_process_buffer) not ampdu,txok=1
And the T/P dropped to <9.6Mbps (because there is 36% error rate). The real T/P is about 9.5Mbps
4. Keep all the physical opsitions unchanged. Just wifi on AP to restart WLAN. Agg is back now and the T/P gets to 15Mbps.

Why the aggregation never come back after a connection glitch?????

Mar 18,2016
Improving the Performance of Wireless LANs: A Practical Guide
Video transmission over IEEE 802.11n WLAN with adaptive aggregation scheme

Mar 15,2016
addbaResp timer expire : mod_timer(&tid_tx->addba_resp_timer, jiffies + ADDBA_RESP_INTERVAL); //Control by a macro ADDBA_RESP_INTERVAL HZ, 1 second
session timer expire :  mod_timer(&tid_tx->session_timer, TU_TO_EXP_TIME(tid_tx->timeout));	// Passed from minstrel_ht.c, default is 5000 (jiffies). This will be the time out in ADDBAREQ packet. 

Mar 14, 2016
Aggregation session rates:
BAR, BAK: Control Frames
addba_resp, addba_req, delba : mgmt frames, type action. Sent at basic rates.

[Note:] 802.11 Control Frames assist with the delivery of Data & Management frames. Unlike management & data frames, Control frames does not have a frame body. This is a list of common control frames:
Type Value	Type Descroption Subtype Value	Subtype Desctiption
1		Control			0111		Control Wrapper
1		Control			1000		BlockAckRequest (BAR)
1		Control			1001		BlockAck(BAK)
1		Control			1011		RTS
1		Control			1100		CTS
1		Control			1101		ACK
Per the sniffer on PWii, all Control frames except BAK and ACK are at basic rates(1Mbps or 2Mbps). Both rates are seen at 24Mbps sometimes. But the BAK/ACK rate can be controlled by PCU_ACKCTS_6MB register.
It is noted that ALL BAR frames are at 1Mbps. This means, all S/W generated control frames are at basic rates(1Mbps) and the H/W generated BAK/ACK are higher rates sometimes.

All management frames(type=0) are transmitted at basic rates.
Type Value	Type Descroption Subtype Value	Subtype Desctiption
0		Management		0000		Association Req
0		Management		0001		Association Response
0		Management		0010		Re-Association Req
0		Management		0011		Re-Association Response
0		Management		0100		Probe Req
0		Management		0101		Probe Response
0		Management		1000		Beacon
0		Management		1010		Disassociation
0		Management		1011		Authentication
0		Management		1100		Deauthentication
0		Management		1101		Action
0		Management		1110		Action no ack

ieee80211_is_data() will decide if this is a data frame. If no data frame rc_no_data_or_no_ack_use_min() returns 1 and __rate_control_send_low() is called, where the frame's rate IDX and CNT is changed to basic rate IDX and 1 or hw->max_rate_tries. 

Mar 11,2016
 87 #define ADDBA_RESP_INTERVAL HZ
 88 #define HT_AGG_MAX_RETRIES              15
 89 #define HT_AGG_BURST_RETRIES            3
 90 #define HT_AGG_RETRIES_PERIOD           (15 * HZ)
 91 
 92 #define HT_AGG_STATE_DRV_READY          0
 93 #define HT_AGG_STATE_RESPONSE_RECEIVED  1
 94 #define HT_AGG_STATE_OPERATIONAL        2
 95 #define HT_AGG_STATE_STOPPING           3
 96 #define HT_AGG_STATE_WANT_START         4
 97 #define HT_AGG_STATE_WANT_STOP          5

2144 enum ieee80211_ampdu_mlme_action {
2145         IEEE80211_AMPDU_RX_START,
2146         IEEE80211_AMPDU_RX_STOP,
2147         IEEE80211_AMPDU_TX_START,
2148         IEEE80211_AMPDU_TX_STOP_CONT,
2149         IEEE80211_AMPDU_TX_STOP_FLUSH,
2150         IEEE80211_AMPDU_TX_STOP_FLUSH_CONT,
2151         IEEE80211_AMPDU_TX_OPERATIONAL,
2152 };



Mar 10, 2016
ATH9k interrupt is defined in enum ath9k_int. This should match datasheet Primary Interrupt Status (ISR_P) (0x18100080). But the datasheet seems wrong.
platform_driver.probe=ath_ahb_probe()--->request_irq(...ath_isr...)--->tasklete_schedule(sc->intr_tq)----[tasklet_init(&sc->intr_tq, ath9k_tasklet, (unsigned long)sc);]---->ath9k_tasklet().

The tasklets:
1. tasklet_init(&local->tx_pending_tasklet, ieee80211_tx_pending, (unsigned long)local);
2. tasklet_init(&local->tasklet, ieee80211_tasklet_handler, (unsigned long) local);	// ieee80211_tasklet_handler is never called. Testified by printk. So _rx_irqsafe and _tx_status_irqsafe are never called at all.

3. tasklet_init(&sc->intr_tq, ath9k_tasklet, (unsigned long)sc);		// From H/W IRQ, will invoke ath_rx_tasklet() and ath_tx_tasklet().

4. tasklet_init(&sc->bcon_tasklet, ath9k_beacon_tasklet, (unsigned long)sc);


Mar 9, 2016
Only ieee80211_tx_status_irqsafe() and ieee80211_rx_irqsafe() can be called in hardware interrupt context. The low-level driver must not call any other functions in hardware interrupt context.

Mar 8,2016
About the block-ack response from the RX side. ieee80211_send_delba(), ieee80211_send_addba_resp(), and the block-ack is generated by PCU hardware. PCU_ACKCTS_6MB bit in 0x18108004 PCU register can force it. Otherwise the ACK is data rate. mhx -reg get b8108004 works. Both fixed rate and auto are proved true.

Fixed rate(MCS3), with ACKCTS_6MB=1, multiple tests with sniffer proved BA,ADDBA_REQ,ADDBA_RESP, and DELBA are all 6Mbps (All Action frames). With Auto rate and PCU_ACKCTS_6MB=0, ADDBA_REQ,ADDBA_RESP, and DELBA are all 1Mbps, BA is 24Mbps.

Testify 11b mode in PWii, change hwmode=11b. 
echo 1 > sys/kernel/debug/ieee80211/phy0/rc/fixed_rate_idx; iw wlan0 set bitrates legacy-2.4 2; Sniffer the data rate is 2Mbps, ACK rate follows the data rate. TCP T/P is about 1.2Mbps
echo 2 > sys/kernel/debug/ieee80211/phy0/rc/fixed_rate_idx; iw wlan0 set bitrates legacy-2.4 5.5; Sniffer the date rate is 5.5Mbps, ACK rate 5.5M. TCP T/P is about 2.4Mbps
echo 3 > sys/kernel/debug/ieee80211/phy0/rc/fixed_rate_idx; iw wlan0 set bitrates legacy-2.4 11; Sniffer the date rate is 11Mbps, ACK rate 11M. TCP T/P is about 4.5Mbps

Another test:

AP works in hwmode='11ng' fixed rate MCS3 mode and STA hwmode='11b' fixed rate 2M. AP--->STA T/P=10Mbps. iw station dump, rc_stats, and sniffer all show AP tramsmits at 26M(MCS3). Sniffer shows aggreation STA's BA is at 24Mbps, some QoS data from STA--->AP is @2M. This means the data rate follows the fixed rate but the BA still goes with the incoming data rate. The normal ACK to AP is 24M too.

When the traffic STA--->AP, the rc_stats, iw station dump on AP and sniffer show STA is transmitting at 2M. TCP T/P=1.5Mbps. AP's ACK to this 2M data is at 2Mbps too.  The STA's ACK to some AP's QoS data is 24M. 

Mar 7,2016
1. Test the effects of removing ath_tx_complete_aggr() mechanism:. ath_tx_complete_aggr=-1, auto rate, pDDL.
#if 0
		if (!BAW_WITHIN(tid->seq_start, tid->baw_size, seqno) ||
		    !tid->active) {
			/*
			 * Outside of the current BlockAck window,
			 * maybe part of a previous session
			 */
			txfail = 1;
		} else if (ATH_BA_ISSET(ba, ATH_BA_INDEX(seq_st, seqno))) {
			/* transmit completion, subframe is
			 * acked by block ack */
			acked_cnt++;
		} else if (!isaggr && txok) {
			/* transmit completion */
			acked_cnt++;
		} else if (flush) {
			txpending = 1;
		} else if (fi->retries < ATH_MAX_SW_RETRIES) {
			if (txok || !an->sleeping)
				ath_tx_set_retry(sc, txq, bf->bf_mpdu,
						 retries);

			txpending = 1;
		} else {
			txfail = 1;
			txfail_cnt++;
			bar_index = max_t(int, bar_index,
				ATH_BA_INDEX(seq_first, seqno));
		}
#else
        //mhx
        acked_cnt++;
#endif

In same working condition, iperf -c 192.168.168.249 -i 2 -t 20 -u -b 10M, has a 0.025% packet loss with origional mechanism but >13% packet loss when this retry is removed.

2. pDDL fixed rate. Open origional control and test :

		if (ts->ts_flags & ATH9K_TX_BA) {
			seq_st = ts->ts_seqnum;
			memcpy(ba, &ts->ba_low, WME_BA_BMP_SIZE >> 3);
            /////mhx. pretend all acked.
            // memset(ba, 0xff, WME_BA_BMP_SIZE >> 3);
		} else {
With the hack, packetloss is 0.27%. Oringional loss is 0%. So this is a milder way to control the retry.

3. Testify the error rate in mcast. If the signal is really good, will the mcast (0 retry) lose packets?

3.1) In good link:
        signal:         -34 [-34] dBm
        signal avg:     -34 [-34] dBm
        noise floor:    -94 dBm
        rssi:           60
3.2) WDS off, 8MHz, 100m Through test between 2 PCs. AP--->STA
iperf -c 192.168.168.248 -i 2 -t 30 -u -b 7M and iperf -s -B 224.0.0.100 -i 2 -u

MCAT rate		Push B/W	Measured B/W	ErrorRate
Low(6M)			-b 3m		2.3M		20%
			-b 2m		1.92m		2-4%
			-b 1m		970K		2-5%
Medium Low(12M)		-b 6m		4M		30%
			-b 4m		3.7m		5-7%
			-b 2m		1.85m		5-7%			
			-b 1m		950K		3-7%
Medium High(18M)	-b 9m		5.2M		40%
			-b 5M		4.85M		4%
			-b 2M		1.95M		3%
			-b 1m		980K		2%
High(36M)		-b 18m		8M		55%
			-b 8M		7.6M		3.5%
			-b 4m		3.83M		3.6%
			-b 1m		970K		3.6%

3.2) Change to 11g mode
MCAT rate		Push B/W	Measured B/W	ErrorRate
Low(6M)			-b 3m		2.4M		20%
			-b 2m		1.85m		6%
			-b 1m		950K		3-7%
Medium Low(12M)		-b 6m		4M		30%
			-b 4m		3.7m		5-7%
			-b 2m		1.86m		6%			
			-b 1m		950K		6%
Medium High(18M)	-b 9m		5.5M		37%
			-b 5M		4.75M		5%
			-b 2M		1.85M		6.5%
			-b 1m		950K		5%
High(36M)		-b 18m		7.5M		55%
			-b 8M		7.6M		4.5%
			-b 4m		3.83M		5%
			-b 1m		950K		4%


This shows no matter how good the environment and signal is, the non-ack will have packet loss. This may explain when the retry mechanism is aggressively removed, the throughput is lower in good signal strength.

3.3) Adjust antenna to lower signal strength:
        signal:         -53 [-53] dBm
        signal avg:     -53 [-53] dBm
        noise floor:    -93 dBm
        rssi:           40
Repeat the previous tests. Ther error rate no improved almost the same.

Mar 5,2016
● There are two sides to a block ack session: originator and recipient. Each block session has a different TID (traffic identifier).
● The originator starts the block acknowledge session by calling ieee80211_start_tx_ba_session() (net/mac80211/agg-tx.c)
ieee80211_tx_ba_session_handle_start() is a callback of ieee80211_start_tx_ba_session(). In this callback we send an ADDBA (add Block Acknowledgment) request packet, by invoking ieee80211_send_addba_request() method (Also in net/mac80211/agg-tx.c)
ieee80211_send_addba_request() method builds a management action packet
(The sub type is action, IEEE80211_STYPE_ACTION).
The response to the ADDBA request should be received within 1 HZ, which is one millisecond in x86_64 machines (ADDBA_RESP_INTERVAL, defined in net-next/net/mac80211/sta_info.h)
In case we do not get a response in time, the sta_addba_resp_timer_expired() will stop the BA session by calling ieee80211_stop_tx_ba_session().
When the other side (the recipient) receives the ADDBA request, it first sends an ACK. Then it processes the ADDBA request by calling ieee80211_process_addba_request(); (net/mac80211/agg-rx.c)
if everything is ok, it sets the aggregation state of this machine to operational (HT_AGG_STATE_OPERATIONAL), and sends an ADDBA Response by calling ieee80211_send_addba_resp().
After a session was started, a data block, containing multiple MPDU packets is sent. Consequently, the originator sends a Block Ack Request (BAR) packet by calling ieee80211_send_bar(). (net/mac80211/agg-tx.c)
The BAR is a control packet with Block Ack Request subtype (IEEE80211_STYPE_BACK_REQ).
The bar packet includes the SSN (start sequence number), which is the sequence number of the oldest MSDU in the block which should be acknowledged.
The BAR (HT Block Ack Request) is defined in include/linux/ieee80211.h.
Its start_seq_num member is initialized to the proper SSN.
There are two types of Block Ack: Immediate Block Ack and Delayed Block Ack.

Mar 4 2016
IPn4Gii bootstrap. 

1. #vi build_dir/target-arm_v5te_uClibc-0.9.33.2_eabi/linux-sama5d35/at91bootstrap/.config, change CONFIG_BUS_SPEED_83MHZ=y, CONFIG_SPI_CLK=25000000.
2. #find build_dir/target-arm_v5te_uClibc-0.9.33.2_eabi/linux-sama5d35/at91bootstrap/ -name *.o | xargs rm -rf
3. #make V=99 |  tee mk1.log, you can see in mk1.log 
gcc FLAGS
=========
-ffunction-sections -g -Os -Wall -fno-stack-protector -Iboard/at91sama5d3xek -Iinclude -Ifs/include -DAT91BOOTSTRAP_VERSION="3.5.2" -DCOMPILE_TIME="Fri Mar  4 09:14:40 MST 2016" -DIMG_ADDRESS=0x00040000 -DIMG_SIZE=0x00080000 -DJUMP_ADDR=0x26F00000 -DOF_OFFSET= -DOF_LENGTH= -DOF_FILENAME="" -DOF_ADDRESS= -DOS_MEM_BANK= -DOS_MEM_SIZE= -DOS_IMAGE_NAME="" -DLINUX_KERNEL_ARG_STRING="" -DTOP_OF_MEMORY=0x310000 -DMACH_TYPE=9999 -DCONFIG_HW_INIT -DAT91SAMA5D3X -Dat91sama5d3xek -DMACH_TYPE=9999 -DTOP_OF_MEMORY=0x310000 -DCRYSTAL_12_000MHZ -DCONFIG_AT91SAMA5D3XEK -mtune=cortex-a5 -DCONFIG_THUMB -mthumb -mthumb-interwork -DCONFIG_SCLK -DCONFIG_CRYSTAL_12_000MHZ -DCONFIG_CPU_CLK_533MHZ -DCONFIG_BUS_SPEED_83MHZ -DCONFIG_HAS_PIO3 -DCPU_HAS_PMECC -DCONFIG_LOAD_ONE_WIRE -DCONFIG_MMC_SUPPORT -DCONFIG_DDR2 -DCONFIG_RAM_512MB -DCONFIG_DATAFLASH -DCONFIG_SDCARD_HS -DCONFIG_SMALL_DATAFLASH -DAT91C_SPI_CLK=25000000 -DAT91C_SPI_PCS_DATAFLASH=AT91C_SPI_PCS0_DATAFLASH -DCONFIG_DISABLE_WATCHDOG

Where is the source:
[Jeff@DENG0080-2 ipn4gii]$ ll build_dir/target-arm_v5te_uClibc-0.9.33.2_eabi/linux-sama5d35/at91bootstrap/board/at91sama5d3xek/
total 56
-rw-r--r-- 1 Jeff Jeff 11524 Dec  3 10:00 at91sama5d3xek.c
-rw-r--r-- 1 Jeff Jeff  3471 Mar  4 10:07 at91sama5d3xekdf_linux_dt_defconfig
-rw-r--r-- 1 Jeff Jeff  3153 Mar  4 10:08 at91sama5d3xekdf_uboot_defconfig
-rw-r--r-- 1 Jeff Jeff  4962 Mar  4 10:10 at91sama5d3xek.h
-rw-r--r-- 1 Jeff Jeff  3001 Feb 20  2013 at91sama5d3xeknf_linux_dt_defconfig
-rw-r--r-- 1 Jeff Jeff  2649 Feb 20  2013 at91sama5d3xeknf_uboot_defconfig
-rw-r--r-- 1 Jeff Jeff  7984 Mar  4 10:11 at91sama5d3xek.o
-rw-r--r-- 1 Jeff Jeff  2704 Feb 20  2013 at91sama5d3xeksd_linux_dt_defconfig
-rw-r--r-- 1 Jeff Jeff  2469 Feb 20  2013 at91sama5d3xeksd_uboot_defconfig
-rw-r--r-- 1 Jeff Jeff   359 Feb 20  2013 board.mk

df is dataflash (SPI), nf is NANDFLASH, sd is SD card . We use the "df". Change CONFIG_BUS_SPEED_ in all the *df* files, change BOARD_MCK for MAK and SysClk DDR is equal to 2 x MCK. 
But in board/at91sama5d3xek/at91sama5d3xek.c, hw_init()--->ddramc_init()--->ddramc_reg_config() looks like only works with 133Mhz MCK.


UBoot:
board_init_f(arch/arm/lib/board.c) -->inti_sequence[0]=arch_cpu_init--->at91_clock_init(arch/arm/cpu/armv7/at91/clock.c).--->mckr = readl(&pmc->mckr) and MCK not changed.
include/configs/sama5d3xek.h defines the SPI clock CONFIG_SF_DEFAULT_SPEED=5M and later patched to 10M. In kernel, the speed is defined in arch/arm/boot/dts/sama5d3mb.dtsi, which is 50M.

Mar 3,2016
VIP2 VLAN. v2.2.0 build 2020
1. AP side:

VLAN ID	 	1
Description	Native
WAN		Join
LAN		Join
Radio2		Join

ID	Description	WAN		LAN	Radio2
3		 	Join UnTag 	No	Join UnTag

root@VIP2:~# brctl show
bridge name     bridge id               STP enabled     interfaces
br-lan          8000.000f9200cb77       yes             eth0
                                                        eth1
                                                        wlan1
br-vlan1        8000.000000000000       no
br-vlan3        8000.000f9200cb77       no              eth0.3
                                                        wlan1.3

root@VIP2:~# cat proc/net/vlan/config 
VLAN Dev name    | VLAN ID
Name-Type: VLAN_NAME_TYPE_RAW_PLUS_VID_NO_PAD
eth0.3         | 3  | eth0
wlan1.3        | 3  | wlan1 
root@VIP2:~# cat proc/net/vlan/eth0.3 
eth0.3  VID: 3   REORDER_HDR: 1  dev->priv_flags: 1
         total frames received            0
          total bytes received            0
      Broadcast/Multicast Rcvd            0

      total frames transmitted            0
       total bytes transmitted            0
            total headroom inc            0
           total encap on xmit            6
Device: eth0
INGRESS priority mappings: 0:0  1:0  2:0  3:0  4:0  5:0  6:0 7:0
 EGRESS priority mappings: 
root@VIP2:~# 
root@VIP2:~# 
root@VIP2:~# cat proc/net/vlan/wlan1.3 
wlan1.3  VID: 3  REORDER_HDR: 1  dev->priv_flags: 1
         total frames received            0
          total bytes received            0
      Broadcast/Multicast Rcvd            0

      total frames transmitted            6
       total bytes transmitted          492
            total headroom inc            0
           total encap on xmit            6
Device: wlan1
INGRESS priority mappings: 0:0  1:0  2:0  3:0  4:0  5:0  6:0 7:0
 EGRESS priority mappings: 

2. AP side:

VLAN ID	 	1
Description	Native
WAN		Join
LAN		Join
Radio2		Join

ID	Description	WAN		LAN	Radio2
3		 	Join Tag 	No	Join Tag

root@VIP2:~# brctl show
bridge name     bridge id               STP enabled     interfaces
br-lan          8000.000f9201cb77       yes             eth1
br-vlan1        8000.000000000000       no
br-vlan3        8000.000f9200cb77       no              eth0
							wlan1

root@VIP2:~# cat proc/net/vlan/config 
VLAN Dev name    | VLAN ID
Name-Type: VLAN_NAME_TYPE_RAW_PLUS_VID_NO_PAD
                                                      wlan1
This means, "Tag" means no VLAN sub-interface while "UnTag" creates VLAN sub-interfaces. When "Tagged", this interface is bridged out of the br-lan and that doesn't mean this port is really Tagged. A trunk must be "untag" so that VLAN sub-interfaces will be created on it. "Tag" doesn't mean Tag and has nothing to do with 802.1q. In one word, a Trunk interface must be "Untag" and like wlan0.4 and wlan0.5. 



Mar 1,2016
Roughly test the difference of Rates/Retry control on pDDL. With debug info on. Fixed rate MCS2
1. Default: TCP T/P is about 5Mbps; UDP 1.84mS/5.5%
2. With Rates/Retry=1/1 TCP T/P is about 3.5Mbps. UDP 0.54mS/5.2%

Feb 29,2016
ATH_TXMAXTRY is only defined but not used because it is used by 'ath9k_rate_control" but not by minstrel.
ATH_MAX_SW_RETRIES is used that is defaulted to 30. Whith this default:
[ 7565.010000] ===MHX:4.3(ath_tx_fill_desc)Seq=0,TS=0
[ 7565.160000] ===MHX:(ath9k_tx)
[ 7565.160000] ===MHX:4.1(ath_tx_fill_desc)Seq=2055,TS=0
[ 7565.160000] ===MHX4.2:(ath_tx_fill_desc)[1,4,00000008][0,3,00000088][3,3,00000004][ffffffff,0,00000000]
[ 7565.160000] ===MHX:4.3(ath_tx_fill_desc)Seq=2055,TS=0
[ 7565.160000] =MHX1.1(T:0):[81,4,00000000][80,3,00000004][1c,3,00000000][0,0,00000000]
[ 7565.160000] ===MHX:4.1(ath_tx_fill_desc)Seq=2055,TS=0
[ 7565.160000] ===MHX4.2:(ath_tx_fill_desc)[1,4,00000008][0,3,00000088][3,3,00000004][ffffffff,0,00000000]
[ 7565.160000] ===MHX:4.3(ath_tx_fill_desc)Seq=2055,TS=0
[ 7565.160000] =MHX1.1(T:0):[81,4,00000000][80,3,00000004][1c,3,00000000][0,0,00000000]
[ 7565.200000] ===MHX:4.1(ath_tx_fill_desc)Seq=2055,TS=0
[ 7565.200000] ===MHX4.2:(ath_tx_fill_desc)[1,4,00000008][0,3,00000088][3,3,00000004][ffffffff,0,00000000]
[ 7565.200000] ===MHX:4.3(ath_tx_fill_desc)Seq=2055,TS=0
[ 7565.200000] =MHX1.1(T:0):[81,4,00000000][80,3,00000004][1c,3,00000000][0,0,00000000]
[ 7565.210000] ===MHX:4.1(ath_tx_fill_desc)Seq=2055,TS=0
[ 7565.210000] ===MHX4.2:(ath_tx_fill_desc)[1,4,00000008][0,3,00000088][3,3,00000004][ffffffff,0,00000000]
[ 7565.210000] ===MHX:4.3(ath_tx_fill_desc)Seq=2055,TS=0
[ 7565.210000] =MHX1.1(T:0):[81,4,00000000][80,3,00000004][1c,3,00000000][0,0,00000000]
[ 7565.220000] ===MHX:4.1(ath_tx_fill_desc)Seq=2055,TS=0
[ 7565.220000] ===MHX4.2:(ath_tx_fill_desc)[1,4,00000008][0,3,00000088][3,3,00000004][ffffffff,0,00000000]
[ 7565.220000] ===MHX:4.3(ath_tx_fill_desc)Seq=2055,TS=0
[ 7565.220000] =MHX1.1(T:0):[81,4,00000000][80,3,00000004][1c,3,00000000][0,0,00000000]
[ 7565.230000] ===MHX:(ath9k_tx)
[ 7565.230000] ===MHX:4.1(ath_tx_fill_desc)Seq=0,TS=0
[ 7565.230000] ===MHX4.2:(ath_tx_fill_desc)[0,10,00000000]


  148.960000] ===MHX:(ath9k_tx)
[  148.960000] ===MHX:4.1(ath_tx_fill_desc)Seq=29,TS=0
[  148.960000] ===MHX4.2:(ath_tx_fill_desc)[1,4,00000088][0,3,00000008][1,4,00000088][ffffffff,0,00000000]
[  148.960000] ===MHX:4.3(ath_tx_fill_desc)Seq=29,TS=0
[  148.960000] =MHX1.1(T:0):[81,4,00000004][80,3,00000000][81,4,00000004][0,0,00000000]
[  148.960000] ===MHX:4.1(ath_tx_fill_desc)Seq=29,TS=0
[  148.960000] ===MHX4.2:(ath_tx_fill_desc)[1,4,00000088][0,3,00000008][1,4,00000088][ffffffff,0,00000000]
[  148.960000] ===MHX:4.3(ath_tx_fill_desc)Seq=29,TS=0
[  148.960000] =MHX1.1(T:0):[81,4,00000004][80,3,00000000][81,4,00000004][0,0,00000000]
[  148.970000] ===MHX:4.1(ath_tx_fill_desc)Seq=29,TS=0
[  148.970000] ===MHX4.2:(ath_tx_fill_desc)[1,4,00000088][0,3,00000008][1,4,00000088][ffffffff,0,00000000]
[  148.970000] ===MHX:4.3(ath_tx_fill_desc)Seq=29,TS=0
[  148.970000] =MHX1.1(T:0):[81,4,00000004][80,3,00000000][81,4,00000004][0,0,00000000]
[  149.000000] ===MHX:4.1(ath_tx_fill_desc)Seq=29,TS=0
[  149.000000] ===MHX4.2:(ath_tx_fill_desc)[1,4,00000088][0,3,00000008][1,4,00000088][ffffffff,0,00000000]
[  149.000000] ===MHX:4.3(ath_tx_fill_desc)Seq=29,TS=0
[  149.000000] =MHX1.1(T:0):[81,4,00000004][80,3,00000000][81,4,00000004][0,0,00000000]
[  149.040000] ===MHX:4.1(ath_tx_fill_desc)Seq=29,TS=0
[  149.040000] ===MHX4.2:(ath_tx_fill_desc)[1,4,00000088][0,3,00000008][1,4,00000088][ffffffff,0,00000000]
[  149.040000] ===MHX:4.3(ath_tx_fill_desc)Seq=29,TS=0
[  149.040000] =MHX1.1(T:0):[81,4,00000004][80,3,00000000][81,4,00000004][0,0,00000000]
[  149.050000] ===MHX:(ath9k_tx)
[  149.050000] ===MHX:4.1(ath_tx_fill_desc)Seq=0,TS=0
[  149.050000] ===MHX4.2:(ath_tx_fill_desc)[0,10,00000000][ffffffff,0,00000000][ffffffff,0,00000000][ffffffff,0,00000000]
[  149.050000] ===MHX:4.3(ath_tx_fill_desc)Seq=0,TS=0
[  149.050000] =MHX1.1(T:0):[1b,10,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  149.110000] ===MHX:(ath9k_tx)
[  149.110000] ===MHX:4.1(ath_tx_fill_desc)Seq=0,TS=0
[  149.110000] ===MHX4.2:(ath_tx_fill_desc)[0,1,00000000][ffffffff,0,00000000][0,0,00000000][0,0,00000000]
[  149.110000] ===MHX:4.3(ath_tx_fill_desc)Seq=0,TS=0
[  149.230000] ===MHX:(ath9k_tx)
[  149.230000] ===MHX:4.1(ath_tx_fill_desc)Seq=0,TS=0
[  149.230000] ===MHX4.2:(ath_tx_fill_desc)[0,1,00000000][ffffffff,0,00000000][0,0,00000000][0,0,00000000]
[  149.230000] ===MHX:4.3(ath_tx_fill_desc)Seq=0,TS=0
[  149.800000] ===MHX:(ath9k_tx)
[  149.800000] ===MHX:4.1(ath_tx_fill_desc)Seq=0,TS=0
[  149.800000] ===MHX4.2:(ath_tx_fill_desc)[0,1,00000000][ffffffff,0,00000000][0,0,00000000][0,0,00000000]
[  149.800000] ===MHX:4.3(ath_tx_fill_desc)Seq=0,TS=0
[  149.880000] ===MHX:(ath9k_tx)
[  149.880000] ===MHX:4.1(ath_tx_fill_desc)Seq=0,TS=0
[  149.880000] ===MHX4.2:(ath_tx_fill_desc)[0,1,00000000][ffffffff,0,00000000][0,0,00000000][0,0,00000000]
[  149.880000] ===MHX:4.3(ath_tx_fill_desc)Seq=0,TS=0
[  149.910000] ===MHX:(ath9k_tx)
[  149.910000] ===MHX:4.1(ath_tx_fill_desc)Seq=0,TS=0
[  149.910000] ===MHX4.2:(ath_tx_fill_desc)[0,1,00000000][ffffffff,0,00000000][0,0,00000000][0,0,00000000]
[  149.910000] ===MHX:4.3(ath_tx_fill_desc)Seq=0,TS=0
[  149.960000] ===MHX:(ath9k_tx)										//Same Seq packets are SW retried 5 times below.4.1 and 4.3 is duplicated.
[  149.960000] ===MHX:4.1(ath_tx_fill_desc)Seq=30,TS=0
[  149.960000] ===MHX4.2:(ath_tx_fill_desc)[3,3,00000004][1,4,00000088][3,3,00000004][ffffffff,0,00000000]
[  149.960000] ===MHX:4.3(ath_tx_fill_desc)Seq=30,TS=0
[  149.960000] =MHX1.1(T:0):[1c,3,00000000][81,4,00000004][1c,3,00000000][0,0,00000000]
[  149.960000] ===MHX:4.1(ath_tx_fill_desc)Seq=30,TS=0
[  149.960000] ===MHX4.2:(ath_tx_fill_desc)[3,3,00000004][1,4,00000088][3,3,00000004][ffffffff,0,00000000]
[  149.960000] ===MHX:4.3(ath_tx_fill_desc)Seq=30,TS=0
[  149.960000] =MHX1.1(T:0):[1c,3,00000000][81,4,00000004][1c,3,00000000][0,0,00000000]
[  149.990000] ===MHX:4.1(ath_tx_fill_desc)Seq=30,TS=0
[  149.990000] ===MHX4.2:(ath_tx_fill_desc)[3,3,00000004][1,4,00000088][3,3,00000004][ffffffff,0,00000000]
[  149.990000] ===MHX:4.3(ath_tx_fill_desc)Seq=30,TS=0
[  149.990000] =MHX1.1(T:0):[1c,3,00000000][81,4,00000004][1c,3,00000000][0,0,00000000]
[  150.000000] ===MHX:4.1(ath_tx_fill_desc)Seq=30,TS=0
[  150.000000] ===MHX4.2:(ath_tx_fill_desc)[3,3,00000004][1,4,00000088][3,3,00000004][ffffffff,0,00000000]
[  150.000000] ===MHX:4.3(ath_tx_fill_desc)Seq=30,TS=0
[  150.000000] =MHX1.1(T:0):[1c,3,00000000][81,4,00000004][1c,3,00000000][0,0,00000000]
[  150.040000] ===MHX:4.1(ath_tx_fill_desc)Seq=30,TS=0
[  150.040000] ===MHX4.2:(ath_tx_fill_desc)[3,3,00000004][1,4,00000088][3,3,00000004][ffffffff,0,00000000]
[  150.040000] ===MHX:4.3(ath_tx_fill_desc)Seq=30,TS=0
[  150.040000] =MHX1.1(T:0):[1c,3,00000000][81,4,00000004][1c,3,00000000][0,0,00000000]
[  150.050000] ===MHX:(ath9k_tx)
[  150.050000] ===MHX:4.1(ath_tx_fill_desc)Seq=0,TS=0

With ATH_MAX_SW_RETRIES=1, we see max pending is 2 times below:
[  188.000000] ===MHX:(ath9k_tx)
[  188.000000] ===MHX:4.1(ath_tx_fill_desc)Seq=0,TS=0
[  188.000000] ===MHX4.2:(ath_tx_fill_desc)[0,1,00000000][ffffffff,0,00000000][0,0,00000000][0,0,00000000]
[  188.000000] ===MHX:4.3(ath_tx_fill_desc)Seq=0,TS=0
[  188.040000] ===MHX:(ath9k_tx)
[  188.040000] ===MHX:4.1(ath_tx_fill_desc)Seq=15,TS=0
[  188.040000] ===MHX4.2:(ath_tx_fill_desc)[3,3,00000004][0,3,00000008][0,3,00000008][ffffffff,0,00000000]
[  188.040000] ===MHX:4.3(ath_tx_fill_desc)Seq=15,TS=0
[  188.040000] =MHX1.1(T:0):[1c,3,00000000][80,3,00000000][80,3,00000000][0,0,00000000]
[  188.040000] ===MHX:4.1(ath_tx_fill_desc)Seq=15,TS=0
[  188.040000] ===MHX4.2:(ath_tx_fill_desc)[3,3,00000004][0,3,00000008][0,3,00000008][ffffffff,0,00000000]
[  188.040000] ===MHX:4.3(ath_tx_fill_desc)Seq=15,TS=0
[  188.040000] =MHX1.1(T:0):[1c,3,00000000][80,3,00000000][80,3,00000000][0,0,00000000]
[  188.050000] ===MHX:(ath9k_tx)
[  188.050000] ===MHX:4.1(ath_tx_fill_desc)Seq=0,TS=0
[  188.050000] ===MHX4.2:(ath_tx_fill_desc)[0,10,00000000][ffffffff,0,00000000][ffffffff,0,00000000][ffffffff,0,00000000]
[  188.050000] ===MHX:4.3(ath_tx_fill_desc)Seq=0,TS=0
[  188.050000] =MHX1.1(T:0):[1b,10,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  188.150000] ===MHX:(ath9k_tx)
[  188.150000] ===MHX:4.1(ath_tx_fill_desc)Seq=0,TS=0
[  188.150000] ===MHX4.2:(ath_tx_fill_desc)[0,1,00000000][ffffffff,0,00000000][0,0,00000000][0,0,00000000]
[  188.150000] ===MHX:4.3(ath_tx_fill_desc)Seq=0,TS=0
[  188.210000] ===MHX:(ath9k_tx)
[  188.210000] ===MHX:4.1(ath_tx_fill_desc)Seq=0,TS=0
[  188.210000] ===MHX4.2:(ath_tx_fill_desc)[0,1,00000000][ffffffff,0,00000000][0,0,00000000][0,0,00000000]
[  188.210000] ===MHX:4.3(ath_tx_fill_desc)Seq=0,TS=0
[  188.790000] ===MHX:(ath9k_tx)
[  188.790000] ===MHX:4.1(ath_tx_fill_desc)Seq=0,TS=0
[  188.790000] ===MHX4.2:(ath_tx_fill_desc)[0,1,00000000][ffffffff,0,00000000][0,0,00000000][0,0,00000000]
[  188.790000] ===MHX:4.3(ath_tx_fill_desc)Seq=0,TS=0
[  188.880000] ===MHX:(ath9k_tx)
[  188.880000] ===MHX:4.1(ath_tx_fill_desc)Seq=0,TS=0
[  188.880000] ===MHX4.2:(ath_tx_fill_desc)[0,1,00000000][ffffffff,0,00000000][0,0,00000000][0,0,00000000]
[  188.880000] ===MHX:4.3(ath_tx_fill_desc)Seq=0,TS=0
[  188.900000] ===MHX:(ath9k_tx)
[  188.900000] ===MHX:4.1(ath_tx_fill_desc)Seq=0,TS=0
[  188.900000] ===MHX4.2:(ath_tx_fill_desc)[0,1,00000000][ffffffff,0,00000000][0,0,00000000][0,0,00000000]
[  188.900000] ===MHX:4.3(ath_tx_fill_desc)Seq=0,TS=0
[  188.920000] ===MHX:(ath9k_tx)
[  188.920000] ===MHX:4.1(ath_tx_fill_desc)Seq=0,TS=0
[  188.920000] ===MHX4.2:(ath_tx_fill_desc)[0,1,00000000][ffffffff,0,00000000][0,0,00000000][0,0,00000000]
[  188.920000] ===MHX:4.3(ath_tx_fill_desc)Seq=0,TS=0
[  188.970000] ===MHX:(ath9k_tx)
[  188.970000] ===MHX:4.1(ath_tx_fill_desc)Seq=0,TS=0
[  188.970000] ===MHX4.2:(ath_tx_fill_desc)[0,1,00000000][ffffffff,0,00000000][0,0,00000000][0,0,00000000]
[  188.970000] ===MHX:4.3(ath_tx_fill_desc)Seq=0,TS=0
[  189.040000] ===MHX:(ath9k_tx)
[  189.040000] ===MHX:4.1(ath_tx_fill_desc)Seq=16,TS=0
[  189.040000] ===MHX4.2:(ath_tx_fill_desc)[3,3,00000004][0,3,00000008][0,3,00000008][ffffffff,0,00000000]
[  189.040000] ===MHX:4.3(ath_tx_fill_desc)Seq=16,TS=0
[  189.040000] =MHX1.1(T:0):[1c,3,00000000][80,3,00000000][80,3,00000000][0,0,00000000]
[  189.040000] ===MHX:4.1(ath_tx_fill_desc)Seq=16,TS=0
[  189.040000] ===MHX4.2:(ath_tx_fill_desc)[3,3,00000004][0,3,00000008][0,3,00000008][ffffffff,0,00000000]
[  189.040000] ===MHX:4.3(ath_tx_fill_desc)Seq=16,TS=0
[  189.040000] =MHX1.1(T:0):[1c,3,00000000][80,3,00000000][80,3,00000000][0,0,00000000]
[  189.070000] ===MHX:(ath9k_tx)
[  189.070000] ===MHX:4.1(ath_tx_fill_desc)Seq=0,TS=0
[  189.070000] ===MHX4.2:(ath_tx_fill_desc)[0,10,00000000][ffffffff,0,00000000][ffffffff,0,00000000][ffffffff,0,00000000]
[  189.070000] ===MHX:4.3(ath_tx_fill_desc)Seq=0,TS=0
[  189.070000] =MHX1.1(T:0):[1b,10,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  189.530000] ===MHX:(ath9k_tx)
[  189.530000] ===MHX:4.1(ath_tx_fill_desc)Seq=0,TS=0
[  189.530000] ===MHX4.2:(ath_tx_fill_desc)[0,1,00000000][ffffffff,0,00000000][0,0,00000000][0,0,00000000]
[  189.530000] ===MHX:4.3(ath_tx_fill_desc)Seq=0,TS=0
[  189.600000] ===MHX:(ath9k_tx)
[  189.600000] ===MHX:4.1(ath_tx_fill_desc)Seq=0,TS=0
[  189.600000] ===MHX4.2:(ath_tx_fill_desc)[0,1,00000000][ffffffff,0,00000000][ffffffff,0,00000000][ffffffff,0,00000000]
[  189.600000] ===MHX:4.3(ath_tx_fill_desc)Seq=0,TS=0
[  189.660000] ===MHX:(ath9k_tx)
[  189.660000] ===MHX:4.1(ath_tx_fill_desc)Seq=0,TS=0
[  189.660000] ===MHX4.2:(ath_tx_fill_desc)[0,1,00000000][ffffffff,0,00000000][0,0,00000000][0,0,00000000]
[  189.660000] ===MHX:4.3(ath_tx_fill_desc)Seq=0,TS=0
[  189.680000] ===MHX:(ath9k_tx)
[  189.680000] ===MHX:4.1(ath_tx_fill_desc)Seq=0,TS=0
[  189.680000] ===MHX4.2:(ath_tx_fill_desc)[0,1,00000000][ffffffff,0,00000000][0,0,00000000][0,0,00000000]
[  189.680000] ===MHX:4.3(ath_tx_fill_desc)Seq=0,TS=0
[  189.730000] ===MHX:(ath9k_tx)
[  189.730000] ===MHX:4.1(ath_tx_fill_desc)Seq=0,TS=0
[  189.730000] ===MHX4.2:(ath_tx_fill_desc)[0,1,00000000][ffffffff,0,00000000][0,0,00000000][0,0,00000000]
[  189.730000] ===MHX:4.3(ath_tx_fill_desc)Seq=0,TS=0
[  189.790000] ===MHX:(ath9k_tx)
[  189.790000] ===MHX:4.1(ath_tx_fill_desc)Seq=0,TS=0
[  189.790000] ===MHX4.2:(ath_tx_fill_desc)[0,1,00000000][ffffffff,0,00000000][0,0,00000000][0,0,00000000]
[  189.790000] ===MHX:4.3(ath_tx_fill_desc)Seq=0,TS=0
[  189.830000] ===MHX:(ath9k_tx)
[  189.830000] ===MHX:4.1(ath_tx_fill_desc)Seq=0,TS=0
[  189.830000] ===MHX4.2:(ath_tx_fill_desc)[0,1,00000000][ffffffff,0,00000000][0,0,00000000][0,0,00000000]
[  189.830000] ===MHX:4.3(ath_tx_fill_desc)Seq=0,TS=0
[  189.890000] ===MHX:(ath9k_tx)
[  189.890000] ===MHX:4.1(ath_tx_fill_desc)Seq=0,TS=0
[  189.890000] ===MHX4.2:(ath_tx_fill_desc)[0,1,00000000][ffffffff,0,00000000][0,0,00000000][0,0,00000000]
[  189.890000] ===MHX:4.3(ath_tx_fill_desc)Seq=0,TS=0
[  190.040000] ===MHX:(ath9k_tx)
[  190.040000] ===MHX:4.1(ath_tx_fill_desc)Seq=17,TS=0
[  190.040000] ===MHX4.2:(ath_tx_fill_desc)[3,3,00000004][0,3,00000008][0,3,00000008][ffffffff,0,00000000]
[  190.040000] ===MHX:4.3(ath_tx_fill_desc)Seq=17,TS=0
[  190.040000] =MHX1.1(T:0):[1c,3,00000000][80,3,00000000][80,3,00000000][0,0,00000000]
[  190.040000] ===MHX:4.1(ath_tx_fill_desc)Seq=17,TS=0
[  190.040000] ===MHX4.2:(ath_tx_fill_desc)[3,3,00000004][0,3,00000008][0,3,00000008][ffffffff,0,00000000]
[  190.040000] ===MHX:4.3(ath_tx_fill_desc)Seq=17,TS=0
[  190.040000] =MHX1.1(T:0):[1c,3,00000000][80,3,00000000][80,3,00000000][0,0,00000000]
[  190.050000] ===MHX:(ath9k_tx)
[  190.050000] ===MHX:4.1(ath_tx_fill_desc)Seq=0,TS=0
[  190.050000] ===MHX4.2:(ath_tx_fill_desc)[0,10,00000000][ffffffff,0,00000000][ffffffff,0,00000000][ffffffff,0,00000000]
[  190.050000] ===MHX:4.3(ath_tx_fill_desc)Seq=0,TS=0
[  190.050000] =MHX1.1(T:0):[1b,10,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  190.200000] ===MHX:(ath9k_tx)
[  190.200000] ===MHX:4.1(ath_tx_fill_desc)Seq=0,TS=0
[  190.200000] ===MHX4.2:(ath_tx_fill_desc)[0,1,00000000][ffffffff,0,00000000][0,0,00000000][0,0,00000000]
[  190.200000] ===MHX:4.3(ath_tx_fill_desc)Seq=0,TS=0
[  190.280000] ===MHX:(ath9k_tx)
[  190.280000] ===MHX:4.1(ath_tx_fill_desc)Seq=0,TS=0
[  190.280000] ===MHX4.2:(ath_tx_fill_desc)[0,1,00000000][ffffffff,0,00000000][0,0,00000000][0,0,00000000]
[  190.280000] ===MHX:4.3(ath_tx_fill_desc)Seq=0,TS=0
[  190.550000] ===MHX:(ath9k_tx)


But still see many (8) ADDBAR sent.

Feb 26,2016
/**
 * enum buffer_type - Buffer type flags
 *
 * @BUF_AMPDU: This buffer is an ampdu, as part of an aggregate (during TX)
 * @BUF_AGGR: Indicates whether the buffer can be aggregated
 *      (used in aggregation scheduling)
 */
enum buffer_type {
        BUF_AMPDU               = BIT(0),
        BUF_AGGR                = BIT(1),
};

Feb 25, 2016
Very IEEE80211_HW_HAS_RATE_CONTROL flag on pDDL
void rate_control_get_rate(struct ieee80211_sub_if_data *sdata,
			   struct sta_info *sta,
			   struct ieee80211_tx_rate_control *txrc)
{
	ref->ops->get_rate(ref->priv, ista, priv_sta, txrc);

	if (sdata->local->hw.flags & IEEE80211_HW_SUPPORTS_RC_TABLE){
        	printk("=MHX3.1(%s):defined!!!\n", __func__);    
		return;
    	}

    	printk("=MHX3.1(%s):IEEE80211_HW_SUPPORTS_RC_TABLE is not defined\n", __func__);
				ieee80211_get_tx_rates(&sdata->vif, ista, txrc->skb,
			       info->control.rates,
			       ARRAY_SIZE(info->control.rates));
}

Both Master and Slave side says "=MHX3.1(rate_control_get_rate):defined!!!", which means ieee80211_get_tx_rates() is never called!!!

But there is a call from driver: ieee80211_get_tx_rates()<---ath_set_rates()<---ath_tx_start()<---ath9k_tx()=struct ieee80211_ops ath9k_ops.tx[Anchor A].

On MAC80211 layer : struct rate_control_ops mac80211_minstrel.get_rate()<---rate_control_get_rate()<---ieee80211_tx_h_rate_ctrl()<---invoke_tx_handlers()<--- ieee80211_tx(). After the previous call,ieee80211_tx()--->__ieee80211_tx()--->ieee80211_tx_frags()---> drv_tx(), struct ieee80211_local *local->const struct ieee80211_ops *ops->tx, this goes to [Anchor A]

Above ieee80211_tx()<---ieee80211_xmit()<--- ieee80211_subif_start_xmit()=static const struct net_device_ops.ndo_start_xmit<---dev_hard_start_xmit() in Linux kernel net/core/dev.c.

Feb 24, 2016
A ping -c 10 from pDDL AP--->STA, HT mode, debug info on AP. At about 5Sec remove the antenna.
root@UserDevice:~# [  444.710000] =MHX(ath9k_hw_set_txdesc)(T:0):[81,1,00000000][85,10,00000000][86,10,00000000][0,0,00000000]
[  444.720000] =MHX(ieee80211_tx_status)(F:40001210)(ack_sig:61)[1,1,00000008][ffffffff,0,00000008][ffffffff,0,00000008][ffffffff,0,00000000]
[  444.730000] =MHX(ath9k_hw_set_txdesc)(T:0):[b,1,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  444.740000] =MHX(ath9k_hw_set_txdesc)(T:0):[b,1,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  444.750000] =MHX(ieee80211_tx_status)(F:4000021a)(ack_sig:57)[0,1,00000000][ffffffff,0,00000000][ffffffff,0,00000000][ffffffff,0,00000000]
[  444.760000] =MHX(ieee80211_tx_status)(F:4000021a)(ack_sig:57)[0,1,00000000][ffffffff,0,00000000][ffffffff,0,00000000][ffffffff,0,00000000]
[  445.720000] =MHX(ath9k_hw_set_txdesc)(T:0):[86,11,00000000][85,10,00000000][86,10,00000000][0,0,00000000]
[  445.730000] =MHX(ieee80211_tx_status)(F:40000650)(ack_sig:59)[6,1,00000008][ffffffff,0,00000008][ffffffff,0,00000008][ffffffff,0,00000000]
[  446.720000] =MHX(ath9k_hw_set_txdesc)(T:0):[86,11,00000000][85,10,00000000][86,10,00000000][0,0,00000000]
[  446.730000] =MHX(ieee80211_tx_status)(F:40000650)(ack_sig:56)[6,1,00000008][ffffffff,0,00000008][ffffffff,0,00000008][ffffffff,0,00000000]
[  447.720000] =MHX(ath9k_hw_set_txdesc)(T:0):[86,11,00000000][85,10,00000000][86,10,00000000][0,0,00000000]
[  447.730000] =MHX(ieee80211_tx_status)(F:40000650)(ack_sig:60)[6,1,00000008][ffffffff,0,00000008][ffffffff,0,00000008][ffffffff,0,00000000]
[  448.720000] =MHX(ath9k_hw_set_txdesc)(T:0):[86,11,00000000][85,10,00000000][86,10,00000000][0,0,00000000]
[  448.730000] =MHX(ieee80211_tx_status)(F:40000650)(ack_sig:33)[6,2,00000008][ffffffff,0,00000008][ffffffff,0,00000008][ffffffff,0,00000000]
[  449.720000] =MHX(ath9k_hw_set_txdesc)(T:0):[86,11,00000000][85,10,00000000][86,10,00000000][0,0,00000000]
[  449.730000] =MHX(ath9k_hw_set_txdesc)(T:0):[86,11,00000000][85,10,00000000][86,10,00000000][0,0,00000000]
[  449.740000] =MHX(ath9k_hw_set_txdesc)(T:0):[86,11,00000000][85,10,00000000][86,10,00000000][0,0,00000000]
[  449.750000] =MHX(ath9k_hw_set_txdesc)(T:0):[86,11,00000000][85,10,00000000][86,10,00000000][0,0,00000000]
[  449.760000] =MHX(ath9k_hw_set_txdesc)(T:0):[b,1,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  449.770000] =MHX(ieee80211_tx_status)(F:40000458)(ack_sig:2097152)[6,11,00000008][5,10,00000008][6,11,00000008][ffffffff,0,00000000]		//RSSI drops to about 15, retried by h/w totally 33 times.
[  449.780000] =MHX(ath9k_hw_set_txdesc)(T:0):[86,11,00000000][85,10,00000000][82,10,00000000][0,0,00000000]
[  449.790000] =MHX(ieee80211_tx_status)(F:40010219)(ack_sig:15)[0,1,00000000][ffffffff,0,00000000][ffffffff,0,00000000][ffffffff,0,00000000]
[  449.800000] =MHX(ath9k_hw_set_txdesc)(T:0):[b,1,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  449.810000] =MHX(ieee80211_tx_status)(F:40000458)(ack_sig:2097152)[6,11,00000008][5,10,00000008][2,11,00000008][ffffffff,0,00000000]
[  449.820000] =MHX(ieee80211_tx_status)(F:40010019)(ack_sig:53477376)[0,2,00000000][ffffffff,0,00000000][ffffffff,0,00000000][ffffffff,0,00000000]
[  450.720000] =MHX(ath9k_hw_set_txdesc)(T:0):[87,11,00000000][86,10,00000000][81,10,00000000][0,0,00000000]
[  450.730000] =MHX(ath9k_hw_set_txdesc)(T:0):[87,11,00000000][86,10,00000000][81,10,00000000][0,0,00000000]
[  450.740000] =MHX(ath9k_hw_set_txdesc)(T:0):[87,11,00000000][86,10,00000000][81,10,00000000][0,0,00000000]
[  450.750000] =MHX(ath9k_hw_set_txdesc)(T:0):[87,11,00000000][86,10,00000000][81,10,00000000][0,0,00000000]
[  450.760000] =MHX(ath9k_hw_set_txdesc)(T:0):[87,11,00000000][86,10,00000000][81,10,00000000][0,0,00000000]
[  450.770000] =MHX(ath9k_hw_set_txdesc)(T:0):[b,1,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  450.780000] =MHX(ieee80211_tx_status)(F:40000458)(ack_sig:2097152)[7,11,00000008][6,10,00000008][1,11,00000008][ffffffff,0,00000000]
[  450.790000] =MHX(ath9k_hw_set_txdesc)(T:0):[87,11,00000000][85,10,00000000][81,10,00000000][0,0,00000000]
[  450.800000] =MHX(ieee80211_tx_status)(F:40010019)(ack_sig:53477376)[0,2,00000000][ffffffff,0,00000000][ffffffff,0,00000000][ffffffff,0,00000000]
[  450.810000] =MHX(ath9k_hw_set_txdesc)(T:0):[b,1,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  450.820000] =MHX(ieee80211_tx_status)(F:40000458)(ack_sig:2097152)[7,11,00000008][5,10,00000008][1,11,00000008][ffffffff,0,00000000]
[  450.830000] =MHX(ieee80211_tx_status)(F:40010219)(ack_sig:19)[0,1,00000000][ffffffff,0,00000000][ffffffff,0,00000000][ffffffff,0,00000000]
[  451.720000] =MHX(ath9k_hw_set_txdesc)(T:0):[87,11,00000000][85,10,00000000][81,10,00000000][0,0,00000000]
[  451.730000] =MHX(ath9k_hw_set_txdesc)(T:0):[87,11,00000000][85,10,00000000][81,10,00000000][0,0,00000000]
[  451.740000] =MHX(ath9k_hw_set_txdesc)(T:0):[87,11,00000000][85,10,00000000][81,10,00000000][0,0,00000000]
[  451.750000] =MHX(ieee80211_tx_status)(F:40000658)(ack_sig:19)[7,11,00000008][5,10,00000008][1,2,00000008][ffffffff,0,00000000]
[  451.760000] =MHX(ath9k_hw_set_txdesc)(T:0):[b,1,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  451.770000] =MHX(ieee80211_tx_status)(F:40000650)(ack_sig:19)[7,11,00000008][5,10,00000008][1,1,00000008][ffffffff,0,00000000]
[  451.780000] =MHX(ieee80211_tx_status)(F:40010019)(ack_sig:53477376)[0,2,00000000][ffffffff,0,00000000][ffffffff,0,00000000][ffffffff,0,00000000]
[  452.720000] =MHX(ath9k_hw_set_txdesc)(T:0):[86,11,00000000][85,10,00000000][82,10,00000000][0,0,00000000]
[  452.740000] =MHX(ath9k_hw_set_txdesc)(T:0):[86,11,00000000][85,10,00000000][82,10,00000000][0,0,00000000]
[  452.750000] =MHX(ieee80211_tx_status)(F:40000658)(ack_sig:19)[6,11,00000008][5,10,00000008][2,1,00000008][ffffffff,0,00000000]
[  452.760000] =MHX(ath9k_hw_set_txdesc)(T:0):[b,1,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  452.770000] =MHX(ieee80211_tx_status)(F:40010219)(ack_sig:19)[0,1,00000000][ffffffff,0,00000000][ffffffff,0,00000000][ffffffff,0,00000000]
[  453.720000] =MHX(ath9k_hw_set_txdesc)(T:0):[82,11,00000000][81,10,00000000][82,10,00000000][0,0,00000000]
[  453.730000] =MHX(ieee80211_tx_status)(F:40000650)(ack_sig:18)[2,2,00000008][ffffffff,0,00000008][ffffffff,0,00000008][ffffffff,0,00000000]


root@UserDevice:~# echo 1 > sys/kernel/debug/ieee80211/phy0/rc/d_max_rate_retry			//On AP
root@UserDevice:~# [ 1122.520000] =MHX(ath9k_hw_set_txdesc)(T:0):[85,2,00000000][80,2,00000000][85,1,00000000][0,0,00000000]
[ 1122.530000] =MHX(ieee80211_tx_status)(F:40000218)(ack_sig:61)[5,1,00000008][ffffffff,0,00000008][ffffffff,0,00000008][ffffffff,0,00000000]
[ 1122.540000] =MHX(ath9k_hw_set_txdesc)(T:0):[b,1,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[ 1122.550000] =MHX(ath9k_hw_set_txdesc)(T:0):[b,1,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[ 1122.560000] =MHX(ieee80211_tx_status)(F:4000001a)(ack_sig:53477376)[0,2,00000000][ffffffff,0,00000000][ffffffff,0,00000000][ffffffff,0,00000000]
[ 1122.570000] =MHX(ieee80211_tx_status)(F:4000021a)(ack_sig:61)[0,1,00000000][ffffffff,0,00000000][ffffffff,0,00000000][ffffffff,0,00000000]
[ 1123.520000] =MHX(ath9k_hw_set_txdesc)(T:0):[86,1,00000000][80,2,00000000][85,1,00000000][0,0,00000000]
[ 1123.530000] =MHX(ieee80211_tx_status)(F:40001650)(ack_sig:60)[6,1,00000008][0,2,00000008][ffffffff,0,00000008][ffffffff,0,00000000]
[ 1124.520000] =MHX(ath9k_hw_set_txdesc)(T:0):[85,2,00000000][80,1,00000000][85,1,00000000][0,0,00000000]
[ 1124.530000] =MHX(ieee80211_tx_status)(F:40000650)(ack_sig:60)[5,1,00000008][ffffffff,0,00000008][ffffffff,0,00000008][ffffffff,0,00000000]
[ 1125.520000] =MHX(ath9k_hw_set_txdesc)(T:0):[87,1,00000000][80,1,00000000][85,1,00000000][0,0,00000000]
[ 1125.530000] =MHX(ieee80211_tx_status)(F:40001650)(ack_sig:60)[7,1,00000008][ffffffff,0,00000008][ffffffff,0,00000008][ffffffff,0,00000000]
[ 1126.520000] =MHX(ath9k_hw_set_txdesc)(T:0):[87,2,00000000][85,1,00000000][87,1,00000000][0,0,00000000]
[ 1126.530000] =MHX(ieee80211_tx_status)(F:40000650)(ack_sig:59)[7,1,00000008][ffffffff,0,00000008][ffffffff,0,00000008][ffffffff,0,00000000]
[ 1127.520000] =MHX(ath9k_hw_set_txdesc)(T:0):[87,2,00000000][85,1,00000000][87,1,00000000][0,0,00000000]
[ 1127.530000] =MHX(ath9k_hw_set_txdesc)(T:0):[87,2,00000000][85,1,00000000][87,1,00000000][0,0,00000000]
[ 1127.540000] =MHX(ieee80211_tx_status)(F:40000650)(ack_sig:35)[7,1,00000008][ffffffff,0,00000008][ffffffff,0,00000008][ffffffff,0,00000000]
[ 1127.550000] =MHX(ath9k_hw_set_txdesc)(T:0):[87,2,00000000][85,1,00000000][87,1,00000000][0,0,00000000]
[ 1127.560000] =MHX(ath9k_hw_set_txdesc)(T:0):[87,2,00000000][85,1,00000000][87,1,00000000][0,0,00000000]
[ 1127.570000] =MHX(ieee80211_tx_status)(F:40000658)(ack_sig:35)[7,1,00000008][ffffffff,0,00000008][ffffffff,0,00000008][ffffffff,0,00000000]
[ 1128.530000] =MHX(ath9k_hw_set_txdesc)(T:0):[87,2,00000000][85,1,00000000][87,1,00000000][0,0,00000000]
[ 1128.540000] =MHX(ath9k_hw_set_txdesc)(T:0):[87,2,00000000][85,1,00000000][87,1,00000000][0,0,00000000]
[ 1128.550000] =MHX(ath9k_hw_set_txdesc)(T:0):[87,2,00000000][85,1,00000000][87,1,00000000][0,0,00000000]
[ 1128.550000] =MHX(ath9k_hw_set_txdesc)(T:0):[87,2,00000000][85,1,00000000][87,1,00000000][0,0,00000000]
[ 1128.560000] =MHX(ath9k_hw_set_txdesc)(T:0):[87,2,00000000][85,1,00000000][87,1,00000000][0,0,00000000]
[ 1128.570000] =MHX(ath9k_hw_set_txdesc)(T:0):[87,2,00000000][85,1,00000000][87,1,00000000][0,0,00000000]
[ 1128.580000] =MHX(ath9k_hw_set_txdesc)(T:0):[87,2,00000000][85,1,00000000][87,1,00000000][0,0,00000000]
[ 1128.590000] =MHX(ath9k_hw_set_txdesc)(T:0):[b,1,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[ 1128.600000] =MHX(ieee80211_tx_status)(F:40000458)(ack_sig:2097152)[7,2,00000008][5,1,00000008][7,2,00000008][ffffffff,0,00000000]
[ 1128.610000] =MHX(ieee80211_tx_status)(F:40010019)(ack_sig:53477376)[0,2,00000000][ffffffff,0,00000000][ffffffff,0,00000000][ffffffff,0,00000000]
[ 1129.530000] =MHX(ath9k_hw_set_txdesc)(T:0):[87,2,00000000][85,1,00000000][87,1,00000000][0,0,00000000]
[ 1129.540000] =MHX(ath9k_hw_set_txdesc)(T:0):[87,2,00000000][85,1,00000000][87,1,00000000][0,0,00000000]
[ 1129.550000] =MHX(ath9k_hw_set_txdesc)(T:0):[87,2,00000000][85,1,00000000][87,1,00000000][0,0,00000000]
[ 1129.550000] =MHX(ath9k_hw_set_txdesc)(T:0):[87,2,00000000][85,1,00000000][87,1,00000000][0,0,00000000]
[ 1129.560000] =MHX(ath9k_hw_set_txdesc)(T:0):[87,2,00000000][85,1,00000000][87,1,00000000][0,0,00000000]
[ 1129.570000] =MHX(ath9k_hw_set_txdesc)(T:0):[87,2,00000000][85,1,00000000][87,1,00000000][0,0,00000000]
[ 1129.580000] =MHX(ath9k_hw_set_txdesc)(T:0):[87,2,00000000][85,1,00000000][87,1,00000000][0,0,00000000]
[ 1129.590000] =MHX(ath9k_hw_set_txdesc)(T:0):[87,2,00000000][85,1,00000000][87,1,00000000][0,0,00000000]
[ 1129.600000] =MHX(ath9k_hw_set_txdesc)(T:0):[b,1,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[ 1129.610000] =MHX(ieee80211_tx_status)(F:40000458)(ack_sig:2097152)[7,2,00000008][5,1,00000008][7,2,00000008][ffffffff,0,00000000]
[ 1129.620000] =MHX(ieee80211_tx_status)(F:40010019)(ack_sig:53477376)[0,2,00000000][ffffffff,0,00000000][ffffffff,0,00000000][ffffffff,0,00000000]
[ 1130.530000] =MHX(ath9k_hw_set_txdesc)(T:0):[87,2,00000000][85,1,00000000][87,1,00000000][0,0,00000000]
[ 1130.540000] =MHX(ath9k_hw_set_txdesc)(T:0):[87,2,00000000][85,1,00000000][87,1,00000000][0,0,00000000]
[ 1130.550000] =MHX(ath9k_hw_set_txdesc)(T:0):[87,2,00000000][85,1,00000000][87,1,00000000][0,0,00000000]
[ 1130.550000] =MHX(ath9k_hw_set_txdesc)(T:0):[87,2,00000000][85,1,00000000][87,1,00000000][0,0,00000000]
[ 1130.560000] =MHX(ath9k_hw_set_txdesc)(T:0):[87,2,00000000][85,1,00000000][87,1,00000000][0,0,00000000]
[ 1130.570000] =MHX(ath9k_hw_set_txdesc)(T:0):[87,2,00000000][85,1,00000000][87,1,00000000][0,0,00000000]
[ 1130.580000] =MHX(ath9k_hw_set_txdesc)(T:0):[87,2,00000000][85,1,00000000][87,1,00000000][0,0,00000000]
[ 1130.590000] =MHX(ath9k_hw_set_txdesc)(T:0):[87,2,00000000][85,1,00000000][87,1,00000000][0,0,00000000]
[ 1130.600000] =MHX(ath9k_hw_set_txdesc)(T:0):[b,1,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[ 1130.610000] =MHX(ieee80211_tx_status)(F:40000458)(ack_sig:2097152)[7,2,00000008][5,1,00000008][7,2,00000008][ffffffff,0,00000000]
[ 1130.620000] =MHX(ieee80211_tx_status)(F:40010019)(ack_sig:53477376)[0,2,00000000][ffffffff,0,00000000][ffffffff,0,00000000][ffffffff,0,00000000]
[ 1131.530000] =MHX(ath9k_hw_set_txdesc)(T:0):[87,2,00000000][85,1,00000000][80,1,00000000][0,0,00000000]
[ 1131.540000] =MHX(ath9k_hw_set_txdesc)(T:0):[87,2,00000000][85,1,00000000][80,1,00000000][0,0,00000000]
[ 1131.550000] =MHX(ieee80211_tx_status)(F:40000658)(ack_sig:17)[7,2,00000008][5,1,00000008][0,1,00000008][ffffffff,0,00000000]
[ 1131.560000] =MHX(ath9k_hw_set_txdesc)(T:0):[b,1,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[ 1131.560000] =MHX(ieee80211_tx_status)(F:40010019)(ack_sig:53477376)[0,2,00000000][ffffffff,0,00000000][ffffffff,0,00000000][ffffffff,0,00000000]

root@UserDevice:~# echo 1 > sys/kernel/debug/ieee80211/phy0/rc/d_max_rates 
root@UserDevice:~# cat sys/kernel/debug/ieee80211/phy0/rc/d_max_rates 
1
root@UserDevice:~# [  722.240000] =MHX(ath9k_hw_set_txdesc)(T:0):[b,1,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  722.240000] =MHX(ieee80211_tx_status)(F:4000021a)(ack_sig:56)[0,1,00000000][ffffffff,0,00000000][ffffffff,0,00000000][ffffffff,0,00000000]
[  722.900000] =MHX(ath9k_hw_set_txdesc)(T:0):[85,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  722.910000] =MHX(ieee80211_tx_status)(F:40000110)(ack_sig:2097152)[5,1,00000008][ffffffff,0,00000008][ffffffff,0,00000000][ffffffff,0,00000000]
[  722.920000] =MHX(ath9k_hw_set_txdesc)(T:0):[85,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  722.930000] =MHX(ieee80211_tx_status)(F:40088218)(ack_sig:57)[5,1,00000008][ffffffff,0,00000008][ffffffff,0,00000000][ffffffff,0,00000000]
[  722.950000] =MHX(ath9k_hw_set_txdesc)(T:0):[b,1,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  722.960000] =MHX(ath9k_hw_set_txdesc)(T:0):[b,1,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  722.960000] =MHX(ieee80211_tx_status)(F:4000021a)(ack_sig:57)[0,1,00000000][ffffffff,0,00000000][ffffffff,0,00000000][ffffffff,0,00000000]
[  722.980000] =MHX(ieee80211_tx_status)(F:4000021a)(ack_sig:55)[0,1,00000000][ffffffff,0,00000000][ffffffff,0,00000000][ffffffff,0,00000000]
[  723.860000] =MHX(ath9k_hw_set_txdesc)(T:0):[85,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  723.870000] =MHX(ieee80211_tx_status)(F:40000650)(ack_sig:57)[5,1,00000008][ffffffff,0,00000008][ffffffff,0,00000000][ffffffff,0,00000000]
[  723.880000] =MHX(ath9k_hw_set_txdesc)(T:0):[85,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  723.890000] =MHX(ieee80211_tx_status)(F:40000650)(ack_sig:57)[5,1,00000008][ffffffff,0,00000008][ffffffff,0,00000000][ffffffff,0,00000000]
[  723.900000] =MHX(ath9k_hw_set_txdesc)(T:0):[85,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  723.910000] =MHX(ath9k_hw_set_txdesc)(T:0):[85,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  723.920000] =MHX(ieee80211_tx_status)(F:40000650)(ack_sig:56)[5,1,00000008][ffffffff,0,00000008][ffffffff,0,00000000][ffffffff,0,00000000]
[  723.930000] =MHX(ieee80211_tx_status)(F:40000650)(ack_sig:56)[5,1,00000008][ffffffff,0,00000008][ffffffff,0,00000000][ffffffff,0,00000000]
[  723.940000] =MHX(ath9k_hw_set_txdesc)(T:0):[85,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  723.950000] =MHX(ieee80211_tx_status)(F:40000650)(ack_sig:56)[5,1,00000008][ffffffff,0,00000008][ffffffff,0,00000000][ffffffff,0,00000000]
[  724.200000] =MHX(ath9k_hw_set_txdesc)(T:0):[b,1,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  724.200000] =MHX(ieee80211_tx_status)(F:4000021e)(ack_sig:-128)[0,1,00000000][ffffffff,0,00000000][ffffffff,0,00000000][ffffffff,0,00000000]
[  724.910000] =MHX(ath9k_hw_set_txdesc)(T:0):[b,1,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  724.910000] =MHX(ath9k_hw_set_txdesc)(T:0):[85,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  724.920000] =MHX(ieee80211_tx_status)(F:4000021e)(ack_sig:-128)[0,1,00000000][ffffffff,0,00000000][ffffffff,0,00000000][ffffffff,0,00000000]
[  724.930000] =MHX(ieee80211_tx_status)(F:40000650)(ack_sig:56)[5,1,00000008][ffffffff,0,00000008][ffffffff,0,00000000][ffffffff,0,00000000]		//Only tried once at one rate
[  725.270000] =MHX(ath9k_hw_set_txdesc)(T:0):[b,1,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  725.270000] =MHX(ieee80211_tx_status)(F:4000021e)(ack_sig:-128)[0,1,00000000][ffffffff,0,00000000][ffffffff,0,00000000][ffffffff,0,00000000]
[  725.910000] =MHX(ath9k_hw_set_txdesc)(T:0):[b,1,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  725.920000] =MHX(ieee80211_tx_status)(F:40001650)(ack_sig:56)[0,1,00000000][ffffffff,0,00000008][ffffffff,0,00000000][ffffffff,0,00000000]
[  726.700000] =MHX(ath9k_hw_set_txdesc)(T:0):[b,1,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  726.700000] =MHX(ieee80211_tx_status)(F:4000021e)(ack_sig:-128)[0,1,00000000][ffffffff,0,00000000][ffffffff,0,00000000][ffffffff,0,00000000]
[  726.910000] =MHX(ath9k_hw_set_txdesc)(T:0):[85,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  726.920000] =MHX(ieee80211_tx_status)(F:40000650)(ack_sig:56)[5,1,00000008][ffffffff,0,00000008][ffffffff,0,00000000][ffffffff,0,00000000]
[  727.240000] =MHX(ath9k_hw_set_txdesc)(T:0):[b,1,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  727.240000] =MHX(ieee80211_tx_status)(F:4000021e)(ack_sig:-128)[0,1,00000000][ffffffff,0,00000000][ffffffff,0,00000000][ffffffff,0,00000000]
[  727.310000] =MHX(ath9k_hw_set_txdesc)(T:0):[b,1,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  727.310000] =MHX(ieee80211_tx_status)(F:4000021e)(ack_sig:-128)[0,1,00000000][ffffffff,0,00000000][ffffffff,0,00000000][ffffffff,0,00000000]
[  727.910000] =MHX(ath9k_hw_set_txdesc)(T:0):[85,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  727.920000] =MHX(ieee80211_tx_status)(F:40000650)(ack_sig:37)[5,1,00000008][ffffffff,0,00000008][ffffffff,0,00000000][ffffffff,0,00000000]
[  727.930000] =MHX(ath9k_hw_set_txdesc)(T:0):[85,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  727.940000] =MHX(ieee80211_tx_status)(F:40000650)(ack_sig:38)[5,1,00000008][ffffffff,0,00000008][ffffffff,0,00000000][ffffffff,0,00000000]
[  728.590000] =MHX(ath9k_hw_set_txdesc)(T:0):[d,1,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  728.600000] =MHX(ieee80211_tx_status)(F:4000021e)(ack_sig:-128)[5,1,00000000][ffffffff,0,00000000][ffffffff,0,00000000][ffffffff,0,00000000]
[  728.890000] =MHX(ath9k_hw_set_txdesc)(T:0):[85,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  728.890000] =MHX(ath9k_hw_set_txdesc)(T:0):[85,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  728.900000] =MHX(ath9k_hw_set_txdesc)(T:0):[85,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  728.910000] =MHX(ath9k_hw_set_txdesc)(T:0):[85,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  728.920000] =MHX(ath9k_hw_set_txdesc)(T:0):[85,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  728.930000] =MHX(ieee80211_tx_status)(F:40000658)(ack_sig:41)[5,1,00000008][ffffffff,0,00000008][ffffffff,0,00000000][ffffffff,0,00000000]
[  728.940000] =MHX(ieee80211_tx_status)(F:40000650)(ack_sig:42)[5,1,00000008][ffffffff,0,00000008][ffffffff,0,00000000][ffffffff,0,00000000]
[  729.500000] =MHX(ath9k_hw_set_txdesc)(T:0):[b,1,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  729.500000] =MHX(ieee80211_tx_status)(F:4000021e)(ack_sig:-128)[0,1,00000000][ffffffff,0,00000000][ffffffff,0,00000000][ffffffff,0,00000000]
[  729.920000] =MHX(ath9k_hw_set_txdesc)(T:0):[85,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  729.920000] =MHX(ath9k_hw_set_txdesc)(T:0):[85,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  729.930000] =MHX(ath9k_hw_set_txdesc)(T:0):[85,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  729.940000] =MHX(ath9k_hw_set_txdesc)(T:0):[85,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  729.950000] =MHX(ath9k_hw_set_txdesc)(T:0):[85,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  729.960000] =MHX(ath9k_hw_set_txdesc)(T:0):[85,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  729.970000] =MHX(ath9k_hw_set_txdesc)(T:0):[85,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  729.980000] =MHX(ath9k_hw_set_txdesc)(T:0):[85,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  729.990000] =MHX(ath9k_hw_set_txdesc)(T:0):[85,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  730.000000] =MHX(ath9k_hw_set_txdesc)(T:0):[85,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  730.010000] =MHX(ath9k_hw_set_txdesc)(T:0):[85,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  730.010000] =MHX(ath9k_hw_set_txdesc)(T:0):[b,1,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  730.020000] =MHX(ieee80211_tx_status)(F:40000458)(ack_sig:2097152)[5,3,00000008][ffffffff,0,00000008][ffffffff,0,00000000][ffffffff,0,00000000]	//Only tried 3 times at single rate
[  730.040000] =MHX(ieee80211_tx_status)(F:40010019)(ack_sig:53477376)[0,2,00000000][ffffffff,0,00000000][ffffffff,0,00000000][ffffffff,0,00000000]
[  730.920000] =MHX(ath9k_hw_set_txdesc)(T:0):[85,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  730.920000] =MHX(ath9k_hw_set_txdesc)(T:0):[85,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  730.930000] =MHX(ath9k_hw_set_txdesc)(T:0):[85,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  730.940000] =MHX(ath9k_hw_set_txdesc)(T:0):[85,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  730.950000] =MHX(ath9k_hw_set_txdesc)(T:0):[85,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  730.960000] =MHX(ath9k_hw_set_txdesc)(T:0):[85,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  730.970000] =MHX(ath9k_hw_set_txdesc)(T:0):[85,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  730.980000] =MHX(ath9k_hw_set_txdesc)(T:0):[85,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  730.990000] =MHX(ath9k_hw_set_txdesc)(T:0):[85,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  731.000000] =MHX(ath9k_hw_set_txdesc)(T:0):[85,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  731.010000] =MHX(ath9k_hw_set_txdesc)(T:0):[85,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  731.020000] =MHX(ath9k_hw_set_txdesc)(T:0):[85,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  731.020000] =MHX(ath9k_hw_set_txdesc)(T:0):[b,1,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  731.030000] =MHX(ieee80211_tx_status)(F:40000458)(ack_sig:2097152)[5,3,00000008][ffffffff,0,00000008][ffffffff,0,00000000][ffffffff,0,00000000]
[  731.050000] =MHX(ieee80211_tx_status)(F:40010019)(ack_sig:53477376)[0,2,00000000][ffffffff,0,00000000][ffffffff,0,00000000][ffffffff,0,00000000]
[  731.920000] =MHX(ath9k_hw_set_txdesc)(T:0):[86,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  731.920000] =MHX(ath9k_hw_set_txdesc)(T:0):[86,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  731.930000] =MHX(ath9k_hw_set_txdesc)(T:0):[86,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  731.940000] =MHX(ath9k_hw_set_txdesc)(T:0):[86,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  731.950000] =MHX(ath9k_hw_set_txdesc)(T:0):[86,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  731.960000] =MHX(ath9k_hw_set_txdesc)(T:0):[86,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  731.970000] =MHX(ath9k_hw_set_txdesc)(T:0):[86,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  731.980000] =MHX(ath9k_hw_set_txdesc)(T:0):[86,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  731.990000] =MHX(ath9k_hw_set_txdesc)(T:0):[86,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  732.000000] =MHX(ath9k_hw_set_txdesc)(T:0):[86,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  732.010000] =MHX(ath9k_hw_set_txdesc)(T:0):[86,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  732.010000] =MHX(ath9k_hw_set_txdesc)(T:0):[86,2,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  732.020000] =MHX(ath9k_hw_set_txdesc)(T:0):[b,1,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  732.030000] =MHX(ieee80211_tx_status)(F:40000458)(ack_sig:2097152)[6,3,00000008][ffffffff,0,00000008][ffffffff,0,00000000][ffffffff,0,00000000]
[  732.050000] =MHX(ieee80211_tx_status)(F:40010019)(ack_sig:53477376)[0,2,00000000][ffffffff,0,00000000][ffffffff,0,00000000][ffffffff,0,00000000]
[  734.070000] =MHX(ath9k_hw_set_txdesc)(T:0):[b,1,00000000][0,0,00000000][0,0,00000000][0,0,00000000]
[  734.070000] =MHX(ieee80211_tx_status)(F:4000021a)(ack_sig:14)[0,1,00000000][ffffffff,0,00000000][ffffffff,0,00000000][ffffffff,0,00000000]

Feb 23, 2016
In ar9003_set_txdesc(struct ath_hw *ah, void *ds, struct ath_tx_info *i)[drivers/net/wireless/ath/ath9k/ar9003_mac.c], the i->rates (struct ath9k_11n_rate_series rates[4]) is set into TX descriptors.<----ath_hw_ops *ops->set_txdesc()<--- ath9k_hw_set_txdesc()<--- ath_tx_fill_desc()

struct ath9k_11n_rate_series {
        u32 Tries;
        u32 Rate;
        u32 PktDuration;
        u32 ChSel;
        u32 RateFlags;
};

In ath_buf_set_rate()
                if (rates[i].flags & IEEE80211_TX_RC_MCS) {
                        /* MCS rates */
                        (ath_tx_info *)info->rates[i].Rate = rix | 0x80;		//MCS rate is not a direct index. See "MAC Rate Encodings" in datasheet.
                        info->rates[i].ChSel = ath_txchainmask_reduction(sc,
                                        ah->txchainmask, info->rates[i].Rate);
                        info->rates[i].PktDuration = ath_pkt_duration(sc, rix, len,
                                 is_40, is_sgi, is_sp);
                        if (rix < 8 && (tx_info->flags & IEEE80211_TX_CTL_STBC))
                                info->rates[i].RateFlags |= ATH9K_RATESERIES_STBC;
                        continue;
                }

After transmission, the TX status is stored in ieee80211_tx_info.status.rates[]. This can be check in ieee80211_tx_status() by:
    printk("=MHX(%s)(F:%08x)(ack_sig:%d)[%x,%d,%08x][%x,%d,%08x][%x,%d,%08x][%x,%d,%08x]\n", __func__, info->flags,info->status.ack_signal,info->status.rates[0].idx,info->status.rates[0].count,info->status.rates[0].flags,
           info->status.rates[1].idx,info->status.rates[1].count,info->status.rates[1].flags,
           info->status.rates[2].idx,info->status.rates[2].count,info->status.rates[2].flags,
           info->status.rates[3].idx,info->status.rates[3].count,info->status.rates[3].flags);

Note the TX descriptor status is firstly processed by ar9003_hw_proc_txdesc() in ath9k driver.


Feb 22,2016
PWii: Tried to turn on GreenField mode in config file by "option ht_capab [HT-greenfield]" but it never showed up in the final var/run/hostapd-phy0.conf. Because the ht_capab=[SHORT-GI-20][SHORT-GI-40][RX-STBC1][DSSS_CCK-40] list is from "iw phy "$phy" info | grep 'Capabilities" which gets the HW capabilities by NL80211_BAND_ATTR_HT_CAPA. PWii doesn't have the HW capability of "RX Greenfield".
Greenfield in protocol is optional and ath9k doesn't support it. 

This info can be seen in sta_ht_capa_read() function in net/mac80211/debugfs_sta.c as well.

1162 /* 802.11n HT capabilities masks (for cap_info) */
1163 #define IEEE80211_HT_CAP_LDPC_CODING            0x0001
1164 #define IEEE80211_HT_CAP_SUP_WIDTH_20_40        0x0002
1165 #define IEEE80211_HT_CAP_SM_PS                  0x000C
1166 #define         IEEE80211_HT_CAP_SM_PS_SHIFT    2
1167 #define IEEE80211_HT_CAP_GRN_FLD                0x0010	//Green field capability
1168 #define IEEE80211_HT_CAP_SGI_20                 0x0020
1169 #define IEEE80211_HT_CAP_SGI_40                 0x0040
1170 #define IEEE80211_HT_CAP_TX_STBC                0x0080
1171 #define IEEE80211_HT_CAP_RX_STBC                0x0300
1172 #define         IEEE80211_HT_CAP_RX_STBC_SHIFT  8
1173 #define IEEE80211_HT_CAP_DELAY_BA               0x0400
1174 #define IEEE80211_HT_CAP_MAX_AMSDU              0x0800
1175 #define IEEE80211_HT_CAP_DSSSCCK40              0x1000
1176 #define IEEE80211_HT_CAP_RESERVED               0x2000
1177 #define IEEE80211_HT_CAP_40MHZ_INTOLERANT       0x4000
1178 #define IEEE80211_HT_CAP_LSIG_TXOP_PROT         0x8000
1179 
1180 /* 802.11n HT extended capabilities masks (for extended_ht_cap_info) */
1181 #define IEEE80211_HT_EXT_CAP_PCO                0x0001
1182 #define IEEE80211_HT_EXT_CAP_PCO_TIME           0x0006
1183 #define         IEEE80211_HT_EXT_CAP_PCO_TIME_SHIFT     1
1184 #define IEEE80211_HT_EXT_CAP_MCS_FB             0x0300
1185 #define         IEEE80211_HT_EXT_CAP_MCS_FB_SHIFT       8
1186 #define IEEE80211_HT_EXT_CAP_HTC_SUP            0x0400
1187 #define IEEE80211_HT_EXT_CAP_RD_RESPONDER       0x0800

About the RTS/CTS:
                 if (rates[i].flags & IEEE80211_TX_RC_USE_RTS_CTS) {
                         info->rates[i].RateFlags |= ATH9K_RATESERIES_RTS_CTS;
                         info->flags |= ATH9K_TXDESC_RTSENA;
                 } else if (rates[i].flags & IEEE80211_TX_RC_USE_CTS_PROTECT) {
                         info->rates[i].RateFlags |= ATH9K_RATESERIES_RTS_CTS;
                         info->flags |= ATH9K_TXDESC_CTSENA;
                 }
By removing the IEEE80211_TX_RC_USE_RTS_CTS in minstrel_ht.c, sniffer confirmed no so RTS is sent anymore. But when the connection deteriates, a lot of BlockAckReq from AP is captured by sniffer.

AddBlockAckReq and AddBlockAckResp are transmitted by ACTION packets.

Feb 20, 2016
In HT Mixed mode: At the PHY layer, HT Protection requires 802.11n devices to transmit a legacy format preamble, followed by an HT format preamble. At the MAC layer, HT Protection requires 802.11n devices to announce their intent to transmit by sending legacy format CTS-to-self or RTS/CTS frames. HT Protection significantly reduces an 802.11n WLAN's overall throughput. 

#define ATH_MAX_SW_RETRIES      30

Feb 18,2016
In pDDL:
nl80211_parse_mcast_rate(struct cfg80211_registered_device *rdev,
			 int mcast_rate[IEEE80211_NUM_BANDS],
			 int rateval)
{
	struct wiphy *wiphy = &rdev->wiphy;
	bool found = false;
	int band, i;

	for (band = 0; band < IEEE80211_NUM_BANDS; band++) {
		struct ieee80211_supported_band *sband;

		printk("===MHX 2.1: rateval=%d. \n", rateval);
		sband = wiphy->bands[band];
		if (!sband)
			continue;

		printk("===MHX 2.2: rateval=%d. \n", rateval);
		for (i = 0; i < sband->n_bitrates; i++) {
			printk("===MHX 2.3: i=%d.bitrate=%d \n", i, sband->bitrates[i].bitrate);
			if (sband->bitrates[i].bitrate == rateval) {
				mcast_rate[band] = i + 1;
				found = true;
				printk("===MHX 2.4: \n");
				break;
			}
		}
	}

	printk("===MHX 2.4: found=%d\n", found);
	return found;
}

root@UserDevice:~# iw wlan0 set mcast_rate 999
[ 9294.200000] ===MHX 1.1: AP controls mcast rate!!!dev->ieee80211_ptr->iftype=3
[ 9294.210000] ===MHX 1.2: AP controls mcast rate!!!dev->ieee80211_ptr->iftype=3
[ 9294.210000] ===MHX 2.1: rateval=9990. 
[ 9294.220000] ===MHX 2.2: rateval=9990. 
[ 9294.220000] ===MHX 2.3: i=0.bitrate=60 
[ 9294.230000] ===MHX 2.3: i=1.bitrate=90 
[ 9294.230000] ===MHX 2.3: i=2.bitrate=120 
[ 9294.230000] ===MHX 2.3: i=3.bitrate=180 
[ 9294.240000] ===MHX 2.3: i=4.bitrate=240 
[ 9294.240000] ===MHX 2.3: i=5.bitrate=360 
[ 9294.240000] ===MHX 2.1: rateval=9990. 
[ 9294.250000] ===MHX 2.1: rateval=9990. 
[ 9294.250000] ===MHX 2.4: found=0
[ 9294.260000] ===MHX 1.3: nla_rate=9990. parse_mcast_rate error! 
Only 6,9,12,18,24 and 36 are open corresponding to [0..5]. This should be mapped to HT MCS[0..5] if it is set in HT mode(guess so).

Feb 17,2016
Ventana board from Gateworks for iMX6 openwrt. The Gateworks Ventana product family utilizes the Freescale i.MX6 CPU offering a large variety of peripherals, especially focused on video and audio. 
Gateworks supports OWT but only Yocto is Full-featured, recommended for video applications using gstreamer.Recommended for users needing graphics output (either GUI or raw Video) or Video encode/decode/transcode and streaming.(http://trac.gateworks.com/wiki/ventana#BoardSupportPackagesBSPSoftware)

It supports Buildroot too but the video support is not as complete as Yocto.

Feb 11, 2016
PWii bullet plus v1.3.0 build 1012, dual SIM, hotspotsystem. When switching SIM card to switch carrier, the hotspot client is navigated to log in page and need to re-login. 
Try the worldspot.net, after login, switch SIM, the client device is navigated to the login page and just need to click the "Click here to connect" button and then can go surf the internet.

Feb 9, 2016
HS UART1 on AR9344 driver,115200 baud rate:
[   57.210000] ar934x-hs-uart.0: ttyATH0 at MMIO 0x18500000 (irq = 14) is a AR934X UART
[   57.210000] ==MHX(ath_hs_uart_init)1.1
[   57.210000] ==MHX(ath_hs_uart_init)1.2. SWITCH_CLOCK_SPARE_ADDRESS=000005f0
[   57.210000] ==MHX(ath_hs_uart_init)1.3. ATH_HS_UART_INT_EN=00000001
[   57.210000] ==MHX(ath_hs_uart_init)1.4. ATH_GPIO_OUT_FUNCTION2=4f180000
[   57.210000] ==MHX(ath_hs_uart_init)1.5. ATH_GPIO_OUT_FUNCTION3=00005000
[   57.210000] ==MHX(ath_hs_uart_init)1.6. ATH_GPIO_OE=0032d300
[   57.210000] ==MHX(ath_hs_uart_init)1.7. ATH_GPIO_IN_ENABLE9=0e0c0000
[   57.210000] ==MHX(ath_hs_uart_init)1.8. ATH_HS_UART_CLK=0008054e
[   57.210000] ==MHX(ath_hs_uart_init)1.9. ATH_HS_UART_CS=00002384
[   57.210000] step 0x54e scale 0x8

Checked in package/openwrt-misc/ath-hs-uart.

Feb 8, 2016
Use PWii buildroot to build the sam9x5 image:
1. make menuconfig :
Target System (Atmel AT91)  ---> 
Target Profile (Atmel AT91SAM9X25-EK)  ---> 
2. The cmdline and MTD partitions are defined in DTB table: arch/arm/boot/dts/at91sam9x5ek.dtsi
        chosen {
        bootargs = "mem=128M console=ttyS0,115200 root=/dev/mtdblock3 rootfstype=squashfs,jffs2 noinitrd loglevel=10 mtdparts=spi0.0:512k(u-boot)ro,256k(u-boot-env),256k(u-boot-env-bak),1M(kernel),2M(rootfs)";
        };

                        spi0: spi@f0000000 {
                                status = "okay";
                                cs-gpios = <&pioA 14 0>, <0>, <0>, <0>;
                                m25p80@0 {
                                        compatible = "atmel,at25df321a";
                                        spi-max-frequency = <50000000>;
                                        reg = <0>;
                                        uboot@0 {
                                           label = "U-Boot";
                                           reg = <0x0 0x80000>;
                                        };
                                        env@80000 {
                                           label = "Env";
                                           reg = <0x80000 0x80000>;
                                        };
                                        kernel@100000 {
                                           label = "Kernel";
                                           reg = <0x100000 0x100000>;
                                        };
                                        rootfs@200000 {
                                           label = "rootfs";
                                           reg = <0x200000 0x200000>;  /* jin changed 0xBC0000 to 0x19C0000 */
                                        };

                                };
                        };

Burn the rootfs to 0x200000~0x400000.
3. Busybox choose getty.
4. package/base-files/files/etc/inittab:
::sysinit:/etc/init.d/rcS S boot
::shutdown:/etc/init.d/rcS K shutdown

ttyS0::respawn:/sbin/getty 115200 ttyS0 vt100
ttyS1::respawn:/sbin/getty 115200 ttyS1 vt100
Actually ttyS0 is used.

Choose the SAM9x5ED board boot from SPI flash instead of NAND by setting SW1 to "10".

Feb 5,2016
3 ways to build at91sam9x5-ex image:
1. Use generic buildroot and apply at91 patches: http://www.at91.com/linux4sam/bin/view/Linux4SAM/BuildRoot_9x5
2. Directly use the AT91 git https://github.com/linux4sam/buildroot-at91, refer to http://www.at91.com/linux4sam/bin/view/Linux4SAM/BuildRootBuild#How_to_build_Buildroot_for_AT91.
3. Build the Angstrom: http://www.at91.com/linux4sam/bin/view/Linux4SAM/BuildAngstrom_9x5
4. Trunk OpenWRT supports AT91--->ARMv5--->AT91SAM9x25. AT91SAM9X5-EK is the eval board name. On this eval board some CPU modules can be used. SAM9X25 is a member of the Atmel ® | SMART series of 400 MHz ARM926EJ-STM embedded microprocessor units.

When tftp server works you can see it by ps:

[Jeff@DENG0080-2 tmp]$ ps aux | grep ftp | grep -v grep
root      1577  0.0  0.0   6516   528 ?        Ss   14:21   0:00 /usr/sbin/vsftpd /etc/vsftpd/vsftpd.conf
root      3768  0.0  0.0   2484   696 ?        Ss   14:47   0:00 in.tftpd -s /tftpboot -c
Config file : 
[Jeff@DENG0080-2 tmp]$ cat /etc/xinetd.d/tftp 
# default: off
# description: The tftp server serves files using the trivial file transfer \
#	protocol.  The tftp protocol is often used to boot diskless \
#	workstations, download configuration files to network-aware printers, \
#	and to start the installation process for some operating systems.
service tftp
{
	disable	= no
	socket_type		= dgram
	protocol		= udp
	wait			= yes
	user			= root
	server			= /usr/sbin/in.tftpd
	server_args		= -s /tftpboot -c
	per_source		= 11
	cps			= 100 2
	flags			= IPv4
}
[Jeff@DENG0080-2 tmp]$ sudo service xinetd restart
Stopping xinetd:                                           [  OK  ]
Starting xinetd:                                           [  OK  ]
[Jeff@DENG0080-2 tmp]$ ll /
drwxrwxrwx    2 root root  4096 Feb  5 14:52 tftpboot

When test locally, use the IP address instead of "localhost" otherwise it doesn't work.

After tested locally put/get successfully, connect Target to HOST but still failed to tftpboot in UBoot. Check HOST:
[Jeff@DENG0080-2 tmp]$ ifconfig
eth1      Link encap:Ethernet  HWaddr 00:0E:C6:89:41:BE  
          inet addr:192.168.168.100  Bcast:192.168.168.255  Mask:255.255.255.0
          inet6 addr: fe80::20e:c6ff:fe89:41be/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1492  Metric:1
[Jeff@DENG0080-2 tmp]$ sudo ifconfig eth1 mtu 1500 up
[Jeff@DENG0080-2 tmp]$ ifconfig eth1
eth1      Link encap:Ethernet  HWaddr 00:0E:C6:89:41:BE  
          inet addr:192.168.168.100  Bcast:192.168.168.255  Mask:255.255.255.0
          inet6 addr: fe80::20e:c6ff:fe89:41be/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
Increase MTU to 1500 solved the problem.

Jan 29, 2016
About minstrel_ht.c.
.rate_update = minstrel_ht_rate_update() should not be called periodically and it happenes when Bandwidth is changed.
So the path still is .tx_status = minstrel_ht_tx_status ---> 1. minstrel_get_ratestats()
							---> 2. minstrel_ht_update_stats() if after 100mS. mr->retry_updated = false.
							---> 3. minstrel_ht_update_rates() if (update). ---> minstrel_ht_set_rate(), when (offset > 0), use retry_count_rtscts.--->minstrel_calc_retransmit(),mr->retry_updated = true.

Test this on pDDL. HT20 mode, BW=4MHz, -63dBm. PC2--->PC1 iperf -c 192.168.168.248 -i 2 -w 256k -M 1500 -t 100 -b 13M -u.
AP RateRetry	STA RateRetry	AP Retries	STA Retries	Jitter	PacketLoss	Throughput
	1		1		430		83	0.605mS		15%		10.9M
	5		5		699		288	0.949mS		15%		10.9M
	10		10		656		211	1.486mS		13%		10.2M

The iw retry show comes from the debugfs and from sta->tx_retry_count in status.c.

Jan 28,2016
minstrel_alloc(): Run once even switch bg-->n-->bg.
minstrel_rate_init() : Run 2 times when switch bg-->n-->bg. Every time get into bg mode this function runs once (no more than once).
This is the log when do the 2 switches:
[   24.540000] ==MHX5.1(ath9k_set_hw_capab). max_rates=4, max_rate_tries=10
[   24.590000] ==MHX1.0(minstrel_alloc). This only happens in module load. mp->dbg_max_rate_retry=835112a8
[   61.120000] ==MHX2.0(minstrel_rate_init). how many minstrel_rate_inits?
[   61.120000] ==MHX2.1(minstrel_rate_init). mr->adjusted_retry_count= mr->retry_count=1
[   61.130000] ==MHX2.1(minstrel_rate_init). mr->adjusted_retry_count= mr->retry_count=1
[   61.140000] ==MHX2.1(minstrel_rate_init). mr->adjusted_retry_count= mr->retry_count=2
[   61.150000] ==MHX2.1(minstrel_rate_init). mr->adjusted_retry_count= mr->retry_count=4
[   61.150000] ==MHX2.1(minstrel_rate_init). mr->adjusted_retry_count= mr->retry_count=3
[   61.160000] ==MHX2.1(minstrel_rate_init). mr->adjusted_retry_count= mr->retry_count=4
[   61.170000] ==MHX2.1(minstrel_rate_init). mr->adjusted_retry_count= mr->retry_count=5
[   61.180000] ==MHX2.1(minstrel_rate_init). mr->adjusted_retry_count= mr->retry_count=5
[   61.190000] ==MHX2.1(minstrel_rate_init). mr->adjusted_retry_count= mr->retry_count=6
[   61.190000] ==MHX2.1(minstrel_rate_init). mr->adjusted_retry_count= mr->retry_count=6
[   61.200000] ==MHX2.1(minstrel_rate_init). mr->adjusted_retry_count= mr->retry_count=6
[   61.210000] ==MHX2.1(minstrel_rate_init). mr->adjusted_retry_count= mr->retry_count=6
[  316.290000] ==MHX2.0(minstrel_rate_init). how many minstrel_rate_inits?
[  316.290000] ==MHX2.1(minstrel_rate_init). mr->adjusted_retry_count= mr->retry_count=1
[  316.300000] ==MHX2.1(minstrel_rate_init). mr->adjusted_retry_count= mr->retry_count=1
[  316.310000] ==MHX2.1(minstrel_rate_init). mr->adjusted_retry_count= mr->retry_count=2
[  316.320000] ==MHX2.1(minstrel_rate_init). mr->adjusted_retry_count= mr->retry_count=4
[  316.320000] ==MHX2.1(minstrel_rate_init). mr->adjusted_retry_count= mr->retry_count=3
[  316.330000] ==MHX2.1(minstrel_rate_init). mr->adjusted_retry_count= mr->retry_count=4
[  316.340000] ==MHX2.1(minstrel_rate_init). mr->adjusted_retry_count= mr->retry_count=5
[  316.350000] ==MHX2.1(minstrel_rate_init). mr->adjusted_retry_count= mr->retry_count=5
[  316.360000] ==MHX2.1(minstrel_rate_init). mr->adjusted_retry_count= mr->retry_count=6
[  316.360000] ==MHX2.1(minstrel_rate_init). mr->adjusted_retry_count= mr->retry_count=6
[  316.370000] ==MHX2.1(minstrel_rate_init). mr->adjusted_retry_count= mr->retry_count=6
[  316.380000] ==MHX2.1(minstrel_rate_init). mr->adjusted_retry_count= mr->retry_count=6

minstrel_update_stats--->minstrel_update_rates() is called every 100ms(default). In minstrel_update_rates():
printk(KERN_INFO "===[%d,%d],[%d,%d],[%d,%d],[%d,%d]\n", ratetbl->rate[0].idx, ratetbl->rate[0].count,ratetbl->rate[1].idx, ratetbl->rate[1].count,ratetbl->rate[2].idx, ratetbl->rate[2].count,ratetbl->rate[3].idx, ratetbl->rate[3].count);
In HT-minstrel, it is in minstrel_ht_update_rates():
printk(KERN_INFO "===[%d,%d],[%d,%d],[%d,%d],[%d,%d]\n", rates->rate[0].idx, rates->rate[0].count,rates->rate[1].idx, rates->rate[1].count,rates->rate[2].idx, rates->rate[2].count,rates->rate[3].idx, rates->rate[3].count);


can show all 4 rates used (in bg mode).

Jan 27, 2016
Tune the
        hw->max_rates = 4;
        hw->max_rate_tries = 10;

values and proof it with sniffer. Procedure: 1. Reduce TX power to 0dBm on both sides to make sure they ONLY connect by a coax cable. 2. Try UDP iperf as in Jan 25 and run sniffer at the same time to capture packets. 3. Suddenly disconnect the coax cable to sniff the retries. 4. Check the UDP QoS SN# to figure how many retries being made. 5. Check the Radiotap with of same SN# packets and compare their rates. NOTE: Those same SN# retries should be done by the H/W chip in its Tx descriptor word 13 and 14 settings and is irrelavant to S/W. 
The test is in BG mode, Auto rate control.

					Same SN# Retries	Rates in Retries
max_rates=1, max_rate_tries=1			2~3		Start at high rates 18M or 36M and later drop to 6M and 9M etc, But no change. and end at 1M. So 2 rates.
Have error message:
[  403.600000] WARNING: at /home/Jeff/project-2/work/pwii-content-filter/build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/compat-wireless-2014-05-22/drivers/net/
wireless/ath/ath9k/xmit.c:2423 ath_stoprecv+0x848/0x1158 [ath9k]()
[  403.620000] CPU: 0 PID: 0 Comm: swapper Tainted: G        W    3.10.36 #14
[  403.630000] Call Trace:
[  403.630000] [<8006dd40>] show_stack+0x48/0x70
[  403.630000] [<80076544>] warn_slowpath_common+0x78/0xa8
[  403.640000] [<800765fc>] warn_slowpath_null+0x18/0x24
[  403.640000] [<82966ff4>] ath_stoprecv+0x848/0x1158 [ath9k]

max_rates=2, max_rate_tries=1			3~5		Can see max 3 rates tried. Mostly end with 1M.Max retry time is about 2.6mS.
Have same error message as above on AP.

max_rates=4, max_rate_tries=1			5~7 can see 12	Max 4 rates retried including 1M and ending at 1M. Max retry time is 34mS with 12 retries.
No error messages.
max_rates=4, max_rate_tries=10(default)				Max 4 rates retried including 1M and ending at 1M. Max retry time is 141.9mS with 25 retries. A same rate is used about 7~9  times in a same SN#.


Jan 26, 2016
In net/wireless/ath/ath9k/main.c:
2355 
2356 struct ieee80211_ops ath9k_ops = {
2357         .tx                 = ath9k_tx,
2358         .start              = ath9k_start,
2359         .stop               = ath9k_stop,
2360         .add_interface      = ath9k_add_interface,
...
}

The [rate, count] pairs finally go into Tx Descriptor Word 13 and 14: TX_TRIES[0..3] and tx_rate[0..3]. Refer to drivers/net/wireless/ath/ath9k/mac.h : AR_XmitDataTries[0..3] and AR_XmitRate[0..3].

Jan 25,2016
PWii. PC2--->AP--->STA--->PC1, open air, WDS=0,HT20 mode,Auto rate.
PC2: iperf -c 192.168.168.248 -i 2 -w 256k -M 1500 -t 100 -b 10M -u.
PC1: iperf -s -i 2 -w 256k -u
					AP tx retries:		IperfReport(Client side)			Comment
max_rates=4, max_rate_tries=1		4431			10.0 Mbits/sec   0.678 ms   15/85034 (0.018%)
max_rates=4, max_rate_tries=10		8859			9.99 Mbits/sec   1.030 ms   6857/85034 (8.1%)	So many ACKs to AP mac.
max_rates=4, max_rate_tries=3		4755			10.0 Mbits/sec   1.466 ms    7/85034 (0.0082%)	So many ACKs to AP mac
max_rates=4, max_rate_tries=0											AP-STA don't ping
max_rates=4, max_rate_tries=6		2630			10.0 Mbits/sec   0.674 ms   3409/85034 (4%)	So many ACKs to AP mac
max_rates=4, max_rate_tries=1		6137			10.0 Mbits/sec   0.693 ms   6805/85034 (8%)	So many ACKs to AP mac


Jan 26
max_rates=1, max_rate_tries=1		17706			9.64 Mbits/sec   1.230 ms 3040/85035 (3.6%)	So many ACKs to AP mac
max_rates=4, max_rate_tries=10		17820			10.0 Mbits/sec   0.586 ms   29/85035 (0.034%)	So many ACKs to AP mac

Change to non-HT mode and connect with wire+attnuator:



Jan21, 2018
In src/drivers/net/wireless/ath/ath9k/init.c:  ath9k_set_hw_capab():

        hw->queues = 4;
        hw->max_rates = 4;
        hw->max_listen_interval = 1;
        hw->max_rate_tries = 10;


In net/mac80211/tx.c,  ieee80211_subif_start_xmit() ---> ieee80211_xmit() ---> ieee80211_tx() ---> invoke_tx_handlers()--->ieee80211_tx_h_rate_ctrl()---> rate_control_get_rate()[in net/mac80211/rate.c]---> 1.1 ref->ops->get_rate = minstrel_get_rate() [in net/mac80211/rc80211_minstrel.c], 
												 			    ---> 1.2 ieee80211_get_tx_rates() [in net/mac80211/rate.c]

In rate_control_get_rate() function, add debug info:

	ref->ops->get_rate(ref->priv, ista, priv_sta, txrc);

	if (sdata->local->hw.flags & IEEE80211_HW_SUPPORTS_RC_TABLE){
        printk(KERN_INFO "==MHX1.1(%s). hw flgs=0x%X\n", __func__, sdata->local->hw.flags);
		return;
    }

    printk(KERN_INFO "==MHX1.2(%s). idx=%d, cnt=%d, flags=0x%x\n", __func__, info->control.rates[0].idx, info->control.rates[0].count,info->control.rates[0].flags);
	ieee80211_get_tx_rates(&sdata->vif, ista, txrc->skb,
			       info->control.rates,
			       ARRAY_SIZE(info->control.rates));

In Auto Tx rate on both Master&Slave. And found it ALWAYS goes through 1.1 and never seen 1.2.
[  529.910000] ==MHX1.1(rate_control_get_rate). hw flgs=0x9042B46
[  530.010000] ==MHX1.1(rate_control_get_rate). hw flgs=0x9042B46
[  530.110000] ==MHX1.1(rate_control_get_rate). hw flgs=0x9042B46
[  530.210000] ==MHX1.1(rate_control_get_rate). hw flgs=0x9042B46
[  530.320000] ==MHX1.1(rate_control_get_rate). hw flgs=0x9042B46
[  530.420000] ==MHX1.1(rate_control_get_rate). hw flgs=0x9042B46
[  530.470000] ==MHX1.1(rate_control_get_rate). hw flgs=0x9042B46
[  530.520000] ==MHX1.1(rate_control_get_rate). hw flgs=0x9042B46
[  530.620000] ==MHX1.1(rate_control_get_rate). hw flgs=0x9042B46
[  530.720000] ==MHX1.1(rate_control_get_rate). hw flgs=0x9042B46
[  530.830000] ==MHX1.1(rate_control_get_rate). hw flgs=0x9042B46
[  530.930000] ==MHX1.1(rate_control_get_rate). hw flgs=0x9042B46
[  531.030000] ==MHX1.1(rate_control_get_rate). hw flgs=0x9042B46
[  531.130000] ==MHX1.1(rate_control_get_rate). hw flgs=0x9042B46
[  531.240000] ==MHX1.1(rate_control_get_rate). hw flgs=0x9042B46
[  531.340000] ==MHX1.1(rate_control_get_rate). hw flgs=0x9042B46

Change both sides fixed Tx rates and got the same print out. MHX1.2 never showed up.

Jan 19,2016

About retry:
iw [options] phy <phyname> set retry [short <limit>] [long <limit>]
root@UserDevice:~# cat sys/kernel/debug/ieee80211/phy0/short_retry_limit 
2
root@UserDevice:~# cat sys/kernel/debug/ieee80211/phy0/long_retry_limit 
2

short_rtry_limit --->wiphy->retry_short---> ieee80211_local *local->hw.conf.short_frame_max_tx_count = wiphy->retry_short ---> 
ieee80211_tx_info *info->control.rates[0].count = txrc->hw->conf.short_frame_max_tx_count; in net/mac80211/rc80211_pid_algo.c, which is actually NOT used actually. We use minstrel that has its Retry Chain mechanism and maybe not using the short_rtry_limit. 

Refer to include/net/mac80211.h:
 * @short_frame_max_tx_count: Maximum number of transmissions for a "short"
 *      frame, called "dot11ShortRetryLimit" in 802.11, but actually means the
 *      number of transmissions not the number of retries



The same mcast rate control mechanism works in PWii doesn't work in pDDL.Maybe because of the rate index is not the same as PWii. The iperf throughput always always roughly 3Mbps no matter what the iw wlan0 set mcast_rate X rate is. Per Frank, the pDDL mcast rate uses unicast rates and should be in MCS rates. This differenciates pDDL and PWii.

Verified in pDDL, WDS=0 no ack mode, iperf -c 224.0.0.100 -T 32 -i 2 -b 10m -t 9999 -u, traffic AP--->STA, PC2--->PC1, set AP Tx fixed rate vir WebUI.

TxRate with iw dump on AP		Iperf mcast throughput measured
	58.5Mbps MCS6				4.4Mbps ~ 6.6Mbps
	39Mbps	 MCS4				2.8Mbps ~ 3.2Mbps
	13Mbps	 MCS1				1.1Mbps ~ 1.6Mbps

Jan 18,2016
Test a mix WDS mode :
PC1 multicast <--->STA ~~~~~~open air~~~~~~~ AP<----->PC2
PC3 multicast <--->STA2 ~~~~~~open air~~~~~~~
	AP	STA	STA2	mcast traffic1		mcast traffic2		iw wlan0 set mcast_rate 	Comments
WDS	1	0	0	Data DA=RA=mcast	n/a			works well			STA, STA2 Tx LED off.Beacon&ProbResp@basic rate 1M
WDS	1	1	0	QoS RA=STA w/ ACK	Data DA=RA=mcast	works only for traffic2		STA Tx LED blinks, STA Tx LED off. Very bad iperf mcat throughput
WDS	0	1	0	Data DA=RA=mcast	n/a			works well			AP-STA doesn't ping. AP-STA2 works.Both LEDs off.Beacon&ProbResp@basic rate 1M


iw set mcast_rate commnd with HT mode:
iw wlan0 set mcast_rate		Dbg info						Sniffer Rate	Iperf mcast throughput		Estimated mcast Tx rate
	1			(rate_control_send_low)mcast_rate=1,mcast rates=[1,0]	1Mbps		150Kbps				1Mbps
	2			(rate_control_send_low)mcast_rate=2,mcast rates=[2,0]	2Mbps		300Kbps				2M
	5.5			(rate_control_send_low)mcast_rate=3,mcast rates=[3,0]	5.5Mbps		700K				5.5M
	11			(rate_control_send_low)mcast_rate=4,mcast rates=[4,0]	11Mbps		1.7Mbps				11M
	6			(rate_control_send_low)mcast_rate=5,mcast rates=[5,0]	6Mbps		1Mbps				6M
	9			(rate_control_send_low)mcast_rate=6,mcast rates=[6,0]	9Mbps		2Mbps				9M
	24			(rate_control_send_low)mcast_rate=9,mcast rates=[9,0]	24Mbps		3.5Mbps				24M
	54			(rate_control_send_low)mcast_rate=12,mcast rates=[12,0]	54Mbps		8Mbps				54M

Looks like the mcast can not use MCS rates. In HT mode it uses the same index as not-ht.

In pDDL, same mechanism works except the rates are only[6,9,12,18,24,36] and the indexs are [1..6]. Testified in rate_control_send_low() function in rate.c in HT mode:

                if (!pubsta && txrc->bss) {
                        mcast_rate = txrc->bss_conf->mcast_rate[sband->band];
#ifdef CONFIG_ATH9K_LINKRATE
                        printk("===MHX 3.1. use mcast rate %d\n", mcast_rate);
                        // Microhard: only apply mcast rate to mcast traffic.
                        if ((mcast_rate > 0) && (add[0]==1)) {
#else
                        if (mcast_rate > 0) {
#endif



Jan 14, 2016

Test under WDS = 0.

1. iw wlan0 set mcast_rate 54 is supposed to be used with IBSS and MESH mode ONLY. Change nl80211_set_mcast_rate() function in /net/wireless/nl80211.c so that it accpts the AP mode:

	if (dev->ieee80211_ptr->iftype != NL80211_IFTYPE_ADHOC &&
	    dev->ieee80211_ptr->iftype != NL80211_IFTYPE_MESH_POINT &&
	    dev->ieee80211_ptr->iftype != NL80211_IFTYPE_AP)
		return -EOPNOTSUPP;
Update cfg80211.ko and test with sniffer. mcast is sent from AP at 54Mbps and iperf mcast throughput is about 10Mbps. But AP sending Beacon at 54Mbps as well, which is not expected. And the ProbeResponse is @54Mbps too which is weird becuase that response is a unicast mgmt frame. Ping QoS packets are in data rates.

Conclusion: The built in iw set mcast_rate can work only with IBSS and MESH mode. When used in AP mode, even broadcast and management frames rates are changed to it.

2. AP config changes to :
config wifi-device 'radio0'
        option type 'mac80211'
        option bwmode '20mHz'
        option txpower '20'
        option distance '100'
        option frag '2346'
        option rts '2346'
        option fragoff '1'
        option rtsoff '1'
        option path 'platform/ar933x_wmac'
        option txaggr '1'
        option disabled '0'
        option sgi '1'
        option noscan '0'
        option channel '5'
        option hwmode '11g'
        option htmode 'NONE'
        option basic_rate 48000 54000

We can get:
root@UserDevice:~# cat var/run/hostapd-phy0.conf 
driver=nl80211
logger_syslog=127
logger_syslog_level=2
logger_stdout=127
logger_stdout_level=2
hw_mode=g
basic_rates=480
channel=5

Test mcast rate from AP is @48Mbps. Beacon and ProbeResponse frames are all @48Mbps.

3. In STA wireless config file:
config wifi-iface
        option device 'radio0'
        option ifname 'wlan0'
        option network 'lan'
        option bonding '0'
        option wmm '1'
        option rate 'auto'
        option mesh_id 'PWii-mesh-j'
        option hidden '0'
        option isolate '0'
        option macfilter 'none'

        option ssid 'PWii-jeff-ack-1'
        option mode 'sta'
        option encryption 'psk2'
        option key '1234qazw'
        option wds '0'
        option mcast_rate 48000 
And we get:
root@UserDevice:~# cat var/run/wpa_supplicant-wlan0.conf 
network={
        scan_ssid=1
        ssid="PWii-jeff-ack-1"
        key_mgmt=WPA-PSK
        psk="1234qazw"
        proto=RSN
        mcast_rate=48
}
Looks like it will work in STA mode but this parameter only used in wpa_driver_nl80211_ibss() function. This matches the driver side that mcast_rate only works in IBSS and MESH modes. Did't test it.

******************************************************
Test the ath5k mcast fix rate in old VIP2 board (ath9k mcast fix rate not implemented there). 
AP: VIP2 + Microhard 2.4G radio (ath5k). v2.2.0 build 2016. TX rate=auto, WDS=1, 
STA: The same PWii STA as previous test, WDS=0.
	Cmd					mcast Data rate in sniffer RadioTap		Becaon Rate	ProbeResp Rate	iperf unicast data Rate	iperf mcast throughput(PC2--->PC1)
root@VIP2:~# testmode wlan0 mcast set 6			12M					1M		1M		54M			6M
root@VIP2:~# testmode wlan0 mcast set 2			5.5M					1M		1M		54M			1.5M
root@VIP2:~# testmode wlan0 mcast set 4			6M					1M		1M		54M			3M

In all 3 situations the unicast throughput is unchanged about 10Mbps.

Conclusion: 1.Old ath5k driver can control mcast and broadcast/management frame rate seperately by the testmode mcast command.
2. When AP WDS=1 and send mcast data the DA=RA=mcast address. This is different with the PWii driver.

Jan 13, 2016
Test multiple STAs' affect to multicast throughput. none-ht mode.
PC1 multicast <--->STA ~~~~~~open air~~~~~~~ AP<----->PC2
PC3 multicast <--->STA2 ~~~~~~open air~~~~~~~

1. WDS=0, PC2 multicast ---> PC1 (AP--->STA)
On AP side, contron the multicast rate by:
root@UserDevice:~# cat /var/run/hostapd-phy0.conf 
driver=nl80211
logger_syslog=127
logger_syslog_level=2
logger_stdout=127
logger_stdout_level=2
hw_mode=g
channel=5
noscan=0
basic_rates=240 480 540	//multicast and broadcast rate control

AP Tx LED doesn't blink (most probably a broken LED), STA STA2 Tx LEDs don't blink. PC2 to PC1 multicast throughput 5.2Mbps. wifi down on STA2, the throughput remains at 5.2Mbps.

2. WDS=1, PC2 multicast ---> PC1 (AP--->STA)
AP Tx LED doesn't blink (most probably a broken LED), STA STA2 Tx LEDs all blink. But STA blinks more intensely than the bystander STA2. Use sniffer, we see 

		SA	TA	RA	DA	RadioTapRate	IperfThroughPut
QoS Data	PC2	AP	STA	mcast	54M		6.5Mbps
ACK		na	na	AP	na	24M		6.5Mbps
QoS Data	PC2	AP	STA2	mcast	54M		6.5Mbps		//much less than STA Qos Data.
ACK		na	na	AP	na	24M		6.5Mbps

It is noticed that in the 20.6 second sniffer acquisition, the QoS data to STA2 is 5177packets versus to STA's 31959 packets. That means RA=STA2 accounts for 14% of the total mcast QoS traffic. 

Then wifi down on STA2 and the throughput gets higher about 7.5Mbps, which is about 15% jump. 

STA2 joins to mcast maybe related the IGMP protocol. If it doesn't join the mcast it may not affect the throughput supposely.

When adding one more STA3 in a remote site, all 3 STAs' TX LED blink, the throughput drops to 100Kbps. In sniffer we see 3 QoS data streams RA to all 3 stations. But with WDS=0, 3 stations, throughput still reaches 6Mbps.


Jan 11, 2016

Repeat Jan 8,2016 test but with BG only mode.

NOTE: AP TX LED doesn't blink maybe because of a broken LED.


1. PC2 multicast ---> PC1: (AP--->STA)
1.1 WDS = 0 on pX2 boards.
The 2nd STA TX LED doesn't blink.
The PX2 board ACK LEDs (labeled as TX ) don't blink. But the STA TX LED blinks a little bit sometimes. 
Normal data packets are seen:
		SA	TA	RA	DA	RadioTapRate	IperfThroughPut
Data		PC2	AP	mcast	mcast	1Mbps		300Kbps
ACK		na	na	na	na	na		300Kbps			NO ACK to AP!



1.2 WDS = 1 on pX2 boards.
One thing is noted, another STA is associated to AP and not PC connected to it, when WDS=1 and AP multicast, the TX LED of the 2nd STA blinks too. No matter the traffic is frm AP--->STA or opposite. 
STA TX LED blinks very fast. AP TX LED doesn't blink. In sniffer, every QoS mcast data has a ACK:
		SA	TA	RA	DA	RadioTapRate	IperfThroughPut
QoS Data	PC2	AP	STA	mcast	54Mbps		7.4Mbps
ACK		na	na	AP	na	24Mbps		7.4Mbps

2. PC1 multicast ---> PC2: (STA ---> AP)
2.1 WDS = 0 on pX2 boards.
The 2nd STA TX LED doesn't blink.

STA TX LED blinks very fast. AP TX LED doesn't blink. 
First mcast stream is QoS data:
		SA	TA	RA	DA	RadioTapRate	IperfThroughPut(PC1 to PC2)
QoS Data	STA	STA	AP	mcast	54Mbps		280Kbps
ACK		na	na	STA	na	24Mbps		280Kbps

The second mcast stream is normal data:
		SA	TA	RA	DA	RadioTapRate	IperfThroughPut
Data		STA	AP	mcast	mcast	1Mbps		280Kbps
ACK		na	na	na	na	na		280KBps		No ACK to AP!

2.2 WDS = 1 on pX2 boards.
One thing is noted, another STA is associated to AP and not PC connected to it, when WDS=1 and AP multicast, the TX LED of the 2nd STA blinks too. No matter the traffic is frm AP--->STA or opposite. 
STA TX LED blinks very fast. AP TX LED doesn't blink. In sniffer, every QoS mcast data has a ACK. 
First mcast stream:
		SA	TA	RA	DA	RadioTapRate	IperfThroughPut(PC1 to PC2)
QoS Data	PC1	STA	AP	mcast	54Mbps		4.5Mbps
ACK		na	na	STA	na	24Mbps		4.5Mbps

The second mcast stream is:
		SA	TA	RA	DA	RadioTapRate	IperfThroughPut
QoS Data	PC1	AP	STA2	mcast	54Mbps		4.5Mbps
ACK		na	na	AP	na	24Mbps		4.5Mbps


Jan 8, 2016

NOTE: AP TX LED doesn't blink maybe because of a broken LED.

PC1 multicast <--->STA ~~~~~~open air~~~~~~~ AP<----->PC2
Both sides work in HT40- mode (11n).

In both STA and AP, should add default GW:
# route add default dev br-lan
Otherwise the multicast data only reaches br-lan and doesn't get to wlan0 interface on STA (and AP too).

Some multicast addresses may not work, in this case, we use the regular Multicast address:
$ sudo route add -net 224.0.0.0 netmask 255.0.0.0 gw 192.168.168.1
$ iperf -c 224.0.0.100 -T 32 -i 2 -b 30m -t 999999 -u
On the other PC:
$ iperf -s -B 224.0.0.100 -u -i 2 -t 99999


1. PC2 multicast ---> PC1: (AP--->STA)
1.1 WDS = 0 on pX2 boards.
The PX2 board ACK LEDs (labeled as TX ) don't blink. But the STA TX LED blinks a little bit sometimes. In sniffer, we can see mcast normal data (not QoS data) SA=PC2 MAC addr, TA=AP MAC addr, DA=RA=mcast MAC addr. We can see the ACK to the AP radio MAC address every a few seconds (not block ack). These ACKS don't have TA and SA and only RA=AP MAC addr. These don't like data ACKs. Iperf throughput is about 300Kbps very low. This means the mcast data is transmitted with basic rate of 1Mbps, which is testified by sniffer.
The data TA from AP MAC is not QOS data but normal data. There is no Block Ack is seen RA to AP MAC address.

1.2 WDS = 1 on pX2 boards.
STA TX LED blinks very fast. AP TX LED doesn't blink. In sniffer, we can see SO MANY "Block Ack" every a few milliseconds from STA MAC addr (TA) to AP MAC address (RA). We can not see any data or Qos data in sniffer!!! The iperf throughput is unbelievably high as 29.5Mbps. When push it 40Mbps the iperf throughput reaches as high as 38Mbps @ 72.2Mbps MCS7 rate SGI.

2. PC1 multicast ---> PC2: (STA ---> AP)
1.1 WDS = 0 on pX2 boards.
STA TX LED blinks very fast. AP TX LED doesn't blink. IN sniffer,we can see QoS mcast data SA=TA=STA Macaddr. RA=AP MAC addr, DA=mcast MAC addr. Radip tap says MCS2 rate. We can see SO MANY "Block Ack" every a few milliseconds from AP MAC address(TA) to STA MAC address(RA). These are Block Acks. The Iperf throughput is much higher 10Mbps. Why this is lower throughput? Because besides QoS data, we see AP is sending normal mcast data packets as well on behalf of the STA. The data packet RA=DA=mcast MAC addr, TA=AP MAC, SA=STA MAC addr. 

1.2 WDS = 1 on pX2 boards.
STA TX LED blinks very fast. AP TX LED doesn't blink. In sniffer, we see SO MANY "Block Ack" every a few dozen milliseconds from AP MAC address (TA) to STA MAC address(RA). But still NO data or Qos data in sniffer!!! The Iperf throughput is unbelievably high as 28Mbps. If push up 35Mbps it drops to 2Mbps to 10Mbps.


Jan 5,2016
To connect a Jennie board via USB cable, ftdi driver needs to be inserted with parameters:
sudo modprobe ftdi_sio vendor=0x0403 product=0x6015

[Jeff@DENG0080-2 ~]$ modinfo ftdi_sio
filename:       /lib/modules/2.6.34.9-69.fc13.i686.PAE/kernel/drivers/usb/serial/ftdi_sio.ko
license:        GPL
description:    USB FTDI Serial Converters Driver
author:         Greg Kroah-Hartman <greg@kroah.com>, Bill Ryder <bryder@sgi.com>, Kuba Ober <kuba@mareimbrium.org>, Andreas Mohr
srcversion:     5CAC403AE36E6457A38D441
alias:          usb:v20B7p0713d*dc*dsc*dp*ic*isc*ip*
alias:          usb:v0403p9868d*dc*dsc*dp*ic*isc*ip*
................
alias:          usb:v0403pABB8d*dc*dsc*dp*ic*isc*ip*
alias:          usb:v0403p9F80d*dc*dsc*dp*ic*isc*ip*
alias:          usb:v0403pFFA8d*dc*dsc*dp*ic*isc*ip*
alias:          usb:v0403pFF00d*dc*dsc*dp*ic*isc*ip*
depends:        usbserial
vermagic:       2.6.34.9-69.fc13.i686.PAE SMP mod_unload 686 
parm:           debug:Debug enabled or not (bool)
parm:           vendor:User specified vendor ID (default=0x0403) (ushort)
parm:           product:User specified product ID (ushort)
parm:           ndi_latency_timer:NDI device latency timer override (int)


Jan 4, 2016
In pDDL2 with open MESH mode, WebUI channel set to 73(2478MHz), the iwinfo and iw command can not show correct frequencies:

root@UserDevice:~# iw wlan0 info
Interface wlan0
        ifindex 21
        wdev 0xb
        addr 00:0f:92:fa:39:5f
        type mesh point
        wiphy 0
        channel 0 (2405 MHz), width: 20 MHz (no HT), center1: 2405 MHz
root@UserDevice:~# 
root@UserDevice:~# iwinfo phy0 info
phy0      ESSID: unknown
          Access Point: 00:00:00:00:00:00
          Mode: Mesh Point  Channel: unknown (2.405 GHz)
          Tx-Power: unknown  Link Quality: unknown/70
          Signal: unknown  Noise: unknown
          Bit Rate: unknown
          Encryption: unknown
          Type: nl80211  HW Mode(s): 802.11bgn
          Hardware: unknown [Generic MAC80211]
          TX power offset: unknown
          Frequency offset: unknown
          Supports VAPs: yes  PHY name: phy0

But in AP-STA mode and Authsae mode, the frequences from 2407(ch2) to 2478(ch73) are all good.

[Analysis:]AP-STA mode the channel->freq is down in hostapd. In Authsae mode the channel->freq is done in channel_to_freq() in meshd-nl80211.c. But is open mesh mode, the channel is set in /lib/netifd/wireless/mac80211.sh by iw command doesn't support irregular channels now:
root@UserDevice:~# iw wlan0 set channel 1
root@UserDevice:~# iw wlan0 set channel 0
command failed: Invalid argument (-22)
root@UserDevice:~# iw wlan0 set channel 13
root@UserDevice:~# iw wlan0 set channel 14
command failed: Invalid argument (-22)
root@UserDevice:~# iw wlan0 set channel 73
command failed: Invalid argument (-22)

Need do channel-->freq translation in iw code in util.c : ieee80211_channel_to_frequency() and ieee80211_frequency_to_channel().

Dec 31, 2015
pDDL iw command:

root@UserDevice:~# iw phy0 info
Wiphy phy0
        max # scan SSIDs: 4
        max scan IEs length: 2263 bytes
        RTS threshold: 2346
        Retry short limit: 7
        Retry long limit: 4
        Coverage class: 1 (up to 450m)
        Device supports AP-side u-APSD.
        Device supports T-DLS.
        Available Antennas: TX 0x1 RX 0x1
        Configured Antennas: TX 0x1 RX 0x1
        Supported interface modes:
                 * IBSS
                 * managed
                 * AP
                 * AP/VLAN
                 * WDS
                 * monitor
                 * mesh point
                 * P2P-client
                 * P2P-GO
        Band 1:
                Capabilities: 0x100
                        HT20
                        Static SM Power Save
                        RX STBC 1-stream
                        Max AMSDU length: 3839 bytes
                        No DSSS/CCK HT40
                Maximum RX AMPDU length 65535 bytes (exponent: 0x003)
                Minimum RX AMPDU time spacing: 8 usec (0x06)
                HT TX/RX MCS rate indexes supported: 0-7
                Frequencies:
                        * 2405 MHz [0] (30.0 dBm)
                        * 2406 MHz [0] (30.0 dBm)
                        * 2407 MHz [0] (30.0 dBm)
                        * 2408 MHz [0] (30.0 dBm)
                        * 2409 MHz [0] (30.0 dBm)
                        * 2410 MHz [0] (30.0 dBm)
                        * 2411 MHz [0] (30.0 dBm)
                        * 2412 MHz [1] (30.0 dBm)
                        * 2413 MHz [1] (30.0 dBm)
                        * 2414 MHz [1] (30.0 dBm)
                        * 2415 MHz [1] (30.0 dBm)
                        * 2416 MHz [1] (30.0 dBm)
                        * 2417 MHz [2] (30.0 dBm)
                        * 2418 MHz [2] (30.0 dBm)
                        * 2419 MHz [2] (30.0 dBm)
                        * 2420 MHz [2] (30.0 dBm)
                        * 2421 MHz [2] (30.0 dBm)
                        * 2422 MHz [3] (30.0 dBm)
                        * 2423 MHz [3] (30.0 dBm)
                        * 2424 MHz [3] (30.0 dBm)
                        * 2425 MHz [3] (30.0 dBm)
                        * 2426 MHz [3] (30.0 dBm)
                        * 2427 MHz [4] (30.0 dBm)
                        * 2428 MHz [4] (30.0 dBm)
                        * 2429 MHz [4] (30.0 dBm)
                        * 2430 MHz [4] (30.0 dBm)
                        * 2431 MHz [4] (30.0 dBm)
                        * 2432 MHz [5] (30.0 dBm)
                        * 2433 MHz [5] (30.0 dBm)
                        * 2434 MHz [5] (30.0 dBm)
                        * 2435 MHz [5] (30.0 dBm)
                        * 2436 MHz [5] (30.0 dBm)
                        * 2437 MHz [6] (30.0 dBm)
                        * 2438 MHz [6] (30.0 dBm)
                        * 2439 MHz [6] (30.0 dBm)
                        * 2440 MHz [6] (30.0 dBm)
                        * 2441 MHz [6] (30.0 dBm)
                        * 2442 MHz [7] (30.0 dBm)
                        * 2443 MHz [7] (30.0 dBm)
                        * 2444 MHz [7] (30.0 dBm)
                        * 2445 MHz [7] (30.0 dBm)
                        * 2446 MHz [7] (30.0 dBm)
                        * 2447 MHz [8] (30.0 dBm)
                        * 2448 MHz [8] (30.0 dBm)
                        * 2449 MHz [8] (30.0 dBm)
                        * 2450 MHz [8] (30.0 dBm)
                        * 2451 MHz [8] (30.0 dBm)
                        * 2452 MHz [9] (30.0 dBm)
                        * 2453 MHz [9] (30.0 dBm)
                        * 2454 MHz [9] (30.0 dBm)
                        * 2455 MHz [9] (30.0 dBm)
                        * 2456 MHz [9] (30.0 dBm)
                        * 2457 MHz [10] (30.0 dBm)
                        * 2458 MHz [10] (30.0 dBm)
                        * 2459 MHz [10] (30.0 dBm)
                        * 2460 MHz [10] (30.0 dBm)
                        * 2461 MHz [10] (30.0 dBm)
                        * 2462 MHz [11] (30.0 dBm)
                        * 2463 MHz [11] (30.0 dBm)
                        * 2464 MHz [11] (30.0 dBm)
                        * 2465 MHz [11] (30.0 dBm)
                        * 2466 MHz [11] (30.0 dBm)
                        * 2467 MHz [12] (30.0 dBm)
                        * 2468 MHz [12] (30.0 dBm)
                        * 2469 MHz [12] (30.0 dBm)
                        * 2470 MHz [12] (30.0 dBm)
                        * 2471 MHz [12] (30.0 dBm)
                        * 2472 MHz [13] (30.0 dBm)
                        * 2473 MHz [13] (30.0 dBm)
                        * 2474 MHz [13] (30.0 dBm)
                        * 2475 MHz [13] (30.0 dBm)
                        * 2476 MHz [13] (30.0 dBm)
                        * 2477 MHz [14] (30.0 dBm)
                        * 2478 MHz [14] (30.0 dBm)
                        * 2479 MHz [14] (30.0 dBm)
        valid interface combinations:
                 * #{ managed, WDS } <= 2048, #{ AP, mesh point } <= 8, #{ P2P-client, P2P-GO } <= 1, #{
 IBSS } <= 1,
                   total <= 2048, #channels <= 1, STA/AP BI must match
        HT Capability overrides:
                 * MCS: ff ff ff ff ff ff ff ff ff ff
                 * maximum A-MSDU length
                 * supported channel width
                 * short GI for 40 MHz
                 * max A-MPDU length exponent
                 * min MPDU start spacing
The root cause is in iw/src/util.c : ieee80211_frequency_to_channel(int freq). This function should follow the old DDL like this:

int ieee80211_frequency_to_channel(int freq)
{
    struct _stepOneMhz *ch;
    int i;

    if (freq>100000000) return -1;
    else freq*=1000;

    ch = stepOneMhz0; //JEFFLI: Force to mode0 so far.
    for(i=0; i<MAXSTEPONECH; i++) {
        if(ch[i].stepOneFreq == freq) {
            return ch[i].stepOneCh;
        }
    }
    return -1;
}


Dec 22,2015
Every re-auth (lifetime = 30 s;), sta_apply_parameters() in net/mac80211/cfg.c is called.
mesh_sta_info_get()---> mesh_sta_info_init() in net/mac80211/mesh_plink.c is called about every 1 second. 

Dec 21, 2015

netlink_init(&nlcfg, event_handler)[meshd-nl80211.c]--->new_candidate_handler[meshd-nl80211.c]--->process_mgmt_frame[sae.c], case IEEE802_11_FC_STYPE_ACTION:return process_ampe_frame(frame, len, me, cookie);--->process_ampe_frame[ampe.c]--->fsm_step[ampe.c]

When link is setup, kill meshd-nl80211 daemon on two sides and the conntection is still there unbroken. Ping works. But waited overnight the rate can not reach MCS rates. This overnight run indicates the meshd-nll80211 plays a role to set to MCS rate.

Dec 18,2015
Secure Mesh mode. Sniffered air packet of a MP. Compare the Beacon packets of in MCS rate and in legacy rate scanerios. The 2 packets are exactly the same. This means the air packets are all ok. The slow MCS HT rate selection should be in mesh daemon code.

Observed in secure-mesh MP2 that starts MCS rate very slow:
************Time=1183 second***********
Station 00:0f:92:fe:02:f2 (on wlan0)
        inactive time:  560 ms
        rx bytes:       475899
        rx packets:     5169
        tx bytes:       226357
        tx packets:     1714
        tx retries:     92
        tx failed:      0
        signal:         -34 [-34] dBm
        signal avg:     -33 [-33] dBm
        Toffset:        -9140556 us
        tx bitrate:     54.0 MBit/s
        rx bitrate:     65.0 MBit/s MCS 7
        mesh llid:      0
        mesh plid:      0
        mesh plink:     ESTAB
        mesh local PS mode:     ACTIVE
        mesh peer PS mode:      ACTIVE
        mesh non-peer PS mode:  ACTIVE
        authorized:     yes
        authenticated:  yes
        preamble:       long
        WMM/WME:        yes
        MFP:            yes
        TDLS peer:      no
ht not supported
************Time=1184 second***********
Station 00:0f:92:fe:02:f2 (on wlan0)
        inactive time:  560 ms
        rx bytes:       476058
        rx packets:     5171
        tx bytes:       226357
        tx packets:     1714
        tx retries:     92
        tx failed:      0
        signal:         -35 [-35] dBm
        signal avg:     -33 [-33] dBm
        Toffset:        -9140555 us
        tx bitrate:     54.0 MBit/s
        rx bitrate:     65.0 MBit/s MCS 7
        mesh llid:      0
        mesh plid:      0
        mesh plink:     ESTAB
        mesh local PS mode:     ACTIVE
        mesh peer PS mode:      ACTIVE
        mesh non-peer PS mode:  ACTIVE
        authorized:     yes
        authenticated:  yes
        preamble:       long
        WMM/WME:        yes
        MFP:            yes
        TDLS peer:      no
ht not supported
************Time=1185 second***********
Station 00:0f:92:fe:02:f2 (on wlan0)
        inactive time:  30 ms
        rx bytes:       476666
        rx packets:     5179
        tx bytes:       226549
        tx packets:     1716
        tx retries:     92
        tx failed:      0
        signal:         -32 [-32] dBm
        signal avg:     -32 [-32] dBm

        Toffset:        -9140554 us
        tx bitrate:     54.0 MBit/s
        rx bitrate:     65.0 MBit/s MCS 7
        mesh llid:      0
        mesh plid:      0
        mesh plink:     ESTAB
        mesh local PS mode:     ACTIVE
        mesh peer PS mode:      ACTIVE
        mesh non-peer PS mode:  ACTIVE
        authorized:     yes
        authenticated:  yes
        preamble:       long
        WMM/WME:        yes
        MFP:            yes
        TDLS peer:      no
ht not supported
************Time=1186 second***********
Station 00:0f:92:fe:02:f2 (on wlan0)
        inactive time:  80 ms
        rx bytes:       477343
        rx packets:     5185
        tx bytes:       226806
        tx packets:     1717
        tx retries:     92
        tx failed:      0
        signal:         -31 [-31] dBm
        signal avg:     -32 [-32] dBm
        Toffset:        -9140553 us
        tx bitrate:     54.0 MBit/s
        rx bitrate:     65.0 MBit/s MCS 7
        mesh llid:      0
        mesh plid:      0
        mesh plink:     OPN_SNT
        mesh local PS mode:     UNKNOWN
        mesh peer PS mode:      ACTIVE
        mesh non-peer PS mode:  ACTIVE
        authorized:     yes
        authenticated:  yes
        preamble:       long
        WMM/WME:        yes
        MFP:            yes
        TDLS peer:      no
ht supported
cap: 0x106e
        HT20/HT40
        SM Power Save disabled
        RX HT20 SGI
        RX HT40 SGI
        No RX STBC
        Max AMSDU length: 3839 bytes
        DSSS/CCK HT40
ampdu factor/density: 3/6
MCS mask: ff 00 00 00 00 00 00 00 00 00
MCS tx params: 1
************Time=1187 second***********
Station 00:0f:92:fe:02:f2 (on wlan0)
        inactive time:  40 ms
        rx bytes:       477763
        rx packets:     5189
        tx bytes:       227324
        tx packets:     1719
        tx retries:     92
        tx failed:      0
        signal:         -32 [-32] dBm
        signal avg:     -32 [-32] dBm
        Toffset:        -9140554 us
        tx bitrate:     54.0 MBit/s
        rx bitrate:     65.0 MBit/s MCS 7
        mesh llid:      0
        mesh plid:      0
        mesh plink:     OPN_RCVD
        mesh local PS mode:     UNKNOWN
        mesh peer PS mode:      ACTIVE
        mesh non-peer PS mode:  ACTIVE
        authorized:     yes
        authenticated:  yes
        preamble:       long
        WMM/WME:        yes
        MFP:            yes
        TDLS peer:      no
ht supported
cap: 0x106e
        HT20/HT40
        SM Power Save disabled
        RX HT20 SGI
        RX HT40 SGI
        No RX STBC
        Max AMSDU length: 3839 bytes
        DSSS/CCK HT40
ampdu factor/density: 3/6
MCS mask: ff 00 00 00 00 00 00 00 00 00
MCS tx params: 1
************Time=1188 second***********
Station 00:0f:92:fe:02:f2 (on wlan0)
        inactive time:  440 ms
        rx bytes:       477922
        rx packets:     5191
        tx bytes:       227356
        tx packets:     1720
        tx retries:     92
        tx failed:      0
        signal:         -34 [-34] dBm
        signal avg:     -32 [-32] dBm
        Toffset:        -9140553 us
        tx bitrate:     58.5 MBit/s MCS 6
        rx bitrate:     65.0 MBit/s MCS 7
        mesh llid:      0
        mesh plid:      0
        mesh plink:     ESTAB
        mesh local PS mode:     ACTIVE
        mesh peer PS mode:      ACTIVE
        mesh non-peer PS mode:  ACTIVE
        authorized:     yes
        authenticated:  yes
        preamble:       long
        WMM/WME:        yes
        MFP:            yes
        TDLS peer:      no
ht supported
cap: 0x106e
        HT20/HT40
        SM Power Save disabled
        RX HT20 SGI
        RX HT40 SGI
        No RX STBC
        Max AMSDU length: 3839 bytes
        DSSS/CCK HT40
ampdu factor/density: 3/6
MCS mask: ff 00 00 00 00 00 00 00 00 00
MCS tx params: 1
************Time=1189 second***********
Station 00:0f:92:fe:02:f2 (on wlan0)
        inactive time:  610 ms
        rx bytes:       478081
        rx packets:     5193
        tx bytes:       227617
        tx packets:     1721
        tx retries:     92
        tx failed:      0
        signal:         -34 [-34] dBm
        signal avg:     -32 [-32] dBm
        Toffset:        -9140554 us
        tx bitrate:     58.5 MBit/s MCS 6
        rx bitrate:     65.0 MBit/s MCS 7
        mesh llid:      0
        mesh plid:      0
        mesh plink:     ESTAB
        mesh local PS mode:     ACTIVE
        mesh peer PS mode:      ACTIVE
        mesh non-peer PS mode:  ACTIVE
        authorized:     yes
        authenticated:  yes
        preamble:       long
        WMM/WME:        yes
        MFP:            yes
        TDLS peer:      no
ht supported
cap: 0x106e
        HT20/HT40
        SM Power Save disabled
        RX HT20 SGI
        RX HT40 SGI
        No RX STBC
        Max AMSDU length: 3839 bytes
        DSSS/CCK HT40
ampdu factor/density: 3/6
MCS mask: ff 00 00 00 00 00 00 00 00 00
MCS tx params: 1
************Time=1190 second***********
Station 00:0f:92:fe:02:f2 (on wlan0)
        inactive time:  810 ms
        rx bytes:       478240
        rx packets:     5195
        tx bytes:       227617
        tx packets:     1721
        tx retries:     92
        tx failed:      0
        signal:         -34 [-34] dBm
        signal avg:     -33 [-33] dBm
        Toffset:        -9140553 us
        tx bitrate:     58.5 MBit/s MCS 6
        rx bitrate:     65.0 MBit/s MCS 7
        mesh llid:      0
        mesh plid:      0
        mesh plink:     ESTAB
        mesh local PS mode:     ACTIVE
        mesh peer PS mode:      ACTIVE
        mesh non-peer PS mode:  ACTIVE
        authorized:     yes
        authenticated:  yes
        preamble:       long
        WMM/WME:        yes
        MFP:            yes
        TDLS peer:      no
ht supported
cap: 0x106e
        HT20/HT40
        SM Power Save disabled
        RX HT20 SGI


Dec 9, 2015

Test PWii rate control. When option hwmode '11ng' option htmode 'HT20', only 11b and MCS rate can be set. On PWii:
root@UserDevice:~# cat /etc/config/wireless 

config wifi-device 'radio0'
        option type 'mac80211'
        option bwmode '20mHz'
        option txpower '20'
        option distance '100'
        option frag '2346'
        option rts '2346'
        option fragoff '1'
        option rtsoff '1'
        option path 'platform/ar933x_wmac'
        option txaggr '1'
        option sgi '1'
        option disabled '0'
        option noscan '0'
        option ccathresh '28'
        option forcetx '0'
        option channel '0'
        option hwmode '11ng'
        option htmode 'HT20'

config wifi-iface
        option device 'radio0'
        option ifname 'wlan0'
        option bonding '0'
        option mode 'ap'
        option encryption 'psk2'
        option key '1234567890'
        option wds '1'
        option wmm '1'
        option rate 'auto'
        option hidden '0'
        option isolate '0'
        option macfilter 'none'
        option ssid 'PWii-hotspot-jeff'
        option network 'lan'


config UCIMHT 'CHECKTAG'
        option TM '1449074700'
        option LRC 'D8'
root@UserDevice:~# 
root@UserDevice:~# 
root@UserDevice:~# cat sys/kernel/debug/ieee80211/phy0/netdev\:wlan0/stations/04\:f0\:21\:15\:be\:33/rc_stats 
type         rate     throughput  ewma prob   this prob  retry   this succ/attem
pt   success    attempts
CCK/LP        1.0M           0.7      100.0       100.0      0              1(1)         4           4
CCK/LP        2.0M           1.5      100.0       100.0      0              0(0)         1           1
CCK/LP        5.5M           3.6      100.0       100.0      0              0(0)         1           1
CCK/LP       11.0M           5.7      100.0       100.0      0              0(0)         1           1
HT20/LGI     MCS0            5.6      100.0       100.0      3              0(0)         4           4
HT20/LGI  t  MCS1           10.5      100.0       100.0      4              1(1)        19          19
HT20/LGI T P MCS2           14.8       96.4       100.0      5              1(1)       399         400
HT20/LGI     MCS3            0.0        0.0         0.0      0              0(1)         0           4
HT20/LGI     MCS4            0.0        0.0         0.0      0              0(0)         0           3
HT20/LGI     MCS5            0.0        0.0         0.0      0              0(0)         0           4
HT20/LGI     MCS6            0.0        0.0         0.0      0              0(0)         0           4
HT20/LGI     MCS7            0.0        0.0         0.0      0              0(0)         0           4

Total packet count::    ideal 402      lookaround 24

The peer is a VIP4G+Compex 11n card working in NG mode too.

When both sides set to BG mode on WebUI. on PWii:
root@UserDevice:~# cat /etc/config/wireless 

config wifi-device 'radio0'
        option type 'mac80211'
        option bwmode '20mHz'
        option txpower '20'
        option distance '100'
        option frag '2346'
        option rts '2346'
        option fragoff '1'
        option rtsoff '1'
        option path 'platform/ar933x_wmac'
        option txaggr '1'
        option sgi '1'
        option disabled '0'
        option noscan '0'
        option ccathresh '28'
        option forcetx '0'
        option channel '0'
        option hwmode '11g'
        option htmode 'NONE'

config wifi-iface
        option device 'radio0'
        option ifname 'wlan0'
        option bonding '0'
        option mode 'ap'
        option encryption 'psk2'
        option key '1234567890'
        option wds '1'
        option wmm '1'
        option rate 'auto'
        option hidden '0'
        option isolate '0'
        option macfilter 'none'
        option ssid 'PWii-hotspot-jeff'
        option network 'lan'


config UCIMHT 'CHECKTAG'
        option TM '1449075940'
        option LRC 'A3'
root@UserDevice:~# cat sys/kernel/debug/ieee80211/phy0/netdev\:wlan0/stations/04\:f0\:21\:15\:be\:33/rc_stats 
rate      throughput  ewma prob  this prob  this succ/attempt   success    attempts
       1         0.2       25.0      100.0             0(  0)         1           1
  C    2         1.5       76.2      100.0             0(  0)         8           8
   D   5.5       1.3       25.0      100.0             1(  1)         1           1
      11         0.0        0.0        0.0             0(  0)         0           0
       6         0.0        0.0        0.0             0(  0)         0           0
       9         0.0        0.0        0.0             0(  0)         0           0
 B    12        11.1       94.2      100.0             0(  0)        62          63
A   P 18        17.2       99.4      100.0             0(  0)       288         292
      24         0.0        0.0        0.0             0(  0)         0           6
      36         0.0        0.0        0.0             0(  0)         0           6
      48         0.0        0.0        0.0             0(  0)         0           6
      54         0.0        0.0        0.0             0(  0)         0           6

Total packet count::    ideal 323      lookaround 37

Tested both CCK rates and 11n rate works when using "iw dev wlan0 set bitrates legacy-2.4 5.5"

[NOTE] In NG mode, only MCS can be set. This is true in VIP4g as well when 'htmode' 'HT20' and 'hwmode' '11ng'. On VIP4g:
root@VIP4G:~# cat /etc/config/wireless 

config 'wifi-device' 'radio0'
        option 'type' 'mac80211'
        option 'wifi_type' '802.11abgn'
        option 'macaddr' '04:f0:21:15:be:33'
        option 'bwmode' '20mHz'
        option 'distance' '300'
        option 'frag' '2346'
        option 'rts' '2346'
        option 'fragoff' '1'
        option 'rtsoff' '1'
        option 'htmode' 'HT20'
        option 'txaggr' '1'
        option 'sgi' '1'
        option 'disabled' '0'
        option 'maxassoc' ''
        option 'diversity' ''
        option 'txantenna' ''
        option 'rxantenna' ''
        option 'antenna' ''
        option 'ht_capab' 'TX-STBC RX-STBC1 DSSS_CCK-40'
        option 'channel' '1'
        option 'hwmode' '11ng'

config 'wifi-iface' 'vif0'
        option 'device' 'radio0'
        option 'ifname' 'wlan0'
        option 'network' 'lan'
        option 'bonding' '0'
        option 'mesh_id' ''
        option 'txpower' '17'
        option 'wds' '1'
        option 'rate' 'auto'
        option 'encryption' 'psk2'
        option 'server' ''
        option 'port' ''
        option 'hidden' '0'
        option 'isolate' '0'
        option 'key' '1234567890'
        option 'identity' ''
        option 'password' ''
        option 'key1' ''
        option 'key2' ''
        option 'key3' ''
        option 'key4' ''
        option 'turbo' ''
        option 'macfilter' 'none'
        option 'maclist' ''
        option 'wep_passphrase' 'Ob6Mv2Gnwqemi102LLpmljgUxhHqAblY9gk1AyJot9P'
        option 'ssid' 'PWii-hotspot-jeff'
        option 'mode' 'sta'

root@VIP4G:~# cat sys/kernel/debug/ieee80211/phy0/netdev\:wlan0/stations/00\:03\
:7f\:bf\:00\:ba/rc_stats 
type      rate     throughput  ewma prob   this prob  this succ/attempt   success    attempts
HT20/LGI    MCS0        6.2      100.0      100.0          0(  0)          3           3
HT20/LGI    MCS1       11.7      100.0      100.0          0(  0)          3           3
HT20/LGI    MCS2       16.5      100.0      100.0          0(  0)          4           4
HT20/LGI    MCS3       20.8      100.0      100.0          0(  0)          2           2
HT20/LGI    MCS4       25.7       91.6       66.6          0(  0)         24          25
HT20/LGI    MCS5       24.2       71.6       33.3          0(  0)         73          92
HT20/LGI  t MCS6       28.3       78.2      100.0          0(  0)        121         151
HT20/LGI T PMCS7       35.9       92.0      100.0          1(  1)        447         596

Total packet count::    ideal 656      lookaround 21


About the secured mesh on pX2 and pDDL. wpa_supplicant 2.4 shoudl have the secure mesh mode but we're now using v2.3-devel that doesn't have that support.

On PWii


Dec 8, 2015
Mesh on PX2. PC1(iperf client)---MP1---MP2---PC2(iperf server). Both sides:
root@UserDevice:~# cat sys/module/ath9k/parameters/nohwcrypt 
1
Mem: 32908K used, 28448K free, 0K shrd, 4736K buff, 11124K cached
CPU:   1% usr   4% sys   0% nic  31% idle   0% io   0% irq  61% sirq
Load average: 0.29 0.22 0.11 1/48 5936
  PID  PPID USER     STAT   VSZ %VSZ %CPU COMMAND
    3     2 root     SW       0   0%   4% [ksoftirqd/0]
[  3] 122.0-124.0 sec  2.38 MBytes  9.96 Mbits/sec
[  3] 124.0-126.0 sec  2.25 MBytes  9.44 Mbits/sec
[  3] 126.0-128.0 sec  2.25 MBytes  9.44 Mbits/sec

When turn on the hwencrypt.
root@UserDevice:~# cat sys/module/ath9k/parameters/nohwcrypt 
0
root@UserDevice:~# cat /var/run/authsae-mesh0.cfg 
authsae:
{
 sae:
  {
    debug = 0;
    password = "abcd1234";
    group = [19, 26, 21, 25, 20];
    blacklist = 5;
    thresh = 5;
    lifetime = 3600;
  };
 meshd:
  {
    meshid = "mesh-test";
    interface = "mesh0";
    passive = 0;
    debug = 0;
    mediaopt = 1;
    band = "11g";
    channel = 1;
    htmode = "HT20";
    mcast-rate = 12;
  };
};
root@UserDevice:~# iw mesh0 station dump // on MP2, which is receiving.
Station 00:0f:92:fe:02:f2 (on mesh0)
        inactive time:  0 ms
        rx bytes:       73596386
        rx packets:     47435
        tx bytes:       2577290
        tx packets:     23427
        tx retries:     2106
        tx failed:      0
        signal:         -14 [-14] dBm
        signal avg:     -13 [-13] dBm
        Toffset:        -104244549 us
        tx bitrate:     72.2 MBit/s MCS 7 short GI
        rx bitrate:     54.0 MBit/s
        mesh llid:      0
        mesh plid:      0
        mesh plink:     ESTAB
        mesh local PS mode:     ACTIVE
        mesh peer PS mode:      ACTIVE
        mesh non-peer PS mode:  ACTIVE
        authorized:     yes
        authenticated:  yes
        preamble:       long
        WMM/WME:        yes
        MFP:            yes
        TDLS peer:      no
Mem: 32916K used, 28440K free, 0K shrd, 4736K buff, 11144K cached
CPU:   2% usr   5% sys   0% nic  66% idle   0% io   0% irq  24% sirq
Load average: 0.29 0.27 0.15 1/48 4046
  PID  PPID USER     STAT   VSZ %VSZ %CPU COMMAND
 3933  1590 root     R     1372   2%   2% top -d1
 1197     1 root     S     1120   2%   1% /usr/sbin/mhx-adc
 1412     1 root     S      976   2%   1% checktimesync loc
  187     2 root     RW       0   0%   1% [kworker/u2:2]

[  3]  0.0- 2.0 sec  3.00 MBytes  12.6 Mbits/sec
[  3]  2.0- 4.0 sec  2.75 MBytes  11.5 Mbits/sec
[  3]  4.0- 6.0 sec  2.75 MBytes  11.5 Mbits/sec

[Note] The reverse direction can reach up to:
[  4] 30.0-32.0 sec  5.28 MBytes  22.1 Mbits/sec
[  4] 32.0-34.0 sec  5.24 MBytes  22.0 Mbits/sec
[  4] 34.0-36.0 sec  5.26 MBytes  22.1 Mbits/sec



Dec 4,2015

Install Openoffice in Fedora:
sudo yum -y install openoffice.org*

AR9331 max SPI clock?
vi build_dir/target-mips_34kc_uClibc-0.9.33.2/linux-ar71xx_generic/linux-3.10.36/arch/mips/ath79/dev-m25p80.c:
static struct spi_board_info ath79_spi_info[] = {
        {
                .bus_num        = 0,
                .chip_select    = 0,
                .max_speed_hz   = 25000000,
                .modalias       = "m25p80",
                .controller_data = &ath79_spi0_cdata,
        },
        {
                .bus_num        = 0,
                .chip_select    = 1,
                .max_speed_hz   = 25000000,
                .modalias       = "m25p80",
                .controller_data = &ath79_spi1_cdata,
        }
};

But this is not used by spi-ath79.c when setting AR71XX_SPI_REG_CTRL register in ath79_spi_enable(). So the kernel doesn't touch the speed which is set by u-boot.


Dec 3, 2015
About ipn4gii(ARM) DDR2 memory clock:
Console:
free_area_init_node: node 0, pgdat c05782e0, node_mem_map c0595000
  Normal zone: 512 pages used for memmap
  Normal zone: 0 pages reserved
  Normal zone: 65024 pages, LIFO batch:15
Clocks: CPU 528 MHz, master 132 MHz, main 12.000 MHz
pcpu-alloc: s0 r0 d32768 u32768 alloc=1*32768
pcpu-alloc: [0] 0 
Built 1 zonelists in Zone order, mobility grouping on.  Total pages: 65024
Kernel command line: console=ttyS0,115200 earlyprint rootfstype=squashfs root=/d
ev/mtdblock5 rw mem=256M coherent_pool=2M console_quiet=0
PID hash table entries: 1024 (order: 0, 4096 bytes)


Datasheet:
DDR2/LPDDR/LPDDR2 Clock
The Power Management Controller controls the clocks of the DDR memory.
The DDR clock can be enabled and disabled with the DDRCK bit respectively in the PMC_SCER and PMC_SDER. At
reset, the DDR clock is disabled to save power consumption.
In case MDIV = 00, (PCK = MCK), DDRCK clock is not available.
To save PLLA power consumption, the user can choose UPLLCK as an Input clock for the system. In this case the DDR
Controller can drive LPDDR or LPDDR2 at up to 120 MHz.



U-Boot> md fffffc30	// display PMC Master Clock Register
fffffc30: 00001202 00000000 00000001 00000000    ................

MDIV: Master Clock Division
           Master Clock is Prescaler Output Clock divided by 4.
2 PCK_DIV4
           SysClk DDR is equal to 2 x MCK. DDRCK is equal to MCK.
That means the Master clock 132M is the DDR2 clock (DDRCK).

The MHX tool seems not working.
root@UserDevice:~# mhx -reg get 0xfffffc30
REG offset 0x0 is 0x0.

......................
SAE provides a secure password-based authentication mechanism for 802.11. It is resistant to passive attack, active attack, and dictionary attack.

Nov 26, 2015
MultiWan+Opendns: Overnight run multiwan didn't interfere OpenDNS DNS addresses. But when changed to WAN, ddns triggered an update and the result is "good". But in DnsOMatic dashboard there is error message and shows "!yours".In OpenDNS web dashboard this IP is "inactive". Use the https://opendnsupdate got the same result. 

Just doubted the WAN, which is using a dynamic IP from Telus, has a same IP address with others. Try to use a static IP SIM card and see. 

--------Confirmed by Willis static IP as WAN works well. This confirmed my thought.

Debug network-cloud-filter.sh with auto-refresh settings:

// Normal page refresh
Nov 23 20:21:57 UserDevice kern.emerg root: >>>MHX: FORM_refreshstop=[], FORM_refreshstart=[].FORM_action=[]
Nov 23 20:21:57 UserDevice kern.emerg root: >>>MHX: empty FOR_submit=.

...........................
// Click "Stop Refreshing" button
Nov 23 20:22:11 UserDevice kern.emerg root: >>>MHX: FORM_refreshstop=[ Stop Refreshing ], FORM_refreshstart=[].FORM_action=[]
Nov 23 20:22:11 UserDevice kern.emerg root: >>>MHX: not empty FOR_submit=1.
Nov 23 20:22:12 UserDevice kern.emerg root: >>>MHX: FORM_refreshstop=[], FORM_refreshstart=[].FORM_action=[]
Nov 23 20:22:12 UserDevice kern.emerg root: >>>MHX: empty FOR_submit=.

// Click "Auto Refresh" button
.....................................................
Nov 23 20:22:20 UserDevice kern.emerg root: >>>MHX: FORM_refreshstop=[], FORM_refreshstart=[ Auto Refresh ].FORM_action=[]
Nov 23 20:22:20 UserDevice kern.emerg root: >>>MHX: not empty FOR_submit=1.
Nov 23 20:22:21 UserDevice kern.emerg root: >>>MHX: FORM_refreshstop=[], FORM_refreshstart=[].FORM_action=[]
Nov 23 20:22:21 UserDevice kern.emerg root: >>>MHX: empty FOR_submit=.
..................................................................

// Click "Sumbit" link
Nov 23 20:22:28 UserDevice kern.emerg root: >>>MHX: FORM_refreshstop=[], FORM_refreshstart=[].FORM_action=[Save Changes]
Nov 23 20:22:28 UserDevice kern.emerg root: >>>MHX: not empty FOR_submit=1.
Nov 23 20:22:29 UserDevice kern.emerg root: >>>MHX: FORM_refreshstop=[], FORM_refreshstart=[].FORM_action=[]
Nov 23 20:22:29 UserDevice kern.emerg root: >>>MHX: empty FOR_submit=.
....................................

// Click "Cancel" link
...................................
Nov 23 20:25:46 UserDevice kern.emerg root: >>>MHX: FORM_refreshstop=[], FORM_refreshstart=[].FORM_action=[]
Nov 23 20:25:46 UserDevice kern.emerg root: >>>MHX: empty FOR_submit=.


Nov 18,2015
CoovaChilli miniportal does NOT need uhttp server. /etc/init.d/uhttpd stop and still can show up the miniportal/login.chi page.

Nov 6, 2015
Try the exsting ddns service. The existing ddns service generates the commond like below:

root@UserDevice:~# wget -O /var/run/wget.log http://jli%40microhardcorp.com:Microh%40rd18@updates.opendns.com/nic/update?hostname=all.dnsomatic.comi&myip=173.181.197.156
root@UserDevice:~# --2015-11-06 10:34:07--  http://jli%40microhardcorp.com:*password*@updates.opendns.com/
nic/update?hostname=all.dnsomatic.comi
Resolving updates.opendns.com... 67.215.92.210
Connecting to updates.opendns.com|67.215.92.210|:80... connected.
HTTP request sent, awaiting response... 302 Found
Location: https://updates.opendns.com/nic/update [following]
--2015-11-06 10:34:07--  https://updates.opendns.com/nic/update
Connecting to updates.opendns.com|67.215.92.210|:443... connected.
ERROR: cannot verify updates.opendns.com's certificate, issued by 'CN=DigiCert Secure Server CA,O=DigiCert
 Inc,C=US':
  Unable to locally verify the issuer's authority.
To connect to updates.opendns.com insecurely, use `--no-check-certificate'.

[1]+  Done(5)                    wget -O /var/run/wget.log http://jli%40microhardcorp.com:Microh%40rd18@up
dates.opendns.com/nic/update?hostname=all.dnsomatic.comi

The config file /etc/config/ddns:
config service "opendns"
 option enabled "1"
 option interface "wan2"
 option service_name "opendns.com"
 option domain "NETWORK_LABEL"
 option username "jli@microhardcorp.com"
 option password "Microh@rd18"
 option force_interval "24"
 option force_unit "hours"
 option check_interval "5"
 option check_unit "minutes"
 option retry_interval "10"
 option retry_unit "seconds"
 option ip_source "web"
 option ip_url "http://myip.dnsomatic.com/"
 option update_url "http://[USERNAME]:[PASSWORD]@updates.opendns.com/nic/update?hostname=all.dnsomatic.com
i&myip=[IP]"

This is very close. And then try the command on console:
root@UserDevice:~# wget -O /var/run/wget.log --no-check-certificate https://jli%40microhardcorp.com:Microh%40rd18@updates.opendns.com/nic/update?hostname=all.dnsomatic.comi&myip=173.181.197.156
root@UserDevice:~# --2015-11-06 10:37:40--  https://jli%40microhardcorp.com:*password*@updates.opendns.com
/nic/update?hostname=all.dnsomatic.comi
Resolving updates.opendns.com... 67.215.92.210
Connecting to updates.opendns.com|67.215.92.210|:443... connected.
WARNING: cannot verify updates.opendns.com's certificate, issued by 'CN=DigiCert Secure Server CA,O=DigiCe
rt Inc,C=US':
  Unable to locally verify the issuer's authority.
HTTP request sent, awaiting response... 401 Unauthorized
Authentication selected: Basic realm="RESTRICTED"
Reusing existing connection to updates.opendns.com:443.
HTTP request sent, awaiting response... 200 OK
Length: 20 [text/html]
Saving to: '/var/run/wget.log'

/var/run/wget.log   100%[=====================>]      20  --.-KB/s   in 0s     

2015-11-06 10:37:41 (329 KB/s) - '/var/run/wget.log' saved [20/20]


[1]+  Done                       wget -O /var/run/wget.log --no-check-certificate https://jli%40microhardc
orp.com:Microh%40rd18@updates.opendns.com/nic/update?hostname=all.dnsomatic.comi
root@UserDevice:~# cat var/run/wget.log 
good 173.181.197.156root@UserDevice:~# 
root@UserDevice:~# 


Nov 5,2015
wget --user="jli@microhardcorp.com" --password="Microh@rd18" http://updates.dnsomatic.com/nic/update?hostname=microhard-corp
worked well. 

root@UserDevice:~# wget --user="jli@microhardcorp.com" --password="Microh@rd18" http://updates.dnsomatic.c
om/nic/update?hostname=microhard-corp
--2015-11-05 16:53:11--  http://updates.dnsomatic.com/nic/update?hostname=microhard-corp
Resolving updates.dnsomatic.com... 67.215.92.215
Connecting to updates.dnsomatic.com|67.215.92.215|:80... connected.
HTTP request sent, awaiting response... 401 Unauthorized
Authentication selected: Basic realm="DNSOMATIC"
Reusing existing connection to updates.dnsomatic.com:80.
HTTP request sent, awaiting response... 200 OK
Length: 20 [text/html]
Saving to: 'update?hostname=microhard-corp.1'

update?hostname=microhard- 100%[========================================>]      20  --.-KB/s   in 0s     

2015-11-05 16:53:12 (208 KB/s) - 'update?hostname=microhard-corp.1' saved [20/20]

root@UserDevice:~# 


root@UserDevice:~# wget --user="jli@microhardcorp.com" --password="Microh@rd18" http://updates.dnsomatic.c
om/nic/update?hostname=all.dnsomatic.com&myip="173.181.197.156"
root@UserDevice:~# --2015-11-05 17:06:14--  http://updates.dnsomatic.com/nic/update?hostname=all.dnsomatic.com
Resolving updates.dnsomatic.com... 67.215.92.215
Connecting to updates.dnsomatic.com|67.215.92.215|:80... connected.
HTTP request sent, awaiting response... 401 Unauthorized
Authentication selected: Basic realm="DNSOMATIC"
Reusing existing connection to updates.dnsomatic.com:80.
HTTP request sent, awaiting response... 200 OK
Length: 20 [text/html]
Saving to: 'update?hostname=all.dnsomatic.com'

update?hostname=all.dnsoma 100%[========================================>]      20  --.-KB/s   in 0s     

2015-11-05 17:06:15 (216 KB/s) - 'update?hostname=all.dnsomatic.com' saved [20/20]


[1]+  Done                       wget --user="jli@microhardcorp.com" --password="Microh@rd18" http://updates.dnsomatic.com/nic/update?hostname=all.dnsomatic.com
root@UserDevice:~# 

On opendns.com, you can see the network IP changed to 173...156 IMMEDIATELLY after the wget command. If not using wget, it takes about 10min to change to the current public IP.


Sept 29,2015
Remove 
    {
                .name           = "EXT_WDT_WDI",
                .gpio           = 6,
                .active_low     = 1,
        },


from mach-microhard-mhs-331.c so that :
root@UserDevice:~# cat sys/kernel/debug/gpio 
GPIOs 0-29, ath79:
 gpio-0   (sda                 ) in  hi
 gpio-1   (scl                 ) out hi
 gpio-16  (Peripheral_RESET    ) out hi
 gpio-20  (CPUstatus           ) out hi
 gpio-22  (RESET               ) in  hi
root@UserDevice:~# 

Not able to see GPIO6 is registered into the system. BUT, in drivers/watchdog/ath79_wdt.c, gpio_set_value_cansleep(6, 0) still works no problem. This is confirmed by measuring GPIO6 by scope.

Conclusion: The registration of gpio in mach-microhard-mhs-331.c is only for gpio_led. This makes the gpio show up as a LED. Without registering it, it still can be used as gpio doesn't matter.

May 7, 2015
How a uci config map to the function in kernel swconfig.c or ar8216.c?

config switch ar8316
        option name eth0
        option reset 1		// Maps to static struct switch_attr default_global[],.name = "reset". .set = swconfig_reset_switch. 
        option enable_vlan 0	// Maps to static struct switch_attr ar8216_globals[], .name = "enable_vlan". .set = ar8216_set_vlan,.get = ar8216_get_vlan
        option native_vlan 1	// Not mapped to kernel.

config switch_vlan vlan1
        option device eth0		// This doesn't map to an attribute
        option vlan 1 			// This doesn't map to an attribute
        option ports "0 1 2 3 4"	// Maps to static struct switch_attr default_vlan[], .name = "ports",.set = swconfig_set_vlan_ports,.get = swconfig_get_vlan_ports,

config 'switch_port' port3
    option 'port'      '3'		// This doesn't map to an attribute
    option 'pvid'      '1'		// Maps to static struct switch_attr default_port[], .name = "pvid",.set = swconfig_set_pvid,.get = swconfig_get_pvid
    option 'link'	"FDFX0010"	// Maps to static struct switch_attr default_port[], .name = "link",.set = swconfig_set_link,.get = swconfig_get_link

root@VIP4G:~# swconfig dev eth0 help
eth0: (eth0), ports: 6 (), vlans: 16
     --switch
        Attribute 1 (int): enable_vlan (Enable VLAN mode)		// static struct switch_attr ar8216_globals[], .name = "enable_vlan"
        Attribute 2 (none): apply (Activate changes in the hardware)	// static struct switch_attr default_global[], .name = "apply". .set = swconfig_apply_config,
        Attribute 3 (none): reset (Reset the switch)			// static struct switch_attr default_global[],.name = "reset".
     --vlan
        Attribute 1 (int): pvid (VLAN ID)				// static struct switch_attr ar8216_vlan[], .name = "pvid". This should be renamed to "vid". A bug? Never used doesn't matter.
        Attribute 2 (ports): ports (VLAN port mapping)			// static struct switch_attr default_vlan[], .name = "ports"
     --port
        Attribute 1 (int): pvid (Primary VLAN ID)			// static struct switch_attr default_port[], .name = "pvid"
        Attribute 2 (string): link (Get port link information)		// static struct switch_attr default_port[], .name = "link"
root@VIP4G:~# 

The "swconfig load network" is done in swlib_apply_from_uci() in uci.c. The sequence is:
1) .name = "reset" and then  .name = "enable_vlan" defined in struct swlib_setting early_settings[]. This will call swconfig_reset_switch() then ar8216_set_vlan().
2) The switch_port section defined by "config 'switch_port' port3" in config file. Calling swconfig_set_pvid() and swconfig_set_link().
3) The switch_vlan section defined by "config switch_vlan vlan1" in config file. Calling swconfig_set_vlan_ports().
4) .name="apply" is a hidden step. Calling swconfig_apply_config().


May 6, 2015
How swconfig works.
1. root@VIP4G:~# swconfig dev eth0  help
eth0: (eth0), ports: 5 (), vlans: 128
     --switch
        Attribute 1 (int): enable_vlan (Enable VLAN mode)
        Attribute 2 (none): apply (Activate changes in the hardware)
        Attribute 3 (none): reset (Reset the switch)
     --vlan
        Attribute 1 (int): pvid (VLAN ID)
        Attribute 2 (ports): ports (VLAN port mapping)
     --port
        Attribute 1 (int): pvid (Primary VLAN ID)
root@VIP4G:~# swconfig 
swconfig dev <dev> [port <port>|vlan <vlan>] (help|set <key> <value>|get <key>|load <config>|show)

This means:
For swconfig dev eth0 port xxx command, the "pvid" attribute can be get or set
For swconfig dev eth0 vlan xxx command, the "pvid" and "ports" can be set or set.

root@VIP4G:~# swconfig dev eth0 port 2 get pvid
1
root@VIP4G:~# swconfig dev eth0 port 20 get pvid
failed
root@VIP4G:~# swconfig dev eth0 vlan 1 get pvid 
1
root@VIP4G:~# swconfig dev eth0 vlan 10 get pvid
10
root@VIP4G:~# swconfig dev eth0 vlan 100000 get pvid
0
root@VIP4G:~# swconfig dev eth0 vlan 100000 get ports
failed
root@VIP4G:~# swconfig dev eth0 vlan 1 get ports     
0 1 2 3 4 
root@VIP4G:~# swconfig dev eth0 vlan 12 get ports

root@VIP4G:~# swconfig dev eth0 show
Global attributes:
        enable_vlan: 0
Port 0:
        pvid: 1
Port 1:
        pvid: 1
Port 2:
        pvid: 1
Port 3:
        pvid: 1
Port 4:
        pvid: 1
VLAN 0:
        pvid: 0
        ports: 
VLAN 1:
        pvid: 1
        ports: 0 1 2 3 4 
VLAN 2:
        pvid: 2
        ports: 
VLAN 3:
        pvid: 3
        ports: 
VLAN 4:
        pvid: 4
        ports: 
VLAN 5:
        pvid: 5
        ports: 
VLAN 6:
        pvid: 6
        ports: 
VLAN 7:
        pvid: 7
        ports: 
VLAN 8:
        pvid: 8
        ports: 
VLAN 9:
        pvid: 9
        ports: 
VLAN 10:
        pvid: 10
        ports: 
VLAN 11:
        pvid: 11
        ports: 
... until VLAN127

2. Take "swconfig dev eth0 port 2 get pvid" command as an example.



April 30,2015
        tx retries:     21
        tx failed:      0
tx retries: Comes from ieee80211_tx_status() tx_retry_count. This is a sum of all available rates of 
struct ieee80211_tx_rate {
         s8 idx;
         u16 count:5,
             flags:11;
} __packed;
@count: number of tries in this rate before going to the next rate. 
This means a couple of "tx retries" is normal. I guess this is because not receiving ACK after transmission instead of failing to compete the CW window.

tx failed: Comes from ieee80211_tx_status() too. 
 else {
                        if (!acked)
                                sta->tx_retry_failed++;
                        sta->tx_retry_count += retry_count;
      }
The "tx failed" means tx_retry_failed. I guess this is from NO ACK error too.

April 28,2015
IPn4GII uses package/boot/uboot-envtools/ as the fw_printenv/setenv tool. The bad thing of fw_setenv is that, if it finds an error CRC in ENV, it will load a default set of settings AND WRITE THEM BACK to the ENV flash area. But the default set of settings are usually not working.

April 27, 2015
A QOS test with ping + tos(in IP header).Atheros code maps TOS fields in IP headers to these 4 ACs(BG,BE,VI and VO).
1. Setup: 
	Two nVIP2400 as AP(168.12) and STA(168.11). On STA, run iperf -c 192.168.168.12 -i 2 -t 9999 to push TCP data to AP as a background heavy traffic. The WMM settings in /var/run/hostapd-phy0.conf are all defaults. PC is connected to AP and ping to STA(168.11) with different TOS values.
	1.1 [Jeff@DENG0033 ar71xx_nvip2400]$ ping -Q 0 192.168.168.11	//0 or 96 AC_BE
PING 192.168.168.11 (192.168.168.11) 56(84) bytes of data.
64 bytes from 192.168.168.11: icmp_seq=10 ttl=64 time=12.1 ms
64 bytes from 192.168.168.11: icmp_seq=11 ttl=64 time=13.6 ms
64 bytes from 192.168.168.11: icmp_seq=12 ttl=64 time=18.9 ms
64 bytes from 192.168.168.11: icmp_seq=13 ttl=64 time=13.6 ms
64 bytes from 192.168.168.11: icmp_seq=14 ttl=64 time=18.7 ms
64 bytes from 192.168.168.11: icmp_seq=15 ttl=64 time=22.0 ms
64 bytes from 192.168.168.11: icmp_seq=16 ttl=64 time=18.5 ms
64 bytes from 192.168.168.11: icmp_seq=17 ttl=64 time=11.5 ms

1.2 [Jeff@DENG0033 ar71xx_nvip2400]$ ping -Q 32 192.168.168.11	//32 or 64 (AC-BK)
PING 192.168.168.11 (192.168.168.11) 56(84) bytes of data.
64 bytes from 192.168.168.11: icmp_seq=10 ttl=64 time=2.17 ms
64 bytes from 192.168.168.11: icmp_seq=11 ttl=64 time=9.54 ms
64 bytes from 192.168.168.11: icmp_seq=12 ttl=64 time=3.03 ms
64 bytes from 192.168.168.11: icmp_seq=13 ttl=64 time=5.52 ms
64 bytes from 192.168.168.11: icmp_seq=14 ttl=64 time=4.29 ms
64 bytes from 192.168.168.11: icmp_seq=15 ttl=64 time=4.79 ms
64 bytes from 192.168.168.11: icmp_seq=16 ttl=64 time=2.90 ms
64 bytes from 192.168.168.11: icmp_seq=17 ttl=64 time=2.79 ms
64 bytes from 192.168.168.11: icmp_seq=18 ttl=64 time=1.91 ms
64 bytes from 192.168.168.11: icmp_seq=19 ttl=64 time=2.42 ms
64 bytes from 192.168.168.11: icmp_seq=20 ttl=64 time=7.01 ms
64 bytes from 192.168.168.11: icmp_seq=21 ttl=64 time=2.79 ms
64 bytes from 192.168.168.11: icmp_seq=22 ttl=64 time=6.63 ms
64 bytes from 192.168.168.11: icmp_seq=23 ttl=64 time=3.02 ms 
64 bytes from 192.168.168.11: icmp_seq=24 ttl=64 time=2.79 ms

1.3 [Jeff@DENG0033 ar71xx_nvip2400]$ ping -Q 128 192.168.168.11	//128 or 160 (AC-VI)
PING 192.168.168.11 (192.168.168.11) 56(84) bytes of data.
64 bytes from 192.168.168.11: icmp_seq=7 ttl=64 time=3.42 ms
64 bytes from 192.168.168.11: icmp_seq=8 ttl=64 time=4.39 ms
64 bytes from 192.168.168.11: icmp_seq=9 ttl=64 time=5.55 ms
64 bytes from 192.168.168.11: icmp_seq=10 ttl=64 time=2.83 ms
64 bytes from 192.168.168.11: icmp_seq=11 ttl=64 time=7.91 ms
64 bytes from 192.168.168.11: icmp_seq=12 ttl=64 time=4.27 ms
64 bytes from 192.168.168.11: icmp_seq=13 ttl=64 time=1.51 ms
64 bytes from 192.168.168.11: icmp_seq=14 ttl=64 time=9.50 ms
64 bytes from 192.168.168.11: icmp_seq=15 ttl=64 time=1.67 ms
64 bytes from 192.168.168.11: icmp_seq=16 ttl=64 time=2.50 ms
64 bytes from 192.168.168.11: icmp_seq=17 ttl=64 time=6.13 ms
64 bytes from 192.168.168.11: icmp_seq=18 ttl=64 time=2.67 ms

1.4 [Jeff@DENG0033 ar71xx_nvip2400]$ ping -Q 192 192.168.168.11 //192 or 224 (AC-VO)
PING 192.168.168.11 (192.168.168.11) 56(84) bytes of data.
64 bytes from 192.168.168.11: icmp_seq=1 ttl=64 time=2.61 ms
64 bytes from 192.168.168.11: icmp_seq=2 ttl=64 time=3.78 ms
64 bytes from 192.168.168.11: icmp_seq=3 ttl=64 time=5.01 ms
64 bytes from 192.168.168.11: icmp_seq=4 ttl=64 time=2.25 ms
64 bytes from 192.168.168.11: icmp_seq=6 ttl=64 time=2.03 ms
64 bytes from 192.168.168.11: icmp_seq=5 ttl=64 time=1.65 ms
64 bytes from 192.168.168.11: icmp_seq=7 ttl=64 time=3.32 ms
64 bytes from 192.168.168.11: icmp_seq=8 ttl=64 time=6.45 ms
64 bytes from 192.168.168.11: icmp_seq=9 ttl=64 time=4.43 ms
64 bytes from 192.168.168.11: icmp_seq=10 ttl=64 time=2.15 ms
64 bytes from 192.168.168.11: icmp_seq=11 ttl=64 time=5.27 ms
64 bytes from 192.168.168.11: icmp_seq=12 ttl=64 time=14.2 ms
64 bytes from 192.168.168.11: icmp_seq=13 ttl=64 time=2.19 ms
64 bytes from 192.168.168.11: icmp_seq=14 ttl=64 time=4.89 ms



April 23, 2015
1. MMAC80211:
The Microhard proprietary modifications shown in mac80211/src_3/config.mk: 
######## Microhard Systems Start ########
export CONFIG_MICROHARD=y	1.1 MDF device; 1.2 Noise floor calculation,NL80211_STA_INFO_NOISE_FLOOR;1.3 Mesh mode encryption,NL80211_CMD_ENCRYPTION_CIPHER, ieee80211_crypto_tkip_decrypt().

ifeq ($(CONFIG_MICROHARD),y)
# we need the test mode to pass the quarter/turbo mode parameters
# CONFIG_NL80211_TESTMODE=y		// Not a proprietary flag. Need to define to open testmode mechanism.
export CONFIG_HYBRID_WDS=y
# CONFIG_SUPPORT_GOOSE_ACK=y		// No need
# CONFIG_SUPPORT_XR=y			// No need
export CONFIG_MICROHARD_TXRATE_MCS=y	// Have existed in new driver
endif

-DCONFIG_ATH5K_ADF4350	: Separate kmod. No need
-DCONFIG_ATH5K_LINKRATE	: Separate kmod. No need
######## Microhard Systems End ########

2. hostapd/wpa_supplicant
In hostapd:
-DMICROHARD \ : 2.1. In sme_event_auth(), wpa_s->sme.auth_alg == data->auth.auth_type bitfield issue; 2.2. In wpa_supplicant_connect(), //MHX: When MAC ACL rejection, keep scanning for AP. || wpa_s->wpa_state == WPA_AUTHENTICATING. This is a Australian customer specific AP problem. No need by far.
-DCONFIG_MICROHARD_IEEE80211N_FORCE_40MHZ \	: No need
-DCONFIG_MICROHARD_IEEE80211N_NO_SWITCH_PRI_SEC	: No need

In wpa_supplicant
-DMICROHARD_AP_FREQ : Only scan specified frequency in config file. Used in repeater mode. No need by far.

3. IW
3.1 -DMICROHARD: Mainly for setting MCS rate. Already exist in PWii IW command.
3.2 MDF device /dev/mdfst0 handling. Not needed by far.

April 15, 2015
VIP2 and nVIP2400: Use WPA or WPA+WPA2 mode, reboot AP many times and some STAs will be easily stuck with (wpa_supplicant -ddd):
====MHX: sending NL80211_CMD_TRIGGER_SCAN===
nl80211: Scan trigger failed: ret=-16 (Device or resource busy)
wlan0: Failed to initiate AP scan
wlan0: Setting scan request: 1 sec 0 usec
Scan SSID - hexdump_ascii(len=13):
     77 6c 61 6e 30 2d 6e 65 78 74 63 6f 6d            wlan0-nextcom   
wlan0: Starting AP scan for wildcard SSID
nl80211: Scan SSID - hexdump_ascii(len=13):
     77 6c 61 6e 30 2d 6e 65 78 74 63 6f 6d            wlan0-nextcom   
nl80211: Scan SSID - hexdump_ascii(len=0): [NULL]
====MHX: sending NL80211_CMD_TRIGGER_SCAN===
nl80211: Scan trigger failed: ret=-16 (Device or resource busy)
wlan0: Failed to initiate AP scan
wlan0: Setting scan request: 1 sec 0 usec
Scan SSID - hexdump_ascii(len=13):

     77 6c 61 6e 30 2d 6e 65 78 74 63 6f 6d            wlan0-nextcom   
wlan0: Starting AP scan for wildcard SSID
nl80211: Scan SSID - hexdump_ascii(len=13):
     77 6c 61 6e 30 2d 6e 65 78 74 63 6f 6d            wlan0-nextcom   
nl80211: Scan SSID - hexdump_ascii(len=0): [NULL]
====MHX: sending NL80211_CMD_TRIGGER_SCAN===
nl80211: Scan trigger failed: ret=-16 (Device or resource busy)
wlan0: Failed to initiate AP scan
wlan0: Setting scan request: 1 sec 0 usec
Scan SSID - hexdump_ascii(len=13):
     77 6c 61 6e 30 2d 6e 65 78 74 63 6f 6d            wlan0-nextcom   
wlan0: Starting AP scan for wildcard SSID
nl80211: Scan SSID - hexdump_ascii(len=13):
     77 6c 61 6e 30 2d 6e 65 78 74 63 6f 6d            wlan0-nextcom   
nl80211: Scan SSID - hexdump_ascii(len=0): [NULL]

But with WPA2 only mode, this is almost gone. Need to reduce the timeout values that are accommodated to repeator mode.

April 9, 2015
About active/passive scan of STA. It is determined by package/mac80211/src_2/drivers/net/wireless/ath/regd.c:

/* Only these channels all allow active scan on all world regulatory domains */
#define ATH9K_2GHZ_CH01_11      REG_RULE(2412-10, 2462+10, 40, 0, 20, 0)

/* We enable active scan on these a case by case basis by regulatory domain */
#define ATH9K_2GHZ_CH12_13      REG_RULE(2467-10, 2472+10, 40, 0, 20,\
                                        NL80211_RRF_PASSIVE_SCAN)
#define ATH9K_2GHZ_CH14         REG_RULE(2484-10, 2484+10, 40, 0, 20,\
                                NL80211_RRF_PASSIVE_SCAN | NL80211_RRF_NO_OFDM)

/* We allow IBSS on these on a case by case basis by regulatory domain */
#define ATH9K_5GHZ_5150_5350    REG_RULE(5150-10, 5250, 40, 0, 30, 0), \
                                REG_RULE(5250, 5350+10, 40, 0, 30,\
                                NL80211_RRF_PASSIVE_SCAN | NL80211_RRF_NO_IBSS)
#define ATH9K_5GHZ_5470_5850    REG_RULE(5470-10, 5850+10, 40, 0, 30,\
                                NL80211_RRF_PASSIVE_SCAN | NL80211_RRF_NO_IBSS)
#define ATH9K_5GHZ_5725_5850    REG_RULE(5725-10, 5850+10, 40, 0, 30,\
                                NL80211_RRF_PASSIVE_SCAN | NL80211_RRF_NO_IBSS)
Only channel 1-11 can do active scan and ALL 5G channels CAN NOT do active scan.

Mar 20,2015

The hotspot bridge CAN NOT have a same segment as the "Hotspot IP Addr" in hotspot setup page. This is to ensure a correct routing table. A correct routing is:

root@IPn4G:~# brctl show
bridge name     bridge id               STP enabled     interfaces
br-hot          8000.000f92fa034e       no              wlan0
br-lan          8000.000f92009e99       yes             eth0
br-wan          8000.000f92fe0001       no              usb0
root@IPn4G:~# route
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
25.0.0.1        *               255.255.255.255 UH    0      0        0 br-wan
192.168.182.0   *               255.255.255.0   U     0      0        0 tun0
192.168.168.0   *               255.255.255.0   U     0      0        0 br-lan
192.168.169.0   *               255.255.255.0   U     0      0        0 br-hot
169.254.0.0     *               255.255.0.0     U     0      0        0 br-lan
default         25.0.0.1        0.0.0.0         UG    0      0        0 br-wan


Jan 26, 2015
ar9331 now uses the pure 4byte flash address mode to avoid reboot issue. The performance test on Mary board:

[    0.000000] CPU revision is: 00019374 (MIPS 24Kc)
[    0.000000] SoC: Atheros AR9330 rev 1
[    0.000000] Clocks: CPU:400.000MHz, DDR:400.000MHz, AHB:200.000MHz, Ref:40.000MHz

root@OpenWrt:~# time dd if=/dev/urandom of=10M.dat bs=1M count=10
10+0 records in
10+0 records out
real    1m 26.69s
user    0m 0.00s
sys     0m 47.58s
root@OpenWrt:~# df -h
Filesystem                Size      Used Available Use% Mounted on
rootfs                   22.9M     10.9M     12.0M  48% /
/dev/root                 2.5M      2.5M         0 100% /rom
tmpfs                    30.0M     60.0K     30.0M   0% /tmp
/dev/mtdblock5           22.9M     10.9M     12.0M  48% /overlay

overlayfs:/overlay       22.9M     10.9M     12.0M  48% /
tmpfs                   512.0K         0    512.0K   0% /dev
root@OpenWrt:~# time dd if=/dev/urandom of=12M.dat bs=1M count=12
12+0 records in
11+1 records out
real    1m 40.26s
user    0m 0.00s
sys     0m 55.03s
root@OpenWrt:~# df -h
Filesystem                Size      Used Available Use% Mounted on
rootfs                   22.9M     22.6M    272.0K  99% /
/dev/root                 2.5M      2.5M         0 100% /rom
tmpfs                    30.0M     60.0K     30.0M   0% /tmp
/dev/mtdblock5           22.9M     22.6M    272.0K  99% /overlay
overlayfs:/overlay       22.9M     22.6M    272.0K  99% /
tmpfs                   512.0K         0    512.0K   0% /dev
root@OpenWrt:~# 

The average write speed 10M/90S=111KByte/Sec. MD5 checksum reboot ok.

root@OpenWrt:~# time dd if=dev/mtd5 of=/dev/null bs=1M count=10
10+0 records in
10+0 records out
real    0m 13.29s
user    0m 0.01s
sys     0m 0.12s
root@OpenWrt:~# time dd if=dev/mtd5 of=/dev/null bs=1M count=20
20+0 records in
20+0 records out
real    0m 26.56s
user    0m 0.00s
sys     0m 0.27s

The average read speed is 10M/13Sec=769KByte/Sec.

On an ar9344 Jennie board, which still use the bank register method (3byte addr), the test is much higher:

[    0.000000] CPU revision is: 0001974c (MIPS 74Kc)
[    0.000000] SoC: Atheros AR9344 rev 2
[    0.000000] Clocks: CPU:560.000MHz, DDR:450.000MHz, AHB:225.000MHz, Ref:40.000MHz

root@OpenWrt:~# time dd if=/dev/urandom of=10M.dat bs=1M count=10
10+0 records in
10+0 records out
real    1m 4.15s
user    0m 0.00s
sys     0m 40.77s
root@OpenWrt:~# df -h
Filesystem                Size      Used Available Use% Mounted on
rootfs                   21.8M     10.9M     10.9M  50% /
/dev/root                 4.0M      4.0M         0 100% /rom
tmpfs                    61.8M     80.0K     61.7M   0% /tmp
tmpfs                   512.0K         0    512.0K   0% /dev
/dev/mtdblock4           21.8M     10.9M     10.9M  50% /overlay
overlayfs:/overlay       21.8M     10.9M     10.9M  50% /
root@OpenWrt:~# time dd if=/dev/urandom of=10M-2.dat bs=1M count=10
10+0 records in
10+0 records out
real    1m 4.86s
user    0m 0.00s
sys     0m 40.54s
root@OpenWrt:~# df -h
Filesystem                Size      Used Available Use% Mounted on
rootfs                   21.8M     21.1M    652.0K  97% /
/dev/root                 4.0M      4.0M         0 100% /rom
tmpfs                    61.8M     80.0K     61.7M   0% /tmp
tmpfs                   512.0K         0    512.0K   0% /dev
/dev/mtdblock4           21.8M     21.1M    652.0K  97% /overlay
overlayfs:/overlay       21.8M     21.1M    652.0K  97% /

The average write rate is about 154KB/Sec.

 
root@OpenWrt:~# time dd if=/dev/mtd4 of=/dev/null bs=1M count=10
10+0 records in
10+0 records out
real    0m 3.75s
user    0m 0.00s
sys     0m 0.14s
root@OpenWrt:~# time dd if=/dev/mtd4 of=/dev/null bs=1M count=20
20+0 records in
20+0 records out
real    0m 7.57s
user    0m 0.01s
sys     0m 0.32s
root@OpenWrt:~# 

The average read speed is about 2.66MByte/Sec.

On the same Jennie board, changed to pure 4byte mode and do performance test:
root@OpenWrt:~# time dd if=/dev/urandom of=10M.dat bs=1M count=10
10+0 records in
10+0 records out
real    1m 3.33s
user    0m 0.00s
sys     0m 38.93s
root@OpenWrt:~# df -h
Filesystem                Size      Used Available Use% Mounted on
rootfs                   21.8M     10.9M     10.9M  50% /
/dev/root                 4.0M      4.0M         0 100% /rom
tmpfs                    61.8M     80.0K     61.7M   0% /tmp
tmpfs                   512.0K         0    512.0K   0% /dev
/dev/mtdblock4           21.8M     10.9M     10.9M  50% /overlay
overlayfs:/overlay       21.8M     10.9M     10.9M  50% /
root@OpenWrt:~# time dd if=/dev/urandom of=10M-2.dat bs=1M count=10
10+0 records in
10+0 records out
real    1m 3.50s
user    0m 0.00s
sys     0m 38.91s
root@OpenWrt:~# df -h
Filesystem                Size      Used Available Use% Mounted on
rootfs                   21.8M     21.1M    652.0K  97% /
/dev/root                 4.0M      4.0M         0 100% /rom
tmpfs                    61.8M     80.0K     61.7M   0% /tmp
tmpfs                   512.0K         0    512.0K   0% /dev
/dev/mtdblock4           21.8M     21.1M    652.0K  97% /overlay
overlayfs:/overlay       21.8M     21.1M    652.0K  97% /

The average write speed is 156KByte/Sec


root@OpenWrt:~# time dd if=/dev/mtd4 of=/dev/null bs=1M count=10
10+0 records in
10+0 records out
real    0m 11.21s
user    0m 0.00s
sys     0m 0.17s
root@OpenWrt:~# time dd if=dev/mtd5 of=/dev/null bs=1M count=20
4+0 records in
4+0 records out
real    0m 4.49s
user    0m 0.00s
sys     0m 0.05s
root@OpenWrt:~# time dd if=dev/mtd5 of=/dev/null bs=1M count=20
4+0 records in
4+0 records out
real    0m 4.49s
user    0m 0.00s
sys     0m 0.00s
root@OpenWrt:~# 

The average reasd speed is much higher to 4.4MByte/Sec.

Conclusion:
The pure 4Byte mode doesn't deteriorate the performance compared with bank register mode.

Dec 16, 2014
webiffiles package copied to ar9331_3_10 from art-cotex project.
package/base-files copied to ar9331_3_10 from art-cotex project. target/linux/ar71xx/base-files remains the origional 3.10.16 untouched.

Dec 15, 2014
ath79 can not map over 16MB single flash. It can not use 4byte SPI address. Every single SPI bit is transferred by 

static u32 ath79_spi_txrx_mode0(struct spi_device *spi, unsigned nsecs, u32 word, u8 bits)
{
        struct ath79_spi *sp = ath79_spidev_to_sp(spi);
        u32 ioc = sp->ioc_base;

        /* clock starts at inactive polarity */
        for (word <<= (32 - bits); likely(bits); bits--) {
                u32 out;

                if (word & (1 << 31))
                        out = ioc | AR71XX_SPI_IOC_DO;
                else
                        out = ioc & ~AR71XX_SPI_IOC_DO;

                /* setup MSB (to slave) on trailing edge */
                ath79_spi_wr(sp, AR71XX_SPI_REG_IOC, out);
                ath79_spi_delay(sp, nsecs);
                ath79_spi_wr(sp, AR71XX_SPI_REG_IOC, out | AR71XX_SPI_IOC_CLK);
                ath79_spi_delay(sp, nsecs);
                if (bits == 1)
                        ath79_spi_wr(sp, AR71XX_SPI_REG_IOC, out);

                word <<= 1;
        }

        return ath79_spi_rr(sp, AR71XX_SPI_REG_RDS);
}
in file linux-3.10.36/drivers/spi/spi-ath79.c. Currently nsecs is 20 and the SPI Clock is around 28MHz (tested on WPJ344 board).


Dec 8, 2014
Test the 32MB flash R/W.
1. Create a random 17MB file on PC: dd if=/dev/urandom of=./random_data.bin bs=1M count=17. Calculate it's MD5 sum: 
[Jeff@DENG0033 tftp]$ md5sum random_data.bin 
a309babb6a60bd0310b269015f585120  random_data.bin

2. SCP it to WPJ344 board: scp random_data.bin root@192.168.168.1://etc
root@OpenWrt:~# df -h
Filesystem                Size      Used Available Use% Mounted on
rootfs                   22.8M     18.0M      4.8M  79% /
/dev/root                 2.8M      2.8M         0 100% /rom
tmpfs                    61.9M     72.0K     61.9M   0% /tmp
tmpfs                   512.0K         0    512.0K   0% /dev
root                     61.9M     68.0K     61.9M   0% /tmp/root
overlayfs:/tmp/root      61.9M     68.0K     61.9M   0% /tmp/root
/dev/mtdblock4           22.8M     18.0M      4.8M  79% /overlay
overlayfs:/overlay       22.8M     18.0M      4.8M  79% /
root@OpenWrt:~# ls -l /etc/random_data.bin -al
-rw-r--r--    1 root     root      17825792 Jan  3 10:50 /etc/random_data.bin
root@OpenWrt:~# md5sum etc/random_data.bin 
a309babb6a60bd0310b269015f585120  etc/random_data.bin

Compare the 2 MD5 sums are the same.

3. Copy back the WPJ344 board file back to pc:
root@OpenWrt:~# scp /etc/random_data.bin Jeff@192.168.168.100://home/Jeff/tmp/random_data_from_wpj344.bin

4. Compare the 2 files on PC:
[Jeff@DENG0033 tftp]$ ls -al ~/tmp/random_data_from_wpj344.bin 
-rw-r--r-- 1 Jeff Jeff 17825792 Dec  8 09:05 /home/Jeff/tmp/random_data_from_wpj344.bin
[Jeff@DENG0033 tftp]$ md5sum ~/tmp/random_data_from_wpj344.bin 
a309babb6a60bd0310b269015f585120  /home/Jeff/tmp/random_data_from_wpj344.bin
[Jeff@DENG0033 tftp]$ md5sum random_data.bin 
a309babb6a60bd0310b269015f585120  random_data.bin

5. Reboot the WPJ344 board:
Power off the target board without "sync" command. Jffs2 error message (CRC blahblah...)pop up during the boot up. And the md5 sum is wrong. 

6. To confirm if it is related with >16MB flash, test the mhs-data partition which is located in flash offset 0x1BE0000(>16MB).
Transfer a 3MB random file from PC to WPJ344 /art and reboot system. After reboot,
mount -t jffs2 /dev/mtdblock5  /art.
root@OpenWrt:~# md5sum art/random_data_3m.bin 
a1c915b0393462ccdc9353d7b060e36b  art/random_data_3m.bin
This is a correct MD5 sum with the PC's file. This means the >16MB flash access is correct.

Dec 5,2014
CONFIG_IMAGE_CMDLINE_HACK=y was defined in [Jeff@DENG0033 ar9344_co]$ vi target/linux/ar71xx/config-3.3. This will read the CMDLINE patched in the header of the kernel. This is read in arch/mips/kernel/head.S.


Dev 4,2014
AR9344/AR9331 with 32MByte flash support(Spansion 25FL256S)
Symptoms:
	1. EXACT the same Kernel+FS on WPJ344 board with 8M flash works fine. Swith flash chip to 32MB one the kernel can recognize this chip but cant read SquashFS magic header(qshl).
	2. Change the definition of fl256s to
	{ "s25fl256s1", INFO(0x010219, 0x4d01,  64 * 1024, 256, 0) },
	IE. fake it like a 16MB flash. It works
	3. Use a logical analyzer to monitor the SPI_CLK, SPI_CS, SPI_SO and SPI_SI. The Read command is always 0x0b(FAST_READ) no matter how you change the OPCODE in m25p80.c.
	4. If use CONFIG_M25PXX_USE_FAST_READ, kernel crash.
	5. 

Conclusion:
	1. AR9344 flash map is 0x1F00_0000 to 0x1FFF_FFFF size 16MByte. No support for >16MByte.
	2. That means in AR9344, you will NEVER be able to access flash with an address > 0x9FFF_FFFF, otherwise the kernel crash. That means, the flash offset cant be > 0x0FF_FFFF. AR9344 monitors this offset and do some mapping. Kernel crashes if this maps to over 16MByte.
	3. AR9344 can ONLY work with 3 addr mode. To make 4 byte access, work with the Bank Address Register bit1_0 to select bank 0 (lower 16MB)or 1 (higher 16MB).

Question:
	1. With a working code, the read OPCODE is xx03(OPCODE_NORM_READ). But on the analyser, I always the read OPCODE is 0x0B(FAST_READ).??????
	2. It seems the SPI_CLK is controlled by writing SPI_IO_CONTROL_ADDR register. But by modifying the SPI_CONTROL_ADDR's divider, I can control the SPI_CLK frequency. This is testified by analyser.
	static void ath79_spi_enable(struct ath79_spi *sp)
	{
		/* enable GPIO mode */
		ath79_spi_wr(sp, AR71XX_SPI_REG_FS, AR71XX_SPI_FS_GPIO);

		/* save CTRL register */
		sp->reg_ctrl = ath79_spi_rr(sp, AR71XX_SPI_REG_CTRL);
		sp->ioc_base = ath79_spi_rr(sp, AR71XX_SPI_REG_IOC);

		/* TODO: setup speed? */
		printk(KERN_WARNING "===MHX set SPI clock divider to 0x48. This really works!!!!\n");
		ath79_spi_wr(sp, AR71XX_SPI_REG_CTRL, 0x48);
	}

struct spi_master {
        struct device   dev;

        struct list_head list;

        /* other than negative (== assign one dynamically), bus_num is fully
         * board-specific.  usually that simplifies to being SOC-specific.
         * example:  one SOC has three SPI controllers, numbered 0..2,
         * and one board's schematics might show it using SPI-2.  software
         * would normally use bus_num=2 for that controller.
         */
        s16                     bus_num;

        /* chipselects will be integral to many controllers; some others
         * might use board-specific GPIOs.
         */
        u16                     num_chipselect;

        /* some SPI controllers pose alignment requirements on DMAable
         * buffers; let protocol drivers know about these requirements.
         */
        u16                     dma_alignment;

        /* spi_device.mode flags understood by this controller driver */
        u16                     mode_bits;

        /* other constraints relevant to this driver */
        u16                     flags;
#define SPI_MASTER_HALF_DUPLEX  BIT(0)          /* can't do full duplex */
#define SPI_MASTER_NO_RX        BIT(1)          /* can't do buffer read */
#define SPI_MASTER_NO_TX        BIT(2)          /* can't do buffer write */

        /* lock and mutex for SPI bus locking */
        spinlock_t              bus_lock_spinlock;
        struct mutex            bus_lock_mutex;

        /* flag indicating that the SPI bus is locked for exclusive use */
        bool                    bus_lock_flag;

        /* Setup mode and clock, etc (spi driver may call many times).
         *
         * IMPORTANT:  this may be called when transfers to another
         * device are active.  DO NOT UPDATE SHARED REGISTERS in ways
         * which could break those transfers.
         */
        int                     (*setup)(struct spi_device *spi);
        /* bidirectional bulk transfers
         *
         * + The transfer() method may not sleep; its main role is
         *   just to add the message to the queue.
         * + For now there's no remove-from-queue operation, or
         *   any other request management
         * + To a given spi_device, message queueing is pure fifo
         *
         * + The master's main job is to process its message queue,
         *   selecting a chip then transferring data
         * + If there are multiple spi_device children, the i/o queue
         *   arbitration algorithm is unspecified (round robin, fifo,
         *   priority, reservations, preemption, etc)
         *
         * + Chipselect stays active during the entire message
         *   (unless modified by spi_transfer.cs_change != 0).
         * + The message transfers use clock and SPI mode parameters
         *   previously established by setup() for this device
         */
        int                     (*transfer)(struct spi_device *spi,
                                                struct spi_message *mesg);

        /* called on release() to free memory provided by spi_master */
        void                    (*cleanup)(struct spi_device *spi);

        /*
         * These hooks are for drivers that want to use the generic
         * master transfer queueing mechanism. If these are used, the
         * transfer() function above must NOT be specified by the driver.
         * Over time we expect SPI drivers to be phased over to this API.
         */
        bool                            queued;
        struct kthread_worker           kworker;
        struct task_struct              *kworker_task;
        struct kthread_work             pump_messages;
        spinlock_t                      queue_lock;
        struct list_head                queue;
        struct spi_message              *cur_msg;
        bool                            busy;
        bool                            running;
        bool                            rt;

        int (*prepare_transfer_hardware)(struct spi_master *master);
        int (*transfer_one_message)(struct spi_master *master,
};

struct spi_bitbang {
        struct workqueue_struct *workqueue;
        struct work_struct      work;

        spinlock_t              lock;
        struct list_head        queue;
        u8                      busy;
        u8                      use_dma;
        u8                      flags;          /* extra spi->mode support */

        struct spi_master       *master;

        /* setup_transfer() changes clock and/or wordsize to match settings
         * for this transfer; zeroes restore defaults from spi_device.
         */
        int     (*setup_transfer)(struct spi_device *spi,
                        struct spi_transfer *t);

        void    (*chipselect)(struct spi_device *spi, int is_on);
#define BITBANG_CS_ACTIVE       1       /* normally nCS, active low */
#define BITBANG_CS_INACTIVE     0

        /* txrx_bufs() may handle dma mapping for transfers that don't
         * already have one (transfer.{tx,rx}_dma is zero), or use PIO
         */
        int     (*txrx_bufs)(struct spi_device *spi, struct spi_transfer *t);

        /* txrx_word[SPI_MODE_*]() just looks like a shift register */
        u32     (*txrx_word[4])(struct spi_device *spi,
                        unsigned nsecs,
                        u32 word, u8 bits);
};


struct ath79_spi {
	struct spi_bitbang	bitbang;
	u32			ioc_base;
	u32			reg_ctrl;
	void __iomem		*base;
	struct clk		*clk;
	unsigned		rrw_delay;

	enum ath79_spi_state	state;
	u32			clk_div;
	unsigned long 		read_addr;
	unsigned long		ahb_rate;
};

struct spi_device {
        struct device           dev;
        struct spi_master       *master;
        u32                     max_speed_hz;
        u8                      chip_select;
        u8                      mode;
#define SPI_CPHA        0x01                    /* clock phase */
#define SPI_CPOL        0x02                    /* clock polarity */
#define SPI_MODE_0      (0|0)                   /* (original MicroWire) */
#define SPI_MODE_1      (0|SPI_CPHA)
#define SPI_MODE_2      (SPI_CPOL|0)
#define SPI_MODE_3      (SPI_CPOL|SPI_CPHA)
#define SPI_CS_HIGH     0x04                    /* chipselect active high? */
#define SPI_LSB_FIRST   0x08                    /* per-word bits-on-wire */
#define SPI_3WIRE       0x10                    /* SI/SO signals shared */
#define SPI_LOOP        0x20                    /* loopback mode */
#define SPI_NO_CS       0x40                    /* 1 dev/bus, no chipselect */
#define SPI_READY       0x80                    /* slave pulls low to pause */
        u8                      bits_per_word;
        int                     irq;
        void                    *controller_state;
        void                    *controller_data;
        char                    modalias[SPI_NAME_SIZE];

        /*
         * likely need more hooks for more protocol options affecting how
         * the controller talks to each chip, like:
         *  - memory packing (12 bit samples into low bits, others zeroed)
         *  - priority
         *  - drop chipselect after each word
         *  - chipselect delays
         *  - ...
         */
};

In build_dir/linux-ar71xx_generic/linux-3.3.8/arch/mips/include/asm/mach-ath79/ath79_spi_platform.h:
struct ath79_spi_platform_data {
        unsigned        bus_num;
        unsigned        num_chipselect;
};

enum ath79_spi_cs_type {
        ATH79_SPI_CS_TYPE_INTERNAL,
        ATH79_SPI_CS_TYPE_GPIO,
};

struct ath79_spi_controller_data {
        enum ath79_spi_cs_type cs_type;
        unsigned cs_line;
        bool is_flash;
};

enum spi_transfer_type {
        SPI_TRANSFER_GENERIC = 0,
        SPI_TRANSFER_FLASH_READ_CMD,
        SPI_TRANSFER_FLASH_READ_DATA,
};

struct spi_transfer {
        /* it's ok if tx_buf == rx_buf (right?)
         * for MicroWire, one buffer must be null
         * buffers must work with dma_*map_single() calls, unless
         *   spi_message.is_dma_mapped reports a pre-existing mapping
         */
        const void      *tx_buf;
        void            *rx_buf;
        unsigned        len;

        dma_addr_t      tx_dma;
        dma_addr_t      rx_dma;

        unsigned        cs_change:1;
        unsigned        verify:1;
        unsigned        fast_write:1;
        u8              bits_per_word;
        u16             delay_usecs;
        u32             speed_hz;
        enum spi_transfer_type type;

        struct list_head transfer_list;
};

struct spi_bitbang_cs {
	unsigned	nsecs;	/* (clock cycle time)/2 */
	u32		(*txrx_word)(struct spi_device *spi, unsigned nsecs,
					u32 word, u8 bits);
	unsigned	(*txrx_bufs)(struct spi_device *,
					u32 (*txrx_word)(
						struct spi_device *spi,
						unsigned nsecs,
						u32 word, u8 bits),
					unsigned, struct spi_transfer *);
};



Nov 28,2014
For AR9220:
Transmit output frequency range 5 MHz center 2.412 — 2.472 GHz
Transmit output frequency range 20 MHz center 5.18 — 5.825 GHz

Nov 25, 2014
The WHOLE F/W format is defined in tools/firmware-utils/src/myloader.h:
/*
 * Firmware file format:
 *
 *	<header>
 *	[<block descriptor 0>]
 *	...
 *	[<block descriptor n>]
 *	<null block descriptor>
 *	[<block data 0>]
 *	...
 *	[<block data n>]
 *
 *
 */

1. The header:
struct mylo_fw_header {
	uint32_t	magic;	/* must be MYLO_MAGIC_FIRMWARE.Standard OpenWRT image magic number 0x4C594D00 ".MYL" */
	uint32_t	crc;	/* CRC of the whole firmware */
	uint32_t	res0;	/* unknown/unused */
	uint32_t	res1;	/* unknown/unused */
	uint16_t	vid;	/* vendor ID. Passed in by mkmylofw -i option. */
	uint16_t	did;	/* device ID. Passed in by mkmylofw -i option. */
	uint16_t	svid;	/* sub vendor ID. Passed in by mkmylofw -i option. */
	uint16_t	sdid;	/* sub device ID. Passed in by mkmylofw -i option. */
	uint32_t	rev;	/* device revision */
	uint32_t	fwhi;	/* FIXME: firmware version high? */
	uint32_t	fwlo;	/* FIXME: firmware version low? */
	uint32_t	flags;	/* firmware flags */
};

2. Block descriptor:
struct mylo_fw_blockdesc {
	uint32_t	type;	/* block type */
	uint32_t	addr;	/* relative address to flash start */
	uint32_t	dlen;	/* size of block data in bytes */
	uint32_t	blen;	/* total size of block in bytes */
};



Oct 27,2014
Sniffer can not guarantee to capture EVERY packet in the air!!! A sample EAPOL captured is : Key1: AP--->STA39Mbps rate; Key2: STA--->AP, 2Mbps; Key3: AP-->STA,39Mbps; Key4: STA--->AP,2Mbps. Sometimes we can only capture 2 or 3 of the 4 keys, which is normal.

Oct 22, 2014
VIP4G as AP working in 11ng mode. One nVIP2400 bg client and one 802.11AC client (BCM4326 chipset, ASUS PCIe WNIC). Run iw station dump on AP.
All "RX Rate" shown will finally drop to 1.0Mbps. This is because the STA will send a NULL data packet with 1.0Mbps rate every 30 seconds (in nVIP2400 STA) and more frequent in 802.11AC clients. So for 802.11ac clients, we can see the "RX Rate" drops faster than a b/g station. But sometimes a b/g STA will send Spanning Tree packets which are high data rate, so the "RX Rate" of this STA will never drop to 1.0Mbps but that doesn't mean the STA doesn't send the NULL data packet with 1Mbps rate. 

The "RX Rate" on the AP iw station dump command means, the LAST data packet rate from the respective STA.

Oct 21, 2014
Compat-wireless driver r31807 uses a different debug mode called CONFIG_DYNAMIC_DEBUG that is defined in kernel configuration. Even thouhg CONFIG_PACKAGE_ATH_DEBUG=y is defined in the root .config file, and "export CONFIG_ATH5K_DEBUG=y" is defined in package/mac80211/src_3/config.mk the dmesg is still like:

ath5k: phy0: 802ffd3c
ath5k: phy0: 802ffd3c
ath5k: phy0: 802ffd3c
__ratelimit: 615 callbacks suppressed
ath5k: phy0: 802ffd74

After CONFIG_DYNAMIC_DEBUG is enabled in kernel config, 
root@FLC24G:~# cat sys/kernel/debug/dynamic_debug/control 
# filename:lineno [module]function flags format
arch/mips/kernel/module.c:548 [module]apply_relocate_add - "Applying relocate section %u to %u\012"
arch/mips/kernel/module.c:508 [module]apply_relocate - "Applying relocate section %u to %u\012"
arch/mips/kernel/spram.c:140 [spram]probe_spram - "DBG %s%d: tag0=%08x tag1=%08x\012"
arch/mips/mm/tlbex.c:196 [tlbex]build_r3000_tlb_refill_handler - "Wrote TLB refill handler (%u instructions).\012"
arch/mips/mm/tlbex.c:124 [tlbex]dump_handler - "\011.set pop\012"
arch/mips/mm/tlbex.c:122 [tlbex]dump_handler - "\011%p\011.word 0x%08x\012"
arch/mips/mm/tlbex.c:119 [tlbex]dump_handler - "\011.set noreorder\012"
arch/mips/mm/tlbex.c:118 [tlbex]dump_handler - "\011.set push\012"
arch/mips/mm/tlbex.c:1123 [tlbex]build_r3000_tlb_load_handler - "Wrote TLB load handler fastpath (%u instructions).\012"
arch/mips/mm/tlbex.c:1153 [tlbex]build_r3000_tlb_store_handler - "Wrote TLB store handler fastpath (%u instructions).\012"
arch/mips/mm/tlbex.c:1183 [tlbex]build_r3000_tlb_modify_handler - "Wrote TLB modify handler fastpath (%u instructions).\012"
arch/mips/mm/tlbex.c:870 [tlbex]build_r4000_tlb_refill_handler - "Wrote TLB refill handler (%u instructions).\012"
arch/mips/mm/tlbex.c:1290 [tlbex]build_r4000_tlb_load_handler - "Wrote TLB load handler fastpath (%u instructions).\012"
arch/mips/mm/tlbex.c:1335 [tlbex]build_r4000_tlb_store_handler - "Wrote TLB store handler fastpath (%u instructions).\012"
arch/mips/mm/tlbex.c:1381 [tlbex]build_r4000_tlb_modify_handler - "Wrote TLB modify handler fastpath (%u instructions).\012"
arch/mips/mm/page.c:610 [page]build_copy_page - "\011.set pop\012"
arch/mips/mm/page.c:609 [page]build_copy_page - "\011.word 0x%08x\012"
arch/mips/mm/page.c:607 [page]build_copy_page - "\011.set noreorder\012"
arch/mips/mm/page.c:606 [page]build_copy_page - "\011.set push\012"
arch/mips/mm/page.c:604 [page]build_copy_page - "Synthesized copy page handler (%u instructions).\012"
arch/mips/mm/page.c:371 [page]build_clear_page - "\011.set pop\012"
arch/mips/mm/page.c:370 [page]build_clear_page - "\011.word 0x%08x\012"

But the ath5k debug information is not there. The ath5k debug information now uses a va_format way with printk("%pV") format. This special "%pV" flag for printk() should be recoginzed by kernel code printk function. But :
grep va_format build_dir/linux-ar71xx/linux-2.6.32.9/ -r
return nothing in nvip2400 kernel. So this way couldn't work and only print out a pointer as shonw ahead (%p).


Oct 15, 2014
When AP is suddenly powered off, the STA scans all channels with 1sec interval:
nl80211: Event message available
nl80211: Delete station 04:f0:21:10:4d:75
nl80211: Event message available
nl80211: MLME event 39
wlan0: Event DEAUTH (12) received
wlan0: Deauthentication notification
wlan0:  * reason 2
wlan0:  * address 04:f0:21:10:4d:75
Deauthentication frame IE(s) - hexdump(len=0): [NULL]
wlan0: Auto connect enabled: try to reconnect (wps=0 wpa_state=9)
wlan0: Setting scan request: 0 sec 100000 usec
Added BSSID 04:f0:21:10:4d:75 into blacklist
wlan0: Not rescheduling scan to ensure that specific SSID scans occur
wlan0: CTRL-EVENT-DISCONNECTED bssid=04:f0:21:10:4d:75 reason=2
wlan0: Disconnect event - remove keys
wpa_driver_nl80211_set_key: ifindex=12 alg=0 addr=(nil) key_idx=0 set_tx=0 seq_len=0 key_len=0
wpa_driver_nl80211_set_key: ifindex=12 alg=0 addr=(nil) key_idx=1 set_tx=0 seq_len=0 key_len=0
wpa_driver_nl80211_set_key: ifindex=12 alg=0 addr=(nil) key_idx=2 set_tx=0 seq_len=0 key_len=0
wpa_driver_nl80211_set_key: ifindex=12 alg=0 addr=(nil) key_idx=3 set_tx=0 seq_len=0 key_len=0
wpa_driver_nl80211_set_key: ifindex=12 alg=0 addr=(nil) key_idx=4 set_tx=0 seq_len=0 key_len=0
wpa_driver_nl80211_set_key: ifindex=12 alg=0 addr=(nil) key_idx=5 set_tx=0 seq_len=0 key_len=0
wpa_driver_nl80211_set_key: ifindex=12 alg=0 addr=0x4bb454 key_idx=0 set_tx=0 seq_len=0 key_len=0
   addr=04:f0:21:10:4d:75
wlan0: State: COMPLETED -> DISCONNECTED
wpa_driver_nl80211_set_operstate: operstate 1->0 (DORMANT)
netlink: Operstate: linkmode=-1, operstate=5
EAPOL: External notification - portEnabled=0
EAPOL: SUPP_PAE entering state DISCONNECTED
EAPOL: Supplicant port status: Unauthorized
EAPOL: SUPP_BE entering state INITIALIZE
EAPOL: Supplicant port status: Unauthorized
EAPOL: External notification - portValid=0
EAPOL: Supplicant port status: Unauthorized
EAPOL: External notification - EAP success=0
EAPOL: Supplicant port status: Unauthorized
RTM_NEWLINK: operstate=0 ifi_flags=0x1003 ([UP])
RTM_NEWLINK, IFLA_IFNAME: Interface 'wlan0' added
nl80211: if_removed already cleared - ignore event
nl80211: Event message available
nl80211: Ignore disconnect event when using userspace SME
RTM_NEWLINK: operstate=0 ifi_flags=0x1003 ([UP])
RTM_NEWLINK, IFLA_IFNAME: Interface 'wlan0' added
nl80211: if_removed already cleared - ignore event
RTM_NEWLINK: operstate=0 ifi_flags=0x1043 ([UP][RUNNING])
RTM_NEWLINK, IFLA_IFNAME: Interface 'wlan0' added
nl80211: if_removed already cleared - ignore event
wlan0: State: DISCONNECTED -> SCANNING
Scan SSID - hexdump_ascii(len=10):
     56 49 50 34 47 2d 6a 65 66 66                     VIP4G-jeff      
wlan0: Starting AP scan for wildcard SSID
Scan requested (ret=0) - scan timeout 30 seconds
nl80211: Event message available
nl80211: Scan trigger
nl80211: Event message available
nl80211: New scan results available
wlan0: Event SCAN_RESULTS (3) received
nl80211: Received scan results (9 BSSes)
wlan0: BSS: Start scan result update 2
wlan0: BSS: Add new id 9 BSSID 04:f0:21:03:e8:1c SSID 'VIP4G-LArry'
wlan0: New scan results available
wlan0: Selecting BSS from priority group 0
wlan0: 0: 04:f0:21:04:8d:69 ssid='MyNetwork' wpa_ie_len=26 rsn_ie_len=24 caps=0x411 level=-51
wlan0:    skip - SSID mismatch
wlan0: 1: c8:d7:19:1e:23:0d ssid='' wpa_ie_len=0 rsn_ie_len=20 caps=0x431 level=-47
wlan0:    skip - SSID mismatch
wlan0: 2: 00:15:6d:68:3d:0c ssid='work2901' wpa_ie_len=26 rsn_ie_len=24 caps=0x531 level=-62
wlan0:    skip - SSID mismatch
wlan0: 3: 04:f0:21:10:4d:75 ssid='VIP4G-jeff' wpa_ie_len=0 rsn_ie_len=20 caps=0x411 level=-62
wlan0:    skip - blacklisted (count=1 limit=0)
wlan0: 4: 00:80:48:79:8e:3e ssid='VIP4G-MONSTER' wpa_ie_len=0 rsn_ie_len=20 caps=0x411 level=-65
wlan0:    skip - SSID mismatch
wlan0: 5: 00:15:6d:69:7d:88 ssid='Microguest' wpa_ie_len=26 rsn_ie_len=24 caps=0x411 level=-69
wlan0:    skip - SSID mismatch
wlan0: 6: 04:f0:21:03:e8:1c ssid='VIP4G-LArry' wpa_ie_len=26 rsn_ie_len=24 caps=0x411 level=-84
wlan0:    skip - SSID mismatch
wlan0: 7: 00:80:48:79:8e:3f ssid='VIP4G' wpa_ie_len=0 rsn_ie_len=0 caps=0x401 level=-59
wlan0:    skip - SSID mismatch
wlan0: 8: 00:0f:92:fe:04:74 ssid='wlan0' wpa_ie_len=0 rsn_ie_len=0 caps=0x1 level=-80
wlan0:    skip - SSID mismatch
wlan0: No APs found - clear blacklist and try again
Removed BSSID 04:f0:21:10:4d:75 from blacklist (clear)
wlan0: Selecting BSS from priority group 0
wlan0: 0: 04:f0:21:04:8d:69 ssid='MyNetwork' wpa_ie_len=26 rsn_ie_len=24 caps=0x411 level=-51
wlan0:    skip - SSID mismatch
wlan0: 1: c8:d7:19:1e:23:0d ssid='' wpa_ie_len=0 rsn_ie_len=20 caps=0x431 level=-47
wlan0:    skip - SSID mismatch
wlan0: 2: 00:15:6d:68:3d:0c ssid='work2901' wpa_ie_len=26 rsn_ie_len=24 caps=0x531 level=-62
wlan0:    skip - SSID mismatch
wlan0: 3: 04:f0:21:10:4d:75 ssid='VIP4G-jeff' wpa_ie_len=0 rsn_ie_len=20 caps=0x411 level=-62
wlan0:    selected based on RSN IE
wlan0:    selected BSS 04:f0:21:10:4d:75 ssid='VIP4G-jeff'
wlan0: Request association: reassociate: 0  selected: 04:f0:21:10:4d:75  bssid: 00:00:00:00:00:00  pending: 00:00:00:00:00:00  wpa_state: SCANNING
wlan0: Automatic auth_alg selection: 0x1
RSN: PMKSA cache search - network_ctx=0x4bc948 try_opportunistic=0
RSN: Search for BSSID 04:f0:21:10:4d:75
RSN: No PMKSA cache entry found
wlan0: RSN: using IEEE 802.11i/D9.0
wlan0: WPA: Selected cipher suites: group 16 pairwise 16 key_mgmt 2 proto 2
wlan0: WPA: clearing AP WPA IE
WPA: set AP RSN IE - hexdump(len=22): 30 14 01 00 00 0f ac 04 01 00 00 0f ac 04 01 00 00 0f ac 02 0c 00
wlan0: WPA: using GTK CCMP
wlan0: WPA: using PTK CCMP
wlan0: WPA: using KEY_MGMT WPA-PSK
wlan0: WPA: not using MGMT group cipher
WPA: Set own WPA IE default - hexdump(len=22): 30 14 01 00 00 0f ac 04 01 00 00 0f ac 04 01 00 00 0f ac 02 00 00
wlan0: Cancelling scan request
wlan0: SME: Trying to authenticate with 04:f0:21:10:4d:75 (SSID='VIP4G-jeff' freq=2457 MHz)
wlan0: No keys have been configured - skip key clearing
wlan0: State: SCANNING -> AUTHENTICATING
EAPOL: External notification - EAP success=0
EAPOL: Supplicant port status: Unauthorized
EAPOL: External notification - EAP fail=0
EAPOL: Supplicant port status: Unauthorized
EAPOL: External notification - portControl=Auto
EAPOL: Supplicant port status: Unauthorized
nl80211: Authenticate (ifindex=12)
  * bssid=04:f0:21:10:4d:75
  * freq=2457
  * SSID - hexdump_ascii(len=10):
     56 49 50 34 47 2d 6a 65 66 66                     VIP4G-jeff      
  * IEs - hexdump(len=0): [NULL]
  * Auth Type 0
nl80211: Authentication request send successfully
wlan0: Checking for other virtual interfaces sharing same radio (phy0) in event_scan_results
RTM_NEWLINK: operstate=0 ifi_flags=0x1003 ([UP])

RTM_NEWLINK, IFLA_IFNAME: Interface 'wlan0' added
nl80211: if_removed already cleared - ignore event
nl80211: Event message available
nl80211: New station 04:f0:21:10:4d:75
nl80211: Event message available
nl80211: Delete station 04:f0:21:10:4d:75
nl80211: Event message available
nl80211: MLME event 37; timeout with 04:f0:21:10:4d:75
wlan0: Event AUTH_TIMED_OUT (14) received
wlan0: SME: Authentication timed out
Added BSSID 04:f0:21:10:4d:75 into blacklist
wlan0: Setting scan request: 0 sec 100000 usec
wlan0: State: AUTHENTICATING -> DISCONNECTED
wpa_driver_nl80211_set_operstate: operstate 0->0 (DORMANT)
netlink: Operstate: linkmode=-1, operstate=5
EAPOL: External notification - portEnabled=0
EAPOL: Supplicant port status: Unauthorized
EAPOL: External notification - portValid=0
EAPOL: Supplicant port status: Unauthorized
EAPOL: External notification - EAP success=0
EAPOL: Supplicant port status: Unauthorized
wlan0: State: DISCONNECTED -> SCANNING
Scan SSID - hexdump_ascii(len=10):
     56 49 50 34 47 2d 6a 65 66 66                     VIP4G-jeff      
wlan0: Starting AP scan for wildcard SSID
Scan requested (ret=0) - scan timeout 30 seconds
nl80211: Event message available
nl80211: Scan trigger
nl80211: Event message available
nl80211: New scan results available
wlan0: Event SCAN_RESULTS (3) received
nl80211: Received scan results (11 BSSes)
wlan0: BSS: Start scan result update 3
wlan0: BSS: Add new id 10 BSSID 74:d0:2b:89:0b:50 SSID 'AndrewW'
wlan0: BSS: Add new id 11 BSSID 10:bf:48:91:6a:18 SSID 'ASUS'
wlan0: BSS: Add new id 12 BSSID 00:22:2d:e5:7b:d0 SSID 'E57BCD'
wlan0: BSS: Expire BSS 7 due to no match in scan
wlan0: BSS: Remove id 7 BSSID 00:0f:92:fe:04:7a SSID 'wlan0'
wlan0: New scan results available
wlan0: Selecting BSS from priority group 0
wlan0: 0: 04:f0:21:04:8d:69 ssid='MyNetwork' wpa_ie_len=26 rsn_ie_len=24 caps=0x411 level=-55
wlan0:    skip - SSID mismatch
wlan0: 1: c8:d7:19:1e:23:0d ssid='' wpa_ie_len=0 rsn_ie_len=20 caps=0x431 level=-48
wlan0:    skip - SSID mismatch
wlan0: 2: 00:15:6d:68:3d:0c ssid='work2901' wpa_ie_len=26 rsn_ie_len=24 caps=0x531 level=-55
wlan0:    skip - SSID mismatch
wlan0: 3: 00:15:6d:69:7d:88 ssid='Microguest' wpa_ie_len=26 rsn_ie_len=24 caps=0x411 level=-55
wlan0:    skip - SSID mismatch
wlan0: 4: 00:80:48:79:8e:3e ssid='VIP4G-MONSTER' wpa_ie_len=0 rsn_ie_len=20 caps=0x411 level=-66
wlan0:    skip - SSID mismatch
wlan0: 5: 04:f0:21:03:e8:1c ssid='VIP4G-LArry' wpa_ie_len=26 rsn_ie_len=24 caps=0x411 level=-83
wlan0:    skip - SSID mismatch
wlan0: 6: 74:d0:2b:89:0b:50 ssid='AndrewW' wpa_ie_len=0 rsn_ie_len=20 caps=0x411 level=-84 wps
wlan0:    skip - SSID mismatch
wlan0: 7: 10:bf:48:91:6a:18 ssid='ASUS' wpa_ie_len=28 rsn_ie_len=24 caps=0x411 level=-86 wps
wlan0:    skip - SSID mismatch
wlan0: 8: 00:22:2d:e5:7b:d0 ssid='E57BCD' wpa_ie_len=26 rsn_ie_len=24 caps=0x11 level=-94
wlan0:    skip - SSID mismatch
wlan0: 9: 00:80:48:79:8e:3f ssid='VIP4G' wpa_ie_len=0 rsn_ie_len=0 caps=0x401 level=-63
wlan0:    skip - SSID mismatch
wlan0: 10: 00:0f:92:fe:04:74 ssid='wlan0' wpa_ie_len=0 rsn_ie_len=0 caps=0x1 level=-83
wlan0:    skip - SSID mismatch
wlan0: No APs found - clear blacklist and try again
Removed BSSID 04:f0:21:10:4d:75 from blacklist (clear)
wlan0: Selecting BSS from priority group 0
wlan0: 0: 04:f0:21:04:8d:69 ssid='MyNetwork' wpa_ie_len=26 rsn_ie_len=24 caps=0x411 level=-55
wlan0:    skip - SSID mismatch
wlan0: 1: c8:d7:19:1e:23:0d ssid='' wpa_ie_len=0 rsn_ie_len=20 caps=0x431 level=-48
wlan0:    skip - SSID mismatch
wlan0: 2: 00:15:6d:68:3d:0c ssid='work2901' wpa_ie_len=26 rsn_ie_len=24 caps=0x531 level=-55
wlan0:    skip - SSID mismatch
wlan0: 3: 00:15:6d:69:7d:88 ssid='Microguest' wpa_ie_len=26 rsn_ie_len=24 caps=0x411 level=-55
wlan0:    skip - SSID mismatch
wlan0: 4: 00:80:48:79:8e:3e ssid='VIP4G-MONSTER' wpa_ie_len=0 rsn_ie_len=20 caps=0x411 level=-66
wlan0:    skip - SSID mismatch
wlan0: 5: 04:f0:21:03:e8:1c ssid='VIP4G-LArry' wpa_ie_len=26 rsn_ie_len=24 caps=0x411 level=-83
wlan0:    skip - SSID mismatch
wlan0: 6: 74:d0:2b:89:0b:50 ssid='AndrewW' wpa_ie_len=0 rsn_ie_len=20 caps=0x411 level=-84 wps
wlan0:    skip - SSID mismatch
wlan0: 7: 10:bf:48:91:6a:18 ssid='ASUS' wpa_ie_len=28 rsn_ie_len=24 caps=0x411 level=-86 wps
wlan0:    skip - SSID mismatch
wlan0: 8: 00:22:2d:e5:7b:d0 ssid='E57BCD' wpa_ie_len=26 rsn_ie_len=24 caps=0x11 level=-94
wlan0:    skip - SSID mismatch
wlan0: 9: 00:80:48:79:8e:3f ssid='VIP4G' wpa_ie_len=0 rsn_ie_len=0 caps=0x401 level=-63
wlan0:    skip - SSID mismatch
wlan0: 10: 00:0f:92:fe:04:74 ssid='wlan0' wpa_ie_len=0 rsn_ie_len=0 caps=0x1 level=-83
wlan0:    skip - SSID mismatch
wlan0: No suitable network found
wlan0: Setting scan request: 1 sec 0 usec
wlan0: Checking for other virtual interfaces sharing same radio (phy0) in event_scan_results
RTM_NEWLINK: operstate=0 ifi_flags=0x1003 ([UP])
RTM_NEWLINK, IFLA_IFNAME: Interface 'wlan0' added
nl80211: if_removed already cleared - ignore event
Scan SSID - hexdump_ascii(len=10):
     56 49 50 34 47 2d 6a 65 66 66                     VIP4G-jeff      
wlan0: Starting AP scan for wildcard SSID
Scan requested (ret=0) - scan timeout 30 seconds
nl80211: Event message available
nl80211: Scan trigger
nl80211: Event message available
nl80211: New scan results available
wlan0: Event SCAN_RESULTS (3) received
nl80211: Received scan results (11 BSSes)
wlan0: BSS: Start scan result update 4
wlan0: BSS: Expire BSS 4 due to no match in scan
wlan0: BSS: Remove id 4 BSSID 04:f0:21:10:4d:75 SSID 'VIP4G-jeff'
wlan0: New scan results available
wlan0: Selecting BSS from priority group 0
wlan0: 0: 04:f0:21:04:8d:69 ssid='MyNetwork' wpa_ie_len=26 rsn_ie_len=24 caps=0x411 level=-51
wlan0:    skip - SSID mismatch
wlan0: 1: c8:d7:19:1e:23:0d ssid='' wpa_ie_len=0 rsn_ie_len=20 caps=0x431 level=-47
wlan0:    skip - SSID mismatch
wlan0: 2: 00:15:6d:68:3d:0c ssid='work2901' wpa_ie_len=26 rsn_ie_len=24 caps=0x431 level=-56
wlan0:    skip - SSID mismatch
wlan0: 3: 00:80:48:79:8e:3e ssid='VIP4G-MONSTER' wpa_ie_len=0 rsn_ie_len=20 caps=0x411 level=-62
wlan0:    skip - SSID mismatch
wlan0: 4: 00:15:6d:69:7d:88 ssid='Microguest' wpa_ie_len=26 rsn_ie_len=24 caps=0x411 level=-69
wlan0:    skip - SSID mismatch
wlan0: 5: 04:f0:21:03:e8:1c ssid='VIP4G-LArry' wpa_ie_len=26 rsn_ie_len=24 caps=0x411 level=-79
wlan0:    skip - SSID mismatch
wlan0: 6: 74:d0:2b:89:0b:50 ssid='AndrewW' wpa_ie_len=0 rsn_ie_len=20 caps=0x411 level=-79 wps
wlan0:    skip - SSID mismatch
wlan0: 7: 10:bf:48:91:6a:18 ssid='ASUS' wpa_ie_len=28 rsn_ie_len=24 caps=0x411 level=-86 wps
wlan0:    skip - SSID mismatch
wlan0: 8: 00:22:2d:e5:7b:d0 ssid='E57BCD' wpa_ie_len=26 rsn_ie_len=24 caps=0x11 level=-94
wlan0:    skip - SSID mismatch
wlan0: 9: 00:80:48:79:8e:3f ssid='VIP4G' wpa_ie_len=0 rsn_ie_len=0 caps=0x401 level=-61
wlan0:    skip - SSID mismatch
wlan0: 10: 00:0f:92:fe:04:74 ssid='wlan0' wpa_ie_len=0 rsn_ie_len=0 caps=0x1 level=-83
wlan0:    skip - SSID mismatch
wlan0: No suitable network found
wlan0: Setting scan request: 1 sec 0 usec
wlan0: Checking for other virtual interfaces sharing same radio (phy0) in event_scan_results
RTM_NEWLINK: operstate=0 ifi_flags=0x1003 ([UP])
RTM_NEWLINK, IFLA_IFNAME: Interface 'wlan0' added
nl80211: if_removed already cleared - ignore event
Scan SSID - hexdump_ascii(len=10):
     56 49 50 34 47 2d 6a 65 66 66                     VIP4G-jeff      
wlan0: Starting AP scan for wildcard SSID
Scan requested (ret=0) - scan timeout 30 seconds
nl80211: Event message available
nl80211: Scan trigger
nl80211: Event message available
nl80211: New scan results available
wlan0: Event SCAN_RESULTS (3) received
nl80211: Received scan results (11 BSSes)
wlan0: BSS: Start scan result update 5
wlan0: New scan results available
wlan0: Selecting BSS from priority group 0
wlan0: 0: c8:d7:19:1e:23:0d ssid='' wpa_ie_len=0 rsn_ie_len=20 caps=0x431 level=-47
wlan0:    skip - SSID mismatch
wlan0: 1: 00:15:6d:68:3d:0c ssid='work2901' wpa_ie_len=26 rsn_ie_len=24 caps=0x431 level=-55
wlan0:    skip - SSID mismatch
wlan0: 2: 00:80:48:79:8e:3e ssid='VIP4G-MONSTER' wpa_ie_len=0 rsn_ie_len=20 caps=0x411 level=-64
wlan0:    skip - SSID mismatch
wlan0: 3: 04:f0:21:04:8d:69 ssid='MyNetwork' wpa_ie_len=26 rsn_ie_len=24 caps=0x411 level=-66
wlan0:    skip - SSID mismatch
wlan0: 4: 00:15:6d:69:7d:88 ssid='Microguest' wpa_ie_len=26 rsn_ie_len=24 caps=0x411 level=-69
wlan0:    skip - SSID mismatch
wlan0: 5: 04:f0:21:03:e8:1c ssid='VIP4G-LArry' wpa_ie_len=26 rsn_ie_len=24 caps=0x411 level=-82
wlan0:    skip - SSID mismatch
wlan0: 6: 74:d0:2b:89:0b:50 ssid='AndrewW' wpa_ie_len=0 rsn_ie_len=20 caps=0x411 level=-82 wps
wlan0:    skip - SSID mismatch
wlan0: 7: 10:bf:48:91:6a:18 ssid='ASUS' wpa_ie_len=28 rsn_ie_len=24 caps=0x411 level=-87 wps
wlan0:    skip - SSID mismatch
wlan0: 8: 00:22:2d:e5:7b:d0 ssid='E57BCD' wpa_ie_len=26 rsn_ie_len=24 caps=0x11 level=-94
wlan0:    skip - SSID mismatch
wlan0: 9: 00:80:48:79:8e:3f ssid='VIP4G' wpa_ie_len=0 rsn_ie_len=0 caps=0x401 level=-64
wlan0:    skip - SSID mismatch
wlan0: 10: 00:0f:92:fe:04:74 ssid='wlan0' wpa_ie_len=0 rsn_ie_len=0 caps=0x1 level=-83
wlan0:    skip - SSID mismatch
wlan0: No suitable network found
wlan0: Setting scan request: 1 sec 0 usec
wlan0: Checking for other virtual interfaces sharing same radio (phy0) in event_scan_results
RTM_NEWLINK: operstate=0 ifi_flags=0x1003 ([UP])
RTM_NEWLINK, IFLA_IFNAME: Interface 'wlan0' added
nl80211: if_removed already cleared - ignore event
Scan SSID - hexdump_ascii(len=10):
     56 49 50 34 47 2d 6a 65 66 66                     VIP4G-jeff      
wlan0: Starting AP scan for wildcard SSID
Scan requested (ret=0) - scan timeout 30 seconds
nl80211: Event message available
nl80211: Scan trigger
nl80211: Event message available
nl80211: New scan results available
wlan0: Event SCAN_RESULTS (3) received
nl80211: Received scan results (12 BSSes)
wlan0: BSS: Start scan result update 6
wlan0: BSS: Add new id 13 BSSID c4:09:38:02:1b:66 SSID 'CIK2090'
wlan0: New scan results available
wlan0: Selecting BSS from priority group 0
wlan0: 0: 04:f0:21:04:8d:69 ssid='MyNetwork' wpa_ie_len=26 rsn_ie_len=24 caps=0x411 level=-52
wlan0:    skip - SSID mismatch
wlan0: 1: c8:d7:19:1e:23:0d ssid='' wpa_ie_len=0 rsn_ie_len=20 caps=0x431 level=-50
wlan0:    skip - SSID mismatch
wlan0: 2: 00:15:6d:68:3d:0c ssid='work2901' wpa_ie_len=26 rsn_ie_len=24 caps=0x531 level=-62
wlan0:    skip - SSID mismatch
wlan0: 3: 00:80:48:79:8e:3e ssid='VIP4G-MONSTER' wpa_ie_len=0 rsn_ie_len=20 caps=0x411 level=-63
wlan0:    skip - SSID mismatch
wlan0: 4: 00:15:6d:69:7d:88 ssid='Microguest' wpa_ie_len=26 rsn_ie_len=24 caps=0x411 level=-64
wlan0:    skip - SSID mismatch
wlan0: 5: 04:f0:21:03:e8:1c ssid='VIP4G-LArry' wpa_ie_len=26 rsn_ie_len=24 caps=0x411 level=-80
wlan0:    skip - SSID mismatch
wlan0: 6: 74:d0:2b:89:0b:50 ssid='AndrewW' wpa_ie_len=0 rsn_ie_len=20 caps=0x411 level=-80 wps
wlan0:    skip - SSID mismatch
wlan0: 7: c4:09:38:02:1b:66 ssid='CIK2090' wpa_ie_len=26 rsn_ie_len=24 caps=0x411 level=-87 wps
wlan0:    skip - SSID mismatch
wlan0: 8: 10:bf:48:91:6a:18 ssid='ASUS' wpa_ie_len=28 rsn_ie_len=24 caps=0x411 level=-87 wps
wlan0:    skip - SSID mismatch
wlan0: 9: 00:22:2d:e5:7b:d0 ssid='E57BCD' wpa_ie_len=26 rsn_ie_len=24 caps=0x11 level=-94
wlan0:    skip - SSID mismatch
wlan0: 10: 00:80:48:79:8e:3f ssid='VIP4G' wpa_ie_len=0 rsn_ie_len=0 caps=0x401 level=-62
wlan0:    skip - SSID mismatch
wlan0: 11: 00:0f:92:fe:04:74 ssid='wlan0' wpa_ie_len=0 rsn_ie_len=0 caps=0x1 level=-83
wlan0:    skip - SSID mismatch
wlan0: No suitable network found
wlan0: Setting scan request: 1 sec 0 usec
wlan0: Checking for other virtual interfaces sharing same radio (phy0) in event_scan_results
RTM_NEWLINK: operstate=0 ifi_flags=0x1003 ([UP])
RTM_NEWLINK, IFLA_IFNAME: Interface 'wlan0' added
nl80211: if_removed already cleared - ignore event
Scan SSID - hexdump_ascii(len=10):
     56 49 50 34 47 2d 6a 65 66 66                     VIP4G-jeff      
wlan0: Starting AP scan for wildcard SSID
Scan requested (ret=0) - scan timeout 30 seconds
nl80211: Event message available
nl80211: Scan trigger
nl80211: Event message available
nl80211: New scan results available
wlan0: Event SCAN_RESULTS (3) received
nl80211: Received scan results (14 BSSes)
wlan0: BSS: Start scan result update 7
wlan0: BSS: Add new id 14 BSSID 00:0e:8e:29:c9:3b SSID 'Colt Canada'
wlan0: BSS: Add new id 15 BSSID 00:0f:92:fa:05:db SSID 'FLC24G'
wlan0: New scan results available

wlan0: Selecting BSS from priority group 0
wlan0: 0: 04:f0:21:04:8d:69 ssid='MyNetwork' wpa_ie_len=26 rsn_ie_len=24 caps=0x411 level=-51
wlan0:    skip - SSID mismatch
wlan0: 1: c8:d7:19:1e:23:0d ssid='' wpa_ie_len=0 rsn_ie_len=20 caps=0x431 level=-45
wlan0:    skip - SSID mismatch
wlan0: 2: 00:15:6d:68:3d:0c ssid='work2901' wpa_ie_len=26 rsn_ie_len=24 caps=0x531 level=-56
wlan0:    skip - SSID mismatch
wlan0: 3: 00:80:48:79:8e:3e ssid='VIP4G-MONSTER' wpa_ie_len=0 rsn_ie_len=20 caps=0x411 level=-61
wlan0:    skip - SSID mismatch
wlan0: 4: 00:15:6d:69:7d:88 ssid='Microguest' wpa_ie_len=26 rsn_ie_len=24 caps=0x411 level=-69
wlan0:    skip - SSID mismatch
wlan0: 5: 04:f0:21:03:e8:1c ssid='VIP4G-LArry' wpa_ie_len=26 rsn_ie_len=24 caps=0x411 level=-77
wlan0:    skip - SSID mismatch
wlan0: 6: 74:d0:2b:89:0b:50 ssid='AndrewW' wpa_ie_len=0 rsn_ie_len=20 caps=0x411 level=-81 wps
wlan0:    skip - SSID mismatch
wlan0: 7: c4:09:38:02:1b:66 ssid='CIK2090' wpa_ie_len=26 rsn_ie_len=24 caps=0x411 level=-87 wps
wlan0:    skip - SSID mismatch
wlan0: 8: 10:bf:48:91:6a:18 ssid='ASUS' wpa_ie_len=28 rsn_ie_len=24 caps=0x411 level=-90 wps
wlan0:    skip - SSID mismatch
wlan0: 9: 00:0e:8e:29:c9:3b ssid='Colt Canada' wpa_ie_len=0 rsn_ie_len=20 caps=0x431 level=-90
wlan0:    skip - SSID mismatch
wlan0: 10: 00:22:2d:e5:7b:d0 ssid='E57BCD' wpa_ie_len=26 rsn_ie_len=24 caps=0x11 level=-94
wlan0:    skip - SSID mismatch
wlan0: 11: 00:80:48:79:8e:3f ssid='VIP4G' wpa_ie_len=0 rsn_ie_len=0 caps=0x401 level=-59
wlan0:    skip - SSID mismatch
wlan0: 12: 00:0f:92:fe:04:74 ssid='wlan0' wpa_ie_len=0 rsn_ie_len=0 caps=0x1 level=-80
wlan0:    skip - SSID mismatch
wlan0: 13: 00:0f:92:fa:05:db ssid='FLC24G' wpa_ie_len=0 rsn_ie_len=0 caps=0x401 level=-92
wlan0:    skip - SSID mismatch
wlan0: No suitable network found
wlan0: Setting scan request: 1 sec 0 usec
wlan0: Checking for other virtual interfaces sharing same radio (phy0) in event_scan_results
RTM_NEWLINK: operstate=0 ifi_flags=0x1003 ([UP])
RTM_NEWLINK, IFLA_IFNAME: Interface 'wlan0' added
nl80211: if_removed already cleared - ignore event
Scan SSID - hexdump_ascii(len=10):
     56 49 50 34 47 2d 6a 65 66 66                     VIP4G-jeff      
wlan0: Starting AP scan for wildcard SSID
Scan requested (ret=0) - scan timeout 30 seconds
nl80211: Event message available
nl80211: Scan trigger
nl80211: Event message available
nl80211: New scan results available
wlan0: Event SCAN_RESULTS (3) received
nl80211: Received scan results (14 BSSes)
wlan0: BSS: Start scan result update 8
wlan0: New scan results available
wlan0: Selecting BSS from priority group 0
wlan0: 0: 04:f0:21:04:8d:69 ssid='MyNetwork' wpa_ie_len=26 rsn_ie_len=24 caps=0x411 level=-53
wlan0:    skip - SSID mismatch
wlan0: 1: c8:d7:19:1e:23:0d ssid='' wpa_ie_len=0 rsn_ie_len=20 caps=0x431 level=-48
wlan0:    skip - SSID mismatch
wlan0: 2: 00:15:6d:68:3d:0c ssid='work2901' wpa_ie_len=26 rsn_ie_len=24 caps=0x531 level=-62
wlan0:    skip - SSID mismatch
wlan0: 3: 00:15:6d:69:7d:88 ssid='Microguest' wpa_ie_len=26 rsn_ie_len=24 caps=0x411 level=-62
wlan0:    skip - SSID mismatch
wlan0: 4: 00:80:48:79:8e:3e ssid='VIP4G-MONSTER' wpa_ie_len=0 rsn_ie_len=20 caps=0x411 level=-65
wlan0:    skip - SSID mismatch
wlan0: 5: 04:f0:21:03:e8:1c ssid='VIP4G-LArry' wpa_ie_len=26 rsn_ie_len=24 caps=0x411 level=-82
wlan0:    skip - SSID mismatch
wlan0: 6: 74:d0:2b:89:0b:50 ssid='AndrewW' wpa_ie_len=0 rsn_ie_len=20 caps=0x411 level=-81 wps
wlan0:    skip - SSID mismatch
wlan0: 7: c4:09:38:02:1b:66 ssid='CIK2090' wpa_ie_len=26 rsn_ie_len=24 caps=0x411 level=-87 wps
wlan0:    skip - SSID mismatch
wlan0: 8: 10:bf:48:91:6a:18 ssid='ASUS' wpa_ie_len=28 rsn_ie_len=24 caps=0x411 level=-90 wps
wlan0:    skip - SSID mismatch
wlan0: 9: 00:0e:8e:29:c9:3b ssid='Colt Canada' wpa_ie_len=0 rsn_ie_len=20 caps=0x431 level=-90
wlan0:    skip - SSID mismatch
wlan0: 10: 00:22:2d:e5:7b:d0 ssid='E57BCD' wpa_ie_len=26 rsn_ie_len=24 caps=0x11 level=-94
wlan0:    skip - SSID mismatch
wlan0: 11: 00:80:48:79:8e:3f ssid='VIP4G' wpa_ie_len=0 rsn_ie_len=0 caps=0x401 level=-58
wlan0:    skip - SSID mismatch
wlan0: 12: 00:0f:92:fe:04:74 ssid='wlan0' wpa_ie_len=0 rsn_ie_len=0 caps=0x1 level=-80
wlan0:    skip - SSID mismatch
wlan0: 13: 00:0f:92:fa:05:db ssid='FLC24G' wpa_ie_len=0 rsn_ie_len=0 caps=0x401 level=-92
wlan0:    skip - SSID mismatch
wlan0: No suitable network found
wlan0: Setting scan request: 1 sec 0 usec
wlan0: Checking for other virtual interfaces sharing same radio (phy0) in event_scan_results
RTM_NEWLINK: operstate=0 ifi_flags=0x1003 ([UP])
RTM_NEWLINK, IFLA_IFNAME: Interface 'wlan0' added
nl80211: if_removed already cleared - ignore event

Scan SSID - hexdump_ascii(len=10):
     56 49 50 34 47 2d 6a 65 66 66                     VIP4G-jeff      
wlan0: Starting AP scan for wildcard SSID
Scan requested (ret=0) - scan timeout 30 seconds
nl80211: Event message available
nl80211: Scan trigger
nl80211: Event message available
nl80211: New scan results available
wlan0: Event SCAN_RESULTS (3) received
nl80211: Received scan results (14 BSSes)
wlan0: BSS: Start scan result update 9
wlan0: New scan results available
wlan0: Selecting BSS from priority group 0
wlan0: 0: 04:f0:21:04:8d:69 ssid='MyNetwork' wpa_ie_len=26 rsn_ie_len=24 caps=0x411 level=-52
wlan0:    skip - SSID mismatch
wlan0: 1: c8:d7:19:1e:23:0d ssid='' wpa_ie_len=0 rsn_ie_len=20 caps=0x431 level=-46
wlan0:    skip - SSID mismatch
wlan0: 2: 00:15:6d:69:7d:88 ssid='Microguest' wpa_ie_len=26 rsn_ie_len=24 caps=0x411 level=-63
wlan0:    skip - SSID mismatch
wlan0: 3: 00:80:48:79:8e:3e ssid='VIP4G-MONSTER' wpa_ie_len=0 rsn_ie_len=20 caps=0x411 level=-65
wlan0:    skip - SSID mismatch
wlan0: 4: 00:15:6d:68:3d:0c ssid='work2901' wpa_ie_len=26 rsn_ie_len=24 caps=0x531 level=-65
wlan0:    skip - SSID mismatch
wlan0: 5: 04:f0:21:03:e8:1c ssid='VIP4G-LArry' wpa_ie_len=26 rsn_ie_len=24 caps=0x411 level=-81
wlan0:    skip - SSID mismatch
wlan0: 6: 00:0e:8e:29:c9:3b ssid='Colt Canada' wpa_ie_len=0 rsn_ie_len=20 caps=0x431 level=-84
wlan0:    skip - SSID mismatch
wlan0: 7: c4:09:38:02:1b:66 ssid='CIK2090' wpa_ie_len=26 rsn_ie_len=24 caps=0x411 level=-87 wps
wlan0:    skip - SSID mismatch
wlan0: 8: 74:d0:2b:89:0b:50 ssid='AndrewW' wpa_ie_len=0 rsn_ie_len=20 caps=0x411 level=-86 wps
wlan0:    skip - SSID mismatch
wlan0: 9: 10:bf:48:91:6a:18 ssid='ASUS' wpa_ie_len=28 rsn_ie_len=24 caps=0x411 level=-90 wps
wlan0:    skip - SSID mismatch
wlan0: 10: 00:22:2d:e5:7b:d0 ssid='E57BCD' wpa_ie_len=26 rsn_ie_len=24 caps=0x11 level=-94
wlan0:    skip - SSID mismatch
wlan0: 11: 00:80:48:79:8e:3f ssid='VIP4G' wpa_ie_len=0 rsn_ie_len=0 caps=0x401 level=-58
wlan0:    skip - SSID mismatch
wlan0: 12: 00:0f:92:fe:04:74 ssid='wlan0' wpa_ie_len=0 rsn_ie_len=0 caps=0x1 level=-80
wlan0:    skip - SSID mismatch
wlan0: 13: 00:0f:92:fa:05:db ssid='FLC24G' wpa_ie_len=0 rsn_ie_len=0 caps=0x401 level=-91
wlan0:    skip - SSID mismatch
wlan0: No suitable network found
wlan0: Setting scan request: 1 sec 0 usec
wlan0: Checking for other virtual interfaces sharing same radio (phy0) in event_scan_results
RTM_NEWLINK: operstate=0 ifi_flags=0x1003 ([UP])
RTM_NEWLINK, IFLA_IFNAME: Interface 'wlan0' added
nl80211: if_removed already cleared - ignore event
Scan SSID - hexdump_ascii(len=10):
     56 49 50 34 47 2d 6a 65 66 66                     VIP4G-jeff      
wlan0: Starting AP scan for wildcard SSID
Scan requested (ret=0) - scan timeout 30 seconds
nl80211: Event message available
nl80211: Scan trigger
nl80211: Event message available
nl80211: New scan results available
wlan0: Event SCAN_RESULTS (3) received
nl80211: Received scan results (14 BSSes)
wlan0: BSS: Start scan result update 10
wlan0: New scan results available
wlan0: Selecting BSS from priority group 0
wlan0: 0: 04:f0:21:04:8d:69 ssid='MyNetwork' wpa_ie_len=26 rsn_ie_len=24 caps=0x411 level=-51
wlan0:    skip - SSID mismatch
wlan0: 1: c8:d7:19:1e:23:0d ssid='' wpa_ie_len=0 rsn_ie_len=20 caps=0x431 level=-47
wlan0:    skip - SSID mismatch
wlan0: 2: 00:15:6d:68:3d:0c ssid='work2901' wpa_ie_len=26 rsn_ie_len=24 caps=0x431 level=-58
wlan0:    skip - SSID mismatch
wlan0: 3: 00:80:48:79:8e:3e ssid='VIP4G-MONSTER' wpa_ie_len=0 rsn_ie_len=20 caps=0x411 level=-71
wlan0:    skip - SSID mismatch
wlan0: 4: 00:15:6d:69:7d:88 ssid='Microguest' wpa_ie_len=26 rsn_ie_len=24 caps=0x411 level=-70
wlan0:    skip - SSID mismatch
wlan0: 5: 04:f0:21:03:e8:1c ssid='VIP4G-LArry' wpa_ie_len=26 rsn_ie_len=24 caps=0x411 level=-82
wlan0:    skip - SSID mismatch
wlan0: 6: 74:d0:2b:89:0b:50 ssid='AndrewW' wpa_ie_len=0 rsn_ie_len=20 caps=0x411 level=-86 wps
wlan0:    skip - SSID mismatch
wlan0: 7: 00:0e:8e:29:c9:3b ssid='Colt Canada' wpa_ie_len=0 rsn_ie_len=20 caps=0x431 level=-86
wlan0:    skip - SSID mismatch
wlan0: 8: c4:09:38:02:1b:66 ssid='CIK2090' wpa_ie_len=26 rsn_ie_len=24 caps=0x411 level=-87 wps
wlan0:    skip - SSID mismatch
wlan0: 9: 10:bf:48:91:6a:18 ssid='ASUS' wpa_ie_len=28 rsn_ie_len=24 caps=0x411 level=-90 wps
wlan0:    skip - SSID mismatch
wlan0: 10: 00:22:2d:e5:7b:d0 ssid='E57BCD' wpa_ie_len=26 rsn_ie_len=24 caps=0x11 level=-94
wlan0:    skip - SSID mismatch
wlan0: 11: 00:80:48:79:8e:3f ssid='VIP4G' wpa_ie_len=0 rsn_ie_len=0 caps=0x401 level=-62
wlan0:    skip - SSID mismatch
wlan0: 12: 00:0f:92:fe:04:74 ssid='wlan0' wpa_ie_len=0 rsn_ie_len=0 caps=0x1 level=-80
wlan0:    skip - SSID mismatch
wlan0: 13: 00:0f:92:fa:05:db ssid='FLC24G' wpa_ie_len=0 rsn_ie_len=0 caps=0x401 level=-92
wlan0:    skip - SSID mismatch
wlan0: No suitable network found
wlan0: Setting scan request: 1 sec 0 usec
wlan0: Checking for other virtual interfaces sharing same radio (phy0) in event_scan_results
RTM_NEWLINK: operstate=0 ifi_flags=0x1003 ([UP])
RTM_NEWLINK, IFLA_IFNAME: Interface 'wlan0' added
nl80211: if_removed already cleared - ignore event
Scan SSID - hexdump_ascii(len=10):
     56 49 50 34 47 2d 6a 65 66 66                     VIP4G-jeff      
wlan0: Starting AP scan for wildcard SSID
Scan requested (ret=0) - scan timeout 30 seconds
nl80211: Event message available
nl80211: Scan trigger
wlan0: Removing interface wlan0
wlan0: No keys have been configured - skip key clearing
wlan0: State: SCANNING -> DISCONNECTED
wpa_driver_nl80211_set_operstate: operstate 0->0 (DORMANT)
netlink: Operstate: linkmode=-1, operstate=5
EAPOL: External notification - portEnabled=0
EAPOL: Supplicant port status: Unauthorized
EAPOL: External notification - portValid=0
EAPOL: Supplicant port status: Unauthorized
EAPOL: External notification - EAP success=0
EAPOL: Supplicant port status: Unauthorized
wlan0: No keys have been configured - skip key clearing
wlan0: BSS: Remove id 0 BSSID 04:f0:21:04:8d:69 SSID 'MyNetwork'
wlan0: BSS: Remove id 1 BSSID c8:d7:19:1e:23:0d SSID ''
wlan0: BSS: Remove id 2 BSSID 00:15:6d:68:3d:0c SSID 'work2901'
wlan0: BSS: Remove id 3 BSSID 00:80:48:79:8e:3e SSID 'VIP4G-MONSTER'
wlan0: BSS: Remove id 5 BSSID 00:15:6d:69:7d:88 SSID 'Microguest'
wlan0: BSS: Remove id 9 BSSID 04:f0:21:03:e8:1c SSID 'VIP4G-LArry'
wlan0: BSS: Remove id 10 BSSID 74:d0:2b:89:0b:50 SSID 'AndrewW'
wlan0: BSS: Remove id 14 BSSID 00:0e:8e:29:c9:3b SSID 'Colt Canada'
wlan0: BSS: Remove id 13 BSSID c4:09:38:02:1b:66 SSID 'CIK2090'
wlan0: BSS: Remove id 11 BSSID 10:bf:48:91:6a:18 SSID 'ASUS'
wlan0: BSS: Remove id 12 BSSID 00:22:2d:e5:7b:d0 SSID 'E57BCD'
wlan0: BSS: Remove id 6 BSSID 00:80:48:79:8e:3f SSID 'VIP4G'
wlan0: BSS: Remove id 8 BSSID 00:0f:92:fe:04:74 SSID 'wlan0'
wlan0: BSS: Remove id 15 BSSID 00:0f:92:fa:05:db SSID 'FLC24G'
wlan0: Cancelling scan request
wlan0: Cancelling authentication timeout
netlink: Operstate: linkmode=0, operstate=6
nl80211: Set mode ifindex 12 iftype 2 (STATION)
nl80211: Unsubscribe mgmt frames handle 0x4bbd80 (mode change)


Sept 2, 2014
In vanilla OpenWrt, the /etc/rc.d/S50telnet has this:
start() {
	if ( ! has_ssh_pubkey && \
	     ! has_root_pwd /etc/passwd && ! has_root_pwd /etc/shadow ) || \
	   ( ! /etc/init.d/dropbear enabled 2> /dev/null && ! /etc/init.d/sshd enabled 2> /dev/null );
	then
		service_start /usr/sbin/telnetd -l /bin/login.sh
	fi
}

This means if root password is set, the telnetd will not start up. 

and 

root@OpenWrt:/# cat /bin/login.sh 
#!/bin/sh
# Copyright (C) 2006-2011 OpenWrt.org

if ( ! grep -qs '^root:[!x]\?:' /etc/shadow || \
     ! grep -qs '^root:[!x]\?:' /etc/passwd ) && \
   [ -z "$FAILSAFE" ]
then
	echo "Login failed."
	exit 0
else
cat << EOF
 === IMPORTANT ============================
  Use 'passwd' to set your login password
  this will disable telnet and enable SSH
 ------------------------------------------
EOF
fi

exec /bin/ash --login

To start telnetd anyway, see http://wiki.openwrt.org/inbox/howto/telnet_enable.

Aug 29, 2014
TP-LINK703n, kernel complains "jffs2: Too few erase blocks (4)". IN this case the mini_fo can't be mounted so that the change to config files can't be saved.
Cause: The flash size is 4M and the Kernel+FS is bigger than 3.5M. It fits but it doesn't work.

Aug 25,2014
USB WiFi dongle in IPn4GII:

root@IPn4Gii:~# cat /etc/hotplug.d/usb/05-usb-debug 
#!/bin/sh
logger -t DEBUG "===MHX: hotplug usb: action='$ACTION' devicename='$DEVICENAME' devname='$DEVNAME' devpath='$DEVPATH' product='$PRODUCT' type='$TYPE' interface='$INTERFACE'"

Aug 25 09:45:30 DEBUG: ===MHX: hotplug usb: action='add' devicename='1-1' devname='bus/usb/001/011' devpath='/devices/ahb.0/700000.ehci/usb1/1-1' product='525/a4aa/307' type='2/0/0' interface=''
Aug 25 09:45:30 DEBUG: ===MHX: hotplug usb: action='add' devicename='' devname='' devpath='/devices/ahb.0/700000.ehci/usb1/1-1/1-1:1.2' product='525/a4aa/307' type='2/0/0' interface='2/2/1'
Aug 25 09:45:30 DEBUG: ===MHX: hotplug usb: action='add' devicename='' devname='' devpath='/devices/ahb.0/700000.ehci/usb1/1-1/1-1:1.1' product='525/a4aa/307' type='2/0/0' interface='10/0/0'
Aug 25 09:45:30 DEBUG: ===MHX: hotplug usb: action='add' devicename='' devname='' devpath='/devices/ahb.0/700000.ehci/usb1/1-1/1-1:1.0' product='525/a4aa/307' type='2/0/0' interface='2/6/0'
Aug 25 09:45:30 DEBUG: ===MHX: hotplug usb: action='add' devicename='' devname='bus/usb/001/011' devpath='/devices/ahb.0/700000.ehci/usb1/1-1' product='525/a4aa/307' type='2/0/0' interface=''
Aug 25 09:45:30 DEBUG: ===MHX: hotplug usb: action='add' devicename='' devname='' devpath='/devices/ahb.0/700000.ehci/usb1/1-1/1-1:1.3' product='525/a4aa/307' type='2/0/0' interface='10/0/0'
Aug 25 09:45:30 DEBUG: ===MHX: hotplug usb: action='add' devicename='1-1:1.0' devname='' devpath='/devices/ahb.0/700000.ehci/usb1/1-1/1-1:1.0' product='525/a4aa/307' type='2/0/0' interface='2/6/0'
Aug 25 09:45:30 DEBUG: ===MHX: hotplug usb: action='add' devicename='1-1:1.1' devname='' devpath='/devices/ahb.0/700000.ehci/usb1/1-1/1-1:1.1' product='525/a4aa/307' type='2/0/0' interface='10/0/0'
Aug 25 09:45:30 DEBUG: ===MHX: hotplug usb: action='add' devicename='1-1:1.2' devname='' devpath='/devices/ahb.0/700000.ehci/usb1/1-1/1-1:1.2' product='525/a4aa/307' type='2/0/0' interface='2/2/1'
Aug 25 09:45:30 DEBUG: ===MHX: hotplug usb: action='add' devicename='1-1:1.3' devname='' devpath='/devices/ahb.0/700000.ehci/usb1/1-1/1-1:1.3' product='525/a4aa/307' type='2/0/0' interface='10/0/0'





Aug 25 09:45:38 DEBUG: ===MHX: hotplug usb: action='remove' devicename='' devname='' devpath='/devices/ahb.0/700000.ehci/usb1/1-1/1-1:1.1' product='525/a4aa/307' type='2/0/0' interface='10/0/0'
Aug 25 09:45:38 DEBUG: ===MHX: hotplug usb: action='remove' devicename='' devname='' devpath='/devices/ahb.0/700000.ehci/usb1/1-1/1-1:1.0' product='525/a4aa/307' type='2/0/0' interface='2/6/0'
Aug 25 09:45:38 DEBUG: ===MHX: hotplug usb: action='remove' devicename='' devname='bus/usb/001/011' devpath='/devices/ahb.0/700000.ehci/usb1/1-1' product='525/a4aa/307' type='2/0/0' interface=''
Aug 25 09:45:38 DEBUG: ===MHX: hotplug usb: action='remove' devicename='' devname='' devpath='/devices/ahb.0/700000.ehci/usb1/1-1/1-1:1.2' product='525/a4aa/307' type='2/0/0' interface='2/2/1'
Aug 25 09:45:38 DEBUG: ===MHX: hotplug usb: action='remove' devicename='' devname='' devpath='/devices/ahb.0/700000.ehci/usb1/1-1/1-1:1.3' product='525/a4aa/307' type='2/0/0' interface='10/0/0'
Aug 25 09:45:38 DEBUG: ===MHX: hotplug usb: action='remove' devicename='1-1:1.0' devname='' devpath='/devices/ahb.0/700000.ehci/usb1/1-1/1-1:1.0' product='525/a4aa/307' type='2/0/0' interface='2/6/0'
Aug 25 09:45:38 DEBUG: ===MHX: hotplug usb: action='remove' devicename='1-1:1.1' devname='' devpath='/devices/ahb.0/700000.ehci/usb1/1-1/1-1:1.1' product='525/a4aa/307' type='2/0/0' interface='10/0/0'
Aug 25 09:45:38 DEBUG: ===MHX: hotplug usb: action='remove' devicename='1-1:1.2' devname='' devpath='/devices/ahb.0/700000.ehci/usb1/1-1/1-1:1.2' product='525/a4aa/307' type='2/0/0' interface='2/2/1'
Aug 25 09:45:39 DEBUG: ===MHX: hotplug usb: action='remove' devicename='1-1:1.3' devname='' devpath='/devices/ahb.0/700000.ehci/usb1/1-1/1-1:1.3' product='525/a4aa/307' type='2/0/0' interface='10/0/0'
Aug 25 09:45:39 DEBUG: ===MHX: hotplug usb: action='remove' devicename='1-1' devname='bus/usb/001/011' devpath='/devices/ahb.0/700000.ehci/usb1/1-1' product='525/a4aa/307' type='2/0/0' interface=''
Aug 25 09:45:47 mcmserverLN930[18852]: open_device try0 open /dev/ttyACM0 failed, errno=2
Aug 25 09:45:48 mcmserverLN930[18852]: open_device try1 open /dev/ttyACM0 failed, errno=2

/etc/inittab--->/etc/init.d/rcS "S" "boot"--->/etc/rc.local "S" "boot" &--->run /etc/rc.d/S* with "boot" parameter--->In /etc/rc.d/S* script, if boot() function exists, boot() is executed otherwise the start() function is executed. boot() is prior to start().

Jul 25, 2014
OpenWrt make menuconfig:
1. Target System selection : Items are stored in target/linux. Each options has one directory. In the individual directory, the Makefile defines the appearance in the menuconfig. Eg., target/linux/ar71xx/Makefile.
2. Target Profile selection : Items are stored in target/linux/$TARGET/profiles. Each profile has a file. Eg., target/linux/ar71xx/profiles/VIP4G.mk.
3. Image generation: Items are stored in a single file. Eg., target/linux/ar71xx/image/Makefile.

Jul 21, 2014
11n ar9220 ART. linuxdk interrupt doesn't happen. The root cause is the previous cfg80211.ko mac80211.ko etc. are not removed properly so that the interrupt is still taken by the previous ISR and the current (linuxdk) ISR never seen. Without this Interrupt mechanism, the Throughput test is still fair with a very short timeOut value. But the Link Test, which transmits different rates of packets and needs good synchronization, has a very unstable test result, percentage ranging from 20% to 100%.

Solution: In /etc/modules.d, remove the cfg80211 and mac80211 auto startup.

Test: In LinkTest, both the Tx side and Rx side can see the /proc/interrupts increments for every Transmission/Receive. But for ThroughputTest Tx, with long enough timeOut value on host side, we can see the /proc/interrupts increments. For Throuthtest Rx, can not see the interrupt happen.

LinkTest, Tx, log message of art-legacy-11n:
   --- Atheros: MDK Client (multi-device version) ---
         - Revision 0.9 BUILD #33 ART_11n -
F2 to init = 1
Opening device /dev/dk0
chip id: a8
Devlib Revision 0.9 BUILD #33 ART_11n


                     ===============================================
                     |               UNKNOWN TYPE|
                     ===============================================

Devices detected:
   PCI deviceID     : 0x0029    Sub systemID     : 0x2096
   MAC revisionID   : 0x872ff   BB  revisionID   : 0xd0
   RF  productID    : 0x0       RF  revisionID   : 0x0

---------MHX(hwCreateEvent) Creating event by ioctl.
Socket connection to master established.  Waiting for commands....
Connection established with 127.0.0.1 : Port 51101 

   --- Atheros: MDK Client (multi-device version) ---
         - Revision 0.9 BUILD #33 ART_11n -
F2 to init = 1
Opening device /dev/dk0
osThreadCreate: pthread_create sucessful. thread=0x00000803
---------MHX(hwCreateEvent) Creating event by ioctl.
---MHX(testLib) F2_IMR=0x20, F2_ISR=0x1c,
---MHX(getNextEvent) Event is prepared. Type= 0x10; Persistent=0x1, ID=0xfe, Handle=0x0, Result=0x2208 
Error: command Len is not equal to size of expected bytes for FORCE_POWER_TX_MAX_CMD
: got 78, expected 5
---MHX(txBeginConfigAr5416): ENABLE TX!!!. enableInterrupt=1, enableFlag=0x1, 
---MHX Registers Summary:
---MHX Reg F2_IMR_S0(a4)= 0x00010000
---MHX Reg F2_IMR(a0)= 0x00000080
---MHX Reg F2_IER(24)= 0x00000001
---MHX Reg 0x1230(1230)= 0x00000000
---MHX Reg F2_RX_FILTER(803c)= 0x00000001
---MHX Reg F2_DIAG_SW(8048)= 0x00000000
---MHX Reg F2_CR(8)= 0x00000004
---MHX Reg F2_Q_TXE(840)= 0x00000001
---MHX Reg F2_ISR(80)= 0x00000008
---MHX Reg F2_ISR_S0(84)= 0x00000000
---MHX Reg F2_ISR_S1(88)= 0x00000000
---MHX Reg F2_ISR_S2(8c)= 0x00c00000
---MHX Reg F2_ISR_S3(90)= 0x00000000
---MHX Reg F2_ISR_S4(94)= 0x00000000
---MHX(txDataStart). txDataStart started successfully. Start time = 294692522 
---MHX(txDataComplete): transmitting (i=0; wfqCount=1)......
Input/output error : Device Number 0:txDataComplete: timeout reached before all frames transmitted. timeout=800 ms.
---MHX(txDataComplete): sendEndPacket 0
 ---MHX(txBeginConfigAr5416): ENABLE TX!!!. enableInterrupt=1, enableFlag=0x1, 
---MHX Registers Summary:
---MHX Reg F2_IMR_S0(a4)= 0x00010000
---MHX Reg F2_IMR(a0)= 0x00000080
---MHX Reg F2_IER(24)= 0x00000001
---MHX Reg 0x1230(1230)= 0x00000000
---MHX Reg F2_RX_FILTER(803c)= 0x00000001
---MHX Reg F2_DIAG_SW(8048)= 0x00000000
---MHX Reg F2_CR(8)= 0x00000004
---MHX Reg F2_Q_TXE(840)= 0x00000001
---MHX Reg F2_ISR(80)= 0x00000008
---MHX Reg F2_ISR_S0(84)= 0x00000000
---MHX Reg F2_ISR_S1(88)= 0x00000000
---MHX Reg F2_ISR_S2(8c)= 0x00c00000
---MHX Reg F2_ISR_S3(90)= 0x00000000
---MHX Reg F2_ISR_S4(94)= 0x00000000
---MHX(txDataStart). txDataStart started successfully. Start time = 294694765 
---MHX(txDataComplete): transmitting (i=0; wfqCount=1)......
Input/output error : Device Number 0:txDataComplete: timeout reached before all frames transmitted. timeout=800 ms.
---MHX(txDataComplete): sendEndPacket 0
 ---MHX(txBeginConfigAr5416): ENABLE TX!!!. enableInterrupt=1, enableFlag=0x1, 
---MHX Registers Summary:
---MHX Reg F2_IMR_S0(a4)= 0x00010000
---MHX Reg F2_IMR(a0)= 0x00000080
---MHX Reg F2_IER(24)= 0x00000001
---MHX Reg 0x1230(1230)= 0x00000000
---MHX Reg F2_RX_FILTER(803c)= 0x00000001
---MHX Reg F2_DIAG_SW(8048)= 0x00000000
---MHX Reg F2_CR(8)= 0x00000004
---MHX Reg F2_Q_TXE(840)= 0x00000001
---MHX Reg F2_ISR(80)= 0x00000008
---MHX Reg F2_ISR_S0(84)= 0x00000000
---MHX Reg F2_ISR_S1(88)= 0x00000000
---MHX Reg F2_ISR_S2(8c)= 0x00c00000
---MHX Reg F2_ISR_S3(90)= 0x00000000
---MHX Reg F2_ISR_S4(94)= 0x00000000
---MHX(txDataStart). txDataStart started successfully. Start time = 294697031 
---MHX(txDataComplete): transmitting (i=0; wfqCount=1)......
Input/output error : Device Number 0:txDataComplete: timeout reached before all frames transmitted. timeout=800 ms.
---MHX(txDataComplete): sendEndPacket 0
 ---MHX(txBeginConfigAr5416): ENABLE TX!!!. enableInterrupt=1, enableFlag=0x1, 
---MHX Registers Summary:
---MHX Reg F2_IMR_S0(a4)= 0x00010000
---MHX Reg F2_IMR(a0)= 0x00000080
---MHX Reg F2_IER(24)= 0x00000001
---MHX Reg 0x1230(1230)= 0x00000000
---MHX Reg F2_RX_FILTER(803c)= 0x00000001
---MHX Reg F2_DIAG_SW(8048)= 0x00000000
---MHX Reg F2_CR(8)= 0x00000004
---MHX Reg F2_Q_TXE(840)= 0x00000001
---MHX Reg F2_ISR(80)= 0x00000008
---MHX Reg F2_ISR_S0(84)= 0x00000000
---MHX Reg F2_ISR_S1(88)= 0x00000000
---MHX Reg F2_ISR_S2(8c)= 0x00c00000
---MHX Reg F2_ISR_S3(90)= 0x00000000
---MHX Reg F2_ISR_S4(94)= 0x00000000
---MHX(txDataStart). txDataStart started successfully. Start time = 294699277 
---MHX(txDataComplete): transmitting (i=0; wfqCount=1)......
Input/output error : Device Number 0:txDataComplete: timeout reached before all frames transmitted. timeout=800 ms.
---MHX(txDataComplete): sendEndPacket 0
 ---MHX(txBeginConfigAr5416): ENABLE TX!!!. enableInterrupt=1, enableFlag=0x1, 
---MHX Registers Summary:
---MHX Reg F2_IMR_S0(a4)= 0x00010000
---MHX Reg F2_IMR(a0)= 0x00000080
---MHX Reg F2_IER(24)= 0x00000001
---MHX Reg 0x1230(1230)= 0x00000000
---MHX Reg F2_RX_FILTER(803c)= 0x00000001
---MHX Reg F2_DIAG_SW(8048)= 0x00000000
---MHX Reg F2_CR(8)= 0x00000004
---MHX Reg F2_Q_TXE(840)= 0x00000001
---MHX Reg F2_ISR(80)= 0x00000008
---MHX Reg F2_ISR_S0(84)= 0x00000000
---MHX Reg F2_ISR_S1(88)= 0x00000000
---MHX Reg F2_ISR_S2(8c)= 0x00c00000
---MHX Reg F2_ISR_S3(90)= 0x00000000
---MHX Reg F2_ISR_S4(94)= 0x00000000
---MHX(txDataStart). txDataStart started successfully. Start time = 294701473 
---MHX(txDataComplete): transmitting (i=0; wfqCount=1)......
Input/output error : Device Number 0:txDataComplete: timeout reached before all frames transmitted. timeout=800 ms.
---MHX(txDataComplete): sendEndPacket 0
 ---MHX(txBeginConfigAr5416): ENABLE TX!!!. enableInterrupt=1, enableFlag=0x1, 
---MHX Registers Summary:
---MHX Reg F2_IMR_S0(a4)= 0x00010000
---MHX Reg F2_IMR(a0)= 0x00000080
---MHX Reg F2_IER(24)= 0x00000001
---MHX Reg 0x1230(1230)= 0x00000000
---MHX Reg F2_RX_FILTER(803c)= 0x00000001
---MHX Reg F2_DIAG_SW(8048)= 0x00000000
---MHX Reg F2_CR(8)= 0x00000004
---MHX Reg F2_Q_TXE(840)= 0x00000001
---MHX Reg F2_ISR(80)= 0x00000008
---MHX Reg F2_ISR_S0(84)= 0x00000000
---MHX Reg F2_ISR_S1(88)= 0x00000000
---MHX Reg F2_ISR_S2(8c)= 0x00c00000
---MHX Reg F2_ISR_S3(90)= 0x00000000
---MHX Reg F2_ISR_S4(94)= 0x00000000
---MHX(txDataStart). txDataStart started successfully. Start time = 294703669 
---MHX(txDataComplete): transmitting (i=0; wfqCount=1)......
Input/output error : Device Number 0:txDataComplete: timeout reached before all frames transmitted. timeout=800 ms.
---MHX(txDataComplete): sendEndPacket 0
 ---MHX(txBeginConfigAr5416): ENABLE TX!!!. enableInterrupt=1, enableFlag=0x1, 
---MHX Registers Summary:
---MHX Reg F2_IMR_S0(a4)= 0x00010000
---MHX Reg F2_IMR(a0)= 0x00000080
---MHX Reg F2_IER(24)= 0x00000001
---MHX Reg 0x1230(1230)= 0x00000000
---MHX Reg F2_RX_FILTER(803c)= 0x00000001
---MHX Reg F2_DIAG_SW(8048)= 0x00000000
---MHX Reg F2_CR(8)= 0x00000004
---MHX Reg F2_Q_TXE(840)= 0x00000001
---MHX Reg F2_ISR(80)= 0x00000008
---MHX Reg F2_ISR_S0(84)= 0x00000000
---MHX Reg F2_ISR_S1(88)= 0x00000000
---MHX Reg F2_ISR_S2(8c)= 0x00c00000
---MHX Reg F2_ISR_S3(90)= 0x00000000
---MHX Reg F2_ISR_S4(94)= 0x00000000
---MHX(txDataStart). txDataStart started successfully. Start time = 294705865 
---MHX(txDataComplete): transmitting (i=0; wfqCount=1)......
Input/output error : Device Number 0:txDataComplete: timeout reached before all frames transmitted. timeout=800 ms.
---MHX(txDataComplete): sendEndPacket 0
 ---MHX(txBeginConfigAr5416): ENABLE TX!!!. enableInterrupt=1, enableFlag=0x1, 
---MHX Registers Summary:
---MHX Reg F2_IMR_S0(a4)= 0x00010000
---MHX Reg F2_IMR(a0)= 0x00000080
---MHX Reg F2_IER(24)= 0x00000001
---MHX Reg 0x1230(1230)= 0x00000000
---MHX Reg F2_RX_FILTER(803c)= 0x00000001
---MHX Reg F2_DIAG_SW(8048)= 0x00000000
---MHX Reg F2_CR(8)= 0x00000004
---MHX Reg F2_Q_TXE(840)= 0x00000001
---MHX Reg F2_ISR(80)= 0x00000008
---MHX Reg F2_ISR_S0(84)= 0x00000000
---MHX Reg F2_ISR_S1(88)= 0x00000000
---MHX Reg F2_ISR_S2(8c)= 0x00c00000
---MHX Reg F2_ISR_S3(90)= 0x00000000
---MHX Reg F2_ISR_S4(94)= 0x00000000
---MHX(txDataStart). txDataStart started successfully. Start time = 294708060 
---MHX(txDataComplete): transmitting (i=0; wfqCount=1)......
Input/output error : Device Number 0:txDataComplete: timeout reached before all frames transmitted. timeout=800 ms.
---MHX(txDataComplete): sendEndPacket 0
 ---MHX(txBeginConfigAr5416): ENABLE TX!!!. enableInterrupt=1, enableFlag=0x1, 
---MHX Registers Summary:
---MHX Reg F2_IMR_S0(a4)= 0x00010000
---MHX Reg F2_IMR(a0)= 0x00000080
---MHX Reg F2_IER(24)= 0x00000001
---MHX Reg 0x1230(1230)= 0x00000000
---MHX Reg F2_RX_FILTER(803c)= 0x00000001
---MHX Reg F2_DIAG_SW(8048)= 0x00000000
---MHX Reg F2_CR(8)= 0x00000004
---MHX Reg F2_Q_TXE(840)= 0x00000001
---MHX Reg F2_ISR(80)= 0x00000008
---MHX Reg F2_ISR_S0(84)= 0x00000000
---MHX Reg F2_ISR_S1(88)= 0x00000000
---MHX Reg F2_ISR_S2(8c)= 0x00c00000
---MHX Reg F2_ISR_S3(90)= 0x00000000
---MHX Reg F2_ISR_S4(94)= 0x00000000
---MHX(txDataStart). txDataStart started successfully. Start time = 294710326 
---MHX(txDataComplete): transmitting (i=0; wfqCount=1)......
Input/output error : Device Number 0:txDataComplete: timeout reached before all frames transmitted. timeout=800 ms.
---MHX(txDataComplete): sendEndPacket 0
 Error: command Len is not equal to size of expected bytes for FORCE_POWER_TX_MAX_CMD
: got 78, expected 5
---MHX(txBeginConfigAr5416): ENABLE TX!!!. enableInterrupt=1, enableFlag=0x1, 
---MHX Registers Summary:
---MHX Reg F2_IMR_S0(a4)= 0x00010000
---MHX Reg F2_IMR(a0)= 0x00000080
---MHX Reg F2_IER(24)= 0x00000001
---MHX Reg 0x1230(1230)= 0x00000000
---MHX Reg F2_RX_FILTER(803c)= 0x00000001
---MHX Reg F2_DIAG_SW(8048)= 0x00000000
---MHX Reg F2_CR(8)= 0x00000004
---MHX Reg F2_Q_TXE(840)= 0x00000001
---MHX Reg F2_ISR(80)= 0x00000008
---MHX Reg F2_ISR_S0(84)= 0x00000001
---MHX Reg F2_ISR_S1(88)= 0x00000000
---MHX Reg F2_ISR_S2(8c)= 0x00000000
---MHX Reg F2_ISR_S3(90)= 0x00000000
---MHX Reg F2_ISR_S4(94)= 0x00000000
---MHX(txDataStart). txDataStart started successfully. Start time = 294714331 
---MHX(txDataComplete): transmitting (i=0; wfqCount=1)......
---MHX(getNextEvent) Event is prepared. Type= 0x10; Persistent=0x1, ID=0xfe, Handle=0x0, Result=0x88 
SNOOP::txDataComplete::Got event
---MHX(txDataComplete): sendEndPacket 0
 ---MHX(txBeginConfigAr5416): ENABLE TX!!!. enableInterrupt=1, enableFlag=0x1, 
---MHX Registers Summary:
---MHX Reg F2_IMR_S0(a4)= 0x00010000
---MHX Reg F2_IMR(a0)= 0x00000080
---MHX Reg F2_IER(24)= 0x00000001
---MHX Reg 0x1230(1230)= 0x00000000
---MHX Reg F2_RX_FILTER(803c)= 0x00000001
---MHX Reg F2_DIAG_SW(8048)= 0x00000000
---MHX Reg F2_CR(8)= 0x00000004
---MHX Reg F2_Q_TXE(840)= 0x00000001
---MHX Reg F2_ISR(80)= 0x00000008
---MHX Reg F2_ISR_S0(84)= 0x00000001
---MHX Reg F2_ISR_S1(88)= 0x00000000
---MHX Reg F2_ISR_S2(8c)= 0x00000000
---MHX Reg F2_ISR_S3(90)= 0x00000000
---MHX Reg F2_ISR_S4(94)= 0x00000000
---MHX(txDataStart). txDataStart started successfully. Start time = 294715898 
---MHX(txDataComplete): transmitting (i=0; wfqCount=1)......
---MHX(getNextEvent) Event is prepared. Type= 0x10; Persistent=0x1, ID=0xfe, Handle=0x0, Result=0x88 
SNOOP::txDataComplete::Got event
---MHX(txDataComplete): sendEndPacket 0
 ---MHX(txBeginConfigAr5416): ENABLE TX!!!. enableInterrupt=1, enableFlag=0x1, 
---MHX Registers Summary:
---MHX Reg F2_IMR_S0(a4)= 0x00010000
---MHX Reg F2_IMR(a0)= 0x00000080
---MHX Reg F2_IER(24)= 0x00000001
---MHX Reg 0x1230(1230)= 0x00000000
---MHX Reg F2_RX_FILTER(803c)= 0x00000001
---MHX Reg F2_DIAG_SW(8048)= 0x00000000
---MHX Reg F2_CR(8)= 0x00000004
---MHX Reg F2_Q_TXE(840)= 0x00000001
---MHX Reg F2_ISR(80)= 0x00000008
---MHX Reg F2_ISR_S0(84)= 0x00000001
---MHX Reg F2_ISR_S1(88)= 0x00000000
---MHX Reg F2_ISR_S2(8c)= 0x00000000
---MHX Reg F2_ISR_S3(90)= 0x00000000
---MHX Reg F2_ISR_S4(94)= 0x00000000
---MHX(txDataStart). txDataStart started successfully. Start time = 294717477 
---MHX(txDataComplete): transmitting (i=0; wfqCount=1)......
---MHX(getNextEvent) Event is prepared. Type= 0x10; Persistent=0x1, ID=0xfe, Handle=0x0, Result=0x88 
SNOOP::txDataComplete::Got event
---MHX(txDataComplete): sendEndPacket 0
 ---MHX(txBeginConfigAr5416): ENABLE TX!!!. enableInterrupt=1, enableFlag=0x1, 
---MHX Registers Summary:
---MHX Reg F2_IMR_S0(a4)= 0x00010000
---MHX Reg F2_IMR(a0)= 0x00000080
---MHX Reg F2_IER(24)= 0x00000001
---MHX Reg 0x1230(1230)= 0x00000000
---MHX Reg F2_RX_FILTER(803c)= 0x00000001
---MHX Reg F2_DIAG_SW(8048)= 0x00000000
---MHX Reg F2_CR(8)= 0x00000004
---MHX Reg F2_Q_TXE(840)= 0x00000001
---MHX Reg F2_ISR(80)= 0x00000008
---MHX Reg F2_ISR_S0(84)= 0x00000001
---MHX Reg F2_ISR_S1(88)= 0x00000000
---MHX Reg F2_ISR_S2(8c)= 0x00000000
---MHX Reg F2_ISR_S3(90)= 0x00000000
---MHX Reg F2_ISR_S4(94)= 0x00000000
---MHX(txDataStart). txDataStart started successfully. Start time = 294719081 
---MHX(txDataComplete): transmitting (i=0; wfqCount=1)......
---MHX(getNextEvent) Event is prepared. Type= 0x10; Persistent=0x1, ID=0xfe, Handle=0x0, Result=0x88 
SNOOP::txDataComplete::Got event


LinkTest Rx, log message of art-legacy-11n:
----MHX(processRxDataBeginCmd). waitTime=100, timeOut=800, remoteStats=0, enableCompare=0.
-----MHX(rxDataStart). going to rxBeginConfig...
-----MHX(rxBeginConfigAr5416). RX is enabled!!!
---MHX(getNextEvent) Event is prepared. Type= 0x10; Persistent=0x1, ID=0xfe, Handle=0x0, Result=0xb 
------MHX TEST:: MDK_LAST_PKT received
----MHX(processRxDataBeginCmd). waitTime=100, timeOut=800, remoteStats=0, enableCompare=0.
-----MHX(rxDataStart). going to rxBeginConfig...
-----MHX(rxBeginConfigAr5416). RX is enabled!!!
---MHX(getNextEvent) Event is prepared. Type= 0x10; Persistent=0x1, ID=0xfe, Handle=0x0, Result=0xb 
------MHX TEST:: MDK_LAST_PKT received
----MHX(processRxDataBeginCmd). waitTime=100, timeOut=800, remoteStats=0, enableCompare=0.
-----MHX(rxDataStart). going to rxBeginConfig...
-----MHX(rxBeginConfigAr5416). RX is enabled!!!
---MHX(getNextEvent) Event is prepared. Type= 0x10; Persistent=0x1, ID=0xfe, Handle=0x0, Result=0xb 
------MHX TEST:: MDK_LAST_PKT received
----MHX(processRxDataBeginCmd). waitTime=100, timeOut=800, remoteStats=0, enableCompare=0.
-----MHX(rxDataStart). going to rxBeginConfig...
-----MHX(rxBeginConfigAr5416). RX is enabled!!!
---MHX(getNextEvent) Event is prepared. Type= 0x10; Persistent=0x1, ID=0xfe, Handle=0x0, Result=0xb 
------MHX TEST:: MDK_LAST_PKT received
----MHX(processRxDataBeginCmd). waitTime=100, timeOut=800, remoteStats=0, enableCompare=0.
-----MHX(rxDataStart). going to rxBeginConfig...
-----MHX(rxBeginConfigAr5416). RX is enabled!!!
---MHX(getNextEvent) Event is prepared. Type= 0x10; Persistent=0x1, ID=0xfe, Handle=0x0, Result=0xb 
------MHX TEST:: MDK_LAST_PKT received
----MHX(processRxDataBeginCmd). waitTime=100, timeOut=800, remoteStats=0, enableCompare=0.
-----MHX(rxDataStart). going to rxBeginConfig...
-----MHX(rxBeginConfigAr5416). RX is enabled!!!
---MHX(getNextEvent) Event is prepared. Type= 0x10; Persistent=0x1, ID=0xfe, Handle=0x0, Result=0xb 
------MHX TEST:: MDK_LAST_PKT received
----MHX(processRxDataBeginCmd). waitTime=100, timeOut=800, remoteStats=0, enableCompare=0.
-----MHX(rxDataStart). going to rxBeginConfig...
-----MHX(rxBeginConfigAr5416). RX is enabled!!!
---MHX(getNextEvent) Event is prepared. Type= 0x10; Persistent=0x1, ID=0xfe, Handle=0x0, Result=0xb 
------MHX TEST:: MDK_LAST_PKT received
----MHX(processRxDataBeginCmd). waitTime=100, timeOut=800, remoteStats=0, enableCompare=0.
-----MHX(rxDataStart). going to rxBeginConfig...
-----MHX(rxBeginConfigAr5416). RX is enabled!!!
---MHX(getNextEvent) Event is prepared. Type= 0x10; Persistent=0x1, ID=0xfe, Handle=0x0, Result=0xb 
------MHX TEST:: MDK_LAST_PKT received
----MHX(processRxDataBeginCmd). waitTime=100, timeOut=800, remoteStats=0, enableCompare=0.
-----MHX(rxDataStart). going to rxBeginConfig...
-----MHX(rxBeginConfigAr5416). RX is enabled!!!
---MHX(getNextEvent) Event is prepared. Type= 0x10; Persistent=0x1, ID=0xfe, Handle=0x0, Result=0xb 
------MHX TEST:: MDK_LAST_PKT received
----MHX(processRxDataBeginCmd). waitTime=100, timeOut=800, remoteStats=0, enableCompare=0.
-----MHX(rxDataStart). going to rxBeginConfig...
-----MHX(rxBeginConfigAr5416). RX is enabled!!!
---MHX(getNextEvent) Event is prepared. Type= 0x10; Persistent=0x1, ID=0xfe, Handle=0x0, Result=0xb 

Throughput Tx, log message of art-legacy-11n:
SNOOP::txDataComplete::Got event
---MHX(txDataComplete): sendEndPacket 0
 Error: command Len is not equal to size of expected bytes for FORCE_POWER_TX_MAX_CMD
: got 78, expected 5
---MHX(txBeginConfigAr5416): ENABLE TX!!!. enableInterrupt=1, enableFlag=0x1, 
---MHX Registers Summary:
---MHX Reg F2_IMR_S0(a4)= 0x00010000
---MHX Reg F2_IMR(a0)= 0x00000080
---MHX Reg F2_IER(24)= 0x00000001
---MHX Reg 0x1230(1230)= 0x00000000
---MHX Reg F2_RX_FILTER(803c)= 0x00000001
---MHX Reg F2_DIAG_SW(8048)= 0x00000000
---MHX Reg F2_CR(8)= 0x00000004
---MHX Reg F2_Q_TXE(840)= 0x00000001
---MHX Reg F2_ISR(80)= 0x00000008
---MHX Reg F2_ISR_S0(84)= 0x00000001
---MHX Reg F2_ISR_S1(88)= 0x00000000
---MHX Reg F2_ISR_S2(8c)= 0x00000000
---MHX Reg F2_ISR_S3(90)= 0x00000000
---MHX Reg F2_ISR_S4(94)= 0x00000000
---MHX(txDataStart). txDataStart started successfully. Start time = 296109456 
---MHX(txDataComplete): transmitting (i=0; wfqCount=1)......
---MHX(txDataComplete): transmitting (i=2000; wfqCount=1)......
---MHX(getNextEvent) Event is prepared. Type= 0x10; Persistent=0x1, ID=0xfe, Handle=0x0, Result=0x88 
SNOOP::txDataComplete::Got event
---MHX(txDataComplete): sendEndPacket 0
 Error: command Len is not equal to size of expected bytes for FORCE_POWER_TX_MAX_CMD
: got 78, expected 5
---MHX(txBeginConfigAr5416): ENABLE TX!!!. enableInterrupt=1, enableFlag=0x1, 
---MHX Registers Summary:
---MHX Reg F2_IMR_S0(a4)= 0x00010000
---MHX Reg F2_IMR(a0)= 0x00000080
---MHX Reg F2_IER(24)= 0x00000001
---MHX Reg 0x1230(1230)= 0x00000000
---MHX Reg F2_RX_FILTER(803c)= 0x00000001
---MHX Reg F2_DIAG_SW(8048)= 0x00000000
---MHX Reg F2_CR(8)= 0x00000004
---MHX Reg F2_Q_TXE(840)= 0x00000001
---MHX Reg F2_ISR(80)= 0x00000008
---MHX Reg F2_ISR_S0(84)= 0x00000001
---MHX Reg F2_ISR_S1(88)= 0x00000000
---MHX Reg F2_ISR_S2(8c)= 0x00000000
---MHX Reg F2_ISR_S3(90)= 0x00000000
---MHX Reg F2_ISR_S4(94)= 0x00000000
---MHX(txDataStart). txDataStart started successfully. Start time = 296114274 
---MHX(txDataComplete): transmitting (i=0; wfqCount=1)......
---MHX(txDataComplete): transmitting (i=2000; wfqCount=1)......
---MHX(getNextEvent) Event is prepared. Type= 0x10; Persistent=0x1, ID=0xfe, Handle=0x0, Result=0x88 
SNOOP::txDataComplete::Got event
---MHX(txDataComplete): sendEndPacket 0
 Error: command Len is not equal to size of expected bytes for FORCE_POWER_TX_MAX_CMD
: got 78, expected 5
---MHX(txBeginConfigAr5416): ENABLE TX!!!. enableInterrupt=1, enableFlag=0x1, 
---MHX Registers Summary:
---MHX Reg F2_IMR_S0(a4)= 0x00010000
---MHX Reg F2_IMR(a0)= 0x00000080
---MHX Reg F2_IER(24)= 0x00000001
---MHX Reg 0x1230(1230)= 0x00000000
---MHX Reg F2_RX_FILTER(803c)= 0x00000001
---MHX Reg F2_DIAG_SW(8048)= 0x00000000
---MHX Reg F2_CR(8)= 0x00000004
---MHX Reg F2_Q_TXE(840)= 0x00000001
---MHX Reg F2_ISR(80)= 0x00000008
---MHX Reg F2_ISR_S0(84)= 0x00000001
---MHX Reg F2_ISR_S1(88)= 0x00000000
---MHX Reg F2_ISR_S2(8c)= 0x00000000
---MHX Reg F2_ISR_S3(90)= 0x00000000
---MHX Reg F2_ISR_S4(94)= 0x00000000
---MHX(txDataStart). txDataStart started successfully. Start time = 296119175 
---MHX(txDataComplete): transmitting (i=0; wfqCount=1)......
---MHX(txDataComplete): transmitting (i=2000; wfqCount=1)......
---MHX(getNextEvent) Event is prepared. Type= 0x10; Persistent=0x1, ID=0xfe, Handle=0x0, Result=0x88 
SNOOP::txDataComplete::Got event
---MHX(txDataComplete): sendEndPacket 0
 Error: command Len is not equal to size of expected bytes for FORCE_POWER_TX_MAX_CMD
: got 78, expected 5
---MHX(txBeginConfigAr5416): ENABLE TX!!!. enableInterrupt=1, enableFlag=0x1, 
---MHX Registers Summary:
---MHX Reg F2_IMR_S0(a4)= 0x00010000
---MHX Reg F2_IMR(a0)= 0x00000080
---MHX Reg F2_IER(24)= 0x00000001
---MHX Reg 0x1230(1230)= 0x00000000
---MHX Reg F2_RX_FILTER(803c)= 0x00000001
---MHX Reg F2_DIAG_SW(8048)= 0x00000000
---MHX Reg F2_CR(8)= 0x00000004
---MHX Reg F2_Q_TXE(840)= 0x00000001
---MHX Reg F2_ISR(80)= 0x00000008
---MHX Reg F2_ISR_S0(84)= 0x00000001
---MHX Reg F2_ISR_S1(88)= 0x00000001
---MHX Reg F2_ISR_S2(8c)= 0x00000000
---MHX Reg F2_ISR_S3(90)= 0x00000000
---MHX Reg F2_ISR_S4(94)= 0x00000000
---MHX(txDataStart). txDataStart started successfully. Start time = 296123926 
---MHX(txDataComplete): transmitting (i=0; wfqCount=1)......
---MHX(txDataComplete): transmitting (i=2000; wfqCount=1)......
---MHX(getNextEvent) Event is prepared. Type= 0x10; Persistent=0x1, ID=0xfe, Handle=0x0, Result=0x88 
SNOOP::txDataComplete::Got event
---MHX(txDataComplete): sendEndPacket 0
 Error: command Len is not equal to size of expected bytes for FORCE_POWER_TX_MAX_CMD
: got 78, expected 5
---MHX(txBeginConfigAr5416): ENABLE TX!!!. enableInterrupt=1, enableFlag=0x1, 
---MHX Registers Summary:
---MHX Reg F2_IMR_S0(a4)= 0x00010000
---MHX Reg F2_IMR(a0)= 0x00000080
---MHX Reg F2_IER(24)= 0x00000001
---MHX Reg 0x1230(1230)= 0x00000000
---MHX Reg F2_RX_FILTER(803c)= 0x00000001
---MHX Reg F2_DIAG_SW(8048)= 0x00000000
---MHX Reg F2_CR(8)= 0x00000004
---MHX Reg F2_Q_TXE(840)= 0x00000001
---MHX Reg F2_ISR(80)= 0x00000008
---MHX Reg F2_ISR_S0(84)= 0x00000001
---MHX Reg F2_ISR_S1(88)= 0x00000000
---MHX Reg F2_ISR_S2(8c)= 0x00000000
---MHX Reg F2_ISR_S3(90)= 0x00000000
---MHX Reg F2_ISR_S4(94)= 0x00000000
---MHX(txDataStart). txDataStart started successfully. Start time = 296128748 
---MHX(txDataComplete): transmitting (i=0; wfqCount=1)......
---MHX(txDataComplete): transmitting (i=2000; wfqCount=1)......
---MHX(getNextEvent) Event is prepared. Type= 0x10; Persistent=0x1, ID=0xfe, Handle=0x0, Result=0x88 
SNOOP::txDataComplete::Got event
---MHX(txDataComplete): sendEndPacket 0
 Error: command Len is not equal to size of expected bytes for FORCE_POWER_TX_MAX_CMD
: got 78, expected 5
---MHX(txBeginConfigAr5416): ENABLE TX!!!. enableInterrupt=1, enableFlag=0x1, 
---MHX Registers Summary:
---MHX Reg F2_IMR_S0(a4)= 0x00010000
---MHX Reg F2_IMR(a0)= 0x00000080
---MHX Reg F2_IER(24)= 0x00000001
---MHX Reg 0x1230(1230)= 0x00000000
---MHX Reg F2_RX_FILTER(803c)= 0x00000001
---MHX Reg F2_DIAG_SW(8048)= 0x00000000
---MHX Reg F2_CR(8)= 0x00000004
---MHX Reg F2_Q_TXE(840)= 0x00000001
---MHX Reg F2_ISR(80)= 0x00000008
---MHX Reg F2_ISR_S0(84)= 0x00000001
---MHX Reg F2_ISR_S1(88)= 0x00000000
---MHX Reg F2_ISR_S2(8c)= 0x00000000
---MHX Reg F2_ISR_S3(90)= 0x00000000
---MHX Reg F2_ISR_S4(94)= 0x00000000
---MHX(txDataStart). txDataStart started successfully. Start time = 296133654 
---MHX(txDataComplete): transmitting (i=0; wfqCount=1)......
---MHX(txDataComplete): transmitting (i=2000; wfqCount=1)......
---MHX(getNextEvent) Event is prepared. Type= 0x10; Persistent=0x1, ID=0xfe, Handle=0x0, Result=0x88 
SNOOP::txDataComplete::Got event
---MHX(txDataComplete): sendEndPacket 0
 Error: command Len is not equal to size of expected bytes for FORCE_POWER_TX_MAX_CMD
: got 78, expected 5
---MHX(txBeginConfigAr5416): ENABLE TX!!!. enableInterrupt=1, enableFlag=0x1, 
---MHX Registers Summary:
---MHX Reg F2_IMR_S0(a4)= 0x00010000
---MHX Reg F2_IMR(a0)= 0x00000080
---MHX Reg F2_IER(24)= 0x00000001
---MHX Reg 0x1230(1230)= 0x00000000
---MHX Reg F2_RX_FILTER(803c)= 0x00000001
---MHX Reg F2_DIAG_SW(8048)= 0x00000000
---MHX Reg F2_CR(8)= 0x00000004
---MHX Reg F2_Q_TXE(840)= 0x00000001
---MHX Reg F2_ISR(80)= 0x00000008
---MHX Reg F2_ISR_S0(84)= 0x00000001
---MHX Reg F2_ISR_S1(88)= 0x00000000
---MHX Reg F2_ISR_S2(8c)= 0x00000000
---MHX Reg F2_ISR_S3(90)= 0x00000000
---MHX Reg F2_ISR_S4(94)= 0x00000000
---MHX(txDataStart). txDataStart started successfully. Start time = 296138488 
---MHX(txDataComplete): transmitting (i=0; wfqCount=1)......
---MHX(txDataComplete): transmitting (i=2000; wfqCount=1)......
---MHX(getNextEvent) Event is prepared. Type= 0x10; Persistent=0x1, ID=0xfe, Handle=0x0, Result=0x88 
SNOOP::txDataComplete::Got event
---MHX(txDataComplete): sendEndPacket 0
 Error: command Len is not equal to size of expected bytes for FORCE_POWER_TX_MAX_CMD
: got 78, expected 5
---MHX(txBeginConfigAr5416): ENABLE TX!!!. enableInterrupt=1, enableFlag=0x1, 
---MHX Registers Summary:
---MHX Reg F2_IMR_S0(a4)= 0x00010000
---MHX Reg F2_IMR(a0)= 0x00000080
---MHX Reg F2_IER(24)= 0x00000001
---MHX Reg 0x1230(1230)= 0x00000000
---MHX Reg F2_RX_FILTER(803c)= 0x00000001
---MHX Reg F2_DIAG_SW(8048)= 0x00000000
---MHX Reg F2_CR(8)= 0x00000004
---MHX Reg F2_Q_TXE(840)= 0x00000001
---MHX Reg F2_ISR(80)= 0x00000008
---MHX Reg F2_ISR_S0(84)= 0x00000001
---MHX Reg F2_ISR_S1(88)= 0x00000000
---MHX Reg F2_ISR_S2(8c)= 0x00000000
---MHX Reg F2_ISR_S3(90)= 0x00000000
---MHX Reg F2_ISR_S4(94)= 0x00000000
---MHX(txDataStart). txDataStart started successfully. Start time = 296143250 
---MHX(txDataComplete): transmitting (i=0; wfqCount=1)......
---MHX(txDataComplete): transmitting (i=2000; wfqCount=1)......
---MHX(getNextEvent) Event is prepared. Type= 0x10; Persistent=0x1, ID=0xfe, Handle=0x0, Result=0x88 
SNOOP::txDataComplete::Got event
---MHX(txDataComplete): sendEndPacket 0
 Error: command Len is not equal to size of expected bytes for FORCE_POWER_TX_MAX_CMD
: got 78, expected 5
---MHX(txBeginConfigAr5416): ENABLE TX!!!. enableInterrupt=1, enableFlag=0x1, 
---MHX Registers Summary:
---MHX Reg F2_IMR_S0(a4)= 0x00010000
---MHX Reg F2_IMR(a0)= 0x00000080
---MHX Reg F2_IER(24)= 0x00000001
---MHX Reg 0x1230(1230)= 0x00000000
---MHX Reg F2_RX_FILTER(803c)= 0x00000001
---MHX Reg F2_DIAG_SW(8048)= 0x00000000
---MHX Reg F2_CR(8)= 0x00000004
---MHX Reg F2_Q_TXE(840)= 0x00000001
---MHX Reg F2_ISR(80)= 0x00000008
---MHX Reg F2_ISR_S0(84)= 0x00000001
---MHX Reg F2_ISR_S1(88)= 0x00000000
---MHX Reg F2_ISR_S2(8c)= 0x00000000
---MHX Reg F2_ISR_S3(90)= 0x00000000
---MHX Reg F2_ISR_S4(94)= 0x00000000
---MHX(txDataStart). txDataStart started successfully. Start time = 296148081 
---MHX(txDataComplete): transmitting (i=0; wfqCount=1)......
---MHX(txDataComplete): transmitting (i=2000; wfqCount=1)......
---MHX(getNextEvent) Event is prepared. Type= 0x10; Persistent=0x1, ID=0xfe, Handle=0x0, Result=0x88 
SNOOP::txDataComplete::Got event


Trhoughput Rx. log message of art-legacy-11n:
No log message seen.

Jul 17,2014
In /etc/chilli/hs.conf, HS_RADAUTH defines the Radius authentication port instead of HS_RADCONF_AUTHPORT.

In ART LinkTest: 
Rx---waitTime means wait for a RxDescriptor interrupt and its event; timeOut means after receiving all packets from TX, if more than timeOut time has passed and no statsInfo.status2 & DESC_DONE flag is set, then the Rx procedure is end.
Tx---timeOut means wait for a TxDescriptor interrupt and its event.

Jul 8, 2014
A9220 uses AR5416 in art code. example txBeginConfigAr5416.

Jun 26,2014
AR8216/8316 switch access via MDIO. Switch has internel registers like below:
0x0000 --- 0x0098 : Global Control Registers
0x0100 --- 0x0600 + 0xFC: Port specific control registers

But standard MII registers (each phy has a set of standard MII registers.) have address of 0x00 --- 0x1E totally 31 registers.

How to distinguish the address 0x00? Is it a Global Control Register or the MII Control register of a PHY?

Answer:
1. How does CPU access AR8316 internal PHY register by MDC/MDIO?
The PHY addr format is 0b00[PHY_AD2:0]. The high 2 bits of PHY addr is 0b00. The left 3 bits mean a switch only have up to 8 PHYs. REG addr is still 5 bits totally 32 registers.

2. How does CPU access AR8316 internal register by MDC/MDIO?
The high 2 bits of PHY addr becomes 0b11 and 0b10 to differentiate with the traditioanl MII registers. The Internal Register address has [18:0] 512K space. The REG addr bit0 indicates low Data[15:0] and high Data[31:16]. 

MAC status : Read from CPU's address space of GMAC0 or GMAC1
Port status: Read from switch's internal port specific registers
MII PHY status: Read from switch's internal MII PHY. Each PHY has a set of 32 standard MII registers from 00 to 0x1E.

Set up a new golden for 2.4G. Old 2.4G golden is Ubiquiti Sub systemID  : 0x3002. 

Jan 17,2014
root@VIP2:~# iw phy phy0 interface add my-test type station.
root@VIP2:~# cat /proc/net/wireless 
Inter-| sta-|   Quality        |   Discarded packets               | Missed | WE
 face | tus | link level noise |  nwid  crypt   frag  retry   misc | beacon | 22
 wlan0: 0000    0     0     0        0      0      0      0      0        0
mon.wlan0: 0000    0     0     0        0      0      0      0      0        0
 wlan1: 0000    0     0     0        0      0      0      0      0        0
 wlan2: 0000    0     0     0        0      0      0      0      0        0
my-test: 0000    0     0     0        0      0      0      0      0        0
root@VIP2:~# cat /sys/class/net/my-test/type 
1


This will be seen by enable_mac80211 in mac80211.sh:
                while [ -d "/sys/class/net/wlan$i" ]; do
                        i=$(($i + 1))
                done

                config_get ifname "$vif" ifname
                [ -n "$ifname" ] || {
                        ifname="wlan$i"  //This is the name of the virtual-interface.
                }
                config_set "$vif" ifname "$ifname"

Jun 9,2014
VIP2 VLAN config. AP FW=2008,WDS=1; STA FW=2009-2,WDS=1. On VIP platform, eth0=inner jack=WAN, eth1=outer jack=LAN. eth0 and eth1 are bridged together.

1. Configuration
On AP:
Management VLAN 10
VLANS Configurate Summary
ID 	Description 	WAN 		LAN 		Radio2
10 	vlan10		Join Tag	No VLAN		Join Untag
20 	vlan20		No Vlan		Join Tag	Join Untag

On STA:
Management VLAN 20
Same as AP.

2. Information
After setup, on AP:
root@VIP2:~# brctl show
bridge name     bridge id               STP enabled     interfaces
br-lan          8000.000f9200cf71       yes             eth0
                                                        wlan1.10
br-vlan1                8000.00156d6a3cd2       no              wlan1
br-vlan10               8000.000000000000       no
br-vlan20               8000.000f9201cf71       no              eth1
                                                        wlan1.20
[NOTE] WAN port(eth0) is TAGGED but no eth0.10 is created. Radip2(wlan1) is UNTAGGED but splitted into wlan1.10 and wlan1.20. br-vlan1, br-vlan10 and br-vlan20 don't have IPs.
root@VIP2:~# cat /proc/net/vlan/config 
VLAN Dev name    | VLAN ID
Name-Type: VLAN_NAME_TYPE_RAW_PLUS_VID_NO_PAD
wlan1.20       | 20  | wlan1
wlan1.10       | 10  | wlan1

On STA:
root@VIP2:~# brctl show
bridge name     bridge id               STP enabled     interfaces
br-lan          8000.000f9201c74f       yes             eth1
                                                        wlan0.20
br-vlan1                8000.008048798e4a       no              wlan0
br-vlan10               8000.000f9200c74f       no              eth0
                                                        wlan0.10
br-vlan20               8000.000000000000       no

The Management VLAN is just bridged to br-lan which has an IP. 

3. Test
3.1 Same VLAN
PC1(168.100)---AP's WAN(eth0,VLAN10) ~~~~~~ STA's WAN(eth0,VLAN10)---PC2(168.200)
Ping from 100 to 200 is successful:
On AP:

root@VIP2:~# tcpdump -envi eth0     
tcpdump: WARNING: eth0: no IPv4 address assigned
tcpdump: listening on eth0, link-type EN10MB (Ethernet), capture size 96 bytes
18:12:11.415479 00:0e:c6:89:43:83 > 00:22:15:8e:a0:44, ethertype IPv4 (0x0800), length 98: (tos 0x0, )
    192.168.168.100 > 192.168.168.200: ICMP echo request, id 59722, seq 5059, length 64
18:12:11.415583 00:22:15:8e:a0:44 > 00:0e:c6:89:43:83, ethertype IPv4 (0x0800), length 98: (tos 0x0, )
    192.168.168.200 > 192.168.168.100: ICMP echo reply, id 59722, seq 5059, length 64
18:12:11.745139 00:15:6d:6a:3c:d2 > 01:80:c2:00:00:00, 802.3, length 52: LLC, dsap STP (0x42) Individ5
        message-age 0.00s, max-age 20.00s, hello-time 2.00s, forwarding-delay 0.00s
        root-id 8000.00:0f:92:00:cf:71, root-pathcost 0
18:12:12.416942 00:0e:c6:89:43:83 > 00:22:15:8e:a0:44, ethertype IPv4 (0x0800), length 98: (tos 0x0, )
    192.168.168.100 > 192.168.168.200: ICMP echo request, id 59722, seq 5060, length 64
18:12:12.417046 00:22:15:8e:a0:44 > 00:0e:c6:89:43:83, ethertype IPv4 (0x0800), length 98: (tos 0x0, )
    192.168.168.200 > 192.168.168.100: ICMP echo reply, id 59722, seq 5060, length 64

5 packets captured
5 packets received by filter
0 packets dropped by kernel
root@VIP2:~# tcpdump -envi wlan0.10
tcpdump: WARNING: wlan0.10: no IPv4 address assigned
tcpdump: listening on wlan0.10, link-type EN10MB (Ethernet), capture size 96 bytes
18:12:26.437602 00:0e:c6:89:43:83 > 00:22:15:8e:a0:44, ethertype IPv4 (0x0800), length 98: (tos 0x0, )
    192.168.168.100 > 192.168.168.200: ICMP echo request, id 59722, seq 5074, length 64
18:12:26.437745 00:22:15:8e:a0:44 > 00:0e:c6:89:43:83, ethertype IPv4 (0x0800), length 98: (tos 0x0, )
    192.168.168.200 > 192.168.168.100: ICMP echo reply, id 59722, seq 5074, length 64
18:12:27.439171 00:0e:c6:89:43:83 > 00:22:15:8e:a0:44, ethertype IPv4 (0x0800), length 98: (tos 0x0, )
    192.168.168.100 > 192.168.168.200: ICMP echo request, id 59722, seq 5075, length 64
18:12:27.439347 00:22:15:8e:a0:44 > 00:0e:c6:89:43:83, ethertype IPv4 (0x0800), length 98: (tos 0x0, )
    192.168.168.200 > 192.168.168.100: ICMP echo reply, id 59722, seq 5075, length 64
18:12:27.745303 00:15:6d:6a:3c:d2 > 01:80:c2:00:00:00, 802.3, length 52: LLC, dsap STP (0x42) Individ5
        message-age 0.00s, max-age 20.00s, hello-time 2.00s, forwarding-delay 0.00s
        root-id 8000.00:0f:92:00:cf:71, root-pathcost 0

5 packets captured
5 packets received by filter
0 packets dropped by kernel
root@VIP2:~# tcpdump -envi br-vlan10
device br-vlan10 entered promiscuous mode
tcpdump: WARNING: br-vlan10: no IPv4 address assigned
tcpdump: listening on br-vlan10, link-type EN10MB (Ethernet), capture size 96 bytes
18:12:38.456102 00:0e:c6:89:43:83 > 00:22:15:8e:a0:44, ethertype IPv4 (0x0800), length 98: (tos 0x0, )
    192.168.168.100 > 192.168.168.200: ICMP echo request, id 59722, seq 5086, length 64
18:12:38.456227 00:22:15:8e:a0:44 > 00:0e:c6:89:43:83, ethertype IPv4 (0x0800), length 98: (tos 0x0, )
    192.168.168.200 > 192.168.168.100: ICMP echo reply, id 59722, seq 5086, length 64
18:12:39.457747 00:0e:c6:89:43:83 > 00:22:15:8e:a0:44, ethertype IPv4 (0x0800), length 98: (tos 0x0, )
    192.168.168.100 > 192.168.168.200: ICMP echo request, id 59722, seq 5087, length 64
18:12:39.457874 00:22:15:8e:a0:44 > 00:0e:c6:89:43:83, ethertype IPv4 (0x0800), length 98: (tos 0x0, )
    192.168.168.200 > 192.168.168.100: ICMP echo reply, id 59722, seq 5087, length 64
18:12:39.745432 00:15:6d:6a:3c:d2 > 01:80:c2:00:00:00, 802.3, length 52: LLC, dsap STP (0x42) Individ5
        message-age 0.00s, max-age 20.00s, hello-time 2.00s, forwarding-delay 0.00s
        root-id 8000.00:0f:92:00:cf:71, root-pathcost 0
18:12:40.459270 00:0e:c6:89:43:83 > 00:22:15:8e:a0:44, ethertype IPv4 (0x0800), length 98: (tos 0x0, )
    192.168.168.100 > 192.168.168.200: ICMP echo request, id 59722, seq 5088, length 64
18:12:40.459395 00:22:15:8e:a0:44 > 00:0e:c6:89:43:83, ethertype IPv4 (0x0800), length 98: (tos 0x0, )
    192.168.168.200 > 192.168.168.100: ICMP echo reply, id 59722, seq 5088, length 64

7 packets capturdevice br-vlan10 left promiscuous mode
ed
7 packets received by filter
0 packets dropped by kernel
root@VIP2:~# tcpdump -envi wlan0    
tcpdump: WARNING: wlan0: no IPv4 address assigned
tcpdump: listening on wlan0, link-type EN10MB (Ethernet), capture size 96 bytes
18:13:19.517262 00:0e:c6:89:43:83 > 00:22:15:8e:a0:44, ethertype 802.1Q (0x8100), length 102: vlan 10)
    192.168.168.100 > 192.168.168.200: ICMP echo request, id 59722, seq 5127, length 64
18:13:19.517451 00:22:15:8e:a0:44 > 00:0e:c6:89:43:83, ethertype 802.1Q (0x8100), length 102: vlan 10)
    192.168.168.200 > 192.168.168.100: ICMP echo reply, id 59722, seq 5127, length 64
18:13:19.745979 00:15:6d:6a:3c:d2 > 01:80:c2:00:00:00, ethertype 802.1Q (0x8100), length 56: vlan 10,5
        message-age 0.00s, max-age 20.00s, hello-time 2.00s, forwarding-delay 0.00s
        root-id 8000.00:0f:92:00:cf:71, root-pathcost 0
18:13:20.300708 00:80:48:79:8e:4a > 01:80:c2:00:00:00, ethertype 802.1Q (0x8100), length 56: vlan 20,5
        message-age 0.00s, max-age 20.00s, hello-time 2.00s, forwarding-delay 0.00s
        root-id 8000.00:0f:92:01:c7:4f, root-pathcost 0
18:13:20.518318 00:0e:c6:89:43:83 > 00:22:15:8e:a0:44, ethertype 802.1Q (0x8100), length 102: vlan 10)
    192.168.168.100 > 192.168.168.200: ICMP echo request, id 59722, seq 5128, length 64
18:13:20.518499 00:22:15:8e:a0:44 > 00:0e:c6:89:43:83, ethertype 802.1Q (0x8100), length 102: vlan 10)
    192.168.168.200 > 192.168.168.100: ICMP echo reply, id 59722, seq 5128, length 64

6 packets captured
6 packets received by filter
0 packets dropped by kernel

br-vlan1, eth1, wlan0.20, br-lan, br-vlan20 have no traffic by tcpdump. cat /proc/net/vlan/wlan1.10 can show traffic.

On STA:
root@VIP2:~# tcpdump -envi wlan1.10
tcpdump: WARNING: wlan1.10: no IPv4 address assigned
tcpdump: listening on wlan1.10, link-type EN10MB (Ethernet), capture size 96 bytes
17:33:37.121024 00:0e:c6:89:43:83 > 00:22:15:8e:a0:44, ethertype IPv4 (0x0800), length 98: (tos 0x0, )
    192.168.168.100 > 192.168.168.200: ICMP echo request, id 59722, seq 5507, length 64
17:33:37.121961 00:22:15:8e:a0:44 > 00:0e:c6:89:43:83, ethertype IPv4 (0x0800), length 98: (tos 0x0, )
    192.168.168.200 > 192.168.168.100: ICMP echo reply, id 59722, seq 5507, length 64
17:33:38.122670 00:0e:c6:89:43:83 > 00:22:15:8e:a0:44, ethertype IPv4 (0x0800), length 98: (tos 0x0, )
    192.168.168.100 > 192.168.168.200: ICMP echo request, id 59722, seq 5508, length 64
17:33:38.123576 00:22:15:8e:a0:44 > 00:0e:c6:89:43:83, ethertype IPv4 (0x0800), length 98: (tos 0x0, )
    192.168.168.200 > 192.168.168.100: ICMP echo reply, id 59722, seq 5508, length 64

4 packets captured
4 packets received by filter
0 packets dropped by kernel
root@VIP2:~# tcpdump -envi wlan1   
tcpdump: WARNING: wlan1: no IPv4 address assigned
tcpdump: listening on wlan1, link-type EN10MB (Ethernet), capture size 96 bytes
17:33:50.867852 00:15:6d:6a:3c:d2 > 01:80:c2:00:00:00, ethertype 802.1Q (0x8100), length 56: vlan 10,5
        message-age 0.00s, max-age 20.00s, hello-time 2.00s, forwarding-delay 0.00s
        root-id 8000.00:0f:92:00:cf:71, root-pathcost 0
17:33:51.142079 00:0e:c6:89:43:83 > 00:22:15:8e:a0:44, ethertype 802.1Q (0x8100), length 102: vlan 10)
    192.168.168.100 > 192.168.168.200: ICMP echo request, id 59722, seq 5521, length 64
17:33:51.142958 00:22:15:8e:a0:44 > 00:0e:c6:89:43:83, ethertype 802.1Q (0x8100), length 102: vlan 10)
    192.168.168.200 > 192.168.168.100: ICMP echo reply, id 59722, seq 5521, length 64
17:33:51.418761 00:80:48:79:8e:4a > 01:80:c2:00:00:00, ethertype 802.1Q (0x8100), length 56: vlan 20,5
        message-age 0.00s, max-age 20.00s, hello-time 2.00s, forwarding-delay 0.00s
        root-id 8000.00:0f:92:01:c7:4f, root-pathcost 0
17:33:51.418808 00:80:48:79:8e:4a > 01:80:c2:00:00:00, ethertype 802.1Q (0x8100), length 56: vlan 20,5
        message-age 0.00s, max-age 20.00s, hello-time 2.00s, forwarding-delay 0.00s
        root-id 8000.00:0f:92:01:c7:4f, root-pathcost 0
17:33:52.143729 00:0e:c6:89:43:83 > 00:22:15:8e:a0:44, ethertype 802.1Q (0x8100), length 102: vlan 10)
    192.168.168.100 > 192.168.168.200: ICMP echo request, id 59722, seq 5522, length 64
17:33:52.144617 00:22:15:8e:a0:44 > 00:0e:c6:89:43:83, ethertype 802.1Q (0x8100), length 102: vlan 10)
    192.168.168.200 > 192.168.168.100: ICMP echo reply, id 59722, seq 5522, length 64

7 packets captured
7 packets received by filter
0 packets dropped by kernel
root@VIP2:~# tcpdump -envi br-lan
tcpdump: listening on br-lan, link-type EN10MB (Ethernet), capture size 96 bytes
17:34:09.169280 00:0e:c6:89:43:83 > 00:22:15:8e:a0:44, ethertype IPv4 (0x0800), length 98: (tos 0x0, )
    192.168.168.100 > 192.168.168.200: ICMP echo request, id 59722, seq 5539, length 64
17:34:09.170468 00:22:15:8e:a0:44 > 00:0e:c6:89:43:83, ethertype IPv4 (0x0800), length 98: (tos 0x0, )
    192.168.168.200 > 192.168.168.100: ICMP echo reply, id 59722, seq 5539, length 64
17:34:10.171175 00:0e:c6:89:43:83 > 00:22:15:8e:a0:44, ethertype IPv4 (0x0800), length 98: (tos 0x0, )
    192.168.168.100 > 192.168.168.200: ICMP echo request, id 59722, seq 5540, length 64
17:34:10.172130 00:22:15:8e:a0:44 > 00:0e:c6:89:43:83, ethertype IPv4 (0x0800), length 98: (tos 0x0, )
    192.168.168.200 > 192.168.168.100: ICMP echo reply, id 59722, seq 5540, length 64

4 packets captured
4 packets received by filter
0 packets dropped by kernel
root@VIP2:~# tcpdump -envi eth0  
tcpdump: WARNING: eth0: no IPv4 address assigned
tcpdump: listening on eth0, link-type EN10MB (Ethernet), capture size 96 bytes
17:34:24.178248 00:22:15:8e:a0:44 > 00:0e:c6:89:43:83, ethertype ARP (0x0806), length 60: Ethernet (l6
17:34:24.178838 00:0e:c6:89:43:83 > 00:22:15:8e:a0:44, ethertype ARP (0x0806), length 60: Ethernet (l6
17:34:24.192333 00:0e:c6:89:43:83 > 00:22:15:8e:a0:44, ethertype IPv4 (0x0800), length 98: (tos 0x0, )
    192.168.168.100 > 192.168.168.200: ICMP echo request, id 59722, seq 5554, length 64
17:34:24.193203 00:22:15:8e:a0:44 > 00:0e:c6:89:43:83, ethertype IPv4 (0x0800), length 98: (tos 0x0, )
    192.168.168.200 > 192.168.168.100: ICMP echo reply, id 59722, seq 5554, length 64
17:34:24.867829 00:0f:92:00:cf:71 > 01:80:c2:00:00:00, 802.3, length 52: LLC, dsap STP (0x42) Individ5
        message-age 0.00s, max-age 20.00s, hello-time 2.00s, forwarding-delay 0.00s
        root-id 8000.00:0f:92:00:cf:71, root-pathcost 0
17:34:25.193734 00:0e:c6:89:43:83 > 00:22:15:8e:a0:44, ethertype IPv4 (0x0800), length 98: (tos 0x0, )
    192.168.168.100 > 192.168.168.200: ICMP echo request, id 59722, seq 5555, length 64
17:34:25.194706 00:22:15:8e:a0:44 > 00:0e:c6:89:43:83, ethertype IPv4 (0x0800), length 98: (tos 0x0, )
    192.168.168.200 > 192.168.168.100: ICMP echo reply, id 59722, seq 5555, length 64

br-vlan1, br-vlan10,br-vlan20,eth1, and wlan1.20 have no traffic by tcpdump. cat /proc/net/vlan/wlan1.10 can show traffic.

3.2 Seperate VLAN
PC1(168.100)---AP's WAN(eth0,VLAN10) ~~~~~~ STA's LAN(eth1,VLAN20)---PC2(168.200)
Ping from 100 to 200 is NOT successful:
On AP:
root@VIP2:~# tcpdump -envi eth0
tcpdump: WARNING: eth0: no IPv4 address assigned
tcpdump: listening on eth0, link-type EN10MB (Ethernet), capture size 96 bytes

0 packets captured
0 packets received by filter
0 packets dropped by kernel
root@VIP2:~# tcpdump -envi wlan0.10
tcpdump: WARNING: wlan0.10: no IPv4 address assigned
tcpdump: listening on wlan0.10, link-type EN10MB (Ethernet), capture size 96 bytes
18:32:59.759454 00:15:6d:6a:3c:d2 > 01:80:c2:00:00:00, 802.3, length 52: LLC, dsap STP (0x42) Individ5
        message-age 0.00s, max-age 20.00s, hello-time 2.00s, forwarding-delay 0.00s
        root-id 8000.00:0f:92:00:cf:71, root-pathcost 0
18:32:59.931545 00:0e:c6:89:43:83 > ff:ff:ff:ff:ff:ff, ethertype ARP (0x0806), length 60: Ethernet (l6
18:33:00.931633 00:0e:c6:89:43:83 > ff:ff:ff:ff:ff:ff, ethertype ARP (0x0806), length 60: Ethernet (l6
18:33:01.759411 00:15:6d:6a:3c:d2 > 01:80:c2:00:00:00, 802.3, length 52: LLC, dsap STP (0x42) Individ5
        message-age 0.00s, max-age 20.00s, hello-time 2.00s, forwarding-delay 0.00s
        root-id 8000.00:0f:92:00:cf:71, root-pathcost 0

4 packets captured
5 packets received by filter
0 packets dropped by kernel
root@VIP2:~# tcpdump -envi wlan0   
tcpdump: WARNING: wlan0: no IPv4 address assigned
tcpdump: listening on wlan0, link-type EN10MB (Ethernet), capture size 96 bytes
18:33:09.759405 00:15:6d:6a:3c:d2 > 01:80:c2:00:00:00, ethertype 802.1Q (0x8100), length 56: vlan 10,5
        message-age 0.00s, max-age 20.00s, hello-time 2.00s, forwarding-delay 0.00s
        root-id 8000.00:0f:92:00:cf:71, root-pathcost 0
18:33:09.933568 00:0e:c6:89:43:83 > ff:ff:ff:ff:ff:ff, ethertype 802.1Q (0x8100), length 64: vlan 10,6
18:33:10.300709 00:80:48:79:8e:4a > 01:80:c2:00:00:00, ethertype 802.1Q (0x8100), length 56: vlan 20,5
        message-age 0.00s, max-age 20.00s, hello-time 2.00s, forwarding-delay 0.00s
        root-id 8000.00:0f:92:01:c7:4f, root-pathcost 0
18:33:11.759460 00:15:6d:6a:3c:d2 > 01:80:c2:00:00:00, ethertype 802.1Q (0x8100), length 56: vlan 10,5
        message-age 0.00s, max-age 20.00s, hello-time 2.00s, forwarding-delay 0.00s
        root-id 8000.00:0f:92:00:cf:71, root-pathcost 0
18:33:11.934603 00:0e:c6:89:43:83 > ff:ff:ff:ff:ff:ff, ethertype 802.1Q (0x8100), length 64: vlan 10,6
18:33:12.300754 00:80:48:79:8e:4a > 01:80:c2:00:00:00, ethertype 802.1Q (0x8100), length 56: vlan 20,5
        message-age 0.00s, max-age 20.00s, hello-time 2.00s, forwarding-delay 0.00s
        root-id 8000.00:0f:92:01:c7:4f, root-pathcost 0
18:33:12.934667 00:0e:c6:89:43:83 > ff:ff:ff:ff:ff:ff, ethertype 802.1Q (0x8100), length 64: vlan 10,6
18:33:13.759478 00:15:6d:6a:3c:d2 > 01:80:c2:00:00:00, ethertype 802.1Q (0x8100), length 56: vlan 10,5
        message-age 0.00s, max-age 20.00s, hello-time 2.00s, forwarding-delay 0.00s
        root-id 8000.00:0f:92:00:cf:71, root-pathcost 0
18:33:13.934616 00:0e:c6:89:43:83 > ff:ff:ff:ff:ff:ff, ethertype 802.1Q (0x8100), length 64: vlan 10,6

9 packets captured
9 packets received by filter
0 packets dropped by kernel
root@VIP2:~# tcpdump -envi br-vlan10
device br-vlan10 entered promiscuous mode
tcpdump: WARNING: br-vlan10: no IPv4 address assigned
tcpdump: listening on br-vlan10, link-type EN10MB (Ethernet), capture size 96 bytes
18:33:53.945213 00:0e:c6:89:43:83 > ff:ff:ff:ff:ff:ff, ethertype ARP (0x0806), length 60: Ethernet (l6
18:33:55.759991 00:15:6d:6a:3c:d2 > 01:80:c2:00:00:00, 802.3, length 52: LLC, dsap STP (0x42) Individ5
        message-age 0.00s, max-age 20.00s, hello-time 2.00s, forwarding-delay 0.00s
        root-id 8000.00:0f:92:00:cf:71, root-pathcost 0
18:33:55.946170 00:0e:c6:89:43:83 > ff:ff:ff:ff:ff:ff, ethertype ARP (0x0806), length 60: Ethernet (l6
18:33:56.946192 00:0e:c6:89:43:83 > ff:ff:ff:ff:ff:ff, ethertype ARP (0x0806), length 60: Ethernet (l6
18:33:57.760017 00:15:6d:6a:3c:d2 > 01:80:c2:00:00:00, 802.3, length 52: LLC, dsap STP (0x42) Individ5
        message-age 0.00s, max-age 20.00s, hello-time 2.00s, forwarding-delay 0.00s
        root-id 8000.00:0f:92:00:cf:71, root-pathcost 0
18:33:57.946197 00:0e:c6:89:43:83 > ff:ff:ff:ff:ff:ff, ethertype ARP (0x0806), length 60: Ethernet (l6
18:33:59.760037 00:15:6d:6a:3c:d2 > 01:80:c2:00:00:00, 802.3, length 52: LLC, dsap STP (0x42) Individ5
        message-age 0.00s, max-age 20.00s, hello-time 2.00s, forwarding-delay 0.00s
        root-id 8000.00:0f:92:00:cf:71, root-pathcost 0


br-vlan1,br-vlan20,br-lan,eth1,wlan0.20 have not traffic by tcpdump.

On STA:
root@VIP2:~# tcpdump -envi wlan1   
tcpdump: WARNING: wlan1: no IPv4 address assigned
tcpdump: listening on wlan1, link-type EN10MB (Ethernet), capture size 96 bytes
17:51:23.125680 00:0e:c6:89:43:83 > ff:ff:ff:ff:ff:ff, ethertype 802.1Q (0x8100), length 64: vlan 10,6
17:51:23.406799 00:80:48:79:8e:4a > 01:80:c2:00:00:00, ethertype 802.1Q (0x8100), length 56: vlan 20,5
        message-age 0.00s, max-age 20.00s, hello-time 2.00s, forwarding-delay 0.00s
        root-id 8000.00:0f:92:01:c7:4f, root-pathcost 0
17:51:23.406843 00:80:48:79:8e:4a > 01:80:c2:00:00:00, ethertype 802.1Q (0x8100), length 56: vlan 20,5
        message-age 0.00s, max-age 20.00s, hello-time 2.00s, forwarding-delay 0.00s
        root-id 8000.00:0f:92:01:c7:4f, root-pathcost 0
17:51:24.125690 00:0e:c6:89:43:83 > ff:ff:ff:ff:ff:ff, ethertype 802.1Q (0x8100), length 64: vlan 10,6
17:51:24.867733 00:15:6d:6a:3c:d2 > 01:80:c2:00:00:00, ethertype 802.1Q (0x8100), length 56: vlan 10,5
        message-age 0.00s, max-age 20.00s, hello-time 2.00s, forwarding-delay 0.00s
        root-id 8000.00:0f:92:00:cf:71, root-pathcost 0
17:51:25.406759 00:80:48:79:8e:4a > 01:80:c2:00:00:00, ethertype 802.1Q (0x8100), length 56: vlan 20,5
        message-age 0.00s, max-age 20.00s, hello-time 2.00s, forwarding-delay 0.00s
        root-id 8000.00:0f:92:01:c7:4f, root-pathcost 0
17:51:25.406804 00:80:48:79:8e:4a > 01:80:c2:00:00:00, ethertype 802.1Q (0x8100), length 56: vlan 20,5
        message-age 0.00s, max-age 20.00s, hello-time 2.00s, forwarding-delay 0.00s
        root-id 8000.00:0f:92:01:c7:4f, root-pathcost 0
17:51:26.126664 00:0e:c6:89:43:83 > ff:ff:ff:ff:ff:ff, ethertype 802.1Q (0x8100), length 64: vlan 10,6

8 packets captured
8 packets received by filter
0 packets dropped by kernel
root@VIP2:~# tcpdump -envi eth0   
tcpdump: WARNING: eth0: no IPv4 address assigned
tcpdump: listening on eth0, link-type EN10MB (Ethernet), capture size 96 bytes
17:51:47.131581 00:0e:c6:89:43:83 > ff:ff:ff:ff:ff:ff, ethertype ARP (0x0806), length 60: Ethernet (l6
17:51:48.131594 00:0e:c6:89:43:83 > ff:ff:ff:ff:ff:ff, ethertype ARP (0x0806), length 60: Ethernet (l6
17:51:48.867834 00:0f:92:00:cf:71 > 01:80:c2:00:00:00, 802.3, length 52: LLC, dsap STP (0x42) Individ5
        message-age 0.00s, max-age 20.00s, hello-time 2.00s, forwarding-delay 0.00s
        root-id 8000.00:0f:92:00:cf:71, root-pathcost 0
17:51:50.132611 00:0e:c6:89:43:83 > ff:ff:ff:ff:ff:ff, ethertype ARP (0x0806), length 60: Ethernet (l6
17:51:50.867832 00:0f:92:00:cf:71 > 01:80:c2:00:00:00, 802.3, length 52: LLC, dsap STP (0x42) Individ5
        message-age 0.00s, max-age 20.00s, hello-time 2.00s, forwarding-delay 0.00s
        root-id 8000.00:0f:92:00:cf:71, root-pathcost 0
17:51:51.132601 00:0e:c6:89:43:83 > ff:ff:ff:ff:ff:ff, ethertype ARP (0x0806), length 60: Ethernet (l6

6 packets captured
6 packets received by filter

0 packets dropped by kernel
root@VIP2:~# tcpdump -envi wlan1.10
tcpdump: WARNING: wlan1.10: no IPv4 address assigned
tcpdump: listening on wlan1.10, link-type EN10MB (Ethernet), capture size 96 bytes
17:52:11.136681 00:0e:c6:89:43:83 > ff:ff:ff:ff:ff:ff, ethertype ARP (0x0806), length 60: Ethernet (l6
17:52:12.136685 00:0e:c6:89:43:83 > ff:ff:ff:ff:ff:ff, ethertype ARP (0x0806), length 60: Ethernet (l6
17:52:12.867727 00:15:6d:6a:3c:d2 > 01:80:c2:00:00:00, 802.3, length 52: LLC, dsap STP (0x42) Individ5
        message-age 0.00s, max-age 20.00s, hello-time 2.00s, forwarding-delay 0.00s
        root-id 8000.00:0f:92:00:cf:71, root-pathcost 0
17:52:14.137743 00:0e:c6:89:43:83 > ff:ff:ff:ff:ff:ff, ethertype ARP (0x0806), length 60: Ethernet (l6

4 packets captured
4 packets received by filter
0 packets dropped by kernel
root@VIP2:~# tcpdump -envi br-lan  
tcpdump: listening on br-lan, link-type EN10MB (Ethernet), capture size 96 bytes
17:52:28.140666 00:0e:c6:89:43:83 > ff:ff:ff:ff:ff:ff, ethertype ARP (0x0806), length 60: Ethernet (l6
17:52:30.141661 00:0e:c6:89:43:83 > ff:ff:ff:ff:ff:ff, ethertype ARP (0x0806), length 60: Ethernet (l6
17:52:31.141640 00:0e:c6:89:43:83 > ff:ff:ff:ff:ff:ff, ethertype ARP (0x0806), length 60: Ethernet (l6


br-vlan1, br-vlan10,br-vlan20, eth1, wlan1.20 have no traffic by tcpdump.

4. Conclusion
The setting of UNTAG and TAG concept is just opposite.


May 21,2014
Wavion AP uses a different way of ACL. Change wpa_supplicant code in wpa_supplicant/sme.c:

		if (data->auth.status_code !=
		    WLAN_STATUS_NOT_SUPPORTED_AUTH_ALG ||
			/*MHX: sme.auth_alg is a bitfield. auth_type is the AuthenticationAlgorithmNumber value in Authentication frame.*/
		    wpa_s->sme.auth_alg == 1<<(data->auth.auth_type) ||
		    wpa_s->current_ssid->auth_alg == WPA_AUTH_ALG_LEAP) {
			wpas_connection_failed(wpa_s, wpa_s->pending_bssid);
			return;
		}

May 13,2014
AR9344 platform:
1. Change default IP addr: package/base-files/files/lib/functions/uci-defaults.sh. The package/base-files/files/etc/config/network was not copied to rootfs so the uci-defaults.sh generates the final config/network.
2.webif theme: package/feeds/xwrt/webif/files/etc/config/webif.clubman and vip4g.

Aprl 29, 2014
Test antenna--throughput.AP: WLM200NX; STA: WLM200NX,dual antenna.
[Note] XN58-26 only supports up to MCS7. When associated with WLM200NX, they all work on up to MCS7 then.

1. AP: VIP4G@v1.1.6 build 1168, 11A, 20MHz Normal, 10m, Auto rate,17dBm,WPA2,default chain mask=0x3.Antenna: Up-Left
STA: VIP2@v2.2.0 build 2010, MHX_SKU=MHS160600, 11NA, 20MHz Normal, 10m, Auto rate,17dBm,WPA2,default chain mask=0x3.
Unit distance: 2.5m
Topology: PC---STA~~~AP.

Iperf: PC--->AP, iperf -c 192.168.168.1 -i 2 -t 999. TP: 16Mbps.36M


2. AP: VIP4G@v1.1.6 build 1168, 11A, 20MHz Normal, 10m, Auto rate,17dBm,WPA2,default chain mask=0x3.Antenna: Up-Right
STA: VIP2@v2.2.0 build 2010, MHX_SKU=MHS160600, 11NA, 20MHz Normal, 10m, Auto rate,17dBm,WPA2,default chain mask=0x3.
Unit distance: 2.5m
Topology: PC---STA~~~AP.
Iperf: PC--->AP, iperf -c 192.168.168.1 -i 2 -t 999. TP: 10M.24M


3. AP: VIP4G@v1.1.6 build 1168, 11A, 20MHz Normal, 10m, Auto rate,17dBm,WPA2,default chain mask=0x3.Antenna: Both
STA: VIP2@v2.2.0 build 2010, MHX_SKU=MHS160600, 11NA, 20MHz Normal, 10m, Auto rate,17dBm,WPA2,default chain mask=0x3.
Unit distance: 2.5m
Topology: PC---STA~~~AP.
Iperf: PC--->AP, iperf -c 192.168.168.1 -i 2 -t 999. TP:17M.48M


4. AP: VIP4G@v1.1.6 build 1168, 11NA, HT20, 10m, Auto rate,17dBm,WPA2,default chain mask=0x3.Antenna: Up-Left
STA: VIP2@v2.2.0 build 2010, MHX_SKU=MHS160600, 11NA, HT20, 10m, Auto rate,17dBm,WPA2,default chain mask=0x3.
Unit distance: 1m
Topology: PC---STA~~~AP.
Iperf: PC--->AP, iperf -c 192.168.168.1 -i 2 -t 999. TP: 27Mbps.MCS7

5. AP: VIP4G@v1.1.6 build 1168, 11NA, HT20, 10m, Auto rate,17dBm,WPA2,default chain mask=0x3.Antenna: Up-right
STA: VIP2@v2.2.0 build 2010, MHX_SKU=MHS160600, 11NA, HT20, 10m, Auto rate,17dBm,WPA2,default chain mask=0x3.
Unit distance: 1m
Topology: PC---STA~~~AP.
Iperf: PC--->AP, iperf -c 192.168.168.1 -i 2 -t 999. TP: 26Mbps.MCS7

6. AP: VIP4G@v1.1.6 build 1168, 11NA, HT20, 10m, Auto rate,17dBm,WPA2,default chain mask=0x3.Antenna: Both
STA: VIP2@v2.2.0 build 2010, MHX_SKU=MHS160600, 11NA, HT20, 10m, Auto rate,17dBm,WPA2,default chain mask=0x3.
Unit distance: 1m
Topology: PC---STA~~~AP.
Iperf: PC--->AP, iperf -c 192.168.168.1 -i 2 -t 999. TP: 29Mbps. MCS14

7. AP: VIP4G@v1.1.6 build 1168, 11BG, 20MHz Normal, 10m, Auto rate,17dBm,WPA2,default chain mask=0x3.Antenna: Both
STA: VIP2@v2.2.0 build 2010, MHX_SKU=MHS160600, 11BG, 20MHz Normal, 10m, Auto rate,17dBm,WPA2,default chain mask=0x3.
Unit distance: 2m, AP in shield
Topology: PC---STA~~~AP.
Iperf: PC--->AP, iperf -c 192.168.168.1 -i 2 -t 999. TP: 10Mbps. 36M

8. AP: VIP4G@v1.1.6 build 1168, 11BG, 20MHz Normal, 10m, Auto rate,17dBm,WPA2,default chain mask=0x3.Antenna: Up-left
STA: VIP2@v2.2.0 build 2010, MHX_SKU=MHS160600, 11BG, 20MHz Normal, 10m, Auto rate,17dBm,WPA2,default chain mask=0x3.
Unit distance: 2m, AP in shield
Topology: PC---STA~~~AP.
Iperf: PC--->AP, iperf -c 192.168.168.1 -i 2 -t 999. TP: 8Mbps. 48M

9. AP: VIP4G@v1.1.6 build 1168, 11BG, 20MHz Normal, 10m, Auto rate,17dBm,WPA2,default chain mask=0x3.Antenna: Up-right
STA: VIP2@v2.2.0 build 2010, MHX_SKU=MHS160600, 11BG, 20MHz Normal, 10m, Auto rate,17dBm,WPA2,default chain mask=0x3.
Unit distance: 2m, AP in shield
Topology: PC---STA~~~AP.
Iperf: PC--->AP, iperf -c 192.168.168.1 -i 2 -t 999. TP: 8M. 36M

Conclusion: 
1.In 11bg mode, dual-antenna doesn't seem benefit the throughput.
2.In 11a mode, the up-left antenna seems the primary antenna. Dual antenna helps the signal strength and throughput.
3.In 11na mode, which antenna is connected makes no big difference. Dual antenna has a significant impact on MCS rate selection and improves the throughput.

April 24,2014
Install xwrt should use ./scropt/feeds install webif(not xwrt). In make menuconfig--->Administration, turn on webif. How to login a x-wrt web page? Use passwd command to set a root password,e.g, 1q2w3e4r5t6y, then reboot unit, then you can web log in with the pair root@1q2w3e4r5t.

April 23,2014
The AA latested (r40431) doesn't have Compex's patches:
[Jeff@DENG0033 aa-20140422]$ pwd
/home/Jeff/project/openwrt/aa-20140422
[Jeff@DENG0033 aa-20140422]$ ll target/linux/ar71xx/patches-3.3/
total 760
......
-rw-rw-r-- 1 Jeff Jeff   282 Apr 22 09:18 630-MIPS-ath79-enable-dsp.patch
-rw-rw-r-- 1 Jeff Jeff   645 Apr 22 09:18 650-MIPS-ath79-fix-ar933x-reset.patch
-rw-rw-r-- 1 Jeff Jeff   531 Apr 22 09:18 901-mdio_bitbang_ignore_ta_value.patch
-rw-rw-r-- 1 Jeff Jeff  2508 Apr 22 09:18 902-unaligned_access_hacks.patch

Compex sdkath10k-130716 has patches like this:
[Jeff@DENG0033 openwrt]$ pwd
/home/Jeff/project/ar9344/project/sdkath10k-130716/openwrt
[Jeff@DENG0033 openwrt]$ ll target/linux/ar71xx/patches-3.3/
total 780
...
-rw-rw-r-- 1 Jeff Jeff   282 Apr 11 15:27 630-MIPS-ath79-enable-dsp.patch
-rw-rw-r-- 1 Jeff Jeff   645 Apr 11 15:27 650-MIPS-ath79-fix-ar933x-reset.patch
-rw-rw-r-- 1 Jeff Jeff   531 Apr 11 15:27 901-mdio_bitbang_ignore_ta_value.patch
-rw-rw-r-- 1 Jeff Jeff  2508 Apr 11 15:27 902-unaligned_access_hacks.patch
-rw-rw-r-- 1 Jeff Jeff   248 Jun  3  2013 905-mylo_mac.patch
-rw-rw-r-- 1 Jeff Jeff  1492 Jun  3  2013 910-wpj344_support.patch
-rwxrw-r-- 1 Jeff Jeff  1492 Jun  3  2013 911-np31_support.patch
-rw-r--r-- 1 Jeff Jeff  2004 Jun  3  2013 912-wp546_support.patch
-rw-rw-r-- 1 Jeff Jeff   748 Jun  3  2013 915-ar8035_phy.patch
-rwxrw-r-- 1 Jeff Jeff   742 Jun  3  2013 916-qca8334_sw.patch

April 22,2014
How to make a image of latest AA release that can be flashed by cpximg command:
[Jeff@DENG0033 aa-20140422]$ pwd
/home/Jeff/project/openwrt/aa-20140422
[Jeff@DENG0033 aa-20140422]$ ./staging_dir/host/bin/mkmylofw -B WPE72 -i 0x11f6:0x687:0x11f6:0x687 -s 0x800000 -p0x680000:0x160000:al:0x80060000:kernel:/home/Jeff/project/openwrt/aa-20140422/build_dir/linux-ar71xx_generic/tmp/vmlinux-db120.uImage -p0x050000:0x630000:::rootfs:/home/Jeff/project/openwrt/aa-20140422/build_dir/linux-ar71xx_generic/root.squashfs-64k -p0x7e0000:0x010000 -p0x7f0000:0x010000 /home/Jeff/project/openwrt/aa-20140422/bin/ar71xx/openwrt-ar71xx-generic-aa-20140422-squashfs-factory.img

April 11, 2014
COmpex WPJ344 eval board console login: root;abcd1234. WEB page: username=admin;password=password.

Mar 28,2014
For AR5414 chip. In mac80211 driver, phy is using ath5k_hw_rf5112_channel(). But in ART v5.4, it uses the phy 413. Example setChannelAr2413().

Mar 17, 2014
About libln-tiny netlink lib. In nl.c, the function nl_recv() deals with the final socket call recvmsg(). It deals with the buffer insufficiency situation (msg.msg_flags & MSG_TRUNC) and dynamically increase buffer size by realloc(). BUT, the problem is, the first time malloc MUST be big enough, 22724 for 786 channels IPnDDL5800. Any later increase of buffer size will cause the call-back function print_phy_handler() in IW module not called actually.

Solution, in nl_recv in nl.c, :
	iov.iov_len = page_size * 6;	//Page size is 4K, so allocate 24K here so the first time recvmsg() will success.
	iov.iov_base = *buf = malloc(iov.iov_len);

Mar 7, 2014
Ath5K power setting:
NL80211_CMD_SET_WIPHY+NL80211_ATTR_WIPHY_TX_POWER_SETTING+NL80211_ATTR_WIPHY_TXPOWER_LEVEL ----> nl80211_set_wiphy() --------> set_tx_power() --------> ieee80211_set_tx_power() --------> ieee80211_hw_config() ------> drv_config()--------------(ieee80211_ops.config)-------->ath5k_config() -----------> ath5k_hw_set_txpower_limit() ------->ath5k_hw_txpower()------>ath5k_setup_channel_powertable() ------> ath5k_write_channel_powertable() --------> ath5k_get_rate_pcal_data() ---------> ath5k_setup_rate_powertable() --------> Write rate power table on hw.

Mar 4, 2014
WLM200NX card
Static current:220mA
Mode	TxPwr	CF	TXANT_BMP	Tx Current
11A	11dBm	5745MHz	2		300mA
11A	11dBm	5745MHz	All		300mA


XN58-26 card
Static current:220mA
Mode	TxPwr	CF	TXANT_BMP	Tx Current	Comment
11A	20dBm	5745MHz	1		470mA		Measured with spetrum analyzer, ant2 is clear, ant1 works fine
11A	20dBm	5745MHz	ALL		530mA		Measured with spetrum analyzer, ant1&2 both work fine
11A	20dBm	5745MHz	2		300mA		Measured with spetrum analyzer, ant2 has a spike on CF, ant1 has an obvious leakage from ant2 with same waveform

11NA	20dBm	5745MHz	2		530mA		Measured with spetrum analyzer, ant2 has a spike on center frequenct. ant1 has an obvious leakage from ant2 with same waveform.
11NA	20dBm	5745MHz	1		530mA		Measured with spetrum analyzer, ant1 fine, ant2 is clear.
11NA	20dBm	5745MHz	3		550mA		Measured with spetrum analyzer, ant1&2 are fine. Rate is up to MCS14.

Conclusion: Ant2 only cooperates with ant1 in 11NA mode or a mimic of ant1 in 11A mode and can't be used independently in 11NA mode and 11A mode.  Ant1 is the primary antenna and can be used independently.

Tested a Ubiquity XR5(11A) card and used only ant1 it worked well eventhough the ant2 is shut off. antenna_mask=1 works.

Feb 28,214
ART: dk_client uses network device and doesn't use the serial_comm device. SERIAL_COMN is not defined. So at the art.ko level, SIMPLE_COMM_CLASS is not needed to be added as a dk_client.
AR71xx CPU doesn't support IP region type but the old IPX CPU does. So on the AR71 CPU bootup shows:

pci 0000:00:00.0: PME# supported from D0 D1 D2 D3hot
pci 0000:00:00.0: PME# disabled
pci 0000:00:14.0: PME# supported from D0 D1 D2 D3cold
pci 0000:00:14.0: PME# disabled
pci 0000:00:14.1: BAR 0: can't allocate I/O resource [0x00-0x00]
PCI: mapping irq 49 to pin1@0000:00:14.0
PCI: mapping irq 49 to pin1@0000:00:14.1

Any even on the IPX platform the SERIAL_COMM is not used.

Feb 25, 2014
MDF and STEP_ONE on IPnDDL and IPnDDL_step1:
1. On IPnDDL, the MDF functionality uses 2 structures:
struct wifpara
{
  int lfreq;	    //  Khz
  int rfreq;	    //  Khz  
  int bandwidth;	//  Khz
  int overlap;		//  Khz
  int antgai;
  int maxeirp;
  int regflag;      // regulatory control flag fo this band
  int mdfmode;	    // mdf module next working mode  
  unsigned char curntmd;
  unsigned char cardmod;	 	
  unsigned char pending;
  unsigned char boot;
};
and
struct _mdfdev
{
    struct class *mdf_class;  
    struct cdev mdf_cdev;            
    struct ieee80211_hw *mdfhw;
    struct wifpara wifoffset;	// waiting image	 
    struct wifpara acting;	// the working image	 
    dev_t devno;
    u32 cardtype;
    int MicroHardMode;
}; 

2. On STEP1, the STEPONEMhz functionality uses 2 structures:
struct _stepOneMhz {
    int stepOneCh;
    int stepOneFreq;
};

struct _stepOneMhzCtl
{
    int mode;
    int next_mode;
    int lfreq;	    //  Khz
    int rfreq;	    //  Khz  
    int bandwidth;	//  Khz
    int antgai;
    int maxeirp;
    int regflag;
    int band;
    struct _stepOneMhz *ch;     
};

STEPONE replaces the MDF and uses 3 external include files to define {channel, frequency} while MDF uses formulas.
	

Feb 18,2014
Debug message is controlled by q_uiPrintf(). To enable q_uiPrint() output.
1. On art_host.out: #define  q_uiPrintf uiPrintf in art_legacy_code_11n/art_host/art_rel/include/project.h.
2. On mdk_client.out side: just start with mdk_client 1 will turn on debugMode=1.

Feb 12,2014
1. Source set-env.sh:
[Jeff@DENG0033 ar71xx_IPn4G]$ cat /home/Jeff/project/art/art2/art2_ver_2_13ap_src/set-env.sh
#!/bin/sh
# setenv PATH <Your_build_env_path>/build/gcc-3.4.4-2.16.1/build_mips/bin:$PATH
export PATH=/home/Jeff/project/ar71xx_4g/staging_dir/toolchain-mips_r2_gcc-4.1.2_uClibc-0.9.30.1/usr/bin/:$PATH
# setenv KERNELPATH <Your_build_env_path>/linux/kernels/mips-linux-2.6.15/
export KERNELPATH=/home/Jeff/project/ar71xx_4g/build_dir/linux-ar71xx/linux-2.6.32.9/

2. [Jeff@DENG0033 mdk]$ pwd
/home/Jeff/project/art/art_all/art_v9_b34/art_client/src/art_client/src/dk/mdk
[Jeff@DENG0033 mdk]$ pwd
/home/Jeff/project/art/art_all/art_v9_b34/art_client/src/art_client/src/dk/mdk
[Jeff@DENG0033 mdk]$ make -f makefile.soc.linux.mips HYDRA=1

3. [Jeff@DENG0033 art_module]$ pwd
/home/Jeff/project/art/art_all/art_v9_b34/art_client/src/art_module
[Jeff@DENG0033 art_module]$ make -f makefile.soc.linux.mips hydra

In makefile 输出变量方式为：$(warning  $(XXX)).

Feb 11, 2014
art_v9_b34 with ar9220 11n support:
art.ko: /home/Jeff/project/art/art_all/art_v9_b34/art_client/src/art_module. compile with hydro option
art_legacy: /home/Jeff/project/art/art_all/art_v9_b34/art_client/src/art_client/src/dk/mdk. with HYDRO option.
art: /home/Jeff/project/art/art_all/art_v9_b34/art/src/dk/mdk/art.

art-linux(art-host): home made from art.

Jan 27,2014
VIP2 r2008, add scan_freq in wpa_supplicant.sh doesn't affect its repeater mode and sta mode.

Jan 20, 2013
NEED_AP_MLME is defined in hostapd package. ieee802_11_mgmt() process all management frames:
#define WLAN_FC_TYPE_MGMT		0
#define WLAN_FC_TYPE_CTRL		1
#define WLAN_FC_TYPE_DATA		2

/* management */
#define WLAN_FC_STYPE_ASSOC_REQ		0
#define WLAN_FC_STYPE_ASSOC_RESP	1
#define WLAN_FC_STYPE_REASSOC_REQ	2
#define WLAN_FC_STYPE_REASSOC_RESP	3
#define WLAN_FC_STYPE_PROBE_REQ		4
#define WLAN_FC_STYPE_PROBE_RESP	5
#define WLAN_FC_STYPE_BEACON		8
#define WLAN_FC_STYPE_ATIM		9
#define WLAN_FC_STYPE_DISASSOC		10
#define WLAN_FC_STYPE_AUTH		11
#define WLAN_FC_STYPE_DEAUTH		12
#define WLAN_FC_STYPE_ACTION		13

/* control */
#define WLAN_FC_STYPE_PSPOLL		10
#define WLAN_FC_STYPE_RTS		11
#define WLAN_FC_STYPE_CTS		12
#define WLAN_FC_STYPE_ACK		13
#define WLAN_FC_STYPE_CFEND		14
#define WLAN_FC_STYPE_CFENDACK		15

/* data */
#define WLAN_FC_STYPE_DATA		0
#define WLAN_FC_STYPE_DATA_CFACK	1
#define WLAN_FC_STYPE_DATA_CFPOLL	2
#define WLAN_FC_STYPE_DATA_CFACKPOLL	3
#define WLAN_FC_STYPE_NULLFUNC		4
#define WLAN_FC_STYPE_CFACK		5
#define WLAN_FC_STYPE_CFPOLL		6
#define WLAN_FC_STYPE_CFACKPOLL		7
#define WLAN_FC_STYPE_QOS_DATA		8
#define WLAN_FC_STYPE_QOS_DATA_CFACK	9
#define WLAN_FC_STYPE_QOS_DATA_CFPOLL	10
#define WLAN_FC_STYPE_QOS_DATA_CFACKPOLL	11
#define WLAN_FC_STYPE_QOS_NULL		12
#define WLAN_FC_STYPE_QOS_CFPOLL	14
#define WLAN_FC_STYPE_QOS_CFACKPOLL	15

/* Authentication algorithms */
#define WLAN_AUTH_OPEN			0
#define WLAN_AUTH_SHARED_KEY		1
#define WLAN_AUTH_FT			2
#define WLAN_AUTH_LEAP			128




Dec 10,2013
VIP2_4900-v2_2_0-r2006.bin official release on a XA58-26 card:

Compat-wireless backport release: compat-wireless-2011-01-31-4-g86702b3
Backport based on wireless-testing.git master-2011-02-07
cfg80211: Calling CRDA to update world regulatory domain
cfg80211: World regulatory domain updated:
cfg80211:     (start_freq - end_freq @ bandwidth), (max_antenna_gain, max_eirp)
cfg80211:     (2402000 KHz - 2472000 KHz @ 40000 KHz), (300 mBi, 2000 mBm)
cfg80211:     (2457000 KHz - 2482000 KHz @ 20000 KHz), (300 mBi, 2000 mBm)
cfg80211:     (2474000 KHz - 2494000 KHz @ 20000 KHz), (300 mBi, 2000 mBm)
cfg80211:     (5170000 KHz - 5250000 KHz @ 40000 KHz), (300 mBi, 2000 mBm)
cfg80211:     (5735000 KHz - 5835000 KHz @ 40000 KHz), (300 mBi, 2000 mBm)
PCI: Enabling device 0000:00:13.0 (0000 -> 0002)
ath5k 0000:00:13.0: registered as 'phy0' on slot 19
SetMicroHardMode: 0x2004 //I have manually changed 0x2062 to 0x2004. Does this matter???
SetMicroHardMode: 0x2004
SubID=0x2004, MicroHardMode=0, cardtype=4
ath: EEPROM regdomain: 0x0
ath: EEPROM indicates default country code should be used
ath: doing EEPROM country->regdmn map search
ath: country maps to regdmn code: 0x3a
ath: Country alpha2 being used: US
ath: Regpair used: 0x3a
ieee80211 phy0: Selected rate control algorithm 'minstrel_ht'
ath5k phy0: Atheros AR5414 chip found (MAC: 0xa5, PHY: 0x61)
mdf setup to mode(4).
mdf backup channels.
cfg80211: Calling CRDA for country: US
PPP generic driver version 2.4.2
NET: Registered protocol family 24
ehci_hcd: USB 2.0 'Enhanced' Host Controller (EHCI) Driver
ar71xx-ehci ar71xx-ehci: Atheros AR71xx built-in EHCI controller

If the subsystem ID is not changed the bootup message is:

Compat-wireless backport release: compat-wireless-2011-01-31-4-g86702b3
Backport based on wireless-testing.git master-2011-02-07
cfg80211: Calling CRDA to update world regulatory domain
cfg80211: World regulatory domain updated:
cfg80211:     (start_freq - end_freq @ bandwidth), (max_antenna_gain, max_eirp)
cfg80211:     (2402000 KHz - 2472000 KHz @ 40000 KHz), (300 mBi, 2000 mBm)
cfg80211:     (2457000 KHz - 2482000 KHz @ 20000 KHz), (300 mBi, 2000 mBm)
cfg80211:     (2474000 KHz - 2494000 KHz @ 20000 KHz), (300 mBi, 2000 mBm)
cfg80211:     (5170000 KHz - 5250000 KHz @ 40000 KHz), (300 mBi, 2000 mBm)
cfg80211:     (5735000 KHz - 5835000 KHz @ 40000 KHz), (300 mBi, 2000 mBm)
PCI: Enabling device 0000:00:13.0 (0000 -> 0002)
ath5k 0000:00:13.0: registered as 'phy0' on slot 19
SetMicroHardMode: 0x2062		// Card subid
SetMicroHardMode: 0x2004		//Force subid to 2004???
SubID=0x2004, MicroHardMode=0, cardtype=4
ath: EEPROM regdomain: 0x0
ath: EEPROM indicates default country code should be used
ath: doing EEPROM country->regdmn map search
ath: country maps to regdmn code: 0x3a
ath: Country alpha2 being used: US
ath: Regpair used: 0x3a
ieee80211 phy0: Selected rate control algorithm 'minstrel_ht'
ath5k phy0: Atheros AR5414 chip found (MAC: 0xa5, PHY: 0x61)
mdf setup to mode(4).
mdf backup channels.
cfg80211: Calling CRDA for country: US
PPP generic driver version 2.4.2
NET: Registered protocol family 24
ehci_hcd: USB 2.0 'Enhanced' Host Controller (EHCI) Driver
ar71xx-ehci ar71xx-ehci: Atheros AR71xx built-in EHCI controlle


Dec 4,2013
"Event %d received on interface %s". Event code: hostapd v2.0
/**
 * enum wpa_event_type - Event type for wpa_supplicant_event() calls
 */
enum wpa_event_type {
	/**
	 * EVENT_ASSOC - Association completed
	 *
	 * This event needs to be delivered when the driver completes IEEE
	 * 802.11 association or reassociation successfully.
	 * wpa_driver_ops::get_bssid() is expected to provide the current BSSID
	 * after this event has been generated. In addition, optional
	 * EVENT_ASSOCINFO may be generated just before EVENT_ASSOC to provide
	 * more information about the association. If the driver interface gets
	 * both of these events at the same time, it can also include the
	 * assoc_info data in EVENT_ASSOC call.
	 */
	EVENT_ASSOC,

	/**
	 * EVENT_DISASSOC - Association lost
	 *
	 * This event should be called when association is lost either due to
	 * receiving deauthenticate or disassociate frame from the AP or when
	 * sending either of these frames to the current AP. If the driver
	 * supports separate deauthentication event, EVENT_DISASSOC should only
	 * be used for disassociation and EVENT_DEAUTH for deauthentication.
	 * In AP mode, union wpa_event_data::disassoc_info is required.
	 */
	EVENT_DISASSOC,

	/**
	 * EVENT_MICHAEL_MIC_FAILURE - Michael MIC (TKIP) detected
	 *
	 * This event must be delivered when a Michael MIC error is detected by
	 * the local driver. Additional data for event processing is
	 * provided with union wpa_event_data::michael_mic_failure. This
	 * information is used to request new encyption key and to initiate
	 * TKIP countermeasures if needed.
	 */
	EVENT_MICHAEL_MIC_FAILURE,

	/**
	 * EVENT_SCAN_RESULTS - Scan results available
	 *
	 * This event must be called whenever scan results are available to be
	 * fetched with struct wpa_driver_ops::get_scan_results(). This event
	 * is expected to be used some time after struct wpa_driver_ops::scan()
	 * is called. If the driver provides an unsolicited event when the scan
	 * has been completed, this event can be used to trigger
	 * EVENT_SCAN_RESULTS call. If such event is not available from the
	 * driver, the driver wrapper code is expected to use a registered
	 * timeout to generate EVENT_SCAN_RESULTS call after the time that the
	 * scan is expected to be completed. Optional information about
	 * completed scan can be provided with union wpa_event_data::scan_info.
	 */
	EVENT_SCAN_RESULTS,

	/**
	 * EVENT_ASSOCINFO - Report optional extra information for association
	 *
	 * This event can be used to report extra association information for
	 * EVENT_ASSOC processing. This extra information includes IEs from
	 * association frames and Beacon/Probe Response frames in union
	 * wpa_event_data::assoc_info. EVENT_ASSOCINFO must be send just before
	 * EVENT_ASSOC. Alternatively, the driver interface can include
	 * assoc_info data in the EVENT_ASSOC call if it has all the
	 * information available at the same point.
	 */
	EVENT_ASSOCINFO,

	/**
	 * EVENT_INTERFACE_STATUS - Report interface status changes
	 *
	 * This optional event can be used to report changes in interface
	 * status (interface added/removed) using union
	 * wpa_event_data::interface_status. This can be used to trigger
	 * wpa_supplicant to stop and re-start processing for the interface,
	 * e.g., when a cardbus card is ejected/inserted.
	 */
	EVENT_INTERFACE_STATUS,

	/**
	 * EVENT_PMKID_CANDIDATE - Report a candidate AP for pre-authentication
	 *
	 * This event can be used to inform wpa_supplicant about candidates for
	 * RSN (WPA2) pre-authentication. If wpa_supplicant is not responsible
	 * for scan request (ap_scan=2 mode), this event is required for
	 * pre-authentication. If wpa_supplicant is performing scan request
	 * (ap_scan=1), this event is optional since scan results can be used
	 * to add pre-authentication candidates. union
	 * wpa_event_data::pmkid_candidate is used to report the BSSID of the
	 * candidate and priority of the candidate, e.g., based on the signal
	 * strength, in order to try to pre-authenticate first with candidates
	 * that are most likely targets for re-association.
	 *
	 * EVENT_PMKID_CANDIDATE can be called whenever the driver has updates
	 * on the candidate list. In addition, it can be called for the current
	 * AP and APs that have existing PMKSA cache entries. wpa_supplicant
	 * will automatically skip pre-authentication in cases where a valid
	 * PMKSA exists. When more than one candidate exists, this event should
	 * be generated once for each candidate.
	 *
	 * Driver will be notified about successful pre-authentication with
	 * struct wpa_driver_ops::add_pmkid() calls.
	 */
	EVENT_PMKID_CANDIDATE,

	/**
	 * EVENT_STKSTART - Request STK handshake (MLME-STKSTART.request)
	 *
	 * This event can be used to inform wpa_supplicant about desire to set
	 * up secure direct link connection between two stations as defined in
	 * IEEE 802.11e with a new PeerKey mechanism that replaced the original
	 * STAKey negotiation. The caller will need to set peer address for the
	 * event.
	 */
	EVENT_STKSTART,

	/**
	 * EVENT_TDLS - Request TDLS operation
	 *
	 * This event can be used to request a TDLS operation to be performed.
	 */
	EVENT_TDLS,

	/**
	 * EVENT_FT_RESPONSE - Report FT (IEEE 802.11r) response IEs
	 *
	 * The driver is expected to report the received FT IEs from
	 * FT authentication sequence from the AP. The FT IEs are included in
	 * the extra information in union wpa_event_data::ft_ies.
	 */
	EVENT_FT_RESPONSE,

	/**
	 * EVENT_IBSS_RSN_START - Request RSN authentication in IBSS
	 *
	 * The driver can use this event to inform wpa_supplicant about a STA
	 * in an IBSS with which protected frames could be exchanged. This
	 * event starts RSN authentication with the other STA to authenticate
	 * the STA and set up encryption keys with it.
	 */
	EVENT_IBSS_RSN_START,

	/**
	 * EVENT_AUTH - Authentication result
	 *
	 * This event should be called when authentication attempt has been
	 * completed. This is only used if the driver supports separate
	 * authentication step (struct wpa_driver_ops::authenticate).
	 * Information about authentication result is included in
	 * union wpa_event_data::auth.
	 */
	EVENT_AUTH,

	/**
	 * EVENT_DEAUTH - Authentication lost
	 *
	 * This event should be called when authentication is lost either due
	 * to receiving deauthenticate frame from the AP or when sending that
	 * frame to the current AP.
	 * In AP mode, union wpa_event_data::deauth_info is required.
	 */
	EVENT_DEAUTH,

	/**
	 * EVENT_ASSOC_REJECT - Association rejected
	 *
	 * This event should be called when (re)association attempt has been
	 * rejected by the AP. Information about the association response is
	 * included in union wpa_event_data::assoc_reject.
	 */
	EVENT_ASSOC_REJECT,

	/**
	 * EVENT_AUTH_TIMED_OUT - Authentication timed out
	 */
	EVENT_AUTH_TIMED_OUT,

	/**
	 * EVENT_ASSOC_TIMED_OUT - Association timed out
	 */
	EVENT_ASSOC_TIMED_OUT,

	/**
	 * EVENT_FT_RRB_RX - FT (IEEE 802.11r) RRB frame received
	 */
	EVENT_FT_RRB_RX,

	/**
	 * EVENT_WPS_BUTTON_PUSHED - Report hardware push button press for WPS
	 */
	EVENT_WPS_BUTTON_PUSHED,

	/**
	 * EVENT_TX_STATUS - Report TX status
	 */
	EVENT_TX_STATUS,

	/**
	 * EVENT_RX_FROM_UNKNOWN - Report RX from unknown STA
	 */
	EVENT_RX_FROM_UNKNOWN,

	/**
	 * EVENT_RX_MGMT - Report RX of a management frame
	 */
	EVENT_RX_MGMT,

	/**
	 * EVENT_RX_ACTION - Action frame received
	 *
	 * This event is used to indicate when an Action frame has been
	 * received. Information about the received frame is included in
	 * union wpa_event_data::rx_action.
	 */
	EVENT_RX_ACTION,

	/**
	 * EVENT_REMAIN_ON_CHANNEL - Remain-on-channel duration started
	 *
	 * This event is used to indicate when the driver has started the
	 * requested remain-on-channel duration. Information about the
	 * operation is included in union wpa_event_data::remain_on_channel.
	 */
	EVENT_REMAIN_ON_CHANNEL,

	/**
	 * EVENT_CANCEL_REMAIN_ON_CHANNEL - Remain-on-channel timed out
	 *
	 * This event is used to indicate when the driver has completed
	 * remain-on-channel duration, i.e., may noot be available on the
	 * requested channel anymore. Information about the
	 * operation is included in union wpa_event_data::remain_on_channel.
	 */
	EVENT_CANCEL_REMAIN_ON_CHANNEL,

	/**
	 * EVENT_MLME_RX - Report reception of frame for MLME (test use only)
	 *
	 * This event is used only by driver_test.c and userspace MLME.
	 */
	EVENT_MLME_RX,

	/**
	 * EVENT_RX_PROBE_REQ - Indicate received Probe Request frame
	 *
	 * This event is used to indicate when a Probe Request frame has been
	 * received. Information about the received frame is included in
	 * union wpa_event_data::rx_probe_req. The driver is required to report
	 * these events only after successfully completed probe_req_report()
	 * commands to request the events (i.e., report parameter is non-zero)
	 * in station mode. In AP mode, Probe Request frames should always be
	 * reported.
	 */
	EVENT_RX_PROBE_REQ,


	/**
	 * EVENT_NEW_STA - New wired device noticed
	 *
	 * This event is used to indicate that a new device has been detected
	 * in a network that does not use association-like functionality (i.e.,
	 * mainly wired Ethernet). This can be used to start EAPOL
	 * authenticator when receiving a frame from a device. The address of
	 * the device is included in union wpa_event_data::new_sta.
	 */
	EVENT_NEW_STA,

	/**
	 * EVENT_EAPOL_RX - Report received EAPOL frame
	 *
	 * When in AP mode with hostapd, this event is required to be used to
	 * deliver the receive EAPOL frames from the driver. With
	 * %wpa_supplicant, this event is used only if the send_eapol() handler
	 * is used to override the use of l2_packet for EAPOL frame TX.
	 */
	EVENT_EAPOL_RX,

	/**
	 * EVENT_SIGNAL_CHANGE - Indicate change in signal strength
	 *
	 * This event is used to indicate changes in the signal strength
	 * observed in frames received from the current AP if signal strength
	 * monitoring has been enabled with signal_monitor().
	 */
	EVENT_SIGNAL_CHANGE,

	/**
	 * EVENT_INTERFACE_ENABLED - Notify that interface was enabled
	 *
	 * This event is used to indicate that the interface was enabled after
	 * having been previously disabled, e.g., due to rfkill.
	 */
	EVENT_INTERFACE_ENABLED,

	/**
	 * EVENT_INTERFACE_DISABLED - Notify that interface was disabled
	 *
	 * This event is used to indicate that the interface was disabled,
	 * e.g., due to rfkill.
	 */
	EVENT_INTERFACE_DISABLED,

	/**
	 * EVENT_CHANNEL_LIST_CHANGED - Channel list changed
	 *
	 * This event is used to indicate that the channel list has changed,
	 * e.g., because of a regulatory domain change triggered by scan
	 * results including an AP advertising a country code.
	 */
	EVENT_CHANNEL_LIST_CHANGED,

	/**
	 * EVENT_INTERFACE_UNAVAILABLE - Notify that interface is unavailable
	 *
	 * This event is used to indicate that the driver cannot maintain this
	 * interface in its operation mode anymore. The most likely use for
	 * this is to indicate that AP mode operation is not available due to
	 * operating channel would need to be changed to a DFS channel when
	 * the driver does not support radar detection and another virtual
	 * interfaces caused the operating channel to change. Other similar
	 * resource conflicts could also trigger this for station mode
	 * interfaces.
	 */
	EVENT_INTERFACE_UNAVAILABLE,

	/**
	 * EVENT_BEST_CHANNEL
	 *
	 * Driver generates this event whenever it detects a better channel

	 * (e.g., based on RSSI or channel use). This information can be used
	 * to improve channel selection for a new AP/P2P group.
	 */
	EVENT_BEST_CHANNEL,

	/**
	 * EVENT_UNPROT_DEAUTH - Unprotected Deauthentication frame received
	 *
	 * This event should be called when a Deauthentication frame is dropped
	 * due to it not being protected (MFP/IEEE 802.11w).
	 * union wpa_event_data::unprot_deauth is required to provide more
	 * details of the frame.
	 */
	EVENT_UNPROT_DEAUTH,

	/**
	 * EVENT_UNPROT_DISASSOC - Unprotected Disassociation frame received
	 *
	 * This event should be called when a Disassociation frame is dropped
	 * due to it not being protected (MFP/IEEE 802.11w).
	 * union wpa_event_data::unprot_disassoc is required to provide more
	 * details of the frame.
	 */
	EVENT_UNPROT_DISASSOC,

	/**
	 * EVENT_STATION_LOW_ACK
	 *
	 * Driver generates this event whenever it detected that a particular
	 * station was lost. Detection can be through massive transmission
	 * failures for example.
	 */
	EVENT_STATION_LOW_ACK,

	/**
	 * EVENT_P2P_DEV_FOUND - Report a discovered P2P device
	 *
	 * This event is used only if the driver implements P2P management
	 * internally. Event data is stored in
	 * union wpa_event_data::p2p_dev_found.
	 */
	EVENT_P2P_DEV_FOUND,

	/**
	 * EVENT_P2P_GO_NEG_REQ_RX - Report reception of GO Negotiation Request
	 *
	 * This event is used only if the driver implements P2P management
	 * internally. Event data is stored in
	 * union wpa_event_data::p2p_go_neg_req_rx.
	 */
	EVENT_P2P_GO_NEG_REQ_RX,

	/**
	 * EVENT_P2P_GO_NEG_COMPLETED - Report completion of GO Negotiation
	 *
	 * This event is used only if the driver implements P2P management
	 * internally. Event data is stored in
	 * union wpa_event_data::p2p_go_neg_completed.
	 */
	EVENT_P2P_GO_NEG_COMPLETED,

	EVENT_P2P_PROV_DISC_REQUEST,
	EVENT_P2P_PROV_DISC_RESPONSE,
	EVENT_P2P_SD_REQUEST,

	EVENT_P2P_SD_RESPONSE,

	/**
	 * EVENT_IBSS_PEER_LOST - IBSS peer not reachable anymore
	 */
	EVENT_IBSS_PEER_LOST,

	/**
	 * EVENT_DRIVER_GTK_REKEY - Device/driver did GTK rekey
	 *
	 * This event carries the new replay counter to notify wpa_supplicant
	 * of the current EAPOL-Key Replay Counter in case the driver/firmware
	 * completed Group Key Handshake while the host (including
	 * wpa_supplicant was sleeping).
	 */
	EVENT_DRIVER_GTK_REKEY,

	/**
	 * EVENT_SCHED_SCAN_STOPPED - Scheduled scan was stopped
	 */
	EVENT_SCHED_SCAN_STOPPED,

	/**
	 * EVENT_DRIVER_CLIENT_POLL_OK - Station responded to poll
	 *
	 * This event indicates that the station responded to the poll
	 * initiated with @poll_client.
	 */
	EVENT_DRIVER_CLIENT_POLL_OK,

	/**
	 * EVENT_EAPOL_TX_STATUS - notify of EAPOL TX status
	 */
	EVENT_EAPOL_TX_STATUS
};

// This is the "nl80211: MLME event %d" code defined in package/hostapd/src/src/drivers/nl80211_copy.h, package/iw/src/nl80211.h and package/mac80211/src_3/include/linux/nl80211.h. Make sure they match!!
enum nl80211_commands {
/* don't change the order or add anything between, this is ABI! */
	NL80211_CMD_UNSPEC,		//0

	NL80211_CMD_GET_WIPHY,		/* can dump */
	NL80211_CMD_SET_WIPHY,
	NL80211_CMD_NEW_WIPHY,
	NL80211_CMD_DEL_WIPHY,

	NL80211_CMD_GET_INTERFACE,	/* can dump */	//5
	NL80211_CMD_SET_INTERFACE,
	NL80211_CMD_NEW_INTERFACE,
	NL80211_CMD_DEL_INTERFACE,

	NL80211_CMD_GET_KEY,
	NL80211_CMD_SET_KEY,		//10
	NL80211_CMD_NEW_KEY,
	NL80211_CMD_DEL_KEY,

	NL80211_CMD_GET_BEACON,
	NL80211_CMD_SET_BEACON,
	NL80211_CMD_START_AP,		//15
	NL80211_CMD_NEW_BEACON = NL80211_CMD_START_AP,
	NL80211_CMD_STOP_AP,
	NL80211_CMD_DEL_BEACON = NL80211_CMD_STOP_AP,

	NL80211_CMD_GET_STATION,
	NL80211_CMD_SET_STATION,
	NL80211_CMD_NEW_STATION,
	NL80211_CMD_DEL_STATION,	//20

	NL80211_CMD_GET_MPATH,
	NL80211_CMD_SET_MPATH,
	NL80211_CMD_NEW_MPATH,
	NL80211_CMD_DEL_MPATH,

	NL80211_CMD_SET_BSS,		//25

	NL80211_CMD_SET_REG,
	NL80211_CMD_REQ_SET_REG,

	NL80211_CMD_GET_MESH_CONFIG,
	NL80211_CMD_SET_MESH_CONFIG,

	NL80211_CMD_SET_MGMT_EXTRA_IE /* reserved; not used */,	//30

	NL80211_CMD_GET_REG,

	NL80211_CMD_GET_SCAN,
	NL80211_CMD_TRIGGER_SCAN,
	NL80211_CMD_NEW_SCAN_RESULTS,
	NL80211_CMD_SCAN_ABORTED,	//35

	NL80211_CMD_REG_CHANGE,

	NL80211_CMD_AUTHENTICATE,
	NL80211_CMD_ASSOCIATE,
	NL80211_CMD_DEAUTHENTICATE,
	NL80211_CMD_DISASSOCIATE,	//40

	NL80211_CMD_MICHAEL_MIC_FAILURE,

	NL80211_CMD_REG_BEACON_HINT,

	NL80211_CMD_JOIN_IBSS,
	NL80211_CMD_LEAVE_IBSS,

	NL80211_CMD_TESTMODE,

	NL80211_CMD_CONNECT,
	NL80211_CMD_ROAM,
	NL80211_CMD_DISCONNECT,

	NL80211_CMD_SET_WIPHY_NETNS,

	NL80211_CMD_GET_SURVEY,
	NL80211_CMD_NEW_SURVEY_RESULTS,

	NL80211_CMD_SET_PMKSA,
	NL80211_CMD_DEL_PMKSA,
	NL80211_CMD_FLUSH_PMKSA,

	NL80211_CMD_REMAIN_ON_CHANNEL,
	NL80211_CMD_CANCEL_REMAIN_ON_CHANNEL,

	NL80211_CMD_SET_TX_BITRATE_MASK,

	NL80211_CMD_REGISTER_FRAME,
	NL80211_CMD_REGISTER_ACTION = NL80211_CMD_REGISTER_FRAME,
	NL80211_CMD_FRAME,
	NL80211_CMD_ACTION = NL80211_CMD_FRAME,
	NL80211_CMD_FRAME_TX_STATUS,
	NL80211_CMD_ACTION_TX_STATUS = NL80211_CMD_FRAME_TX_STATUS,

	NL80211_CMD_SET_POWER_SAVE,
	NL80211_CMD_GET_POWER_SAVE,

	NL80211_CMD_SET_CQM,
	NL80211_CMD_NOTIFY_CQM,

	NL80211_CMD_SET_CHANNEL,
	NL80211_CMD_SET_WDS_PEER,

	NL80211_CMD_FRAME_WAIT_CANCEL,

	NL80211_CMD_JOIN_MESH,
	NL80211_CMD_LEAVE_MESH,

	NL80211_CMD_UNPROT_DEAUTHENTICATE,
	NL80211_CMD_UNPROT_DISASSOCIATE,

	NL80211_CMD_NEW_PEER_CANDIDATE,

	NL80211_CMD_GET_WOWLAN,
	NL80211_CMD_SET_WOWLAN,

	NL80211_CMD_START_SCHED_SCAN,
	NL80211_CMD_STOP_SCHED_SCAN,
	NL80211_CMD_SCHED_SCAN_RESULTS,
	NL80211_CMD_SCHED_SCAN_STOPPED,

	NL80211_CMD_SET_REKEY_OFFLOAD,

	NL80211_CMD_PMKSA_CANDIDATE,

	NL80211_CMD_TDLS_OPER,
	NL80211_CMD_TDLS_MGMT,

	NL80211_CMD_UNEXPECTED_FRAME,

	NL80211_CMD_PROBE_CLIENT,

	NL80211_CMD_REGISTER_BEACONS,

	NL80211_CMD_UNEXPECTED_4ADDR_FRAME,

	NL80211_CMD_SET_NOACK_MAP,

	NL80211_CMD_CH_SWITCH_NOTIFY,

#ifdef CONFIG_MICROHARD
	NL80211_CMD_ENCRYPTION_CIPHER,
#endif
	/* add new commands above here */

	/* used to define NL80211_CMD_MAX below */
	__NL80211_CMD_AFTER_LAST,
	NL80211_CMD_MAX = __NL80211_CMD_AFTER_LAST - 1
};



Nov 21,2013
Testmode mechanism.
ath9k_testmode_cmd(struct ieee80211_hw *hw, void *data, int len) [in ath9k.ko] <---
<---struct ieee80211_ops ath9k_ops = {.testmode_cmd=ath9k_testmode_cmd} [in ath9k.ko]<---
<---ieee80211_testmode_cmd(struct wiphy *wiphy, void *data, int len)<---struct cfg80211_ops mac80211_config_ops = {.testmode_cmd=ieee80211_testmode_cmd}[in mac80211.ko]<---
<---nl80211_testmode_do(struct sk_buff *skb, struct genl_info *info)[in cfg80211.ko]<---static struct genl_ops nl80211_ops[] = {
	{
		.cmd = NL80211_CMD_TESTMODE,
		.doit = nl80211_testmode_do,
		.policy = nl80211_policy,
		.flags = GENL_ADMIN_PERM,
		.internal_flags = NL80211_FLAG_NEED_WIPHY | NL80211_FLAG_NEED_RTNL,
	},
}[in cfg80211.ko]<---
<--- genl_register_family_with_ops(&nl80211_fam, nl80211_ops, ARRAY_SIZE(nl80211_ops)); [in cfg80211.ko]<---
<--- nl80211_init(void)[cfg80211.ko].<--- cfg80211_init(void)[cfg80211.ko, this is the module_init() function.]

Nov 20,2013
Use sniffer to test the AP's Mcast and Bcast.
802.11Mode	/etc/config/mcast rate		Sniffer Mcast Rate	Sniffer Bcast Rate
//2.4GHz
    BG			6				12Mbps			1Mbps
    BG			2				5.5Mbps			1Mbps
    NG			3				11Mbps			1Mbps
    NG			7				18Mbps			1Mbps
    B			1				2Mbps			1Mbps
//5.8GHz
    A			1				9Mbps			6Mbps
    A			5				36Mbps			6Mbps
    NA			5				36Mbps			6Mbps
    NA			7				54Mbps			6Mbps
Conclusion:
1. In 2.4G mode (B/BG/NG), the rate list is [1,2,5.5,11,6,9,12,18,24,36,48,54]. Broadcast always uses index=0. But the broadcast rate list can be defined in hostapd.conf.
2. In 5.8G mode (A/NA), the rate list is [6,9,12,18,24,36,48,54......].Broadcast always uses index=0. But the broadcast rate list can be defined in hostapd.conf.

Nov 19,2013
On New VIP2 board, new comptat driver. Multicast control code scenario:
bool rate_control_send_low(struct ieee80211_sta *sta, void *priv_sta, struct ieee80211_tx_rate_control *txrc)
{
	printk(KERN_DEBUG "MHX2.0[%s]: GetMcastRate=%d\n", __func__, GetMcastRate());

	if (!sta || !priv_sta || rc_no_data_or_no_ack_use_min(txrc)) {
		if ((sband->band != IEEE80211_BAND_2GHZ) ||
		    !(info->flags & IEEE80211_TX_CTL_NO_CCK_RATE))
			info->control.rates[0].idx =
				rate_lowest_index(txrc->sband, sta);
		else
			info->control.rates[0].idx =
				rate_lowest_non_cck_index(txrc->sband, sta);
		info->control.rates[0].count =
			(info->flags & IEEE80211_TX_CTL_NO_ACK) ?
			1 : txrc->hw->max_rate_tries;
		if (!sta && txrc->bss) {
#ifdef CONFIG_ATH5K_LINKRATE
	        printk(KERN_DEBUG "MHX2.1: GetMcastRate=%d. Addr1=%02x%02x%02x%02x%02x%02x\n", GetMcastRate(), add[0], add[1], add[2], add[3], add[4], add[5]);
            if((GetMcastRate()>0) && (add[0]==1)) {
                info->control.rates[0].idx =  GetMcastRate();
	        printk(KERN_DEBUG "MHX2.2:MCAST is set to idx0=%d\n", info->control.rates[0].idx);
	        printk(KERN_DEBUG "MHX2.2:MCAST is set to idx1=%d\n", info->control.rates[1].idx);
	        printk(KERN_DEBUG "MHX2.2:MCAST is set to idx2=%d\n", info->control.rates[2].idx);
	        printk(KERN_DEBUG "MHX2.2:MCAST is set to idx3=%d\n", info->control.rates[3].idx);
	        printk(KERN_DEBUG "MHX2.2:MCAST is set to idx4=%d\n", info->control.rates[4].idx);
                return true;
            } else {

PC1---AP~~~~~~STA---PC2
1. PC2 Transmits multicat data to PC1: (STA multicasts)
On PC2: iperf -c 224.56.56.1 -T 32 -i 2 -b 30m -t 999999 -u
On PC1: iperf -s -i 2 -t 100000 -B224.56.56.1 -u
Because STA doesn't really multicast so MHX2.1 and 2.2 are not printed. /etc/config/mcast controls the McastRate variable but doesn't affect STA tx rate. The through is controlled by STA's unicast rate in the regular Wireless--->Radio1 page.

AP side print:
MHX2.1: GetMcastRate=6. Addr1=ffffffffffff
MHX2.0[rate_control_send_low]: GetMcastRate=6
MHX2.1: GetMcastRate=6. Addr1=ffffffffffff
MHX2.0[rate_control_send_low]: GetMcastRate=6
MHX2.1: GetMcastRate=6. Addr1=ffffffffffff

STA side print:
MHX2.0[rate_control_send_low]: GetMcastRate=2
MHX2.0[rate_control_send_low]: GetMcastRate=2
MHX2.0[rate_control_send_low]: GetMcastRate=2
MHX2.0[rate_control_send_low]: GetMcastRate=2
MHX2.0[rate_control_send_low]: GetMcastRate=2
MHX2.0[rate_control_send_low]: GetMcastRate=2
MHX2.0[rate_control_send_low]: GetMcastRate=2

Set multicast router:
sudo route add -net 224.0.0.0 netmask 255.0.0.0 gw 192.168.168.100

2. PC1 transmits multicast data to PC2 (AP multicasts). Choose 802.11BG mode/NG+HT40- mode/
On PC1: iperf -c 224.56.56.1 -T 32 -i 2 -b 30m -t 999999 -u
On PC2: iperf -s -i 2 -t 100000 -B224.56.56.1 -u
When /etc/config/mcast rate is 6 (index value, rate list is in mcast.sh:
                option|0|@TR<<6M>>
                option|1|@TR<<9M>>
                option|2|@TR<<12M>>
                option|3|@TR<<18M>>
                option|4|@TR<<24M>>
                option|5|@TR<<36M>>
                option|6|@TR<<48M>>
                option|7|@TR<<54M>>)
AP print is:
MHX2.0[rate_control_send_low]: GetMcastRate=6
MHX2.1: GetMcastRate=6. Addr1=01005e383838
MHX2.2:MCAST is set to idx0=6
MHX2.2:MCAST is set to idx1=-1
MHX2.2:MCAST is set to idx2=-1
MHX2.2:MCAST is set to idx3=-1
MHX2.2:MCAST is set to idx4=-1
MHX2.0[rate_control_send_low]: GetMcastRate=6
MHX2.1: GetMcastRate=6. Addr1=01005e383838
MHX2.2:MCAST is set to idx0=6
MHX2.2:MCAST is set to idx1=-1
MHX2.2:MCAST is set to idx2=-1
MHX2.2:MCAST is set to idx3=-1
MHX2.2:MCAST is set to idx4=-1





STA print is:
MHX2.0[rate_control_send_low]: GetMcastRate=2
MHX2.0[rate_control_send_low]: GetMcastRate=2
MHX2.0[rate_control_send_low]: GetMcastRate=2
MHX2.0[rate_control_send_low]: GetMcastRate=2

Throughput=9.37Mbps (~48/5)

When /etc/config/mcast rate is 2 (12M) and then:
root@VIP2:~# /etc/init.d/mconfread stop
root@VIP2:~# /etc/init.d/mconfread start
AP print is:
MHX2.0[rate_control_send_low]: GetMcastRate=2
MHX2.1: GetMcastRate=2. Addr1=01005e383838
MHX2.2:MCAST is set to idx0=2
MHX2.2:MCAST is set to idx1=-1
MHX2.2:MCAST is set to idx2=-1
MHX2.2:MCAST is set to idx3=-1
MHX2.2:MCAST is set to idx4=-1
MHX2.0[rate_control_send_low]: GetMcastRate=2
MHX2.1: GetMcastRate=2. Addr1=01005e383838
MHX2.2:MCAST is set to idx0=2
MHX2.2:MCAST is set to idx1=-1
MHX2.2:MCAST is set to idx2=-1

STA print is:
MHX2.0[rate_control_send_low]: GetMcastRate=2
MHX2.0[rate_control_send_low]: GetMcastRate=2
MHX2.0[rate_control_send_low]: GetMcastRate=2
MHX2.0[rate_control_send_low]: GetMcastRate=2

Throughput=4.37Mbps (~12/3)
    
3. A and NA mode don't work correctly because the 5G index is different with 2.4G. In NG mode, the "High Throughput Mode" 20M/40M-/40M+ don't affect the multicast rate of AP. In A/NA mode the experimental result of multicast rate is (AP multicasts to STA):
Rate index in /config/mcast	Throuthput	Estimated TX rate(iw wlan0 station dump doesn't work correctly)		Measured TX rate by Sniffer(Radiotap)
	1			7.7Mbps		36Mbps									
	3			14.2Mbps	72Mbps
	5			24.3Mbps	120Mbps
	7			31Mbps		180Mbps

Nov 15,2013
Add mcast router on a PC
sudo route add -net 224.56.56.0 netmask 255.255.255.0 gw 192.168.168.1
Jeff@DENG0033 ar71xx_4g]$ route
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
192.168.1.0     *               255.255.255.0   U     0      0        0 eth0
224.56.56.0     192.168.168.1   255.255.255.0   UG    0      0        0 eth1

192.168.168.0   *               255.255.255.0   U     1      0        0 eth1
192.168.169.0   *               255.255.255.0   U     0      0        0 eth2
default         192.168.1.1     0.0.0.0         UG    0      0        0 eth0

iperf -c 224.56.56.56 -T 32 -u -i 2 -t 20 -b 30m // NOTE: Sometimes must use -u udp test!!!
On server side:
iperf -s -i 2 -u  -B 224.56.56.56

Nov 14,2013
When STA is idle, it's still sending a NULL data to AP. Below is a run "while true;do dmesg -c ; sleep 1;done" on AP with no traffic from an associated STA:
MHX1.1rssi=12,signal=-83
MHX1.1rssi=12,signal=-83
MHX1.1rssi=31,signal=-64
[ieee80211_rx_h_decrypt]: 3Address found (FC=4801)04:f0:21:03:e9:db,00:80:48:79:8e:4a,04:f0:21:03:e9:db
[ieee80211_rx_h_check_more_data]: 3Address found (FC=4801)04:f0:21:03:e9:db,00:80:48:79:8e:4a,04:f0:21:03:e9:db
[ieee80211_rx_h_uapsd_and_pspoll]: 3Address found (FC=4801)04:f0:21:03:e9:db,00:80:48:79:8e:4a,04:f0:21:03:e9:db
MHX2.1rssi=31,signal=-64
[ieee80211_rx_h_sta_process]: 3Address found (FC=4801)04:f0:21:03:e9:db,00:80:48:79:8e:4a,04:f0:21:03:e9:db
MHX1.1rssi=8,signal=-87
MHX1.1rssi=6,signal=-89
MHX1.1rssi=14,signal=-81
MHX1.1rssi=12,signal=-83
MHX1.1rssi=9,signal=-86
MHX1.1rssi=10,signal=-85
MHX1.1rssi=10,signal=-85
MHX1.1rssi=11,signal=-84
MHX1.1rssi=9,signal=-86
MHX1.1rssi=11,signal=-84
MHX1.1rssi=11,signal=-84
MHX1.1rssi=12,signal=-83
MHX1.1rssi=13,signal=-82
MHX1.1rssi=13,signal=-82
MHX1.1rssi=12,signal=-83
MHX1.1rssi=12,signal=-83
MHX1.1rssi=11,signal=-84
MHX1.1rssi=14,signal=-81
MHX1.1rssi=11,signal=-84
MHX1.1rssi=13,signal=-82
MHX1.1rssi=12,signal=-83
MHX1.1rssi=12,signal=-83
MHX1.1rssi=11,signal=-84
MHX1.1rssi=13,signal=-82
MHX1.1rssi=11,signal=-84
MHX1.1rssi=13,signal=-82
MHX1.1rssi=13,signal=-82
MHX1.1rssi=11,signal=-84
MHX1.1rssi=10,signal=-85
MHX1.1rssi=12,signal=-83
MHX1.1rssi=10,signal=-85
MHX1.1rssi=12,signal=-83
MHX1.1rssi=11,signal=-84
MHX1.1rssi=11,signal=-84
MHX1.1rssi=11,signal=-84
MHX1.1rssi=12,signal=-83
MHX1.1rssi=12,signal=-83
MHX1.1rssi=12,signal=-83
MHX1.1rssi=11,signal=-84
MHX1.1rssi=14,signal=-81
MHX1.1rssi=7,signal=-88
MHX1.1rssi=13,signal=-82
MHX1.1rssi=13,signal=-82
MHX1.1rssi=14,signal=-81
MHX1.1rssi=12,signal=-83
MHX1.1rssi=12,signal=-83
MHX1.1rssi=12,signal=-83
MHX1.1rssi=11,signal=-84
MHX1.1rssi=12,signal=-83
MHX1.1rssi=12,signal=-83
MHX1.1rssi=11,signal=-84
MHX1.1rssi=15,signal=-80
MHX1.1rssi=15,signal=-80
MHX1.1rssi=11,signal=-84
MHX1.1rssi=13,signal=-82
MHX1.1rssi=25,signal=-70
[ieee80211_rx_h_decrypt]: 3Address found (FC=4809)04:f0:21:03:e9:db,00:80:48:79:8e:4a,04:f0:21:03:e9:db
[ieee80211_rx_h_check_more_data]: 3Address found (FC=4809)04:f0:21:03:e9:db,00:80:48:79:8e:4a,04:f0:21:03:e9:db
[ieee80211_rx_h_uapsd_and_pspoll]: 3Address found (FC=4809)04:f0:21:03:e9:db,00:80:48:79:8e:4a,04:f0:21:03:e9:db
MHX2.1rssi=25,signal=-70
[ieee80211_rx_h_sta_process]: 3Address found (FC=4809)04:f0:21:03:e9:db,00:80:48:79:8e:4a,04:f0:21:03:e9:db
MHX1.1rssi=13,signal=-82
MHX1.1rssi=12,signal=-83
MHX1.1rssi=11,signal=-84

It's 30Sec to send a FC=0x4801(0x4809 is a retry) frame, which is a NULL data.With tis NULL data frame the rssi and signal values are sent to AP. NOTE: most MHX1.1 prints are from other STAs and not the specific associated STA (00:80:48:79:8e:4a), AP is 04:f0:21:03:e9:db.

NB: RSSI is a measurement of the power present in a received radio signal. It's not reported by the peer. It's calculated LOCALLY based on the packets received from the PEER.

The root source of RSSI reading is rs->rs_rssi = MS(ads.ds_rxstatus4, AR_RxRSSICombined); in ath9k_hw_rxprocdesc(struct ath_hw *ah, struct ath_desc *ds,struct ath_rx_status *rs, u64 tsf). The reads the Rx Status Descriptor rssi_combined field of DMA receiving and fills the ath_rx_status structure(rs->rs_rssi) and returns it.


Nov 13,2013
Receive path:
static struct pci_driver ath_pci_driver = {
	.probe      = ath_pci_probe,} ---> ath9k_init_device()--->ath9k_init_softc()--->tasklet_init(&sc->intr_tq, ath9k_tasklet, (unsigned long)sc) --->
ath9k_tasklet(long data)--->ath_rx_tasklet(struct ath_softc *sc, int flush, bool hp)--->ieee80211_rx(struct ieee80211_hw *hw, struct sk_buff *skb)---> __ieee80211_rx_handle_packet(struct ieee80211_hw *hw, struct sk_buff *skb)--->ieee80211_prepare_and_rx_handle(struct ieee80211_rx_data *rx,struct sk_buff *skb, bool consume)--->1. prepare_for_handlers(struct ieee80211_rx_data *rx,struct ieee80211_hdr *hdr). This must NOT return NULL otherwise return here immediately.;2.ieee80211_invoke_rx_handlers(struct ieee80211_rx_data *rx)--->ieee80211_rx_handlers(rx);.

Nov 12, 2013
iw command: Take the NL80211_STA_INFO_SIGNAL as example.
1. package/iw/src/station.c: print_sta_handler() gets the data by 
		if (sinfo[NL80211_STA_INFO_SIGNAL])
                printf("\n\tsignal:  \t%d dBm", (int8_t)nla_get_u8(sinfo[NL80211_STA_INFO_SIGNAL]));
2. static struct genl_ops nl80211_ops[] = {
	{
		.cmd = NL80211_CMD_GET_STATION,
		.doit = nl80211_get_station,
		.dumpit = nl80211_dump_station,
		.policy = nl80211_policy,
		.internal_flags = NL80211_FLAG_NEED_NETDEV |
				  NL80211_FLAG_NEED_RTNL,
	},
}
nl80211.c : nl80211_dump_station()
3. struct cfg80211_ops {	int	(*dump_station)(struct wiphy *wiphy, struct net_device *dev,
			       int idx, u8 *mac, struct station_info *sinfo);
}
struct cfg80211_ops mac80211_config_ops = {	.dump_station = ieee80211_dump_station,}
cfg.c: ieee80211_dump_station()
4.cfg.c: sta = sta_info_get_by_idx(sdata, idx);
Get the station information to sta structure. This station information comes from ieee80211_rx_h_sta_process(struct ieee80211_rx_data *rx)

struct ieee80211_rx_data {
	struct sk_buff *skb;
	struct ieee80211_local *local;
	struct ieee80211_sub_if_data *sdata;
	struct sta_info *sta;
	struct ieee80211_key *key;

	unsigned int flags;
	int queue;
	u32 tkip_iv32;
	u16 tkip_iv16;
};
The last_signal and rssi fields of sta_info comes from ieee80211_rx_status.
struct sta_info {
	/* General information, mostly static */
	struct list_head list;
	struct sta_info *hnext;
	struct ieee80211_local *local;
	struct ieee80211_sub_if_data *sdata;
	struct ieee80211_key *gtk[NUM_DEFAULT_KEYS + NUM_DEFAULT_MGMT_KEYS];
	struct ieee80211_key *ptk;
	struct rate_control_ref *rate_ctrl;
	void *rate_ctrl_priv;
	spinlock_t lock;
	spinlock_t flaglock;

	struct work_struct drv_unblock_wk;

	u16 listen_interval;

	bool dead;

	bool uploaded;

	/*
	 * frequently updated, locked with own spinlock (flaglock),
	 * use the accessors defined below
	 */
	u32 flags;

	/*
	 * STA powersave frame queues, no more than the internal
	 * locking required.
	 */
	struct sk_buff_head ps_tx_buf;
	struct sk_buff_head tx_filtered;

	/* Updated from RX path only, no locking requirements */
	unsigned long rx_packets, rx_bytes;
	unsigned long wep_weak_iv_count;
	unsigned long last_rx;
	unsigned long num_duplicates;
	unsigned long rx_fragments;
	unsigned long rx_dropped;
	int last_signal;
#ifdef CONFIG_MICROHARD
    int noise_floor;
    int rssi;
#endif
	struct ewma avg_signal;
	__le16 last_seq_ctrl[NUM_RX_DATA_QUEUES];

	/* Updated from TX status path only, no locking requirements */
	unsigned long tx_filtered_count;
	unsigned long tx_retry_failed, tx_retry_count;
	/* moving percentage of failed MSDUs */
	unsigned int fail_avg;

	/* Updated from TX path only, no locking requirements */
	unsigned long tx_packets;
	unsigned long tx_bytes;
	unsigned long tx_fragments;
	struct ieee80211_tx_rate last_tx_rate;
	int last_rx_rate_idx;
	int last_rx_rate_flag;
	u16 tid_seq[IEEE80211_QOS_CTL_TID_MASK + 1];

	/*
	 * Aggregation information, locked with lock.
	 */
	struct sta_ampdu_mlme ampdu_mlme;
	u8 timer_to_tid[STA_TID_NUM];

#ifdef CONFIG_MAC80211_MESH
	/*
	 * Mesh peer link attributes
	 * TODO: move to a sub-structure that is referenced with pointer?
	 */
	__le16 llid;
	__le16 plid;
	__le16 reason;
	u8 plink_retries;
	bool ignore_plink_timer;
	bool plink_timer_was_running;
	enum plink_state plink_state;
	u32 plink_timeout;
	struct timer_list plink_timer;
#endif

#ifdef CONFIG_MAC80211_DEBUGFS
	struct sta_info_debugfsdentries {
		struct dentry *dir;
		bool add_has_run;
	} debugfs;
#endif

	unsigned int lost_packets;

	/* keep last! */
	struct ieee80211_sta sta;
};

struct ieee80211_rx_status {
	u64 mactime;
	enum ieee80211_band band;
	int freq;
	int signal;
	int antenna;
	int rate_idx;
	int flag;
	unsigned int rx_flags;
#ifdef CONFIG_MICROHARD
	int noise_floor;
	int rssi;
#endif
};

The ieee80211_rx_status comes from rx->skb:
struct sk_buff *skb = rx->skb;
struct ieee80211_rx_status *status = IEEE80211_SKB_RXCB(skb);

Before ieee80211_rx_h_sta_process()[ie, at lower level],ath_rx_tasklet()-->ath_get_next_rx_buf() to get ath_rx_status rs-->ath9k_rx_skb_preprocess(), in which  ieee80211_rx_status *rx_status is filled with 0. The  ath_rx_status *rx_stats is used to feed the ieee80211_rx_status *rx_status. But this branch seems not the "station specific" branch bu for all random radio signals. This is the promiscuous mode.

5. cfg.c: In sta_set_sinfo(sta, sinfo):
		sinfo->signal = (s8)sta->last_signal;
		sinfo->noise_floor = (s8)sta->noise_floor;
		sinfo->rssi = (s8)sta->rssi;
	Dump the sta information to sinfo and return the sinfo.
6. The 


Nov4 2013
Just use the new driver's compat/Makefile
obj-m += compat.o
#compat-objs :=

compat-y += main.o

ifdef CONFIG_COMPAT_FIRMWARE_CLASS
  compat-y += compat_firmware_class.o
endif

compat_firmware_class.ko is no longer needed and it's included in compat.ko.

Oct 30,2013
nl80211_encryption_cipher:  memset(&key, 0, sizeof(key)) that cleans up key.key_params.seq.seq is a pointer U8*.

Oct 26, 2013
VIP2.0 wpa_supplicant-mini test. Same configuration as Oct 24,2013.
	AP		STA		Iperf		Comments
	WEP(104b)	WEP(104b)	23Mbps		AP--->STA iperf
	WPA		WPA		50Mbps
	WPA2		WPA2		50Mbps
	WPA+WPA2	WPA		40M
	WPA+WPA2	WPA2		50M
	WPA		WPA+WPA2	50M
	WPA2		WPA+WPA2	broken		AP/STA doesn't associate
	WPA+WPA2	WPA+WPA2	40M
	None		None		42M

Oct 24,2014
Encryption test. 
VIP2.0 Build Version 	v2.2.0 build 2006. Distance 1m. 802.11NA High throughput on 5G. With test code of 80211.ko and throughput is compromised. IPerf between 2 PCs behind AP and STA.
	AP		STA		Iperf		Comments
	WEP(104b)	WEP(104b)	4Mbps		AP--->STA iperf
	WPA		WPA		10Mbps
	WPA2		WPA2		9Mbps
	WPA+WPA2	WPA		10M
	WPA+WPA2	WPA2		10M
	WPA		WPA+WPA2	10M
	WPA2		WPA+WPA2	broken		AP/STA doesn't associate
	WPA+WPA2	WPA+WPA2	8M
	None		None		10M

Oct 18,2013
New VIP2 board with ATH9k card. Power down AP and the STA can break out association status immediately. Turn off the STA suddenly but the AP doesn't expire for a long time. This is on AP.
Station 04:f0:21:04:8f:1b (on wlan0)
        inactive time:  2233360 ms
        rx bytes:       1113746
        rx packets:     12086
        rx dropped:     323
        tx bytes:       35947800
        tx packets:     23566
        tx retries:     57515
        tx failed:      165
        signal:         -65 dBm
        signal avg:     -67 dBm
        noise floor:    -95 dBm
        rssi:           30
        tx bitrate:     52.0 MBit/s MCS 5
        rx bitrate:     65.0 MBit/s MCS 7

With newer 9k driver, same:
Station 04:f0:21:04:8f:1b (on wlan0)
        inactive time:  1178980 ms
        rx bytes:       3157
        rx packets:     62
        rx dropped:     126
        tx bytes:       826
        tx packets:     7
        tx retries:     14
        tx failed:      1
        signal:         -57 dBm
        signal avg:     -53 dBm
        noise floor:    0 dBm
        rssi:           0
        tx bitrate:     26.0 MBit/s MCS 3
        rx bitrate:     39.0 MBit/s MCS 10
The time-out mechanism is in hostapd program. The system time provides the time line for hostapd. The system time is reset to Apr 1, 2011 by htpclient in crond so that hostapd can't get correct time so the time-out mechanism fails.

Oct 9,2013
CONFIG_MAC80211_DEBUGFS is configured in packet/mac80211/Makefile, whichi is configurable by make menuconfig instead of kernel_menuconfig. This should be off because simple_open used by debugfs is not present in kernel 2.6.32.9.
But this function can be defined in /home/Jeff/project/tmp/vip4g-20130715/package/mac80211/src_2/compat/compat-2.6.33.c so that the compat.ko can contain this simple_open() function:
///////////////////MHX

int simple_open(struct inode *inode, struct file *file)
{
	if (inode->i_private)
		file->private_data = inode->i_private;

	return 0;
}
EXPORT_SYMBOL_GPL(simple_open);

This all functions well for example we can change channel bandwidth by 
	echo 5 > sys/kernel/debug/ieee80211/phy0/ath9k/chanbw
This will set channel bandwidth to 5MHz and 0 to normal 20MHz.
After this function is contailed in compat.ko, we can use the debugfs of ath9k by make menuconfig-->Kernel Modules--->Wireless Drivers--->kmod-mac80211--->Configuration--->Export mac80211 internals in DebugFS. this will set the flag CONFIG_MAC80211_DEBUGFS and consequently the CONFIG_ATH9K_DEBUGFS.

Sept 30,2013
Change OpenWRT default kernel version
Tweak the LINUX_VERSION variable in target/linux/ar71xx/Makefile.
Supported Kernels are listed in include/kernel-version.mk 

Trunk@@31807: The last 2.6.39 support. Switch to 3.3 later on.


Sept 27,2013
Capability exchange info on STA:

root@VIP2:~# wifi
device wlan0 left promiscuous mode
br-lan: port 3(wlan0) entering disabled state
wlan0: deauthenticating from 04:f0:21:03:e9:db by local choice (reason=3)
cfg80211: Calling CRDA to update world regulatory domain
cfg80211: World regulatory domain updated:
cfg80211:     (start_freq - end_freq @ bandwidth), (max_antenna_gain, max_eirp)
cfg80211:     (2402000 KHz - 2472000 KHz @ 40000 KHz), (300 mBi, 2000 mBm)
cfg80211:     (2457000 KHz - 2482000 KHz @ 20000 KHz), (300 mBi, 2000 mBm)
cfg80211:     (2474000 KHz - 2494000 KHz @ 20000 KHz), (300 mBi, 2000 mBm)
cfg80211:     (5170000 KHz - 5250000 KHz @ 40000 KHz), (300 mBi, 2000 mBm)
cfg80211:     (5735000 KHz - 5835000 KHz @ 40000 KHz), (300 mBi, 2000 mBm)
/sbin/wifi: eval: line 1: can't create /sys/class/leds/ath5k-phy0::tx/brightness: nonexistent directory
setting bwmode 0bwmode modify request:  0

ADDRCONF(NETDEV_UP): wlan0: link is not ready
device wlan0 entered promiscuous mode
killall: ledcon.sh: no process killed
enable txaggr 1txaggr modify request:  1

<ledcon.sh> THIS is new vip2 board 
enable sgi 1sgi modify request:  1

ht_cap.cap flags:  0x11ce 0x40
ht_cap.cap flags:  0x11ce 0x40
root@VIP2:~# wlan0: authenticate with 04:f0:21:03:e9:db (try 1)
wlan0: authenticated
wlan0: associate with 04:f0:21:03:e9:db (try 1)
wlan0: RX AssocResp from 04:f0:21:03:e9:db (capab=0x411 status=0 aid=1)	//AP's capability!
wlan0: associated
br-lan: topology change detected, propagating
br-lan: port 3(wlan0) entering forwarding state
ADDRCONF(NETDEV_CHANGE): wlan0: link becomes ready

Difinations:

#define WLAN_CAPABILITY_ESS		(1<<0)
#define WLAN_CAPABILITY_IBSS		(1<<1)
#define WLAN_CAPABILITY_CF_POLLABLE	(1<<2)
#define WLAN_CAPABILITY_CF_POLL_REQUEST	(1<<3)
#define WLAN_CAPABILITY_PRIVACY		(1<<4)
#define WLAN_CAPABILITY_SHORT_PREAMBLE	(1<<5)
#define WLAN_CAPABILITY_PBCC		(1<<6)
#define WLAN_CAPABILITY_CHANNEL_AGILITY	(1<<7)

/* 802.11h */
#define WLAN_CAPABILITY_SPECTRUM_MGMT	(1<<8)
#define WLAN_CAPABILITY_QOS		(1<<9)
#define WLAN_CAPABILITY_SHORT_SLOT_TIME	(1<<10)
#define WLAN_CAPABILITY_DSSS_OFDM	(1<<13)

Sept 26, 2013
/etc/hotplug.d/net/20-client_bridge:
In WDS=1 mode 4 addresses are used so don't need to change br-lan addr to wlan0's addr and don't need ARPNET. In WDS=0 mode 3 addresses are used so that ARPNET is needed to translate behind clients' MAC to wlan0's MAC address. At the same time br-lan's MAC addr should be changed to wlan0's addr.

ARPNET in Ebtables has a bug (in all production lines like VIP4G and VIP2): when WDS=0, the ebtables ARPNET rules takes effect, you disconnect eth1 cable and then plug it back again, eth0 and eth1 will never ping each other again. 

Sept 23, 2013
In ieee80211_send_assoc() function (mac80211 packet work.c):
	if (wk->assoc.use_11n && wk->assoc.wmm_used && local->hw.queues >= 4)
		ieee80211_add_ht_ie(skb, wk->assoc.ht_information_ie, sband, wk->chan, wk->assoc.smps);
This means HT is not achieved without WMM.

ieee_80211_nvoke_rx_handler()--->ieee80211_rx_reorder_ampdu(rx)---------------------------->skb_queue_tail(local->rx_skb_queue)//Put data to queue
			     |-->ieee80211_rx_handler(rx)----------->__skb_dequeue(local->rx_skb_queue)//Get data from queue
			     |-->ieee80211_rx_handler_result()

ieee80211_rx_bss_info--------------------------------------------------------------------->ieee80211_bss_info_update(elemes)
ieee80211_scan_rx()--->ieee802_11_parse_elems(&elems)--->ieee802_11_parse_elems_crc()    
		   |---------------------------------------------------------------------->ieee80211_bss_info_update(elemes)
	

static void debug_print(struct ieee80211_rx_data *rx, char *caller)
{
#define MAC_FMT "%02x:%02x:%02x:%02x:%02x:%02x"
#define MAC_ADDR(addr) \
  ((unsigned char *)(addr)) [0], \
  ((unsigned char *)(addr)) [1], \
  ((unsigned char *)(addr)) [2], \
  ((unsigned char *)(addr)) [3], \
  ((unsigned char *)(addr)) [4], \
  ((unsigned char *)(addr)) [5]

///////////////////////////////////////////////////////////////////////////////
	u8 pc_mac[6]={00,0x0e,0xc6,0x89,0x41,0x95};
    struct ieee80211_hdr *hdr = (struct ieee80211_hdr *)rx->skb->data;

    if (!is_multicast_ether_addr(hdr->addr1) && ((hdr->addr3[3]==0x89 && hdr->addr3[4]==0x41 && hdr->addr3[5]==0x95) || (hdr->addr4[3]==0x89 && hdr->addr4[4]==0x41 && hdr->addr4[5]==0x95))) {
        if ((hdr->frame_control & cpu_to_le16(IEEE80211_FCTL_FROMDS)) && (hdr->frame_control &cpu_to_le16(IEEE80211_FCTL_TODS))) {
            //printk(KERN_DEBUG "[%s]: 4Address found "MAC_FMT","  MAC_FMT","  MAC_FMT","  MAC_FMT"\n", caller, MAC_ADDR(hdr->addr1),MAC_ADDR(hdr->addr2),MAC_ADDR(hdr->addr3),MAC_ADDR(hdr->addr4));
            ;
        } else
            //printk(KERN_DEBUG "[%s]: 3Address found "MAC_FMT","  MAC_FMT","  MAC_FMT"\n", caller, MAC_ADDR(hdr->addr1),MAC_ADDR(hdr->addr2),MAC_ADDR(hdr->addr3));
            ;
    }
//////////////////////////////////////////////////////////////////////////////
}


Sept 18,2013
VavioinAP+IPhone4+NoteBookPC. Set up static IPs on IPhone and NoteBook to 1 segment. Both pings to AP(192.168.1.1) are ok sumultaneously.

Sept 18,2013
Wavioin AP: the VIP2 stations must be WDS=0(off) otherwise can't associate with Wavioin AP. 2 stations work in 2.4GHz ht20 mode(11n).
CradlePoint AP a/b/g/n mode: Stations' WDS must be 0 otherwise can't ping between AP and STA. But the association is ok when WDS=1. When WDS=0, simultaneous pings from a PC behind AP to 2 stations are not OK either. The symptom is the same as our AP (WDS=0&AGGRE=1).

AP(168.1;04:f0:21:03:e9:db)
STA1(168.2; 04:f0:21:04:8f:1b)
STA2(168.3; 00:80:48:79:8e:4a)
PC Behind AP(168.100;00:0e:c6:89:41:95)	

AP(168.1;04:f0:21:03:e9:db)	STA1(168.2; 04:f0:21:04:8f:1b)		STA2(168.3; 00:80:48:79:8e:4a)		Encryption	Test			Result
Mode 	WDS	MPDU Aggr	Mode	WDS	MPDU Aggr		Mode	WDS	MPDU Aggr		WPA-PSK		
NG	Off	On		NG	On	On			NG	On	On			WPA-PSK		Ping PC-STA1/2		Pings work well simultaneously
NG	On	On		NG	On	On			NG	On	On			WPA-PSK		Ping PC-STA1/2		Pings work well simultaneously
NG	Off	Off		NG	On	On			NG	On	On			WPA-PSK		Ping PC-STA1/2		Pings work well simultaneously
NG	On	Off		NG	On	On			NG	On	On			WPA-PSK		Ping PC-STA1/2		Pings work well simultaneously

NG	Off	On		NG	Off	On			NG	Off	On			WPA-PSK		Ping PC-STA1/2		Only one ping works.shift
NG	Off	Off		NG	Off	On			NG	Off	On			WPA-PSK		Ping PC-STA1/2		Pings work well simultaneously
NG	Off	On		NG	Off	Off			NG	Off	Off			WPA-PSK		Ping PC-STA1/2		Only one ping works.shift

Sept 16,2013

1. ieee80211_rx_h_data() can't see packet; ieee80211_prepare_and_rx_handle() can see packet

2. Between these macro calls, printk() can't be used otherwise kernel oops crash.
		CALL_RXH(ieee80211_rx_h_decrypt)
#if 0		//THIS PRINTK CAUSES KERNEL OOPS CRASH!!!

///////////////////////////////////////////////////////////////////////////////
    struct ieee80211_hdr *hdr = (struct ieee80211_hdr *)skb->data;
	u8 pc_mac[6]={00,0x0e,0xc6,0x89,0x41,0x95};

    if (!is_multicast_ether_addr(hdr->addr1)) {
        if ((hdr->frame_control & cpu_to_le16(IEEE80211_FCTL_FROMDS)) && (hdr->frame_control &cpu_to_le16(IEEE80211_FCTL_TODS)) && (hdr->addr3[3]==0x89 && hdr->addr3[4]==0x41 && hdr->addr3[5]==0x95)) {
            printk(KERN_DEBUG "[%s]: 4Address found "MAC_FMT","  MAC_FMT","  MAC_FMT","  MAC_FMT"\n", __func__, MAC_ADDR(hdr->addr1),MAC_ADDR(hdr->addr2),MAC_ADDR(hdr->addr3),MAC_ADDR(hdr->addr4));
        } else
            printk(KERN_DEBUG "[%s]: 3Address found "MAC_FMT","  MAC_FMT","  MAC_FMT"\n", __func__, MAC_ADDR(hdr->addr1),MAC_ADDR(hdr->addr2),MAC_ADDR(hdr->addr3));
    }
//////////////////////////////////////////////////////////////////////////////
#endif
		CALL_RXH(ieee80211_rx_h_check_more_data)
		CALL_RXH(ieee80211_rx_h_sta_process)
3. In the beginning of _rx_h_decrypt(), a sniffing STA (8f:1b) can still sniff the normal traffic of others. But after _rx_h_decrypt(), the non-destined packets are dropped.
[ieee80211_invoke_rx_handlers]: 3Address found 00:80:48:79:8e:4a,04:f0:21:03:e9:db,00:0e:c6:89:41:95	//other traffic
[ieee80211_rx_h_decrypt]: 1-----3Address found 00:80:48:79:8e:4a,04:f0:21:03:e9:db,00:0e:c6:89:41:95	//other traffic
[ieee80211_invoke_rx_handlers]: 3Address found 04:f0:21:04:8f:1b,04:f0:21:03:e9:db,00:0e:c6:89:41:95	//destined packet is dropped before entering _rx_h_decrypt().
[ieee80211_invoke_rx_handlers]: 3Address found 00:80:48:79:8e:4a,04:f0:21:03:e9:db,00:0e:c6:89:41:95	//other traffic
[ieee80211_rx_h_decrypt]: 1-----3Address found 00:80:48:79:8e:4a,04:f0:21:03:e9:db,00:0e:c6:89:41:95	//other traffic



Sept 13,2013
Mesh product test:
AP: Three 5.8G cards in AP unit.
Clients: Three stations connected to 3 seperate radios in AP by cables. BY CABLES!
Setting: Set different channels for AP cards and let them apart with each other as far as possible to reduce interference.
Test: Run iperf server on each client. Run iperf client behind AP and check throughtput of each connection. At the same time!
Result: When the channels are apart away enough, the simultaneous throughputs are 18Mbps, 18Mbps, and 20Mbps, totally 56Mbps.
Duration: 17:00 Sept 13 to 9:00 Sept 16,2013.

Aug 28,2013
mac80211 receive:
/*
 * This is the receive path handler. It is called by a low level driver when an
 * 802.11 MPDU is received from the hardware.
 */
void ieee80211_rx(struct ieee80211_hw *hw, struct sk_buff *skb)--->__ieee80211_rx_handle_packet--->ieee80211_prepare_and_rx_handle--->ieee80211_invoke_rx_handlers--->ieee80211_rx_handlers.

Aug 22,2013
In uci_firewall.sh, function fw_event(). 	
	config_foreach get_interface_zones zone "$interface" 
If aaa has a zone name on the same line, like this:
config 'zone' 'aaa'      
        option 'name' 'aaa'
        option 'input' 'ACCEPT'
        option 'output' 'ACCEPT'
        option 'forward' 'DROP'

The function get_interface_zones() is not called with the "$interface" of 'aaa'. 

This config will work as expected:
config 'zone'
        option 'name' 'aaa'
        option 'input' 'ACCEPT'
        option 'output' 'ACCEPT'
        option 'forward' 'DROP'
This means config_forwach() can't process the section with a section name on the same line. Is this a bug????

Further, this is a special case because there is a parameter "$interface". If there's not this parameter, the section with section name on the same line works well too.

Further, this is not a bug on config_forwach() accepting more paremeters. When looking into this function, the var $CONFIG_SECTIONS has ALL sections in both network and fireware config like this:

loopback lan wan2 ar8316 vlan1 vlan2 aaa cfg02f50e cfg04e8f0 cfg062fd8 cfg08f74a cfg0a7a91 cfg0ccce3 cfg0e0261 cfg102df3 cfg12bf33 cfg14c5b2 cfg16898e cfg18dc83 normal dmz1 DEFRule_rea

Because we have a section 'aaa' in network:
config 'interface' 'aaa'
        option 'proto' 'static'
        option 'ipaddr' '192.168.169.1'
        option 'netmask' '255.255.255.0'


and we have a same section name in firewall:
config 'zone' 'aaa'      
        option 'name' 'aaa'
        option 'input' 'ACCEPT'
        option 'output' 'ACCEPT'

This will make serious conflict --- what's the type of section 'aaa', 'interface' or 'zone'? In fact, in our scenario the type is recognized as 'interface' as defined in network config file. The soluitoin is like this:
config 'zone' 'FW_ZONE_aaa'    	//Be different with network config file
        option 'name' 'aaa' 	// Must be a interface name defined in network config file
        option 'input' 'ACCEPT'
        option 'output' 'ACCEPT'




Aug 13,2013
br-aaa          8000.000f92006f70       no              eth0.2
                                                        wlan1
br-lan          8000.000f92006f70       yes             eth0.1
                                                        eth1
                                                        wlan0
br-wan2         8000.00a0c6000000       no              eth2

config 'interface' 'aaa'
        option 'proto' 'static'
        option 'ipaddr' '192.168.169.1'
        option 'netmask' '255.255.255.0'
        option 'gateway' ''
        option 'dns' ''
        option 'stp' 'off'
        option 'type' 'bridge'
        option 'ifname' 'eth0.2 wlan1'

config 'switch_vlan' 'vlan2'
        option 'device' 'eth0'
        option 'vlan' '2'
        option 'vlan_if' 'aaa'
        option 'ports' '0t 1 3 4'

In this case, the eth0.2 includes port 3&4 and these 2 ports can serve DHCP clients proper IP addresses (both switch ports and WiFi are ok).
But if port3 is in vlan2, port4 in vlan3, and vlan2 and vlan3 are placed in the same bridge br-aaa, something like this:
br-aaa          8000.000f92006f70       no              eth0.2
							eth0.3
                                                        wlan1
the DHCP server can't serve these 2 ports IP addresses. Both eth0.2 and eth0.3 DON'T assign IP addresses to clients. But wlan1 DHCP works well.

[Conclusion]: To place multiple VLANs into a same bridge has a problem in DHCP. 

Jul 17,2013
In artMFC.cfg, about the ID of various cards:

Name: MHX23G		MHX24G		DDL24G		MHX5G		Ubi24G		Ubi5G		Ubi4G
Golden:Golden23G	Golden24G	Golden24G	GoldenUbi5G	GoldenUbi	GoldenUbi5G	GoldenUbi4G
Dut: Dut23G		Dut24G		Ddl24G		Dut5G		DutUbi		DutUbi5G	DutUbi4G
GoldenID:0x3012		0x3002		0x3002		0x3005		0x3002		0x3005		0x3005
DutID:0x3012		0x3011		0x3014		0x3013		0x3002		0x3005		0x3005
------------------------------------------------------------------------------------------------------------------------
Name: XA584		XA585		XBG24G		Wlm5G
Golden:GoldenUbi4G	GoldenUbi5G	GoldenXBG24G	Goldenwlm5G
Dut:Dutxa584		Dutxa585	XBG24G		Dutwlm5G
GoldenID:0x3004		0x3005		0x3002		0x3005
DutID:0x2062		0x2062		0x2051		0x2062

Introduced new card DDL5800, 0x3015.



Jul 5,2013
With #define SWITCH_PHYADDR	0
and 
#define VIP4G_0_PHYMASK BIT(0)
#define VIP4G_1_PHYMASK BIT(1)
#define VIP4G_LAN_PHYMASK       VIP4G_0_PHYMASK
#define VIP4G_MDIO_PHYMASK      (VIP4G_0_PHYMASK | VIP4G_1_PHYMASK | VIP4G_2_PHYMASK| VIP4G_3_PHYMASK| VIP4G_4_PHYMASK)
The bootup message:

 hash table entries: 1024 (order: 0, 4096 bytes)
TCP established hash table entries: 2048 (order: 2, 16384 bytes)
TCP bind hash table entries: 2048 (order: 1, 8192 bytes)
TCP: Hash tables configured (established 2048 bind 2048)
TCP reno registered
NET: Registered protocol family 1
squashfs: version 4.0 (2009/01/31) Phillip Lougher
Registering mini_fo version $Id: 209-mini_fo.patch,v 1.1 2010/04/01 22:08:58 Bob Exp $
JFFS2 version 2.2. (NAND) (SUMMARY)  © 2001-2006 Red Hat, Inc.
yaffs Jul  4 2013 16:37:52 Installing. 
msgmni has been set to 119
io scheduler noop registered
io scheduler deadline registered (default)
Serial: 8250/16550 driver, 1 ports, IRQ sharing disabled
serial8250.0: ttyS0 at MMIO 0x18020000 (irq = 11) is a 16550A
console [ttyS0] enabled, bootconsole disabled
Atheros AR71xx SPI Controller driver version 0.2.4
m25p80 spi0.0: m25p128 (16384 Kbytes)
spi0.0: searching for MyLoader partition table at offset 0x40000
spi0.0: searching for MyLoader partition table at offset 0x80000
spi0.0: searching for MyLoader partition table at offset 0xc0000
spi0.0: searching for MyLoader partition table at offset 0x100000
spi0.0: no MyLoader partition table found
Searching for RedBoot partition table in spi0.0 at offset 0xf80000
Searching for RedBoot partition table in spi0.0 at offset 0xfc0000
No RedBoot partition table detected in spi0.0
spi0.0: no WRT160NL signature found
Creating 5 MTD partitions on "spi0.0":
0x000000000000-0x000000040000 : "u-boot"
0x000000040000-0x000000080000 : "params"
0x000000080000-0x000000280000 : "kernel"
0x000000280000-0x000000e00000 : "rootfs"
mtd: partition "rootfs" set to be root filesystem
0x000000e00000-0x000001000000 : "rootfs_data"
ag71xx_mdio: probed
eth0: Atheros AG71xx at 0xb9000000, irq 4
eth0: PHY found at ag71xx-mdio:00, uid=004dd041    //In ag71xx_phy_connect_multi()
*MHX ar8216_config_init() : eth0: AR8316 PHY driver attached. //Call back to _config_init() [by phy_connect()?]
swconfig: switch_register()ed. Switch name:Atheros AR8316; eth0. Netdev name:eth0

* Swtich Port0 Status = 0x0000007e
* Swtich Port0 Control = 0x00004104
* Swtich Port0 Port-based VLAN Register = 0x00000000

* Swtich Port1 Status = 0x00000200
* Swtich Port1 Control = 0x00004104
* Swtich Port1 Port-based VLAN Register = 0x00000000

* Swtich Port2 Status = 0x00000f4e
* Swtich Port2 Control = 0x00004104
* Swtich Port2 Port-based VLAN Register = 0x00000000

* Swtich Port3 Status = 0x00000f4d
* Swtich Port3 Control = 0x00004104
* Swtich Port3 Port-based VLAN Register = 0x00000000

* Swtich Port4 Status = 0x00000200
* Swtich Port4 Control = 0x00004104
* Swtich Port4 Port-based VLAN Register = 0x00000000

* Swtich Port5 Status = 0x00000f4d
* Swtich Port5 Control = 0x00004104
* Swtich Port5 Port-based VLAN Register = 0x00000000
eth0: connected to PHY at ag71xx-mdio:00 [uid=004dd041, driver=Atheros AR8216/AR8316] //Come back to ag71xx_phy_connect_multi()
eth1: Atheros AG71xx at 0xba000000, irq 5
eth1: PHY found at ag71xx-mdio:04, uid=004dd041
*MHX ar8216_config_init() : eth1: AR8316 PHY driver attached.
eth1: connected to PHY at ag71xx-mdio:04 [uid=004dd041, driver=Atheros AR8216/AR8316]
IMQ driver loaded successfully.
        Hooking IMQ before NAT on PREROUTING.
        Hooking IMQ after NAT on POSTROUTING.
Atheros AR71xx hardware watchdog driver version 0.1.0
ar71xx-wdt: timeout=15 secs (max=25)
GACT probability on
netem: version 1.2
u32 classifier
    Performance counters on
    input device check on 
    Actions configured 
Netfilter messages via NETLINK v0.30.
nf_conntrack version 0.5.0 (958 buckets, 3832 max)
CONFIG_NF_CT_ACCT is deprecated and will be removed soon. Please use
nf_conntrack.acct=1 kernel parameter, acct=1 nf_conntrack module option or
sysctl net.netfilter.nf_conntrack_acct=1 to enable it.
ctnetlink v0.93: registering with nfnetlink.
nf_conntrack_rtsp v0.6.21 loading
NF_TPROXY: Transparent proxy support initialized, version 4.1.0
NF_TPROXY: Copyright (c) 2006-2007 BalaBit IT Ltd.
xt_time: kernel timezone is -0000
IPVS: Registered protocols ()
IPVS: Connection hash table configured (size=4096, memory=32Kbytes)
IPVS: ipvs loaded.
IPVS: [rr] scheduler registered.
IPVS: [wrr] scheduler registered.
IPVS: [lc] scheduler registered.
IPVS: [wlc] scheduler registered.
IPVS: [lblc] scheduler registered.
IPVS: [lblcr] scheduler registered.
IPVS: [dh] scheduler registered.
IPVS: [sh] scheduler registered.
IPVS: [sed] scheduler registered.
IPVS: [nq] scheduler registered.
IPv4 over IPv4 tunneling driver
GRE over IPv4 tunneling driver
nf_nat_rtsp v0.6.21 loading
ip_tables: (C) 2000-2006 Netfilter Core Team
TCP westwood registered
NET: Registered protocol family 17
Bridge firewalling registered
802.1Q VLAN Support v1.8 Ben Greear <greearb@candelatech.com>
All bugs added by David S. Miller <davem@redhat.com>
VFS: Mounted root (squashfs filesystem) readonly on device 31:3.
Freeing unused kernel memory: 172k freed
System Loading ...
ar71xx: pll_reg 0xb8050010: 0x110000
NET: Registered protocol family 10
lo: Disabled Privacy Extensions
tunl0: Disabled Privacy Extensions
ADDRCONF(NETDEV_UP): eth0: link is not ready
device eth0 entered promiscuous mode
br-lan: starting userspace STP failed, starting kernel STP
ADDRCONF(NETDEV_UP): eth1: link is not ready
device eth1 entered promiscuous mode
ar71xx: pll_reg 0xb8050010: 0x110000
br-lan: topology change detected, propagating
br-lan: port 1(eth0) entering forwarding state
ADDRCONF(NETDEV_CHANGE): eth0: link becomes ready
Compat-wireless backport release: compat-wireless-2011-01-31-4-g86702b3
Backport based on wireless-testing.git master-2011-02-07
ar71xx: pll_reg 0xb8050014: 0x1099
br-lan: topology change detected, propagating
br-lan: port 2(eth1) entering forwarding state
ADDRCONF(NETDEV_CHANGE): eth1: link becomes ready
cfg80211: Calling CRDA to update world regulatory domain
usbcore: registered new interface driver usbfs
usbcore: registered new interface driver hub
usbcore: registered new device driver usb
cfg80211: World regulatory domain updated:
cfg80211:     (start_freq - end_freq @ bandwidth), (max_antenna_gain, max_eirp)
cfg80211:     (2402000 KHz - 2472000 KHz @ 40000 KHz), (300 mBi, 2000 mBm)
cfg80211:     (2457000 KHz - 2482000 KHz @ 20000 KHz), (300 mBi, 2000 mBm)
cfg80211:     (2474000 KHz - 2494000 KHz @ 20000 KHz), (300 mBi, 2000 mBm)
cfg80211:     (5170000 KHz - 5250000 KHz @ 40000 KHz), (300 mBi, 2000 mBm)
cfg80211:     (5735000 KHz - 5835000 KHz @ 40000 KHz), (300 mBi, 2000 mBm)
PCI: Enabling device 0000:00:13.0 (0000 -> 0002)
ath: EEPROM regdomain: 0x0
ath: EEPROM indicates default country code should be used
ath: doing EEPROM country->regdmn map search
ath: country maps to regdmn code: 0x3a
ath: Country alpha2 being used: US
ath: Regpair used: 0x3a
ieee80211 phy0: Selected rate control algorithm 'minstrel_ht'
ieee80211 phy0: Atheros AR9280 Rev:2 mem=0xb0000000, irq=48
cfg80211: Calling CRDA for country: US
PPP generic driver version 2.4.2
NET: Registered protocol family 24
ehci_hcd: USB 2.0 'Enhanced' Host Controller (EHCI) Driver
ar71xx-ehci ar71xx-ehci: Atheros AR71xx built-in EHCI controller
ar71xx-ehci ar71xx-ehci: new USB bus registered, assigned bus number 1
ar71xx-ehci ar71xx-ehci: irq 3, io mem 0x1b000000
ar71xx-ehci ar71xx-ehci: USB 2.0 started, EHCI 1.00
usb usb1: configuration #1 chosen from 1 choice
hub 1-0:1.0: USB hub found
hub 1-0:1.0: 2 ports detected
Ebtables v2.0 registered
ohci_hcd: USB 1.1 'Open' Host Controller (OHCI) Driver
ar71xx-ohci ar71xx-ohci: Atheros AR71xx built-in OHCI controller
ar71xx-ohci ar71xx-ohci: new USB bus registered, assigned bus number 2
ar71xx-ohci ar71xx-ohci: irq 14, io mem 0x1c000000
usb 1-1: new high speed USB device using ar71xx-ehci and address 2
usb usb2: configuration #1 chosen from 1 choice
hub 2-0:1.0: USB hub found
hub 2-0:1.0: 2 ports detected
i2c /dev entries driver
usbcore: registered new interface driver cdc_acm
cdc_acm: v0.26:USB Abstract Control Model driver for USB modems and ISDN adapters
usb 1-1: config 1 has an invalid interface number: 7 but max is 6
usb 1-1: config 1 has an invalid interface number: 7 but max is 6
usb 1-1: config 1 has no interface number 5
usb 1-1: configuration #1 chosen from 1 choice
usbcore: registered new interface driver usbserial
USB Serial support registered for generic
usb 2-2: new full speed USB device using ar71xx-ohci and address 2
usb 2-2: configuration #1 chosen from 1 choice
cdc_acm 2-2:1.0: ttyACM0: USB ACM device
usbcore: registered new interface driver usbserial_generic
usbserial: USB Serial Driver core
usb 1-1: bad CDC descriptors
usb 1-1: bad CDC descriptors
usb 1-1: bad CDC descriptors
usb 1-1: bad CDC descriptors
usb 1-1: bad CDC descriptors
eth2: register 'cdc_ether' at usb-ar71xx-ehci-1, CDC Ethernet Device, 00:a0:c6:00:00:00
usbcore: registered new interface driver cdc_ether
USB Serial support registered for GSM modem (1-port)
option 1-1:1.0: GSM modem (1-port) converter detected
usb 1-1: GSM modem (1-port) converter now attached to ttyUSB0
option 1-1:1.1: GSM modem (1-port) converter detected
usb 1-1: GSM modem (1-port) converter now attached to ttyUSB1
option 1-1:1.2: GSM modem (1-port) converter detected
usb 1-1: GSM modem (1-port) converter now attached to ttyUSB2
option 1-1:1.3: GSM modem (1-port) converter detected
usb 1-1: GSM modem (1-port) converter now attached to ttyUSB3
option 1-1:1.4: GSM modem (1-port) converter detected
usb 1-1: GSM modem (1-port) converter now attached to ttyUSB4
usbcore: registered new interface driver option
option: v0.7.2:USB Driver for GSM modems
Hello adxl34x_i2c_init
adxl34x_i2c_probe...
adxl34x_i2c_probe...i2c_check_functionality(client->adapter, I2C_FUNC_SMBUS_READ_I2C_BLOCK) return 1
adxl34x_probe successful...
leave adxl34x_i2c_probe...
cfg80211: Regulatory domain changed to country: US
cfg80211:     (start_freq - end_freq @ bandwidth), (max_antenna_gain, max_eirp)
cfg80211:     (2402000 KHz - 2472000 KHz @ 40000 KHz), (300 mBi, 2700 mBm)
cfg80211:     (5170000 KHz - 5250000 KHz @ 40000 KHz), (300 mBi, 1700 mBm)
cfg80211:     (5250000 KHz - 5330000 KHz @ 40000 KHz), (300 mBi, 2000 mBm)
cfg80211:     (5490000 KHz - 5600000 KHz @ 40000 KHz), (300 mBi, 2000 mBm)
cfg80211:     (5650000 KHz - 5710000 KHz @ 40000 KHz), (300 mBi, 2000 mBm)
cfg80211:     (5735000 KHz - 5835000 KHz @ 40000 KHz), (300 mBi, 3000 mBm)
*MHX ar8216_config_init() : eth0: AR8316 PHY driver attached.
swconfig: switch_register()ed. Switch name:Atheros AR8316; eth0. Netdev name:eth0
br-lan: no IPv6 routers present

* Swtich Port0 Status = 0x0000007e
* Swtich Port0 Control = 0x00004104
* Swtich Port0 Port-based VLAN Register = 0x00000000

* Swtich Port1 Status = 0x00000200
* Swtich Port1 Control = 0x00004104
* Swtich Port1 Port-based VLAN Register = 0x00000000

* Swtich Port2 Status = 0x00000f4e
* Swtich Port2 Control = 0x00004104
* Swtich Port2 Port-based VLAN Register = 0x00000000

* Swtich Port3 Status = 0x00000f4d
* Swtich Port3 Control = 0x00004104
* Swtich Port3 Port-based VLAN Register = 0x00000000

* Swtich Port4 Status = 0x00000200
* Swtich Port4 Control = 0x00004104
* Swtich Port4 Port-based VLAN Register = 0x00000000

* Swtich Port5 Status = 0x0000034d
* Swtich Port5 Control = 0x00004104
* Swtich Port5 Port-based VLAN Register = 0x00000000
device eth2 entered promiscuous mode
br-wan2: port 1(eth2) entering forwarding state
eth0: no IPv6 routers present

* Swtich Port0 Status = 0x0000007e
* Swtich Port0 Control = 0x00004104
* Swtich Port0 Port-based VLAN Register = 0x00000000

* Swtich Port1 Status = 0x00000200
* Swtich Port1 Control = 0x00004104
* Swtich Port1 Port-based VLAN Register = 0x00000000

* Swtich Port2 Status = 0x00000f4e
* Swtich Port2 Control = 0x00004104
* Swtich Port2 Port-based VLAN Register = 0x00000000

* Swtich Port3 Status = 0x00000f4d
* Swtich Port3 Control = 0x00004104
* Swtich Port3 Port-based VLAN Register = 0x00000000

* Swtich Port4 Status = 0x00000200
* Swtich Port4 Control = 0x00004104
* Swtich Port4 Port-based VLAN Register = 0x00000000

* Swtich Port5 Status = 0x0000034d
* Swtich Port5 Control = 0x00004104
* Swtich Port5 Port-based VLAN Register = 0x00000000

* Swtich Port0 Status = 0x0000007e
* Swtich Port0 Control = 0x00004104
* Swtich Port0 Port-based VLAN Register = 0x001e0001

* Swtich Port1 Status = 0x00000200
* Swtich Port1 Control = 0x00004104
* Swtich Port1 Port-based VLAN Register = 0x001d0001

* Swtich Port2 Status = 0x00000f4e
* Swtich Port2 Control = 0x00004104
* Swtich Port2 Port-based VLAN Register = 0x001b0001
eth1: no IPv6 routers present

* Swtich Port3 Status = 0x00000f4d
* Swtich Port3 Control = 0x00004104
* Swtich Port3 Port-based VLAN Register = 0x00170001

* Swtich Port4 Status = 0x00000200
* Swtich Port4 Control = 0x00004104
* Swtich Port4 Port-based VLAN Register = 0x000f0001

* Swtich Port5 Status = 0x0000034d
* Swtich Port5 Control = 0x00004104
* Swtich Port5 Port-based VLAN Register = 0x00000000
bwmode modify request:  0
ADDRCONF(NETDEV_UP): wlan0: link is not ready
device wlan0 entered promiscuous mode
br-lan: topology change detected, sending tcn bpdu
br-lan: port 3(wlan0) entering forwarding state
device wlan0 left promiscuous mode
br-lan: port 3(wlan0) entering disabled state
device wlan0 entered promiscuous mode
br-lan: topology change detected, sending tcn bpdu
br-lan: port 3(wlan0) entering forwarding state
txaggr modify request:  1
eth2: no IPv6 routers present
br-wan2: no IPv6 routers present
wlan0: no IPv6 routers present
process `snmpd' is using obsolete setsockopt SO_BSDCOMPAT
ar71xx-wdt: enabling watchdog timer
usb 1-1: USB disconnect, address 2
option: option_instat_callback: error -143
option1 ttyUSB0: GSM modem (1-port) converter now disconnected from ttyUSB0
option 1-1:1.0: device disconnected
option1 ttyUSB1: GSM modem (1-port) converter now disconnected from ttyUSB1
option 1-1:1.1: device disconnected
option1 ttyUSB2: GSM modem (1-port) converter now disconnected from ttyUSB2
option 1-1:1.2: device disconnected
option1 ttyUSB3: GSM modem (1-port) converter now disconnected from ttyUSB3
option 1-1:1.3: device disconnected
option1 ttyUSB4: GSM modem (1-port) converter now disconnected from ttyUSB4
option 1-1:1.4: device disconnected
eth2: unregister 'cdc_ether' usb-ar71xx-ehci-1, CDC Ethernet Device
br-wan2: port 1(eth2) entering disabled state
device eth2 left promiscuous mode
br-wan2: port 1(eth2) entering disabled state
usb 1-1: new high speed USB device using ar71xx-ehci and address 4
usb 1-1: config 1 has an invalid interface number: 7 but max is 6
usb 1-1: config 1 has an invalid interface number: 7 but max is 6
usb 1-1: config 1 has no interface number 5
usb 1-1: configuration #1 chosen from 1 choice
usb 1-1: bad CDC descriptors
option 1-1:1.0: GSM modem (1-port) converter detected
usb 1-1: GSM modem (1-port) converter now attached to ttyUSB0
usb 1-1: bad CDC descriptors
option 1-1:1.1: GSM modem (1-port) converter detected
usb 1-1: GSM modem (1-port) converter now attached to ttyUSB1
usb 1-1: bad CDC descriptors
option 1-1:1.2: GSM modem (1-port) converter detected
usb 1-1: GSM modem (1-port) converter now attached to ttyUSB2
usb 1-1: bad CDC descriptors
option 1-1:1.3: GSM modem (1-port) converter detected
usb 1-1: GSM modem (1-port) converter now attached to ttyUSB3
usb 1-1: bad CDC descriptors
option 1-1:1.4: GSM modem (1-port) converter detected
usb 1-1: GSM modem (1-port) converter now attached to ttyUSB4
eth2: register 'cdc_ether' at usb-ar71xx-ehci-1, CDC Ethernet Device, 00:a0:c6:00:00:00
root@VIP4G:~# device eth2 entered promiscuous mode
br-wan2: port 1(eth2) entering forwarding state
eth2: no IPv6 routers present


Correction:
----------------->ar8216_probe()
	|-------->ag71xx_phy_connect_multi() ---------(call back)------->
			|						|-------->ar8216_config_init()------------->register_switch()
			|					        | 			      \------------>ar8316_hw_init()
			|<----------------------------------------------|
June 13,2013
eval前不能使用local,否则不起作用。
network config file: the 'ifname' option can NOT have duplicated device names. And can not contain blank spaces before device names.

June 11, 2013
The build and target dirs must be COMPLETELY deleted after a period of time. The OpenWRT dependency check is not good enough to update the old binaries with the latested source files.

Jun 7,2013
Port-base VLAN(802.1Q_MODE=00): 
1. Set the Port-based VLAN Register(0x0*08)'s PORT_VID_MEM only. Don't need to set up the VLAN Table.
2. PORT_VID seems doesn't matter.
802.1Q(802.1Q_MODE=10 or 11): 
1. DO NOT need to set the Port-based VLAN Register(0x0*08)'s PORT_VID_MEM. Can be kept the default values, which is forwarding among all ports except itself.
2. DO NOT need to set PORT_VID. Can be kept the devault falues of 0x01.
3. Only need to set up the VLAN Table by register 0x44 and 0x40, VID_MEM.


When use 802.1Q. eth0 can NOT be EXPLICITLY used as an interface. Following config works. Note the lan is removed:
config 'interface' 'loopback'
        option 'ifname' 'lo'
        option 'proto' 'static'
        option 'ipaddr' '127.0.0.1'
        option 'netmask' '255.0.0.0'

#config 'interface' 'lan'
#       option 'type' 'bridge'
#       option 'proto' 'static'
#       option 'ipaddr' '192.168.168.1'
#       option 'netmask' '255.255.255.0'
#       option 'stp' 'off'
#       option 'ifname' 'eth0'
#       option 'bridge_wan' '0'

config 'interface' 'lan_1'
        option 'type' 'bridge'
        option 'proto' 'static'
        option 'ipaddr' '192.168.100.1'
        option 'netmask' '255.255.255.0'
        option 'stp' 'off'
        option 'ifname' 'eth0.10'

config 'interface' 'lan_2'
        option 'type' 'bridge'
        option 'proto' 'static'
        option 'ipaddr' '192.168.200.1'
        option 'netmask' '255.255.255.0'
        option 'stp' 'off'
        option 'ifname' 'eth0.20'

config 'interface' 'wan2'
        option 'ifname' 'eth2'
        option 'type' 'bridge'
        option 'proto' 'dhcp'
        option 'stp' 'off'

config 'switch'
        option 'name' 'eth0'
        option 'reset' '1'
        option 'enable_vlan' '1'

config 'switch_vlan' 'vlan1'
        option 'device' 'eth0'
        option 'vlan' '10'
        option 'ports' '0t 1 2'
config 'switch_vlan' 'vlan2'
        option 'device' 'eth0'
        option 'vlan' '20'
        option 'ports' '0t 3 4'

config 'interface' 'wan'
        option 'ifname' 'eth1'
        option 'type' 'bridge'
        option 'proto' 'dhcp'


June 6, 2013
"LAN DNS Servers" in LAN page is set to 8.8.8.8
"WAN DNS Servers" in WAN page is set to 192.168.1.30 and 8.8.4.4. Then in etc/config/network

config 'interface' 'lan'
        option 'type' 'bridge'
        option 'proto' 'static'
        option 'ipaddr' '192.168.168.1'
        option 'netmask' '255.255.255.0'
        option 'stp' 'on'
        option 'gateway' ''
        option 'ifname' 'eth0'
        option 'bridge_wan' '0'
        option 'dns' ' 8.8.8.8'

config 'interface' 'wan'
        option 'ifname' 'eth1'
        option 'type' 'bridge'
        option 'proto' 'static'
        option 'ipaddr' '192.168.1.168'
        option 'netmask' '255.255.255.0'
        option 'gateway' '192.168.1.1'
        option 'dns' '192.168.1.30 8.8.4.4'

It they seem have the same functionality:
root@VIP4G:~# cat /etc/resolv.conf 
nameserver 8.8.8.8
nameserver 192.168.1.30
nameserver 8.8.4.4
root@VIP4G:~# cat /tmp/resolv.conf
search lan
nameserver 127.0.0.1
root@VIP4G:~# cat /tmp/resolv.conf.auto 
nameserver 8.8.8.8
nameserver 192.168.1.30
nameserver 8.8.4.4


May 30,2013
A workable test:
1. Config file
config 'interface' 'loopback'
	option 'ifname' 'lo'
	option 'proto' 'static'
	option 'ipaddr' '127.0.0.1'
	option 'netmask' '255.0.0.0'

config 'interface' 'lan_1'
	option 'type' 'bridge'
	option 'proto' 'static'
	option 'ipaddr' '192.168.168.1'
	option 'netmask' '255.255.255.0'
	option 'stp' 'off'
	option 'ifname' 'eth0.1'
	option 'bridge_wan' '0'
	option 'gateway' ''
	option 'dns' ''

config interface lan_2
	option type bridge
	option proto static
	option ipaddr 192.168.169.1
	option netmask 255.255.255.0
	option ifname eth0.2
	option 'stp' 'off'

config 'interface' 'wan2'
	option 'ifname' 'eth2'
	option 'type' 'bridge'
	option 'proto' 'dhcp'
	option 'stp' 'off'
	option 'dns' ''

config 'interface' 'wan'
	option 'ifname' 'eth1'
	option 'type' 'bridge'
	option 'proto' 'dhcp'
	option 'dns' ''

config switch eth0
	option enable 1
	option enable_vlan 1
	option reset 1
	option name switch0
	
config switch_vlan eth0_0
	option device	switch0
	option vlan 	1
	option ports	"0t 1 2"
	
config switch_vlan eth0_1
	option device 	switch0
	option vlan 	2
	option ports	"0t 3 4"

2. Reboot and manually load VLAN parameters:
root@VIP4G:~# swconfig dev eth0 load network
root@VIP4G:~# swconfig dev eth0 show
Global attributes:
        enable_vlan: 1
Port 0:
        pvid: 0
Port 1:
        pvid: 1
Port 2:
        pvid: 1
Port 3:
        pvid: 2
Port 4:
        pvid: 2
VLAN 0:
        pvid: 0
        ports: 
VLAN 1:
        pvid: 1
        ports: 0t 1 2 
VLAN 2:
        pvid: 2
        ports: 0t 3 4 
VLAN 3:
        pvid: 3
        ports: 
VLAN 4:
        pvid: 4
        ports: 
VLAN 5:
        pvid: 5
        ports: 
VLAN 6:
        pvid: 6
        ports: 
VLAN 7:
        pvid: 7
        ports: 

root@VIP4G:~# dmesg
......
        ***MH ar8216_hw_apply() is called 
        *** *** MH AR8316 Port0 Status = 7e
        *** *** MH AR8316 Port0 Control = 4204
        *** *** MH AR8316 Port0 Port-based VLAN Register = c01e0000
        *** *** MH AR8316 Port1 Status = 200
        *** *** MH AR8316 Port1 Control = 4104
        *** *** MH AR8316 Port1 Port-based VLAN Register = c0050001
        *** *** MH AR8316 Port2 Status = f4e
        *** *** MH AR8316 Port2 Control = 4104
        *** *** MH AR8316 Port2 Port-based VLAN Register = c0030001
        *** *** MH AR8316 Port3 Status = 200
        *** *** MH AR8316 Port3 Control = 4104
        *** *** MH AR8316 Port3 Port-based VLAN Register = c0110002
        *** *** MH AR8316 Port4 Status = 200
        *** *** MH AR8316 Port4 Control = 4104
        *** *** MH AR8316 Port4 Port-based VLAN Register = c0090002
        *** *** MH AR8316 Port5 Status = 34d
        *** *** MH AR8316 Port5 Control = 4104
        *** *** MH AR8316 Port5 Port-based VLAN Register = c0000000
        ******MH AR8316 Reg8 (PowerOnStrapping) = 0x81461bea
        ******MH AR8316 Reg24(MAC0.1.2.3) = 0
        ******MH AR8316 Reg78(CPU Port) = 1f0
        ***MH ar8216_get(_vlan)_ports() is called. 
        ***MH ar8216_get(_vlan)_ports() is called. 
        ***MH ar8216_get(_vlan)_ports() is called. 
        ***MH ar8216_get(_vlan)_ports() is called. 
        ***MH ar8216_get(_vlan)_ports() is called. 
        ***MH ar8216_get(_vlan)_ports() is called. 
        ***MH ar8216_get(_vlan)_ports() is called. 
        ***MH ar8216_get(_vlan)_ports() is called. 
br-wan2: no IPv6 routers present
eth2: no IPv6 routers present

3. Test the 168 segment: The ping works well to a 192.168.168.100 PC on Port2
root@VIP4G:~# ping 192.168.168.100&
root@VIP4G:~# tcpdump -envxi eth0		// We see the eth0 sends out a VLAN1 packet
tcpdump: WARNING: eth0: no IPv4 address assigned
tcpdump: listening on eth0, link-type EN10MB (Ethernet), capture size 96 bytes
10:57:03.090960 00:0f:92:00:6f:6e > ff:ff:ff:ff:ff:ff, ethertype 802.1Q (0x8100), length 46: vlan 1, p 0, ethertype ARP, Ethernet (len 6), IPv4 (len 4), Request who-has 192.168.168.100 tell 192.168.168.1, leng8
        0x0000:  0001 0806 0001 0800 0604 0001 000f 9200
        0x0010:  6f6e c0a8 a801 0000 0000 0000 c0a8 a864
10:57:04.090993 00:0f:92:00:6f:6e > ff:ff:ff:ff:ff:ff, ethertype 802.1Q (0x8100), length 46: vlan 1, p 0, ethertype ARP, Ethernet (len 6), IPv4 (len 4), Request who-has 192.168.168.100 tell 192.168.168.1, leng8
        0x0000:  0001 0806 0001 0800 0604 0001 000f 9200
        0x0010:  6f6e c0a8 a801 0000 0000 0000 c0a8 a864
10:57:05.110952 00:0f:92:00:6f:6e > ff:ff:ff:ff:ff:ff, ethertype 802.1Q (0x8100), length 46: vlan 1, p 0, ethertype ARP, Ethernet (len 6), IPv4 (len 4), Request who-has 192.168.168.100 tell 192.168.168.1, leng8
        0x0000:  0001 0806 0001 0800 0604 0001 000f 9200
        0x0010:  6f6e c0a8 a801 0000 0000 0000 c0a8 a864

root@VIP4G:~# tcpdump -envxi eth0.1		// eth0.1 has no vlan tag to send out to physical ports
tcpdump: WARNING: eth0.1: no IPv4 address assigned
tcpdump: listening on eth0.1, link-type EN10MB (Ethernet), capture size 96 bytes
10:57:53.160939 00:0f:92:00:6f:6e > ff:ff:ff:ff:ff:ff, ethertype ARP (0x0806), length 42: Ethernet (len 6), IPv4 (len 4), Request who-has 192.168.168.100 tell 192.168.168.1, length 28
        0x0000:  0001 0800 0604 0001 000f 9200 6f6e c0a8
        0x0010:  a801 0000 0000 0000 c0a8 a864
10:57:55.161005 00:0f:92:00:6f:6e > ff:ff:ff:ff:ff:ff, ethertype ARP (0x0806), length 42: Ethernet (len 6), IPv4 (len 4), Request who-has 192.168.168.100 tell 192.168.168.1, length 28
        0x0000:  0001 0800 0604 0001 000f 9200 6f6e c0a8
        0x0010:  a801 0000 0000 0000 c0a8 a864
10:57:56.160938 00:0f:92:00:6f:6e > ff:ff:ff:ff:ff:ff, ethertype ARP (0x0806), length 42: Ethernet (len 6), IPv4 (len 4), Request who-has 192.168.168.100 tell 192.168.168.1, length 28
        0x0000:  0001 0800 0604 0001 000f 9200 6f6e c0a8
        0x0010:  a801 0000 0000 0000 c0a8 a864

root@VIP4G:~# tcpdump -envxi eth0.2		// nothing can be seen on eth0.2
tcpdump: WARNING: eth0.2: no IPv4 address assigned
tcpdump: listening on eth0.2, link-type EN10MB (Ethernet), capture size 96 bytes

4. Test the 169 segment: The ping works well to a 192.168.169.100 PC on Port4
root@VIP4G:~# ping 192.168.169.100 &
root@VIP4G:~# tcpdump -envxi eth0  		// The VLAN tag is 2
tcpdump: WARNING: eth0: no IPv4 address assigned
tcpdump: listening on eth0, link-type EN10MB (Ethernet), capture size 96 bytes
11:02:55.342580 00:0f:92:00:6f:6e > 00:23:5a:1a:f0:c9, ethertype 802.1Q (0x8100), length 46: vlan 2, p 0, ethertype ARP, Ethernet (len 6), IPv4 (len 4), Request who-has 192.168.169.100 tell 192.168.169.1, leng8
        0x0000:  0002 0806 0001 0800 0604 0001 000f 9200
        0x0010:  6f6e c0a8 a901 0000 0000 0000 c0a8 a964
11:02:55.364297 00:0f:92:00:6f:6e > 00:23:5a:1a:f0:c9, ethertype 802.1Q (0x8100), length 102: vlan 2, p 0, ethertype IPv4, (tos 0x0, ttl 64, id 0, offset 0, flags [DF], proto ICMP (1), length 84)
    192.168.169.1 > 192.168.169.100: ICMP echo request, id 30659, seq 110, length 64
        0x0000:  0002 0800 4500 0054 0000 4000 4001 66f2
        0x0010:  c0a8 a901 c0a8 a964 0800 ab6b 77c3 006e
        0x0020:  7834 5c2e 0000 0000 0000 0000 0000 0000
        0x0030:  0000 0000 0000 0000 0000 0000 0000 0000
        0x0040:  0000 0000 0000 0000 0000 0000 0000 0000
11:02:56.342571 00:0f:92:00:6f:6e > 00:23:5a:1a:f0:c9, ethertype 802.1Q (0x8100), length 46: vlan 2, p 0, ethertype ARP, Ethernet (len 6), IPv4 (len 4), Request who-has 192.168.169.100 tell 192.168.169.1, leng8
        0x0000:  0002 0806 0001 0800 0604 0001 000f 9200
        0x0010:  6f6e c0a8 a901 0000 0000 0000 c0a8 a964
11:02:56.369530 00:0f:92:00:6f:6e > 00:23:5a:1a:f0:c9, ethertype 802.1Q (0x8100), length 102: vlan 2, p 0, ethertype IPv4, (tos 0x0, ttl 64, id 0, offset 0, flags [DF], proto ICMP (1), length 84)
    192.168.169.1 > 192.168.169.100: ICMP echo request, id 30659, seq 111, length 64
        0x0000:  0002 0800 4500 0054 0000 4000 4001 66f2
        0x0010:  c0a8 a901 c0a8 a964 0800 54a6 77c3 006f
        0x0020:  7843 b2e3 0000 0000 0000 0000 0000 0000
        0x0030:  0000 0000 0000 0000 0000 0000 0000 0000
        0x0040:  0000 0000 0000 0000 0000 0000 0000 0000
root@VIP4G:~# tcpdump -envxi eth0.1		// eth0.1 has nothing on it
tcpdump: WARNING: eth0.1: no IPv4 address assigned
tcpdump: listening on eth0.1, link-type EN10MB (Ethernet), capture size 96 bytes

root@VIP4G:~# tcpdump -envxi eth0.2		// no VLAN tag when sent out from this port
tcpdump: WARNING: eth0.2: no IPv4 address assigned
tcpdump: listening on eth0.2, link-type EN10MB (Ethernet), capture size 96 bytes
11:04:13.422577 00:0f:92:00:6f:6e > ff:ff:ff:ff:ff:ff, ethertype ARP (0x0806), length 42: Ethernet (len 6), IPv4 (len 4), Request who-has 192.168.169.100 tell 192.168.169.1, length 28
        0x0000:  0001 0800 0604 0001 000f 9200 6f6e c0a8
        0x0010:  a901 0000 0000 0000 c0a8 a964
11:04:14.422573 00:0f:92:00:6f:6e > ff:ff:ff:ff:ff:ff, ethertype ARP (0x0806), length 42: Ethernet (len 6), IPv4 (len 4), Request who-has 192.168.169.100 tell 192.168.169.1, length 28
        0x0000:  0001 0800 0604 0001 000f 9200 6f6e c0a8
        0x0010:  a901 0000 0000 0000 c0a8 a964
11:04:16.422581 00:0f:92:00:6f:6e > ff:ff:ff:ff:ff:ff, ethertype ARP (0x0806), length 42: Ethernet (len 6), IPv4 (len 4), Request who-has 192.168.169.100 tell 192.168.169.1, length 28
        0x0000:  0001 0800 0604 0001 000f 9200 6f6e c0a8
        0x0010:  a901 0000 0000 0000 c0a8 a964
11:04:17.422620 00:0f:92:00:6f:6e > ff:ff:ff:ff:ff:ff, ethertype ARP (0x0806), length 42: Ethernet (len 6), IPv4 (len 4), Request who-has 192.168.169.100 tell 192.168.169.1, length 28
        0x0000:  0001 0800 0604 0001 000f 9200 6f6e c0a8
        0x0010:  a901 0000 0000 0000 c0a8 a964

5. NOTE:
	5.1 Linux OS has default VLAN ID from 1,2,3... but this can be set by vconfig command. This must match the etc/config/network file. This can be checked by /proc/net/vlan/config file. Example, this config file works too:
config 'interface' 'lan_1'
        option 'type' 'bridge'
        option 'proto' 'static'
        option 'ipaddr' '192.168.168.1'
        option 'netmask' '255.255.255.0'
        option 'stp' 'off'
        option 'ifname' 'eth0.3'	// Must match the 'vlan' option in 'switch_vlan'
        option 'bridge_wan' '0'
        option 'gateway' ''
        option 'dns' ''

config interface lan_2
        option type bridge
        option proto static
        option ipaddr 192.168.169.1
        option netmask 255.255.255.0
        option ifname eth0.5		// Must match the 'vlan' option in 'switch_vlan'
        option 'stp' 'off'

config switch eth0
        option enable 1
        option enable_vlan 1
        option reset 1
        option name switch0

config switch_vlan eth0_0
        option device   switch0
        option vlan     3		// Must match the 'ifname' option in 'interface'
        option ports    "0t 1 2"

config switch_vlan eth0_1
        option device   switch0
        option vlan     5		// Must match the 'ifname' option in 'interface'
        option ports    "0t 3 4"


May 29,2013
The phy address doesn't matter for switch. IN our case if the switch is attached to phy_addr=1, make sure all the RELEVANT code be changed to phy_addr == 1 in ar8216.Example:
ar8216_read_status(struct phy_device *phydev)
{
	struct ar8216_priv *priv = phydev->priv;

        int ret; 
        /////----MHX if (phydev->addr != 0) { 
        if (phydev->addr != 1) {     // if we use phy_addr =1 because phy_addr=0 is floating and can't be detected by driver (no transformer attached?)
                return genphy_read_status(phydev); 
        } 

The port0 of ar8316 works in PHY mode to AR7130's MAC0. No matter if a cable is plugged in any of the ports, the CPU ALWAYS can see the switch chip on PHY1 so the link is always on like below:
root@VIP4G:~# ethtool eth0
Settings for eth0:
        Supported ports: [ ]
        Supported link modes:   1000baseT/Full 
        Supported pause frame use: No
        Supports auto-negotiation: No
        Advertised link modes:  1000baseT/Full 
        Advertised pause frame use: No
        Advertised auto-negotiation: No
        Speed: 1000Mb/s
        Duplex: Full
        Port: MII
        PHYAD: 1
        Transceiver: external
        Auto-negotiation: on
        Current message level: 0x000000ff (255)
                               drv probe link timer ifdown ifup rx_err tx_err
        Link detected: yes
root@VIP4G:~# 



May 28,2013
#define VIP4G_LAN_PHYMASK	(BIT(1)|BIT(2)|BIT(3)). In ar8216.c, return directly (no write to any ar8316 registers). This will keep all the Bootloader configuration.
All 3 ports work.

May 24,2013
WIth mask=0x2 and  if (pdev->addr != 1) { //addr0 is not connected (floating). External PHY addrs start from 1.

---------Bootup message:

spi0.0: no WRT160NL signature found
Creating 5 MTD partitions on "spi0.0":
0x000000000000-0x000000040000 : "u-boot"
0x000000040000-0x000000080000 : "params"
0x000000080000-0x000000280000 : "kernel"
0x000000280000-0x000000e00000 : "rootfs"
mtd: partition "rootfs" set to be root filesystem
0x000000e00000-0x000001000000 : "rootfs_data"
---MH ar8216_probe() Atheros device probed [ver=0, rev=77, phy_ctrl=1000, phy_status=7949, phy_id=004dd041]
---MH ar8216_mii_read(): Reg0=1001
---MH ar8216_probe() Atheros device probed [ver=0, rev=77, phy_ctrl=1000, phy_status=796d, phy_id=004dd041]
---MH ar8216_mii_read(): Reg0=1001
---MH ar8216_probe() Atheros device probed [ver=0, rev=77, phy_ctrl=1000, phy_status=7949, phy_id=004dd041]
---MH ar8216_mii_read(): Reg0=1001
---MH ar8216_probe() Atheros device probed [ver=0, rev=77, phy_ctrl=1000, phy_status=796d, phy_id=004dd041]
---MH ar8216_mii_read(): Reg0=1001
ag71xx_mdio: probed
eth0: Atheros AG71xx at 0xb9000000, irq 4
eth0: PHY found at ag71xx-mdio:01, uid=004dd041, mask=0x2
---MH ar8216_mii_read(): Reg0=1001
---MH ar8216_config_init() : eth0: AR8316 PHY driver attached.
MH swconfig: switch_register ed. Switch name:Atheros AR8316; eth0. Netdev name:eth0
---MH ar8216_mii_read(): Reg8=12e1bea
---MH ar8216_mii_write(): Reg8 is set to 0x81461bea
---MH ar8216_mii_write(): Reg38 is set to 0xc000050e
---MH AR8316 HW initialized successfully. Registers:
---MH ar8216_mii_read(): Reg8=81461bea
        ***MH AR8316 Reg8 (PowerOnStrapping) changed from 0x12e1bea to 0x81461bea
---MH ar8216_mii_read(): Reg24=0
        ***MH AR8316 Reg24(MAC0.1.2.3) = 0
---MH ar8216_mii_read(): Reg78=f0
---MH ar8216_mii_write(): Reg78 is set to 0x1f0
---MH ar8216_mii_read(): Reg78=1f0
        ***MH AR8316 Reg78(CPU Port) = 1f0
---MH ar8216_mii_read(): Reg100=7e
        ***MH AR8316 Reg100(Port0Stat) = 7e
---MH ar8216_mii_read(): Reg104=6004
        ***MH AR8316 Reg104(Port0Ctrl) = 6004
---MH ar8216_mii_read(): Reg300=200
        ***MH AR8316 Reg300(Port2Stat) = 200
---MH ar8216_mii_read(): Reg304=6004
        ***MH AR8316 Reg304(Port2Ctrl) = 6004
---MH ar8216_mii_write(): Reg104 is set to 0x4004
---MH ar8216_mii_write(): Reg108 is set to 0x0
---MH ar8216_mii_write(): Reg100 is set to 0x17e
---MH ar8216_mii_write(): Reg204 is set to 0x4004
---MH ar8216_mii_write(): Reg208 is set to 0x0
---MH ar8216_mii_write(): Reg200 is set to 0x200
---MH ar8216_mii_write(): Reg304 is set to 0x4004
---MH ar8216_mii_write(): Reg308 is set to 0x0
---MH ar8216_mii_write(): Reg300 is set to 0x200
---MH ar8216_mii_write(): Reg404 is set to 0x4004
---MH ar8216_mii_write(): Reg408 is set to 0x0
---MH ar8216_mii_write(): Reg400 is set to 0x200
---MH ar8216_mii_write(): Reg504 is set to 0x4004
---MH ar8216_mii_write(): Reg508 is set to 0x0
---MH ar8216_mii_write(): Reg500 is set to 0x200
---MH ar8216_mii_write(): Reg604 is set to 0x4004
---MH ar8216_mii_write(): Reg608 is set to 0x0
---MH ar8216_mii_write(): Reg600 is set to 0x200
---MH ar8216_mii_write(): Reg38 is set to 0xc000050e
---MH ar8216_mii_read(): Reg30=21f005ee
---MH ar8216_mii_write(): Reg30 is set to 0x21f02344
---MH ar8216_mii_write(): Reg2c is set to 0x3f003f
        ***MH ar8216_hw_apply() is called 
---MH ar8216_mii_read(): Reg40=0
---MH ar8216_mii_write(): Reg40 is set to 0x9
---MH ar8216_mii_read(): Reg104=4004
---MH ar8216_mii_write(): Reg104 is set to 0x4104
---MH ar8216_mii_read(): Reg108=0
---MH ar8216_mii_write(): Reg108 is set to 0x3e0000
---MH ar8216_mii_read(): Reg204=4004
---MH ar8216_mii_write(): Reg204 is set to 0x4104
---MH ar8216_mii_read(): Reg208=0
---MH ar8216_mii_write(): Reg208 is set to 0x10001
---MH ar8216_mii_read(): Reg304=4004
---MH ar8216_mii_write(): Reg304 is set to 0x4104
---MH ar8216_mii_read(): Reg308=0
---MH ar8216_mii_write(): Reg308 is set to 0x10002
---MH ar8216_mii_read(): Reg404=4004
---MH ar8216_mii_write(): Reg404 is set to 0x4104
---MH ar8216_mii_read(): Reg408=0
---MH ar8216_mii_write(): Reg408 is set to 0x10003
---MH ar8216_mii_read(): Reg504=4004
---MH ar8216_mii_write(): Reg504 is set to 0x4104
---MH ar8216_mii_read(): Reg508=0
---MH ar8216_mii_write(): Reg508 is set to 0x10004
---MH ar8216_mii_read(): Reg604=4004
---MH ar8216_mii_write(): Reg604 is set to 0x4104
---MH ar8216_mii_read(): Reg608=0
---MH ar8216_mii_write(): Reg608 is set to 0x10005
eth1: Atheros AG71xx at 0xba000000, irq 5
eth1: PHY found at ag71xx-mdio:04, uid=004dd041, mask=0x10
---MH ar8216_mii_read(): Reg0=1001
---MH ar8216_config_init() : eth1: AR8316 PHY driver attached.
---MH ar8216_config_init() : pdev->addr=4. Don't register switch and return directly
IMQ driver loaded successfully.
        Hooking IMQ before NAT on PREROUTING.
        Hooking IMQ after NAT on POSTROUTING.
Atheros AR71xx hardware watchdog driver version 0.1.0
GACT probability on
netem: version 1.2
u32 classifier
    Performance counters on
    input device check on 
    Actions configured 
Netfilter messages via NETLINK v0.30.
nf_conntrack version 0.5.0 (958 buckets, 3832 max)

----------After bootup, use swconfig command:
root@VIP4G:~# 
root@VIP4G:~# swconfig dev eth0 load network
---MH ar8216_mii_write(): Reg104 is set to 0x4004
---MH ar8216_mii_write(): Reg108 is set to 0x0
---MH ar8216_mii_write(): Reg100 is set to 0x17e
---MH ar8216_mii_write(): Reg204 is set to 0x4004
---MH ar8216_mii_write(): Reg208 is set to 0x0
---MH ar8216_mii_write(): Reg200 is set to 0x200
---MH ar8216_mii_write(): Reg304 is set to 0x4004
---MH ar8216_mii_write(): Reg308 is set to 0x0
---MH ar8216_mii_write(): Reg300 is set to 0x200
---MH ar8216_mii_write(): Reg404 is set to 0x4004
---MH ar8216_mii_write(): Reg408 is set to 0x0
---MH ar8216_mii_write(): Reg400 is set to 0x200
---MH ar8216_mii_write(): Reg504 is set to 0x4004
---MH ar8216_mii_write(): Reg508 is set to 0x0
---MH ar8216_mii_write(): Reg500 is set to 0x200
---MH ar8216_mii_write(): Reg604 is set to 0x4004
---MH ar8216_mii_write(): Reg608 is set to 0x0
---MH ar8216_mii_write(): Reg600 is set to 0x200
---MH ar8216_mii_write(): Reg38 is set to 0xc000050e
---MH ar8216_mii_read(): Reg30=21f02344
---MH ar8216_mii_write(): Reg30 is set to 0x21f02344
---MH ar8216_mii_write(): Reg2c is set to 0x3f003f
        ***MH ar8216_hw_apply() is called 
---MH ar8216_mii_read(): Reg40=1
---MH ar8216_mii_write(): Reg40 is set to 0x9
---MH ar8216_mii_read(): Reg104=4004
---MH ar8216_mii_write(): Reg104 is set to 0x4104
---MH ar8216_mii_read(): Reg108=0
---MH ar8216_mii_write(): Reg108 is set to 0x3e0000
---MH ar8216_mii_read(): Reg204=4004
---MH ar8216_mii_write(): Reg204 is set to 0x4104
---MH ar8216_mii_read(): Reg208=0
---MH ar8216_mii_write(): Reg208 is set to 0x10001
---MH ar8216_mii_read(): Reg304=4004
---MH ar8216_mii_write(): Reg304 is set to 0x4104
---MH ar8216_mii_read(): Reg308=0
---MH ar8216_mii_write(): Reg308 is set to 0x10002
---MH ar8216_mii_read(): Reg404=4004
---MH ar8216_mii_write(): Reg404 is set to 0x4104
---MH ar8216_mii_read(): Reg408=0
---MH ar8216_mii_write(): Reg408 is set to 0x10003
---MH ar8216_mii_read(): Reg504=4004
---MH ar8216_mii_write(): Reg504 is set to 0x4104
---MH ar8216_mii_read(): Reg508=0
---MH ar8216_mii_write(): Reg508 is set to 0x10004
---MH ar8216_mii_read(): Reg604=4004
---MH ar8216_mii_write(): Reg604 is set to 0x4104
---MH ar8216_mii_read(): Reg608=0
---MH ar8216_mii_write(): Reg608 is set to 0x10005
        ***MH ar8216_set_pvid() is called 
        ***MH ar8216_set_pvid() is called 
        ***MH ar8216_set_pvid() is called 
        ***MH ar8216_set_pvid() is called 
        ***MH ar8216_set_pvid() is called 
        ***MH ar8216_set(_vlan)_ports() is called 
        ***MH ar8216_hw_apply() is called 
---MH ar8216_mii_read(): Reg40=1
---MH ar8216_mii_write(): Reg40 is set to 0x9
---MH ar8216_mii_read(): Reg40=1
---MH ar8216_mii_write(): Reg44 is set to 0x81f
---MH ar8216_mii_write(): Reg40 is set to 0xa000a
---MH ar8216_mii_read(): Reg104=4104
---MH ar8216_mii_write(): Reg104 is set to 0x4104
---MH ar8216_mii_read(): Reg108=3e0000
---MH ar8216_mii_write(): Reg108 is set to 0xc01e000a
---MH ar8216_mii_read(): Reg204=4104
---MH ar8216_mii_write(): Reg204 is set to 0x4104
---MH ar8216_mii_read(): Reg208=10001
---MH ar8216_mii_write(): Reg208 is set to 0xc01d000a
---MH ar8216_mii_read(): Reg304=4104
---MH ar8216_mii_write(): Reg304 is set to 0x4104
---MH ar8216_mii_read(): Reg308=10002
---MH ar8216_mii_write(): Reg308 is set to 0xc01b000a
---MH ar8216_mii_read(): Reg404=4104
---MH ar8216_mii_write(): Reg404 is set to 0x4104
---MH ar8216_mii_read(): Reg408=10003
---MH ar8216_mii_write(): Reg408 is set to 0xc017000a
---MH ar8216_mii_read(): Reg504=4104
---MH ar8216_mii_write(): Reg504 is set to 0x4104
---MH ar8216_mii_read(): Reg508=10004
---MH ar8216_mii_write(): Reg508 is set to 0xc00f000a
---MH ar8216_mii_read(): Reg604=4104
---MH ar8216_mii_write(): Reg604 is set to 0x4104
---MH ar8216_mii_read(): Reg608=10005
---MH ar8216_mii_write(): Reg608 is set to 0xc0000000
root@VIP4G:~# 
 CTRL-A Z for help |115200 8N1 | NOR | Minicom 2.4    | VT102 | Online 00:04                                                                                                                                     

---------config file
root@VIP4G:~# cat /etc/config/network

config 'interface' 'loopback'
        option 'ifname' 'lo'
        option 'proto' 'static'
        option 'ipaddr' '127.0.0.1'
        option 'netmask' '255.0.0.0'

config 'interface' 'lan'
        option 'type' 'bridge'
        option 'proto' 'static'
        option 'ipaddr' '192.168.168.1'
        option 'netmask' '255.255.255.0'
        option 'stp' 'off'
        option 'ifname' 'eth0'
        option 'bridge_wan' '0'
        option 'gateway' ''
        option 'dns' ''

config 'interface' 'wan2'
        option 'ifname' 'eth2'
        option 'type' 'bridge'
        option 'proto' 'dhcp'
        option 'stp' 'off'
        option 'dns' ''

config 'interface' 'wan'
        option 'ifname' 'eth1'
        option 'type' 'bridge'
        option 'proto' 'dhcp'
        option 'dns' ''

config switch
        option enable 1
        option enable_vlan 1
        option reset 1
        option name eth0

config switch_vlan
        option device   eth0
        option vlan     10
        option ports    "0 1 2 3 4"
root@VIP4G:~# 


May 23,2013
----------------->ar8216_probe()
	|-------->ag71xx_phy_connect_multi()
	|-------->ar8216_config_init()------------->register_switch()
				         \--------->ar8316_hw_init()

Direct modification of a .patch file: You can NOT add/remove even ONE line. You can only MODIFY a line. Otherwise, example, if add one more line in 991-mh_novatel_lte.patch, this error happens:

MIPS: no machine found for id: 'VIP4G', registered machines:
                              id name
                         Generic Generic AR71xx board
                            AP81 Atheros AP81
                            AP83 Atheros AP83
				......


May 7, 2013
Coova-chille must have a WAN port READY to start.

May 2, 2013

1. /worldspot.net service : use CoovaChilli/CoovaAP/ChilliSpot in AP. Registered:jeffli@microhard
2. AuthPuppy service [ IleSansFil is an example] : use WifiDog. AuthPuppy is the next generation authentication server for Wifidog networks. This means WifiDog only works with authPuppy server.
3.www.hotspotsystem.com service : Based on ChilliSpot. Registry---UN:jeffli;PWD:microhard. Created 2nd operator on May 13. UN:microhard,PWD:microhardhotspot.


CoovaAP: is a whole complete (with Web page) that can replace all original OpenWRT pages.
CoovaChilli: no web-page, can be used in command line.

May 1,2013
Tried to Restore EEPROM file to 2 AR5414 cards with ARTMFC10.exe and failed. Tried the art-linux on the DUT to Restore EEPROM and failed. Programming EEPROM can only be performed by the Calibration in the ArtMFC, where ArtMFC will restore a default file EEPROM in R:/nOFDM/restore_mhx_5g.eep to the DUT cards before calibration.

Apr 22,2013
Apr 23 10:20:09 dansguardian[17990]: Unable to fork() any more.
Apr 23 10:20:10 dansguardian[17990]: Unable to fork() any more.
Apr 23 10:20:11 dansguardian[17990]: Unable to fork() any more.
Apr 23 10:20:12 dansguardian[17990]: Unable to fork() any more.
Apr 23 10:20:13 dansguardian[17990]: Unable to fork() any more.
Apr 23 10:20:14 dansguardian[17990]: Unable to fork() any more.
Apr 23 10:20:15 dansguardian[17990]: Error forking preforkchildren extra processes.
Apr 23 10:20:18 dansguardian[17990]: Exiting due to high failure count.
Apr 23 10:20:18 dansguardian[17990]: Main parent process exiting.
Apr 23 10:20:18 dansguardian[17990]: Exiting with error


Apr 18,2013
In networ-wan.sh, when we use 	

listedit|${interface}_dns|$SCRIPT_NAME?|$FORM_dns

to define a list edit, some variables are AUTOMATICALLY created, which we can see when viewing the source code of the page:

<tr><td width="50%">192.168.1.30</td><td><a href="/cgi-bin/webif/network-wan.sh?wan_dnsremove=192.168.1.30">Remove</a></td></tr>
<tr><td width="50%">208.67.222.222</td><td><a href="/cgi-bin/webif/network-wan.sh?wan_dnsremove=208.67.222.222">Remove</a></td></tr>
<tr><td width="100%" colspan="2"><input type="text" name="wan_dnsadd" value="" /><input type="submit" name="wan_dnssubmit" value="Add" /></td></tr>

1. eval FORM_dnsadd="\$FORM_${interface}_dnsadd". This is the "wan_dnsadd" text element in page.
2. eval FORM_dnsremove="\$FORM_${interface}_dnsremove". This is the "wan_dnsremove=208.67.222.222" hyperlink.
3. wan_dnssubmit. This is the "Add" button in page. This is a 'submit' and causes $FORM_submit NOT empty.


Apr 9, 2013
In Openwrt trunk (Barrier Breaker), how to add a new package? In https://dev.openwrt.org/wiki/GetSource, download all packages by
svn co svn://svn.openwrt.org/openwrt/packages/
 and copy its dansguardian directory to the trunc source code's package directory. 

After you have created your package/<name>/Makefile, the new package will automatically show in the menu the next time you run "make menuconfig" and if selected will be built automatically the next time "make" is run. 

Something to note in the package/dansguardian/Makefile:

define Package/dansguardian
  SECTION:=net
  DEPENDS:=+libpthread $(CXX_DEPENDS) +zlib
  CATEGORY:=Network				//This package shows up in "Network" in main 'make menuconfig' page.
  SUBMENU:=Web Servers/Proxies			//The next sub-menu is "Web Servers/Proxies"
  TITLE:=DansGuardian
  URL:=http://dansguardian.org
endef


In http://kamikaze.openwrt.org/docs/openwrt.html#x1-460002.1.2 help doc:

2.1.5 Troubleshooting

If you find your package doesn’t show up in menuconfig, try the following command to see if you get the correct description:

    TOPDIR=$PWD make -C package/<name> DUMP=1 V=99

If you’re just having trouble getting your package to compile, there’s a few shortcuts you can take. Instead of waiting for make to get to your package, you can run one of the following:

    * make package/<name>/clean V=99
    * make package/<name>/install V=99

Another nice trick is that if the source directory under build_dir/<arch> is newer than the package directory, it won’t clobber it by unpacking the sources again. If you were working on a patch you could simply edit the sources under the build_dir/<arch>/<source> directory and run the install command above, when satisfied, copy the patched sources elsewhere and diff them with the unpatched sources. A warning though - if you go modify anything under package/<name> it will remove the old sources and unpack a fresh copy.

Other useful targets include:

    * make package/<name>/prepare V=99
    * make package/<name>/compile V=99
    * make package/<name>/configure V=99

Apr 8, 2013
        uci_add "firewall" "forwarding" "forward_""$FORM_new_if_ifname""_wan2"
        uci_set "firewall" "$CONFIG_SECTION" "src" "br-""$FORM_new_if_ifname"
The "$CONFIG_SECTION"="forward_""$FORM_new_if_ifname""_wan2". If the "$FORM_new_if_ifname"=guest3, then:
	root@VIP4G:~# cat /tmp/.uci/firewall 
	firewall.forward_guest3_wan=forwarding
	firewall.forward_guest3_wan.src=br-guest3
The $CONFIG_SECTION name can't contain '-' and '_' is ok.

April 1, 2013
Thorson Pacific: PLX technical support: Terry:425-308-5199.

Mar 28, 2013
How to make a module outside of kernel sourece tree:
[Jeff@DENG0033 gadget]$ make -C /lib/modules/`uname -r`/build M=$PWD
make: Entering directory `/usr/src/kernels/2.6.34.9-69.fc13.i686.PAE'
  Building modules, stage 2.
  MODPOST 1 modules
make: Leaving directory `/usr/src/kernels/2.6.34.9-69.fc13.i686.PAE'
[Jeff@DENG0033 gadget]$ ls *.ko
net2280.ko
[Jeff@DENG0033 gadget]$ 



Feb 28,2013
Bring up ath6kl_usb.ko: After compile in /home/Jeff/Documents/Datasheet/WiFi/AR9374/COMPAT-WIRELESS/compat-wireless-ath6kl3.2.1.54, 
1.Copy the generated 3 .ko to /lib like below:
[Jeff@DENG0033 ~]$ ll /lib/modules/2.6.34.9-69.fc13.i686.PAE/updates/
total 7952
-rw-r--r-- 1 root root 2844359 Feb 28 12:32 ath6kl_usb.ko
-rw-r--r-- 1 root root 3925669 Feb 28 12:32 cfg80211.ko
-rw-r--r-- 1 root root 1364779 Feb 28 12:32 compat.ko


2.Copy the target AR9374 firmware to /lib/firmware/ath6k/AR6004 like below:
[Jeff@DENG0033 ~]$ ll /lib/firmware/ath6k/AR6004/
total 8
drwxr-xr-x 2 root root 4096 Feb 27 15:11 hw1.0
drwxr-xr-x 2 root root 4096 Feb 27 15:11 hw1.1

3. sudo depmod; modprobe ath6kl_usb; SO far if the AR9374 dongle is inserted the wlan0 interface will show up.


Download Hostapd from http://w1.fi/hostapd/ and try to Make it. Error abot NL80211 is reported. Need to download/install libnl. sudo yum install libnl and 
sudo yum install libnl-devel. The libnl-devel is important because it installs .h files that hostapd compliation needs.


Feb 11, 2013
Test Multicast between 2 PCs with 2 units working as a bridge. On the 2 PCs, all other eth devices should be disabled and a default GW should point to the working Eth port. Otherwise the multicast packets go away via other ports and IPERF cana't get connection set up.

Feb 4, 2013
A unit working as a "Repeater" also transmits its SSID, even though this SSID is set to its peer AP's SSID. It may be presumed a client PC can't see the AP's SSID and only can see the Repeater's SSID so that no confusion is made.
In repeater mode, the channel MUST be manually set to the same channel of its AP's otherwise cant associate. But in Client mode, the client can follow up AP's channel automatically.

Feb 1, 2013
Connect a Linux PC with wifi:
0. ifconfig eth1 up  //the WIFI card
1. iwlist eth1 scan : get available SSIDs
2. iwconfig eth1 essid VIP4G-repeater
3. dhclient eth1

Jan 30, 2013
[Jeff@DENG0033 art_legacy_code]$ cat /etc/xinetd.d/tftp 
# default: off
# description: The tftp server serves files using the trivial file transfer \
#	protocol.  The tftp protocol is often used to boot diskless \
#	workstations, download configuration files to network-aware printers, \
#	and to start the installation process for some operating systems.
service tftp
{
	disable	= no
	socket_type		= dgram
	protocol		= udp
	wait			= yes
	user			= root
	server			= /usr/sbin/in.tftpd
	server_args		= -s /tftp -c
	per_source		= 11
	cps			= 100 2
	flags			= IPv4
}

Change mode of /tftp directory to 666.

Disable SELinux temporarily: sudo setenforce 0.

Load kernel to 0x81000000 in uBoot: VIP4G> tftp 81000000 vmlinux-VIP4G.uImage

And boot it up: bootm 81000000. This will boot up kernel with existing FS in flash.

Jan 22,2013
Wireless WPA2 AES key process:
1. Hostapd.sh creates file /var/run/hostapd-phy0.conf and store wpa_passphrase=1234567890. "wpa_pairwise=CCMP TKIP" is also stored because in config file "option 'encryption' 'psk-mixed/tkip+aes". 
2. In ap_config.c : hostapd_setup_wpa_psk()-->hostapd_derive_psk() that uses SSID+passphrase to get a PSK value via pbkdf2_sha1() algorithm. This pbkdf2/sha1 algorithm is a hash algorithm. The same string always produces the same hash, but given a hash, it is not generally possible to determine the original string. The PSK key is PMK_LEN(32) bytes long, 256bit that is fixed. AES is a symmetric-key algorithm meaning the same key is used in both encrypting and decrypting the data. AES is a peer of TKIP.

hostapd_derive_psk()<---hostapd_setup_wpa_psk()<--hostapd_setup_bss()<--hostapd_setup_interface_complete()<--setup_interface()<---hostapd_setup_interface()<---hostapd_interface_init()<---main()



In mac80211.sh, iw dev "$ifname" encryption new_key 1 p:"$wpa_passphrase" only works in non-AP mode.

Jan 17, 2012
ART IQ_CAL_I and Q write to EEPROM issue. In art_rel24g project:
in cal_gen3.c : 
//	MpSktprintf("i_coeff = %d, q_coeff = %d\n", i_coeff, q_coeff);
    i_coeff = (i_coeff & 0x3f);
    if (iq_corr_neg == 0x0) {
        i_coeff = 0x40 - i_coeff;
    }
    q_coeff = q_coeff & 0x1f;
	// Make display compatible with art-linux
	MpSktprintf("i_coeff = %d, q_coeff = %d\n", (i_coeff & 0x20)? i_coeff - 64:i_coeff, (q_coeff & 0x10)? q_coeff-32: q_coeff);

In maui_cal.c:
//	uiPrintf("      i_coeff = %d, q_coeff = %d\n", i_coeff, q_coeff);


		// Save IQ_CAL result to EEPROM
		program_eeprom((configSetup.validInstance == 1) ? Maui_devNumArr[MODE_11a] : Maui_devNumArr[MODE_11g]);  


	   if ((CalSetup.cal_fixed_highgain[MODE_11a] != INVALID_FG) && (CalSetup.Amode|| CalSetup.enableJapanMode11aNew))

In WinCVS, Macros-->CVS-->Change CVSRoot, change it from Danial to Jeff. And then all future check-in will be from Jeff.

Dec 28,2012
Use ifconfig br-wan:0 192.168.168.111 netmask 255.255.255.0 up on VIP2 to create a virtual IP on the br-wan bridge. The ping from unit to PC works fine [note: because the same segmentation with br-lan, ping 192.168.168.100 -I br-wan must be used. Otherwise the route table gets confused] and reverse doesn't work[maybe because the same confusing route table issue.]. Change it to 192.168.168.111, a different segment, and it works fine in both directions.

Dec 17, 2012
If don't process further for guest bridges like below:

        config_cb() {                                                          
                echo "---MHX config_load paras: $0 $1 $2 $3"                   
                [ interface != "$1" -o -z "$2" ] || eval "$0 $2"               
                #if [ interface != "$1" -o -z "$2" ]; then                      
                #:                                                             
                #else                                                          
                #if [ "$2" = "loopback" -o "$2" = "lan" -o "$2" = "wan" -o "$2"
                # eval "$0 $2"                                                  
                #fi                 
                #fi                 
        }  

The guest bridges will not be created.

There must be a 'ifname' option in 'interface' section or else the eth0 and bridge will not show up:
config 'interface' 'aaa'
        option 'ifname' 'fake-dev'
        option 'type' 'bridge'
        option 'proto' 'static'
        option 'netmask' '255.255.255.0'
        option 'ipaddr' '192.168.4.1'


Dec 13,2012
lib/network/config.sh: the DEBUG switch CAN NOT be turned on!!! The bridge doesn't work if it's turned on.

Dec 10,2012
Multi-SSID work started on ar71xx_4g.

Nov 29,2012
To create a here document use the following syntax:
/usr/sbin/dnsmasq -D -y -Z -b -E -s lan -S /lan/ -l /tmp/dhcp.leases -r /tmp/resolv.conf.auto -2 'br-lan' -2 'br-wan' -2 'br-wan2' -2 'br-wlangues t' -i wlan1 --dhcp-range=192.168.3.100,192.168.3.200,255.255.255.0,1h -i br-lan --dhcp-range=192.168.1.100,192.168.1.200,255.255.255.0,1h

command <<HERE
text1
text2
testN
$varName
HERE

This type of redirection tells the shell to read input from the current source (HERE) until a line containg only word (HERE) is seen. HERE word is not subjected to variable name, parameter expansion, arithmetic expansion, pathname expansion, or command substitution. All of the lines read up to that point are then used as the standard input for a command. Files are processed in this manner are commonly called here documents. 

Nov 27,2012
Download Dansguardian from http://downloads.openwrt.org/snapshots/trunk/ar71xx/packages/. SCP it to target and run: 
root@VIP4G:/tmp# opkg install dansguardian_2.10.1.1-1_mipsel.ipk 
Installing dansguardian (2.10.1.1-2) to root...
Configuring dansguardian.
Collected errors:
 * pkg_get_installed_files: Failed to open //usr/lib/opkg/info/event_test.list: No such file or directory.
 * pkg_get_installed_files: Failed to open //usr/lib/opkg/info/VIP4G.list: No such file or directory.
root@VIP4G:/tmp# 
root@VIP4G:/tmp# dansguardian --help
Usage: dansguardian [{-c ConfigFileName|-v|-P|-h|-N|-q|-s|-r|-g}]
  -v gives the version number and build options.
  -h gives this message.
  -c allows you to specify a different configuration file location.
  -N Do not go into the background.
  -q causes DansGuardian to kill any running copy.
  -Q kill any running copy AND start a new one with current options.
  -s shows the parent process PID and exits.
  -r closes all connections and reloads config files by issuing a HUP,
     but this does not reset the maxchildren option (amongst others).
  -g gently restarts by not closing all current connections; only reloads
     filter group config files. (Issues a USR1)

Nov 20,2012
Change version information:
target/linux/ar71xx/base-files/etc/version

On target, create a shell to sync source code int PC
syncpc.sh:
#!/bin/sh
if [ $# -lt 1 ]; then
cat<<HELP
        syncpc -- sync target files to/from PC host environment

        Usage: syncpc to|co

HELP
        exit 0
fi

if [ $1 = "to" ]; then
	scp /etc/wlan-pages/wireless-n-wlan0.sh 192.168.168.100://home/Jeff/project/ar71xx_4g/package/webif/files/etc/wlan-pages/wireless-n-wlan0.sh	
	scp /www/cgi-bin/webif/status-wlan.sh 192.168.168.100://home/Jeff/project/ar71xx_4g/package/webif/files/www/cgi-bin/webif/status-wlan.sh
else if [ $1 = "co" ]; then
	scp 192.168.168.100://home/Jeff/project/ar71xx_4g/package/webif/files/etc/wlan-pages/wireless-n-wlan0.sh /etc/wlan-pages/wireless-n-wlan0.sh
	scp 192.168.168.100://home/Jeff/project/ar71xx_4g/package/webif/files/www/cgi-bin/webif/status-wlan.sh	/www/cgi-bin/webif/status-wlan.sh
     else
	echo " Error input!"
     fi
fi	


Nov 13, 2012
BL command line:
bootargs=rootfstype=squashfs,jffs2 console=ttyS0,115200 board=PB42 console_quiet=2

NFS:
1. Edit /etc/exports and add:
/tftp/nfs 192.168.168.*(sync) (rw,sync,no_root_squash)
The /tftp/nfs is copied from : home/Jeff/project/ar71xx_4g/staging_dir/target-mips_r2_uClibc-0.9.30.1/root-ar71xx

2. service nfs restart; service iptables stop //stop firewall; exportfs -av

3. In BL, set boobargs board=VIP4G root=/dev/nfs nfsroot=192.168.168.100:/tftp/nfs console=ttyS0,115200 console_quiet=2. NOTE: the board=VIP4G is important and cant be missing.
Enable NFS in make kernel_menuconfig. mount -t nfs -o nolock 192.168.168.100:/home/Jeff/project/ar71xx_4g/staging_dir/target-mips_r2_uClibc-0.9.30.1/root-ar71xx should work firstly.

It seems work by /proc/cmdline but not actually using NFS??? It seems the scripts only mount the flash fs and doesn't support NFS.

Nov 12,2012
SED 常用的 regular expression

常用的 regular expression
普通字元 	由普通字元所組成的 regular expression 其意義與原字串字面意義相同。
^字串 	限制字串必須出現於行首 。
$字串 	限制字串必須出現行尾。
. 	表示任意一字元。
[...] 	字元集合, 用以表示兩中括號間所有字元當中的任一個 ,如 [^...]表示兩中括號間所有字元以外的字元。
-& 	字元集合中可用"&"指定字元的範圍。
* 	用以形容其前的字元(或字元集合)可重覆任意多次 。
\n 	表示嵌入新行字元(imbedded new line character)。
\(...\) 	於 regular expression 中使用"\(" "\)"來括住一部份的 regular expression ; 其後可用"\1"來表示第一個被"\(" "\)"括住的部份。若 regular expression 中使用數次的"\(" "\)"來括住不同的部份 , 則依次使用"\1","\2","\3",...(最多可到"\9")。
另外 , 在不同平台上 , regular expression 會有一些不同的限制 , 詳細情況參照 appendix B。 

Nov 8, 2012
Dual SSID works by modifing config/wireless and optionally config/network. GUI needs to differentiate the 2 virtual interfaces.

Nov 2, 2012
Workable (ping) config:
config interface loopback
	option ifname	lo
	option proto	static
	option ipaddr	127.0.0.1
	option netmask	255.0.0.0

config interface lan
	option ifname	eth0
	option type	bridge
	option proto	static
	option ipaddr	192.168.168.1
	option netmask	255.255.255.0

config interface wan
	option ifname	eth1
	option proto	dhcp

config switch eth0
        option name     eth0
        option reset    1
        option enable_vlan 1

config switch_vlan
        option device   eth0
        option vlan     1
        option ports    "0 1 2 3 4"
After /etc/init.d/network restart the swconfig can't see VLAN enabled. Should manually swconfig dev eth0 load network.

Change to :
        option ipaddr   127.0.0.1
        option netmask  255.0.0.0
                                 
config interface lan             
        option ifname   eth0     
        option type     bridge
        option proto    static
        option ipaddr   192.168.168.1
        option netmask  255.255.255.0
                                     
config interface wan                 
        option ifname   eth1         
        option proto    dhcp
                            
config switch eth0          
        option name     eth0
        option reset    1   
        option enable_vlan 1
                            
config switch_vlan          
        option device   eth0
        option vlan     3   // This defines the ID field in Eth frame.
        option ports    "0t 1t 2t 3t 4t" // NOTE:0 should be UNTAGGED to ping ok.
On Port1 Wireshark can capture the 802.1q with VID=3 frame when ping from VIP4G.

option ports    "0 1t" --- No port sends out VLAN packet when pinging from VIP4G
//NOTE:port#1 is not connected in circuitry.
option ports    "0 2t" --- LAN port 1 sends out VLAN frames with VID=3
option ports    "0 3t" --- LAN port 2 sends out. Ping good via Cisco switch.
option ports    "0 4t" --- LAN port 3 sends out. Ping good via Cisco switch.
option ports    "0 5t" --- Doesn't work. Can't see the port with VID with swconfig command.


Tagged packets received on a port will be directed to the VLAN indicated by the VID contained in the packet. Untagged packets received on a port will be directed to the default port VLAN (usually called the PVID). A separate config switch_port section is required to set the default port VLAN. Like below. PVID option will show up in VID in a VLAN frame.
config 'switch_port'
    option 'port'      '3'
    option 'pvid'      '1'


Oct 30, 2012
In UBoot, MII dump <addr> <reg> command:
<addr> means the phy address 0 to 5 means port0 to port5. <reg> means standard phy registers 0-31. mii dump 0-5 1 means to show up register(status) of phy0 to phy5. In fact phy5 doesn't exist. Following is the log of the command:
VIP4G> mii dump 0-5 1
1.     (7949)                 -- PHY status register --
  (8000:0000) 1.15    =     0    100BASE-T4 able
  (4000:4000) 1.14    =     1    100BASE-X  full duplex able
  (2000:2000) 1.13    =     1    100BASE-X  half duplex able
  (1000:1000) 1.12    =     1    10 Mbps    full duplex able
  (0800:0800) 1.11    =     1    10 Mbps    half duplex able
  (0400:0000) 1.10    =     0    100BASE-T2 full duplex able
  (0200:0000) 1. 9    =     0    100BASE-T2 half duplex able
  (0100:0100) 1. 8    =     1    extended status
  (0080:0000) 1. 7    =     0    (reserved)
  (0040:0040) 1. 6    =     1    MF preamble suppression
  (0020:0000) 1. 5    =     0    A/N complete
  (0010:0000) 1. 4    =     0    remote fault
  (0008:0008) 1. 3    =     1    A/N able
  (0004:0000) 1. 2    =     0    link status
  (0002:0000) 1. 1    =     0    jabber detect
  (0001:0001) 1. 0    =     1    extended capabilities


1.     (7949)                 -- PHY status register --
  (8000:0000) 1.15    =     0    100BASE-T4 able
  (4000:4000) 1.14    =     1    100BASE-X  full duplex able
  (2000:2000) 1.13    =     1    100BASE-X  half duplex able
  (1000:1000) 1.12    =     1    10 Mbps    full duplex able
  (0800:0800) 1.11    =     1    10 Mbps    half duplex able
  (0400:0000) 1.10    =     0    100BASE-T2 full duplex able
  (0200:0000) 1. 9    =     0    100BASE-T2 half duplex able
  (0100:0100) 1. 8    =     1    extended status
  (0080:0000) 1. 7    =     0    (reserved)
  (0040:0040) 1. 6    =     1    MF preamble suppression
  (0020:0000) 1. 5    =     0    A/N complete
  (0010:0000) 1. 4    =     0    remote fault
  (0008:0008) 1. 3    =     1    A/N able
  (0004:0000) 1. 2    =     0    link status
  (0002:0000) 1. 1    =     0    jabber detect
  (0001:0001) 1. 0    =     1    extended capabilities


1.     (7949)                 -- PHY status register --
  (8000:0000) 1.15    =     0    100BASE-T4 able
  (4000:4000) 1.14    =     1    100BASE-X  full duplex able
  (2000:2000) 1.13    =     1    100BASE-X  half duplex able
  (1000:1000) 1.12    =     1    10 Mbps    full duplex able
  (0800:0800) 1.11    =     1    10 Mbps    half duplex able
  (0400:0000) 1.10    =     0    100BASE-T2 full duplex able
  (0200:0000) 1. 9    =     0    100BASE-T2 half duplex able
  (0100:0100) 1. 8    =     1    extended status
  (0080:0000) 1. 7    =     0    (reserved)
  (0040:0040) 1. 6    =     1    MF preamble suppression
  (0020:0000) 1. 5    =     0    A/N complete
  (0010:0000) 1. 4    =     0    remote fault
  (0008:0008) 1. 3    =     1    A/N able
  (0004:0000) 1. 2    =     0    link status
  (0002:0000) 1. 1    =     0    jabber detect
  (0001:0001) 1. 0    =     1    extended capabilities


1.     (7949)                 -- PHY status register --
  (8000:0000) 1.15    =     0    100BASE-T4 able
  (4000:4000) 1.14    =     1    100BASE-X  full duplex able
  (2000:2000) 1.13    =     1    100BASE-X  half duplex able
  (1000:1000) 1.12    =     1    10 Mbps    full duplex able
  (0800:0800) 1.11    =     1    10 Mbps    half duplex able
  (0400:0000) 1.10    =     0    100BASE-T2 full duplex able
  (0200:0000) 1. 9    =     0    100BASE-T2 half duplex able
  (0100:0100) 1. 8    =     1    extended status
  (0080:0000) 1. 7    =     0    (reserved)
  (0040:0040) 1. 6    =     1    MF preamble suppression
  (0020:0000) 1. 5    =     0    A/N complete
  (0010:0000) 1. 4    =     0    remote fault
  (0008:0008) 1. 3    =     1    A/N able
  (0004:0000) 1. 2    =     0    link status
  (0002:0000) 1. 1    =     0    jabber detect
  (0001:0001) 1. 0    =     1    extended capabilities


1.     (796d)                 -- PHY status register --
  (8000:0000) 1.15    =     0    100BASE-T4 able
  (4000:4000) 1.14    =     1    100BASE-X  full duplex able
  (2000:2000) 1.13    =     1    100BASE-X  half duplex able
  (1000:1000) 1.12    =     1    10 Mbps    full duplex able
  (0800:0800) 1.11    =     1    10 Mbps    half duplex able
  (0400:0000) 1.10    =     0    100BASE-T2 full duplex able
  (0200:0000) 1. 9    =     0    100BASE-T2 half duplex able
  (0100:0100) 1. 8    =     1    extended status
  (0080:0000) 1. 7    =     0    (reserved)
  (0040:0040) 1. 6    =     1    MF preamble suppression
  (0020:0020) 1. 5    =     1    A/N complete
  (0010:0000) 1. 4    =     0    remote fault
  (0008:0008) 1. 3    =     1    A/N able
  (0004:0004) 1. 2    =     1    link status
  (0002:0000) 1. 1    =     0    jabber detect
  (0001:0001) 1. 0    =     1    extended capabilities


1.     (ffff)                 -- PHY status register --
  (8000:8000) 1.15    =     1    100BASE-T4 able
  (4000:4000) 1.14    =     1    100BASE-X  full duplex able
  (2000:2000) 1.13    =     1    100BASE-X  half duplex able
  (1000:1000) 1.12    =     1    10 Mbps    full duplex able
  (0800:0800) 1.11    =     1    10 Mbps    half duplex able
  (0400:0400) 1.10    =     1    100BASE-T2 full duplex able
  (0200:0200) 1. 9    =     1    100BASE-T2 half duplex able
  (0100:0100) 1. 8    =     1    extended status
  (0080:0080) 1. 7    =     1    (reserved)
  (0040:0040) 1. 6    =     1    MF preamble suppression
  (0020:0020) 1. 5    =     1    A/N complete
  (0010:0010) 1. 4    =     1    remote fault
  (0008:0008) 1. 3    =     1    A/N able
  (0004:0004) 1. 2    =     1    link status
  (0002:0002) 1. 1    =     1    jabber detect
  (0001:0001) 1. 0    =     1    extended capabilities

Note: Current device is eth0 and Ethernet cable is connected to WAN port( port#5 and phy#4). The LinkStatus bit is set on this phy.

If we use mii device eth1, we can't get any phy information from eth1 even though phy#4 is directly connected to eth1 port of AR7161. We can only access phy4 through eth0's MII bus. WHY??? Phy4 should behave like a pure phy?

Oct 29, 2012
This is none blocking the registry of eth1 as a switch device:
mtd: partition "rootfs" set to be root filesystem
0x000000e00000-0x000001000000 : "rootfs_data"
---MH Atheros device [ver=0, rev=77, phy_id=004dd041]
---MH Atheros device [ver=0, rev=77, phy_id=004dd041]
ag71xx_mdio: probed
eth0: Atheros AG71xx at 0xb9000000, irq 4
eth0: PHY found at ag71xx-mdio:00, uid=004dd041
---MH eth0: AR8316 PHY driver attached.[BusAddr0]
---MH swconfig: switch_register ed. Switch name:Atheros AR8316; eth0. Netdev name:eth0
---MH registering switch OK!
---MH AR8316 HW initialized successfully.
eth0: connected to PHY at ag71xx-mdio:00 [uid=004dd041, driver=Atheros AR8216/AR8316]
eth1: Atheros AG71xx at 0xba000000, irq 5
eth1: PHY found at ag71xx-mdio:04, uid=004dd041
---MH eth1: AR8316 PHY driver attached.[BusAddr4]
---MH swconfig: switch_register ed. Switch name:Atheros AR8316; eth1. Netdev name:eth1
---MH registering switch OK!
eth1: connected to PHY at ag71xx-mdio:04 [uid=004dd041, driver=Atheros AR8216/AR8316]
IMQ driver loaded successfully.
        Hooking IMQ before NAT on PREROUTING.
        Hooking IMQ after NAT on POSTROUTING.
Atheros AR71xx hardware watchdog driver version 0.1.0
ar71xx-wdt: timeout=15 secs (max=25)

With a correct eth0 phy_mask = 1, the log is:
ag71xx_mdio: probed
eth0: Atheros AG71xx at 0xb9000000, irq 4
eth0: PHY found at ag71xx-mdio:00, uid=004dd041
---MH eth0: AR8316 PHY driver attached.[BusAddr0]
---MH swconfig: switch_register ed. Switch name:Atheros AR8316; eth0. Netdev name:eth0
---MH registering switch OK!
---MH AR8316 HW initialized successfully.
eth0: connected to PHY at ag71xx-mdio:00 [uid=004dd041, driver=Atheros AR8216/AR8316]
eth1: Atheros AG71xx at 0xba000000, irq 5
eth1: PHY found at ag71xx-mdio:04, uid=004dd041
---MH eth1: AR8316 PHY driver attached.[BusAddr4]
---MH return w/o registering switch
eth1: connected to PHY at ag71xx-mdio:04 [uid=004dd041, driver=Atheros AR8216/AR8316]
IMQ driver loaded successfully.
        Hooking IMQ before NAT on PREROUTING.
        Hooking IMQ after NAT on POSTROUTING.
Atheros AR71xx hardware watchdog driver version 0.1.0
ar71xx-wdt: timeout=15 secs (max=25)
GACT probability on
netem: version 1.2
u32 classifier
    Performance counters on


Oct 26, 2012
mtd: partition "rootfs" set to be root filesystem
0x000000e00000-0x000001000000 : "rootfs_data"
---MH Atheros device [ver=0, rev=77, phy_id=004dd041]
---MH Atheros device [ver=0, rev=77, phy_id=004dd041]
---MH Atheros device [ver=0, rev=77, phy_id=004dd041]
---MH Atheros device [ver=0, rev=77, phy_id=004dd041]
ag71xx_mdio: probed
eth0: Atheros AG71xx at 0xb9000000, irq 4
eth0: PHY found at ag71xx-mdio:01, uid=004dd041
eth0: PHY found at ag71xx-mdio:02, uid=004dd041
eth0: PHY found at ag71xx-mdio:03, uid=004dd041
eth0: connected to 3 PHYs
eth1: Atheros AG71xx at 0xba000000, irq 5
eth1: PHY found at ag71xx-mdio:04, uid=004dd041
---MH eth1: AR8316 PHY driver attached.[BusAddr4]
---MH swconfig: switch_register ed. Switch name:Atheros AR8316; eth1. Netdev name:eth1
---MH registering switch OK!
---MH AR8312 HW initialized successfully.
eth1: connected to PHY at ag71xx-mdio:04 [uid=004dd041, driver=Atheros AR8216/AR8316]
IMQ driver loaded successfully.
        Hooking IMQ before NAT on PREROUTING.
        Hooking IMQ after NAT on POSTROUTING.
Atheros AR71xx hardware watchdog driver version 0.1.0


Oct 25, 2012
Prepare a IPn4G testlab bute with special feature: lte and wifi are defaulted to off and user can turn them on later:
Change 2 files (but don't check in) and rebuild:
1. [Jeff@DENG0033 ar71xx_IPn4G]$ rm build_dir/target-mips_r2_uClibc-0.9.30.1/VIP4G -rf  (package/VIP4G/files/lte.config file is changed. option disabled  1)
2. [Jeff@DENG0033 ar71xx_IPn4G]$ rm build_dir/linux-ar71xx/compat-wireless-microhard -rf (/package/mac80211/files/lib/wifi/mac80211.sh is changed. option disabled 1)


Oct 24,2012
the console_quiet in bootargs controls kernel's print output. 0 means output all while 2 means minimal output. The CONSOLE_QUIET env defines the UBoot print out.

<6>MH Atheros device [ver=0, rev=77, phy_id=004dd041]
<6>MH Atheros device [ver=0, rev=77, phy_id=004dd041]
<6>MH Atheros device [ver=0, rev=77, phy_id=004dd041]
<6>MH Atheros device [ver=0, rev=77, phy_id=004dd041]
<6>ag71xx_mdio: probed
<6>eth0: Atheros AG71xx at 0xb9000000, irq 4
<7>eth0: connected to 3 PHYs
<6>eth1: Atheros AG71xx at 0xba000000, irq 5
<6>MicroHard eth1: AR8316 PHY driver attached.
<7>eth1: connected to PHY at ag71xx-mdio:04 [uid=004dd041, driver=Atheros AR8216/AR8316]
<6>IMQ driver loaded successfully.


Oct 22, 2012
Learn how to build VIP4G test lab unit. And IPn4G test lab.

Oct 18, 2012
OpenWRT R20722 in trunk has the AR8316 driver ready. 2 patches don't work well and chunk errors are reported when patching. Manually modify the files.

Oct 15, 2012
Start the VLAN study. VIP2.0 has 1 port but has VLAN functionality on app level. VIP4G has 3 ports and should have the driver level VLAN functionality.
Read AR8316 DS.


